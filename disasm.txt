
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 9f f7 00 00       	call   c000f7bf <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 a3 63 02 00       	call   c00263c8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 24 6f 02 c0       	mov    ebx,0xc0026f24
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 30 6f 02 c0    	cmp    ebx,0xc0026f30
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 6c b0 02 c0       	mov    eax,0xc002b06c
c0000049:	3d 6c b0 02 c0       	cmp    eax,0xc002b06c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 6c b0 02 c0       	push   0xc002b06c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 6c b0 02 c0       	mov    eax,0xc002b06c
c0000075:	2d 6c b0 02 c0       	sub    eax,0xc002b06c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 6c b0 02 c0       	push   0xc002b06c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 9c b6 02 c0 00 	cmp    BYTE PTR ds:0xc002b69c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 38 6f 02 c0       	mov    ebx,0xc0026f38
c00000bb:	81 eb 34 6f 02 c0    	sub    ebx,0xc0026f34
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 34 6f 02 c0       	mov    esi,0xc0026f34
c00000ca:	a1 a0 b6 02 c0       	mov    eax,ds:0xc002b6a0
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 a0 b6 02 c0       	mov    ds:0xc002b6a0,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 a0 b6 02 c0       	mov    eax,ds:0xc002b6a0
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 6c b0 02 c0       	push   0xc002b06c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 9c b6 02 c0 01 	mov    BYTE PTR ds:0xc002b69c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 a4 b6 02 c0       	push   0xc002b6a4
c000012c:	68 6c b0 02 c0       	push   0xc002b06c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	55                   	push   ebp
c00002b0:	89 e5                	mov    ebp,esp
c00002b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002be:	25 ff ff 00 00       	and    eax,0xffff
c00002c3:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002c9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002cf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d5:	52                   	push   edx
c00002d6:	51                   	push   ecx
c00002d7:	68 02 02 02 00       	push   0x20202
c00002dc:	53                   	push   ebx
c00002dd:	50                   	push   eax
c00002de:	cf                   	iret   

c00002df <goToUsermode>:
c00002df:	55                   	push   ebp
c00002e0:	89 e5                	mov    ebp,esp
c00002e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e5:	66 b8 23 00          	mov    ax,0x23
c00002e9:	66 8e d8             	mov    ds,ax
c00002ec:	66 8e c0             	mov    es,ax
c00002ef:	66 8e e0             	mov    fs,ax
c00002f2:	66 8e e8             	mov    gs,ax
c00002f5:	89 e0                	mov    eax,esp
c00002f7:	68 23 00 00 00       	push   0x23
c00002fc:	50                   	push   eax
c00002fd:	68 02 02 00 00       	push   0x202
c0000302:	68 1b 00 00 00       	push   0x1b
c0000307:	53                   	push   ebx
c0000308:	cf                   	iret   

c0000309 <switchToThreadASMFirstTime>:
c0000309:	9c                   	pushf  
c000030a:	fa                   	cli    
c000030b:	50                   	push   eax
c000030c:	53                   	push   ebx
c000030d:	51                   	push   ecx
c000030e:	52                   	push   edx
c000030f:	56                   	push   esi
c0000310:	57                   	push   edi
c0000311:	55                   	push   ebp
c0000312:	e9 11 00 00 00       	jmp    c0000328 <commonThreadSwitch>

c0000317 <switchToThreadASM>:
c0000317:	9c                   	pushf  
c0000318:	50                   	push   eax
c0000319:	53                   	push   ebx
c000031a:	51                   	push   ecx
c000031b:	52                   	push   edx
c000031c:	56                   	push   esi
c000031d:	57                   	push   edi
c000031e:	55                   	push   ebp
c000031f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000325:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000328 <commonThreadSwitch>:
c0000328:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000332:	8b 06                	mov    eax,DWORD PTR [esi]
c0000334:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000337:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033a:	0f 20 d9             	mov    ecx,cr3
c000033d:	39 c8                	cmp    eax,ecx
c000033f:	74 03                	je     c0000344 <commonThreadSwitch.doneVAS>
c0000341:	0f 22 d8             	mov    cr3,eax

c0000344 <commonThreadSwitch.doneVAS>:
c0000344:	85 d2                	test   edx,edx
c0000346:	75 11                	jne    c0000359 <commonThreadSwitch.firstTime>
c0000348:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034b:	e8 d4 ba 01 00       	call   c001be24 <changeTSS>
c0000350:	5d                   	pop    ebp
c0000351:	5f                   	pop    edi
c0000352:	5e                   	pop    esi
c0000353:	5a                   	pop    edx
c0000354:	59                   	pop    ecx
c0000355:	5b                   	pop    ebx
c0000356:	58                   	pop    eax
c0000357:	9d                   	popf   
c0000358:	c3                   	ret    

c0000359 <commonThreadSwitch.firstTime>:
c0000359:	fa                   	cli    
c000035a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035d:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000362:	60                   	pusha  
c0000363:	e8 13 21 01 00       	call   c001247b <mapVASFirstTime>
c0000368:	61                   	popa   
c0000369:	89 c4                	mov    esp,eax
c000036b:	56                   	push   esi
c000036c:	52                   	push   edx
c000036d:	e8 b2 ba 01 00       	call   c001be24 <changeTSS>
c0000372:	5a                   	pop    edx
c0000373:	5e                   	pop    esi
c0000374:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037b:	5d                   	pop    ebp
c000037c:	5f                   	pop    edi
c000037d:	5e                   	pop    esi
c000037e:	59                   	pop    ecx
c000037f:	59                   	pop    ecx
c0000380:	5b                   	pop    ebx
c0000381:	58                   	pop    eax
c0000382:	81 c4 04 00 00 00    	add    esp,0x4
c0000388:	6a 02                	push   0x2
c000038a:	9d                   	popf   
c000038b:	52                   	push   edx
c000038c:	e8 c9 be 01 00       	call   c001c25a <taskStartupFunction>
c0000391:	5a                   	pop    edx
c0000392:	50                   	push   eax
c0000393:	ff d2                	call   edx
c0000395:	e8 76 c4 01 00       	call   c001c810 <taskReturned>
c000039a:	e9 fb ff ff ff       	jmp    c000039a <commonThreadSwitch.firstTime+0x41>

c000039f <asmQuickAcquireLock>:
c000039f:	55                   	push   ebp
c00003a0:	89 e5                	mov    ebp,esp
c00003a2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a5 <asmQuickAcquireLock.retry>:
c00003a5:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003aa:	72 02                	jb     c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003ac:	fa                   	cli    
c00003ad:	c3                   	ret    

c00003ae <asmQuickAcquireLock.spin_with_pause>:
c00003ae:	f3 90                	pause  
c00003b0:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b6:	75 f6                	jne    c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003b8:	e9 e8 ff ff ff       	jmp    c00003a5 <asmQuickAcquireLock.retry>

c00003bd <asmQuickReleaseLock>:
c00003bd:	55                   	push   ebp
c00003be:	89 e5                	mov    ebp,esp
c00003c0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c7:	5d                   	pop    ebp
c00003c8:	c3                   	ret    

c00003c9 <asmAcquireLock>:
c00003c9:	55                   	push   ebp
c00003ca:	89 e5                	mov    ebp,esp
c00003cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003cf <asmAcquireLock.retry>:
c00003cf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d4:	72 05                	jb     c00003db <asmAcquireLock.spin_with_pause>
c00003d6:	9c                   	pushf  
c00003d7:	58                   	pop    eax
c00003d8:	fa                   	cli    
c00003d9:	5d                   	pop    ebp
c00003da:	c3                   	ret    

c00003db <asmAcquireLock.spin_with_pause>:
c00003db:	f3 90                	pause  
c00003dd:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e3:	75 f6                	jne    c00003db <asmAcquireLock.spin_with_pause>
c00003e5:	e9 e5 ff ff ff       	jmp    c00003cf <asmAcquireLock.retry>

c00003ea <asmReleaseLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003f9:	52                   	push   edx
c00003fa:	9d                   	popf   
c00003fb:	5d                   	pop    ebp
c00003fc:	c3                   	ret    

c00003fd <loadGDT>:
c00003fd:	0f 01 15 d0 ba 02 c0 	lgdtd  ds:0xc002bad0
c0000404:	66 b8 10 00          	mov    ax,0x10
c0000408:	66 8e d8             	mov    ds,ax
c000040b:	66 8e c0             	mov    es,ax
c000040e:	66 8e e0             	mov    fs,ax
c0000411:	66 8e e8             	mov    gs,ax
c0000414:	66 8e d0             	mov    ss,ax
c0000417:	e9 00 00 00 00       	jmp    c000041c <flush2>

c000041c <flush2>:
c000041c:	c3                   	ret    

c000041d <isr0>:
c000041d:	fa                   	cli    
c000041e:	68 00 00 00 00       	push   0x0
c0000423:	68 00 00 00 00       	push   0x0
c0000428:	e9 44 01 00 00       	jmp    c0000571 <int_common_stub>

c000042d <isr1>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 01                	push   0x1
c0000432:	e9 3a 01 00 00       	jmp    c0000571 <int_common_stub>

c0000437 <isr2>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 02                	push   0x2
c000043c:	e9 30 01 00 00       	jmp    c0000571 <int_common_stub>

c0000441 <isr3>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 03                	push   0x3
c0000446:	e9 26 01 00 00       	jmp    c0000571 <int_common_stub>

c000044b <isr4>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 04                	push   0x4
c0000450:	e9 1c 01 00 00       	jmp    c0000571 <int_common_stub>

c0000455 <isr5>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 05                	push   0x5
c000045a:	e9 12 01 00 00       	jmp    c0000571 <int_common_stub>

c000045f <isr6>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 06                	push   0x6
c0000464:	e9 08 01 00 00       	jmp    c0000571 <int_common_stub>

c0000469 <isr7>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 07                	push   0x7
c000046e:	e9 fe 00 00 00       	jmp    c0000571 <int_common_stub>

c0000473 <isr8>:
c0000473:	fa                   	cli    
c0000474:	6a 08                	push   0x8
c0000476:	e9 f6 00 00 00       	jmp    c0000571 <int_common_stub>

c000047b <isr9>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 09                	push   0x9
c0000480:	e9 ec 00 00 00       	jmp    c0000571 <int_common_stub>

c0000485 <isr10>:
c0000485:	fa                   	cli    
c0000486:	6a 0a                	push   0xa
c0000488:	e9 e4 00 00 00       	jmp    c0000571 <int_common_stub>

c000048d <isr11>:
c000048d:	fa                   	cli    
c000048e:	6a 0b                	push   0xb
c0000490:	e9 dc 00 00 00       	jmp    c0000571 <int_common_stub>

c0000495 <isr12>:
c0000495:	fa                   	cli    
c0000496:	6a 0c                	push   0xc
c0000498:	e9 d4 00 00 00       	jmp    c0000571 <int_common_stub>

c000049d <isr13>:
c000049d:	fa                   	cli    
c000049e:	6a 0d                	push   0xd
c00004a0:	e9 cc 00 00 00       	jmp    c0000571 <int_common_stub>

c00004a5 <isr14>:
c00004a5:	fa                   	cli    
c00004a6:	6a 0e                	push   0xe
c00004a8:	e9 c4 00 00 00       	jmp    c0000571 <int_common_stub>

c00004ad <isr15>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 0f                	push   0xf
c00004b2:	e9 ba 00 00 00       	jmp    c0000571 <int_common_stub>

c00004b7 <isr16>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 10                	push   0x10
c00004bc:	e9 b0 00 00 00       	jmp    c0000571 <int_common_stub>

c00004c1 <isr17>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 11                	push   0x11
c00004c6:	e9 a6 00 00 00       	jmp    c0000571 <int_common_stub>

c00004cb <isr18>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 12                	push   0x12
c00004d0:	e9 9c 00 00 00       	jmp    c0000571 <int_common_stub>

c00004d5 <irq3>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 23                	push   0x23
c00004da:	e9 92 00 00 00       	jmp    c0000571 <int_common_stub>

c00004df <irq4>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 24                	push   0x24
c00004e4:	e9 88 00 00 00       	jmp    c0000571 <int_common_stub>

c00004e9 <irq5>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 25                	push   0x25
c00004ee:	e9 7e 00 00 00       	jmp    c0000571 <int_common_stub>

c00004f3 <irq6>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 26                	push   0x26
c00004f8:	e9 74 00 00 00       	jmp    c0000571 <int_common_stub>

c00004fd <irq7>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 27                	push   0x27
c0000502:	e9 6a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000507 <irq8>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 28                	push   0x28
c000050c:	e9 60 00 00 00       	jmp    c0000571 <int_common_stub>

c0000511 <irq9>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 29                	push   0x29
c0000516:	e9 56 00 00 00       	jmp    c0000571 <int_common_stub>

c000051b <irq10>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 2a                	push   0x2a
c0000520:	e9 4c 00 00 00       	jmp    c0000571 <int_common_stub>

c0000525 <irq11>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 2b                	push   0x2b
c000052a:	e9 42 00 00 00       	jmp    c0000571 <int_common_stub>

c000052f <irq12>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 2c                	push   0x2c
c0000534:	e9 38 00 00 00       	jmp    c0000571 <int_common_stub>

c0000539 <irq13>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 2d                	push   0x2d
c000053e:	e9 2e 00 00 00       	jmp    c0000571 <int_common_stub>

c0000543 <irq14>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 2e                	push   0x2e
c0000548:	e9 24 00 00 00       	jmp    c0000571 <int_common_stub>

c000054d <irq15>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 2f                	push   0x2f
c0000552:	e9 1a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000557 <irq1>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 21                	push   0x21
c000055c:	eb 13                	jmp    c0000571 <int_common_stub>

c000055e <irq2>:
c000055e:	fa                   	cli    
c000055f:	6a 00                	push   0x0
c0000561:	6a 22                	push   0x22
c0000563:	eb 0c                	jmp    c0000571 <int_common_stub>

c0000565 <isr96>:
c0000565:	6a 00                	push   0x0
c0000567:	6a 60                	push   0x60
c0000569:	fb                   	sti    
c000056a:	eb 05                	jmp    c0000571 <int_common_stub>

c000056c <irq0>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 20                	push   0x20

c0000571 <int_common_stub>:
c0000571:	60                   	pusha  
c0000572:	1e                   	push   ds
c0000573:	06                   	push   es
c0000574:	0f a0                	push   fs
c0000576:	0f a8                	push   gs
c0000578:	66 b8 10 00          	mov    ax,0x10
c000057c:	66 8e d8             	mov    ds,ax
c000057f:	66 8e c0             	mov    es,ax
c0000582:	66 8e e0             	mov    fs,ax
c0000585:	66 8e e8             	mov    gs,ax
c0000588:	54                   	push   esp
c0000589:	e8 a5 3d 01 00       	call   c0014333 <int_handler>
c000058e:	81 c4 04 00 00 00    	add    esp,0x4
c0000594:	0f a9                	pop    gs
c0000596:	0f a1                	pop    fs
c0000598:	07                   	pop    es
c0000599:	1f                   	pop    ds
c000059a:	61                   	popa   
c000059b:	81 c4 08 00 00 00    	add    esp,0x8
c00005a1:	cf                   	iret   

c00005a2 <irq16>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 30                	push   0x30
c00005a7:	e9 c5 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ac <irq17>:
c00005ac:	fa                   	cli    
c00005ad:	6a 00                	push   0x0
c00005af:	6a 31                	push   0x31
c00005b1:	e9 bb ff ff ff       	jmp    c0000571 <int_common_stub>

c00005b6 <irq18>:
c00005b6:	fa                   	cli    
c00005b7:	6a 00                	push   0x0
c00005b9:	6a 32                	push   0x32
c00005bb:	e9 b1 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005c0 <irq19>:
c00005c0:	fa                   	cli    
c00005c1:	6a 00                	push   0x0
c00005c3:	6a 33                	push   0x33
c00005c5:	e9 a7 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ca <irq20>:
c00005ca:	fa                   	cli    
c00005cb:	6a 00                	push   0x0
c00005cd:	6a 34                	push   0x34
c00005cf:	e9 9d ff ff ff       	jmp    c0000571 <int_common_stub>

c00005d4 <irq21>:
c00005d4:	fa                   	cli    
c00005d5:	6a 00                	push   0x0
c00005d7:	6a 35                	push   0x35
c00005d9:	e9 93 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005de <irq22>:
c00005de:	fa                   	cli    
c00005df:	6a 00                	push   0x0
c00005e1:	6a 36                	push   0x36
c00005e3:	e9 89 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005e8 <irq23>:
c00005e8:	fa                   	cli    
c00005e9:	6a 00                	push   0x0
c00005eb:	6a 37                	push   0x37
c00005ed:	e9 7f ff ff ff       	jmp    c0000571 <int_common_stub>

c00005f2 <memcmp>:
c00005f2:	56                   	push   esi
c00005f3:	53                   	push   ebx
c00005f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000600:	01 d6                	add    esi,edx
c0000602:	39 f2                	cmp    edx,esi
c0000604:	74 0e                	je     c0000614 <memcmp+0x22>
c0000606:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000609:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000060c:	38 c8                	cmp    al,cl
c000060e:	75 08                	jne    c0000618 <memcmp+0x26>
c0000610:	42                   	inc    edx
c0000611:	43                   	inc    ebx
c0000612:	eb ee                	jmp    c0000602 <memcmp+0x10>
c0000614:	31 c0                	xor    eax,eax
c0000616:	eb 02                	jmp    c000061a <memcmp+0x28>
c0000618:	29 c8                	sub    eax,ecx
c000061a:	5b                   	pop    ebx
c000061b:	5e                   	pop    esi
c000061c:	c3                   	ret    

c000061d <memmove>:
c000061d:	56                   	push   esi
c000061e:	53                   	push   ebx
c000061f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000623:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000062b:	39 c8                	cmp    eax,ecx
c000062d:	73 12                	jae    c0000641 <memmove+0x24>
c000062f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000632:	89 c3                	mov    ebx,eax
c0000634:	39 f1                	cmp    ecx,esi
c0000636:	74 1a                	je     c0000652 <memmove+0x35>
c0000638:	8a 11                	mov    dl,BYTE PTR [ecx]
c000063a:	43                   	inc    ebx
c000063b:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000063e:	41                   	inc    ecx
c000063f:	eb f3                	jmp    c0000634 <memmove+0x17>
c0000641:	76 0f                	jbe    c0000652 <memmove+0x35>
c0000643:	85 d2                	test   edx,edx
c0000645:	74 0b                	je     c0000652 <memmove+0x35>
c0000647:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000064b:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000064f:	4a                   	dec    edx
c0000650:	eb f1                	jmp    c0000643 <memmove+0x26>
c0000652:	5b                   	pop    ebx
c0000653:	5e                   	pop    esi
c0000654:	c3                   	ret    

c0000655 <memcpy>:
c0000655:	57                   	push   edi
c0000656:	56                   	push   esi
c0000657:	53                   	push   ebx
c0000658:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000660:	89 da                	mov    edx,ebx
c0000662:	89 d9                	mov    ecx,ebx
c0000664:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000668:	83 e2 fc             	and    edx,0xfffffffc
c000066b:	c1 e9 02             	shr    ecx,0x2
c000066e:	89 c7                	mov    edi,eax
c0000670:	fc                   	cld    
c0000671:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000673:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000676:	01 c2                	add    edx,eax
c0000678:	01 de                	add    esi,ebx
c000067a:	39 f1                	cmp    ecx,esi
c000067c:	74 09                	je     c0000687 <memcpy+0x32>
c000067e:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000680:	42                   	inc    edx
c0000681:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000684:	41                   	inc    ecx
c0000685:	eb f3                	jmp    c000067a <memcpy+0x25>
c0000687:	5b                   	pop    ebx
c0000688:	5e                   	pop    esi
c0000689:	5f                   	pop    edi
c000068a:	c3                   	ret    

c000068b <memset>:
c000068b:	53                   	push   ebx
c000068c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000694:	89 c2                	mov    edx,eax
c0000696:	01 c1                	add    ecx,eax
c0000698:	39 ca                	cmp    edx,ecx
c000069a:	74 0a                	je     c00006a6 <memset+0x1b>
c000069c:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006a0:	42                   	inc    edx
c00006a1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006a4:	eb f2                	jmp    c0000698 <memset+0xd>
c00006a6:	5b                   	pop    ebx
c00006a7:	c3                   	ret    

c00006a8 <strlen>:
c00006a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006ac:	31 c0                	xor    eax,eax
c00006ae:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b2:	74 03                	je     c00006b7 <strlen+0xf>
c00006b4:	40                   	inc    eax
c00006b5:	eb f7                	jmp    c00006ae <strlen+0x6>
c00006b7:	c3                   	ret    

c00006b8 <strpbrk>:
c00006b8:	53                   	push   ebx
c00006b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bd:	8a 08                	mov    cl,BYTE PTR [eax]
c00006bf:	84 c9                	test   cl,cl
c00006c1:	74 14                	je     c00006d7 <strpbrk+0x1f>
c00006c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006c7:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006c9:	84 db                	test   bl,bl
c00006cb:	74 07                	je     c00006d4 <strpbrk+0x1c>
c00006cd:	38 cb                	cmp    bl,cl
c00006cf:	74 08                	je     c00006d9 <strpbrk+0x21>
c00006d1:	42                   	inc    edx
c00006d2:	eb f3                	jmp    c00006c7 <strpbrk+0xf>
c00006d4:	40                   	inc    eax
c00006d5:	eb e6                	jmp    c00006bd <strpbrk+0x5>
c00006d7:	31 c0                	xor    eax,eax
c00006d9:	5b                   	pop    ebx
c00006da:	c3                   	ret    

c00006db <strtok>:
c00006db:	56                   	push   esi
c00006dc:	53                   	push   ebx
c00006dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006e5:	85 db                	test   ebx,ebx
c00006e7:	75 0e                	jne    c00006f7 <strtok+0x1c>
c00006e9:	8b 1d bc b6 02 c0    	mov    ebx,DWORD PTR ds:0xc002b6bc
c00006ef:	85 db                	test   ebx,ebx
c00006f1:	75 04                	jne    c00006f7 <strtok+0x1c>
c00006f3:	31 db                	xor    ebx,ebx
c00006f5:	eb 2e                	jmp    c0000725 <strtok+0x4a>
c00006f7:	56                   	push   esi
c00006f8:	53                   	push   ebx
c00006f9:	e8 ba ff ff ff       	call   c00006b8 <strpbrk>
c00006fe:	5a                   	pop    edx
c00006ff:	a3 bc b6 02 c0       	mov    ds:0xc002b6bc,eax
c0000704:	59                   	pop    ecx
c0000705:	a1 bc b6 02 c0       	mov    eax,ds:0xc002b6bc
c000070a:	39 d8                	cmp    eax,ebx
c000070c:	75 07                	jne    c0000715 <strtok+0x3a>
c000070e:	43                   	inc    ebx
c000070f:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000713:	eb e2                	jmp    c00006f7 <strtok+0x1c>
c0000715:	85 c0                	test   eax,eax
c0000717:	74 da                	je     c00006f3 <strtok+0x18>
c0000719:	8d 50 01             	lea    edx,[eax+0x1]
c000071c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071f:	89 15 bc b6 02 c0    	mov    DWORD PTR ds:0xc002b6bc,edx
c0000725:	89 d8                	mov    eax,ebx
c0000727:	5b                   	pop    ebx
c0000728:	5e                   	pop    esi
c0000729:	c3                   	ret    

c000072a <strcpy>:
c000072a:	53                   	push   ebx
c000072b:	31 d2                	xor    edx,edx
c000072d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000735:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000738:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000073b:	84 c9                	test   cl,cl
c000073d:	74 06                	je     c0000745 <strcpy+0x1b>
c000073f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000742:	42                   	inc    edx
c0000743:	eb ec                	jmp    c0000731 <strcpy+0x7>
c0000745:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000748:	5b                   	pop    ebx
c0000749:	c3                   	ret    

c000074a <strncpy>:
c000074a:	56                   	push   esi
c000074b:	53                   	push   ebx
c000074c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000750:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000754:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000758:	89 c3                	mov    ebx,eax
c000075a:	85 c9                	test   ecx,ecx
c000075c:	74 1a                	je     c0000778 <strncpy+0x2e>
c000075e:	46                   	inc    esi
c000075f:	43                   	inc    ebx
c0000760:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000763:	49                   	dec    ecx
c0000764:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000767:	84 d2                	test   dl,dl
c0000769:	75 ef                	jne    c000075a <strncpy+0x10>
c000076b:	31 d2                	xor    edx,edx
c000076d:	39 d1                	cmp    ecx,edx
c000076f:	74 07                	je     c0000778 <strncpy+0x2e>
c0000771:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000775:	42                   	inc    edx
c0000776:	eb f5                	jmp    c000076d <strncpy+0x23>
c0000778:	5b                   	pop    ebx
c0000779:	5e                   	pop    esi
c000077a:	c3                   	ret    

c000077b <strcmp>:
c000077b:	31 c9                	xor    ecx,ecx
c000077d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000781:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000785:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000789:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000078d:	38 d0                	cmp    al,dl
c000078f:	75 08                	jne    c0000799 <strcmp+0x1e>
c0000791:	41                   	inc    ecx
c0000792:	84 c0                	test   al,al
c0000794:	75 e7                	jne    c000077d <strcmp+0x2>
c0000796:	31 c0                	xor    eax,eax
c0000798:	c3                   	ret    
c0000799:	29 d0                	sub    eax,edx
c000079b:	c3                   	ret    

c000079c <strchr>:
c000079c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007a0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007a2:	84 d2                	test   dl,dl
c00007a4:	74 09                	je     c00007af <strchr+0x13>
c00007a6:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007aa:	74 05                	je     c00007b1 <strchr+0x15>
c00007ac:	40                   	inc    eax
c00007ad:	eb f1                	jmp    c00007a0 <strchr+0x4>
c00007af:	31 c0                	xor    eax,eax
c00007b1:	c3                   	ret    

c00007b2 <strncmp>:
c00007b2:	56                   	push   esi
c00007b3:	53                   	push   ebx
c00007b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c0:	01 d6                	add    esi,edx
c00007c2:	39 f2                	cmp    edx,esi
c00007c4:	74 12                	je     c00007d8 <strncmp+0x26>
c00007c6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007c9:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007cc:	38 c8                	cmp    al,cl
c00007ce:	75 0c                	jne    c00007dc <strncmp+0x2a>
c00007d0:	42                   	inc    edx
c00007d1:	84 c0                	test   al,al
c00007d3:	74 03                	je     c00007d8 <strncmp+0x26>
c00007d5:	43                   	inc    ebx
c00007d6:	eb ea                	jmp    c00007c2 <strncmp+0x10>
c00007d8:	31 c0                	xor    eax,eax
c00007da:	eb 02                	jmp    c00007de <strncmp+0x2c>
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5b                   	pop    ebx
c00007df:	5e                   	pop    esi
c00007e0:	c3                   	ret    

c00007e1 <strcat>:
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007e6:	89 c1                	mov    ecx,eax
c00007e8:	8d 51 01             	lea    edx,[ecx+0x1]
c00007eb:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007ef:	74 04                	je     c00007f5 <strcat+0x14>
c00007f1:	89 d1                	mov    ecx,edx
c00007f3:	eb f3                	jmp    c00007e8 <strcat+0x7>
c00007f5:	31 d2                	xor    edx,edx
c00007f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007fb:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007fe:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000801:	42                   	inc    edx
c0000802:	84 db                	test   bl,bl
c0000804:	75 f1                	jne    c00007f7 <strcat+0x16>
c0000806:	5b                   	pop    ebx
c0000807:	c3                   	ret    

c0000808 <strncat>:
c0000808:	56                   	push   esi
c0000809:	53                   	push   ebx
c000080a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000080e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000812:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000816:	89 c2                	mov    edx,eax
c0000818:	85 db                	test   ebx,ebx
c000081a:	74 23                	je     c000083f <strncat+0x37>
c000081c:	8d 72 01             	lea    esi,[edx+0x1]
c000081f:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000823:	74 04                	je     c0000829 <strncat+0x21>
c0000825:	89 f2                	mov    edx,esi
c0000827:	eb f3                	jmp    c000081c <strncat+0x14>
c0000829:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000082c:	41                   	inc    ecx
c000082d:	42                   	inc    edx
c000082e:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000831:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000834:	84 db                	test   bl,bl
c0000836:	74 07                	je     c000083f <strncat+0x37>
c0000838:	39 f1                	cmp    ecx,esi
c000083a:	75 f0                	jne    c000082c <strncat+0x24>
c000083c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000083f:	5b                   	pop    ebx
c0000840:	5e                   	pop    esi
c0000841:	c3                   	ret    

c0000842 <strstr>:
c0000842:	57                   	push   edi
c0000843:	56                   	push   esi
c0000844:	53                   	push   ebx
c0000845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000849:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084d:	57                   	push   edi
c000084e:	e8 55 fe ff ff       	call   c00006a8 <strlen>
c0000853:	59                   	pop    ecx
c0000854:	89 c6                	mov    esi,eax
c0000856:	85 c0                	test   eax,eax
c0000858:	74 1f                	je     c0000879 <strstr+0x37>
c000085a:	53                   	push   ebx
c000085b:	e8 48 fe ff ff       	call   c00006a8 <strlen>
c0000860:	5a                   	pop    edx
c0000861:	39 f0                	cmp    eax,esi
c0000863:	72 12                	jb     c0000877 <strstr+0x35>
c0000865:	56                   	push   esi
c0000866:	57                   	push   edi
c0000867:	53                   	push   ebx
c0000868:	e8 85 fd ff ff       	call   c00005f2 <memcmp>
c000086d:	83 c4 0c             	add    esp,0xc
c0000870:	85 c0                	test   eax,eax
c0000872:	74 05                	je     c0000879 <strstr+0x37>
c0000874:	43                   	inc    ebx
c0000875:	eb e3                	jmp    c000085a <strstr+0x18>
c0000877:	31 db                	xor    ebx,ebx
c0000879:	89 d8                	mov    eax,ebx
c000087b:	5b                   	pop    ebx
c000087c:	5e                   	pop    esi
c000087d:	5f                   	pop    edi
c000087e:	c3                   	ret    

c000087f <toupper>:
c000087f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000883:	0f b6 d0             	movzx  edx,al
c0000886:	f6 82 40 6f 02 c0 02 	test   BYTE PTR [edx-0x3ffd90c0],0x2
c000088d:	74 03                	je     c0000892 <toupper+0x13>
c000088f:	83 e8 20             	sub    eax,0x20
c0000892:	c3                   	ret    

c0000893 <tolower>:
c0000893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000897:	0f b6 d0             	movzx  edx,al
c000089a:	f6 82 40 6f 02 c0 01 	test   BYTE PTR [edx-0x3ffd90c0],0x1
c00008a1:	74 03                	je     c00008a6 <tolower+0x13>
c00008a3:	83 c0 20             	add    eax,0x20
c00008a6:	c3                   	ret    

c00008a7 <simple_strtoul>:
c00008a7:	55                   	push   ebp
c00008a8:	57                   	push   edi
c00008a9:	56                   	push   esi
c00008aa:	53                   	push   ebx
c00008ab:	83 ec 08             	sub    esp,0x8
c00008ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008b6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008b9:	f6 82 40 6f 02 c0 08 	test   BYTE PTR [edx-0x3ffd90c0],0x8
c00008c0:	74 03                	je     c00008c5 <simple_strtoul+0x1e>
c00008c2:	41                   	inc    ecx
c00008c3:	eb f1                	jmp    c00008b6 <simple_strtoul+0xf>
c00008c5:	80 fa 09             	cmp    dl,0x9
c00008c8:	74 f8                	je     c00008c2 <simple_strtoul+0x1b>
c00008ca:	80 fa 2d             	cmp    dl,0x2d
c00008cd:	75 0b                	jne    c00008da <simple_strtoul+0x33>
c00008cf:	41                   	inc    ecx
c00008d0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d8:	eb 0e                	jmp    c00008e8 <simple_strtoul+0x41>
c00008da:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008e2:	80 fa 2b             	cmp    dl,0x2b
c00008e5:	75 01                	jne    c00008e8 <simple_strtoul+0x41>
c00008e7:	41                   	inc    ecx
c00008e8:	85 f6                	test   esi,esi
c00008ea:	75 22                	jne    c000090e <simple_strtoul+0x67>
c00008ec:	be 0a 00 00 00       	mov    esi,0xa
c00008f1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008f4:	75 5a                	jne    c0000950 <simple_strtoul+0xa9>
c00008f6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008fa:	50                   	push   eax
c00008fb:	e8 93 ff ff ff       	call   c0000893 <tolower>
c0000900:	5a                   	pop    edx
c0000901:	83 f8 78             	cmp    eax,0x78
c0000904:	74 03                	je     c0000909 <simple_strtoul+0x62>
c0000906:	41                   	inc    ecx
c0000907:	eb 16                	jmp    c000091f <simple_strtoul+0x78>
c0000909:	83 c1 02             	add    ecx,0x2
c000090c:	eb 22                	jmp    c0000930 <simple_strtoul+0x89>
c000090e:	8d 46 fe             	lea    eax,[esi-0x2]
c0000911:	83 f8 22             	cmp    eax,0x22
c0000914:	0f 87 b7 00 00 00    	ja     c00009d1 <simple_strtoul+0x12a>
c000091a:	83 fe 08             	cmp    esi,0x8
c000091d:	75 0c                	jne    c000092b <simple_strtoul+0x84>
c000091f:	be 08 00 00 00       	mov    esi,0x8
c0000924:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000927:	75 27                	jne    c0000950 <simple_strtoul+0xa9>
c0000929:	eb 1f                	jmp    c000094a <simple_strtoul+0xa3>
c000092b:	83 fe 10             	cmp    esi,0x10
c000092e:	75 20                	jne    c0000950 <simple_strtoul+0xa9>
c0000930:	be 10 00 00 00       	mov    esi,0x10
c0000935:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000938:	75 16                	jne    c0000950 <simple_strtoul+0xa9>
c000093a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000093e:	50                   	push   eax
c000093f:	e8 4f ff ff ff       	call   c0000893 <tolower>
c0000944:	5d                   	pop    ebp
c0000945:	83 f8 78             	cmp    eax,0x78
c0000948:	74 03                	je     c000094d <simple_strtoul+0xa6>
c000094a:	41                   	inc    ecx
c000094b:	eb 03                	jmp    c0000950 <simple_strtoul+0xa9>
c000094d:	83 c1 02             	add    ecx,0x2
c0000950:	31 ed                	xor    ebp,ebp
c0000952:	31 db                	xor    ebx,ebx
c0000954:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000095b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000095d:	84 d2                	test   dl,dl
c000095f:	74 27                	je     c0000988 <simple_strtoul+0xe1>
c0000961:	0f b6 fa             	movzx  edi,dl
c0000964:	f6 87 40 6f 02 c0 04 	test   BYTE PTR [edi-0x3ffd90c0],0x4
c000096b:	74 05                	je     c0000972 <simple_strtoul+0xcb>
c000096d:	83 ef 30             	sub    edi,0x30
c0000970:	eb 22                	jmp    c0000994 <simple_strtoul+0xed>
c0000972:	0f be d2             	movsx  edx,dl
c0000975:	52                   	push   edx
c0000976:	e8 04 ff ff ff       	call   c000087f <toupper>
c000097b:	5f                   	pop    edi
c000097c:	0f b6 d0             	movzx  edx,al
c000097f:	f6 82 40 6f 02 c0 01 	test   BYTE PTR [edx-0x3ffd90c0],0x1
c0000986:	75 09                	jne    c0000991 <simple_strtoul+0xea>
c0000988:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000098d:	75 2d                	jne    c00009bc <simple_strtoul+0x115>
c000098f:	eb 57                	jmp    c00009e8 <simple_strtoul+0x141>
c0000991:	8d 78 c9             	lea    edi,[eax-0x37]
c0000994:	39 f7                	cmp    edi,esi
c0000996:	73 f0                	jae    c0000988 <simple_strtoul+0xe1>
c0000998:	31 d2                	xor    edx,edx
c000099a:	89 f8                	mov    eax,edi
c000099c:	f7 d0                	not    eax
c000099e:	f7 f6                	div    esi
c00009a0:	39 d8                	cmp    eax,ebx
c00009a2:	72 0e                	jb     c00009b2 <simple_strtoul+0x10b>
c00009a4:	0f af de             	imul   ebx,esi
c00009a7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009ae:	01 fb                	add    ebx,edi
c00009b0:	eb 07                	jmp    c00009b9 <simple_strtoul+0x112>
c00009b2:	bd 01 00 00 00       	mov    ebp,0x1
c00009b7:	31 db                	xor    ebx,ebx
c00009b9:	41                   	inc    ecx
c00009ba:	eb 9f                	jmp    c000095b <simple_strtoul+0xb4>
c00009bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009bf:	09 d8                	or     eax,ebx
c00009c1:	75 1f                	jne    c00009e2 <simple_strtoul+0x13b>
c00009c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009cb:	31 db                	xor    ebx,ebx
c00009cd:	89 38                	mov    DWORD PTR [eax],edi
c00009cf:	eb 17                	jmp    c00009e8 <simple_strtoul+0x141>
c00009d1:	31 db                	xor    ebx,ebx
c00009d3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009d8:	74 14                	je     c00009ee <simple_strtoul+0x147>
c00009da:	31 ed                	xor    ebp,ebp
c00009dc:	85 c9                	test   ecx,ecx
c00009de:	75 e3                	jne    c00009c3 <simple_strtoul+0x11c>
c00009e0:	31 db                	xor    ebx,ebx
c00009e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e6:	89 08                	mov    DWORD PTR [eax],ecx
c00009e8:	4d                   	dec    ebp
c00009e9:	75 03                	jne    c00009ee <simple_strtoul+0x147>
c00009eb:	83 cb ff             	or     ebx,0xffffffff
c00009ee:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009f3:	75 02                	jne    c00009f7 <simple_strtoul+0x150>
c00009f5:	f7 db                	neg    ebx
c00009f7:	83 c4 08             	add    esp,0x8
c00009fa:	89 d8                	mov    eax,ebx
c00009fc:	5b                   	pop    ebx
c00009fd:	5e                   	pop    esi
c00009fe:	5f                   	pop    edi
c00009ff:	5d                   	pop    ebp
c0000a00:	c3                   	ret    

c0000a01 <largebin_index>:
c0000a01:	89 c2                	mov    edx,eax
c0000a03:	c1 ea 08             	shr    edx,0x8
c0000a06:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a0c:	77 10                	ja     c0000a1e <largebin_index+0x1d>
c0000a0e:	0f bd d2             	bsr    edx,edx
c0000a11:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a14:	d3 e8                	shr    eax,cl
c0000a16:	83 e0 03             	and    eax,0x3
c0000a19:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a1d:	c3                   	ret    
c0000a1e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a23:	c3                   	ret    

c0000a24 <malloc_init_state>:
c0000a24:	53                   	push   ebx
c0000a25:	8d 50 34             	lea    edx,[eax+0x34]
c0000a28:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a2e:	89 d1                	mov    ecx,edx
c0000a30:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a33:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a36:	83 c2 08             	add    edx,0x8
c0000a39:	39 da                	cmp    edx,ebx
c0000a3b:	75 f3                	jne    c0000a30 <malloc_init_state+0xc>
c0000a3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a3f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a49:	83 e2 03             	and    edx,0x3
c0000a4c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a56:	83 ca 48             	or     edx,0x48
c0000a59:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a63:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a6d:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a74:	89 10                	mov    DWORD PTR [eax],edx
c0000a76:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a79:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a83:	5b                   	pop    ebx
c0000a84:	c3                   	ret    

c0000a85 <malloc_consolidate>:
c0000a85:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a87:	85 d2                	test   edx,edx
c0000a89:	0f 84 d8 00 00 00    	je     c0000b67 <malloc_consolidate+0xe2>
c0000a8f:	55                   	push   ebp
c0000a90:	83 e2 fd             	and    edx,0xfffffffd
c0000a93:	57                   	push   edi
c0000a94:	89 c5                	mov    ebp,eax
c0000a96:	56                   	push   esi
c0000a97:	8d 78 34             	lea    edi,[eax+0x34]
c0000a9a:	53                   	push   ebx
c0000a9b:	83 ec 10             	sub    esp,0x10
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aa4:	c1 ea 03             	shr    edx,0x3
c0000aa7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000aab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aaf:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ab2:	85 d2                	test   edx,edx
c0000ab4:	0f 84 98 00 00 00    	je     c0000b52 <malloc_consolidate+0xcd>
c0000aba:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ac1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ac4:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ac7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000acb:	89 f9                	mov    ecx,edi
c0000acd:	83 e1 fe             	and    ecx,0xfffffffe
c0000ad0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ad3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ad6:	83 e3 fc             	and    ebx,0xfffffffc
c0000ad9:	83 e7 01             	and    edi,0x1
c0000adc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000adf:	75 14                	jne    c0000af5 <malloc_consolidate+0x70>
c0000ae1:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ae3:	29 fa                	sub    edx,edi
c0000ae5:	01 f9                	add    ecx,edi
c0000ae7:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000aea:	89 fb                	mov    ebx,edi
c0000aec:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000aef:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000af2:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000af5:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000af8:	74 40                	je     c0000b3a <malloc_consolidate+0xb5>
c0000afa:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000afd:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b00:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b04:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b07:	83 e7 01             	and    edi,0x1
c0000b0a:	75 0e                	jne    c0000b1a <malloc_consolidate+0x95>
c0000b0c:	01 d9                	add    ecx,ebx
c0000b0e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b11:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b14:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b17:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b1a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b1d:	89 ce                	mov    esi,ecx
c0000b1f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b22:	83 ce 01             	or     esi,0x1
c0000b25:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b28:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b2b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b32:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b35:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b38:	eb 0c                	jmp    c0000b46 <malloc_consolidate+0xc1>
c0000b3a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b43:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b4a:	85 d2                	test   edx,edx
c0000b4c:	0f 85 6f ff ff ff    	jne    c0000ac1 <malloc_consolidate+0x3c>
c0000b52:	83 c5 04             	add    ebp,0x4
c0000b55:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b59:	0f 85 50 ff ff ff    	jne    c0000aaf <malloc_consolidate+0x2a>
c0000b5f:	83 c4 10             	add    esp,0x10
c0000b62:	5b                   	pop    ebx
c0000b63:	5e                   	pop    esi
c0000b64:	5f                   	pop    edi
c0000b65:	5d                   	pop    ebp
c0000b66:	c3                   	ret    
c0000b67:	e9 b8 fe ff ff       	jmp    c0000a24 <malloc_init_state>

c0000b6c <dlfree>:
c0000b6c:	57                   	push   edi
c0000b6d:	56                   	push   esi
c0000b6e:	53                   	push   ebx
c0000b6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b73:	85 db                	test   ebx,ebx
c0000b75:	0f 84 e2 00 00 00    	je     c0000c5d <dlfree+0xf1>
c0000b7b:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b7e:	8b 0d c0 b6 02 c0    	mov    ecx,DWORD PTR ds:0xc002b6c0
c0000b84:	89 f0                	mov    eax,esi
c0000b86:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b89:	83 e0 fc             	and    eax,0xfffffffc
c0000b8c:	39 c1                	cmp    ecx,eax
c0000b8e:	72 24                	jb     c0000bb4 <dlfree+0x48>
c0000b90:	83 c9 03             	or     ecx,0x3
c0000b93:	c1 e8 03             	shr    eax,0x3
c0000b96:	89 0d c0 b6 02 c0    	mov    DWORD PTR ds:0xc002b6c0,ecx
c0000b9c:	83 e8 02             	sub    eax,0x2
c0000b9f:	8b 0c 85 c4 b6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd493c]
c0000ba6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000ba8:	89 14 85 c4 b6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd493c],edx
c0000baf:	e9 a9 00 00 00       	jmp    c0000c5d <dlfree+0xf1>
c0000bb4:	83 e6 02             	and    esi,0x2
c0000bb7:	0f 85 a0 00 00 00    	jne    c0000c5d <dlfree+0xf1>
c0000bbd:	83 c9 01             	or     ecx,0x1
c0000bc0:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bc3:	89 0d c0 b6 02 c0    	mov    DWORD PTR ds:0xc002b6c0,ecx
c0000bc9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bcc:	83 e1 fc             	and    ecx,0xfffffffc
c0000bcf:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bd3:	75 13                	jne    c0000be8 <dlfree+0x7c>
c0000bd5:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bd8:	29 da                	sub    edx,ebx
c0000bda:	01 d8                	add    eax,ebx
c0000bdc:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bdf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000be2:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000be5:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000be8:	39 35 ec b6 02 c0    	cmp    DWORD PTR ds:0xc002b6ec,esi
c0000bee:	74 40                	je     c0000c30 <dlfree+0xc4>
c0000bf0:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000bf4:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000bf7:	80 e3 01             	and    bl,0x1
c0000bfa:	75 0e                	jne    c0000c0a <dlfree+0x9e>
c0000bfc:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bff:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c02:	01 c8                	add    eax,ecx
c0000c04:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c07:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c0a:	8b 0d fc b6 02 c0    	mov    ecx,DWORD PTR ds:0xc002b6fc
c0000c10:	c7 42 0c f4 b6 02 c0 	mov    DWORD PTR [edx+0xc],0xc002b6f4
c0000c17:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c1a:	89 15 fc b6 02 c0    	mov    DWORD PTR ds:0xc002b6fc,edx
c0000c20:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c23:	89 c1                	mov    ecx,eax
c0000c25:	83 c9 01             	or     ecx,0x1
c0000c28:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c2e:	eb 10                	jmp    c0000c40 <dlfree+0xd4>
c0000c30:	01 c8                	add    eax,ecx
c0000c32:	89 c1                	mov    ecx,eax
c0000c34:	83 c9 01             	or     ecx,0x1
c0000c37:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c3a:	89 15 ec b6 02 c0    	mov    DWORD PTR ds:0xc002b6ec,edx
c0000c40:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c45:	76 16                	jbe    c0000c5d <dlfree+0xf1>
c0000c47:	f6 05 c0 b6 02 c0 02 	test   BYTE PTR ds:0xc002b6c0,0x2
c0000c4e:	74 0d                	je     c0000c5d <dlfree+0xf1>
c0000c50:	5b                   	pop    ebx
c0000c51:	b8 c0 b6 02 c0       	mov    eax,0xc002b6c0
c0000c56:	5e                   	pop    esi
c0000c57:	5f                   	pop    edi
c0000c58:	e9 28 fe ff ff       	jmp    c0000a85 <malloc_consolidate>
c0000c5d:	5b                   	pop    ebx
c0000c5e:	5e                   	pop    esi
c0000c5f:	5f                   	pop    edi
c0000c60:	c3                   	ret    

c0000c61 <sYSMALLOc>:
c0000c61:	55                   	push   ebp
c0000c62:	57                   	push   edi
c0000c63:	56                   	push   esi
c0000c64:	53                   	push   ebx
c0000c65:	89 d3                	mov    ebx,edx
c0000c67:	83 ec 2c             	sub    esp,0x2c
c0000c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c6e:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c74:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c77:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c7e:	74 1f                	je     c0000c9f <sYSMALLOc+0x3e>
c0000c80:	89 d8                	mov    eax,ebx
c0000c82:	e8 fe fd ff ff       	call   c0000a85 <malloc_consolidate>
c0000c87:	83 ec 0c             	sub    esp,0xc
c0000c8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c8e:	83 e8 07             	sub    eax,0x7
c0000c91:	50                   	push   eax
c0000c92:	e8 30 02 00 00       	call   c0000ec7 <dlmalloc>
c0000c97:	83 c4 10             	add    esp,0x10
c0000c9a:	e9 20 02 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000c9f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ca2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ca8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cab:	83 e0 fc             	and    eax,0xfffffffc
c0000cae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cb6:	83 c0 10             	add    eax,0x10
c0000cb9:	01 c1                	add    ecx,eax
c0000cbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cc6:	74 04                	je     c0000ccc <sYSMALLOc+0x6b>
c0000cc8:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ccc:	f7 da                	neg    edx
c0000cce:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cd6:	21 d1                	and    ecx,edx
c0000cd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cdc:	7f 07                	jg     c0000ce5 <sYSMALLOc+0x84>
c0000cde:	31 c0                	xor    eax,eax
c0000ce0:	e9 da 01 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000ce5:	83 ec 0c             	sub    esp,0xc
c0000ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cec:	e8 36 e6 00 00       	call   c000f327 <sbrk>
c0000cf1:	83 c4 10             	add    esp,0x10
c0000cf4:	89 c6                	mov    esi,eax
c0000cf6:	83 f8 ff             	cmp    eax,0xffffffff
c0000cf9:	74 e3                	je     c0000cde <sYSMALLOc+0x7d>
c0000cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cff:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d03:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d06:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d0c:	39 f1                	cmp    ecx,esi
c0000d0e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d14:	75 13                	jne    c0000d29 <sYSMALLOc+0xc8>
c0000d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d1a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d1e:	83 c8 01             	or     eax,0x1
c0000d21:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d24:	e9 3e 01 00 00       	jmp    c0000e67 <sYSMALLOc+0x206>
c0000d29:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d2f:	88 d0                	mov    al,dl
c0000d31:	83 e0 01             	and    eax,0x1
c0000d34:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d39:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d3d:	0f 95 c0             	setne  al
c0000d40:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d44:	39 f1                	cmp    ecx,esi
c0000d46:	76 12                	jbe    c0000d5a <sYSMALLOc+0xf9>
c0000d48:	84 c0                	test   al,al
c0000d4a:	74 0e                	je     c0000d5a <sYSMALLOc+0xf9>
c0000d4c:	83 e2 fe             	and    edx,0xfffffffe
c0000d4f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d55:	e9 83 00 00 00       	jmp    c0000ddd <sYSMALLOc+0x17c>
c0000d5a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d5f:	74 7c                	je     c0000ddd <sYSMALLOc+0x17c>
c0000d61:	84 c0                	test   al,al
c0000d63:	74 0c                	je     c0000d71 <sYSMALLOc+0x110>
c0000d65:	89 f0                	mov    eax,esi
c0000d67:	29 c8                	sub    eax,ecx
c0000d69:	01 e8                	add    eax,ebp
c0000d6b:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d71:	89 f2                	mov    edx,esi
c0000d73:	83 e2 07             	and    edx,0x7
c0000d76:	74 0c                	je     c0000d84 <sYSMALLOc+0x123>
c0000d78:	b8 08 00 00 00       	mov    eax,0x8
c0000d7d:	29 d0                	sub    eax,edx
c0000d7f:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d82:	eb 04                	jmp    c0000d88 <sYSMALLOc+0x127>
c0000d84:	89 f5                	mov    ebp,esi
c0000d86:	31 c0                	xor    eax,eax
c0000d88:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d94:	01 c1                	add    ecx,eax
c0000d96:	83 ec 0c             	sub    esp,0xc
c0000d99:	01 f1                	add    ecx,esi
c0000d9b:	01 ca                	add    edx,ecx
c0000d9d:	29 c8                	sub    eax,ecx
c0000d9f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000da3:	01 c2                	add    edx,eax
c0000da5:	52                   	push   edx
c0000da6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000daa:	e8 78 e5 00 00       	call   c000f327 <sbrk>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	83 f8 ff             	cmp    eax,0xffffffff
c0000db5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000db9:	75 0f                	jne    c0000dca <sYSMALLOc+0x169>
c0000dbb:	83 ec 0c             	sub    esp,0xc
c0000dbe:	6a 00                	push   0x0
c0000dc0:	e8 62 e5 00 00       	call   c000f327 <sbrk>
c0000dc5:	83 c4 10             	add    esp,0x10
c0000dc8:	eb 30                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000dca:	39 c6                	cmp    esi,eax
c0000dcc:	76 33                	jbe    c0000e01 <sYSMALLOc+0x1a0>
c0000dce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dd2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dd9:	01 f0                	add    eax,esi
c0000ddb:	eb 1d                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000ddd:	83 ec 0c             	sub    esp,0xc
c0000de0:	89 f5                	mov    ebp,esi
c0000de2:	6a 00                	push   0x0
c0000de4:	e8 3e e5 00 00       	call   c000f327 <sbrk>
c0000de9:	89 c2                	mov    edx,eax
c0000deb:	29 f2                	sub    edx,esi
c0000ded:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000df1:	83 c4 10             	add    esp,0x10
c0000df4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dfa:	31 d2                	xor    edx,edx
c0000dfc:	83 f8 ff             	cmp    eax,0xffffffff
c0000dff:	74 66                	je     c0000e67 <sYSMALLOc+0x206>
c0000e01:	29 e8                	sub    eax,ebp
c0000e03:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e06:	01 d0                	add    eax,edx
c0000e08:	83 c8 01             	or     eax,0x1
c0000e0b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e0e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e14:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e19:	74 4c                	je     c0000e67 <sYSMALLOc+0x206>
c0000e1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1f:	83 e8 0c             	sub    eax,0xc
c0000e22:	83 e0 f8             	and    eax,0xfffffff8
c0000e25:	89 c2                	mov    edx,eax
c0000e27:	83 ca 01             	or     edx,0x1
c0000e2a:	83 f8 0f             	cmp    eax,0xf
c0000e2d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e30:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e38:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e40:	76 25                	jbe    c0000e67 <sYSMALLOc+0x206>
c0000e42:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e48:	83 ec 0c             	sub    esp,0xc
c0000e4b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e55:	83 c7 08             	add    edi,0x8
c0000e58:	57                   	push   edi
c0000e59:	e8 0e fd ff ff       	call   c0000b6c <dlfree>
c0000e5e:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e64:	83 c4 10             	add    esp,0x10
c0000e67:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e6d:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e73:	73 06                	jae    c0000e7b <sYSMALLOc+0x21a>
c0000e75:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e7b:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e81:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e87:	73 06                	jae    c0000e8f <sYSMALLOc+0x22e>
c0000e89:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e8f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e95:	83 e2 fc             	and    edx,0xfffffffc
c0000e98:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e9c:	0f 82 3c fe ff ff    	jb     c0000cde <sYSMALLOc+0x7d>
c0000ea2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ea6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ea9:	29 fa                	sub    edx,edi
c0000eab:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000eae:	83 ca 01             	or     edx,0x1
c0000eb1:	89 fb                	mov    ebx,edi
c0000eb3:	83 c0 08             	add    eax,0x8
c0000eb6:	83 cb 01             	or     ebx,0x1
c0000eb9:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ebc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ebf:	83 c4 2c             	add    esp,0x2c
c0000ec2:	5b                   	pop    ebx
c0000ec3:	5e                   	pop    esi
c0000ec4:	5f                   	pop    edi
c0000ec5:	5d                   	pop    ebp
c0000ec6:	c3                   	ret    

c0000ec7 <dlmalloc>:
c0000ec7:	55                   	push   ebp
c0000ec8:	57                   	push   edi
c0000ec9:	56                   	push   esi
c0000eca:	53                   	push   ebx
c0000ecb:	83 ec 1c             	sub    esp,0x1c
c0000ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ed2:	83 f8 df             	cmp    eax,0xffffffdf
c0000ed5:	0f 87 70 03 00 00    	ja     c000124b <dlmalloc+0x384>
c0000edb:	83 c0 0b             	add    eax,0xb
c0000ede:	be 10 00 00 00       	mov    esi,0x10
c0000ee3:	83 f8 0f             	cmp    eax,0xf
c0000ee6:	76 05                	jbe    c0000eed <dlmalloc+0x26>
c0000ee8:	83 e0 f8             	and    eax,0xfffffff8
c0000eeb:	89 c6                	mov    esi,eax
c0000eed:	8b 3d c0 b6 02 c0    	mov    edi,DWORD PTR ds:0xc002b6c0
c0000ef3:	f7 c7 01 00 00 00    	test   edi,0x1
c0000ef9:	75 17                	jne    c0000f12 <dlmalloc+0x4b>
c0000efb:	85 ff                	test   edi,edi
c0000efd:	0f 85 05 03 00 00    	jne    c0001208 <dlmalloc+0x341>
c0000f03:	b8 c0 b6 02 c0       	mov    eax,0xc002b6c0
c0000f08:	e8 78 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f0d:	e9 f6 02 00 00       	jmp    c0001208 <dlmalloc+0x341>
c0000f12:	39 f7                	cmp    edi,esi
c0000f14:	72 1f                	jb     c0000f35 <dlmalloc+0x6e>
c0000f16:	89 f2                	mov    edx,esi
c0000f18:	c1 ea 03             	shr    edx,0x3
c0000f1b:	83 ea 02             	sub    edx,0x2
c0000f1e:	8b 04 95 c4 b6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd493c]
c0000f25:	85 c0                	test   eax,eax
c0000f27:	74 0c                	je     c0000f35 <dlmalloc+0x6e>
c0000f29:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f2c:	89 0c 95 c4 b6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd493c],ecx
c0000f33:	eb 30                	jmp    c0000f65 <dlmalloc+0x9e>
c0000f35:	89 f0                	mov    eax,esi
c0000f37:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f3d:	77 2e                	ja     c0000f6d <dlmalloc+0xa6>
c0000f3f:	c1 e8 03             	shr    eax,0x3
c0000f42:	8d 14 c5 f4 b6 02 c0 	lea    edx,[eax*8-0x3ffd490c]
c0000f49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f50:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f53:	39 c3                	cmp    ebx,eax
c0000f55:	74 2e                	je     c0000f85 <dlmalloc+0xbe>
c0000f57:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f5a:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f62:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f65:	83 c0 08             	add    eax,0x8
c0000f68:	e9 e0 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0000f6d:	e8 8f fa ff ff       	call   c0000a01 <largebin_index>
c0000f72:	83 e7 02             	and    edi,0x2
c0000f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f79:	74 0a                	je     c0000f85 <dlmalloc+0xbe>
c0000f7b:	b8 c0 b6 02 c0       	mov    eax,0xc002b6c0
c0000f80:	e8 00 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f85:	8d 46 10             	lea    eax,[esi+0x10]
c0000f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f8c:	8b 1d 00 b7 02 c0    	mov    ebx,DWORD PTR ds:0xc002b700
c0000f92:	81 fb f4 b6 02 c0    	cmp    ebx,0xc002b6f4
c0000f98:	0f 84 13 01 00 00    	je     c00010b1 <dlmalloc+0x1ea>
c0000f9e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fa1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fa4:	83 e7 fc             	and    edi,0xfffffffc
c0000fa7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fad:	77 4c                	ja     c0000ffb <dlmalloc+0x134>
c0000faf:	3d f4 b6 02 c0       	cmp    eax,0xc002b6f4
c0000fb4:	75 45                	jne    c0000ffb <dlmalloc+0x134>
c0000fb6:	39 1d f0 b6 02 c0    	cmp    DWORD PTR ds:0xc002b6f0,ebx
c0000fbc:	75 3d                	jne    c0000ffb <dlmalloc+0x134>
c0000fbe:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fc2:	73 37                	jae    c0000ffb <dlmalloc+0x134>
c0000fc4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fc7:	89 fa                	mov    edx,edi
c0000fc9:	a3 fc b6 02 c0       	mov    ds:0xc002b6fc,eax
c0000fce:	a3 00 b7 02 c0       	mov    ds:0xc002b700,eax
c0000fd3:	a3 f0 b6 02 c0       	mov    ds:0xc002b6f0,eax
c0000fd8:	29 f2                	sub    edx,esi
c0000fda:	c7 40 08 f4 b6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002b6f4
c0000fe1:	c7 40 0c f4 b6 02 c0 	mov    DWORD PTR [eax+0xc],0xc002b6f4
c0000fe8:	83 ce 01             	or     esi,0x1
c0000feb:	89 d1                	mov    ecx,edx
c0000fed:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000ff0:	83 c9 01             	or     ecx,0x1
c0000ff3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000ff6:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000ff9:	eb 15                	jmp    c0001010 <dlmalloc+0x149>
c0000ffb:	a3 00 b7 02 c0       	mov    ds:0xc002b700,eax
c0001000:	39 fe                	cmp    esi,edi
c0001002:	c7 40 08 f4 b6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002b6f4
c0001009:	75 0d                	jne    c0001018 <dlmalloc+0x151>
c000100b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001010:	8d 43 08             	lea    eax,[ebx+0x8]
c0001013:	e9 35 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0001018:	89 f8                	mov    eax,edi
c000101a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001020:	77 19                	ja     c000103b <dlmalloc+0x174>
c0001022:	c1 e8 03             	shr    eax,0x3
c0001025:	8d 14 00             	lea    edx,[eax+eax*1]
c0001028:	83 c2 0d             	add    edx,0xd
c000102b:	8d 2c 95 b8 b6 02 c0 	lea    ebp,[edx*4-0x3ffd4948]
c0001032:	8b 14 95 c0 b6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4940]
c0001039:	eb 46                	jmp    c0001081 <dlmalloc+0x1ba>
c000103b:	e8 c1 f9 ff ff       	call   c0000a01 <largebin_index>
c0001040:	8d 14 00             	lea    edx,[eax+eax*1]
c0001043:	83 c2 0d             	add    edx,0xd
c0001046:	8d 0c 95 c0 b6 02 c0 	lea    ecx,[edx*4-0x3ffd4940]
c000104d:	8b 14 95 c0 b6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4940]
c0001054:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001057:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000105b:	89 d5                	mov    ebp,edx
c000105d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001061:	74 1e                	je     c0001081 <dlmalloc+0x1ba>
c0001063:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001066:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001069:	77 12                	ja     c000107d <dlmalloc+0x1b6>
c000106b:	83 cf 01             	or     edi,0x1
c000106e:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001071:	76 05                	jbe    c0001078 <dlmalloc+0x1b1>
c0001073:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001076:	eb f6                	jmp    c000106e <dlmalloc+0x1a7>
c0001078:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000107b:	eb 04                	jmp    c0001081 <dlmalloc+0x1ba>
c000107d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001081:	89 c7                	mov    edi,eax
c0001083:	88 c1                	mov    cl,al
c0001085:	c1 ff 05             	sar    edi,0x5
c0001088:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000108c:	bf 01 00 00 00       	mov    edi,0x1
c0001091:	d3 e7                	shl    edi,cl
c0001093:	89 f8                	mov    eax,edi
c0001095:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001099:	09 04 bd f4 b9 02 c0 	or     DWORD PTR [edi*4-0x3ffd460c],eax
c00010a0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010a3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010a6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010a9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010ac:	e9 db fe ff ff       	jmp    c0000f8c <dlmalloc+0xc5>
c00010b1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010b7:	76 78                	jbe    c0001131 <dlmalloc+0x26a>
c00010b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010bd:	8d 04 c5 f4 b6 02 c0 	lea    eax,[eax*8-0x3ffd490c]
c00010c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ca:	39 ca                	cmp    edx,ecx
c00010cc:	74 63                	je     c0001131 <dlmalloc+0x26a>
c00010ce:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010d1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010d4:	83 e3 fc             	and    ebx,0xfffffffc
c00010d7:	39 de                	cmp    esi,ebx
c00010d9:	77 52                	ja     c000112d <dlmalloc+0x266>
c00010db:	89 df                	mov    edi,ebx
c00010dd:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010e0:	29 f7                	sub    edi,esi
c00010e2:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010e5:	01 d3                	add    ebx,edx
c00010e7:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010ea:	83 ff 0f             	cmp    edi,0xf
c00010ed:	8d 42 08             	lea    eax,[edx+0x8]
c00010f0:	77 09                	ja     c00010fb <dlmalloc+0x234>
c00010f2:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010f6:	e9 52 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c00010fb:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010fe:	83 ce 01             	or     esi,0x1
c0001101:	89 0d fc b6 02 c0    	mov    DWORD PTR ds:0xc002b6fc,ecx
c0001107:	89 0d 00 b7 02 c0    	mov    DWORD PTR ds:0xc002b700,ecx
c000110d:	c7 41 08 f4 b6 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002b6f4
c0001114:	c7 41 0c f4 b6 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002b6f4
c000111b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000111e:	89 fa                	mov    edx,edi
c0001120:	83 ca 01             	or     edx,0x1
c0001123:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001126:	89 3b                	mov    DWORD PTR [ebx],edi
c0001128:	e9 20 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c000112d:	89 c2                	mov    edx,eax
c000112f:	eb 99                	jmp    c00010ca <dlmalloc+0x203>
c0001131:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001135:	b8 01 00 00 00       	mov    eax,0x1
c000113a:	41                   	inc    ecx
c000113b:	89 cb                	mov    ebx,ecx
c000113d:	8d 14 cd ec b6 02 c0 	lea    edx,[ecx*8-0x3ffd4914]
c0001144:	c1 eb 05             	shr    ebx,0x5
c0001147:	d3 e0                	shl    eax,cl
c0001149:	8b 3c 9d f4 b9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd460c]
c0001150:	39 f8                	cmp    eax,edi
c0001152:	77 04                	ja     c0001158 <dlmalloc+0x291>
c0001154:	85 c0                	test   eax,eax
c0001156:	75 26                	jne    c000117e <dlmalloc+0x2b7>
c0001158:	43                   	inc    ebx
c0001159:	83 fb 02             	cmp    ebx,0x2
c000115c:	0f 87 a6 00 00 00    	ja     c0001208 <dlmalloc+0x341>
c0001162:	8b 3c 9d f4 b9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd460c]
c0001169:	85 ff                	test   edi,edi
c000116b:	74 eb                	je     c0001158 <dlmalloc+0x291>
c000116d:	89 d8                	mov    eax,ebx
c000116f:	c1 e0 06             	shl    eax,0x6
c0001172:	8d 14 85 ec b6 02 c0 	lea    edx,[eax*4-0x3ffd4914]
c0001179:	b8 01 00 00 00       	mov    eax,0x1
c000117e:	85 f8                	test   eax,edi
c0001180:	75 07                	jne    c0001189 <dlmalloc+0x2c2>
c0001182:	83 c2 08             	add    edx,0x8
c0001185:	01 c0                	add    eax,eax
c0001187:	eb f5                	jmp    c000117e <dlmalloc+0x2b7>
c0001189:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000118c:	39 ca                	cmp    edx,ecx
c000118e:	75 14                	jne    c00011a4 <dlmalloc+0x2dd>
c0001190:	89 c1                	mov    ecx,eax
c0001192:	83 c2 08             	add    edx,0x8
c0001195:	f7 d1                	not    ecx
c0001197:	01 c0                	add    eax,eax
c0001199:	21 cf                	and    edi,ecx
c000119b:	89 3c 9d f4 b9 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd460c],edi
c00011a2:	eb ac                	jmp    c0001150 <dlmalloc+0x289>
c00011a4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011a7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011aa:	83 e0 fc             	and    eax,0xfffffffc
c00011ad:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011b0:	89 c3                	mov    ebx,eax
c00011b2:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011b5:	29 f3                	sub    ebx,esi
c00011b7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ba:	83 fb 0f             	cmp    ebx,0xf
c00011bd:	8d 41 08             	lea    eax,[ecx+0x8]
c00011c0:	77 09                	ja     c00011cb <dlmalloc+0x304>
c00011c2:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011c6:	e9 82 00 00 00       	jmp    c000124d <dlmalloc+0x386>
c00011cb:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	89 3d fc b6 02 c0    	mov    DWORD PTR ds:0xc002b6fc,edi
c00011da:	89 3d 00 b7 02 c0    	mov    DWORD PTR ds:0xc002b700,edi
c00011e0:	c7 47 08 f4 b6 02 c0 	mov    DWORD PTR [edi+0x8],0xc002b6f4
c00011e7:	c7 47 0c f4 b6 02 c0 	mov    DWORD PTR [edi+0xc],0xc002b6f4
c00011ee:	77 06                	ja     c00011f6 <dlmalloc+0x32f>
c00011f0:	89 3d f0 b6 02 c0    	mov    DWORD PTR ds:0xc002b6f0,edi
c00011f6:	83 ce 01             	or     esi,0x1
c00011f9:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011fc:	89 d9                	mov    ecx,ebx
c00011fe:	83 c9 01             	or     ecx,0x1
c0001201:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001204:	89 1a                	mov    DWORD PTR [edx],ebx
c0001206:	eb 45                	jmp    c000124d <dlmalloc+0x386>
c0001208:	a1 ec b6 02 c0       	mov    eax,ds:0xc002b6ec
c000120d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001210:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001213:	83 e2 fc             	and    edx,0xfffffffc
c0001216:	39 d1                	cmp    ecx,edx
c0001218:	77 1e                	ja     c0001238 <dlmalloc+0x371>
c000121a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000121d:	89 f3                	mov    ebx,esi
c000121f:	89 0d ec b6 02 c0    	mov    DWORD PTR ds:0xc002b6ec,ecx
c0001225:	83 cb 01             	or     ebx,0x1
c0001228:	29 f2                	sub    edx,esi
c000122a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000122d:	83 ca 01             	or     edx,0x1
c0001230:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001233:	e9 2d fd ff ff       	jmp    c0000f65 <dlmalloc+0x9e>
c0001238:	83 c4 1c             	add    esp,0x1c
c000123b:	89 f0                	mov    eax,esi
c000123d:	5b                   	pop    ebx
c000123e:	ba c0 b6 02 c0       	mov    edx,0xc002b6c0
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	e9 16 fa ff ff       	jmp    c0000c61 <sYSMALLOc>
c000124b:	31 c0                	xor    eax,eax
c000124d:	83 c4 1c             	add    esp,0x1c
c0001250:	5b                   	pop    ebx
c0001251:	5e                   	pop    esi
c0001252:	5f                   	pop    edi
c0001253:	5d                   	pop    ebp
c0001254:	c3                   	ret    

c0001255 <iALLOc>:
c0001255:	55                   	push   ebp
c0001256:	89 c5                	mov    ebp,eax
c0001258:	57                   	push   edi
c0001259:	56                   	push   esi
c000125a:	53                   	push   ebx
c000125b:	83 ec 2c             	sub    esp,0x2c
c000125e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001262:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000126a:	83 3d c0 b6 02 c0 00 	cmp    DWORD PTR ds:0xc002b6c0,0x0
c0001271:	75 12                	jne    c0001285 <iALLOc+0x30>
c0001273:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001277:	b8 c0 b6 02 c0       	mov    eax,0xc002b6c0
c000127c:	e8 04 f8 ff ff       	call   c0000a85 <malloc_consolidate>
c0001281:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001285:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000128a:	74 12                	je     c000129e <iALLOc+0x49>
c000128c:	85 ed                	test   ebp,ebp
c000128e:	0f 84 64 01 00 00    	je     c00013f8 <iALLOc+0x1a3>
c0001294:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000129c:	eb 33                	jmp    c00012d1 <iALLOc+0x7c>
c000129e:	85 ed                	test   ebp,ebp
c00012a0:	75 14                	jne    c00012b6 <iALLOc+0x61>
c00012a2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012aa:	83 c4 2c             	add    esp,0x2c
c00012ad:	5b                   	pop    ebx
c00012ae:	5e                   	pop    esi
c00012af:	5f                   	pop    edi
c00012b0:	5d                   	pop    ebp
c00012b1:	e9 11 fc ff ff       	jmp    c0000ec7 <dlmalloc>
c00012b6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012bd:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012c5:	83 f8 0f             	cmp    eax,0xf
c00012c8:	76 07                	jbe    c00012d1 <iALLOc+0x7c>
c00012ca:	83 e0 f8             	and    eax,0xfffffff8
c00012cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012d1:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012d6:	75 09                	jne    c00012e1 <iALLOc+0x8c>
c00012d8:	89 d0                	mov    eax,edx
c00012da:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012dd:	31 f6                	xor    esi,esi
c00012df:	eb 3b                	jmp    c000131c <iALLOc+0xc7>
c00012e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00012e3:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012eb:	83 c0 0b             	add    eax,0xb
c00012ee:	83 f8 0f             	cmp    eax,0xf
c00012f1:	76 07                	jbe    c00012fa <iALLOc+0xa5>
c00012f3:	83 e0 f8             	and    eax,0xfffffff8
c00012f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012fe:	0f af f5             	imul   esi,ebp
c0001301:	eb 25                	jmp    c0001328 <iALLOc+0xd3>
c0001303:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001305:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001308:	bb 10 00 00 00       	mov    ebx,0x10
c000130d:	83 f9 0f             	cmp    ecx,0xf
c0001310:	76 05                	jbe    c0001317 <iALLOc+0xc2>
c0001312:	83 e1 f8             	and    ecx,0xfffffff8
c0001315:	89 cb                	mov    ebx,ecx
c0001317:	01 de                	add    esi,ebx
c0001319:	83 c0 04             	add    eax,0x4
c000131c:	39 c7                	cmp    edi,eax
c000131e:	75 e3                	jne    c0001303 <iALLOc+0xae>
c0001320:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000132c:	8b 1d 14 ba 02 c0    	mov    ebx,DWORD PTR ds:0xc002ba14
c0001332:	83 ec 0c             	sub    esp,0xc
c0001335:	c7 05 14 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ba14,0x0
c000133f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001343:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001347:	50                   	push   eax
c0001348:	e8 7a fb ff ff       	call   c0000ec7 <dlmalloc>
c000134d:	83 c4 10             	add    esp,0x10
c0001350:	89 1d 14 ba 02 c0    	mov    DWORD PTR ds:0xc002ba14,ebx
c0001356:	85 c0                	test   eax,eax
c0001358:	0f 84 92 00 00 00    	je     c00013f0 <iALLOc+0x19b>
c000135e:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001361:	8d 78 f8             	lea    edi,[eax-0x8]
c0001364:	83 e3 fc             	and    ebx,0xfffffffc
c0001367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000136b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001370:	74 1e                	je     c0001390 <iALLOc+0x13b>
c0001372:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001376:	89 d9                	mov    ecx,ebx
c0001378:	52                   	push   edx
c0001379:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000137d:	83 e9 04             	sub    ecx,0x4
c0001380:	51                   	push   ecx
c0001381:	6a 00                	push   0x0
c0001383:	50                   	push   eax
c0001384:	e8 02 f3 ff ff       	call   c000068b <memset>
c0001389:	83 c4 10             	add    esp,0x10
c000138c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001390:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001395:	75 14                	jne    c00013ab <iALLOc+0x156>
c0001397:	8d 04 37             	lea    eax,[edi+esi*1]
c000139a:	29 f3                	sub    ebx,esi
c000139c:	8d 48 08             	lea    ecx,[eax+0x8]
c000139f:	83 cb 01             	or     ebx,0x1
c00013a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013a6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013a9:	89 f3                	mov    ebx,esi
c00013ab:	31 c0                	xor    eax,eax
c00013ad:	4d                   	dec    ebp
c00013ae:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013b1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013b5:	39 c5                	cmp    ebp,eax
c00013b7:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ba:	74 2c                	je     c00013e8 <iALLOc+0x193>
c00013bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013c0:	85 c9                	test   ecx,ecx
c00013c2:	75 15                	jne    c00013d9 <iALLOc+0x184>
c00013c4:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013c7:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013ca:	b9 10 00 00 00       	mov    ecx,0x10
c00013cf:	83 fe 0f             	cmp    esi,0xf
c00013d2:	76 05                	jbe    c00013d9 <iALLOc+0x184>
c00013d4:	83 e6 f8             	and    esi,0xfffffff8
c00013d7:	89 f1                	mov    ecx,esi
c00013d9:	89 ce                	mov    esi,ecx
c00013db:	29 cb                	sub    ebx,ecx
c00013dd:	83 ce 01             	or     esi,0x1
c00013e0:	40                   	inc    eax
c00013e1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013e4:	01 cf                	add    edi,ecx
c00013e6:	eb c6                	jmp    c00013ae <iALLOc+0x159>
c00013e8:	83 cb 01             	or     ebx,0x1
c00013eb:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013ee:	eb 08                	jmp    c00013f8 <iALLOc+0x1a3>
c00013f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013fc:	83 c4 2c             	add    esp,0x2c
c00013ff:	5b                   	pop    ebx
c0001400:	5e                   	pop    esi
c0001401:	5f                   	pop    edi
c0001402:	5d                   	pop    ebp
c0001403:	c3                   	ret    

c0001404 <dlrealloc>:
c0001404:	55                   	push   ebp
c0001405:	57                   	push   edi
c0001406:	56                   	push   esi
c0001407:	53                   	push   ebx
c0001408:	83 ec 1c             	sub    esp,0x1c
c000140b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000140f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001413:	85 db                	test   ebx,ebx
c0001415:	75 10                	jne    c0001427 <dlrealloc+0x23>
c0001417:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000141b:	83 c4 1c             	add    esp,0x1c
c000141e:	5b                   	pop    ebx
c000141f:	5e                   	pop    esi
c0001420:	5f                   	pop    edi
c0001421:	5d                   	pop    ebp
c0001422:	e9 a0 fa ff ff       	jmp    c0000ec7 <dlmalloc>
c0001427:	83 f8 df             	cmp    eax,0xffffffdf
c000142a:	76 07                	jbe    c0001433 <dlrealloc+0x2f>
c000142c:	31 db                	xor    ebx,ebx
c000142e:	e9 7c 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c0001433:	83 c0 0b             	add    eax,0xb
c0001436:	bf 10 00 00 00       	mov    edi,0x10
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 05                	jbe    c0001445 <dlrealloc+0x41>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 c7                	mov    edi,eax
c0001445:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001448:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000144b:	89 c6                	mov    esi,eax
c000144d:	83 e6 fc             	and    esi,0xfffffffc
c0001450:	a8 02                	test   al,0x2
c0001452:	75 d8                	jne    c000142c <dlrealloc+0x28>
c0001454:	39 f7                	cmp    edi,esi
c0001456:	0f 86 15 01 00 00    	jbe    c0001571 <dlrealloc+0x16d>
c000145c:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001460:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001463:	39 15 ec b6 02 c0    	cmp    DWORD PTR ds:0xc002b6ec,edx
c0001469:	75 33                	jne    c000149e <dlrealloc+0x9a>
c000146b:	83 e1 fc             	and    ecx,0xfffffffc
c000146e:	01 f1                	add    ecx,esi
c0001470:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001474:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001477:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000147b:	77 49                	ja     c00014c6 <dlrealloc+0xc2>
c000147d:	01 fd                	add    ebp,edi
c000147f:	83 e0 01             	and    eax,0x1
c0001482:	09 f8                	or     eax,edi
c0001484:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001487:	89 2d ec b6 02 c0    	mov    DWORD PTR ds:0xc002b6ec,ebp
c000148d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001491:	29 f8                	sub    eax,edi
c0001493:	83 c8 01             	or     eax,0x1
c0001496:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001499:	e9 11 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c000149e:	89 c8                	mov    eax,ecx
c00014a0:	83 e0 fe             	and    eax,0xfffffffe
c00014a3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014a8:	75 1c                	jne    c00014c6 <dlrealloc+0xc2>
c00014aa:	83 e1 fc             	and    ecx,0xfffffffc
c00014ad:	01 f1                	add    ecx,esi
c00014af:	39 cf                	cmp    edi,ecx
c00014b1:	77 13                	ja     c00014c6 <dlrealloc+0xc2>
c00014b3:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014b6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014b9:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014bc:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014bf:	89 ce                	mov    esi,ecx
c00014c1:	e9 ab 00 00 00       	jmp    c0001571 <dlrealloc+0x16d>
c00014c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014ca:	8d 47 f9             	lea    eax,[edi-0x7]
c00014cd:	83 ec 0c             	sub    esp,0xc
c00014d0:	50                   	push   eax
c00014d1:	e8 f1 f9 ff ff       	call   c0000ec7 <dlmalloc>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	89 c1                	mov    ecx,eax
c00014db:	85 c0                	test   eax,eax
c00014dd:	0f 84 49 ff ff ff    	je     c000142c <dlrealloc+0x28>
c00014e3:	8d 40 f8             	lea    eax,[eax-0x8]
c00014e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014ea:	39 c2                	cmp    edx,eax
c00014ec:	75 0a                	jne    c00014f8 <dlrealloc+0xf4>
c00014ee:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014f1:	83 e0 fc             	and    eax,0xfffffffc
c00014f4:	01 c6                	add    esi,eax
c00014f6:	eb 79                	jmp    c0001571 <dlrealloc+0x16d>
c00014f8:	83 ee 04             	sub    esi,0x4
c00014fb:	83 fe 27             	cmp    esi,0x27
c00014fe:	76 16                	jbe    c0001516 <dlrealloc+0x112>
c0001500:	50                   	push   eax
c0001501:	56                   	push   esi
c0001502:	53                   	push   ebx
c0001503:	51                   	push   ecx
c0001504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001508:	e8 48 f1 ff ff       	call   c0000655 <memcpy>
c000150d:	83 c4 10             	add    esp,0x10
c0001510:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001514:	eb 43                	jmp    c0001559 <dlrealloc+0x155>
c0001516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001518:	83 fe 13             	cmp    esi,0x13
c000151b:	89 01                	mov    DWORD PTR [ecx],eax
c000151d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001520:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001523:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001529:	76 2e                	jbe    c0001559 <dlrealloc+0x155>
c000152b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000152e:	83 fe 1b             	cmp    esi,0x1b
c0001531:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001534:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001537:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000153a:	76 1d                	jbe    c0001559 <dlrealloc+0x155>
c000153c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000153f:	83 fe 23             	cmp    esi,0x23
c0001542:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001548:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000154b:	76 0c                	jbe    c0001559 <dlrealloc+0x155>
c000154d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001550:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001553:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001556:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001559:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000155d:	83 ec 0c             	sub    esp,0xc
c0001560:	53                   	push   ebx
c0001561:	e8 06 f6 ff ff       	call   c0000b6c <dlfree>
c0001566:	83 c4 10             	add    esp,0x10
c0001569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	eb 3e                	jmp    c00015af <dlrealloc+0x1ab>
c0001571:	89 f2                	mov    edx,esi
c0001573:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001576:	29 fa                	sub    edx,edi
c0001578:	83 e1 01             	and    ecx,0x1
c000157b:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c000157f:	83 fa 0f             	cmp    edx,0xf
c0001582:	77 0b                	ja     c000158f <dlrealloc+0x18b>
c0001584:	09 ce                	or     esi,ecx
c0001586:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001589:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000158d:	eb 20                	jmp    c00015af <dlrealloc+0x1ab>
c000158f:	01 fd                	add    ebp,edi
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	09 cf                	or     edi,ecx
c0001596:	83 ca 01             	or     edx,0x1
c0001599:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000159c:	83 c5 08             	add    ebp,0x8
c000159f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015a2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015a6:	55                   	push   ebp
c00015a7:	e8 c0 f5 ff ff       	call   c0000b6c <dlfree>
c00015ac:	83 c4 10             	add    esp,0x10
c00015af:	83 c4 1c             	add    esp,0x1c
c00015b2:	89 d8                	mov    eax,ebx
c00015b4:	5b                   	pop    ebx
c00015b5:	5e                   	pop    esi
c00015b6:	5f                   	pop    edi
c00015b7:	5d                   	pop    ebp
c00015b8:	c3                   	ret    

c00015b9 <dlmemalign>:
c00015b9:	55                   	push   ebp
c00015ba:	57                   	push   edi
c00015bb:	56                   	push   esi
c00015bc:	53                   	push   ebx
c00015bd:	83 ec 0c             	sub    esp,0xc
c00015c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015c8:	83 fa 08             	cmp    edx,0x8
c00015cb:	77 10                	ja     c00015dd <dlmemalign+0x24>
c00015cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015d1:	83 c4 0c             	add    esp,0xc
c00015d4:	5b                   	pop    ebx
c00015d5:	5e                   	pop    esi
c00015d6:	5f                   	pop    edi
c00015d7:	5d                   	pop    ebp
c00015d8:	e9 ea f8 ff ff       	jmp    c0000ec7 <dlmalloc>
c00015dd:	bf 10 00 00 00       	mov    edi,0x10
c00015e2:	83 fa 0f             	cmp    edx,0xf
c00015e5:	76 13                	jbe    c00015fa <dlmemalign+0x41>
c00015e7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015ea:	85 d1                	test   ecx,edx
c00015ec:	75 04                	jne    c00015f2 <dlmemalign+0x39>
c00015ee:	89 d7                	mov    edi,edx
c00015f0:	eb 08                	jmp    c00015fa <dlmemalign+0x41>
c00015f2:	39 d7                	cmp    edi,edx
c00015f4:	73 04                	jae    c00015fa <dlmemalign+0x41>
c00015f6:	01 ff                	add    edi,edi
c00015f8:	eb f8                	jmp    c00015f2 <dlmemalign+0x39>
c00015fa:	83 f8 df             	cmp    eax,0xffffffdf
c00015fd:	76 07                	jbe    c0001606 <dlmemalign+0x4d>
c00015ff:	31 c0                	xor    eax,eax
c0001601:	e9 ce 00 00 00       	jmp    c00016d4 <dlmemalign+0x11b>
c0001606:	83 c0 0b             	add    eax,0xb
c0001609:	bd 10 00 00 00       	mov    ebp,0x10
c000160e:	83 f8 0f             	cmp    eax,0xf
c0001611:	76 05                	jbe    c0001618 <dlmemalign+0x5f>
c0001613:	83 e0 f8             	and    eax,0xfffffff8
c0001616:	89 c5                	mov    ebp,eax
c0001618:	83 ec 0c             	sub    esp,0xc
c000161b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000161f:	50                   	push   eax
c0001620:	e8 a2 f8 ff ff       	call   c0000ec7 <dlmalloc>
c0001625:	83 c4 10             	add    esp,0x10
c0001628:	89 c1                	mov    ecx,eax
c000162a:	85 c0                	test   eax,eax
c000162c:	74 d1                	je     c00015ff <dlmemalign+0x46>
c000162e:	31 d2                	xor    edx,edx
c0001630:	8d 70 f8             	lea    esi,[eax-0x8]
c0001633:	f7 f7                	div    edi
c0001635:	85 d2                	test   edx,edx
c0001637:	74 62                	je     c000169b <dlmemalign+0xe2>
c0001639:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000163d:	89 f8                	mov    eax,edi
c000163f:	f7 d8                	neg    eax
c0001641:	21 c3                	and    ebx,eax
c0001643:	83 eb 08             	sub    ebx,0x8
c0001646:	89 d8                	mov    eax,ebx
c0001648:	29 f0                	sub    eax,esi
c000164a:	83 f8 0f             	cmp    eax,0xf
c000164d:	77 02                	ja     c0001651 <dlmemalign+0x98>
c000164f:	01 fb                	add    ebx,edi
c0001651:	89 d8                	mov    eax,ebx
c0001653:	29 f0                	sub    eax,esi
c0001655:	89 c6                	mov    esi,eax
c0001657:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000165a:	89 c2                	mov    edx,eax
c000165c:	83 e2 fc             	and    edx,0xfffffffc
c000165f:	29 f2                	sub    edx,esi
c0001661:	a8 02                	test   al,0x2
c0001663:	74 10                	je     c0001675 <dlmemalign+0xbc>
c0001665:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001668:	83 ca 02             	or     edx,0x2
c000166b:	8d 43 08             	lea    eax,[ebx+0x8]
c000166e:	89 33                	mov    DWORD PTR [ebx],esi
c0001670:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001673:	eb 5f                	jmp    c00016d4 <dlmemalign+0x11b>
c0001675:	83 ec 0c             	sub    esp,0xc
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 c8 01             	or     eax,0x1
c000167d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001680:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001685:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001688:	83 e0 01             	and    eax,0x1
c000168b:	09 f0                	or     eax,esi
c000168d:	89 de                	mov    esi,ebx
c000168f:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001692:	51                   	push   ecx
c0001693:	e8 d4 f4 ff ff       	call   c0000b6c <dlfree>
c0001698:	83 c4 10             	add    esp,0x10
c000169b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000169e:	a8 02                	test   al,0x2
c00016a0:	75 2f                	jne    c00016d1 <dlmemalign+0x118>
c00016a2:	83 e0 fc             	and    eax,0xfffffffc
c00016a5:	8d 55 10             	lea    edx,[ebp+0x10]
c00016a8:	39 c2                	cmp    edx,eax
c00016aa:	73 25                	jae    c00016d1 <dlmemalign+0x118>
c00016ac:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016af:	83 ec 0c             	sub    esp,0xc
c00016b2:	29 e8                	sub    eax,ebp
c00016b4:	83 c2 08             	add    edx,0x8
c00016b7:	83 c8 01             	or     eax,0x1
c00016ba:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016bd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016c0:	83 e0 01             	and    eax,0x1
c00016c3:	09 c5                	or     ebp,eax
c00016c5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016c8:	52                   	push   edx
c00016c9:	e8 9e f4 ff ff       	call   c0000b6c <dlfree>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	8d 46 08             	lea    eax,[esi+0x8]
c00016d4:	83 c4 0c             	add    esp,0xc
c00016d7:	5b                   	pop    ebx
c00016d8:	5e                   	pop    esi
c00016d9:	5f                   	pop    edi
c00016da:	5d                   	pop    ebp
c00016db:	c3                   	ret    

c00016dc <dlcalloc>:
c00016dc:	53                   	push   ebx
c00016dd:	83 ec 14             	sub    esp,0x14
c00016e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016e4:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016e9:	50                   	push   eax
c00016ea:	e8 d8 f7 ff ff       	call   c0000ec7 <dlmalloc>
c00016ef:	83 c4 10             	add    esp,0x10
c00016f2:	89 c3                	mov    ebx,eax
c00016f4:	85 c0                	test   eax,eax
c00016f6:	74 77                	je     c000176f <dlcalloc+0x93>
c00016f8:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016fb:	89 d0                	mov    eax,edx
c00016fd:	83 e0 fc             	and    eax,0xfffffffc
c0001700:	80 e2 02             	and    dl,0x2
c0001703:	75 5a                	jne    c000175f <dlcalloc+0x83>
c0001705:	83 e8 04             	sub    eax,0x4
c0001708:	83 f8 27             	cmp    eax,0x27
c000170b:	76 03                	jbe    c0001710 <dlcalloc+0x34>
c000170d:	51                   	push   ecx
c000170e:	eb 53                	jmp    c0001763 <dlcalloc+0x87>
c0001710:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001716:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000171d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001724:	83 f8 13             	cmp    eax,0x13
c0001727:	76 46                	jbe    c000176f <dlcalloc+0x93>
c0001729:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001730:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001737:	83 f8 1b             	cmp    eax,0x1b
c000173a:	76 33                	jbe    c000176f <dlcalloc+0x93>
c000173c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001743:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000174a:	83 f8 23             	cmp    eax,0x23
c000174d:	76 20                	jbe    c000176f <dlcalloc+0x93>
c000174f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001756:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000175d:	eb 10                	jmp    c000176f <dlcalloc+0x93>
c000175f:	83 e8 08             	sub    eax,0x8
c0001762:	52                   	push   edx
c0001763:	50                   	push   eax
c0001764:	6a 00                	push   0x0
c0001766:	53                   	push   ebx
c0001767:	e8 1f ef ff ff       	call   c000068b <memset>
c000176c:	83 c4 10             	add    esp,0x10
c000176f:	89 d8                	mov    eax,ebx
c0001771:	83 c4 08             	add    esp,0x8
c0001774:	5b                   	pop    ebx
c0001775:	c3                   	ret    

c0001776 <dlcfree>:
c0001776:	e9 f1 f3 ff ff       	jmp    c0000b6c <dlfree>

c000177b <dlindependent_calloc>:
c000177b:	83 ec 28             	sub    esp,0x28
c000177e:	b9 03 00 00 00       	mov    ecx,0x3
c0001783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001787:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000178b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000178f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001797:	e8 b9 fa ff ff       	call   c0001255 <iALLOc>
c000179c:	83 c4 2c             	add    esp,0x2c
c000179f:	c3                   	ret    

c00017a0 <dlindependent_comalloc>:
c00017a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017a8:	31 c9                	xor    ecx,ecx
c00017aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017b2:	e9 9e fa ff ff       	jmp    c0001255 <iALLOc>

c00017b7 <dlvalloc>:
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	83 3d c0 b6 02 c0 00 	cmp    DWORD PTR ds:0xc002b6c0,0x0
c00017c1:	75 0a                	jne    c00017cd <dlvalloc+0x16>
c00017c3:	b8 c0 b6 02 c0       	mov    eax,0xc002b6c0
c00017c8:	e8 b8 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017cd:	50                   	push   eax
c00017ce:	50                   	push   eax
c00017cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017d3:	ff 35 1c ba 02 c0    	push   DWORD PTR ds:0xc002ba1c
c00017d9:	e8 db fd ff ff       	call   c00015b9 <dlmemalign>
c00017de:	83 c4 1c             	add    esp,0x1c
c00017e1:	c3                   	ret    

c00017e2 <dlpvalloc>:
c00017e2:	83 ec 0c             	sub    esp,0xc
c00017e5:	83 3d c0 b6 02 c0 00 	cmp    DWORD PTR ds:0xc002b6c0,0x0
c00017ec:	75 0a                	jne    c00017f8 <dlpvalloc+0x16>
c00017ee:	b8 c0 b6 02 c0       	mov    eax,0xc002b6c0
c00017f3:	e8 8d f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017f8:	a1 1c ba 02 c0       	mov    eax,ds:0xc002ba1c
c00017fd:	89 c1                	mov    ecx,eax
c00017ff:	52                   	push   edx
c0001800:	f7 d9                	neg    ecx
c0001802:	52                   	push   edx
c0001803:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001807:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000180b:	21 ca                	and    edx,ecx
c000180d:	52                   	push   edx
c000180e:	50                   	push   eax
c000180f:	e8 a5 fd ff ff       	call   c00015b9 <dlmemalign>
c0001814:	83 c4 1c             	add    esp,0x1c
c0001817:	c3                   	ret    

c0001818 <dlmalloc_trim>:
c0001818:	b8 c0 b6 02 c0       	mov    eax,0xc002b6c0
c000181d:	e8 63 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001822:	31 c0                	xor    eax,eax
c0001824:	c3                   	ret    

c0001825 <dlmalloc_usable_size>:
c0001825:	53                   	push   ebx
c0001826:	31 c0                	xor    eax,eax
c0001828:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000182c:	85 c9                	test   ecx,ecx
c000182e:	74 24                	je     c0001854 <dlmalloc_usable_size+0x2f>
c0001830:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001833:	f6 c2 02             	test   dl,0x2
c0001836:	74 08                	je     c0001840 <dlmalloc_usable_size+0x1b>
c0001838:	83 e2 fc             	and    edx,0xfffffffc
c000183b:	8d 42 f8             	lea    eax,[edx-0x8]
c000183e:	eb 14                	jmp    c0001854 <dlmalloc_usable_size+0x2f>
c0001840:	89 d3                	mov    ebx,edx
c0001842:	31 c0                	xor    eax,eax
c0001844:	83 e3 fe             	and    ebx,0xfffffffe
c0001847:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000184c:	74 06                	je     c0001854 <dlmalloc_usable_size+0x2f>
c000184e:	83 e2 fc             	and    edx,0xfffffffc
c0001851:	8d 42 fc             	lea    eax,[edx-0x4]
c0001854:	5b                   	pop    ebx
c0001855:	c3                   	ret    

c0001856 <dlmallinfo>:
c0001856:	55                   	push   ebp
c0001857:	57                   	push   edi
c0001858:	56                   	push   esi
c0001859:	53                   	push   ebx
c000185a:	83 ec 08             	sub    esp,0x8
c000185d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001861:	83 3d ec b6 02 c0 00 	cmp    DWORD PTR ds:0xc002b6ec,0x0
c0001868:	75 0a                	jne    c0001874 <dlmallinfo+0x1e>
c000186a:	b8 c0 b6 02 c0       	mov    eax,0xc002b6c0
c000186f:	e8 11 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001874:	a1 ec b6 02 c0       	mov    eax,ds:0xc002b6ec
c0001879:	31 ed                	xor    ebp,ebp
c000187b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000187e:	31 c9                	xor    ecx,ecx
c0001880:	83 e0 fc             	and    eax,0xfffffffc
c0001883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001887:	31 c0                	xor    eax,eax
c0001889:	8b 14 85 c4 b6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd493c]
c0001890:	85 d2                	test   edx,edx
c0001892:	74 0e                	je     c00018a2 <dlmallinfo+0x4c>
c0001894:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001897:	45                   	inc    ebp
c0001898:	83 e6 fc             	and    esi,0xfffffffc
c000189b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000189e:	01 f1                	add    ecx,esi
c00018a0:	eb ee                	jmp    c0001890 <dlmallinfo+0x3a>
c00018a2:	40                   	inc    eax
c00018a3:	83 f8 0a             	cmp    eax,0xa
c00018a6:	75 e1                	jne    c0001889 <dlmallinfo+0x33>
c00018a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018b3:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018b6:	b8 f4 b6 02 c0       	mov    eax,0xc002b6f4
c00018bb:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018be:	39 f0                	cmp    eax,esi
c00018c0:	74 10                	je     c00018d2 <dlmallinfo+0x7c>
c00018c2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018c5:	ff 04 24             	inc    DWORD PTR [esp]
c00018c8:	83 e7 fc             	and    edi,0xfffffffc
c00018cb:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018ce:	01 fa                	add    edx,edi
c00018d0:	eb ec                	jmp    c00018be <dlmallinfo+0x68>
c00018d2:	83 c0 08             	add    eax,0x8
c00018d5:	3d ec b9 02 c0       	cmp    eax,0xc002b9ec
c00018da:	75 df                	jne    c00018bb <dlmallinfo+0x65>
c00018dc:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018df:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018e2:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018e5:	a1 28 ba 02 c0       	mov    eax,ds:0xc002ba28
c00018ea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018ed:	89 03                	mov    DWORD PTR [ebx],eax
c00018ef:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018f2:	8b 35 10 ba 02 c0    	mov    esi,DWORD PTR ds:0xc002ba10
c00018f8:	29 d0                	sub    eax,edx
c00018fa:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018fd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001900:	8b 35 24 ba 02 c0    	mov    esi,DWORD PTR ds:0xc002ba24
c0001906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000190a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000190d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001910:	8b 35 34 ba 02 c0    	mov    esi,DWORD PTR ds:0xc002ba34
c0001916:	89 d8                	mov    eax,ebx
c0001918:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000191b:	83 c4 08             	add    esp,0x8
c000191e:	5b                   	pop    ebx
c000191f:	5e                   	pop    esi
c0001920:	5f                   	pop    edi
c0001921:	5d                   	pop    ebp
c0001922:	c2 04 00             	ret    0x4

c0001925 <dlmalloc_stats>:
c0001925:	83 ec 30             	sub    esp,0x30
c0001928:	8d 44 24 08          	lea    eax,[esp+0x8]
c000192c:	50                   	push   eax
c000192d:	e8 24 ff ff ff       	call   c0001856 <dlmallinfo>
c0001932:	83 c4 30             	add    esp,0x30
c0001935:	c3                   	ret    

c0001936 <dlmallopt>:
c0001936:	56                   	push   esi
c0001937:	b8 c0 b6 02 c0       	mov    eax,0xc002b6c0
c000193c:	53                   	push   ebx
c000193d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001945:	e8 3b f1 ff ff       	call   c0000a85 <malloc_consolidate>
c000194a:	8d 46 04             	lea    eax,[esi+0x4]
c000194d:	83 f8 05             	cmp    eax,0x5
c0001950:	77 67                	ja     c00019b9 <dlmallopt+0x83>
c0001952:	ff 24 85 44 70 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd8fbc]
c0001959:	83 fb 50             	cmp    ebx,0x50
c000195c:	77 5b                	ja     c00019b9 <dlmallopt+0x83>
c000195e:	ba 08 00 00 00       	mov    edx,0x8
c0001963:	85 db                	test   ebx,ebx
c0001965:	74 12                	je     c0001979 <dlmallopt+0x43>
c0001967:	83 c3 0b             	add    ebx,0xb
c000196a:	ba 10 00 00 00       	mov    edx,0x10
c000196f:	83 fb 0f             	cmp    ebx,0xf
c0001972:	76 05                	jbe    c0001979 <dlmallopt+0x43>
c0001974:	89 da                	mov    edx,ebx
c0001976:	83 e2 f8             	and    edx,0xfffffff8
c0001979:	a1 c0 b6 02 c0       	mov    eax,ds:0xc002b6c0
c000197e:	83 e0 03             	and    eax,0x3
c0001981:	09 d0                	or     eax,edx
c0001983:	a3 c0 b6 02 c0       	mov    ds:0xc002b6c0,eax
c0001988:	eb 31                	jmp    c00019bb <dlmallopt+0x85>
c000198a:	89 1d 04 ba 02 c0    	mov    DWORD PTR ds:0xc002ba04,ebx
c0001990:	eb 06                	jmp    c0001998 <dlmallopt+0x62>
c0001992:	89 1d 08 ba 02 c0    	mov    DWORD PTR ds:0xc002ba08,ebx
c0001998:	be 01 00 00 00       	mov    esi,0x1
c000199d:	eb 1c                	jmp    c00019bb <dlmallopt+0x85>
c000199f:	89 1d 0c ba 02 c0    	mov    DWORD PTR ds:0xc002ba0c,ebx
c00019a5:	eb f1                	jmp    c0001998 <dlmallopt+0x62>
c00019a7:	31 f6                	xor    esi,esi
c00019a9:	85 db                	test   ebx,ebx
c00019ab:	75 0e                	jne    c00019bb <dlmallopt+0x85>
c00019ad:	c7 05 14 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ba14,0x0
c00019b7:	eb df                	jmp    c0001998 <dlmallopt+0x62>
c00019b9:	31 f6                	xor    esi,esi
c00019bb:	89 f0                	mov    eax,esi
c00019bd:	5b                   	pop    ebx
c00019be:	5e                   	pop    esi
c00019bf:	c3                   	ret    

c00019c0 <disk_status>:
c00019c0:	31 c0                	xor    eax,eax
c00019c2:	c3                   	ret    

c00019c3 <disk_initialize>:
c00019c3:	31 c0                	xor    eax,eax
c00019c5:	c3                   	ret    

c00019c6 <disk_read>:
c00019c6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019cb:	0f b6 04 85 40 d1 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2ec0]
c00019d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d7:	e9 a8 d6 01 00       	jmp    c001f084 <fatWrapperReadDisk>

c00019dc <disk_write>:
c00019dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019e1:	0f b6 04 85 40 d1 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2ec0]
c00019e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019ed:	e9 d9 d6 01 00       	jmp    c001f0cb <fatWrapperWriteDisk>

c00019f2 <disk_ioctl>:
c00019f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019fb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a00:	0f b6 04 85 40 d1 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2ec0]
c0001a08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0c:	e9 01 d7 01 00       	jmp    c001f112 <fatWrapperIoctl>

c0001a11 <ld_word>:
c0001a11:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a18:	c1 e2 08             	shl    edx,0x8
c0001a1b:	09 d0                	or     eax,edx
c0001a1d:	c3                   	ret    

c0001a1e <ld_dword>:
c0001a1e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a22:	89 d1                	mov    ecx,edx
c0001a24:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a28:	c1 e1 08             	shl    ecx,0x8
c0001a2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a2e:	09 ca                	or     edx,ecx
c0001a30:	c1 e2 08             	shl    edx,0x8
c0001a33:	09 d0                	or     eax,edx
c0001a35:	c3                   	ret    

c0001a36 <ld_qword>:
c0001a36:	57                   	push   edi
c0001a37:	56                   	push   esi
c0001a38:	53                   	push   ebx
c0001a39:	31 db                	xor    ebx,ebx
c0001a3b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a3e:	89 df                	mov    edi,ebx
c0001a40:	89 ce                	mov    esi,ecx
c0001a42:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a46:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4a:	c1 e6 08             	shl    esi,0x8
c0001a4d:	09 f2                	or     edx,esi
c0001a4f:	89 d6                	mov    esi,edx
c0001a51:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a55:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a59:	c1 e6 08             	shl    esi,0x8
c0001a5c:	09 f2                	or     edx,esi
c0001a5e:	89 d6                	mov    esi,edx
c0001a60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a64:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6b:	c1 e6 08             	shl    esi,0x8
c0001a6e:	89 fb                	mov    ebx,edi
c0001a70:	09 f2                	or     edx,esi
c0001a72:	89 d1                	mov    ecx,edx
c0001a74:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a78:	c1 e1 08             	shl    ecx,0x8
c0001a7b:	89 da                	mov    edx,ebx
c0001a7d:	09 c8                	or     eax,ecx
c0001a7f:	5b                   	pop    ebx
c0001a80:	5e                   	pop    esi
c0001a81:	5f                   	pop    edi
c0001a82:	c3                   	ret    

c0001a83 <st_word>:
c0001a83:	66 89 10             	mov    WORD PTR [eax],dx
c0001a86:	c3                   	ret    

c0001a87 <st_dword>:
c0001a87:	89 10                	mov    DWORD PTR [eax],edx
c0001a89:	c3                   	ret    

c0001a8a <st_qword>:
c0001a8a:	89 10                	mov    DWORD PTR [eax],edx
c0001a8c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a8f:	c3                   	ret    

c0001a90 <mem_cpy>:
c0001a90:	85 c9                	test   ecx,ecx
c0001a92:	74 10                	je     c0001aa4 <mem_cpy+0x14>
c0001a94:	57                   	push   edi
c0001a95:	01 c1                	add    ecx,eax
c0001a97:	56                   	push   esi
c0001a98:	89 c7                	mov    edi,eax
c0001a9a:	89 d6                	mov    esi,edx
c0001a9c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a9d:	39 f9                	cmp    ecx,edi
c0001a9f:	75 fb                	jne    c0001a9c <mem_cpy+0xc>
c0001aa1:	5e                   	pop    esi
c0001aa2:	5f                   	pop    edi
c0001aa3:	c3                   	ret    
c0001aa4:	c3                   	ret    

c0001aa5 <mem_set>:
c0001aa5:	01 c1                	add    ecx,eax
c0001aa7:	40                   	inc    eax
c0001aa8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001aab:	39 c8                	cmp    eax,ecx
c0001aad:	75 f8                	jne    c0001aa7 <mem_set+0x2>
c0001aaf:	c3                   	ret    

c0001ab0 <mem_cmp>:
c0001ab0:	57                   	push   edi
c0001ab1:	56                   	push   esi
c0001ab2:	89 c6                	mov    esi,eax
c0001ab4:	53                   	push   ebx
c0001ab5:	46                   	inc    esi
c0001ab6:	42                   	inc    edx
c0001ab7:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001abb:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001abf:	29 fb                	sub    ebx,edi
c0001ac1:	89 cf                	mov    edi,ecx
c0001ac3:	29 f7                	sub    edi,esi
c0001ac5:	01 c7                	add    edi,eax
c0001ac7:	74 04                	je     c0001acd <mem_cmp+0x1d>
c0001ac9:	85 db                	test   ebx,ebx
c0001acb:	74 e8                	je     c0001ab5 <mem_cmp+0x5>
c0001acd:	89 d8                	mov    eax,ebx
c0001acf:	5b                   	pop    ebx
c0001ad0:	5e                   	pop    esi
c0001ad1:	5f                   	pop    edi
c0001ad2:	c3                   	ret    

c0001ad3 <chk_chr>:
c0001ad3:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ad6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ad9:	74 07                	je     c0001ae2 <chk_chr+0xf>
c0001adb:	39 d1                	cmp    ecx,edx
c0001add:	74 03                	je     c0001ae2 <chk_chr+0xf>
c0001adf:	40                   	inc    eax
c0001ae0:	eb f1                	jmp    c0001ad3 <chk_chr>
c0001ae2:	89 c8                	mov    eax,ecx
c0001ae4:	c3                   	ret    

c0001ae5 <dbc_1st>:
c0001ae5:	31 c0                	xor    eax,eax
c0001ae7:	c3                   	ret    

c0001ae8 <dbc_2nd>:
c0001ae8:	31 c0                	xor    eax,eax
c0001aea:	c3                   	ret    

c0001aeb <tchar2uni>:
c0001aeb:	57                   	push   edi
c0001aec:	89 c7                	mov    edi,eax
c0001aee:	56                   	push   esi
c0001aef:	53                   	push   ebx
c0001af0:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001af2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001af4:	8d 73 01             	lea    esi,[ebx+0x1]
c0001af7:	84 c9                	test   cl,cl
c0001af9:	78 0a                	js     c0001b05 <tchar2uni+0x1a>
c0001afb:	0f b6 d1             	movzx  edx,cl
c0001afe:	89 f3                	mov    ebx,esi
c0001b00:	e9 9f 00 00 00       	jmp    c0001ba4 <tchar2uni+0xb9>
c0001b05:	88 ca                	mov    dl,cl
c0001b07:	83 e2 e0             	and    edx,0xffffffe0
c0001b0a:	80 fa c0             	cmp    dl,0xc0
c0001b0d:	75 0c                	jne    c0001b1b <tchar2uni+0x30>
c0001b0f:	89 ca                	mov    edx,ecx
c0001b11:	b9 01 00 00 00       	mov    ecx,0x1
c0001b16:	83 e2 1f             	and    edx,0x1f
c0001b19:	eb 2e                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b1b:	88 ca                	mov    dl,cl
c0001b1d:	83 e2 f0             	and    edx,0xfffffff0
c0001b20:	80 fa e0             	cmp    dl,0xe0
c0001b23:	75 0c                	jne    c0001b31 <tchar2uni+0x46>
c0001b25:	89 ca                	mov    edx,ecx
c0001b27:	b9 02 00 00 00       	mov    ecx,0x2
c0001b2c:	83 e2 0f             	and    edx,0xf
c0001b2f:	eb 18                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b31:	88 ca                	mov    dl,cl
c0001b33:	83 e2 f8             	and    edx,0xfffffff8
c0001b36:	88 d0                	mov    al,dl
c0001b38:	83 ca ff             	or     edx,0xffffffff
c0001b3b:	3c f0                	cmp    al,0xf0
c0001b3d:	75 6c                	jne    c0001bab <tchar2uni+0xc0>
c0001b3f:	89 ca                	mov    edx,ecx
c0001b41:	b9 03 00 00 00       	mov    ecx,0x3
c0001b46:	83 e2 07             	and    edx,0x7
c0001b49:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b4d:	46                   	inc    esi
c0001b4e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b51:	88 c8                	mov    al,cl
c0001b53:	83 e0 c0             	and    eax,0xffffffc0
c0001b56:	3c 80                	cmp    al,0x80
c0001b58:	75 4e                	jne    c0001ba8 <tchar2uni+0xbd>
c0001b5a:	c1 e2 06             	shl    edx,0x6
c0001b5d:	83 e1 3f             	and    ecx,0x3f
c0001b60:	09 ca                	or     edx,ecx
c0001b62:	39 de                	cmp    esi,ebx
c0001b64:	75 e7                	jne    c0001b4d <tchar2uni+0x62>
c0001b66:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b69:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b6f:	77 37                	ja     c0001ba8 <tchar2uni+0xbd>
c0001b71:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b77:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b7d:	76 29                	jbe    c0001ba8 <tchar2uni+0xbd>
c0001b7f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b85:	76 1d                	jbe    c0001ba4 <tchar2uni+0xb9>
c0001b87:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b8d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b93:	c1 e1 06             	shl    ecx,0x6
c0001b96:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b9c:	09 ca                	or     edx,ecx
c0001b9e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ba4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ba6:	eb 03                	jmp    c0001bab <tchar2uni+0xc0>
c0001ba8:	83 ca ff             	or     edx,0xffffffff
c0001bab:	5b                   	pop    ebx
c0001bac:	89 d0                	mov    eax,edx
c0001bae:	5e                   	pop    esi
c0001baf:	5f                   	pop    edi
c0001bb0:	c3                   	ret    

c0001bb1 <put_utf>:
c0001bb1:	53                   	push   ebx
c0001bb2:	83 f8 7f             	cmp    eax,0x7f
c0001bb5:	89 c3                	mov    ebx,eax
c0001bb7:	b0 00                	mov    al,0x0
c0001bb9:	77 11                	ja     c0001bcc <put_utf+0x1b>
c0001bbb:	85 c9                	test   ecx,ecx
c0001bbd:	0f 84 e5 00 00 00    	je     c0001ca8 <put_utf+0xf7>
c0001bc3:	88 1a                	mov    BYTE PTR [edx],bl
c0001bc5:	b0 01                	mov    al,0x1
c0001bc7:	e9 dc 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bcc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bd2:	77 23                	ja     c0001bf7 <put_utf+0x46>
c0001bd4:	83 f9 01             	cmp    ecx,0x1
c0001bd7:	0f 86 cb 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001bdd:	89 d8                	mov    eax,ebx
c0001bdf:	83 e3 3f             	and    ebx,0x3f
c0001be2:	c1 e8 06             	shr    eax,0x6
c0001be5:	83 cb 80             	or     ebx,0xffffff80
c0001be8:	83 c8 c0             	or     eax,0xffffffc0
c0001beb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001bee:	88 02                	mov    BYTE PTR [edx],al
c0001bf0:	b0 02                	mov    al,0x2
c0001bf2:	e9 b1 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bf7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bfd:	77 40                	ja     c0001c3f <put_utf+0x8e>
c0001bff:	83 f9 02             	cmp    ecx,0x2
c0001c02:	0f 86 a0 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c08:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c0e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c14:	0f 86 8e 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c1a:	89 d8                	mov    eax,ebx
c0001c1c:	c1 e8 0c             	shr    eax,0xc
c0001c1f:	83 c8 e0             	or     eax,0xffffffe0
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	89 d8                	mov    eax,ebx
c0001c26:	83 e3 3f             	and    ebx,0x3f
c0001c29:	c1 e8 06             	shr    eax,0x6
c0001c2c:	83 cb 80             	or     ebx,0xffffff80
c0001c2f:	83 e0 3f             	and    eax,0x3f
c0001c32:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c35:	83 c8 80             	or     eax,0xffffff80
c0001c38:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c3b:	b0 03                	mov    al,0x3
c0001c3d:	eb 69                	jmp    c0001ca8 <put_utf+0xf7>
c0001c3f:	83 f9 03             	cmp    ecx,0x3
c0001c42:	76 64                	jbe    c0001ca8 <put_utf+0xf7>
c0001c44:	89 d9                	mov    ecx,ebx
c0001c46:	0f b7 c3             	movzx  eax,bx
c0001c49:	66 31 c9             	xor    cx,cx
c0001c4c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c52:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c58:	c1 e9 06             	shr    ecx,0x6
c0001c5b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c61:	77 43                	ja     c0001ca6 <put_utf+0xf5>
c0001c63:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c69:	77 3b                	ja     c0001ca6 <put_utf+0xf5>
c0001c6b:	09 cb                	or     ebx,ecx
c0001c6d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c73:	89 d8                	mov    eax,ebx
c0001c75:	c1 e8 12             	shr    eax,0x12
c0001c78:	83 c8 f0             	or     eax,0xfffffff0
c0001c7b:	88 02                	mov    BYTE PTR [edx],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	c1 e8 0c             	shr    eax,0xc
c0001c82:	83 e0 3f             	and    eax,0x3f
c0001c85:	83 c8 80             	or     eax,0xffffff80
c0001c88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c8b:	89 d8                	mov    eax,ebx
c0001c8d:	83 e3 3f             	and    ebx,0x3f
c0001c90:	c1 e8 06             	shr    eax,0x6
c0001c93:	83 cb 80             	or     ebx,0xffffff80
c0001c96:	83 e0 3f             	and    eax,0x3f
c0001c99:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c9c:	83 c8 80             	or     eax,0xffffff80
c0001c9f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ca2:	b0 04                	mov    al,0x4
c0001ca4:	eb 02                	jmp    c0001ca8 <put_utf+0xf7>
c0001ca6:	31 c0                	xor    eax,eax
c0001ca8:	5b                   	pop    ebx
c0001ca9:	c3                   	ret    

c0001caa <clst2sect>:
c0001caa:	89 c1                	mov    ecx,eax
c0001cac:	83 ea 02             	sub    edx,0x2
c0001caf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cb2:	83 e8 02             	sub    eax,0x2
c0001cb5:	39 d0                	cmp    eax,edx
c0001cb7:	76 0d                	jbe    c0001cc6 <clst2sect+0x1c>
c0001cb9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cbd:	f7 e2                	mul    edx
c0001cbf:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cc2:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cc5:	c3                   	ret    
c0001cc6:	31 c0                	xor    eax,eax
c0001cc8:	31 d2                	xor    edx,edx
c0001cca:	c3                   	ret    

c0001ccb <clmt_clust>:
c0001ccb:	57                   	push   edi
c0001ccc:	89 cf                	mov    edi,ecx
c0001cce:	56                   	push   esi
c0001ccf:	89 d6                	mov    esi,edx
c0001cd1:	53                   	push   ebx
c0001cd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cd6:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001cd9:	89 f2                	mov    edx,esi
c0001cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0001cdd:	c1 ef 09             	shr    edi,0x9
c0001ce0:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001ce4:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001ce7:	89 f9                	mov    ecx,edi
c0001ce9:	31 ff                	xor    edi,edi
c0001ceb:	57                   	push   edi
c0001cec:	56                   	push   esi
c0001ced:	51                   	push   ecx
c0001cee:	52                   	push   edx
c0001cef:	e8 38 2a 02 00       	call   c002472c <__udivdi3>
c0001cf4:	83 c4 10             	add    esp,0x10
c0001cf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001cf9:	85 d2                	test   edx,edx
c0001cfb:	74 10                	je     c0001d0d <clmt_clust+0x42>
c0001cfd:	39 d0                	cmp    eax,edx
c0001cff:	72 07                	jb     c0001d08 <clmt_clust+0x3d>
c0001d01:	29 d0                	sub    eax,edx
c0001d03:	83 c3 08             	add    ebx,0x8
c0001d06:	eb ef                	jmp    c0001cf7 <clmt_clust+0x2c>
c0001d08:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d0b:	89 c2                	mov    edx,eax
c0001d0d:	5b                   	pop    ebx
c0001d0e:	89 d0                	mov    eax,edx
c0001d10:	5e                   	pop    esi
c0001d11:	5f                   	pop    edi
c0001d12:	c3                   	ret    

c0001d13 <pick_lfn>:
c0001d13:	55                   	push   ebp
c0001d14:	57                   	push   edi
c0001d15:	56                   	push   esi
c0001d16:	89 d6                	mov    esi,edx
c0001d18:	53                   	push   ebx
c0001d19:	89 c3                	mov    ebx,eax
c0001d1b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1e:	e8 ee fc ff ff       	call   c0001a11 <ld_word>
c0001d23:	66 85 c0             	test   ax,ax
c0001d26:	74 04                	je     c0001d2c <pick_lfn+0x19>
c0001d28:	31 c0                	xor    eax,eax
c0001d2a:	eb 5c                	jmp    c0001d88 <pick_lfn+0x75>
c0001d2c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d2f:	bd 01 00 00 00       	mov    ebp,0x1
c0001d34:	83 e1 bf             	and    ecx,0xffffffbf
c0001d37:	31 ff                	xor    edi,edi
c0001d39:	49                   	dec    ecx
c0001d3a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d3d:	0f b6 87 60 71 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd8ea0]
c0001d44:	01 f0                	add    eax,esi
c0001d46:	e8 c6 fc ff ff       	call   c0001a11 <ld_word>
c0001d4b:	66 85 ed             	test   bp,bp
c0001d4e:	74 11                	je     c0001d61 <pick_lfn+0x4e>
c0001d50:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d56:	77 d0                	ja     c0001d28 <pick_lfn+0x15>
c0001d58:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d5c:	89 c5                	mov    ebp,eax
c0001d5e:	41                   	inc    ecx
c0001d5f:	eb 04                	jmp    c0001d65 <pick_lfn+0x52>
c0001d61:	66 40                	inc    ax
c0001d63:	75 c3                	jne    c0001d28 <pick_lfn+0x15>
c0001d65:	47                   	inc    edi
c0001d66:	83 ff 0d             	cmp    edi,0xd
c0001d69:	75 d2                	jne    c0001d3d <pick_lfn+0x2a>
c0001d6b:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d6e:	74 13                	je     c0001d83 <pick_lfn+0x70>
c0001d70:	66 85 ed             	test   bp,bp
c0001d73:	74 0e                	je     c0001d83 <pick_lfn+0x70>
c0001d75:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d7b:	77 ab                	ja     c0001d28 <pick_lfn+0x15>
c0001d7d:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d83:	b8 01 00 00 00       	mov    eax,0x1
c0001d88:	5b                   	pop    ebx
c0001d89:	5e                   	pop    esi
c0001d8a:	5f                   	pop    edi
c0001d8b:	5d                   	pop    ebp
c0001d8c:	c3                   	ret    

c0001d8d <put_lfn>:
c0001d8d:	55                   	push   ebp
c0001d8e:	31 ed                	xor    ebp,ebp
c0001d90:	57                   	push   edi
c0001d91:	89 d7                	mov    edi,edx
c0001d93:	56                   	push   esi
c0001d94:	31 f6                	xor    esi,esi
c0001d96:	53                   	push   ebx
c0001d97:	83 ec 08             	sub    esp,0x8
c0001d9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d9d:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001da5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dab:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dae:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001db1:	31 d2                	xor    edx,edx
c0001db3:	e8 cb fc ff ff       	call   c0001a83 <st_word>
c0001db8:	0f b6 d9             	movzx  ebx,cl
c0001dbb:	4b                   	dec    ebx
c0001dbc:	6b db 0d             	imul   ebx,ebx,0xd
c0001dbf:	66 83 fe ff          	cmp    si,0xffff
c0001dc3:	74 08                	je     c0001dcd <put_lfn+0x40>
c0001dc5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dc8:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dcc:	43                   	inc    ebx
c0001dcd:	0f b6 85 60 71 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd8ea0]
c0001dd4:	0f b7 d6             	movzx  edx,si
c0001dd7:	01 f8                	add    eax,edi
c0001dd9:	e8 a5 fc ff ff       	call   c0001a83 <st_word>
c0001dde:	66 85 f6             	test   si,si
c0001de1:	75 03                	jne    c0001de6 <put_lfn+0x59>
c0001de3:	83 ce ff             	or     esi,0xffffffff
c0001de6:	45                   	inc    ebp
c0001de7:	83 fd 0d             	cmp    ebp,0xd
c0001dea:	75 d3                	jne    c0001dbf <put_lfn+0x32>
c0001dec:	66 46                	inc    si
c0001dee:	74 0a                	je     c0001dfa <put_lfn+0x6d>
c0001df0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001df8:	75 09                	jne    c0001e03 <put_lfn+0x76>
c0001dfa:	88 c8                	mov    al,cl
c0001dfc:	83 c8 40             	or     eax,0x40
c0001dff:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e03:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e07:	88 07                	mov    BYTE PTR [edi],al
c0001e09:	83 c4 08             	add    esp,0x8
c0001e0c:	5b                   	pop    ebx
c0001e0d:	5e                   	pop    esi
c0001e0e:	5f                   	pop    edi
c0001e0f:	5d                   	pop    ebp
c0001e10:	c3                   	ret    

c0001e11 <gen_numname>:
c0001e11:	57                   	push   edi
c0001e12:	89 cf                	mov    edi,ecx
c0001e14:	56                   	push   esi
c0001e15:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e1a:	53                   	push   ebx
c0001e1b:	89 c6                	mov    esi,eax
c0001e1d:	83 ec 10             	sub    esp,0x10
c0001e20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e24:	e8 67 fc ff ff       	call   c0001a90 <mem_cpy>
c0001e29:	83 fb 05             	cmp    ebx,0x5
c0001e2c:	76 2d                	jbe    c0001e5b <gen_numname+0x4a>
c0001e2e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e31:	66 85 c0             	test   ax,ax
c0001e34:	74 25                	je     c0001e5b <gen_numname+0x4a>
c0001e36:	83 c7 02             	add    edi,0x2
c0001e39:	ba 10 00 00 00       	mov    edx,0x10
c0001e3e:	01 db                	add    ebx,ebx
c0001e40:	89 c1                	mov    ecx,eax
c0001e42:	66 d1 e8             	shr    ax,1
c0001e45:	83 e1 01             	and    ecx,0x1
c0001e48:	01 cb                	add    ebx,ecx
c0001e4a:	0f ba e3 10          	bt     ebx,0x10
c0001e4e:	73 06                	jae    c0001e56 <gen_numname+0x45>
c0001e50:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e56:	4a                   	dec    edx
c0001e57:	75 e5                	jne    c0001e3e <gen_numname+0x2d>
c0001e59:	eb d3                	jmp    c0001e2e <gen_numname+0x1d>
c0001e5b:	b8 07 00 00 00       	mov    eax,0x7
c0001e60:	88 d9                	mov    cl,bl
c0001e62:	83 e1 0f             	and    ecx,0xf
c0001e65:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e68:	80 fa 39             	cmp    dl,0x39
c0001e6b:	76 03                	jbe    c0001e70 <gen_numname+0x5f>
c0001e6d:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e70:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e73:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e77:	89 da                	mov    edx,ebx
c0001e79:	c1 ea 04             	shr    edx,0x4
c0001e7c:	83 fb 0f             	cmp    ebx,0xf
c0001e7f:	76 06                	jbe    c0001e87 <gen_numname+0x76>
c0001e81:	89 c8                	mov    eax,ecx
c0001e83:	89 d3                	mov    ebx,edx
c0001e85:	eb d9                	jmp    c0001e60 <gen_numname+0x4f>
c0001e87:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e8c:	31 d2                	xor    edx,edx
c0001e8e:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e91:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e94:	39 ca                	cmp    edx,ecx
c0001e96:	73 18                	jae    c0001eb0 <gen_numname+0x9f>
c0001e98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e9b:	3c 20                	cmp    al,0x20
c0001e9d:	74 11                	je     c0001eb0 <gen_numname+0x9f>
c0001e9f:	e8 41 fc ff ff       	call   c0001ae5 <dbc_1st>
c0001ea4:	85 c0                	test   eax,eax
c0001ea6:	74 05                	je     c0001ead <gen_numname+0x9c>
c0001ea8:	39 d3                	cmp    ebx,edx
c0001eaa:	74 04                	je     c0001eb0 <gen_numname+0x9f>
c0001eac:	42                   	inc    edx
c0001ead:	42                   	inc    edx
c0001eae:	eb e1                	jmp    c0001e91 <gen_numname+0x80>
c0001eb0:	b0 20                	mov    al,0x20
c0001eb2:	83 f9 07             	cmp    ecx,0x7
c0001eb5:	77 05                	ja     c0001ebc <gen_numname+0xab>
c0001eb7:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ebb:	41                   	inc    ecx
c0001ebc:	42                   	inc    edx
c0001ebd:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ec1:	83 fa 07             	cmp    edx,0x7
c0001ec4:	76 ea                	jbe    c0001eb0 <gen_numname+0x9f>
c0001ec6:	83 c4 10             	add    esp,0x10
c0001ec9:	5b                   	pop    ebx
c0001eca:	5e                   	pop    esi
c0001ecb:	5f                   	pop    edi
c0001ecc:	c3                   	ret    

c0001ecd <sum_sfn>:
c0001ecd:	31 c9                	xor    ecx,ecx
c0001ecf:	31 d2                	xor    edx,edx
c0001ed1:	d0 ca                	ror    dl,1
c0001ed3:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ed6:	41                   	inc    ecx
c0001ed7:	83 f9 0b             	cmp    ecx,0xb
c0001eda:	75 f5                	jne    c0001ed1 <sum_sfn+0x4>
c0001edc:	88 d0                	mov    al,dl
c0001ede:	c3                   	ret    

c0001edf <xdir_sum>:
c0001edf:	56                   	push   esi
c0001ee0:	31 c9                	xor    ecx,ecx
c0001ee2:	53                   	push   ebx
c0001ee3:	31 d2                	xor    edx,edx
c0001ee5:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001ee9:	43                   	inc    ebx
c0001eea:	c1 e3 05             	shl    ebx,0x5
c0001eed:	83 fa 02             	cmp    edx,0x2
c0001ef0:	74 0b                	je     c0001efd <xdir_sum+0x1e>
c0001ef2:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ef6:	66 d1 c9             	ror    cx,1
c0001ef9:	01 f1                	add    ecx,esi
c0001efb:	eb 05                	jmp    c0001f02 <xdir_sum+0x23>
c0001efd:	ba 03 00 00 00       	mov    edx,0x3
c0001f02:	42                   	inc    edx
c0001f03:	39 d3                	cmp    ebx,edx
c0001f05:	77 e6                	ja     c0001eed <xdir_sum+0xe>
c0001f07:	89 c8                	mov    eax,ecx
c0001f09:	5b                   	pop    ebx
c0001f0a:	5e                   	pop    esi
c0001f0b:	c3                   	ret    

c0001f0c <xsum32>:
c0001f0c:	d1 ca                	ror    edx,1
c0001f0e:	0f b6 c0             	movzx  eax,al
c0001f11:	01 d0                	add    eax,edx
c0001f13:	c3                   	ret    

c0001f14 <get_xfileinfo>:
c0001f14:	55                   	push   ebp
c0001f15:	31 c9                	xor    ecx,ecx
c0001f17:	57                   	push   edi
c0001f18:	bd 40 00 00 00       	mov    ebp,0x40
c0001f1d:	56                   	push   esi
c0001f1e:	31 ff                	xor    edi,edi
c0001f20:	53                   	push   ebx
c0001f21:	89 c6                	mov    esi,eax
c0001f23:	83 ec 0c             	sub    esp,0xc
c0001f26:	89 d3                	mov    ebx,edx
c0001f28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f2f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f33:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f36:	76 6d                	jbe    c0001fa5 <get_xfileinfo+0x91>
c0001f38:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f3e:	76 0b                	jbe    c0001f4b <get_xfileinfo+0x37>
c0001f40:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f44:	bf 01 00 00 00       	mov    edi,0x1
c0001f49:	eb 63                	jmp    c0001fae <get_xfileinfo+0x9a>
c0001f4b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f51:	75 03                	jne    c0001f56 <get_xfileinfo+0x42>
c0001f53:	83 c5 02             	add    ebp,0x2
c0001f56:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f59:	83 c5 02             	add    ebp,0x2
c0001f5c:	e8 b0 fa ff ff       	call   c0001a11 <ld_word>
c0001f61:	ff 04 24             	inc    DWORD PTR [esp]
c0001f64:	66 85 c9             	test   cx,cx
c0001f67:	75 0d                	jne    c0001f76 <get_xfileinfo+0x62>
c0001f69:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f6f:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f74:	76 2b                	jbe    c0001fa1 <get_xfileinfo+0x8d>
c0001f76:	c1 e1 10             	shl    ecx,0x10
c0001f79:	ba ff 00 00 00       	mov    edx,0xff
c0001f7e:	0f b7 c0             	movzx  eax,ax
c0001f81:	29 fa                	sub    edx,edi
c0001f83:	09 c8                	or     eax,ecx
c0001f85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f89:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f91:	e8 1b fc ff ff       	call   c0001bb1 <put_utf>
c0001f96:	84 c0                	test   al,al
c0001f98:	74 a6                	je     c0001f40 <get_xfileinfo+0x2c>
c0001f9a:	0f b6 c0             	movzx  eax,al
c0001f9d:	01 c7                	add    edi,eax
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	89 c1                	mov    ecx,eax
c0001fa3:	eb 8a                	jmp    c0001f2f <get_xfileinfo+0x1b>
c0001fa5:	85 ff                	test   edi,edi
c0001fa7:	74 97                	je     c0001f40 <get_xfileinfo+0x2c>
c0001fa9:	66 85 c9             	test   cx,cx
c0001fac:	75 92                	jne    c0001f40 <get_xfileinfo+0x2c>
c0001fae:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fb3:	31 c0                	xor    eax,eax
c0001fb5:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fb9:	31 d2                	xor    edx,edx
c0001fbb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fbe:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fc1:	80 e1 10             	and    cl,0x10
c0001fc4:	75 08                	jne    c0001fce <get_xfileinfo+0xba>
c0001fc6:	8d 46 38             	lea    eax,[esi+0x38]
c0001fc9:	e8 68 fa ff ff       	call   c0001a36 <ld_qword>
c0001fce:	89 03                	mov    DWORD PTR [ebx],eax
c0001fd0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fd3:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fd6:	e8 36 fa ff ff       	call   c0001a11 <ld_word>
c0001fdb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fdf:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fe2:	e8 2a fa ff ff       	call   c0001a11 <ld_word>
c0001fe7:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001feb:	83 c4 0c             	add    esp,0xc
c0001fee:	5b                   	pop    ebx
c0001fef:	5e                   	pop    esi
c0001ff0:	5f                   	pop    edi
c0001ff1:	5d                   	pop    ebp
c0001ff2:	c3                   	ret    

c0001ff3 <get_ldnumber>:
c0001ff3:	8b 10                	mov    edx,DWORD PTR [eax]
c0001ff5:	85 d2                	test   edx,edx
c0001ff7:	74 14                	je     c000200d <get_ldnumber+0x1a>
c0001ff9:	56                   	push   esi
c0001ffa:	53                   	push   ebx
c0001ffb:	89 d3                	mov    ebx,edx
c0001ffd:	43                   	inc    ebx
c0001ffe:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002001:	80 f9 1f             	cmp    cl,0x1f
c0002004:	76 0d                	jbe    c0002013 <get_ldnumber+0x20>
c0002006:	80 f9 3a             	cmp    cl,0x3a
c0002009:	75 f2                	jne    c0001ffd <get_ldnumber+0xa>
c000200b:	eb 0a                	jmp    c0002017 <get_ldnumber+0x24>
c000200d:	83 c9 ff             	or     ecx,0xffffffff
c0002010:	89 c8                	mov    eax,ecx
c0002012:	c3                   	ret    
c0002013:	31 c9                	xor    ecx,ecx
c0002015:	eb 24                	jmp    c000203b <get_ldnumber+0x48>
c0002017:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000201a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000201d:	80 f9 09             	cmp    cl,0x9
c0002020:	77 16                	ja     c0002038 <get_ldnumber+0x45>
c0002022:	83 c2 02             	add    edx,0x2
c0002025:	83 c9 ff             	or     ecx,0xffffffff
c0002028:	39 d3                	cmp    ebx,edx
c000202a:	75 0f                	jne    c000203b <get_ldnumber+0x48>
c000202c:	89 f2                	mov    edx,esi
c000202e:	89 18                	mov    DWORD PTR [eax],ebx
c0002030:	0f be ca             	movsx  ecx,dl
c0002033:	83 e9 30             	sub    ecx,0x30
c0002036:	eb 03                	jmp    c000203b <get_ldnumber+0x48>
c0002038:	83 c9 ff             	or     ecx,0xffffffff
c000203b:	89 c8                	mov    eax,ecx
c000203d:	5b                   	pop    ebx
c000203e:	5e                   	pop    esi
c000203f:	c3                   	ret    

c0002040 <crc32>:
c0002040:	56                   	push   esi
c0002041:	89 d6                	mov    esi,edx
c0002043:	53                   	push   ebx
c0002044:	b2 01                	mov    dl,0x1
c0002046:	bb 08 00 00 00       	mov    ebx,0x8
c000204b:	89 f1                	mov    ecx,esi
c000204d:	84 d1                	test   cl,dl
c000204f:	0f 95 c1             	setne  cl
c0002052:	0f b6 c9             	movzx  ecx,cl
c0002055:	31 c1                	xor    ecx,eax
c0002057:	89 c8                	mov    eax,ecx
c0002059:	d1 e8                	shr    eax,1
c000205b:	80 e1 01             	and    cl,0x1
c000205e:	74 05                	je     c0002065 <crc32+0x25>
c0002060:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002065:	d1 e2                	shl    edx,1
c0002067:	4b                   	dec    ebx
c0002068:	75 e1                	jne    c000204b <crc32+0xb>
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    

c000206d <test_gpt_header>:
c000206d:	55                   	push   ebp
c000206e:	b9 10 00 00 00       	mov    ecx,0x10
c0002073:	57                   	push   edi
c0002074:	ba 60 70 02 c0       	mov    edx,0xc0027060
c0002079:	56                   	push   esi
c000207a:	31 ff                	xor    edi,edi
c000207c:	53                   	push   ebx
c000207d:	89 c3                	mov    ebx,eax
c000207f:	e8 2c fa ff ff       	call   c0001ab0 <mem_cmp>
c0002084:	85 c0                	test   eax,eax
c0002086:	75 55                	jne    c00020dd <test_gpt_header+0x70>
c0002088:	89 c7                	mov    edi,eax
c000208a:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000208f:	83 ce ff             	or     esi,0xffffffff
c0002092:	31 d2                	xor    edx,edx
c0002094:	83 fd 03             	cmp    ebp,0x3
c0002097:	76 05                	jbe    c000209e <test_gpt_header+0x31>
c0002099:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000209e:	89 f0                	mov    eax,esi
c00020a0:	45                   	inc    ebp
c00020a1:	e8 9a ff ff ff       	call   c0002040 <crc32>
c00020a6:	83 fd 4c             	cmp    ebp,0x4c
c00020a9:	89 c6                	mov    esi,eax
c00020ab:	75 e5                	jne    c0002092 <test_gpt_header+0x25>
c00020ad:	8d 43 10             	lea    eax,[ebx+0x10]
c00020b0:	f7 d6                	not    esi
c00020b2:	e8 67 f9 ff ff       	call   c0001a1e <ld_dword>
c00020b7:	39 c6                	cmp    esi,eax
c00020b9:	75 22                	jne    c00020dd <test_gpt_header+0x70>
c00020bb:	8d 43 54             	lea    eax,[ebx+0x54]
c00020be:	e8 5b f9 ff ff       	call   c0001a1e <ld_dword>
c00020c3:	83 c0 80             	add    eax,0xffffff80
c00020c6:	75 15                	jne    c00020dd <test_gpt_header+0x70>
c00020c8:	8d 43 50             	lea    eax,[ebx+0x50]
c00020cb:	e8 4e f9 ff ff       	call   c0001a1e <ld_dword>
c00020d0:	3d 80 00 00 00       	cmp    eax,0x80
c00020d5:	0f 96 c0             	setbe  al
c00020d8:	0f b6 c0             	movzx  eax,al
c00020db:	89 c7                	mov    edi,eax
c00020dd:	5b                   	pop    ebx
c00020de:	89 f8                	mov    eax,edi
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	5d                   	pop    ebp
c00020e3:	c3                   	ret    

c00020e4 <make_rand>:
c00020e4:	56                   	push   esi
c00020e5:	85 c0                	test   eax,eax
c00020e7:	53                   	push   ebx
c00020e8:	75 05                	jne    c00020ef <make_rand+0xb>
c00020ea:	b8 01 00 00 00       	mov    eax,0x1
c00020ef:	01 d1                	add    ecx,edx
c00020f1:	bb 08 00 00 00       	mov    ebx,0x8
c00020f6:	89 c6                	mov    esi,eax
c00020f8:	d1 e8                	shr    eax,1
c00020fa:	83 e6 01             	and    esi,0x1
c00020fd:	85 f6                	test   esi,esi
c00020ff:	74 05                	je     c0002106 <make_rand+0x22>
c0002101:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002106:	4b                   	dec    ebx
c0002107:	75 ed                	jne    c00020f6 <make_rand+0x12>
c0002109:	42                   	inc    edx
c000210a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000210d:	39 ca                	cmp    edx,ecx
c000210f:	75 e0                	jne    c00020f1 <make_rand+0xd>
c0002111:	5b                   	pop    ebx
c0002112:	5e                   	pop    esi
c0002113:	c3                   	ret    

c0002114 <validate>:
c0002114:	56                   	push   esi
c0002115:	53                   	push   ebx
c0002116:	89 d6                	mov    esi,edx
c0002118:	51                   	push   ecx
c0002119:	85 c0                	test   eax,eax
c000211b:	75 09                	jne    c0002126 <validate+0x12>
c000211d:	b8 09 00 00 00       	mov    eax,0x9
c0002122:	31 c9                	xor    ecx,ecx
c0002124:	eb 2f                	jmp    c0002155 <validate+0x41>
c0002126:	89 c3                	mov    ebx,eax
c0002128:	8b 00                	mov    eax,DWORD PTR [eax]
c000212a:	85 c0                	test   eax,eax
c000212c:	74 ef                	je     c000211d <validate+0x9>
c000212e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002131:	74 ea                	je     c000211d <validate+0x9>
c0002133:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002137:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000213b:	75 e0                	jne    c000211d <validate+0x9>
c000213d:	83 ec 0c             	sub    esp,0xc
c0002140:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002144:	50                   	push   eax
c0002145:	e8 76 f8 ff ff       	call   c00019c0 <disk_status>
c000214a:	83 c4 10             	add    esp,0x10
c000214d:	a8 01                	test   al,0x1
c000214f:	75 cc                	jne    c000211d <validate+0x9>
c0002151:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002153:	31 c0                	xor    eax,eax
c0002155:	89 0e                	mov    DWORD PTR [esi],ecx
c0002157:	5a                   	pop    edx
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	c3                   	ret    

c000215b <sync_window>:
c000215b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000215f:	0f 84 85 00 00 00    	je     c00021ea <sync_window+0x8f>
c0002165:	55                   	push   ebp
c0002166:	8d 68 54             	lea    ebp,[eax+0x54]
c0002169:	57                   	push   edi
c000216a:	56                   	push   esi
c000216b:	53                   	push   ebx
c000216c:	89 c3                	mov    ebx,eax
c000216e:	83 ec 28             	sub    esp,0x28
c0002171:	6a 01                	push   0x1
c0002173:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002176:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002179:	55                   	push   ebp
c000217a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217e:	50                   	push   eax
c000217f:	e8 58 f8 ff ff       	call   c00019dc <disk_write>
c0002184:	83 c4 20             	add    esp,0x20
c0002187:	ba 01 00 00 00       	mov    edx,0x1
c000218c:	85 c0                	test   eax,eax
c000218e:	75 50                	jne    c00021e0 <sync_window+0x85>
c0002190:	31 ff                	xor    edi,edi
c0002192:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002195:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002199:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000219d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021a0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021a3:	89 c6                	mov    esi,eax
c00021a5:	89 d7                	mov    edi,edx
c00021a7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021aa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021ae:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021b1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021b5:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021b9:	73 23                	jae    c00021de <sync_window+0x83>
c00021bb:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021bf:	75 1d                	jne    c00021de <sync_window+0x83>
c00021c1:	83 ec 0c             	sub    esp,0xc
c00021c4:	6a 01                	push   0x1
c00021c6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021ca:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021ce:	52                   	push   edx
c00021cf:	50                   	push   eax
c00021d0:	55                   	push   ebp
c00021d1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021d5:	50                   	push   eax
c00021d6:	e8 01 f8 ff ff       	call   c00019dc <disk_write>
c00021db:	83 c4 20             	add    esp,0x20
c00021de:	31 d2                	xor    edx,edx
c00021e0:	83 c4 1c             	add    esp,0x1c
c00021e3:	89 d0                	mov    eax,edx
c00021e5:	5b                   	pop    ebx
c00021e6:	5e                   	pop    esi
c00021e7:	5f                   	pop    edi
c00021e8:	5d                   	pop    ebp
c00021e9:	c3                   	ret    
c00021ea:	31 d2                	xor    edx,edx
c00021ec:	89 d0                	mov    eax,edx
c00021ee:	c3                   	ret    

c00021ef <move_window>:
c00021ef:	56                   	push   esi
c00021f0:	53                   	push   ebx
c00021f1:	89 c3                	mov    ebx,eax
c00021f3:	83 ec 14             	sub    esp,0x14
c00021f6:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021f9:	75 07                	jne    c0002202 <move_window+0x13>
c00021fb:	31 f6                	xor    esi,esi
c00021fd:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002200:	74 59                	je     c000225b <move_window+0x6c>
c0002202:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002206:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000220a:	89 d8                	mov    eax,ebx
c000220c:	e8 4a ff ff ff       	call   c000215b <sync_window>
c0002211:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002215:	89 c6                	mov    esi,eax
c0002217:	85 c0                	test   eax,eax
c0002219:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000221d:	75 3c                	jne    c000225b <move_window+0x6c>
c000221f:	83 ec 0c             	sub    esp,0xc
c0002222:	8d 43 54             	lea    eax,[ebx+0x54]
c0002225:	6a 01                	push   0x1
c0002227:	51                   	push   ecx
c0002228:	52                   	push   edx
c0002229:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000222d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002231:	50                   	push   eax
c0002232:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002236:	50                   	push   eax
c0002237:	e8 8a f7 ff ff       	call   c00019c6 <disk_read>
c000223c:	83 c4 20             	add    esp,0x20
c000223f:	85 c0                	test   eax,eax
c0002241:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002245:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002249:	74 0a                	je     c0002255 <move_window+0x66>
c000224b:	83 ca ff             	or     edx,0xffffffff
c000224e:	be 01 00 00 00       	mov    esi,0x1
c0002253:	89 d1                	mov    ecx,edx
c0002255:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002258:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000225b:	89 f0                	mov    eax,esi
c000225d:	83 c4 14             	add    esp,0x14
c0002260:	5b                   	pop    ebx
c0002261:	5e                   	pop    esi
c0002262:	c3                   	ret    

c0002263 <check_fs>:
c0002263:	53                   	push   ebx
c0002264:	89 c3                	mov    ebx,eax
c0002266:	83 ec 08             	sub    esp,0x8
c0002269:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000226d:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002274:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000227b:	e8 6f ff ff ff       	call   c00021ef <move_window>
c0002280:	ba 04 00 00 00       	mov    edx,0x4
c0002285:	85 c0                	test   eax,eax
c0002287:	0f 85 89 00 00 00    	jne    c0002316 <check_fs+0xb3>
c000228d:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002293:	e8 79 f7 ff ff       	call   c0001a11 <ld_word>
c0002298:	ba 03 00 00 00       	mov    edx,0x3
c000229d:	66 3d 55 aa          	cmp    ax,0xaa55
c00022a1:	75 73                	jne    c0002316 <check_fs+0xb3>
c00022a3:	ba 80 71 02 c0       	mov    edx,0xc0027180
c00022a8:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00022b0:	e8 fb f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022b5:	ba 01 00 00 00       	mov    edx,0x1
c00022ba:	85 c0                	test   eax,eax
c00022bc:	74 58                	je     c0002316 <check_fs+0xb3>
c00022be:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022c1:	8d 50 18             	lea    edx,[eax+0x18]
c00022c4:	80 fa 01             	cmp    dl,0x1
c00022c7:	76 09                	jbe    c00022d2 <check_fs+0x6f>
c00022c9:	ba 02 00 00 00       	mov    edx,0x2
c00022ce:	3c eb                	cmp    al,0xeb
c00022d0:	75 44                	jne    c0002316 <check_fs+0xb3>
c00022d2:	ba b8 9f 02 c0       	mov    edx,0xc0029fb8
c00022d7:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022dd:	b9 03 00 00 00       	mov    ecx,0x3
c00022e2:	e8 c9 f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022e7:	31 d2                	xor    edx,edx
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 29                	je     c0002316 <check_fs+0xb3>
c00022ed:	ba 8c 71 02 c0       	mov    edx,0xc002718c
c00022f2:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022f8:	b9 05 00 00 00       	mov    ecx,0x5
c00022fd:	e8 ae f7 ff ff       	call   c0001ab0 <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 0e                	je     c0002316 <check_fs+0xb3>
c0002308:	31 d2                	xor    edx,edx
c000230a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002311:	0f 95 c2             	setne  dl
c0002314:	01 d2                	add    edx,edx
c0002316:	89 d0                	mov    eax,edx
c0002318:	83 c4 08             	add    esp,0x8
c000231b:	5b                   	pop    ebx
c000231c:	c3                   	ret    

c000231d <find_volume>:
c000231d:	55                   	push   ebp
c000231e:	31 c9                	xor    ecx,ecx
c0002320:	57                   	push   edi
c0002321:	56                   	push   esi
c0002322:	89 d6                	mov    esi,edx
c0002324:	53                   	push   ebx
c0002325:	31 d2                	xor    edx,edx
c0002327:	83 ec 3c             	sub    esp,0x3c
c000232a:	89 c3                	mov    ebx,eax
c000232c:	e8 32 ff ff ff       	call   c0002263 <check_fs>
c0002331:	83 f8 02             	cmp    eax,0x2
c0002334:	74 0e                	je     c0002344 <find_volume+0x27>
c0002336:	0f 87 5d 01 00 00    	ja     c0002499 <find_volume+0x17c>
c000233c:	85 f6                	test   esi,esi
c000233e:	0f 84 55 01 00 00    	je     c0002499 <find_volume+0x17c>
c0002344:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000234b:	0f 85 dd 00 00 00    	jne    c000242e <find_volume+0x111>
c0002351:	31 c9                	xor    ecx,ecx
c0002353:	ba 01 00 00 00       	mov    edx,0x1
c0002358:	89 d8                	mov    eax,ebx
c000235a:	e8 90 fe ff ff       	call   c00021ef <move_window>
c000235f:	85 c0                	test   eax,eax
c0002361:	74 0a                	je     c000236d <find_volume+0x50>
c0002363:	b8 04 00 00 00       	mov    eax,0x4
c0002368:	e9 2c 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c000236d:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002370:	89 e8                	mov    eax,ebp
c0002372:	e8 f6 fc ff ff       	call   c000206d <test_gpt_header>
c0002377:	85 c0                	test   eax,eax
c0002379:	75 0a                	jne    c0002385 <find_volume+0x68>
c000237b:	b8 03 00 00 00       	mov    eax,0x3
c0002380:	e9 14 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c0002385:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000238b:	e8 8e f6 ff ff       	call   c0001a1e <ld_dword>
c0002390:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002394:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000239a:	e8 97 f6 ff ff       	call   c0001a36 <ld_qword>
c000239f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023bb:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023bf:	74 ba                	je     c000237b <find_volume+0x5e>
c00023c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023c5:	31 c9                	xor    ecx,ecx
c00023c7:	c1 e7 07             	shl    edi,0x7
c00023ca:	89 d8                	mov    eax,ebx
c00023cc:	89 fa                	mov    edx,edi
c00023ce:	c1 ea 09             	shr    edx,0x9
c00023d1:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023d5:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023d9:	e8 11 fe ff ff       	call   c00021ef <move_window>
c00023de:	85 c0                	test   eax,eax
c00023e0:	75 81                	jne    c0002363 <find_volume+0x46>
c00023e2:	81 e7 80 01 00 00    	and    edi,0x180
c00023e8:	b9 10 00 00 00       	mov    ecx,0x10
c00023ed:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023f1:	ba 70 71 02 c0       	mov    edx,0xc0027170
c00023f6:	e8 b5 f6 ff ff       	call   c0001ab0 <mem_cmp>
c00023fb:	85 c0                	test   eax,eax
c00023fd:	75 29                	jne    c0002428 <find_volume+0x10b>
c00023ff:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002403:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002407:	e8 2a f6 ff ff       	call   c0001a36 <ld_qword>
c000240c:	89 d1                	mov    ecx,edx
c000240e:	89 c2                	mov    edx,eax
c0002410:	89 d8                	mov    eax,ebx
c0002412:	e8 4c fe ff ff       	call   c0002263 <check_fs>
c0002417:	85 f6                	test   esi,esi
c0002419:	75 07                	jne    c0002422 <find_volume+0x105>
c000241b:	83 f8 01             	cmp    eax,0x1
c000241e:	77 08                	ja     c0002428 <find_volume+0x10b>
c0002420:	eb 77                	jmp    c0002499 <find_volume+0x17c>
c0002422:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002426:	74 71                	je     c0002499 <find_volume+0x17c>
c0002428:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000242c:	eb 89                	jmp    c00023b7 <find_volume+0x9a>
c000242e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002432:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002438:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000243e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002442:	89 cd                	mov    ebp,ecx
c0002444:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002448:	89 f8                	mov    eax,edi
c000244a:	83 c7 10             	add    edi,0x10
c000244d:	e8 cc f5 ff ff       	call   c0001a1e <ld_dword>
c0002452:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002456:	89 01                	mov    DWORD PTR [ecx],eax
c0002458:	83 c1 04             	add    ecx,0x4
c000245b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000245f:	75 e3                	jne    c0002444 <find_volume+0x127>
c0002461:	31 ff                	xor    edi,edi
c0002463:	85 f6                	test   esi,esi
c0002465:	74 03                	je     c000246a <find_volume+0x14d>
c0002467:	8d 7e ff             	lea    edi,[esi-0x1]
c000246a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000246e:	85 d2                	test   edx,edx
c0002470:	74 14                	je     c0002486 <find_volume+0x169>
c0002472:	31 c9                	xor    ecx,ecx
c0002474:	89 d8                	mov    eax,ebx
c0002476:	e8 e8 fd ff ff       	call   c0002263 <check_fs>
c000247b:	83 f8 01             	cmp    eax,0x1
c000247e:	76 19                	jbe    c0002499 <find_volume+0x17c>
c0002480:	85 f6                	test   esi,esi
c0002482:	74 0f                	je     c0002493 <find_volume+0x176>
c0002484:	eb 13                	jmp    c0002499 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 85 ed fe ff ff    	jne    c000237b <find_volume+0x5e>
c000248e:	b8 03 00 00 00       	mov    eax,0x3
c0002493:	47                   	inc    edi
c0002494:	83 ff 03             	cmp    edi,0x3
c0002497:	76 d1                	jbe    c000246a <find_volume+0x14d>
c0002499:	83 c4 3c             	add    esp,0x3c
c000249c:	5b                   	pop    ebx
c000249d:	5e                   	pop    esi
c000249e:	5f                   	pop    edi
c000249f:	5d                   	pop    ebp
c00024a0:	c3                   	ret    

c00024a1 <mount_volume>:
c00024a1:	55                   	push   ebp
c00024a2:	57                   	push   edi
c00024a3:	89 cf                	mov    edi,ecx
c00024a5:	56                   	push   esi
c00024a6:	53                   	push   ebx
c00024a7:	bb 0b 00 00 00       	mov    ebx,0xb
c00024ac:	83 ec 3c             	sub    esp,0x3c
c00024af:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024b9:	e8 35 fb ff ff       	call   c0001ff3 <get_ldnumber>
c00024be:	85 c0                	test   eax,eax
c00024c0:	0f 88 3a 05 00 00    	js     c0002a00 <mount_volume+0x55f>
c00024c6:	8b 2c 85 60 ba 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd45a0]
c00024cd:	89 c6                	mov    esi,eax
c00024cf:	bb 0c 00 00 00       	mov    ebx,0xc
c00024d4:	85 ed                	test   ebp,ebp
c00024d6:	0f 84 24 05 00 00    	je     c0002a00 <mount_volume+0x55f>
c00024dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024e0:	83 e7 fe             	and    edi,0xfffffffe
c00024e3:	89 2a                	mov    DWORD PTR [edx],ebp
c00024e5:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024e9:	74 32                	je     c000251d <mount_volume+0x7c>
c00024eb:	83 ec 0c             	sub    esp,0xc
c00024ee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024f2:	50                   	push   eax
c00024f3:	e8 c8 f4 ff ff       	call   c00019c0 <disk_status>
c00024f8:	83 c4 10             	add    esp,0x10
c00024fb:	a8 01                	test   al,0x1
c00024fd:	75 1e                	jne    c000251d <mount_volume+0x7c>
c00024ff:	31 db                	xor    ebx,ebx
c0002501:	89 f9                	mov    ecx,edi
c0002503:	84 c9                	test   cl,cl
c0002505:	0f 84 f5 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c000250b:	a8 04                	test   al,0x4
c000250d:	0f 84 ed 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c0002513:	bb 0a 00 00 00       	mov    ebx,0xa
c0002518:	e9 e3 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	89 f0                	mov    eax,esi
c0002522:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002526:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002529:	0f b6 f0             	movzx  esi,al
c000252c:	bb 03 00 00 00       	mov    ebx,0x3
c0002531:	56                   	push   esi
c0002532:	e8 8c f4 ff ff       	call   c00019c3 <disk_initialize>
c0002537:	83 c4 10             	add    esp,0x10
c000253a:	a8 01                	test   al,0x1
c000253c:	0f 85 be 04 00 00    	jne    c0002a00 <mount_volume+0x55f>
c0002542:	89 f9                	mov    ecx,edi
c0002544:	84 c9                	test   cl,cl
c0002546:	74 04                	je     c000254c <mount_volume+0xab>
c0002548:	a8 04                	test   al,0x4
c000254a:	75 c7                	jne    c0002513 <mount_volume+0x72>
c000254c:	31 d2                	xor    edx,edx
c000254e:	89 e8                	mov    eax,ebp
c0002550:	e8 c8 fd ff ff       	call   c000231d <find_volume>
c0002555:	83 f8 04             	cmp    eax,0x4
c0002558:	75 0a                	jne    c0002564 <mount_volume+0xc3>
c000255a:	bb 01 00 00 00       	mov    ebx,0x1
c000255f:	e9 9c 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002564:	83 f8 01             	cmp    eax,0x1
c0002567:	76 0a                	jbe    c0002573 <mount_volume+0xd2>
c0002569:	bb 0d 00 00 00       	mov    ebx,0xd
c000256e:	e9 8d 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002573:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002576:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002579:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000257d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002581:	75 17                	jne    c000259a <mount_volume+0xf9>
c0002583:	b8 0b 00 00 00       	mov    eax,0xb
c0002588:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000258d:	75 da                	jne    c0002569 <mount_volume+0xc8>
c000258f:	40                   	inc    eax
c0002590:	83 f8 40             	cmp    eax,0x40
c0002593:	75 f3                	jne    c0002588 <mount_volume+0xe7>
c0002595:	e9 5a 02 00 00       	jmp    c00027f4 <mount_volume+0x353>
c000259a:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000259d:	e8 6f f4 ff ff       	call   c0001a11 <ld_word>
c00025a2:	66 3d 00 02          	cmp    ax,0x200
c00025a6:	75 c1                	jne    c0002569 <mount_volume+0xc8>
c00025a8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025ab:	e8 61 f4 ff ff       	call   c0001a11 <ld_word>
c00025b0:	0f b7 c0             	movzx  eax,ax
c00025b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b7:	85 c0                	test   eax,eax
c00025b9:	75 0c                	jne    c00025c7 <mount_volume+0x126>
c00025bb:	8d 45 78             	lea    eax,[ebp+0x78]
c00025be:	e8 5b f4 ff ff       	call   c0001a1e <ld_dword>
c00025c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025cb:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025ce:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025d1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025d5:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025d8:	48                   	dec    eax
c00025d9:	3c 01                	cmp    al,0x1
c00025db:	77 8c                	ja     c0002569 <mount_volume+0xc8>
c00025dd:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025e1:	89 c3                	mov    ebx,eax
c00025e3:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025e7:	66 85 c0             	test   ax,ax
c00025ea:	0f 84 79 ff ff ff    	je     c0002569 <mount_volume+0xc8>
c00025f0:	8d 40 ff             	lea    eax,[eax-0x1]
c00025f3:	85 d8                	test   eax,ebx
c00025f5:	0f 85 6e ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c00025fb:	8d 45 65             	lea    eax,[ebp+0x65]
c00025fe:	e8 0e f4 ff ff       	call   c0001a11 <ld_word>
c0002603:	89 c7                	mov    edi,eax
c0002605:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002609:	a8 0f                	test   al,0xf
c000260b:	0f 85 58 ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002611:	8d 45 67             	lea    eax,[ebp+0x67]
c0002614:	e8 f8 f3 ff ff       	call   c0001a11 <ld_word>
c0002619:	0f b7 f0             	movzx  esi,ax
c000261c:	85 f6                	test   esi,esi
c000261e:	75 0a                	jne    c000262a <mount_volume+0x189>
c0002620:	8d 45 74             	lea    eax,[ebp+0x74]
c0002623:	e8 f6 f3 ff ff       	call   c0001a1e <ld_dword>
c0002628:	89 c6                	mov    esi,eax
c000262a:	8d 45 62             	lea    eax,[ebp+0x62]
c000262d:	e8 df f3 ff ff       	call   c0001a11 <ld_word>
c0002632:	66 85 c0             	test   ax,ax
c0002635:	0f 84 2e ff ff ff    	je     c0002569 <mount_volume+0xc8>
c000263b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002640:	0f b7 c8             	movzx  ecx,ax
c0002643:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000264c:	89 fa                	mov    edx,edi
c000264e:	66 c1 ea 04          	shr    dx,0x4
c0002652:	0f b7 d2             	movzx  edx,dx
c0002655:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002659:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000265c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002660:	39 c6                	cmp    esi,eax
c0002662:	0f 82 01 ff ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002668:	29 c6                	sub    esi,eax
c000266a:	31 d2                	xor    edx,edx
c000266c:	89 f0                	mov    eax,esi
c000266e:	f7 f3                	div    ebx
c0002670:	39 de                	cmp    esi,ebx
c0002672:	0f 82 f1 fe ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002678:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000267d:	0f 87 e6 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002683:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002688:	0f 86 63 03 00 00    	jbe    c00029f1 <mount_volume+0x550>
c000268e:	bb 03 00 00 00       	mov    ebx,0x3
c0002693:	8d 70 02             	lea    esi,[eax+0x2]
c0002696:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000269a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000269e:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026a1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026a4:	31 d2                	xor    edx,edx
c00026a6:	89 c8                	mov    eax,ecx
c00026a8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026af:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026bb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026be:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026c5:	31 d2                	xor    edx,edx
c00026c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026cf:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026d2:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026d5:	83 fb 03             	cmp    ebx,0x3
c00026d8:	75 2b                	jne    c0002705 <mount_volume+0x264>
c00026da:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026dd:	e8 2f f3 ff ff       	call   c0001a11 <ld_word>
c00026e2:	66 09 c7             	or     di,ax
c00026e5:	0f 85 7e fe ff ff    	jne    c0002569 <mount_volume+0xc8>
c00026eb:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026f1:	c1 e6 02             	shl    esi,0x2
c00026f4:	e8 25 f3 ff ff       	call   c0001a1e <ld_dword>
c00026f9:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002700:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002703:	eb 30                	jmp    c0002735 <mount_volume+0x294>
c0002705:	66 85 ff             	test   di,di
c0002708:	0f 84 5b fe ff ff    	je     c0002569 <mount_volume+0xc8>
c000270e:	31 d2                	xor    edx,edx
c0002710:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002714:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002718:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000271c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000271f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002722:	83 fb 02             	cmp    ebx,0x2
c0002725:	75 04                	jne    c000272b <mount_volume+0x28a>
c0002727:	01 f6                	add    esi,esi
c0002729:	eb 0a                	jmp    c0002735 <mount_volume+0x294>
c000272b:	8d 04 76             	lea    eax,[esi+esi*2]
c000272e:	83 e6 01             	and    esi,0x1
c0002731:	d1 e8                	shr    eax,1
c0002733:	01 c6                	add    esi,eax
c0002735:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000273b:	c1 ee 09             	shr    esi,0x9
c000273e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002742:	0f 87 21 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002748:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000274f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002756:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000275a:	83 fb 03             	cmp    ebx,0x3
c000275d:	75 7a                	jne    c00027d9 <mount_volume+0x338>
c000275f:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002765:	e8 a7 f2 ff ff       	call   c0001a11 <ld_word>
c000276a:	66 48                	dec    ax
c000276c:	75 6b                	jne    c00027d9 <mount_volume+0x338>
c000276e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002772:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002776:	83 c2 01             	add    edx,0x1
c0002779:	89 e8                	mov    eax,ebp
c000277b:	83 d1 00             	adc    ecx,0x0
c000277e:	e8 6c fa ff ff       	call   c00021ef <move_window>
c0002783:	85 c0                	test   eax,eax
c0002785:	75 52                	jne    c00027d9 <mount_volume+0x338>
c0002787:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000278b:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002791:	e8 7b f2 ff ff       	call   c0001a11 <ld_word>
c0002796:	66 3d 55 aa          	cmp    ax,0xaa55
c000279a:	75 3d                	jne    c00027d9 <mount_volume+0x338>
c000279c:	8d 45 54             	lea    eax,[ebp+0x54]
c000279f:	e8 7a f2 ff ff       	call   c0001a1e <ld_dword>
c00027a4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027a9:	75 2e                	jne    c00027d9 <mount_volume+0x338>
c00027ab:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027b1:	e8 68 f2 ff ff       	call   c0001a1e <ld_dword>
c00027b6:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027bb:	75 1c                	jne    c00027d9 <mount_volume+0x338>
c00027bd:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027c3:	e8 56 f2 ff ff       	call   c0001a1e <ld_dword>
c00027c8:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027cb:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027d1:	e8 48 f2 ff ff       	call   c0001a1e <ld_dword>
c00027d6:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027d9:	66 a1 40 ba 02 c0    	mov    ax,ds:0xc002ba40
c00027df:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027e2:	40                   	inc    eax
c00027e3:	31 db                	xor    ebx,ebx
c00027e5:	66 a3 40 ba 02 c0    	mov    ds:0xc002ba40,ax
c00027eb:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027ef:	e9 0c 02 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c00027f4:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027fa:	e8 12 f2 ff ff       	call   c0001a11 <ld_word>
c00027ff:	66 3d 00 01          	cmp    ax,0x100
c0002803:	0f 85 60 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002809:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002810:	0f 85 53 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002816:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000281c:	e8 15 f2 ff ff       	call   c0001a36 <ld_qword>
c0002821:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002825:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002829:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000282f:	e8 ea f1 ff ff       	call   c0001a1e <ld_dword>
c0002834:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002837:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000283d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002840:	fe c8                	dec    al
c0002842:	0f 85 21 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002848:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000284f:	bb 01 00 00 00       	mov    ebx,0x1
c0002854:	d3 e3                	shl    ebx,cl
c0002856:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000285a:	66 85 db             	test   bx,bx
c000285d:	0f 84 06 fd ff ff    	je     c0002569 <mount_volume+0xc8>
c0002863:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002869:	e8 b0 f1 ff ff       	call   c0001a1e <ld_dword>
c000286e:	89 c6                	mov    esi,eax
c0002870:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002875:	0f 87 ee fc ff ff    	ja     c0002569 <mount_volume+0xc8>
c000287b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000287f:	8d 40 02             	lea    eax,[eax+0x2]
c0002882:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002885:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000288c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000288f:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002895:	e8 84 f1 ff ff       	call   c0001a1e <ld_dword>
c000289a:	31 d2                	xor    edx,edx
c000289c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028a0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028ac:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028af:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028b2:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028b8:	e8 61 f1 ff ff       	call   c0001a1e <ld_dword>
c00028bd:	31 d2                	xor    edx,edx
c00028bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028cb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ce:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d1:	0f b7 c3             	movzx  eax,bx
c00028d4:	31 d2                	xor    edx,edx
c00028d6:	0f af f0             	imul   esi,eax
c00028d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028e3:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028e7:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028eb:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028ef:	39 c1                	cmp    ecx,eax
c00028f1:	89 df                	mov    edi,ebx
c00028f3:	19 d7                	sbb    edi,edx
c00028f5:	0f 82 6e fc ff ff    	jb     c0002569 <mount_volume+0xc8>
c00028fb:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002901:	31 db                	xor    ebx,ebx
c0002903:	e8 16 f1 ff ff       	call   c0001a1e <ld_dword>
c0002908:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000290f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002912:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000291a:	85 db                	test   ebx,ebx
c000291c:	75 39                	jne    c0002957 <mount_volume+0x4b6>
c000291e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002922:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002926:	0f 86 3d fc ff ff    	jbe    c0002569 <mount_volume+0xc8>
c000292c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000292f:	31 ff                	xor    edi,edi
c0002931:	89 e8                	mov    eax,ebp
c0002933:	e8 72 f3 ff ff       	call   c0001caa <clst2sect>
c0002938:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000293c:	01 c6                	add    esi,eax
c000293e:	89 e8                	mov    eax,ebp
c0002940:	11 d7                	adc    edi,edx
c0002942:	89 f2                	mov    edx,esi
c0002944:	89 f9                	mov    ecx,edi
c0002946:	e8 a4 f8 ff ff       	call   c00021ef <move_window>
c000294b:	85 c0                	test   eax,eax
c000294d:	0f 85 07 fc ff ff    	jne    c000255a <mount_volume+0xb9>
c0002953:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002957:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000295c:	74 0b                	je     c0002969 <mount_volume+0x4c8>
c000295e:	83 c3 20             	add    ebx,0x20
c0002961:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002967:	eb b1                	jmp    c000291a <mount_volume+0x479>
c0002969:	8d 75 54             	lea    esi,[ebp+0x54]
c000296c:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002970:	e8 a9 f0 ff ff       	call   c0001a1e <ld_dword>
c0002975:	89 c3                	mov    ebx,eax
c0002977:	83 f8 01             	cmp    eax,0x1
c000297a:	0f 86 e9 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002980:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002983:	0f 86 e0 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002989:	8d 53 fe             	lea    edx,[ebx-0x2]
c000298c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002990:	0f af c2             	imul   eax,edx
c0002993:	31 d2                	xor    edx,edx
c0002995:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002998:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000299b:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000299e:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029a1:	31 c9                	xor    ecx,ecx
c00029a3:	89 da                	mov    edx,ebx
c00029a5:	89 e8                	mov    eax,ebp
c00029a7:	c1 ea 07             	shr    edx,0x7
c00029aa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029ad:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029b0:	e8 3a f8 ff ff       	call   c00021ef <move_window>
c00029b5:	85 c0                	test   eax,eax
c00029b7:	0f 85 9d fb ff ff    	jne    c000255a <mount_volume+0xb9>
c00029bd:	89 d8                	mov    eax,ebx
c00029bf:	83 e0 7f             	and    eax,0x7f
c00029c2:	8d 04 86             	lea    eax,[esi+eax*4]
c00029c5:	e8 54 f0 ff ff       	call   c0001a1e <ld_dword>
c00029ca:	83 f8 ff             	cmp    eax,0xffffffff
c00029cd:	74 0a                	je     c00029d9 <mount_volume+0x538>
c00029cf:	43                   	inc    ebx
c00029d0:	39 d8                	cmp    eax,ebx
c00029d2:	74 cd                	je     c00029a1 <mount_volume+0x500>
c00029d4:	e9 90 fb ff ff       	jmp    c0002569 <mount_volume+0xc8>
c00029d9:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e0:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029e7:	bb 04 00 00 00       	mov    ebx,0x4
c00029ec:	e9 e8 fd ff ff       	jmp    c00027d9 <mount_volume+0x338>
c00029f1:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029f6:	19 db                	sbb    ebx,ebx
c00029f8:	83 c3 02             	add    ebx,0x2
c00029fb:	e9 93 fc ff ff       	jmp    c0002693 <mount_volume+0x1f2>
c0002a00:	83 c4 3c             	add    esp,0x3c
c0002a03:	89 d8                	mov    eax,ebx
c0002a05:	5b                   	pop    ebx
c0002a06:	5e                   	pop    esi
c0002a07:	5f                   	pop    edi
c0002a08:	5d                   	pop    ebp
c0002a09:	c3                   	ret    

c0002a0a <find_bitmap>:
c0002a0a:	55                   	push   ebp
c0002a0b:	57                   	push   edi
c0002a0c:	89 c7                	mov    edi,eax
c0002a0e:	56                   	push   esi
c0002a0f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a12:	53                   	push   ebx
c0002a13:	83 ec 1c             	sub    esp,0x1c
c0002a16:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a1d:	83 e8 02             	sub    eax,0x2
c0002a20:	39 f0                	cmp    eax,esi
c0002a22:	77 02                	ja     c0002a26 <find_bitmap+0x1c>
c0002a24:	31 f6                	xor    esi,esi
c0002a26:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a2a:	89 f3                	mov    ebx,esi
c0002a2c:	31 ed                	xor    ebp,ebp
c0002a2e:	31 c9                	xor    ecx,ecx
c0002a30:	89 da                	mov    edx,ebx
c0002a32:	89 f8                	mov    eax,edi
c0002a34:	c1 ea 0c             	shr    edx,0xc
c0002a37:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a3a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a3d:	e8 ad f7 ff ff       	call   c00021ef <move_window>
c0002a42:	85 c0                	test   eax,eax
c0002a44:	75 68                	jne    c0002aae <find_bitmap+0xa4>
c0002a46:	89 da                	mov    edx,ebx
c0002a48:	89 d9                	mov    ecx,ebx
c0002a4a:	c1 ea 03             	shr    edx,0x3
c0002a4d:	83 e1 07             	and    ecx,0x7
c0002a50:	b8 01 00 00 00       	mov    eax,0x1
c0002a55:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a5b:	d3 e0                	shl    eax,cl
c0002a5d:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a60:	83 e9 02             	sub    ecx,0x2
c0002a63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a67:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a6b:	43                   	inc    ebx
c0002a6c:	21 c1                	and    ecx,eax
c0002a6e:	d1 e0                	shl    eax,1
c0002a70:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a74:	77 09                	ja     c0002a7f <find_bitmap+0x75>
c0002a76:	31 db                	xor    ebx,ebx
c0002a78:	ba 00 02 00 00       	mov    edx,0x200
c0002a7d:	31 c0                	xor    eax,eax
c0002a7f:	84 c9                	test   cl,cl
c0002a81:	75 10                	jne    c0002a93 <find_bitmap+0x89>
c0002a83:	45                   	inc    ebp
c0002a84:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a88:	75 0f                	jne    c0002a99 <find_bitmap+0x8f>
c0002a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a8e:	83 c0 02             	add    eax,0x2
c0002a91:	eb 22                	jmp    c0002ab5 <find_bitmap+0xab>
c0002a93:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a97:	31 ed                	xor    ebp,ebp
c0002a99:	39 de                	cmp    esi,ebx
c0002a9b:	74 16                	je     c0002ab3 <find_bitmap+0xa9>
c0002a9d:	84 c0                	test   al,al
c0002a9f:	75 c6                	jne    c0002a67 <find_bitmap+0x5d>
c0002aa1:	42                   	inc    edx
c0002aa2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002aa8:	77 84                	ja     c0002a2e <find_bitmap+0x24>
c0002aaa:	b0 01                	mov    al,0x1
c0002aac:	eb b9                	jmp    c0002a67 <find_bitmap+0x5d>
c0002aae:	83 c8 ff             	or     eax,0xffffffff
c0002ab1:	eb 02                	jmp    c0002ab5 <find_bitmap+0xab>
c0002ab3:	31 c0                	xor    eax,eax
c0002ab5:	83 c4 1c             	add    esp,0x1c
c0002ab8:	5b                   	pop    ebx
c0002ab9:	5e                   	pop    esi
c0002aba:	5f                   	pop    edi
c0002abb:	5d                   	pop    ebp
c0002abc:	c3                   	ret    

c0002abd <change_bitmap>:
c0002abd:	55                   	push   ebp
c0002abe:	89 cd                	mov    ebp,ecx
c0002ac0:	57                   	push   edi
c0002ac1:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ac4:	56                   	push   esi
c0002ac5:	89 c7                	mov    edi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	89 c8                	mov    eax,ecx
c0002aca:	83 ec 1c             	sub    esp,0x1c
c0002acd:	31 d2                	xor    edx,edx
c0002acf:	89 ce                	mov    esi,ecx
c0002ad1:	c1 e8 0c             	shr    eax,0xc
c0002ad4:	bb 01 00 00 00       	mov    ebx,0x1
c0002ad9:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002adc:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002adf:	c1 ee 03             	shr    esi,0x3
c0002ae2:	83 e1 07             	and    ecx,0x7
c0002ae5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002aeb:	d3 e3                	shl    ebx,cl
c0002aed:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002af1:	89 c1                	mov    ecx,eax
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 c1 01             	add    ecx,0x1
c0002af8:	83 d3 00             	adc    ebx,0x0
c0002afb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aff:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b03:	89 d1                	mov    ecx,edx
c0002b05:	89 c2                	mov    edx,eax
c0002b07:	89 f8                	mov    eax,edi
c0002b09:	e8 e1 f6 ff ff       	call   c00021ef <move_window>
c0002b0e:	89 c1                	mov    ecx,eax
c0002b10:	85 c0                	test   eax,eax
c0002b12:	75 48                	jne    c0002b5c <change_bitmap+0x9f>
c0002b14:	31 d2                	xor    edx,edx
c0002b16:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b1a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b1e:	0f 95 c2             	setne  dl
c0002b21:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b25:	74 3c                	je     c0002b63 <change_bitmap+0xa6>
c0002b27:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b2b:	4d                   	dec    ebp
c0002b2c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b34:	74 32                	je     c0002b68 <change_bitmap+0xab>
c0002b36:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b3a:	75 d8                	jne    c0002b14 <change_bitmap+0x57>
c0002b3c:	8d 46 01             	lea    eax,[esi+0x1]
c0002b3f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b44:	89 c3                	mov    ebx,eax
c0002b46:	31 f6                	xor    esi,esi
c0002b48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b50:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b56:	74 99                	je     c0002af1 <change_bitmap+0x34>
c0002b58:	89 de                	mov    esi,ebx
c0002b5a:	eb b8                	jmp    c0002b14 <change_bitmap+0x57>
c0002b5c:	b9 01 00 00 00       	mov    ecx,0x1
c0002b61:	eb 05                	jmp    c0002b68 <change_bitmap+0xab>
c0002b63:	b9 02 00 00 00       	mov    ecx,0x2
c0002b68:	83 c4 1c             	add    esp,0x1c
c0002b6b:	89 c8                	mov    eax,ecx
c0002b6d:	5b                   	pop    ebx
c0002b6e:	5e                   	pop    esi
c0002b6f:	5f                   	pop    edi
c0002b70:	5d                   	pop    ebp
c0002b71:	c3                   	ret    

c0002b72 <put_fat>:
c0002b72:	83 fa 01             	cmp    edx,0x1
c0002b75:	0f 86 7b 01 00 00    	jbe    c0002cf6 <put_fat+0x184>
c0002b7b:	55                   	push   ebp
c0002b7c:	57                   	push   edi
c0002b7d:	89 cf                	mov    edi,ecx
c0002b7f:	56                   	push   esi
c0002b80:	b9 02 00 00 00       	mov    ecx,0x2
c0002b85:	53                   	push   ebx
c0002b86:	89 c6                	mov    esi,eax
c0002b88:	83 ec 1c             	sub    esp,0x1c
c0002b8b:	89 d3                	mov    ebx,edx
c0002b8d:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b90:	0f 86 68 01 00 00    	jbe    c0002cfe <put_fat+0x18c>
c0002b96:	8a 00                	mov    al,BYTE PTR [eax]
c0002b98:	3c 02                	cmp    al,0x2
c0002b9a:	0f 84 c7 00 00 00    	je     c0002c67 <put_fat+0xf5>
c0002ba0:	77 09                	ja     c0002bab <put_fat+0x39>
c0002ba2:	fe c8                	dec    al
c0002ba4:	74 17                	je     c0002bbd <put_fat+0x4b>
c0002ba6:	e9 53 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bab:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb0:	3c 04                	cmp    al,0x4
c0002bb2:	0f 86 e1 00 00 00    	jbe    c0002c99 <put_fat+0x127>
c0002bb8:	e9 41 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bbd:	89 d5                	mov    ebp,edx
c0002bbf:	31 c9                	xor    ecx,ecx
c0002bc1:	d1 ed                	shr    ebp,1
c0002bc3:	89 f0                	mov    eax,esi
c0002bc5:	01 d5                	add    ebp,edx
c0002bc7:	89 ea                	mov    edx,ebp
c0002bc9:	c1 ea 09             	shr    edx,0x9
c0002bcc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bcf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bd2:	e8 18 f6 ff ff       	call   c00021ef <move_window>
c0002bd7:	89 c1                	mov    ecx,eax
c0002bd9:	85 c0                	test   eax,eax
c0002bdb:	0f 85 1d 01 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002be1:	8d 46 54             	lea    eax,[esi+0x54]
c0002be4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002be8:	8d 45 01             	lea    eax,[ebp+0x1]
c0002beb:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bf5:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bf9:	89 f8                	mov    eax,edi
c0002bfb:	83 e3 01             	and    ebx,0x1
c0002bfe:	74 0d                	je     c0002c0d <put_fat+0x9b>
c0002c00:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c03:	89 fa                	mov    edx,edi
c0002c05:	83 e0 0f             	and    eax,0xf
c0002c08:	c1 e2 04             	shl    edx,0x4
c0002c0b:	09 d0                	or     eax,edx
c0002c0d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c14:	31 c9                	xor    ecx,ecx
c0002c16:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c1a:	c1 ea 09             	shr    edx,0x9
c0002c1d:	89 f0                	mov    eax,esi
c0002c1f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c22:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c25:	e8 c5 f5 ff ff       	call   c00021ef <move_window>
c0002c2a:	89 c1                	mov    ecx,eax
c0002c2c:	85 c0                	test   eax,eax
c0002c2e:	0f 85 ca 00 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002c34:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c38:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c3e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c42:	85 db                	test   ebx,ebx
c0002c44:	74 07                	je     c0002c4d <put_fat+0xdb>
c0002c46:	c1 ef 04             	shr    edi,0x4
c0002c49:	89 fa                	mov    edx,edi
c0002c4b:	eb 0e                	jmp    c0002c5b <put_fat+0xe9>
c0002c4d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c50:	c1 ef 08             	shr    edi,0x8
c0002c53:	83 e2 f0             	and    edx,0xfffffff0
c0002c56:	83 e7 0f             	and    edi,0xf
c0002c59:	09 fa                	or     edx,edi
c0002c5b:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c5e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c62:	e9 97 00 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002c67:	31 c9                	xor    ecx,ecx
c0002c69:	c1 ea 08             	shr    edx,0x8
c0002c6c:	89 f0                	mov    eax,esi
c0002c6e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c71:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c74:	e8 76 f5 ff ff       	call   c00021ef <move_window>
c0002c79:	89 c1                	mov    ecx,eax
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	75 7f                	jne    c0002cfe <put_fat+0x18c>
c0002c7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c83:	01 db                	add    ebx,ebx
c0002c85:	0f b7 d7             	movzx  edx,di
c0002c88:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c8e:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c92:	e8 ec ed ff ff       	call   c0001a83 <st_word>
c0002c97:	eb 53                	jmp    c0002cec <put_fat+0x17a>
c0002c99:	31 c9                	xor    ecx,ecx
c0002c9b:	c1 ea 07             	shr    edx,0x7
c0002c9e:	89 f0                	mov    eax,esi
c0002ca0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca6:	e8 44 f5 ff ff       	call   c00021ef <move_window>
c0002cab:	89 c1                	mov    ecx,eax
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 4d                	jne    c0002cfe <put_fat+0x18c>
c0002cb1:	c1 e3 02             	shl    ebx,0x2
c0002cb4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cba:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cbd:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cc1:	74 1c                	je     c0002cdf <put_fat+0x16d>
c0002cc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cc7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ccd:	89 d8                	mov    eax,ebx
c0002ccf:	e8 4a ed ff ff       	call   c0001a1e <ld_dword>
c0002cd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cd8:	25 00 00 00 f0       	and    eax,0xf0000000
c0002cdd:	09 c7                	or     edi,eax
c0002cdf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ce3:	89 fa                	mov    edx,edi
c0002ce5:	89 d8                	mov    eax,ebx
c0002ce7:	e8 9b ed ff ff       	call   c0001a87 <st_dword>
c0002cec:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cf4:	eb 08                	jmp    c0002cfe <put_fat+0x18c>
c0002cf6:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfb:	89 c8                	mov    eax,ecx
c0002cfd:	c3                   	ret    
c0002cfe:	83 c4 1c             	add    esp,0x1c
c0002d01:	89 c8                	mov    eax,ecx
c0002d03:	5b                   	pop    ebx
c0002d04:	5e                   	pop    esi
c0002d05:	5f                   	pop    edi
c0002d06:	5d                   	pop    ebp
c0002d07:	c3                   	ret    

c0002d08 <fill_last_frag>:
c0002d08:	57                   	push   edi
c0002d09:	89 cf                	mov    edi,ecx
c0002d0b:	56                   	push   esi
c0002d0c:	89 d6                	mov    esi,edx
c0002d0e:	53                   	push   ebx
c0002d0f:	89 c3                	mov    ebx,eax
c0002d11:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d14:	85 c0                	test   eax,eax
c0002d16:	74 21                	je     c0002d39 <fill_last_frag+0x31>
c0002d18:	89 f9                	mov    ecx,edi
c0002d1a:	83 f8 01             	cmp    eax,0x1
c0002d1d:	76 05                	jbe    c0002d24 <fill_last_frag+0x1c>
c0002d1f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d22:	29 c1                	sub    ecx,eax
c0002d24:	8d 56 01             	lea    edx,[esi+0x1]
c0002d27:	29 c2                	sub    edx,eax
c0002d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d2b:	e8 42 fe ff ff       	call   c0002b72 <put_fat>
c0002d30:	85 c0                	test   eax,eax
c0002d32:	75 05                	jne    c0002d39 <fill_last_frag+0x31>
c0002d34:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d37:	eb d8                	jmp    c0002d11 <fill_last_frag+0x9>
c0002d39:	5b                   	pop    ebx
c0002d3a:	5e                   	pop    esi
c0002d3b:	5f                   	pop    edi
c0002d3c:	c3                   	ret    

c0002d3d <fill_first_frag>:
c0002d3d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d41:	75 2d                	jne    c0002d70 <fill_first_frag+0x33>
c0002d43:	57                   	push   edi
c0002d44:	56                   	push   esi
c0002d45:	53                   	push   ebx
c0002d46:	89 c3                	mov    ebx,eax
c0002d48:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d4b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d4e:	01 d7                	add    edi,edx
c0002d50:	39 fa                	cmp    edx,edi
c0002d52:	74 14                	je     c0002d68 <fill_first_frag+0x2b>
c0002d54:	8d 72 01             	lea    esi,[edx+0x1]
c0002d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d59:	89 f1                	mov    ecx,esi
c0002d5b:	e8 12 fe ff ff       	call   c0002b72 <put_fat>
c0002d60:	89 f2                	mov    edx,esi
c0002d62:	85 c0                	test   eax,eax
c0002d64:	74 ea                	je     c0002d50 <fill_first_frag+0x13>
c0002d66:	eb 0b                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d68:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d6c:	31 c0                	xor    eax,eax
c0002d6e:	eb 03                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d70:	31 c0                	xor    eax,eax
c0002d72:	c3                   	ret    
c0002d73:	5b                   	pop    ebx
c0002d74:	5e                   	pop    esi
c0002d75:	5f                   	pop    edi
c0002d76:	c3                   	ret    

c0002d77 <get_fat>:
c0002d77:	83 fa 01             	cmp    edx,0x1
c0002d7a:	0f 86 db 01 00 00    	jbe    c0002f5b <get_fat+0x1e4>
c0002d80:	55                   	push   ebp
c0002d81:	b9 01 00 00 00       	mov    ecx,0x1
c0002d86:	57                   	push   edi
c0002d87:	56                   	push   esi
c0002d88:	53                   	push   ebx
c0002d89:	83 ec 1c             	sub    esp,0x1c
c0002d8c:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d8e:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d91:	0f 86 cc 01 00 00    	jbe    c0002f63 <get_fat+0x1ec>
c0002d97:	89 c3                	mov    ebx,eax
c0002d99:	89 d6                	mov    esi,edx
c0002d9b:	8a 07                	mov    al,BYTE PTR [edi]
c0002d9d:	3c 02                	cmp    al,0x2
c0002d9f:	0f 84 99 00 00 00    	je     c0002e3e <get_fat+0xc7>
c0002da5:	77 09                	ja     c0002db0 <get_fat+0x39>
c0002da7:	fe c8                	dec    al
c0002da9:	74 1a                	je     c0002dc5 <get_fat+0x4e>
c0002dab:	e9 b3 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002db0:	3c 03                	cmp    al,0x3
c0002db2:	0f 84 b5 00 00 00    	je     c0002e6d <get_fat+0xf6>
c0002db8:	3c 04                	cmp    al,0x4
c0002dba:	0f 84 e3 00 00 00    	je     c0002ea3 <get_fat+0x12c>
c0002dc0:	e9 9e 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002dc5:	89 d3                	mov    ebx,edx
c0002dc7:	31 c9                	xor    ecx,ecx
c0002dc9:	d1 eb                	shr    ebx,1
c0002dcb:	89 f8                	mov    eax,edi
c0002dcd:	01 d3                	add    ebx,edx
c0002dcf:	89 da                	mov    edx,ebx
c0002dd1:	c1 ea 09             	shr    edx,0x9
c0002dd4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dd7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dda:	e8 10 f4 ff ff       	call   c00021ef <move_window>
c0002ddf:	85 c0                	test   eax,eax
c0002de1:	74 08                	je     c0002deb <get_fat+0x74>
c0002de3:	83 c9 ff             	or     ecx,0xffffffff
c0002de6:	e9 78 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002deb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002df6:	89 ea                	mov    edx,ebp
c0002df8:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dfc:	c1 ea 09             	shr    edx,0x9
c0002dff:	89 f8                	mov    eax,edi
c0002e01:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e04:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e07:	e8 e3 f3 ff ff       	call   c00021ef <move_window>
c0002e0c:	85 c0                	test   eax,eax
c0002e0e:	75 d3                	jne    c0002de3 <get_fat+0x6c>
c0002e10:	0f b6 c3             	movzx  eax,bl
c0002e13:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e19:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e1e:	c1 e3 08             	shl    ebx,0x8
c0002e21:	09 c3                	or     ebx,eax
c0002e23:	89 d9                	mov    ecx,ebx
c0002e25:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e2b:	83 e6 01             	and    esi,0x1
c0002e2e:	0f 84 2f 01 00 00    	je     c0002f63 <get_fat+0x1ec>
c0002e34:	89 d9                	mov    ecx,ebx
c0002e36:	c1 e9 04             	shr    ecx,0x4
c0002e39:	e9 25 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e3e:	31 c9                	xor    ecx,ecx
c0002e40:	c1 ea 08             	shr    edx,0x8
c0002e43:	89 f8                	mov    eax,edi
c0002e45:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e48:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e4b:	e8 9f f3 ff ff       	call   c00021ef <move_window>
c0002e50:	85 c0                	test   eax,eax
c0002e52:	75 8f                	jne    c0002de3 <get_fat+0x6c>
c0002e54:	01 f6                	add    esi,esi
c0002e56:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e5c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e60:	e8 ac eb ff ff       	call   c0001a11 <ld_word>
c0002e65:	0f b7 c8             	movzx  ecx,ax
c0002e68:	e9 f6 00 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e6d:	31 c9                	xor    ecx,ecx
c0002e6f:	c1 ea 07             	shr    edx,0x7
c0002e72:	89 f8                	mov    eax,edi
c0002e74:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e77:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7a:	e8 70 f3 ff ff       	call   c00021ef <move_window>
c0002e7f:	85 c0                	test   eax,eax
c0002e81:	0f 85 5c ff ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002e87:	c1 e6 02             	shl    esi,0x2
c0002e8a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e90:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e94:	e8 85 eb ff ff       	call   c0001a1e <ld_dword>
c0002e99:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e9e:	e9 b4 00 00 00       	jmp    c0002f57 <get_fat+0x1e0>
c0002ea3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ea6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ea9:	89 d1                	mov    ecx,edx
c0002eab:	09 c1                	or     ecx,eax
c0002ead:	74 06                	je     c0002eb5 <get_fat+0x13e>
c0002eaf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eb3:	75 0f                	jne    c0002ec4 <get_fat+0x14d>
c0002eb5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eba:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ebe:	0f 85 9f 00 00 00    	jne    c0002f63 <get_fat+0x1ec>
c0002ec4:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ec8:	89 f5                	mov    ebp,esi
c0002eca:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ecf:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ed2:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ed5:	80 f9 02             	cmp    cl,0x2
c0002ed8:	75 35                	jne    c0002f0f <get_fat+0x198>
c0002eda:	83 c0 ff             	add    eax,0xffffffff
c0002edd:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ee2:	83 d2 ff             	adc    edx,0xffffffff
c0002ee5:	31 db                	xor    ebx,ebx
c0002ee7:	0f ac d0 09          	shrd   eax,edx,0x9
c0002eeb:	53                   	push   ebx
c0002eec:	c1 ea 09             	shr    edx,0x9
c0002eef:	51                   	push   ecx
c0002ef0:	52                   	push   edx
c0002ef1:	50                   	push   eax
c0002ef2:	e8 35 18 02 00       	call   c002472c <__udivdi3>
c0002ef7:	83 c4 10             	add    esp,0x10
c0002efa:	b9 01 00 00 00       	mov    ecx,0x1
c0002eff:	39 c5                	cmp    ebp,eax
c0002f01:	77 60                	ja     c0002f63 <get_fat+0x1ec>
c0002f03:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f08:	74 59                	je     c0002f63 <get_fat+0x1ec>
c0002f0a:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f0d:	eb 54                	jmp    c0002f63 <get_fat+0x1ec>
c0002f0f:	80 f9 03             	cmp    cl,0x3
c0002f12:	75 05                	jne    c0002f19 <get_fat+0x1a2>
c0002f14:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f17:	77 f1                	ja     c0002f0a <get_fat+0x193>
c0002f19:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f1e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f22:	75 3f                	jne    c0002f63 <get_fat+0x1ec>
c0002f24:	31 c9                	xor    ecx,ecx
c0002f26:	89 f2                	mov    edx,esi
c0002f28:	89 f8                	mov    eax,edi
c0002f2a:	c1 ea 07             	shr    edx,0x7
c0002f2d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f30:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f33:	e8 b7 f2 ff ff       	call   c00021ef <move_window>
c0002f38:	85 c0                	test   eax,eax
c0002f3a:	0f 85 a3 fe ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002f40:	c1 e6 02             	shl    esi,0x2
c0002f43:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f49:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f4d:	e8 cc ea ff ff       	call   c0001a1e <ld_dword>
c0002f52:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f57:	89 c1                	mov    ecx,eax
c0002f59:	eb 08                	jmp    c0002f63 <get_fat+0x1ec>
c0002f5b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f60:	89 c8                	mov    eax,ecx
c0002f62:	c3                   	ret    
c0002f63:	83 c4 1c             	add    esp,0x1c
c0002f66:	89 c8                	mov    eax,ecx
c0002f68:	5b                   	pop    ebx
c0002f69:	5e                   	pop    esi
c0002f6a:	5f                   	pop    edi
c0002f6b:	5d                   	pop    ebp
c0002f6c:	c3                   	ret    

c0002f6d <dir_sdi>:
c0002f6d:	55                   	push   ebp
c0002f6e:	57                   	push   edi
c0002f6f:	56                   	push   esi
c0002f70:	53                   	push   ebx
c0002f71:	89 c3                	mov    ebx,eax
c0002f73:	83 ec 1c             	sub    esp,0x1c
c0002f76:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f78:	31 c0                	xor    eax,eax
c0002f7a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f7d:	0f 94 c0             	sete   al
c0002f80:	48                   	dec    eax
c0002f81:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f86:	05 00 00 00 10       	add    eax,0x10000000
c0002f8b:	39 d0                	cmp    eax,edx
c0002f8d:	77 0a                	ja     c0002f99 <dir_sdi+0x2c>
c0002f8f:	b8 02 00 00 00       	mov    eax,0x2
c0002f94:	e9 c4 00 00 00       	jmp    c000305d <dir_sdi+0xf0>
c0002f99:	89 d6                	mov    esi,edx
c0002f9b:	f6 c2 1f             	test   dl,0x1f
c0002f9e:	75 ef                	jne    c0002f8f <dir_sdi+0x22>
c0002fa0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fa3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fa6:	85 c9                	test   ecx,ecx
c0002fa8:	75 2d                	jne    c0002fd7 <dir_sdi+0x6a>
c0002faa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fad:	77 1b                	ja     c0002fca <dir_sdi+0x5d>
c0002faf:	89 f2                	mov    edx,esi
c0002fb1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fb5:	c1 ea 05             	shr    edx,0x5
c0002fb8:	39 c2                	cmp    edx,eax
c0002fba:	73 d3                	jae    c0002f8f <dir_sdi+0x22>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fc2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fc8:	eb 4b                	jmp    c0003015 <dir_sdi+0xa8>
c0002fca:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fcd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 da                	je     c0002faf <dir_sdi+0x42>
c0002fd5:	89 c1                	mov    ecx,eax
c0002fd7:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fdb:	c1 e5 09             	shl    ebp,0x9
c0002fde:	89 ca                	mov    edx,ecx
c0002fe0:	39 ee                	cmp    esi,ebp
c0002fe2:	72 1c                	jb     c0003000 <dir_sdi+0x93>
c0002fe4:	89 d8                	mov    eax,ebx
c0002fe6:	e8 8c fd ff ff       	call   c0002d77 <get_fat>
c0002feb:	89 c1                	mov    ecx,eax
c0002fed:	83 f8 ff             	cmp    eax,0xffffffff
c0002ff0:	74 66                	je     c0003058 <dir_sdi+0xeb>
c0002ff2:	83 f8 01             	cmp    eax,0x1
c0002ff5:	76 98                	jbe    c0002f8f <dir_sdi+0x22>
c0002ff7:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002ffa:	76 93                	jbe    c0002f8f <dir_sdi+0x22>
c0002ffc:	29 ee                	sub    esi,ebp
c0002ffe:	eb de                	jmp    c0002fde <dir_sdi+0x71>
c0003000:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003004:	89 f8                	mov    eax,edi
c0003006:	e8 9f ec ff ff       	call   c0001caa <clst2sect>
c000300b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000300f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003012:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003015:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003018:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000301b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000301e:	89 d1                	mov    ecx,edx
c0003020:	09 c1                	or     ecx,eax
c0003022:	0f 84 67 ff ff ff    	je     c0002f8f <dir_sdi+0x22>
c0003028:	89 f1                	mov    ecx,esi
c000302a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003032:	c1 e9 09             	shr    ecx,0x9
c0003035:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003039:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000303d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003041:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003044:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000304a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003051:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003054:	31 c0                	xor    eax,eax
c0003056:	eb 05                	jmp    c000305d <dir_sdi+0xf0>
c0003058:	b8 01 00 00 00       	mov    eax,0x1
c000305d:	83 c4 1c             	add    esp,0x1c
c0003060:	5b                   	pop    ebx
c0003061:	5e                   	pop    esi
c0003062:	5f                   	pop    edi
c0003063:	5d                   	pop    ebp
c0003064:	c3                   	ret    

c0003065 <create_chain>:
c0003065:	55                   	push   ebp
c0003066:	89 c5                	mov    ebp,eax
c0003068:	57                   	push   edi
c0003069:	56                   	push   esi
c000306a:	53                   	push   ebx
c000306b:	83 ec 1c             	sub    esp,0x1c
c000306e:	85 d2                	test   edx,edx
c0003070:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003074:	8b 30                	mov    esi,DWORD PTR [eax]
c0003076:	75 0e                	jne    c0003086 <create_chain+0x21>
c0003078:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000307b:	85 ff                	test   edi,edi
c000307d:	74 39                	je     c00030b8 <create_chain+0x53>
c000307f:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003082:	77 39                	ja     c00030bd <create_chain+0x58>
c0003084:	eb 32                	jmp    c00030b8 <create_chain+0x53>
c0003086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000308a:	e8 e8 fc ff ff       	call   c0002d77 <get_fat>
c000308f:	89 c3                	mov    ebx,eax
c0003091:	83 f8 01             	cmp    eax,0x1
c0003094:	77 0a                	ja     c00030a0 <create_chain+0x3b>
c0003096:	bb 01 00 00 00       	mov    ebx,0x1
c000309b:	e9 ba 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030a0:	83 f8 ff             	cmp    eax,0xffffffff
c00030a3:	0f 84 62 01 00 00    	je     c000320b <create_chain+0x1a6>
c00030a9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ac:	0f 87 a8 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030b2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030b6:	eb 05                	jmp    c00030bd <create_chain+0x58>
c00030b8:	bf 01 00 00 00       	mov    edi,0x1
c00030bd:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030c1:	75 07                	jne    c00030ca <create_chain+0x65>
c00030c3:	31 db                	xor    ebx,ebx
c00030c5:	e9 90 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030ca:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030cd:	75 74                	jne    c0003143 <create_chain+0xde>
c00030cf:	b9 01 00 00 00       	mov    ecx,0x1
c00030d4:	89 fa                	mov    edx,edi
c00030d6:	89 f0                	mov    eax,esi
c00030d8:	e8 2d f9 ff ff       	call   c0002a0a <find_bitmap>
c00030dd:	89 c3                	mov    ebx,eax
c00030df:	8d 40 ff             	lea    eax,[eax-0x1]
c00030e2:	83 f8 fd             	cmp    eax,0xfffffffd
c00030e5:	0f 87 6f 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030eb:	83 ec 0c             	sub    esp,0xc
c00030ee:	b9 01 00 00 00       	mov    ecx,0x1
c00030f3:	6a 01                	push   0x1
c00030f5:	89 da                	mov    edx,ebx
c00030f7:	89 f0                	mov    eax,esi
c00030f9:	e8 bf f9 ff ff       	call   c0002abd <change_bitmap>
c00030fe:	83 c4 10             	add    esp,0x10
c0003101:	83 f8 02             	cmp    eax,0x2
c0003104:	74 90                	je     c0003096 <create_chain+0x31>
c0003106:	83 f8 01             	cmp    eax,0x1
c0003109:	0f 84 fc 00 00 00    	je     c000320b <create_chain+0x1a6>
c000310f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003114:	75 09                	jne    c000311f <create_chain+0xba>
c0003116:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000311a:	e9 0c 01 00 00       	jmp    c000322b <create_chain+0x1c6>
c000311f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003123:	0f 85 e7 00 00 00    	jne    c0003210 <create_chain+0x1ab>
c0003129:	8d 57 01             	lea    edx,[edi+0x1]
c000312c:	39 da                	cmp    edx,ebx
c000312e:	0f 84 f7 00 00 00    	je     c000322b <create_chain+0x1c6>
c0003134:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003137:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000313b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000313e:	e9 cd 00 00 00       	jmp    c0003210 <create_chain+0x1ab>
c0003143:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003147:	75 41                	jne    c000318a <create_chain+0x125>
c0003149:	8d 5f 01             	lea    ebx,[edi+0x1]
c000314c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000314f:	77 05                	ja     c0003156 <create_chain+0xf1>
c0003151:	bb 02 00 00 00       	mov    ebx,0x2
c0003156:	89 da                	mov    edx,ebx
c0003158:	89 e8                	mov    eax,ebp
c000315a:	e8 18 fc ff ff       	call   c0002d77 <get_fat>
c000315f:	83 f8 01             	cmp    eax,0x1
c0003162:	0f 84 2e ff ff ff    	je     c0003096 <create_chain+0x31>
c0003168:	83 f8 ff             	cmp    eax,0xffffffff
c000316b:	0f 84 9a 00 00 00    	je     c000320b <create_chain+0x1a6>
c0003171:	85 c0                	test   eax,eax
c0003173:	74 11                	je     c0003186 <create_chain+0x121>
c0003175:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003178:	83 f8 01             	cmp    eax,0x1
c000317b:	76 0d                	jbe    c000318a <create_chain+0x125>
c000317d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003180:	76 08                	jbe    c000318a <create_chain+0x125>
c0003182:	89 c7                	mov    edi,eax
c0003184:	eb 04                	jmp    c000318a <create_chain+0x125>
c0003186:	85 db                	test   ebx,ebx
c0003188:	75 38                	jne    c00031c2 <create_chain+0x15d>
c000318a:	89 fb                	mov    ebx,edi
c000318c:	43                   	inc    ebx
c000318d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003190:	77 0e                	ja     c00031a0 <create_chain+0x13b>
c0003192:	83 ff 01             	cmp    edi,0x1
c0003195:	0f 86 28 ff ff ff    	jbe    c00030c3 <create_chain+0x5e>
c000319b:	bb 02 00 00 00       	mov    ebx,0x2
c00031a0:	89 da                	mov    edx,ebx
c00031a2:	89 e8                	mov    eax,ebp
c00031a4:	e8 ce fb ff ff       	call   c0002d77 <get_fat>
c00031a9:	85 c0                	test   eax,eax
c00031ab:	74 15                	je     c00031c2 <create_chain+0x15d>
c00031ad:	83 f8 01             	cmp    eax,0x1
c00031b0:	0f 84 e0 fe ff ff    	je     c0003096 <create_chain+0x31>
c00031b6:	40                   	inc    eax
c00031b7:	74 52                	je     c000320b <create_chain+0x1a6>
c00031b9:	39 fb                	cmp    ebx,edi
c00031bb:	75 cf                	jne    c000318c <create_chain+0x127>
c00031bd:	e9 01 ff ff ff       	jmp    c00030c3 <create_chain+0x5e>
c00031c2:	83 c9 ff             	or     ecx,0xffffffff
c00031c5:	89 da                	mov    edx,ebx
c00031c7:	89 f0                	mov    eax,esi
c00031c9:	e8 a4 f9 ff ff       	call   c0002b72 <put_fat>
c00031ce:	85 c0                	test   eax,eax
c00031d0:	75 32                	jne    c0003204 <create_chain+0x19f>
c00031d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031d7:	74 11                	je     c00031ea <create_chain+0x185>
c00031d9:	89 d9                	mov    ecx,ebx
c00031db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031df:	89 f0                	mov    eax,esi
c00031e1:	e8 8c f9 ff ff       	call   c0002b72 <put_fat>
c00031e6:	85 c0                	test   eax,eax
c00031e8:	75 1a                	jne    c0003204 <create_chain+0x19f>
c00031ea:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031ed:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031f0:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031f3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031f6:	39 d0                	cmp    eax,edx
c00031f8:	77 04                	ja     c00031fe <create_chain+0x199>
c00031fa:	48                   	dec    eax
c00031fb:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031fe:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003202:	eb 56                	jmp    c000325a <create_chain+0x1f5>
c0003204:	48                   	dec    eax
c0003205:	0f 85 8b fe ff ff    	jne    c0003096 <create_chain+0x31>
c000320b:	83 cb ff             	or     ebx,0xffffffff
c000320e:	eb 4a                	jmp    c000325a <create_chain+0x1f5>
c0003210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003214:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003217:	41                   	inc    ecx
c0003218:	39 d9                	cmp    ecx,ebx
c000321a:	75 19                	jne    c0003235 <create_chain+0x1d0>
c000321c:	b9 02 00 00 00       	mov    ecx,0x2
c0003221:	85 d2                	test   edx,edx
c0003223:	74 03                	je     c0003228 <create_chain+0x1c3>
c0003225:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003228:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000322b:	85 c0                	test   eax,eax
c000322d:	0f 85 63 fe ff ff    	jne    c0003096 <create_chain+0x31>
c0003233:	eb b5                	jmp    c00031ea <create_chain+0x185>
c0003235:	85 d2                	test   edx,edx
c0003237:	75 07                	jne    c0003240 <create_chain+0x1db>
c0003239:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003240:	89 d9                	mov    ecx,ebx
c0003242:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003246:	89 e8                	mov    eax,ebp
c0003248:	e8 bb fa ff ff       	call   c0002d08 <fill_last_frag>
c000324d:	85 c0                	test   eax,eax
c000324f:	75 b3                	jne    c0003204 <create_chain+0x19f>
c0003251:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003258:	eb 90                	jmp    c00031ea <create_chain+0x185>
c000325a:	83 c4 1c             	add    esp,0x1c
c000325d:	89 d8                	mov    eax,ebx
c000325f:	5b                   	pop    ebx
c0003260:	5e                   	pop    esi
c0003261:	5f                   	pop    edi
c0003262:	5d                   	pop    ebp
c0003263:	c3                   	ret    

c0003264 <remove_chain>:
c0003264:	55                   	push   ebp
c0003265:	57                   	push   edi
c0003266:	56                   	push   esi
c0003267:	53                   	push   ebx
c0003268:	83 ec 1c             	sub    esp,0x1c
c000326b:	83 fa 01             	cmp    edx,0x1
c000326e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003272:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003274:	77 0a                	ja     c0003280 <remove_chain+0x1c>
c0003276:	b8 02 00 00 00       	mov    eax,0x2
c000327b:	e9 24 01 00 00       	jmp    c00033a4 <remove_chain+0x140>
c0003280:	89 d6                	mov    esi,edx
c0003282:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003285:	76 ef                	jbe    c0003276 <remove_chain+0x12>
c0003287:	89 c7                	mov    edi,eax
c0003289:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000328e:	75 06                	jne    c0003296 <remove_chain+0x32>
c0003290:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003294:	eb 54                	jmp    c00032ea <remove_chain+0x86>
c0003296:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003299:	75 06                	jne    c00032a1 <remove_chain+0x3d>
c000329b:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000329f:	74 ef                	je     c0003290 <remove_chain+0x2c>
c00032a1:	83 c9 ff             	or     ecx,0xffffffff
c00032a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 c3 f8 ff ff       	call   c0002b72 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 dd                	je     c0003290 <remove_chain+0x2c>
c00032b3:	e9 ec 00 00 00       	jmp    c00033a4 <remove_chain+0x140>
c00032b8:	83 f8 01             	cmp    eax,0x1
c00032bb:	74 b9                	je     c0003276 <remove_chain+0x12>
c00032bd:	83 f8 ff             	cmp    eax,0xffffffff
c00032c0:	74 6d                	je     c000332f <remove_chain+0xcb>
c00032c2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c5:	75 6f                	jne    c0003336 <remove_chain+0xd2>
c00032c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032ca:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032cd:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032d0:	39 d0                	cmp    eax,edx
c00032d2:	73 08                	jae    c00032dc <remove_chain+0x78>
c00032d4:	40                   	inc    eax
c00032d5:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032dc:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032df:	39 e9                	cmp    ecx,ebp
c00032e1:	75 64                	jne    c0003347 <remove_chain+0xe3>
c00032e3:	89 ee                	mov    esi,ebp
c00032e5:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032e8:	76 0f                	jbe    c00032f9 <remove_chain+0x95>
c00032ea:	89 f2                	mov    edx,esi
c00032ec:	89 f8                	mov    eax,edi
c00032ee:	e8 84 fa ff ff       	call   c0002d77 <get_fat>
c00032f3:	89 c5                	mov    ebp,eax
c00032f5:	85 c0                	test   eax,eax
c00032f7:	75 bf                	jne    c00032b8 <remove_chain+0x54>
c00032f9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fc:	0f 85 a0 00 00 00    	jne    c00033a2 <remove_chain+0x13e>
c0003302:	eb 6c                	jmp    c0003370 <remove_chain+0x10c>
c0003304:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003307:	84 c0                	test   al,al
c0003309:	75 7d                	jne    c0003388 <remove_chain+0x124>
c000330b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000330e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003312:	0f 84 86 00 00 00    	je     c000339e <remove_chain+0x13a>
c0003318:	89 da                	mov    edx,ebx
c000331a:	89 f8                	mov    eax,edi
c000331c:	e8 56 fa ff ff       	call   c0002d77 <get_fat>
c0003321:	83 f8 01             	cmp    eax,0x1
c0003324:	0f 86 4c ff ff ff    	jbe    c0003276 <remove_chain+0x12>
c000332a:	83 f8 ff             	cmp    eax,0xffffffff
c000332d:	75 4e                	jne    c000337d <remove_chain+0x119>
c000332f:	b8 01 00 00 00       	mov    eax,0x1
c0003334:	eb 6e                	jmp    c00033a4 <remove_chain+0x140>
c0003336:	31 c9                	xor    ecx,ecx
c0003338:	89 f2                	mov    edx,esi
c000333a:	89 d8                	mov    eax,ebx
c000333c:	e8 31 f8 ff ff       	call   c0002b72 <put_fat>
c0003341:	85 c0                	test   eax,eax
c0003343:	74 82                	je     c00032c7 <remove_chain+0x63>
c0003345:	eb 5d                	jmp    c00033a4 <remove_chain+0x140>
c0003347:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000334a:	75 1b                	jne    c0003367 <remove_chain+0x103>
c000334c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003350:	89 d8                	mov    eax,ebx
c0003352:	83 ec 0c             	sub    esp,0xc
c0003355:	6a 00                	push   0x0
c0003357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000335b:	e8 5d f7 ff ff       	call   c0002abd <change_bitmap>
c0003360:	83 c4 10             	add    esp,0x10
c0003363:	85 c0                	test   eax,eax
c0003365:	75 3d                	jne    c00033a4 <remove_chain+0x140>
c0003367:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000336b:	e9 73 ff ff ff       	jmp    c00032e3 <remove_chain+0x7f>
c0003370:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003375:	75 8d                	jne    c0003304 <remove_chain+0xa0>
c0003377:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000337b:	eb 25                	jmp    c00033a2 <remove_chain+0x13e>
c000337d:	8d 53 01             	lea    edx,[ebx+0x1]
c0003380:	89 c3                	mov    ebx,eax
c0003382:	39 c2                	cmp    edx,eax
c0003384:	74 88                	je     c000330e <remove_chain+0xaa>
c0003386:	eb 1a                	jmp    c00033a2 <remove_chain+0x13e>
c0003388:	3c 03                	cmp    al,0x3
c000338a:	75 16                	jne    c00033a2 <remove_chain+0x13e>
c000338c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000338f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003393:	77 0d                	ja     c00033a2 <remove_chain+0x13e>
c0003395:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003398:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000339c:	72 04                	jb     c00033a2 <remove_chain+0x13e>
c000339e:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033a2:	31 c0                	xor    eax,eax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <dir_clear>:
c00033ac:	55                   	push   ebp
c00033ad:	57                   	push   edi
c00033ae:	56                   	push   esi
c00033af:	89 c6                	mov    esi,eax
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033b9:	e8 9d ed ff ff       	call   c000215b <sync_window>
c00033be:	85 c0                	test   eax,eax
c00033c0:	0f 85 de 00 00 00    	jne    c00034a4 <dir_clear+0xf8>
c00033c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ca:	89 f0                	mov    eax,esi
c00033cc:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033cf:	e8 d6 e8 ff ff       	call   c0001caa <clst2sect>
c00033d4:	b9 00 02 00 00       	mov    ecx,0x200
c00033d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033e1:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033e4:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033e7:	89 e8                	mov    eax,ebp
c00033e9:	31 d2                	xor    edx,edx
c00033eb:	e8 b5 e6 ff ff       	call   c0001aa5 <mem_set>
c00033f0:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033f4:	c1 e3 09             	shl    ebx,0x9
c00033f7:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033fd:	76 1f                	jbe    c000341e <dir_clear+0x72>
c00033ff:	bb 00 80 00 00       	mov    ebx,0x8000
c0003404:	eb 18                	jmp    c000341e <dir_clear+0x72>
c0003406:	83 ec 0c             	sub    esp,0xc
c0003409:	53                   	push   ebx
c000340a:	e8 35 4e 00 00       	call   c0008244 <ff_memalloc>
c000340f:	83 c4 10             	add    esp,0x10
c0003412:	89 c7                	mov    edi,eax
c0003414:	85 c0                	test   eax,eax
c0003416:	0f 85 8f 00 00 00    	jne    c00034ab <dir_clear+0xff>
c000341c:	d1 eb                	shr    ebx,1
c000341e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003424:	77 e0                	ja     c0003406 <dir_clear+0x5a>
c0003426:	31 db                	xor    ebx,ebx
c0003428:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000342c:	39 d8                	cmp    eax,ebx
c000342e:	76 66                	jbe    c0003496 <dir_clear+0xea>
c0003430:	83 ec 0c             	sub    esp,0xc
c0003433:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003437:	6a 01                	push   0x1
c0003439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000343d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003441:	55                   	push   ebp
c0003442:	50                   	push   eax
c0003443:	e8 94 e5 ff ff       	call   c00019dc <disk_write>
c0003448:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000344d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003452:	83 c4 20             	add    esp,0x20
c0003455:	85 c0                	test   eax,eax
c0003457:	75 3d                	jne    c0003496 <dir_clear+0xea>
c0003459:	43                   	inc    ebx
c000345a:	eb cc                	jmp    c0003428 <dir_clear+0x7c>
c000345c:	83 ec 0c             	sub    esp,0xc
c000345f:	31 d2                	xor    edx,edx
c0003461:	55                   	push   ebp
c0003462:	89 d8                	mov    eax,ebx
c0003464:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003468:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000346c:	52                   	push   edx
c000346d:	50                   	push   eax
c000346e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003472:	57                   	push   edi
c0003473:	50                   	push   eax
c0003474:	e8 63 e5 ff ff       	call   c00019dc <disk_write>
c0003479:	83 c4 20             	add    esp,0x20
c000347c:	85 c0                	test   eax,eax
c000347e:	75 0a                	jne    c000348a <dir_clear+0xde>
c0003480:	01 eb                	add    ebx,ebp
c0003482:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003486:	39 d8                	cmp    eax,ebx
c0003488:	77 d2                	ja     c000345c <dir_clear+0xb0>
c000348a:	83 ec 0c             	sub    esp,0xc
c000348d:	57                   	push   edi
c000348e:	e8 c7 4d 00 00       	call   c000825a <ff_memfree>
c0003493:	83 c4 10             	add    esp,0x10
c0003496:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000349a:	39 d8                	cmp    eax,ebx
c000349c:	0f 95 c0             	setne  al
c000349f:	0f b6 c0             	movzx  eax,al
c00034a2:	eb 19                	jmp    c00034bd <dir_clear+0x111>
c00034a4:	b8 01 00 00 00       	mov    eax,0x1
c00034a9:	eb 12                	jmp    c00034bd <dir_clear+0x111>
c00034ab:	89 d9                	mov    ecx,ebx
c00034ad:	31 d2                	xor    edx,edx
c00034af:	c1 eb 09             	shr    ebx,0x9
c00034b2:	e8 ee e5 ff ff       	call   c0001aa5 <mem_set>
c00034b7:	89 dd                	mov    ebp,ebx
c00034b9:	31 db                	xor    ebx,ebx
c00034bb:	eb c5                	jmp    c0003482 <dir_clear+0xd6>
c00034bd:	83 c4 1c             	add    esp,0x1c
c00034c0:	5b                   	pop    ebx
c00034c1:	5e                   	pop    esi
c00034c2:	5f                   	pop    edi
c00034c3:	5d                   	pop    ebp
c00034c4:	c3                   	ret    

c00034c5 <dir_next>:
c00034c5:	55                   	push   ebp
c00034c6:	57                   	push   edi
c00034c7:	56                   	push   esi
c00034c8:	53                   	push   ebx
c00034c9:	89 c3                	mov    ebx,eax
c00034cb:	83 ec 1c             	sub    esp,0x1c
c00034ce:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034d7:	8d 78 20             	lea    edi,[eax+0x20]
c00034da:	31 c0                	xor    eax,eax
c00034dc:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034e0:	0f 94 c0             	sete   al
c00034e3:	48                   	dec    eax
c00034e4:	25 00 00 20 f0       	and    eax,0xf0200000
c00034e9:	05 00 00 00 10       	add    eax,0x10000000
c00034ee:	39 f8                	cmp    eax,edi
c00034f0:	77 0e                	ja     c0003500 <dir_next+0x3b>
c00034f2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034f9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003500:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003503:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003506:	b8 04 00 00 00       	mov    eax,0x4
c000350b:	89 ce                	mov    esi,ecx
c000350d:	09 d6                	or     esi,edx
c000350f:	0f 84 da 00 00 00    	je     c00035ef <dir_next+0x12a>
c0003515:	89 f8                	mov    eax,edi
c0003517:	25 ff 01 00 00       	and    eax,0x1ff
c000351c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003520:	0f 85 b9 00 00 00    	jne    c00035df <dir_next+0x11a>
c0003526:	83 c2 01             	add    edx,0x1
c0003529:	83 d1 00             	adc    ecx,0x0
c000352c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000352f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003532:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003535:	85 d2                	test   edx,edx
c0003537:	75 29                	jne    c0003562 <dir_next+0x9d>
c0003539:	89 fa                	mov    edx,edi
c000353b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000353f:	c1 ea 05             	shr    edx,0x5
c0003542:	39 c2                	cmp    edx,eax
c0003544:	0f 82 95 00 00 00    	jb     c00035df <dir_next+0x11a>
c000354a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003551:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003558:	b8 04 00 00 00       	mov    eax,0x4
c000355d:	e9 8d 00 00 00       	jmp    c00035ef <dir_next+0x12a>
c0003562:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003566:	89 f9                	mov    ecx,edi
c0003568:	48                   	dec    eax
c0003569:	c1 e9 09             	shr    ecx,0x9
c000356c:	85 c8                	test   eax,ecx
c000356e:	75 6f                	jne    c00035df <dir_next+0x11a>
c0003570:	89 d8                	mov    eax,ebx
c0003572:	e8 00 f8 ff ff       	call   c0002d77 <get_fat>
c0003577:	89 c6                	mov    esi,eax
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	77 07                	ja     c0003585 <dir_next+0xc0>
c000357e:	b8 02 00 00 00       	mov    eax,0x2
c0003583:	eb 6a                	jmp    c00035ef <dir_next+0x12a>
c0003585:	83 f8 ff             	cmp    eax,0xffffffff
c0003588:	75 07                	jne    c0003591 <dir_next+0xcc>
c000358a:	b8 01 00 00 00       	mov    eax,0x1
c000358f:	eb 5e                	jmp    c00035ef <dir_next+0x12a>
c0003591:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003594:	77 37                	ja     c00035cd <dir_next+0x108>
c0003596:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000359b:	74 ad                	je     c000354a <dir_next+0x85>
c000359d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	e8 be fa ff ff       	call   c0003065 <create_chain>
c00035a7:	89 c6                	mov    esi,eax
c00035a9:	b8 07 00 00 00       	mov    eax,0x7
c00035ae:	85 f6                	test   esi,esi
c00035b0:	74 3d                	je     c00035ef <dir_next+0x12a>
c00035b2:	83 fe 01             	cmp    esi,0x1
c00035b5:	74 c7                	je     c000357e <dir_next+0xb9>
c00035b7:	83 fe ff             	cmp    esi,0xffffffff
c00035ba:	74 ce                	je     c000358a <dir_next+0xc5>
c00035bc:	89 f2                	mov    edx,esi
c00035be:	89 e8                	mov    eax,ebp
c00035c0:	e8 e7 fd ff ff       	call   c00033ac <dir_clear>
c00035c5:	85 c0                	test   eax,eax
c00035c7:	75 c1                	jne    c000358a <dir_next+0xc5>
c00035c9:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035cd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035d0:	89 f2                	mov    edx,esi
c00035d2:	89 e8                	mov    eax,ebp
c00035d4:	e8 d1 e6 ff ff       	call   c0001caa <clst2sect>
c00035d9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035dc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035e3:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035e6:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035ea:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035ed:	31 c0                	xor    eax,eax
c00035ef:	83 c4 1c             	add    esp,0x1c
c00035f2:	5b                   	pop    ebx
c00035f3:	5e                   	pop    esi
c00035f4:	5f                   	pop    edi
c00035f5:	5d                   	pop    ebp
c00035f6:	c3                   	ret    

c00035f7 <load_xdir>:
c00035f7:	55                   	push   ebp
c00035f8:	57                   	push   edi
c00035f9:	56                   	push   esi
c00035fa:	89 c6                	mov    esi,eax
c00035fc:	53                   	push   ebx
c00035fd:	83 ec 1c             	sub    esp,0x1c
c0003600:	8b 00                	mov    eax,DWORD PTR [eax]
c0003602:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003605:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003608:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000360b:	e8 df eb ff ff       	call   c00021ef <move_window>
c0003610:	89 c3                	mov    ebx,eax
c0003612:	85 c0                	test   eax,eax
c0003614:	0f 85 0c 01 00 00    	jne    c0003726 <load_xdir+0x12f>
c000361a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000361d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003620:	0f 85 fb 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c0003626:	89 f8                	mov    eax,edi
c0003628:	b9 20 00 00 00       	mov    ecx,0x20
c000362d:	e8 5e e4 ff ff       	call   c0001a90 <mem_cpy>
c0003632:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003636:	40                   	inc    eax
c0003637:	c1 e0 05             	shl    eax,0x5
c000363a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000363e:	83 e8 60             	sub    eax,0x60
c0003641:	3d 00 02 00 00       	cmp    eax,0x200
c0003646:	0f 87 d5 00 00 00    	ja     c0003721 <load_xdir+0x12a>
c000364c:	31 d2                	xor    edx,edx
c000364e:	89 f0                	mov    eax,esi
c0003650:	e8 70 fe ff ff       	call   c00034c5 <dir_next>
c0003655:	89 c3                	mov    ebx,eax
c0003657:	83 f8 04             	cmp    eax,0x4
c000365a:	0f 84 c1 00 00 00    	je     c0003721 <load_xdir+0x12a>
c0003660:	85 c0                	test   eax,eax
c0003662:	0f 85 be 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c0003668:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000366b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000366e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003670:	e8 7a eb ff ff       	call   c00021ef <move_window>
c0003675:	89 c3                	mov    ebx,eax
c0003677:	85 c0                	test   eax,eax
c0003679:	0f 85 a7 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c000367f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003682:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003685:	0f 85 96 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c000368b:	8d 47 20             	lea    eax,[edi+0x20]
c000368e:	b9 20 00 00 00       	mov    ecx,0x20
c0003693:	e8 f8 e3 ff ff       	call   c0001a90 <mem_cpy>
c0003698:	31 d2                	xor    edx,edx
c000369a:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000369e:	b9 0f 00 00 00       	mov    ecx,0xf
c00036a3:	83 c0 2c             	add    eax,0x2c
c00036a6:	f7 f1                	div    ecx
c00036a8:	c1 e0 05             	shl    eax,0x5
c00036ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036af:	77 70                	ja     c0003721 <load_xdir+0x12a>
c00036b1:	bd 40 00 00 00       	mov    ebp,0x40
c00036b6:	31 d2                	xor    edx,edx
c00036b8:	89 f0                	mov    eax,esi
c00036ba:	e8 06 fe ff ff       	call   c00034c5 <dir_next>
c00036bf:	89 c3                	mov    ebx,eax
c00036c1:	83 f8 04             	cmp    eax,0x4
c00036c4:	74 5b                	je     c0003721 <load_xdir+0x12a>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 5c                	jne    c0003726 <load_xdir+0x12f>
c00036ca:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036cd:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00036d2:	e8 18 eb ff ff       	call   c00021ef <move_window>
c00036d7:	89 c3                	mov    ebx,eax
c00036d9:	85 c0                	test   eax,eax
c00036db:	75 49                	jne    c0003726 <load_xdir+0x12f>
c00036dd:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036e0:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036e3:	75 3c                	jne    c0003721 <load_xdir+0x12a>
c00036e5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036eb:	77 0d                	ja     c00036fa <load_xdir+0x103>
c00036ed:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036f0:	b9 20 00 00 00       	mov    ecx,0x20
c00036f5:	e8 96 e3 ff ff       	call   c0001a90 <mem_cpy>
c00036fa:	83 c5 20             	add    ebp,0x20
c00036fd:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003701:	77 b3                	ja     c00036b6 <load_xdir+0xbf>
c0003703:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003709:	77 1b                	ja     c0003726 <load_xdir+0x12f>
c000370b:	89 f8                	mov    eax,edi
c000370d:	e8 cd e7 ff ff       	call   c0001edf <xdir_sum>
c0003712:	89 c1                	mov    ecx,eax
c0003714:	8d 47 02             	lea    eax,[edi+0x2]
c0003717:	e8 f5 e2 ff ff       	call   c0001a11 <ld_word>
c000371c:	66 39 c1             	cmp    cx,ax
c000371f:	74 05                	je     c0003726 <load_xdir+0x12f>
c0003721:	bb 02 00 00 00       	mov    ebx,0x2
c0003726:	83 c4 1c             	add    esp,0x1c
c0003729:	89 d8                	mov    eax,ebx
c000372b:	5b                   	pop    ebx
c000372c:	5e                   	pop    esi
c000372d:	5f                   	pop    edi
c000372e:	5d                   	pop    ebp
c000372f:	c3                   	ret    

c0003730 <load_obj_xdir>:
c0003730:	53                   	push   ebx
c0003731:	89 c3                	mov    ebx,eax
c0003733:	83 ec 08             	sub    esp,0x8
c0003736:	8b 02                	mov    eax,DWORD PTR [edx]
c0003738:	89 03                	mov    DWORD PTR [ebx],eax
c000373a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000373d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003740:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003743:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003746:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003749:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003750:	30 c0                	xor    al,al
c0003752:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003759:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000375c:	89 d8                	mov    eax,ebx
c000375e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003761:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003764:	e8 04 f8 ff ff       	call   c0002f6d <dir_sdi>
c0003769:	85 c0                	test   eax,eax
c000376b:	75 0b                	jne    c0003778 <load_obj_xdir+0x48>
c000376d:	89 d8                	mov    eax,ebx
c000376f:	83 c4 08             	add    esp,0x8
c0003772:	5b                   	pop    ebx
c0003773:	e9 7f fe ff ff       	jmp    c00035f7 <load_xdir>
c0003778:	83 c4 08             	add    esp,0x8
c000377b:	5b                   	pop    ebx
c000377c:	c3                   	ret    

c000377d <dir_read>:
c000377d:	55                   	push   ebp
c000377e:	bd 04 00 00 00       	mov    ebp,0x4
c0003783:	57                   	push   edi
c0003784:	56                   	push   esi
c0003785:	be ff ff ff ff       	mov    esi,0xffffffff
c000378a:	53                   	push   ebx
c000378b:	89 c3                	mov    ebx,eax
c000378d:	83 ec 1c             	sub    esp,0x1c
c0003790:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003794:	8b 38                	mov    edi,DWORD PTR [eax]
c0003796:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000379b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a1:	89 c8                	mov    eax,ecx
c00037a3:	09 d0                	or     eax,edx
c00037a5:	0f 84 25 01 00 00    	je     c00038d0 <dir_read+0x153>
c00037ab:	89 f8                	mov    eax,edi
c00037ad:	e8 3d ea ff ff       	call   c00021ef <move_window>
c00037b2:	89 c5                	mov    ebp,eax
c00037b4:	85 c0                	test   eax,eax
c00037b6:	0f 85 23 01 00 00    	jne    c00038df <dir_read+0x162>
c00037bc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037bf:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037c1:	84 c9                	test   cl,cl
c00037c3:	0f 84 11 01 00 00    	je     c00038da <dir_read+0x15d>
c00037c9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037cc:	75 48                	jne    c0003816 <dir_read+0x99>
c00037ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037d3:	74 10                	je     c00037e5 <dir_read+0x68>
c00037d5:	80 f9 83             	cmp    cl,0x83
c00037d8:	0f 85 dd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037de:	31 ed                	xor    ebp,ebp
c00037e0:	e9 08 01 00 00       	jmp    c00038ed <dir_read+0x170>
c00037e5:	80 f9 85             	cmp    cl,0x85
c00037e8:	0f 85 cd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037ee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037f1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037f4:	89 d8                	mov    eax,ebx
c00037f6:	e8 fc fd ff ff       	call   c00035f7 <load_xdir>
c00037fb:	89 c5                	mov    ebp,eax
c00037fd:	85 c0                	test   eax,eax
c00037ff:	0f 85 da 00 00 00    	jne    c00038df <dir_read+0x162>
c0003805:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003808:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003811:	e9 d7 00 00 00       	jmp    c00038ed <dir_read+0x170>
c0003816:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003819:	83 e0 3f             	and    eax,0x3f
c000381c:	80 f9 2e             	cmp    cl,0x2e
c000381f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003823:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003826:	0f 84 8a 00 00 00    	je     c00038b6 <dir_read+0x139>
c000382c:	80 f9 e5             	cmp    cl,0xe5
c000382f:	0f 84 81 00 00 00    	je     c00038b6 <dir_read+0x139>
c0003835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003839:	83 e0 1f             	and    eax,0x1f
c000383c:	83 f8 08             	cmp    eax,0x8
c000383f:	0f 94 c0             	sete   al
c0003842:	0f b6 c0             	movzx  eax,al
c0003845:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003849:	75 6b                	jne    c00038b6 <dir_read+0x139>
c000384b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003850:	75 44                	jne    c0003896 <dir_read+0x119>
c0003852:	f6 c1 40             	test   cl,0x40
c0003855:	74 12                	je     c0003869 <dir_read+0xec>
c0003857:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000385a:	83 e1 bf             	and    ecx,0xffffffbf
c000385d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003861:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003864:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003867:	eb 06                	jmp    c000386f <dir_read+0xf2>
c0003869:	89 f0                	mov    eax,esi
c000386b:	38 c8                	cmp    al,cl
c000386d:	75 47                	jne    c00038b6 <dir_read+0x139>
c000386f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003873:	be ff ff ff ff       	mov    esi,0xffffffff
c0003878:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000387b:	75 3e                	jne    c00038bb <dir_read+0x13e>
c000387d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003881:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003884:	e8 8a e4 ff ff       	call   c0001d13 <pick_lfn>
c0003889:	85 c0                	test   eax,eax
c000388b:	74 2e                	je     c00038bb <dir_read+0x13e>
c000388d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003891:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003894:	eb 25                	jmp    c00038bb <dir_read+0x13e>
c0003896:	89 f0                	mov    eax,esi
c0003898:	84 c0                	test   al,al
c000389a:	75 11                	jne    c00038ad <dir_read+0x130>
c000389c:	89 d0                	mov    eax,edx
c000389e:	e8 2a e6 ff ff       	call   c0001ecd <sum_sfn>
c00038a3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038a7:	0f 84 31 ff ff ff    	je     c00037de <dir_read+0x61>
c00038ad:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038b4:	eb 37                	jmp    c00038ed <dir_read+0x170>
c00038b6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038bb:	31 d2                	xor    edx,edx
c00038bd:	89 d8                	mov    eax,ebx
c00038bf:	e8 01 fc ff ff       	call   c00034c5 <dir_next>
c00038c4:	89 c5                	mov    ebp,eax
c00038c6:	85 c0                	test   eax,eax
c00038c8:	0f 84 cd fe ff ff    	je     c000379b <dir_read+0x1e>
c00038ce:	eb 0f                	jmp    c00038df <dir_read+0x162>
c00038d0:	85 ed                	test   ebp,ebp
c00038d2:	0f 84 06 ff ff ff    	je     c00037de <dir_read+0x61>
c00038d8:	eb 05                	jmp    c00038df <dir_read+0x162>
c00038da:	bd 04 00 00 00       	mov    ebp,0x4
c00038df:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038e6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038ed:	83 c4 1c             	add    esp,0x1c
c00038f0:	89 e8                	mov    eax,ebp
c00038f2:	5b                   	pop    ebx
c00038f3:	5e                   	pop    esi
c00038f4:	5f                   	pop    edi
c00038f5:	5d                   	pop    ebp
c00038f6:	c3                   	ret    

c00038f7 <dir_alloc>:
c00038f7:	55                   	push   ebp
c00038f8:	89 d5                	mov    ebp,edx
c00038fa:	57                   	push   edi
c00038fb:	31 d2                	xor    edx,edx
c00038fd:	56                   	push   esi
c00038fe:	53                   	push   ebx
c00038ff:	89 c3                	mov    ebx,eax
c0003901:	83 ec 0c             	sub    esp,0xc
c0003904:	8b 38                	mov    edi,DWORD PTR [eax]
c0003906:	e8 62 f6 ff ff       	call   c0002f6d <dir_sdi>
c000390b:	85 c0                	test   eax,eax
c000390d:	75 4e                	jne    c000395d <dir_alloc+0x66>
c000390f:	31 f6                	xor    esi,esi
c0003911:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003914:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003917:	89 f8                	mov    eax,edi
c0003919:	e8 d1 e8 ff ff       	call   c00021ef <move_window>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 3b                	jne    c000395d <dir_alloc+0x66>
c0003922:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003925:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003928:	8a 12                	mov    dl,BYTE PTR [edx]
c000392a:	75 07                	jne    c0003933 <dir_alloc+0x3c>
c000392c:	f7 d2                	not    edx
c000392e:	c0 ea 07             	shr    dl,0x7
c0003931:	eb 0d                	jmp    c0003940 <dir_alloc+0x49>
c0003933:	84 d2                	test   dl,dl
c0003935:	0f 94 c1             	sete   cl
c0003938:	80 fa e5             	cmp    dl,0xe5
c000393b:	0f 94 c2             	sete   dl
c000393e:	09 ca                	or     edx,ecx
c0003940:	84 d2                	test   dl,dl
c0003942:	74 07                	je     c000394b <dir_alloc+0x54>
c0003944:	46                   	inc    esi
c0003945:	39 ee                	cmp    esi,ebp
c0003947:	75 04                	jne    c000394d <dir_alloc+0x56>
c0003949:	eb 1c                	jmp    c0003967 <dir_alloc+0x70>
c000394b:	31 f6                	xor    esi,esi
c000394d:	ba 01 00 00 00       	mov    edx,0x1
c0003952:	89 d8                	mov    eax,ebx
c0003954:	e8 6c fb ff ff       	call   c00034c5 <dir_next>
c0003959:	85 c0                	test   eax,eax
c000395b:	74 b4                	je     c0003911 <dir_alloc+0x1a>
c000395d:	83 f8 04             	cmp    eax,0x4
c0003960:	75 05                	jne    c0003967 <dir_alloc+0x70>
c0003962:	b8 07 00 00 00       	mov    eax,0x7
c0003967:	83 c4 0c             	add    esp,0xc
c000396a:	5b                   	pop    ebx
c000396b:	5e                   	pop    esi
c000396c:	5f                   	pop    edi
c000396d:	5d                   	pop    ebp
c000396e:	c3                   	ret    

c000396f <store_xdir>:
c000396f:	55                   	push   ebp
c0003970:	57                   	push   edi
c0003971:	89 c7                	mov    edi,eax
c0003973:	56                   	push   esi
c0003974:	53                   	push   ebx
c0003975:	83 ec 0c             	sub    esp,0xc
c0003978:	8b 00                	mov    eax,DWORD PTR [eax]
c000397a:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000397d:	89 e8                	mov    eax,ebp
c000397f:	e8 5b e5 ff ff       	call   c0001edf <xdir_sum>
c0003984:	0f b7 d0             	movzx  edx,ax
c0003987:	8d 45 02             	lea    eax,[ebp+0x2]
c000398a:	e8 f4 e0 ff ff       	call   c0001a83 <st_word>
c000398f:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003993:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003996:	89 f8                	mov    eax,edi
c0003998:	e8 d0 f5 ff ff       	call   c0002f6d <dir_sdi>
c000399d:	89 c6                	mov    esi,eax
c000399f:	85 f6                	test   esi,esi
c00039a1:	75 3d                	jne    c00039e0 <store_xdir+0x71>
c00039a3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039a6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00039ab:	e8 3f e8 ff ff       	call   c00021ef <move_window>
c00039b0:	89 c6                	mov    esi,eax
c00039b2:	85 c0                	test   eax,eax
c00039b4:	75 2a                	jne    c00039e0 <store_xdir+0x71>
c00039b6:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039b9:	b9 20 00 00 00       	mov    ecx,0x20
c00039be:	89 ea                	mov    edx,ebp
c00039c0:	e8 cb e0 ff ff       	call   c0001a90 <mem_cpy>
c00039c5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039c7:	85 db                	test   ebx,ebx
c00039c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039cd:	74 11                	je     c00039e0 <store_xdir+0x71>
c00039cf:	31 d2                	xor    edx,edx
c00039d1:	89 f8                	mov    eax,edi
c00039d3:	83 c5 20             	add    ebp,0x20
c00039d6:	e8 ea fa ff ff       	call   c00034c5 <dir_next>
c00039db:	4b                   	dec    ebx
c00039dc:	89 c6                	mov    esi,eax
c00039de:	eb bf                	jmp    c000399f <store_xdir+0x30>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	83 fe 02             	cmp    esi,0x2
c00039e5:	76 05                	jbe    c00039ec <store_xdir+0x7d>
c00039e7:	b8 02 00 00 00       	mov    eax,0x2
c00039ec:	83 c4 0c             	add    esp,0xc
c00039ef:	5b                   	pop    ebx
c00039f0:	5e                   	pop    esi
c00039f1:	5f                   	pop    edi
c00039f2:	5d                   	pop    ebp
c00039f3:	c3                   	ret    

c00039f4 <dir_remove>:
c00039f4:	57                   	push   edi
c00039f5:	56                   	push   esi
c00039f6:	53                   	push   ebx
c00039f7:	89 c3                	mov    ebx,eax
c00039f9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039fc:	8b 30                	mov    esi,DWORD PTR [eax]
c00039fe:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a01:	83 fa ff             	cmp    edx,0xffffffff
c0003a04:	74 09                	je     c0003a0f <dir_remove+0x1b>
c0003a06:	e8 62 f5 ff ff       	call   c0002f6d <dir_sdi>
c0003a0b:	85 c0                	test   eax,eax
c0003a0d:	75 41                	jne    c0003a50 <dir_remove+0x5c>
c0003a0f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a12:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a15:	89 f0                	mov    eax,esi
c0003a17:	e8 d3 e7 ff ff       	call   c00021ef <move_window>
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	75 26                	jne    c0003a46 <dir_remove+0x52>
c0003a20:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a23:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a26:	75 05                	jne    c0003a2d <dir_remove+0x39>
c0003a28:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a2b:	eb 03                	jmp    c0003a30 <dir_remove+0x3c>
c0003a2d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a30:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a34:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a37:	73 17                	jae    c0003a50 <dir_remove+0x5c>
c0003a39:	31 d2                	xor    edx,edx
c0003a3b:	89 d8                	mov    eax,ebx
c0003a3d:	e8 83 fa ff ff       	call   c00034c5 <dir_next>
c0003a42:	85 c0                	test   eax,eax
c0003a44:	74 c9                	je     c0003a0f <dir_remove+0x1b>
c0003a46:	83 f8 04             	cmp    eax,0x4
c0003a49:	75 05                	jne    c0003a50 <dir_remove+0x5c>
c0003a4b:	b8 02 00 00 00       	mov    eax,0x2
c0003a50:	5b                   	pop    ebx
c0003a51:	5e                   	pop    esi
c0003a52:	5f                   	pop    edi
c0003a53:	c3                   	ret    

c0003a54 <create_name>:
c0003a54:	55                   	push   ebp
c0003a55:	89 d5                	mov    ebp,edx
c0003a57:	57                   	push   edi
c0003a58:	89 c7                	mov    edi,eax
c0003a5a:	56                   	push   esi
c0003a5b:	31 f6                	xor    esi,esi
c0003a5d:	53                   	push   ebx
c0003a5e:	83 ec 3c             	sub    esp,0x3c
c0003a61:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a63:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a67:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a69:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a70:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a74:	e8 72 e0 ff ff       	call   c0001aeb <tchar2uni>
c0003a79:	89 c3                	mov    ebx,eax
c0003a7b:	83 f8 ff             	cmp    eax,0xffffffff
c0003a7e:	75 0a                	jne    c0003a8a <create_name+0x36>
c0003a80:	b8 06 00 00 00       	mov    eax,0x6
c0003a85:	e9 9e 02 00 00       	jmp    c0003d28 <create_name+0x2d4>
c0003a8a:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a8f:	76 0c                	jbe    c0003a9d <create_name+0x49>
c0003a91:	c1 e8 10             	shr    eax,0x10
c0003a94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a98:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a9c:	46                   	inc    esi
c0003a9d:	66 83 fb 1f          	cmp    bx,0x1f
c0003aa1:	76 4f                	jbe    c0003af2 <create_name+0x9e>
c0003aa3:	66 83 fb 5c          	cmp    bx,0x5c
c0003aa7:	74 35                	je     c0003ade <create_name+0x8a>
c0003aa9:	66 83 fb 2f          	cmp    bx,0x2f
c0003aad:	74 2f                	je     c0003ade <create_name+0x8a>
c0003aaf:	66 83 fb 7f          	cmp    bx,0x7f
c0003ab3:	77 11                	ja     c0003ac6 <create_name+0x72>
c0003ab5:	0f b7 d3             	movzx  edx,bx
c0003ab8:	b8 92 71 02 c0       	mov    eax,0xc0027192
c0003abd:	e8 11 e0 ff ff       	call   c0001ad3 <chk_chr>
c0003ac2:	85 c0                	test   eax,eax
c0003ac4:	75 ba                	jne    c0003a80 <create_name+0x2c>
c0003ac6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003acc:	77 b2                	ja     c0003a80 <create_name+0x2c>
c0003ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ad6:	46                   	inc    esi
c0003ad7:	eb 97                	jmp    c0003a70 <create_name+0x1c>
c0003ad9:	40                   	inc    eax
c0003ada:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ae2:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ae4:	80 fa 2f             	cmp    dl,0x2f
c0003ae7:	74 f0                	je     c0003ad9 <create_name+0x85>
c0003ae9:	80 fa 5c             	cmp    dl,0x5c
c0003aec:	74 eb                	je     c0003ad9 <create_name+0x85>
c0003aee:	31 db                	xor    ebx,ebx
c0003af0:	eb 02                	jmp    c0003af4 <create_name+0xa0>
c0003af2:	b3 04                	mov    bl,0x4
c0003af4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003af8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003afb:	85 f6                	test   esi,esi
c0003afd:	74 18                	je     c0003b17 <create_name+0xc3>
c0003aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b03:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b08:	66 83 f8 20          	cmp    ax,0x20
c0003b0c:	74 06                	je     c0003b14 <create_name+0xc0>
c0003b0e:	66 83 f8 2e          	cmp    ax,0x2e
c0003b12:	75 03                	jne    c0003b17 <create_name+0xc3>
c0003b14:	4e                   	dec    esi
c0003b15:	eb e4                	jmp    c0003afb <create_name+0xa7>
c0003b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b1b:	31 ed                	xor    ebp,ebp
c0003b1d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b23:	85 f6                	test   esi,esi
c0003b25:	0f 84 55 ff ff ff    	je     c0003a80 <create_name+0x2c>
c0003b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b2f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b32:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b36:	66 83 f8 20          	cmp    ax,0x20
c0003b3a:	75 04                	jne    c0003b40 <create_name+0xec>
c0003b3c:	89 d5                	mov    ebp,edx
c0003b3e:	eb eb                	jmp    c0003b2b <create_name+0xd7>
c0003b40:	85 ed                	test   ebp,ebp
c0003b42:	75 06                	jne    c0003b4a <create_name+0xf6>
c0003b44:	66 83 f8 2e          	cmp    ax,0x2e
c0003b48:	75 08                	jne    c0003b52 <create_name+0xfe>
c0003b4a:	83 cb 03             	or     ebx,0x3
c0003b4d:	eb 03                	jmp    c0003b52 <create_name+0xfe>
c0003b4f:	4e                   	dec    esi
c0003b50:	74 0c                	je     c0003b5e <create_name+0x10a>
c0003b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b56:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b5c:	75 f1                	jne    c0003b4f <create_name+0xfb>
c0003b5e:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b63:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b66:	ba 20 00 00 00       	mov    edx,0x20
c0003b6b:	e8 35 df ff ff       	call   c0001aa5 <mem_set>
c0003b70:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b78:	31 c9                	xor    ecx,ecx
c0003b7a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8a:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b8e:	66 85 ed             	test   bp,bp
c0003b91:	0f 84 30 01 00 00    	je     c0003cc7 <create_name+0x273>
c0003b97:	66 83 fd 20          	cmp    bp,0x20
c0003b9b:	74 10                	je     c0003bad <create_name+0x159>
c0003b9d:	66 83 fd 2e          	cmp    bp,0x2e
c0003ba1:	75 13                	jne    c0003bb6 <create_name+0x162>
c0003ba3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ba7:	0f 84 6b 01 00 00    	je     c0003d18 <create_name+0x2c4>
c0003bad:	83 cb 03             	or     ebx,0x3
c0003bb0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bb4:	eb c9                	jmp    c0003b7f <create_name+0x12b>
c0003bb6:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bba:	73 0b                	jae    c0003bc7 <create_name+0x173>
c0003bbc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bc0:	75 47                	jne    c0003c09 <create_name+0x1b5>
c0003bc2:	e9 51 01 00 00       	jmp    c0003d18 <create_name+0x2c4>
c0003bc7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bcc:	75 10                	jne    c0003bde <create_name+0x18a>
c0003bce:	83 cb 03             	or     ebx,0x3
c0003bd1:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bd9:	e9 e9 00 00 00       	jmp    c0003cc7 <create_name+0x273>
c0003bde:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be2:	74 0d                	je     c0003bf1 <create_name+0x19d>
c0003be4:	83 cb 03             	or     ebx,0x3
c0003be7:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003beb:	0f 87 d6 00 00 00    	ja     c0003cc7 <create_name+0x273>
c0003bf1:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003bf6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bfa:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c02:	b9 08 00 00 00       	mov    ecx,0x8
c0003c07:	eb a7                	jmp    c0003bb0 <create_name+0x15c>
c0003c09:	66 83 fd 7f          	cmp    bp,0x7f
c0003c0d:	76 68                	jbe    c0003c77 <create_name+0x223>
c0003c0f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c13:	88 da                	mov    dl,bl
c0003c15:	83 ca 02             	or     edx,0x2
c0003c18:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c1c:	50                   	push   eax
c0003c1d:	50                   	push   eax
c0003c1e:	68 b5 01 00 00       	push   0x1b5
c0003c23:	55                   	push   ebp
c0003c24:	e8 48 46 00 00       	call   c0008271 <ff_uni2oem>
c0003c29:	83 c4 10             	add    esp,0x10
c0003c2c:	89 c5                	mov    ebp,eax
c0003c2e:	a8 80                	test   al,0x80
c0003c30:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c38:	74 0c                	je     c0003c46 <create_name+0x1f2>
c0003c3a:	83 e5 7f             	and    ebp,0x7f
c0003c3d:	0f b6 ad e0 70 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd8f20]
c0003c44:	eb 2a                	jmp    c0003c70 <create_name+0x21c>
c0003c46:	66 3d ff 00          	cmp    ax,0xff
c0003c4a:	76 24                	jbe    c0003c70 <create_name+0x21c>
c0003c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c50:	48                   	dec    eax
c0003c51:	39 c8                	cmp    eax,ecx
c0003c53:	77 0c                	ja     c0003c61 <create_name+0x20d>
c0003c55:	83 cb 03             	or     ebx,0x3
c0003c58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c5c:	e9 4f ff ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003c61:	89 e8                	mov    eax,ebp
c0003c63:	88 d3                	mov    bl,dl
c0003c65:	66 c1 e8 08          	shr    ax,0x8
c0003c69:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c6d:	41                   	inc    ecx
c0003c6e:	eb 4b                	jmp    c0003cbb <create_name+0x267>
c0003c70:	88 d3                	mov    bl,dl
c0003c72:	66 85 ed             	test   bp,bp
c0003c75:	74 19                	je     c0003c90 <create_name+0x23c>
c0003c77:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c7b:	0f b7 d5             	movzx  edx,bp
c0003c7e:	b8 9b 71 02 c0       	mov    eax,0xc002719b
c0003c83:	e8 4b de ff ff       	call   c0001ad3 <chk_chr>
c0003c88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	74 0a                	je     c0003c9a <create_name+0x246>
c0003c90:	83 cb 03             	or     ebx,0x3
c0003c93:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c98:	eb 21                	jmp    c0003cbb <create_name+0x267>
c0003c9a:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c9d:	66 83 f8 19          	cmp    ax,0x19
c0003ca1:	77 07                	ja     c0003caa <create_name+0x256>
c0003ca3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ca8:	eb 11                	jmp    c0003cbb <create_name+0x267>
c0003caa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cad:	66 83 f8 19          	cmp    ax,0x19
c0003cb1:	77 08                	ja     c0003cbb <create_name+0x267>
c0003cb3:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cb8:	83 ed 20             	sub    ebp,0x20
c0003cbb:	89 e8                	mov    eax,ebp
c0003cbd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cc1:	41                   	inc    ecx
c0003cc2:	e9 e9 fe ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003cc7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ccb:	75 04                	jne    c0003cd1 <create_name+0x27d>
c0003ccd:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cd1:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cd6:	75 05                	jne    c0003cdd <create_name+0x289>
c0003cd8:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003cdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ce1:	83 e0 0c             	and    eax,0xc
c0003ce4:	3c 0c                	cmp    al,0xc
c0003ce6:	74 0b                	je     c0003cf3 <create_name+0x29f>
c0003ce8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cec:	83 e0 03             	and    eax,0x3
c0003cef:	3c 03                	cmp    al,0x3
c0003cf1:	75 05                	jne    c0003cf8 <create_name+0x2a4>
c0003cf3:	83 cb 02             	or     ebx,0x2
c0003cf6:	eb 19                	jmp    c0003d11 <create_name+0x2bd>
c0003cf8:	f6 c3 02             	test   bl,0x2
c0003cfb:	75 14                	jne    c0003d11 <create_name+0x2bd>
c0003cfd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d02:	74 03                	je     c0003d07 <create_name+0x2b3>
c0003d04:	83 cb 10             	or     ebx,0x10
c0003d07:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d0c:	74 03                	je     c0003d11 <create_name+0x2bd>
c0003d0e:	83 cb 08             	or     ebx,0x8
c0003d11:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d14:	31 c0                	xor    eax,eax
c0003d16:	eb 10                	jmp    c0003d28 <create_name+0x2d4>
c0003d18:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d1d:	0f 85 ce fe ff ff    	jne    c0003bf1 <create_name+0x19d>
c0003d23:	e9 a6 fe ff ff       	jmp    c0003bce <create_name+0x17a>
c0003d28:	83 c4 3c             	add    esp,0x3c
c0003d2b:	5b                   	pop    ebx
c0003d2c:	5e                   	pop    esi
c0003d2d:	5f                   	pop    edi
c0003d2e:	5d                   	pop    ebp
c0003d2f:	c3                   	ret    

c0003d30 <xname_sum>:
c0003d30:	56                   	push   esi
c0003d31:	53                   	push   ebx
c0003d32:	89 c6                	mov    esi,eax
c0003d34:	51                   	push   ecx
c0003d35:	31 db                	xor    ebx,ebx
c0003d37:	83 c6 02             	add    esi,0x2
c0003d3a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d3e:	66 85 c0             	test   ax,ax
c0003d41:	74 1f                	je     c0003d62 <xname_sum+0x32>
c0003d43:	83 ec 0c             	sub    esp,0xc
c0003d46:	66 d1 cb             	ror    bx,1
c0003d49:	50                   	push   eax
c0003d4a:	e8 1e 46 00 00       	call   c000836d <ff_wtoupper>
c0003d4f:	83 c4 10             	add    esp,0x10
c0003d52:	0f b6 d0             	movzx  edx,al
c0003d55:	66 c1 e8 08          	shr    ax,0x8
c0003d59:	01 d3                	add    ebx,edx
c0003d5b:	66 d1 cb             	ror    bx,1
c0003d5e:	01 c3                	add    ebx,eax
c0003d60:	eb d5                	jmp    c0003d37 <xname_sum+0x7>
c0003d62:	89 d8                	mov    eax,ebx
c0003d64:	5a                   	pop    edx
c0003d65:	5b                   	pop    ebx
c0003d66:	5e                   	pop    esi
c0003d67:	c3                   	ret    

c0003d68 <create_xdir>:
c0003d68:	55                   	push   ebp
c0003d69:	b9 40 00 00 00       	mov    ecx,0x40
c0003d6e:	57                   	push   edi
c0003d6f:	bd 01 00 00 00       	mov    ebp,0x1
c0003d74:	56                   	push   esi
c0003d75:	31 ff                	xor    edi,edi
c0003d77:	53                   	push   ebx
c0003d78:	be 40 00 00 00       	mov    esi,0x40
c0003d7d:	89 c3                	mov    ebx,eax
c0003d7f:	83 ec 1c             	sub    esp,0x1c
c0003d82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d86:	31 d2                	xor    edx,edx
c0003d88:	e8 18 dd ff ff       	call   c0001aa5 <mem_set>
c0003d8d:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d90:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d94:	31 c9                	xor    ecx,ecx
c0003d96:	8d 46 01             	lea    eax,[esi+0x1]
c0003d99:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d9d:	83 c6 02             	add    esi,0x2
c0003da0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	74 12                	je     c0003dbb <create_xdir+0x53>
c0003da9:	0f b6 c1             	movzx  eax,cl
c0003dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003db0:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003db4:	66 83 fd 01          	cmp    bp,0x1
c0003db8:	80 d9 ff             	sbb    cl,0xff
c0003dbb:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dbe:	0f b7 d5             	movzx  edx,bp
c0003dc1:	83 c6 02             	add    esi,0x2
c0003dc4:	e8 ba dc ff ff       	call   c0001a83 <st_word>
c0003dc9:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dcf:	75 d3                	jne    c0003da4 <create_xdir+0x3c>
c0003dd1:	8d 47 01             	lea    eax,[edi+0x1]
c0003dd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dd8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ddc:	0f b6 c1             	movzx  eax,cl
c0003ddf:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003de4:	74 07                	je     c0003ded <create_xdir+0x85>
c0003de6:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003deb:	eb a9                	jmp    c0003d96 <create_xdir+0x2e>
c0003ded:	8d 47 02             	lea    eax,[edi+0x2]
c0003df0:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003df3:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003df6:	89 d0                	mov    eax,edx
c0003df8:	e8 33 ff ff ff       	call   c0003d30 <xname_sum>
c0003dfd:	83 c4 1c             	add    esp,0x1c
c0003e00:	0f b7 d0             	movzx  edx,ax
c0003e03:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e06:	5b                   	pop    ebx
c0003e07:	5e                   	pop    esi
c0003e08:	5f                   	pop    edi
c0003e09:	5d                   	pop    ebp
c0003e0a:	e9 74 dc ff ff       	jmp    c0001a83 <st_word>

c0003e0f <cmp_lfn>:
c0003e0f:	55                   	push   ebp
c0003e10:	57                   	push   edi
c0003e11:	89 d7                	mov    edi,edx
c0003e13:	56                   	push   esi
c0003e14:	53                   	push   ebx
c0003e15:	83 ec 1c             	sub    esp,0x1c
c0003e18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e1f:	e8 ed db ff ff       	call   c0001a11 <ld_word>
c0003e24:	66 85 c0             	test   ax,ax
c0003e27:	74 07                	je     c0003e30 <cmp_lfn+0x21>
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	e9 9a 00 00 00       	jmp    c0003eca <cmp_lfn+0xbb>
c0003e30:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e32:	bd 01 00 00 00       	mov    ebp,0x1
c0003e37:	83 e3 3f             	and    ebx,0x3f
c0003e3a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e42:	4b                   	dec    ebx
c0003e43:	6b db 0d             	imul   ebx,ebx,0xd
c0003e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e4a:	0f b6 80 60 71 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8ea0]
c0003e51:	01 f8                	add    eax,edi
c0003e53:	e8 b9 db ff ff       	call   c0001a11 <ld_word>
c0003e58:	66 85 ed             	test   bp,bp
c0003e5b:	89 c6                	mov    esi,eax
c0003e5d:	74 3c                	je     c0003e9b <cmp_lfn+0x8c>
c0003e5f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e65:	77 c2                	ja     c0003e29 <cmp_lfn+0x1a>
c0003e67:	83 ec 0c             	sub    esp,0xc
c0003e6a:	0f b7 c0             	movzx  eax,ax
c0003e6d:	50                   	push   eax
c0003e6e:	e8 fa 44 00 00       	call   c000836d <ff_wtoupper>
c0003e73:	89 c5                	mov    ebp,eax
c0003e75:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e80:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e84:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e87:	e8 e1 44 00 00       	call   c000836d <ff_wtoupper>
c0003e8c:	83 c4 10             	add    esp,0x10
c0003e8f:	39 c5                	cmp    ebp,eax
c0003e91:	75 96                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e93:	89 f5                	mov    ebp,esi
c0003e95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e99:	eb 04                	jmp    c0003e9f <cmp_lfn+0x90>
c0003e9b:	66 46                	inc    si
c0003e9d:	75 8a                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e9f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ea3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ea8:	75 9c                	jne    c0003e46 <cmp_lfn+0x37>
c0003eaa:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ead:	74 16                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eaf:	66 85 ed             	test   bp,bp
c0003eb2:	74 11                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb8:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ebd:	0f 94 c0             	sete   al
c0003ec0:	0f b6 c0             	movzx  eax,al
c0003ec3:	eb 05                	jmp    c0003eca <cmp_lfn+0xbb>
c0003ec5:	b8 01 00 00 00       	mov    eax,0x1
c0003eca:	83 c4 1c             	add    esp,0x1c
c0003ecd:	5b                   	pop    ebx
c0003ece:	5e                   	pop    esi
c0003ecf:	5f                   	pop    edi
c0003ed0:	5d                   	pop    ebp
c0003ed1:	c3                   	ret    

c0003ed2 <dir_find>:
c0003ed2:	55                   	push   ebp
c0003ed3:	31 d2                	xor    edx,edx
c0003ed5:	57                   	push   edi
c0003ed6:	56                   	push   esi
c0003ed7:	53                   	push   ebx
c0003ed8:	89 c3                	mov    ebx,eax
c0003eda:	83 ec 1c             	sub    esp,0x1c
c0003edd:	8b 30                	mov    esi,DWORD PTR [eax]
c0003edf:	e8 89 f0 ff ff       	call   c0002f6d <dir_sdi>
c0003ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee7:	85 c0                	test   eax,eax
c0003ee9:	0f 85 9e 01 00 00    	jne    c000408d <dir_find+0x1bb>
c0003eef:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ef2:	0f 85 8d 00 00 00    	jne    c0003f85 <dir_find+0xb3>
c0003ef8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003efb:	e8 30 fe ff ff       	call   c0003d30 <xname_sum>
c0003f00:	89 c7                	mov    edi,eax
c0003f02:	31 d2                	xor    edx,edx
c0003f04:	89 d8                	mov    eax,ebx
c0003f06:	e8 72 f8 ff ff       	call   c000377d <dir_read>
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	0f 85 5e 01 00 00    	jne    c0004071 <dir_find+0x19f>
c0003f13:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f16:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f19:	e8 f3 da ff ff       	call   c0001a11 <ld_word>
c0003f1e:	66 39 f8             	cmp    ax,di
c0003f21:	75 df                	jne    c0003f02 <dir_find+0x30>
c0003f23:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f26:	31 ed                	xor    ebp,ebp
c0003f28:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f2c:	ba 40 00 00 00       	mov    edx,0x40
c0003f31:	89 e9                	mov    ecx,ebp
c0003f33:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f37:	0f 84 42 01 00 00    	je     c000407f <dir_find+0x1ad>
c0003f3d:	f6 c2 1f             	test   dl,0x1f
c0003f40:	75 03                	jne    c0003f45 <dir_find+0x73>
c0003f42:	83 c2 02             	add    edx,0x2
c0003f45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f49:	89 d0                	mov    eax,edx
c0003f4b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f4e:	e8 be da ff ff       	call   c0001a11 <ld_word>
c0003f53:	83 ec 0c             	sub    esp,0xc
c0003f56:	0f b7 c0             	movzx  eax,ax
c0003f59:	50                   	push   eax
c0003f5a:	e8 0e 44 00 00       	call   c000836d <ff_wtoupper>
c0003f5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f63:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f66:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f6d:	e8 fb 43 00 00       	call   c000836d <ff_wtoupper>
c0003f72:	83 c4 10             	add    esp,0x10
c0003f75:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f79:	75 87                	jne    c0003f02 <dir_find+0x30>
c0003f7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f7f:	45                   	inc    ebp
c0003f80:	83 c2 02             	add    edx,0x2
c0003f83:	eb ac                	jmp    c0003f31 <dir_find+0x5f>
c0003f85:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f8c:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f91:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f96:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f99:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f9c:	89 f0                	mov    eax,esi
c0003f9e:	e8 4c e2 ff ff       	call   c00021ef <move_window>
c0003fa3:	85 c0                	test   eax,eax
c0003fa5:	0f 85 c6 00 00 00    	jne    c0004071 <dir_find+0x19f>
c0003fab:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fae:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fb1:	84 c9                	test   cl,cl
c0003fb3:	0f 84 bd 00 00 00    	je     c0004076 <dir_find+0x1a4>
c0003fb9:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fbc:	88 d0                	mov    al,dl
c0003fbe:	83 e0 3f             	and    eax,0x3f
c0003fc1:	80 f9 e5             	cmp    cl,0xe5
c0003fc4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fc7:	0f 84 87 00 00 00    	je     c0004054 <dir_find+0x182>
c0003fcd:	80 e2 08             	and    dl,0x8
c0003fd0:	74 06                	je     c0003fd8 <dir_find+0x106>
c0003fd2:	3c 0f                	cmp    al,0xf
c0003fd4:	75 7e                	jne    c0004054 <dir_find+0x182>
c0003fd6:	eb 04                	jmp    c0003fdc <dir_find+0x10a>
c0003fd8:	3c 0f                	cmp    al,0xf
c0003fda:	75 4c                	jne    c0004028 <dir_find+0x156>
c0003fdc:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fe0:	75 7e                	jne    c0004060 <dir_find+0x18e>
c0003fe2:	f6 c1 40             	test   cl,0x40
c0003fe5:	74 12                	je     c0003ff9 <dir_find+0x127>
c0003fe7:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fea:	83 e1 bf             	and    ecx,0xffffffbf
c0003fed:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003ff1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ff4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ff7:	eb 06                	jmp    c0003fff <dir_find+0x12d>
c0003ff9:	89 f8                	mov    eax,edi
c0003ffb:	38 c8                	cmp    al,cl
c0003ffd:	75 5c                	jne    c000405b <dir_find+0x189>
c0003fff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004003:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004008:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000400b:	75 53                	jne    c0004060 <dir_find+0x18e>
c000400d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004011:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004014:	89 ea                	mov    edx,ebp
c0004016:	e8 f4 fd ff ff       	call   c0003e0f <cmp_lfn>
c000401b:	85 c0                	test   eax,eax
c000401d:	74 41                	je     c0004060 <dir_find+0x18e>
c000401f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004023:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004026:	eb 38                	jmp    c0004060 <dir_find+0x18e>
c0004028:	89 f8                	mov    eax,edi
c000402a:	84 c0                	test   al,al
c000402c:	75 0d                	jne    c000403b <dir_find+0x169>
c000402e:	89 e8                	mov    eax,ebp
c0004030:	e8 98 de ff ff       	call   c0001ecd <sum_sfn>
c0004035:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004039:	74 52                	je     c000408d <dir_find+0x1bb>
c000403b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000403f:	75 13                	jne    c0004054 <dir_find+0x182>
c0004041:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004044:	b9 0b 00 00 00       	mov    ecx,0xb
c0004049:	89 e8                	mov    eax,ebp
c000404b:	e8 60 da ff ff       	call   c0001ab0 <mem_cmp>
c0004050:	85 c0                	test   eax,eax
c0004052:	74 39                	je     c000408d <dir_find+0x1bb>
c0004054:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000405b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004060:	31 d2                	xor    edx,edx
c0004062:	89 d8                	mov    eax,ebx
c0004064:	e8 5c f4 ff ff       	call   c00034c5 <dir_next>
c0004069:	85 c0                	test   eax,eax
c000406b:	0f 84 25 ff ff ff    	je     c0003f96 <dir_find+0xc4>
c0004071:	89 04 24             	mov    DWORD PTR [esp],eax
c0004074:	eb 17                	jmp    c000408d <dir_find+0x1bb>
c0004076:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000407d:	eb 0e                	jmp    c000408d <dir_find+0x1bb>
c000407f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004082:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004087:	0f 85 75 fe ff ff    	jne    c0003f02 <dir_find+0x30>
c000408d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004090:	83 c4 1c             	add    esp,0x1c
c0004093:	5b                   	pop    ebx
c0004094:	5e                   	pop    esi
c0004095:	5f                   	pop    edi
c0004096:	5d                   	pop    ebp
c0004097:	c3                   	ret    

c0004098 <dir_register>:
c0004098:	55                   	push   ebp
c0004099:	57                   	push   edi
c000409a:	56                   	push   esi
c000409b:	be 06 00 00 00       	mov    esi,0x6
c00040a0:	53                   	push   ebx
c00040a1:	83 ec 6c             	sub    esp,0x6c
c00040a4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040a8:	0f 85 62 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ae:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040b0:	31 ff                	xor    edi,edi
c00040b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040b5:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ba:	74 03                	je     c00040bf <dir_register+0x27>
c00040bc:	47                   	inc    edi
c00040bd:	eb f6                	jmp    c00040b5 <dir_register+0x1d>
c00040bf:	89 c3                	mov    ebx,eax
c00040c1:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040c5:	0f 85 e1 00 00 00    	jne    c00041ac <dir_register+0x114>
c00040cb:	83 c7 0e             	add    edi,0xe
c00040ce:	b9 0f 00 00 00       	mov    ecx,0xf
c00040d3:	89 f8                	mov    eax,edi
c00040d5:	31 d2                	xor    edx,edx
c00040d7:	f7 f1                	div    ecx
c00040d9:	8d 50 02             	lea    edx,[eax+0x2]
c00040dc:	89 c7                	mov    edi,eax
c00040de:	89 d8                	mov    eax,ebx
c00040e0:	e8 12 f8 ff ff       	call   c00038f7 <dir_alloc>
c00040e5:	89 c6                	mov    esi,eax
c00040e7:	85 c0                	test   eax,eax
c00040e9:	0f 85 21 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ef:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040f5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040f8:	c1 e7 05             	shl    edi,0x5
c00040fb:	29 f8                	sub    eax,edi
c00040fd:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004100:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004103:	a8 04                	test   al,0x4
c0004105:	0f 84 91 00 00 00    	je     c000419c <dir_register+0x104>
c000410b:	83 e0 fb             	and    eax,0xfffffffb
c000410e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004111:	89 d8                	mov    eax,ebx
c0004113:	e8 25 ec ff ff       	call   c0002d3d <fill_first_frag>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 ee 01 00 00    	jne    c000430e <dir_register+0x276>
c0004120:	83 c9 ff             	or     ecx,0xffffffff
c0004123:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004126:	89 d8                	mov    eax,ebx
c0004128:	e8 db eb ff ff       	call   c0002d08 <fill_last_frag>
c000412d:	85 c0                	test   eax,eax
c000412f:	0f 85 d9 01 00 00    	jne    c000430e <dir_register+0x276>
c0004135:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004139:	74 61                	je     c000419c <dir_register+0x104>
c000413b:	89 da                	mov    edx,ebx
c000413d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004141:	e8 ea f5 ff ff       	call   c0003730 <load_obj_xdir>
c0004146:	85 c0                	test   eax,eax
c0004148:	0f 85 c0 01 00 00    	jne    c000430e <dir_register+0x276>
c000414e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004152:	31 c9                	xor    ecx,ecx
c0004154:	c1 e2 09             	shl    edx,0x9
c0004157:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000415a:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000415d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004160:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004163:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004166:	83 c0 38             	add    eax,0x38
c0004169:	e8 1c d9 ff ff       	call   c0001a8a <st_qword>
c000416e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004171:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004174:	83 c0 28             	add    eax,0x28
c0004177:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000417a:	e8 0b d9 ff ff       	call   c0001a8a <st_qword>
c000417f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004182:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004185:	83 c8 01             	or     eax,0x1
c0004188:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000418b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000418f:	e8 db f7 ff ff       	call   c000396f <store_xdir>
c0004194:	85 c0                	test   eax,eax
c0004196:	0f 85 72 01 00 00    	jne    c000430e <dir_register+0x276>
c000419c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000419f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a2:	e8 c1 fb ff ff       	call   c0003d68 <create_xdir>
c00041a7:	e9 64 01 00 00       	jmp    c0004310 <dir_register+0x278>
c00041ac:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041af:	b9 0c 00 00 00       	mov    ecx,0xc
c00041b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041b8:	89 c2                	mov    edx,eax
c00041ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041be:	e8 cd d8 ff ff       	call   c0001a90 <mem_cpy>
c00041c3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041c8:	74 58                	je     c0004222 <dir_register+0x18a>
c00041ca:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041ce:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041d6:	83 ec 0c             	sub    esp,0xc
c00041d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041e0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041e8:	e8 24 dc ff ff       	call   c0001e11 <gen_numname>
c00041ed:	89 d8                	mov    eax,ebx
c00041ef:	e8 de fc ff ff       	call   c0003ed2 <dir_find>
c00041f4:	83 c4 10             	add    esp,0x10
c00041f7:	89 c6                	mov    esi,eax
c00041f9:	85 c0                	test   eax,eax
c00041fb:	75 15                	jne    c0004212 <dir_register+0x17a>
c00041fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004201:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004206:	75 ce                	jne    c00041d6 <dir_register+0x13e>
c0004208:	be 07 00 00 00       	mov    esi,0x7
c000420d:	e9 fe 00 00 00       	jmp    c0004310 <dir_register+0x278>
c0004212:	83 f8 04             	cmp    eax,0x4
c0004215:	0f 85 f5 00 00 00    	jne    c0004310 <dir_register+0x278>
c000421b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000421f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004222:	b9 01 00 00 00       	mov    ecx,0x1
c0004227:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000422c:	74 0f                	je     c000423d <dir_register+0x1a5>
c000422e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004233:	8d 47 0c             	lea    eax,[edi+0xc]
c0004236:	31 d2                	xor    edx,edx
c0004238:	f7 f1                	div    ecx
c000423a:	8d 48 01             	lea    ecx,[eax+0x1]
c000423d:	89 ca                	mov    edx,ecx
c000423f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004243:	89 d8                	mov    eax,ebx
c0004245:	e8 ad f6 ff ff       	call   c00038f7 <dir_alloc>
c000424a:	89 c6                	mov    esi,eax
c000424c:	85 c0                	test   eax,eax
c000424e:	0f 85 bc 00 00 00    	jne    c0004310 <dir_register+0x278>
c0004254:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004258:	49                   	dec    ecx
c0004259:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000425d:	74 6a                	je     c00042c9 <dir_register+0x231>
c000425f:	89 c8                	mov    eax,ecx
c0004261:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004264:	c1 e0 05             	shl    eax,0x5
c0004267:	29 c2                	sub    edx,eax
c0004269:	89 d8                	mov    eax,ebx
c000426b:	e8 fd ec ff ff       	call   c0002f6d <dir_sdi>
c0004270:	89 c6                	mov    esi,eax
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 96 00 00 00    	jne    c0004310 <dir_register+0x278>
c000427a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000427e:	e8 4a dc ff ff       	call   c0001ecd <sum_sfn>
c0004283:	0f b6 f8             	movzx  edi,al
c0004286:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004289:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000428c:	89 e8                	mov    eax,ebp
c000428e:	e8 5c df ff ff       	call   c00021ef <move_window>
c0004293:	89 c6                	mov    esi,eax
c0004295:	85 c0                	test   eax,eax
c0004297:	75 77                	jne    c0004310 <dir_register+0x278>
c0004299:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000429e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042a1:	83 ec 0c             	sub    esp,0xc
c00042a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042a7:	57                   	push   edi
c00042a8:	e8 e0 da ff ff       	call   c0001d8d <put_lfn>
c00042ad:	31 d2                	xor    edx,edx
c00042af:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042b3:	89 d8                	mov    eax,ebx
c00042b5:	e8 0b f2 ff ff       	call   c00034c5 <dir_next>
c00042ba:	83 c4 10             	add    esp,0x10
c00042bd:	89 c6                	mov    esi,eax
c00042bf:	85 c0                	test   eax,eax
c00042c1:	75 4d                	jne    c0004310 <dir_register+0x278>
c00042c3:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042c7:	75 bd                	jne    c0004286 <dir_register+0x1ee>
c00042c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042cc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042cf:	89 e8                	mov    eax,ebp
c00042d1:	e8 19 df ff ff       	call   c00021ef <move_window>
c00042d6:	89 c6                	mov    esi,eax
c00042d8:	85 c0                	test   eax,eax
c00042da:	75 34                	jne    c0004310 <dir_register+0x278>
c00042dc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042df:	b9 20 00 00 00       	mov    ecx,0x20
c00042e4:	31 d2                	xor    edx,edx
c00042e6:	e8 ba d7 ff ff       	call   c0001aa5 <mem_set>
c00042eb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042f2:	b9 0b 00 00 00       	mov    ecx,0xb
c00042f7:	e8 94 d7 ff ff       	call   c0001a90 <mem_cpy>
c00042fc:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042ff:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004302:	83 e0 18             	and    eax,0x18
c0004305:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004308:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000430c:	eb 02                	jmp    c0004310 <dir_register+0x278>
c000430e:	89 c6                	mov    esi,eax
c0004310:	83 c4 6c             	add    esp,0x6c
c0004313:	89 f0                	mov    eax,esi
c0004315:	5b                   	pop    ebx
c0004316:	5e                   	pop    esi
c0004317:	5f                   	pop    edi
c0004318:	5d                   	pop    ebp
c0004319:	c3                   	ret    

c000431a <sync_fs>:
c000431a:	56                   	push   esi
c000431b:	53                   	push   ebx
c000431c:	53                   	push   ebx
c000431d:	89 c3                	mov    ebx,eax
c000431f:	e8 37 de ff ff       	call   c000215b <sync_window>
c0004324:	85 c0                	test   eax,eax
c0004326:	0f 85 b1 00 00 00    	jne    c00043dd <sync_fs+0xc3>
c000432c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000432f:	0f 85 8e 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c0004335:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004339:	0f 85 84 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c000433f:	b9 00 02 00 00       	mov    ecx,0x200
c0004344:	8d 73 54             	lea    esi,[ebx+0x54]
c0004347:	31 d2                	xor    edx,edx
c0004349:	89 f0                	mov    eax,esi
c000434b:	e8 55 d7 ff ff       	call   c0001aa5 <mem_set>
c0004350:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004356:	ba 55 aa 00 00       	mov    edx,0xaa55
c000435b:	e8 23 d7 ff ff       	call   c0001a83 <st_word>
c0004360:	ba 52 52 61 41       	mov    edx,0x41615252
c0004365:	89 f0                	mov    eax,esi
c0004367:	e8 1b d7 ff ff       	call   c0001a87 <st_dword>
c000436c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004372:	ba 72 72 41 61       	mov    edx,0x61417272
c0004377:	e8 0b d7 ff ff       	call   c0001a87 <st_dword>
c000437c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000437f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004385:	e8 fd d6 ff ff       	call   c0001a87 <st_dword>
c000438a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000438d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004393:	e8 ef d6 ff ff       	call   c0001a87 <st_dword>
c0004398:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000439b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000439e:	83 c0 01             	add    eax,0x1
c00043a1:	83 d2 00             	adc    edx,0x0
c00043a4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043a7:	83 ec 0c             	sub    esp,0xc
c00043aa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043ad:	6a 01                	push   0x1
c00043af:	52                   	push   edx
c00043b0:	50                   	push   eax
c00043b1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b5:	56                   	push   esi
c00043b6:	50                   	push   eax
c00043b7:	e8 20 d6 ff ff       	call   c00019dc <disk_write>
c00043bc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043c0:	83 c4 20             	add    esp,0x20
c00043c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c7:	51                   	push   ecx
c00043c8:	6a 00                	push   0x0
c00043ca:	6a 00                	push   0x0
c00043cc:	50                   	push   eax
c00043cd:	e8 20 d6 ff ff       	call   c00019f2 <disk_ioctl>
c00043d2:	83 c4 10             	add    esp,0x10
c00043d5:	85 c0                	test   eax,eax
c00043d7:	0f 95 c0             	setne  al
c00043da:	0f b6 c0             	movzx  eax,al
c00043dd:	5a                   	pop    edx
c00043de:	5b                   	pop    ebx
c00043df:	5e                   	pop    esi
c00043e0:	c3                   	ret    

c00043e1 <create_partition>:
c00043e1:	55                   	push   ebp
c00043e2:	0f b6 c0             	movzx  eax,al
c00043e5:	57                   	push   edi
c00043e6:	56                   	push   esi
c00043e7:	53                   	push   ebx
c00043e8:	83 ec 60             	sub    esp,0x60
c00043eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ef:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043f3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043f7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043fb:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043ff:	50                   	push   eax
c0004400:	6a 01                	push   0x1
c0004402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004406:	e8 e7 d5 ff ff       	call   c00019f2 <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	74 0a                	je     c000441c <create_partition+0x3b>
c0004412:	b8 01 00 00 00       	mov    eax,0x1
c0004417:	e9 67 05 00 00       	jmp    c0004983 <create_partition+0x5a2>
c000441c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004420:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004424:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004428:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000442c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004431:	0f 86 ed 03 00 00    	jbe    c0004824 <create_partition+0x443>
c0004437:	83 c0 df             	add    eax,0xffffffdf
c000443a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004442:	83 d2 ff             	adc    edx,0xffffffff
c0004445:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004449:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000444d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004455:	83 c0 bd             	add    eax,0xffffffbd
c0004458:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000445f:	83 d2 ff             	adc    edx,0xffffffff
c0004462:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004466:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000446a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004472:	be 22 00 00 00       	mov    esi,0x22
c0004477:	31 ff                	xor    edi,edi
c0004479:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004481:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004489:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004491:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004495:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000449b:	75 0e                	jne    c00044ab <create_partition+0xca>
c000449d:	b9 00 02 00 00       	mov    ecx,0x200
c00044a2:	31 d2                	xor    edx,edx
c00044a4:	89 d8                	mov    eax,ebx
c00044a6:	e8 fa d5 ff ff       	call   c0001aa5 <mem_set>
c00044ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044b7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ba:	0f 84 23 01 00 00    	je     c00045e3 <create_partition+0x202>
c00044c0:	89 f0                	mov    eax,esi
c00044c2:	89 fa                	mov    edx,edi
c00044c4:	05 ff 07 00 00       	add    eax,0x7ff
c00044c9:	83 d2 00             	adc    edx,0x0
c00044cc:	89 c1                	mov    ecx,eax
c00044ce:	89 d7                	mov    edi,edx
c00044d0:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044da:	89 ce                	mov    esi,ecx
c00044dc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044e4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044e8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f2:	b8 64 00 00 00       	mov    eax,0x64
c00044f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044fa:	b8 00 00 00 00       	mov    eax,0x0
c00044ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004503:	72 41                	jb     c0004546 <create_partition+0x165>
c0004505:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004511:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004516:	01 c1                	add    ecx,eax
c0004518:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000451c:	f7 24 24             	mul    DWORD PTR [esp]
c000451f:	6a 00                	push   0x0
c0004521:	01 ca                	add    edx,ecx
c0004523:	6a 64                	push   0x64
c0004525:	52                   	push   edx
c0004526:	50                   	push   eax
c0004527:	e8 00 02 02 00       	call   c002472c <__udivdi3>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	05 ff 07 00 00       	add    eax,0x7ff
c0004534:	83 d2 00             	adc    edx,0x0
c0004537:	89 c1                	mov    ecx,eax
c0004539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000453d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004543:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004546:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000454d:	01 f0                	add    eax,esi
c000454f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004553:	11 fa                	adc    edx,edi
c0004555:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004559:	19 d1                	sbb    ecx,edx
c000455b:	73 2e                	jae    c000458b <create_partition+0x1aa>
c000455d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004561:	89 f8                	mov    eax,edi
c0004563:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000456a:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000456e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004576:	73 6b                	jae    c00045e3 <create_partition+0x202>
c0004578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000457c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004580:	29 f0                	sub    eax,esi
c0004582:	19 fa                	sbb    edx,edi
c0004584:	89 04 24             	mov    DWORD PTR [esp],eax
c0004587:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000458b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000458f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004592:	74 4f                	je     c00045e3 <create_partition+0x202>
c0004594:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004597:	b9 10 00 00 00       	mov    ecx,0x10
c000459c:	ba 70 71 02 c0       	mov    edx,0xc0027170
c00045a1:	e8 ea d4 ff ff       	call   c0001a90 <mem_cpy>
c00045a6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045aa:	b9 10 00 00 00       	mov    ecx,0x10
c00045af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045b3:	e8 2c db ff ff       	call   c00020e4 <make_rand>
c00045b8:	89 f2                	mov    edx,esi
c00045ba:	89 f9                	mov    ecx,edi
c00045bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045c0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045c4:	e8 c1 d4 ff ff       	call   c0001a8a <st_qword>
c00045c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045cc:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045d0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045d4:	89 f2                	mov    edx,esi
c00045d6:	89 f9                	mov    ecx,edi
c00045d8:	83 c2 ff             	add    edx,0xffffffff
c00045db:	83 d1 ff             	adc    ecx,0xffffffff
c00045de:	e8 a7 d4 ff ff       	call   c0001a8a <st_qword>
c00045e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045e7:	83 e8 80             	sub    eax,0xffffff80
c00045ea:	89 c5                	mov    ebp,eax
c00045ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f6:	75 6b                	jne    c0004663 <create_partition+0x282>
c00045f8:	45                   	inc    ebp
c00045f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045fd:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004602:	e8 39 da ff ff       	call   c0002040 <crc32>
c0004607:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000460d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004611:	75 e5                	jne    c00045f8 <create_partition+0x217>
c0004613:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004617:	31 d2                	xor    edx,edx
c0004619:	83 ec 0c             	sub    esp,0xc
c000461c:	c1 ed 09             	shr    ebp,0x9
c000461f:	6a 01                	push   0x1
c0004621:	8d 45 02             	lea    eax,[ebp+0x2]
c0004624:	52                   	push   edx
c0004625:	50                   	push   eax
c0004626:	53                   	push   ebx
c0004627:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000462b:	e8 ac d3 ff ff       	call   c00019dc <disk_write>
c0004630:	83 c4 20             	add    esp,0x20
c0004633:	85 c0                	test   eax,eax
c0004635:	0f 85 d7 fd ff ff    	jne    c0004412 <create_partition+0x31>
c000463b:	83 ec 0c             	sub    esp,0xc
c000463e:	31 d2                	xor    edx,edx
c0004640:	6a 01                	push   0x1
c0004642:	89 e8                	mov    eax,ebp
c0004644:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004648:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000464c:	52                   	push   edx
c000464d:	50                   	push   eax
c000464e:	53                   	push   ebx
c000464f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004653:	e8 84 d3 ff ff       	call   c00019dc <disk_write>
c0004658:	83 c4 20             	add    esp,0x20
c000465b:	85 c0                	test   eax,eax
c000465d:	0f 85 af fd ff ff    	jne    c0004412 <create_partition+0x31>
c0004663:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004667:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000466b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004670:	74 0d                	je     c000467f <create_partition+0x29e>
c0004672:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004676:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000467a:	e9 12 fe ff ff       	jmp    c0004491 <create_partition+0xb0>
c000467f:	31 d2                	xor    edx,edx
c0004681:	b9 00 02 00 00       	mov    ecx,0x200
c0004686:	89 d8                	mov    eax,ebx
c0004688:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000468b:	e8 15 d4 ff ff       	call   c0001aa5 <mem_set>
c0004690:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004693:	b9 10 00 00 00       	mov    ecx,0x10
c0004698:	ba 60 70 02 c0       	mov    edx,0xc0027060
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 ec d3 ff ff       	call   c0001a90 <mem_cpy>
c00046a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046a8:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ab:	f7 d2                	not    edx
c00046ad:	e8 d5 d3 ff ff       	call   c0001a87 <st_dword>
c00046b2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046b5:	31 c9                	xor    ecx,ecx
c00046b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ba:	ba 01 00 00 00       	mov    edx,0x1
c00046bf:	e8 c6 d3 ff ff       	call   c0001a8a <st_qword>
c00046c4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046c8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046cc:	83 c2 ff             	add    edx,0xffffffff
c00046cf:	89 e8                	mov    eax,ebp
c00046d1:	83 d1 ff             	adc    ecx,0xffffffff
c00046d4:	e8 b1 d3 ff ff       	call   c0001a8a <st_qword>
c00046d9:	31 c9                	xor    ecx,ecx
c00046db:	8d 43 28             	lea    eax,[ebx+0x28]
c00046de:	ba 22 00 00 00       	mov    edx,0x22
c00046e3:	e8 a2 d3 ff ff       	call   c0001a8a <st_qword>
c00046e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046f0:	83 c2 de             	add    edx,0xffffffde
c00046f3:	8d 43 30             	lea    eax,[ebx+0x30]
c00046f6:	83 d1 ff             	adc    ecx,0xffffffff
c00046f9:	31 f6                	xor    esi,esi
c00046fb:	e8 8a d3 ff ff       	call   c0001a8a <st_qword>
c0004700:	8d 43 54             	lea    eax,[ebx+0x54]
c0004703:	ba 80 00 00 00       	mov    edx,0x80
c0004708:	e8 7a d3 ff ff       	call   c0001a87 <st_dword>
c000470d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004710:	ba 80 00 00 00       	mov    edx,0x80
c0004715:	e8 6d d3 ff ff       	call   c0001a87 <st_dword>
c000471a:	ba 02 00 00 00       	mov    edx,0x2
c000471f:	89 f8                	mov    eax,edi
c0004721:	e8 61 d3 ff ff       	call   c0001a87 <st_dword>
c0004726:	8d 53 38             	lea    edx,[ebx+0x38]
c0004729:	b9 10 00 00 00       	mov    ecx,0x10
c000472e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004732:	e8 ad d9 ff ff       	call   c00020e4 <make_rand>
c0004737:	83 c8 ff             	or     eax,0xffffffff
c000473a:	46                   	inc    esi
c000473b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004740:	e8 fb d8 ff ff       	call   c0002040 <crc32>
c0004745:	83 fe 5c             	cmp    esi,0x5c
c0004748:	75 f0                	jne    c000473a <create_partition+0x359>
c000474a:	f7 d0                	not    eax
c000474c:	8d 73 10             	lea    esi,[ebx+0x10]
c000474f:	89 c2                	mov    edx,eax
c0004751:	89 f0                	mov    eax,esi
c0004753:	e8 2f d3 ff ff       	call   c0001a87 <st_dword>
c0004758:	83 ec 0c             	sub    esp,0xc
c000475b:	6a 01                	push   0x1
c000475d:	6a 00                	push   0x0
c000475f:	6a 01                	push   0x1
c0004761:	53                   	push   ebx
c0004762:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004766:	e8 71 d2 ff ff       	call   c00019dc <disk_write>
c000476b:	83 c4 20             	add    esp,0x20
c000476e:	85 c0                	test   eax,eax
c0004770:	0f 85 9c fc ff ff    	jne    c0004412 <create_partition+0x31>
c0004776:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000477a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000477e:	83 c2 ff             	add    edx,0xffffffff
c0004781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004784:	83 d1 ff             	adc    ecx,0xffffffff
c0004787:	e8 fe d2 ff ff       	call   c0001a8a <st_qword>
c000478c:	ba 01 00 00 00       	mov    edx,0x1
c0004791:	31 c9                	xor    ecx,ecx
c0004793:	89 e8                	mov    eax,ebp
c0004795:	e8 f0 d2 ff ff       	call   c0001a8a <st_qword>
c000479a:	89 f8                	mov    eax,edi
c000479c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a4:	31 ff                	xor    edi,edi
c00047a6:	e8 df d2 ff ff       	call   c0001a8a <st_qword>
c00047ab:	89 f0                	mov    eax,esi
c00047ad:	31 d2                	xor    edx,edx
c00047af:	e8 d3 d2 ff ff       	call   c0001a87 <st_dword>
c00047b4:	83 c8 ff             	or     eax,0xffffffff
c00047b7:	47                   	inc    edi
c00047b8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047bd:	e8 7e d8 ff ff       	call   c0002040 <crc32>
c00047c2:	83 ff 5c             	cmp    edi,0x5c
c00047c5:	75 f0                	jne    c00047b7 <create_partition+0x3d6>
c00047c7:	f7 d0                	not    eax
c00047c9:	89 c2                	mov    edx,eax
c00047cb:	89 f0                	mov    eax,esi
c00047cd:	e8 b5 d2 ff ff       	call   c0001a87 <st_dword>
c00047d2:	83 ec 0c             	sub    esp,0xc
c00047d5:	6a 01                	push   0x1
c00047d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047db:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047df:	83 c0 ff             	add    eax,0xffffffff
c00047e2:	83 d2 ff             	adc    edx,0xffffffff
c00047e5:	52                   	push   edx
c00047e6:	50                   	push   eax
c00047e7:	53                   	push   ebx
c00047e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ec:	e8 eb d1 ff ff       	call   c00019dc <disk_write>
c00047f1:	83 c4 20             	add    esp,0x20
c00047f4:	85 c0                	test   eax,eax
c00047f6:	0f 85 16 fc ff ff    	jne    c0004412 <create_partition+0x31>
c00047fc:	31 d2                	xor    edx,edx
c00047fe:	89 d8                	mov    eax,ebx
c0004800:	b9 00 02 00 00       	mov    ecx,0x200
c0004805:	e8 9b d2 ff ff       	call   c0001aa5 <mem_set>
c000480a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004810:	b9 10 00 00 00       	mov    ecx,0x10
c0004815:	ba 70 70 02 c0       	mov    edx,0xc0027070
c000481a:	e8 71 d2 ff ff       	call   c0001a90 <mem_cpy>
c000481f:	e9 21 01 00 00       	jmp    c0004945 <create_partition+0x564>
c0004824:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004828:	b9 05 00 00 00       	mov    ecx,0x5
c000482d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004830:	bf 08 00 00 00       	mov    edi,0x8
c0004835:	89 f8                	mov    eax,edi
c0004837:	31 d2                	xor    edx,edx
c0004839:	0f b6 f0             	movzx  esi,al
c000483c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000483f:	f7 f6                	div    esi
c0004841:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004846:	76 0a                	jbe    c0004852 <create_partition+0x471>
c0004848:	d1 e7                	shl    edi,1
c000484a:	49                   	dec    ecx
c000484b:	75 e8                	jne    c0004835 <create_partition+0x454>
c000484d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004852:	b9 00 02 00 00       	mov    ecx,0x200
c0004857:	31 d2                	xor    edx,edx
c0004859:	89 d8                	mov    eax,ebx
c000485b:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004861:	e8 3f d2 ff ff       	call   c0001aa5 <mem_set>
c0004866:	b9 64 00 00 00       	mov    ecx,0x64
c000486b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000486e:	31 d2                	xor    edx,edx
c0004870:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004878:	f7 f1                	div    ecx
c000487a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000487f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004883:	89 f8                	mov    eax,edi
c0004885:	0f b6 c0             	movzx  eax,al
c0004888:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000488c:	e9 80 00 00 00       	jmp    c0004911 <create_partition+0x530>
c0004891:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004894:	29 cf                	sub    edi,ecx
c0004896:	89 ca                	mov    edx,ecx
c0004898:	89 f0                	mov    eax,esi
c000489a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000489f:	e8 e3 d1 ff ff       	call   c0001a87 <st_dword>
c00048a4:	8d 46 04             	lea    eax,[esi+0x4]
c00048a7:	89 fa                	mov    edx,edi
c00048a9:	83 c6 10             	add    esi,0x10
c00048ac:	e8 d6 d1 ff ff       	call   c0001a87 <st_dword>
c00048b1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048b5:	31 d2                	xor    edx,edx
c00048b7:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ba:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048be:	89 c8                	mov    eax,ecx
c00048c0:	01 f9                	add    ecx,edi
c00048c2:	f7 f5                	div    ebp
c00048c4:	89 d5                	mov    ebp,edx
c00048c6:	31 d2                	xor    edx,edx
c00048c8:	45                   	inc    ebp
c00048c9:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048cd:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048d0:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048d3:	89 c2                	mov    edx,eax
c00048d5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048d8:	c1 ea 02             	shr    edx,0x2
c00048db:	83 e2 c0             	and    edx,0xffffffc0
c00048de:	09 ea                	or     edx,ebp
c00048e0:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048e5:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048e8:	31 d2                	xor    edx,edx
c00048ea:	f7 f5                	div    ebp
c00048ec:	89 d7                	mov    edi,edx
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	47                   	inc    edi
c00048f1:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048f5:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048f8:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048fb:	89 c5                	mov    ebp,eax
c00048fd:	c1 ed 02             	shr    ebp,0x2
c0004900:	83 e5 c0             	and    ebp,0xffffffc0
c0004903:	09 ef                	or     edi,ebp
c0004905:	89 fa                	mov    edx,edi
c0004907:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000490a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000490f:	74 34                	je     c0004945 <create_partition+0x564>
c0004911:	85 c9                	test   ecx,ecx
c0004913:	74 30                	je     c0004945 <create_partition+0x564>
c0004915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004918:	76 2b                	jbe    c0004945 <create_partition+0x564>
c000491a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000491e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004922:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004925:	83 ff 64             	cmp    edi,0x64
c0004928:	76 4b                	jbe    c0004975 <create_partition+0x594>
c000492a:	89 f8                	mov    eax,edi
c000492c:	01 c8                	add    eax,ecx
c000492e:	0f 82 5d ff ff ff    	jb     c0004891 <create_partition+0x4b0>
c0004934:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004937:	0f 87 54 ff ff ff    	ja     c0004891 <create_partition+0x4b0>
c000493d:	85 ff                	test   edi,edi
c000493f:	0f 85 51 ff ff ff    	jne    c0004896 <create_partition+0x4b5>
c0004945:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000494b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004950:	e8 2e d1 ff ff       	call   c0001a83 <st_word>
c0004955:	83 ec 0c             	sub    esp,0xc
c0004958:	6a 01                	push   0x1
c000495a:	6a 00                	push   0x0
c000495c:	6a 00                	push   0x0
c000495e:	53                   	push   ebx
c000495f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004963:	e8 74 d0 ff ff       	call   c00019dc <disk_write>
c0004968:	83 c4 20             	add    esp,0x20
c000496b:	85 c0                	test   eax,eax
c000496d:	0f 95 c0             	setne  al
c0004970:	0f b6 c0             	movzx  eax,al
c0004973:	eb 0e                	jmp    c0004983 <create_partition+0x5a2>
c0004975:	74 07                	je     c000497e <create_partition+0x59d>
c0004977:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000497c:	eb ac                	jmp    c000492a <create_partition+0x549>
c000497e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004981:	eb a7                	jmp    c000492a <create_partition+0x549>
c0004983:	83 c4 5c             	add    esp,0x5c
c0004986:	5b                   	pop    ebx
c0004987:	5e                   	pop    esi
c0004988:	5f                   	pop    edi
c0004989:	5d                   	pop    ebp
c000498a:	c3                   	ret    

c000498b <get_fileinfo>:
c000498b:	55                   	push   ebp
c000498c:	57                   	push   edi
c000498d:	56                   	push   esi
c000498e:	53                   	push   ebx
c000498f:	83 ec 1c             	sub    esp,0x1c
c0004992:	8b 30                	mov    esi,DWORD PTR [eax]
c0004994:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004998:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000499c:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000499f:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049a2:	0f 84 dc 01 00 00    	je     c0004b84 <get_fileinfo+0x1f9>
c00049a8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049ab:	75 0f                	jne    c00049bc <get_fileinfo+0x31>
c00049ad:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049b0:	83 c4 1c             	add    esp,0x1c
c00049b3:	5b                   	pop    ebx
c00049b4:	5e                   	pop    esi
c00049b5:	5f                   	pop    edi
c00049b6:	5d                   	pop    ebp
c00049b7:	e9 58 d5 ff ff       	jmp    c0001f14 <get_xfileinfo>
c00049bc:	89 d3                	mov    ebx,edx
c00049be:	89 c6                	mov    esi,eax
c00049c0:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049c4:	74 6a                	je     c0004a30 <get_fileinfo+0xa5>
c00049c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ce:	31 ed                	xor    ebp,ebp
c00049d0:	31 ff                	xor    edi,edi
c00049d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049dd:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049e1:	66 85 d2             	test   dx,dx
c00049e4:	74 3e                	je     c0004a24 <get_fileinfo+0x99>
c00049e6:	66 85 ed             	test   bp,bp
c00049e9:	75 0c                	jne    c00049f7 <get_fileinfo+0x6c>
c00049eb:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049f1:	66 3d ff 07          	cmp    ax,0x7ff
c00049f5:	76 22                	jbe    c0004a19 <get_fileinfo+0x8e>
c00049f7:	b9 ff 00 00 00       	mov    ecx,0xff
c00049fc:	89 e8                	mov    eax,ebp
c00049fe:	29 f9                	sub    ecx,edi
c0004a00:	c1 e0 10             	shl    eax,0x10
c0004a03:	09 d0                	or     eax,edx
c0004a05:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a09:	e8 a3 d1 ff ff       	call   c0001bb1 <put_utf>
c0004a0e:	84 c0                	test   al,al
c0004a10:	74 10                	je     c0004a22 <get_fileinfo+0x97>
c0004a12:	0f b6 c0             	movzx  eax,al
c0004a15:	31 d2                	xor    edx,edx
c0004a17:	01 c7                	add    edi,eax
c0004a19:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	eb b0                	jmp    c00049d2 <get_fileinfo+0x47>
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	66 85 ed             	test   bp,bp
c0004a27:	74 02                	je     c0004a2b <get_fileinfo+0xa0>
c0004a29:	31 ff                	xor    edi,edi
c0004a2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a30:	31 ff                	xor    edi,edi
c0004a32:	31 c9                	xor    ecx,ecx
c0004a34:	83 f9 0a             	cmp    ecx,0xa
c0004a37:	0f 87 ad 00 00 00    	ja     c0004aea <get_fileinfo+0x15f>
c0004a3d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a40:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a43:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a47:	66 83 fa 20          	cmp    dx,0x20
c0004a4b:	0f 84 92 00 00 00    	je     c0004ae3 <get_fileinfo+0x158>
c0004a51:	66 83 fa 05          	cmp    dx,0x5
c0004a55:	75 05                	jne    c0004a5c <get_fileinfo+0xd1>
c0004a57:	ba e5 00 00 00       	mov    edx,0xe5
c0004a5c:	83 ff 0b             	cmp    edi,0xb
c0004a5f:	77 0b                	ja     c0004a6c <get_fileinfo+0xe1>
c0004a61:	83 fd 09             	cmp    ebp,0x9
c0004a64:	75 06                	jne    c0004a6c <get_fileinfo+0xe1>
c0004a66:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a6b:	47                   	inc    edi
c0004a6c:	0f b7 c2             	movzx  eax,dx
c0004a6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a73:	e8 6d d0 ff ff       	call   c0001ae5 <dbc_1st>
c0004a78:	85 c0                	test   eax,eax
c0004a7a:	74 2f                	je     c0004aab <get_fileinfo+0x120>
c0004a7c:	83 fd 08             	cmp    ebp,0x8
c0004a7f:	74 2a                	je     c0004aab <get_fileinfo+0x120>
c0004a81:	83 fd 0b             	cmp    ebp,0xb
c0004a84:	74 25                	je     c0004aab <get_fileinfo+0x120>
c0004a86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a89:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a8d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a91:	e8 52 d0 ff ff       	call   c0001ae8 <dbc_2nd>
c0004a96:	85 c0                	test   eax,eax
c0004a98:	74 11                	je     c0004aab <get_fileinfo+0x120>
c0004a9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004aa3:	c1 e2 08             	shl    edx,0x8
c0004aa6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004aa9:	09 c2                	or     edx,eax
c0004aab:	0f b7 d2             	movzx  edx,dx
c0004aae:	50                   	push   eax
c0004aaf:	50                   	push   eax
c0004ab0:	68 b5 01 00 00       	push   0x1b5
c0004ab5:	52                   	push   edx
c0004ab6:	e8 46 38 00 00       	call   c0008301 <ff_oem2uni>
c0004abb:	83 c4 10             	add    esp,0x10
c0004abe:	66 85 c0             	test   ax,ax
c0004ac1:	75 04                	jne    c0004ac7 <get_fileinfo+0x13c>
c0004ac3:	31 ff                	xor    edi,edi
c0004ac5:	eb 23                	jmp    c0004aea <get_fileinfo+0x15f>
c0004ac7:	b9 0c 00 00 00       	mov    ecx,0xc
c0004acc:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ad0:	29 f9                	sub    ecx,edi
c0004ad2:	0f b7 c0             	movzx  eax,ax
c0004ad5:	e8 d7 d0 ff ff       	call   c0001bb1 <put_utf>
c0004ada:	84 c0                	test   al,al
c0004adc:	74 e5                	je     c0004ac3 <get_fileinfo+0x138>
c0004ade:	0f b6 c0             	movzx  eax,al
c0004ae1:	01 c7                	add    edi,eax
c0004ae3:	89 e9                	mov    ecx,ebp
c0004ae5:	e9 4a ff ff ff       	jmp    c0004a34 <get_fileinfo+0xa9>
c0004aea:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004aef:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004af3:	75 54                	jne    c0004b49 <get_fileinfo+0x1be>
c0004af5:	85 ff                	test   edi,edi
c0004af7:	75 0b                	jne    c0004b04 <get_fileinfo+0x179>
c0004af9:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004afd:	ba 01 00 00 00       	mov    edx,0x1
c0004b02:	eb 33                	jmp    c0004b37 <get_fileinfo+0x1ac>
c0004b04:	b1 08                	mov    cl,0x8
c0004b06:	31 d2                	xor    edx,edx
c0004b08:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b0e:	84 c0                	test   al,al
c0004b10:	74 25                	je     c0004b37 <get_fileinfo+0x1ac>
c0004b12:	66 83 f8 2e          	cmp    ax,0x2e
c0004b16:	74 16                	je     c0004b2e <get_fileinfo+0x1a3>
c0004b18:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b1b:	66 83 ff 19          	cmp    di,0x19
c0004b1f:	77 0f                	ja     c0004b30 <get_fileinfo+0x1a5>
c0004b21:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b24:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b27:	74 07                	je     c0004b30 <get_fileinfo+0x1a5>
c0004b29:	83 c0 20             	add    eax,0x20
c0004b2c:	eb 02                	jmp    c0004b30 <get_fileinfo+0x1a5>
c0004b2e:	b1 10                	mov    cl,0x10
c0004b30:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b34:	42                   	inc    edx
c0004b35:	eb d1                	jmp    c0004b08 <get_fileinfo+0x17d>
c0004b37:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b3c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b43:	75 04                	jne    c0004b49 <get_fileinfo+0x1be>
c0004b45:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b49:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b4c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b4f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b55:	83 c0 1c             	add    eax,0x1c
c0004b58:	e8 c1 ce ff ff       	call   c0001a1e <ld_dword>
c0004b5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b64:	89 03                	mov    DWORD PTR [ebx],eax
c0004b66:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b69:	83 c0 16             	add    eax,0x16
c0004b6c:	e8 a0 ce ff ff       	call   c0001a11 <ld_word>
c0004b71:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	83 c0 18             	add    eax,0x18
c0004b7b:	e8 91 ce ff ff       	call   c0001a11 <ld_word>
c0004b80:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b84:	83 c4 1c             	add    esp,0x1c
c0004b87:	5b                   	pop    ebx
c0004b88:	5e                   	pop    esi
c0004b89:	5f                   	pop    edi
c0004b8a:	5d                   	pop    ebp
c0004b8b:	c3                   	ret    

c0004b8c <ld_clust.isra.0>:
c0004b8c:	56                   	push   esi
c0004b8d:	89 c6                	mov    esi,eax
c0004b8f:	53                   	push   ebx
c0004b90:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b93:	89 d3                	mov    ebx,edx
c0004b95:	e8 77 ce ff ff       	call   c0001a11 <ld_word>
c0004b9a:	0f b7 c8             	movzx  ecx,ax
c0004b9d:	89 f0                	mov    eax,esi
c0004b9f:	3c 03                	cmp    al,0x3
c0004ba1:	75 0d                	jne    c0004bb0 <ld_clust.isra.0+0x24>
c0004ba3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ba6:	e8 66 ce ff ff       	call   c0001a11 <ld_word>
c0004bab:	c1 e0 10             	shl    eax,0x10
c0004bae:	09 c1                	or     ecx,eax
c0004bb0:	89 c8                	mov    eax,ecx
c0004bb2:	5b                   	pop    ebx
c0004bb3:	5e                   	pop    esi
c0004bb4:	c3                   	ret    

c0004bb5 <st_clust.isra.1>:
c0004bb5:	56                   	push   esi
c0004bb6:	89 c6                	mov    esi,eax
c0004bb8:	53                   	push   ebx
c0004bb9:	89 d3                	mov    ebx,edx
c0004bbb:	0f b7 d1             	movzx  edx,cx
c0004bbe:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bc1:	e8 bd ce ff ff       	call   c0001a83 <st_word>
c0004bc6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bc9:	75 0f                	jne    c0004bda <st_clust.isra.1+0x25>
c0004bcb:	c1 e9 10             	shr    ecx,0x10
c0004bce:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd1:	89 ca                	mov    edx,ecx
c0004bd3:	5b                   	pop    ebx
c0004bd4:	5e                   	pop    esi
c0004bd5:	e9 a9 ce ff ff       	jmp    c0001a83 <st_word>
c0004bda:	5b                   	pop    ebx
c0004bdb:	5e                   	pop    esi
c0004bdc:	c3                   	ret    

c0004bdd <init_alloc_info.isra.2>:
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	89 c6                	mov    esi,eax
c0004be1:	89 d3                	mov    ebx,edx
c0004be3:	51                   	push   ecx
c0004be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0004be6:	83 c0 34             	add    eax,0x34
c0004be9:	e8 30 ce ff ff       	call   c0001a1e <ld_dword>
c0004bee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf3:	83 c0 38             	add    eax,0x38
c0004bf6:	e8 3b ce ff ff       	call   c0001a36 <ld_qword>
c0004bfb:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bfe:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c01:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c03:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c06:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c0d:	83 e0 02             	and    eax,0x2
c0004c10:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c13:	5b                   	pop    ebx
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	c3                   	ret    

c0004c17 <follow_path>:
c0004c17:	56                   	push   esi
c0004c18:	53                   	push   ebx
c0004c19:	89 c3                	mov    ebx,eax
c0004c1b:	83 ec 14             	sub    esp,0x14
c0004c1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c22:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c28:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c2a:	80 fa 5c             	cmp    dl,0x5c
c0004c2d:	75 07                	jne    c0004c36 <follow_path+0x1f>
c0004c2f:	40                   	inc    eax
c0004c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c34:	eb ee                	jmp    c0004c24 <follow_path+0xd>
c0004c36:	80 fa 2f             	cmp    dl,0x2f
c0004c39:	74 f4                	je     c0004c2f <follow_path+0x18>
c0004c3b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c42:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c49:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c4c:	77 52                	ja     c0004ca0 <follow_path+0x89>
c0004c4e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c52:	31 d2                	xor    edx,edx
c0004c54:	89 d8                	mov    eax,ebx
c0004c56:	e8 12 e3 ff ff       	call   c0002f6d <dir_sdi>
c0004c5b:	eb 7c                	jmp    c0004cd9 <follow_path+0xc2>
c0004c5d:	89 d8                	mov    eax,ebx
c0004c5f:	e8 6e f2 ff ff       	call   c0003ed2 <dir_find>
c0004c64:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c67:	85 c0                	test   eax,eax
c0004c69:	75 46                	jne    c0004cb1 <follow_path+0x9a>
c0004c6b:	80 e2 04             	and    dl,0x4
c0004c6e:	75 69                	jne    c0004cd9 <follow_path+0xc2>
c0004c70:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c74:	74 5e                	je     c0004cd4 <follow_path+0xbd>
c0004c76:	8a 06                	mov    al,BYTE PTR [esi]
c0004c78:	3c 04                	cmp    al,0x4
c0004c7a:	75 41                	jne    c0004cbd <follow_path+0xa6>
c0004c7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c7f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c83:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c86:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c89:	30 c0                	xor    al,al
c0004c8b:	09 d0                	or     eax,edx
c0004c8d:	89 da                	mov    edx,ebx
c0004c8f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c92:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c95:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c98:	8d 46 10             	lea    eax,[esi+0x10]
c0004c9b:	e8 3d ff ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ca0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ca4:	89 d8                	mov    eax,ebx
c0004ca6:	e8 a9 ed ff ff       	call   c0003a54 <create_name>
c0004cab:	85 c0                	test   eax,eax
c0004cad:	74 ae                	je     c0004c5d <follow_path+0x46>
c0004caf:	eb 28                	jmp    c0004cd9 <follow_path+0xc2>
c0004cb1:	83 f8 04             	cmp    eax,0x4
c0004cb4:	75 23                	jne    c0004cd9 <follow_path+0xc2>
c0004cb6:	80 e2 04             	and    dl,0x4
c0004cb9:	74 19                	je     c0004cd4 <follow_path+0xbd>
c0004cbb:	eb 1c                	jmp    c0004cd9 <follow_path+0xc2>
c0004cbd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cc0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cc6:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cca:	e8 bd fe ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cd2:	eb cc                	jmp    c0004ca0 <follow_path+0x89>
c0004cd4:	b8 05 00 00 00       	mov    eax,0x5
c0004cd9:	83 c4 14             	add    esp,0x14
c0004cdc:	5b                   	pop    ebx
c0004cdd:	5e                   	pop    esi
c0004cde:	c3                   	ret    

c0004cdf <f_mount>:
c0004cdf:	53                   	push   ebx
c0004ce0:	83 ec 18             	sub    esp,0x18
c0004ce3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004ce7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004ceb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004cf3:	e8 fb d2 ff ff       	call   c0001ff3 <get_ldnumber>
c0004cf8:	89 c2                	mov    edx,eax
c0004cfa:	b8 0b 00 00 00       	mov    eax,0xb
c0004cff:	85 d2                	test   edx,edx
c0004d01:	78 39                	js     c0004d3c <f_mount+0x5d>
c0004d03:	8b 04 95 60 ba 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd45a0]
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	74 03                	je     c0004d11 <f_mount+0x32>
c0004d0e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d15:	85 c0                	test   eax,eax
c0004d17:	74 03                	je     c0004d1c <f_mount+0x3d>
c0004d19:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d20:	89 04 95 60 ba 02 c0 	mov    DWORD PTR [edx*4-0x3ffd45a0],eax
c0004d27:	31 c0                	xor    eax,eax
c0004d29:	84 db                	test   bl,bl
c0004d2b:	74 0f                	je     c0004d3c <f_mount+0x5d>
c0004d2d:	31 c9                	xor    ecx,ecx
c0004d2f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d37:	e8 65 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d3c:	83 c4 18             	add    esp,0x18
c0004d3f:	5b                   	pop    ebx
c0004d40:	c3                   	ret    

c0004d41 <f_open>:
c0004d41:	55                   	push   ebp
c0004d42:	bd 09 00 00 00       	mov    ebp,0x9
c0004d47:	57                   	push   edi
c0004d48:	56                   	push   esi
c0004d49:	53                   	push   ebx
c0004d4a:	83 ec 7c             	sub    esp,0x7c
c0004d4d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d54:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d5b:	85 db                	test   ebx,ebx
c0004d5d:	0f 84 10 04 00 00    	je     c0005173 <f_open+0x432>
c0004d63:	89 fe                	mov    esi,edi
c0004d65:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d69:	83 e6 3f             	and    esi,0x3f
c0004d6c:	89 f0                	mov    eax,esi
c0004d6e:	0f b6 c8             	movzx  ecx,al
c0004d71:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d78:	e8 24 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d7d:	89 c5                	mov    ebp,eax
c0004d7f:	85 c0                	test   eax,eax
c0004d81:	0f 85 e6 03 00 00    	jne    c000516d <f_open+0x42c>
c0004d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d8b:	bd 11 00 00 00       	mov    ebp,0x11
c0004d90:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d94:	83 ec 0c             	sub    esp,0xc
c0004d97:	68 60 04 00 00       	push   0x460
c0004d9c:	e8 a3 34 00 00       	call   c0008244 <ff_memalloc>
c0004da1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004da5:	83 c4 10             	add    esp,0x10
c0004da8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dad:	0f 84 c0 03 00 00    	je     c0005173 <f_open+0x432>
c0004db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004db7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dbb:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dc1:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dc7:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dce:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dd2:	e8 40 fe ff ff       	call   c0004c17 <follow_path>
c0004dd7:	89 c5                	mov    ebp,eax
c0004dd9:	85 c0                	test   eax,eax
c0004ddb:	75 0c                	jne    c0004de9 <f_open+0xa8>
c0004ddd:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004de2:	79 05                	jns    c0004de9 <f_open+0xa8>
c0004de4:	bd 06 00 00 00       	mov    ebp,0x6
c0004de9:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004def:	0f 84 84 01 00 00    	je     c0004f79 <f_open+0x238>
c0004df5:	85 ed                	test   ebp,ebp
c0004df7:	74 20                	je     c0004e19 <f_open+0xd8>
c0004df9:	83 fd 04             	cmp    ebp,0x4
c0004dfc:	0f 85 58 03 00 00    	jne    c000515a <f_open+0x419>
c0004e02:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e06:	83 ce 08             	or     esi,0x8
c0004e09:	e8 8a f2 ff ff       	call   c0004098 <dir_register>
c0004e0e:	89 c5                	mov    ebp,eax
c0004e10:	85 c0                	test   eax,eax
c0004e12:	74 2f                	je     c0004e43 <f_open+0x102>
c0004e14:	e9 41 03 00 00       	jmp    c000515a <f_open+0x419>
c0004e19:	bd 07 00 00 00       	mov    ebp,0x7
c0004e1e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e23:	0f 85 31 03 00 00    	jne    c000515a <f_open+0x419>
c0004e29:	bd 08 00 00 00       	mov    ebp,0x8
c0004e2e:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e34:	0f 85 20 03 00 00    	jne    c000515a <f_open+0x419>
c0004e3a:	83 e7 08             	and    edi,0x8
c0004e3d:	0f 84 65 01 00 00    	je     c0004fa8 <f_open+0x267>
c0004e43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e47:	8a 02                	mov    al,BYTE PTR [edx]
c0004e49:	3c 04                	cmp    al,0x4
c0004e4b:	0f 85 97 00 00 00    	jne    c0004ee8 <f_open+0x1a7>
c0004e51:	8d 42 10             	lea    eax,[edx+0x10]
c0004e54:	89 13                	mov    DWORD PTR [ebx],edx
c0004e56:	89 da                	mov    edx,ebx
c0004e58:	e8 80 fd ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004e5d:	31 d2                	xor    edx,edx
c0004e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e63:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e6b:	83 c0 02             	add    eax,0x2
c0004e6e:	e8 32 cc ff ff       	call   c0001aa5 <mem_set>
c0004e73:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e78:	31 d2                	xor    edx,edx
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e81:	83 c0 26             	add    eax,0x26
c0004e84:	e8 1c cc ff ff       	call   c0001aa5 <mem_set>
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e90:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e94:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9c:	83 c0 08             	add    eax,0x8
c0004e9f:	e8 e3 cb ff ff       	call   c0001a87 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eab:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004eaf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eb3:	e8 b7 ea ff ff       	call   c000396f <store_xdir>
c0004eb8:	89 c5                	mov    ebp,eax
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 98 02 00 00    	jne    c000515a <f_open+0x419>
c0004ec2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ec5:	85 d2                	test   edx,edx
c0004ec7:	0f 84 db 00 00 00    	je     c0004fa8 <f_open+0x267>
c0004ecd:	31 c9                	xor    ecx,ecx
c0004ecf:	89 d8                	mov    eax,ebx
c0004ed1:	e8 8e e3 ff ff       	call   c0003264 <remove_chain>
c0004ed6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004eda:	89 c5                	mov    ebp,eax
c0004edc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004edf:	48                   	dec    eax
c0004ee0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ee3:	e9 b8 00 00 00       	jmp    c0004fa0 <f_open+0x25f>
c0004ee8:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004eec:	89 ea                	mov    edx,ebp
c0004eee:	e8 99 fc ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ef3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ef8:	89 c7                	mov    edi,eax
c0004efa:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004efd:	e8 85 cb ff ff       	call   c0001a87 <st_dword>
c0004f02:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f10:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f14:	e8 9c fc ff ff       	call   c0004bb5 <st_clust.isra.1>
c0004f19:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f1d:	31 d2                	xor    edx,edx
c0004f1f:	83 c0 1c             	add    eax,0x1c
c0004f22:	e8 60 cb ff ff       	call   c0001a87 <st_dword>
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 ff                	test   edi,edi
c0004f2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f31:	74 75                	je     c0004fa8 <f_open+0x267>
c0004f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f37:	31 c9                	xor    ecx,ecx
c0004f39:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f3c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f47:	89 fa                	mov    edx,edi
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 12 e3 ff ff       	call   c0003264 <remove_chain>
c0004f52:	89 c5                	mov    ebp,eax
c0004f54:	85 c0                	test   eax,eax
c0004f56:	0f 85 fe 01 00 00    	jne    c000515a <f_open+0x419>
c0004f5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f68:	4f                   	dec    edi
c0004f69:	e8 81 d2 ff ff       	call   c00021ef <move_window>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f74:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f77:	eb 27                	jmp    c0004fa0 <f_open+0x25f>
c0004f79:	85 ed                	test   ebp,ebp
c0004f7b:	0f 85 d9 01 00 00    	jne    c000515a <f_open+0x419>
c0004f81:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f85:	bd 04 00 00 00       	mov    ebp,0x4
c0004f8a:	a8 10                	test   al,0x10
c0004f8c:	0f 85 c8 01 00 00    	jne    c000515a <f_open+0x419>
c0004f92:	83 e7 02             	and    edi,0x2
c0004f95:	74 11                	je     c0004fa8 <f_open+0x267>
c0004f97:	bd 07 00 00 00       	mov    ebp,0x7
c0004f9c:	a8 01                	test   al,0x1
c0004f9e:	eb 02                	jmp    c0004fa2 <f_open+0x261>
c0004fa0:	85 ed                	test   ebp,ebp
c0004fa2:	0f 85 b2 01 00 00    	jne    c000515a <f_open+0x419>
c0004fa8:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fae:	74 03                	je     c0004fb3 <f_open+0x272>
c0004fb0:	83 ce 40             	or     esi,0x40
c0004fb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fb7:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fba:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fbd:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fc0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fc3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fc7:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fca:	8a 02                	mov    al,BYTE PTR [edx]
c0004fcc:	3c 04                	cmp    al,0x4
c0004fce:	75 2a                	jne    c0004ffa <f_open+0x2b9>
c0004fd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fd4:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fd9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fe0:	30 c0                	xor    al,al
c0004fe2:	09 c8                	or     eax,ecx
c0004fe4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fe7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004feb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fee:	8d 42 10             	lea    eax,[edx+0x10]
c0004ff1:	89 da                	mov    edx,ebx
c0004ff3:	e8 e5 fb ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ff8:	eb 1c                	jmp    c0005016 <f_open+0x2d5>
c0004ffa:	89 fa                	mov    edx,edi
c0004ffc:	e8 8b fb ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005001:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005004:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005007:	e8 12 ca ff ff       	call   c0001a1e <ld_dword>
c000500c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005013:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000501a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005021:	89 03                	mov    DWORD PTR [ebx],eax
c0005023:	31 d2                	xor    edx,edx
c0005025:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005029:	b9 00 02 00 00       	mov    ecx,0x200
c000502e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005032:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005036:	89 f0                	mov    eax,esi
c0005038:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000503f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005042:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005049:	8d 43 50             	lea    eax,[ebx+0x50]
c000504c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005053:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000505a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000505e:	e8 42 ca ff ff       	call   c0001aa5 <mem_set>
c0005063:	83 e6 20             	and    esi,0x20
c0005066:	75 07                	jne    c000506f <f_open+0x32e>
c0005068:	31 ed                	xor    ebp,ebp
c000506a:	e9 eb 00 00 00       	jmp    c000515a <f_open+0x419>
c000506f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005072:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000507d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005081:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005085:	74 e1                	je     c0005068 <f_open+0x327>
c0005087:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000508b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000508f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005092:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005099:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000509c:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050a0:	31 ff                	xor    edi,edi
c00050a2:	c1 e5 09             	shl    ebp,0x9
c00050a5:	89 ee                	mov    esi,ebp
c00050a7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050ab:	89 f8                	mov    eax,edi
c00050ad:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050b1:	73 22                	jae    c00050d5 <f_open+0x394>
c00050b3:	89 d8                	mov    eax,ebx
c00050b5:	e8 bd dc ff ff       	call   c0002d77 <get_fat>
c00050ba:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050be:	89 c2                	mov    edx,eax
c00050c0:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050c4:	83 f8 01             	cmp    eax,0x1
c00050c7:	76 10                	jbe    c00050d9 <f_open+0x398>
c00050c9:	83 f8 ff             	cmp    eax,0xffffffff
c00050cc:	75 d9                	jne    c00050a7 <f_open+0x366>
c00050ce:	bd 01 00 00 00       	mov    ebp,0x1
c00050d3:	eb 09                	jmp    c00050de <f_open+0x39d>
c00050d5:	31 ed                	xor    ebp,ebp
c00050d7:	eb 05                	jmp    c00050de <f_open+0x39d>
c00050d9:	bd 02 00 00 00       	mov    ebp,0x2
c00050de:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050e1:	85 ed                	test   ebp,ebp
c00050e3:	75 75                	jne    c000515a <f_open+0x419>
c00050e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050e9:	25 ff 01 00 00       	and    eax,0x1ff
c00050ee:	0f 84 74 ff ff ff    	je     c0005068 <f_open+0x327>
c00050f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050f8:	bd 02 00 00 00       	mov    ebp,0x2
c00050fd:	89 c8                	mov    eax,ecx
c00050ff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005103:	e8 a2 cb ff ff       	call   c0001caa <clst2sect>
c0005108:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000510c:	89 d7                	mov    edi,edx
c000510e:	09 c7                	or     edi,eax
c0005110:	74 48                	je     c000515a <f_open+0x419>
c0005112:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005116:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000511a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005122:	0f ac fe 09          	shrd   esi,edi,0x9
c0005126:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000512a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000512e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005131:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005135:	83 ec 0c             	sub    esp,0xc
c0005138:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000513b:	6a 01                	push   0x1
c000513d:	52                   	push   edx
c000513e:	50                   	push   eax
c000513f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005143:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005147:	50                   	push   eax
c0005148:	e8 79 c8 ff ff       	call   c00019c6 <disk_read>
c000514d:	83 c4 20             	add    esp,0x20
c0005150:	85 c0                	test   eax,eax
c0005152:	0f 95 c0             	setne  al
c0005155:	0f b6 c0             	movzx  eax,al
c0005158:	89 c5                	mov    ebp,eax
c000515a:	83 ec 0c             	sub    esp,0xc
c000515d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005161:	e8 f4 30 00 00       	call   c000825a <ff_memfree>
c0005166:	83 c4 10             	add    esp,0x10
c0005169:	85 ed                	test   ebp,ebp
c000516b:	74 06                	je     c0005173 <f_open+0x432>
c000516d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005173:	83 c4 7c             	add    esp,0x7c
c0005176:	89 e8                	mov    eax,ebp
c0005178:	5b                   	pop    ebx
c0005179:	5e                   	pop    esi
c000517a:	5f                   	pop    edi
c000517b:	5d                   	pop    ebp
c000517c:	c3                   	ret    

c000517d <f_read>:
c000517d:	55                   	push   ebp
c000517e:	57                   	push   edi
c000517f:	56                   	push   esi
c0005180:	53                   	push   ebx
c0005181:	83 ec 2c             	sub    esp,0x2c
c0005184:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005188:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000518c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005192:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005196:	89 d8                	mov    eax,ebx
c0005198:	e8 77 cf ff ff       	call   c0002114 <validate>
c000519d:	89 c5                	mov    ebp,eax
c000519f:	85 c0                	test   eax,eax
c00051a1:	0f 85 4c 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051a7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051ab:	85 ed                	test   ebp,ebp
c00051ad:	0f 85 40 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051b3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051b7:	0f 84 31 02 00 00    	je     c00053ee <f_read+0x271>
c00051bd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051c0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051c3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051c6:	bf 00 00 00 00       	mov    edi,0x0
c00051cb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ce:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051d2:	89 d1                	mov    ecx,edx
c00051d4:	19 f9                	sbb    ecx,edi
c00051d6:	0f 83 cf 00 00 00    	jae    c00052ab <f_read+0x12e>
c00051dc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051e0:	e9 c6 00 00 00       	jmp    c00052ab <f_read+0x12e>
c00051e5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051e8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051eb:	89 d0                	mov    eax,edx
c00051ed:	25 ff 01 00 00       	and    eax,0x1ff
c00051f2:	0f 85 c9 01 00 00    	jne    c00053c1 <f_read+0x244>
c00051f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051fc:	89 d6                	mov    esi,edx
c00051fe:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005202:	89 cf                	mov    edi,ecx
c0005204:	48                   	dec    eax
c0005205:	0f ac fe 09          	shrd   esi,edi,0x9
c0005209:	21 f0                	and    eax,esi
c000520b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000520f:	0f 84 a6 00 00 00    	je     c00052bb <f_read+0x13e>
c0005215:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005219:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000521c:	89 c8                	mov    eax,ecx
c000521e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005221:	e8 84 ca ff ff       	call   c0001caa <clst2sect>
c0005226:	89 d7                	mov    edi,edx
c0005228:	09 c7                	or     edi,eax
c000522a:	0f 84 b4 00 00 00    	je     c00052e4 <f_read+0x167>
c0005230:	31 ff                	xor    edi,edi
c0005232:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005236:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005239:	01 c6                	add    esi,eax
c000523b:	11 d7                	adc    edi,edx
c000523d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005245:	0f 86 fd 00 00 00    	jbe    c0005348 <f_read+0x1cb>
c000524b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000524f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005253:	c1 e8 09             	shr    eax,0x9
c0005256:	89 04 24             	mov    DWORD PTR [esp],eax
c0005259:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000525d:	03 14 24             	add    edx,DWORD PTR [esp]
c0005260:	39 c2                	cmp    edx,eax
c0005262:	76 07                	jbe    c000526b <f_read+0xee>
c0005264:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005268:	89 04 24             	mov    DWORD PTR [esp],eax
c000526b:	83 ec 0c             	sub    esp,0xc
c000526e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005272:	57                   	push   edi
c0005273:	56                   	push   esi
c0005274:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005278:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000527c:	50                   	push   eax
c000527d:	e8 44 c7 ff ff       	call   c00019c6 <disk_read>
c0005282:	83 c4 20             	add    esp,0x20
c0005285:	85 c0                	test   eax,eax
c0005287:	75 6e                	jne    c00052f7 <f_read+0x17a>
c0005289:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000528d:	78 7e                	js     c000530d <f_read+0x190>
c000528f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005292:	c1 e6 09             	shl    esi,0x9
c0005295:	31 ff                	xor    edi,edi
c0005297:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000529b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000529f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052a3:	01 30                	add    DWORD PTR [eax],esi
c00052a5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052a8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052b0:	0f 85 2f ff ff ff    	jne    c00051e5 <f_read+0x68>
c00052b6:	e9 38 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052bb:	89 c8                	mov    eax,ecx
c00052bd:	09 d0                	or     eax,edx
c00052bf:	75 05                	jne    c00052c6 <f_read+0x149>
c00052c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052c4:	eb 19                	jmp    c00052df <f_read+0x162>
c00052c6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052ca:	74 09                	je     c00052d5 <f_read+0x158>
c00052cc:	89 d8                	mov    eax,ebx
c00052ce:	e8 f8 c9 ff ff       	call   c0001ccb <clmt_clust>
c00052d3:	eb 0a                	jmp    c00052df <f_read+0x162>
c00052d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 98 da ff ff       	call   c0002d77 <get_fat>
c00052df:	83 f8 01             	cmp    eax,0x1
c00052e2:	77 0e                	ja     c00052f2 <f_read+0x175>
c00052e4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052e8:	bd 02 00 00 00       	mov    ebp,0x2
c00052ed:	e9 01 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052f2:	83 f8 ff             	cmp    eax,0xffffffff
c00052f5:	75 0e                	jne    c0005305 <f_read+0x188>
c00052f7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052fb:	bd 01 00 00 00       	mov    ebp,0x1
c0005300:	e9 ee 00 00 00       	jmp    c00053f3 <f_read+0x276>
c0005305:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005308:	e9 08 ff ff ff       	jmp    c0005215 <f_read+0x98>
c000530d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005310:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005313:	29 f0                	sub    eax,esi
c0005315:	19 fa                	sbb    edx,edi
c0005317:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000531a:	89 d7                	mov    edi,edx
c000531c:	ba 00 00 00 00       	mov    edx,0x0
c0005321:	89 f9                	mov    ecx,edi
c0005323:	19 d1                	sbb    ecx,edx
c0005325:	0f 83 64 ff ff ff    	jae    c000528f <f_read+0x112>
c000532b:	89 c7                	mov    edi,eax
c000532d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005337:	b9 00 02 00 00       	mov    ecx,0x200
c000533c:	01 f8                	add    eax,edi
c000533e:	e8 4d c7 ff ff       	call   c0001a90 <mem_cpy>
c0005343:	e9 47 ff ff ff       	jmp    c000528f <f_read+0x112>
c0005348:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000534b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005351:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005355:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005359:	75 05                	jne    c0005360 <f_read+0x1e3>
c000535b:	39 34 24             	cmp    DWORD PTR [esp],esi
c000535e:	74 5b                	je     c00053bb <f_read+0x23e>
c0005360:	8d 43 50             	lea    eax,[ebx+0x50]
c0005363:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000536b:	79 2a                	jns    c0005397 <f_read+0x21a>
c000536d:	83 ec 0c             	sub    esp,0xc
c0005370:	6a 01                	push   0x1
c0005372:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000537a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000537e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005382:	50                   	push   eax
c0005383:	e8 54 c6 ff ff       	call   c00019dc <disk_write>
c0005388:	83 c4 20             	add    esp,0x20
c000538b:	85 c0                	test   eax,eax
c000538d:	0f 85 64 ff ff ff    	jne    c00052f7 <f_read+0x17a>
c0005393:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005397:	83 ec 0c             	sub    esp,0xc
c000539a:	6a 01                	push   0x1
c000539c:	57                   	push   edi
c000539d:	56                   	push   esi
c000539e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053aa:	50                   	push   eax
c00053ab:	e8 16 c6 ff ff       	call   c00019c6 <disk_read>
c00053b0:	83 c4 20             	add    esp,0x20
c00053b3:	85 c0                	test   eax,eax
c00053b5:	0f 85 3c ff ff ff    	jne    c00052f7 <f_read+0x17a>
c00053bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053c4:	ba 00 02 00 00       	mov    edx,0x200
c00053c9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053d2:	29 c2                	sub    edx,eax
c00053d4:	39 d6                	cmp    esi,edx
c00053d6:	76 02                	jbe    c00053da <f_read+0x25d>
c00053d8:	89 d6                	mov    esi,edx
c00053da:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053de:	89 f1                	mov    ecx,esi
c00053e0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e4:	e8 a7 c6 ff ff       	call   c0001a90 <mem_cpy>
c00053e9:	e9 a7 fe ff ff       	jmp    c0005295 <f_read+0x118>
c00053ee:	bd 07 00 00 00       	mov    ebp,0x7
c00053f3:	83 c4 2c             	add    esp,0x2c
c00053f6:	89 e8                	mov    eax,ebp
c00053f8:	5b                   	pop    ebx
c00053f9:	5e                   	pop    esi
c00053fa:	5f                   	pop    edi
c00053fb:	5d                   	pop    ebp
c00053fc:	c3                   	ret    

c00053fd <f_write>:
c00053fd:	55                   	push   ebp
c00053fe:	57                   	push   edi
c00053ff:	56                   	push   esi
c0005400:	53                   	push   ebx
c0005401:	83 ec 2c             	sub    esp,0x2c
c0005404:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005408:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000540c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005412:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f7 cc ff ff       	call   c0002114 <validate>
c000541d:	89 c5                	mov    ebp,eax
c000541f:	85 c0                	test   eax,eax
c0005421:	0f 85 86 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005427:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000542b:	85 ed                	test   ebp,ebp
c000542d:	0f 85 7a 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005433:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005437:	0f 84 6b 02 00 00    	je     c00056a8 <f_write+0x2ab>
c000543d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005441:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005444:	0f 84 43 01 00 00    	je     c000558d <f_write+0x190>
c000544a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000544d:	89 c1                	mov    ecx,eax
c000544f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005453:	0f 83 34 01 00 00    	jae    c000558d <f_write+0x190>
c0005459:	f7 d0                	not    eax
c000545b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000545f:	e9 29 01 00 00       	jmp    c000558d <f_write+0x190>
c0005464:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005467:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000546a:	89 d0                	mov    eax,edx
c000546c:	25 ff 01 00 00       	and    eax,0x1ff
c0005471:	0f 85 00 02 00 00    	jne    c0005677 <f_write+0x27a>
c0005477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547b:	89 d6                	mov    esi,edx
c000547d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005481:	89 cf                	mov    edi,ecx
c0005483:	48                   	dec    eax
c0005484:	0f ac fe 09          	shrd   esi,edi,0x9
c0005488:	21 f0                	and    eax,esi
c000548a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000548e:	0f 84 06 01 00 00    	je     c000559a <f_write+0x19d>
c0005494:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005498:	0f 88 6e 01 00 00    	js     c000560c <f_write+0x20f>
c000549e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054a2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054a5:	89 c8                	mov    eax,ecx
c00054a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054ab:	e8 fa c7 ff ff       	call   c0001caa <clst2sect>
c00054b0:	89 d1                	mov    ecx,edx
c00054b2:	09 c1                	or     ecx,eax
c00054b4:	0f 84 1c 01 00 00    	je     c00055d6 <f_write+0x1d9>
c00054ba:	31 ff                	xor    edi,edi
c00054bc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054c4:	01 c6                	add    esi,eax
c00054c6:	11 d7                	adc    edi,edx
c00054c8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054d0:	0f 86 63 01 00 00    	jbe    c0005639 <f_write+0x23c>
c00054d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054de:	c1 e8 09             	shr    eax,0x9
c00054e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054e5:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054e9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054ed:	39 c2                	cmp    edx,eax
c00054ef:	76 08                	jbe    c00054f9 <f_write+0xfc>
c00054f1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054f9:	83 ec 0c             	sub    esp,0xc
c00054fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005500:	57                   	push   edi
c0005501:	56                   	push   esi
c0005502:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005506:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000550a:	50                   	push   eax
c000550b:	e8 cc c4 ff ff       	call   c00019dc <disk_write>
c0005510:	83 c4 20             	add    esp,0x20
c0005513:	85 c0                	test   eax,eax
c0005515:	0f 85 ce 00 00 00    	jne    c00055e9 <f_write+0x1ec>
c000551b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000551e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005521:	29 f0                	sub    eax,esi
c0005523:	19 fa                	sbb    edx,edi
c0005525:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005529:	89 d7                	mov    edi,edx
c000552b:	ba 00 00 00 00       	mov    edx,0x0
c0005530:	89 f9                	mov    ecx,edi
c0005532:	19 d1                	sbb    ecx,edx
c0005534:	73 1c                	jae    c0005552 <f_write+0x155>
c0005536:	89 c7                	mov    edi,eax
c0005538:	b9 00 02 00 00       	mov    ecx,0x200
c000553d:	c1 e7 09             	shl    edi,0x9
c0005540:	8d 43 50             	lea    eax,[ebx+0x50]
c0005543:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005547:	89 fa                	mov    edx,edi
c0005549:	e8 42 c5 ff ff       	call   c0001a90 <mem_cpy>
c000554e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005552:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005556:	c1 e6 09             	shl    esi,0x9
c0005559:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000555d:	31 ff                	xor    edi,edi
c000555f:	01 30                	add    DWORD PTR [eax],esi
c0005561:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005565:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005569:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000556c:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000556f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005572:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005575:	89 c1                	mov    ecx,eax
c0005577:	39 f2                	cmp    edx,esi
c0005579:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000557c:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000557f:	19 f9                	sbb    ecx,edi
c0005581:	73 04                	jae    c0005587 <f_write+0x18a>
c0005583:	89 f2                	mov    edx,esi
c0005585:	89 f8                	mov    eax,edi
c0005587:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000558a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000558d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005592:	0f 85 cc fe ff ff    	jne    c0005464 <f_write+0x67>
c0005598:	eb 2e                	jmp    c00055c8 <f_write+0x1cb>
c000559a:	89 c8                	mov    eax,ecx
c000559c:	09 d0                	or     eax,edx
c000559e:	75 0b                	jne    c00055ab <f_write+0x1ae>
c00055a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055a3:	31 d2                	xor    edx,edx
c00055a5:	85 c0                	test   eax,eax
c00055a7:	75 28                	jne    c00055d1 <f_write+0x1d4>
c00055a9:	eb 12                	jmp    c00055bd <f_write+0x1c0>
c00055ab:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055af:	74 09                	je     c00055ba <f_write+0x1bd>
c00055b1:	89 d8                	mov    eax,ebx
c00055b3:	e8 13 c7 ff ff       	call   c0001ccb <clmt_clust>
c00055b8:	eb 0a                	jmp    c00055c4 <f_write+0x1c7>
c00055ba:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055bd:	89 d8                	mov    eax,ebx
c00055bf:	e8 a1 da ff ff       	call   c0003065 <create_chain>
c00055c4:	85 c0                	test   eax,eax
c00055c6:	75 09                	jne    c00055d1 <f_write+0x1d4>
c00055c8:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055cc:	e9 dc 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055d1:	83 f8 01             	cmp    eax,0x1
c00055d4:	75 0e                	jne    c00055e4 <f_write+0x1e7>
c00055d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055da:	bd 02 00 00 00       	mov    ebp,0x2
c00055df:	e9 c9 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055e4:	83 f8 ff             	cmp    eax,0xffffffff
c00055e7:	75 0e                	jne    c00055f7 <f_write+0x1fa>
c00055e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055ed:	bd 01 00 00 00       	mov    ebp,0x1
c00055f2:	e9 b6 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055fa:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055fe:	0f 85 90 fe ff ff    	jne    c0005494 <f_write+0x97>
c0005604:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005607:	e9 88 fe ff ff       	jmp    c0005494 <f_write+0x97>
c000560c:	83 ec 0c             	sub    esp,0xc
c000560f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005612:	6a 01                	push   0x1
c0005614:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005617:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000561a:	50                   	push   eax
c000561b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000561f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005623:	50                   	push   eax
c0005624:	e8 b3 c3 ff ff       	call   c00019dc <disk_write>
c0005629:	83 c4 20             	add    esp,0x20
c000562c:	85 c0                	test   eax,eax
c000562e:	75 b9                	jne    c00055e9 <f_write+0x1ec>
c0005630:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005634:	e9 65 fe ff ff       	jmp    c000549e <f_write+0xa1>
c0005639:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000563c:	75 05                	jne    c0005643 <f_write+0x246>
c000563e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005641:	74 2e                	je     c0005671 <f_write+0x274>
c0005643:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005646:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005649:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000564c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000564f:	73 20                	jae    c0005671 <f_write+0x274>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	57                   	push   edi
c000565a:	56                   	push   esi
c000565b:	50                   	push   eax
c000565c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005660:	50                   	push   eax
c0005661:	e8 60 c3 ff ff       	call   c00019c6 <disk_read>
c0005666:	83 c4 20             	add    esp,0x20
c0005669:	85 c0                	test   eax,eax
c000566b:	0f 85 78 ff ff ff    	jne    c00055e9 <f_write+0x1ec>
c0005671:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005674:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005677:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567a:	ba 00 02 00 00       	mov    edx,0x200
c000567f:	25 ff 01 00 00       	and    eax,0x1ff
c0005684:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005688:	29 c2                	sub    edx,eax
c000568a:	39 d6                	cmp    esi,edx
c000568c:	76 02                	jbe    c0005690 <f_write+0x293>
c000568e:	89 d6                	mov    esi,edx
c0005690:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005694:	89 f1                	mov    ecx,esi
c0005696:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000569a:	e8 f1 c3 ff ff       	call   c0001a90 <mem_cpy>
c000569f:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056a3:	e9 b1 fe ff ff       	jmp    c0005559 <f_write+0x15c>
c00056a8:	bd 07 00 00 00       	mov    ebp,0x7
c00056ad:	83 c4 2c             	add    esp,0x2c
c00056b0:	89 e8                	mov    eax,ebp
c00056b2:	5b                   	pop    ebx
c00056b3:	5e                   	pop    esi
c00056b4:	5f                   	pop    edi
c00056b5:	5d                   	pop    ebp
c00056b6:	c3                   	ret    

c00056b7 <f_sync>:
c00056b7:	56                   	push   esi
c00056b8:	53                   	push   ebx
c00056b9:	83 ec 64             	sub    esp,0x64
c00056bc:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056c4:	89 d8                	mov    eax,ebx
c00056c6:	e8 49 ca ff ff       	call   c0002114 <validate>
c00056cb:	85 c0                	test   eax,eax
c00056cd:	0f 85 ba 01 00 00    	jne    c000588d <f_sync+0x1d6>
c00056d3:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056d6:	f6 c2 40             	test   dl,0x40
c00056d9:	0f 84 ae 01 00 00    	je     c000588d <f_sync+0x1d6>
c00056df:	84 d2                	test   dl,dl
c00056e1:	79 33                	jns    c0005716 <f_sync+0x5f>
c00056e3:	83 ec 0c             	sub    esp,0xc
c00056e6:	8d 43 50             	lea    eax,[ebx+0x50]
c00056e9:	6a 01                	push   0x1
c00056eb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056f1:	50                   	push   eax
c00056f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056fa:	50                   	push   eax
c00056fb:	e8 dc c2 ff ff       	call   c00019dc <disk_write>
c0005700:	83 c4 20             	add    esp,0x20
c0005703:	89 c2                	mov    edx,eax
c0005705:	b8 01 00 00 00       	mov    eax,0x1
c000570a:	85 d2                	test   edx,edx
c000570c:	0f 85 7b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005712:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000571a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000571d:	0f 85 11 01 00 00    	jne    c0005834 <f_sync+0x17d>
c0005723:	89 d8                	mov    eax,ebx
c0005725:	e8 13 d6 ff ff       	call   c0002d3d <fill_first_frag>
c000572a:	85 c0                	test   eax,eax
c000572c:	0f 85 5b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005732:	83 c9 ff             	or     ecx,0xffffffff
c0005735:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005738:	89 d8                	mov    eax,ebx
c000573a:	e8 c9 d5 ff ff       	call   c0002d08 <fill_last_frag>
c000573f:	85 c0                	test   eax,eax
c0005741:	0f 85 46 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005747:	83 ec 0c             	sub    esp,0xc
c000574a:	68 60 04 00 00       	push   0x460
c000574f:	e8 f0 2a 00 00       	call   c0008244 <ff_memalloc>
c0005754:	83 c4 10             	add    esp,0x10
c0005757:	89 c6                	mov    esi,eax
c0005759:	b8 11 00 00 00       	mov    eax,0x11
c000575e:	85 f6                	test   esi,esi
c0005760:	0f 84 27 01 00 00    	je     c000588d <f_sync+0x1d6>
c0005766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005770:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005773:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005776:	89 da                	mov    edx,ebx
c0005778:	8d 44 24 14          	lea    eax,[esp+0x14]
c000577c:	e8 af df ff ff       	call   c0003730 <load_obj_xdir>
c0005781:	85 c0                	test   eax,eax
c0005783:	0f 85 95 00 00 00    	jne    c000581e <f_sync+0x167>
c0005789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000578d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005790:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005794:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005797:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000579a:	83 ca 01             	or     edx,0x1
c000579d:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057a0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057a6:	83 c0 34             	add    eax,0x34
c00057a9:	e8 d9 c2 ff ff       	call   c0001a87 <st_dword>
c00057ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057b8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057bb:	83 c0 38             	add    eax,0x38
c00057be:	e8 c7 c2 ff ff       	call   c0001a8a <st_qword>
c00057c3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d0:	83 c0 28             	add    eax,0x28
c00057d3:	e8 b2 c2 ff ff       	call   c0001a8a <st_qword>
c00057d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057dc:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e4:	83 c0 0c             	add    eax,0xc
c00057e7:	e8 9b c2 ff ff       	call   c0001a87 <st_dword>
c00057ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057f3:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057f7:	31 d2                	xor    edx,edx
c00057f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fc:	83 c0 10             	add    eax,0x10
c00057ff:	e8 83 c2 ff ff       	call   c0001a87 <st_dword>
c0005804:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005808:	e8 62 e1 ff ff       	call   c000396f <store_xdir>
c000580d:	85 c0                	test   eax,eax
c000580f:	75 0d                	jne    c000581e <f_sync+0x167>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	e8 00 eb ff ff       	call   c000431a <sync_fs>
c000581a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000581e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	56                   	push   esi
c0005826:	e8 2f 2a 00 00       	call   c000825a <ff_memfree>
c000582b:	83 c4 10             	add    esp,0x10
c000582e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005832:	eb 59                	jmp    c000588d <f_sync+0x1d6>
c0005834:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005837:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000583a:	e8 b0 c9 ff ff       	call   c00021ef <move_window>
c000583f:	85 c0                	test   eax,eax
c0005841:	75 4a                	jne    c000588d <f_sync+0x1d6>
c0005843:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005846:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000584a:	89 f2                	mov    edx,esi
c000584c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000584f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005851:	e8 5f f3 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0005856:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005859:	8d 46 1c             	lea    eax,[esi+0x1c]
c000585c:	e8 26 c2 ff ff       	call   c0001a87 <st_dword>
c0005861:	8d 46 16             	lea    eax,[esi+0x16]
c0005864:	ba 00 00 21 50       	mov    edx,0x50210000
c0005869:	e8 19 c2 ff ff       	call   c0001a87 <st_dword>
c000586e:	8d 46 12             	lea    eax,[esi+0x12]
c0005871:	31 d2                	xor    edx,edx
c0005873:	e8 0b c2 ff ff       	call   c0001a83 <st_word>
c0005878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000587c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005884:	e8 91 ea ff ff       	call   c000431a <sync_fs>
c0005889:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000588d:	83 c4 64             	add    esp,0x64
c0005890:	5b                   	pop    ebx
c0005891:	5e                   	pop    esi
c0005892:	c3                   	ret    

c0005893 <f_close>:
c0005893:	53                   	push   ebx
c0005894:	83 ec 24             	sub    esp,0x24
c0005897:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000589b:	53                   	push   ebx
c000589c:	e8 16 fe ff ff       	call   c00056b7 <f_sync>
c00058a1:	83 c4 10             	add    esp,0x10
c00058a4:	85 c0                	test   eax,eax
c00058a6:	75 15                	jne    c00058bd <f_close+0x2a>
c00058a8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058ac:	89 d8                	mov    eax,ebx
c00058ae:	e8 61 c8 ff ff       	call   c0002114 <validate>
c00058b3:	85 c0                	test   eax,eax
c00058b5:	75 06                	jne    c00058bd <f_close+0x2a>
c00058b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058bd:	83 c4 18             	add    esp,0x18
c00058c0:	5b                   	pop    ebx
c00058c1:	c3                   	ret    

c00058c2 <f_lseek>:
c00058c2:	55                   	push   ebp
c00058c3:	57                   	push   edi
c00058c4:	56                   	push   esi
c00058c5:	53                   	push   ebx
c00058c6:	83 ec 3c             	sub    esp,0x3c
c00058c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058cd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058d1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00058d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058e2:	e8 2d c8 ff ff       	call   c0002114 <validate>
c00058e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058eb:	85 c0                	test   eax,eax
c00058ed:	0f 85 7a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c00058f3:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058fb:	85 c0                	test   eax,eax
c00058fd:	0f 85 6a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c0005903:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005907:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000590a:	74 0c                	je     c0005918 <f_lseek+0x56>
c000590c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000590f:	85 c0                	test   eax,eax
c0005911:	75 1f                	jne    c0005932 <f_lseek+0x70>
c0005913:	e9 b5 01 00 00       	jmp    c0005acd <f_lseek+0x20b>
c0005918:	83 c9 ff             	or     ecx,0xffffffff
c000591b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000591e:	89 d8                	mov    eax,ebx
c0005920:	e8 e3 d3 ff ff       	call   c0002d08 <fill_last_frag>
c0005925:	85 c0                	test   eax,eax
c0005927:	74 e3                	je     c000590c <f_lseek+0x4a>
c0005929:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592d:	e9 3b 04 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c0005932:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005937:	0f 85 ac 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c000593d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005941:	0f 85 a2 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c0005947:	8d 78 04             	lea    edi,[eax+0x4]
c000594a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000594d:	8b 00                	mov    eax,DWORD PTR [eax]
c000594f:	be 02 00 00 00       	mov    esi,0x2
c0005954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005958:	85 ed                	test   ebp,ebp
c000595a:	74 73                	je     c00059cf <f_lseek+0x10d>
c000595c:	89 e9                	mov    ecx,ebp
c000595e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005965:	ff 04 24             	inc    DWORD PTR [esp]
c0005968:	89 ca                	mov    edx,ecx
c000596a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000596e:	89 d8                	mov    eax,ebx
c0005970:	e8 02 d4 ff ff       	call   c0002d77 <get_fat>
c0005975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005979:	83 f8 01             	cmp    eax,0x1
c000597c:	77 11                	ja     c000598f <f_lseek+0xcd>
c000597e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005982:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000598a:	e9 de 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c000598f:	83 f8 ff             	cmp    eax,0xffffffff
c0005992:	75 11                	jne    c00059a5 <f_lseek+0xe3>
c0005994:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005998:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059a0:	e9 c8 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059a5:	8d 51 01             	lea    edx,[ecx+0x1]
c00059a8:	89 c1                	mov    ecx,eax
c00059aa:	39 c2                	cmp    edx,eax
c00059ac:	74 b7                	je     c0005965 <f_lseek+0xa3>
c00059ae:	83 c6 02             	add    esi,0x2
c00059b1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059b5:	72 0b                	jb     c00059c2 <f_lseek+0x100>
c00059b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ba:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059bd:	89 0f                	mov    DWORD PTR [edi],ecx
c00059bf:	83 c7 08             	add    edi,0x8
c00059c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059c6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059c9:	76 04                	jbe    c00059cf <f_lseek+0x10d>
c00059cb:	89 c5                	mov    ebp,eax
c00059cd:	eb 8d                	jmp    c000595c <f_lseek+0x9a>
c00059cf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059d2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059d6:	89 30                	mov    DWORD PTR [eax],esi
c00059d8:	0f 87 87 03 00 00    	ja     c0005d65 <f_lseek+0x4a3>
c00059de:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059e4:	e9 84 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059e9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059ec:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059fb:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a02:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a06:	73 0f                	jae    c0005a17 <f_lseek+0x155>
c0005a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a1f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a22:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a29:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a2d:	0f 84 3a 03 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a33:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a37:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a3b:	83 c6 ff             	add    esi,0xffffffff
c0005a3e:	89 d8                	mov    eax,ebx
c0005a40:	83 d7 ff             	adc    edi,0xffffffff
c0005a43:	89 f2                	mov    edx,esi
c0005a45:	89 f9                	mov    ecx,edi
c0005a47:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a4e:	e8 78 c2 ff ff       	call   c0001ccb <clmt_clust>
c0005a53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a57:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a5a:	89 c2                	mov    edx,eax
c0005a5c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a60:	89 c8                	mov    eax,ecx
c0005a62:	e8 43 c2 ff ff       	call   c0001caa <clst2sect>
c0005a67:	89 d7                	mov    edi,edx
c0005a69:	09 c7                	or     edi,eax
c0005a6b:	0f 84 0d ff ff ff    	je     c000597e <f_lseek+0xbc>
c0005a71:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a75:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a7b:	0f 84 ec 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a81:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a89:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a8c:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a90:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a94:	4d                   	dec    ebp
c0005a95:	31 ff                	xor    edi,edi
c0005a97:	21 ee                	and    esi,ebp
c0005a99:	01 c6                	add    esi,eax
c0005a9b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a9e:	11 d7                	adc    edi,edx
c0005aa0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005aa3:	39 fa                	cmp    edx,edi
c0005aa5:	75 08                	jne    c0005aaf <f_lseek+0x1ed>
c0005aa7:	39 f0                	cmp    eax,esi
c0005aa9:	0f 84 be 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005aaf:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ab2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ab6:	0f 89 80 02 00 00    	jns    c0005d3c <f_lseek+0x47a>
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	6a 01                	push   0x1
c0005ac1:	52                   	push   edx
c0005ac2:	50                   	push   eax
c0005ac3:	55                   	push   ebp
c0005ac4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ac8:	e9 5a 02 00 00       	jmp    c0005d27 <f_lseek+0x465>
c0005acd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ad1:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ad4:	74 16                	je     c0005aec <f_lseek+0x22a>
c0005ad6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005adb:	76 0f                	jbe    c0005aec <f_lseek+0x22a>
c0005add:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ae4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005aec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005af2:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005af5:	89 c7                	mov    edi,eax
c0005af7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005afb:	73 0d                	jae    c0005b0a <f_lseek+0x248>
c0005afd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b01:	75 07                	jne    c0005b0a <f_lseek+0x248>
c0005b03:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b0d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b14:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b1b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b22:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b25:	75 09                	jne    c0005b30 <f_lseek+0x26e>
c0005b27:	31 f6                	xor    esi,esi
c0005b29:	31 ff                	xor    edi,edi
c0005b2b:	e9 af 01 00 00       	jmp    c0005cdf <f_lseek+0x41d>
c0005b30:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b34:	89 d7                	mov    edi,edx
c0005b36:	c1 e1 09             	shl    ecx,0x9
c0005b39:	09 c7                	or     edi,eax
c0005b3b:	89 cd                	mov    ebp,ecx
c0005b3d:	74 6d                	je     c0005bac <f_lseek+0x2ea>
c0005b3f:	83 c0 ff             	add    eax,0xffffffff
c0005b42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b46:	83 d2 ff             	adc    edx,0xffffffff
c0005b49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b50:	83 c0 ff             	add    eax,0xffffffff
c0005b53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b57:	83 d2 ff             	adc    edx,0xffffffff
c0005b5a:	31 ff                	xor    edi,edi
c0005b5c:	57                   	push   edi
c0005b5d:	51                   	push   ecx
c0005b5e:	52                   	push   edx
c0005b5f:	50                   	push   eax
c0005b60:	e8 c7 eb 01 00       	call   c002472c <__udivdi3>
c0005b65:	83 c4 10             	add    esp,0x10
c0005b68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b70:	57                   	push   edi
c0005b71:	55                   	push   ebp
c0005b72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b7a:	e8 ad eb 01 00       	call   c002472c <__udivdi3>
c0005b7f:	83 c4 10             	add    esp,0x10
c0005b82:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b8a:	19 d1                	sbb    ecx,edx
c0005b8c:	72 1e                	jb     c0005bac <f_lseek+0x2ea>
c0005b8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b92:	89 e9                	mov    ecx,ebp
c0005b94:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b97:	f7 d9                	neg    ecx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ba0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ba3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ba6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005baa:	eb 28                	jmp    c0005bd4 <f_lseek+0x312>
c0005bac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005baf:	85 c0                	test   eax,eax
c0005bb1:	75 1e                	jne    c0005bd1 <f_lseek+0x30f>
c0005bb3:	31 d2                	xor    edx,edx
c0005bb5:	89 d8                	mov    eax,ebx
c0005bb7:	e8 a9 d4 ff ff       	call   c0003065 <create_chain>
c0005bbc:	83 f8 01             	cmp    eax,0x1
c0005bbf:	0f 84 b9 fd ff ff    	je     c000597e <f_lseek+0xbc>
c0005bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc8:	0f 84 c6 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005bce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bd1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	0f 84 4b ff ff ff    	je     c0005b27 <f_lseek+0x265>
c0005bdc:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005be0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005be8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005beb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bef:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bf2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bf5:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005bf9:	0f 83 9d 00 00 00    	jae    c0005c9c <f_lseek+0x3da>
c0005bff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c07:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c0a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c0e:	01 f2                	add    edx,esi
c0005c10:	11 f9                	adc    ecx,edi
c0005c12:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c1a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c1d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c20:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c23:	f6 c1 02             	test   cl,0x2
c0005c26:	74 35                	je     c0005c5d <f_lseek+0x39b>
c0005c28:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c2c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c2f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c32:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c36:	73 16                	jae    c0005c4e <f_lseek+0x38c>
c0005c38:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c3c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c40:	88 ca                	mov    dl,cl
c0005c42:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c45:	83 ca 40             	or     edx,0x40
c0005c48:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c4b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c4e:	89 c2                	mov    edx,eax
c0005c50:	89 d8                	mov    eax,ebx
c0005c52:	e8 0e d4 ff ff       	call   c0003065 <create_chain>
c0005c57:	85 c0                	test   eax,eax
c0005c59:	75 0b                	jne    c0005c66 <f_lseek+0x3a4>
c0005c5b:	eb 30                	jmp    c0005c8d <f_lseek+0x3cb>
c0005c5d:	89 c2                	mov    edx,eax
c0005c5f:	89 d8                	mov    eax,ebx
c0005c61:	e8 11 d1 ff ff       	call   c0002d77 <get_fat>
c0005c66:	83 f8 ff             	cmp    eax,0xffffffff
c0005c69:	0f 84 25 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005c6f:	83 f8 01             	cmp    eax,0x1
c0005c72:	0f 86 06 fd ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c7c:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c7f:	0f 86 f9 fc ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c85:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c88:	e9 5b ff ff ff       	jmp    c0005be8 <f_lseek+0x326>
c0005c8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c9c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c9f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ca3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ca6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ca9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cac:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cb2:	0f 84 6f fe ff ff    	je     c0005b27 <f_lseek+0x265>
c0005cb8:	89 c2                	mov    edx,eax
c0005cba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cbe:	e8 e7 bf ff ff       	call   c0001caa <clst2sect>
c0005cc3:	89 d7                	mov    edi,edx
c0005cc5:	09 c7                	or     edi,eax
c0005cc7:	0f 84 b1 fc ff ff    	je     c000597e <f_lseek+0xbc>
c0005ccd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cd4:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cd8:	c1 ef 09             	shr    edi,0x9
c0005cdb:	01 c6                	add    esi,eax
c0005cdd:	11 d7                	adc    edi,edx
c0005cdf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ce2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005ce5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005ce8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005ceb:	19 d1                	sbb    ecx,edx
c0005ced:	73 0a                	jae    c0005cf9 <f_lseek+0x437>
c0005cef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cf2:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cf5:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cf9:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cfe:	74 6d                	je     c0005d6d <f_lseek+0x4ab>
c0005d00:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d06:	39 fa                	cmp    edx,edi
c0005d08:	75 04                	jne    c0005d0e <f_lseek+0x44c>
c0005d0a:	39 f0                	cmp    eax,esi
c0005d0c:	74 5f                	je     c0005d6d <f_lseek+0x4ab>
c0005d0e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d11:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d15:	79 25                	jns    c0005d3c <f_lseek+0x47a>
c0005d17:	83 ec 0c             	sub    esp,0xc
c0005d1a:	6a 01                	push   0x1
c0005d1c:	52                   	push   edx
c0005d1d:	50                   	push   eax
c0005d1e:	55                   	push   ebp
c0005d1f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d23:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d27:	50                   	push   eax
c0005d28:	e8 af bc ff ff       	call   c00019dc <disk_write>
c0005d2d:	83 c4 20             	add    esp,0x20
c0005d30:	85 c0                	test   eax,eax
c0005d32:	0f 85 5c fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d38:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d3c:	83 ec 0c             	sub    esp,0xc
c0005d3f:	6a 01                	push   0x1
c0005d41:	57                   	push   edi
c0005d42:	56                   	push   esi
c0005d43:	55                   	push   ebp
c0005d44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d48:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d4c:	50                   	push   eax
c0005d4d:	e8 74 bc ff ff       	call   c00019c6 <disk_read>
c0005d52:	83 c4 20             	add    esp,0x20
c0005d55:	85 c0                	test   eax,eax
c0005d57:	0f 85 37 fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d5d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d60:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d63:	eb 08                	jmp    c0005d6d <f_lseek+0x4ab>
c0005d65:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d71:	83 c4 3c             	add    esp,0x3c
c0005d74:	5b                   	pop    ebx
c0005d75:	5e                   	pop    esi
c0005d76:	5f                   	pop    edi
c0005d77:	5d                   	pop    ebp
c0005d78:	c3                   	ret    

c0005d79 <f_opendir>:
c0005d79:	56                   	push   esi
c0005d7a:	b8 09 00 00 00       	mov    eax,0x9
c0005d7f:	53                   	push   ebx
c0005d80:	83 ec 24             	sub    esp,0x24
c0005d83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d87:	85 db                	test   ebx,ebx
c0005d89:	0f 84 e6 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005d8f:	31 c9                	xor    ecx,ecx
c0005d91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d95:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d99:	e8 03 c7 ff ff       	call   c00024a1 <mount_volume>
c0005d9e:	85 c0                	test   eax,eax
c0005da0:	0f 85 c9 00 00 00    	jne    c0005e6f <f_opendir+0xf6>
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	83 ec 0c             	sub    esp,0xc
c0005dad:	89 03                	mov    DWORD PTR [ebx],eax
c0005daf:	68 60 04 00 00       	push   0x460
c0005db4:	e8 8b 24 00 00       	call   c0008244 <ff_memalloc>
c0005db9:	83 c4 10             	add    esp,0x10
c0005dbc:	89 c6                	mov    esi,eax
c0005dbe:	b8 11 00 00 00       	mov    eax,0x11
c0005dc3:	85 f6                	test   esi,esi
c0005dc5:	0f 84 aa 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005dcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ddb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ddf:	89 d8                	mov    eax,ebx
c0005de1:	e8 31 ee ff ff       	call   c0004c17 <follow_path>
c0005de6:	85 c0                	test   eax,eax
c0005de8:	75 61                	jne    c0005e4b <f_opendir+0xd2>
c0005dea:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dee:	78 46                	js     c0005e36 <f_opendir+0xbd>
c0005df0:	b8 05 00 00 00       	mov    eax,0x5
c0005df5:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005df9:	74 50                	je     c0005e4b <f_opendir+0xd2>
c0005dfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dff:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e01:	3c 04                	cmp    al,0x4
c0005e03:	75 26                	jne    c0005e2b <f_opendir+0xb2>
c0005e05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e08:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e0b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e0e:	30 d2                	xor    dl,dl
c0005e10:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e14:	09 c2                	or     edx,eax
c0005e16:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e19:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e1c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e1f:	89 da                	mov    edx,ebx
c0005e21:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e24:	e8 b4 ed ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0005e29:	eb 0b                	jmp    c0005e36 <f_opendir+0xbd>
c0005e2b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e2e:	e8 59 ed ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005e33:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3a:	31 d2                	xor    edx,edx
c0005e3c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e40:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e44:	89 d8                	mov    eax,ebx
c0005e46:	e8 22 d1 ff ff       	call   c0002f6d <dir_sdi>
c0005e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	56                   	push   esi
c0005e53:	e8 02 24 00 00       	call   c000825a <ff_memfree>
c0005e58:	83 c4 10             	add    esp,0x10
c0005e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e5f:	83 f8 04             	cmp    eax,0x4
c0005e62:	74 06                	je     c0005e6a <f_opendir+0xf1>
c0005e64:	85 c0                	test   eax,eax
c0005e66:	74 0d                	je     c0005e75 <f_opendir+0xfc>
c0005e68:	eb 05                	jmp    c0005e6f <f_opendir+0xf6>
c0005e6a:	b8 05 00 00 00       	mov    eax,0x5
c0005e6f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e75:	83 c4 24             	add    esp,0x24
c0005e78:	5b                   	pop    ebx
c0005e79:	5e                   	pop    esi
c0005e7a:	c3                   	ret    

c0005e7b <f_closedir>:
c0005e7b:	53                   	push   ebx
c0005e7c:	83 ec 18             	sub    esp,0x18
c0005e7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e87:	89 d8                	mov    eax,ebx
c0005e89:	e8 86 c2 ff ff       	call   c0002114 <validate>
c0005e8e:	85 c0                	test   eax,eax
c0005e90:	75 06                	jne    c0005e98 <f_closedir+0x1d>
c0005e92:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e98:	83 c4 18             	add    esp,0x18
c0005e9b:	5b                   	pop    ebx
c0005e9c:	c3                   	ret    

c0005e9d <f_readdir>:
c0005e9d:	57                   	push   edi
c0005e9e:	56                   	push   esi
c0005e9f:	53                   	push   ebx
c0005ea0:	83 ec 20             	sub    esp,0x20
c0005ea3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ea7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005eab:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 5e c2 ff ff       	call   c0002114 <validate>
c0005eb6:	85 c0                	test   eax,eax
c0005eb8:	75 77                	jne    c0005f31 <f_readdir+0x94>
c0005eba:	85 ff                	test   edi,edi
c0005ebc:	75 0b                	jne    c0005ec9 <f_readdir+0x2c>
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 a6 d0 ff ff       	call   c0002f6d <dir_sdi>
c0005ec7:	eb 68                	jmp    c0005f31 <f_readdir+0x94>
c0005ec9:	83 ec 0c             	sub    esp,0xc
c0005ecc:	68 60 04 00 00       	push   0x460
c0005ed1:	e8 6e 23 00 00       	call   c0008244 <ff_memalloc>
c0005ed6:	83 c4 10             	add    esp,0x10
c0005ed9:	89 c6                	mov    esi,eax
c0005edb:	b8 11 00 00 00       	mov    eax,0x11
c0005ee0:	85 f6                	test   esi,esi
c0005ee2:	74 4d                	je     c0005f31 <f_readdir+0x94>
c0005ee4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eee:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ef1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef4:	31 d2                	xor    edx,edx
c0005ef6:	89 d8                	mov    eax,ebx
c0005ef8:	e8 80 d8 ff ff       	call   c000377d <dir_read>
c0005efd:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f02:	75 19                	jne    c0005f1d <f_readdir+0x80>
c0005f04:	89 fa                	mov    edx,edi
c0005f06:	89 d8                	mov    eax,ebx
c0005f08:	e8 7e ea ff ff       	call   c000498b <get_fileinfo>
c0005f0d:	31 d2                	xor    edx,edx
c0005f0f:	89 d8                	mov    eax,ebx
c0005f11:	e8 af d5 ff ff       	call   c00034c5 <dir_next>
c0005f16:	83 f8 04             	cmp    eax,0x4
c0005f19:	75 02                	jne    c0005f1d <f_readdir+0x80>
c0005f1b:	31 c0                	xor    eax,eax
c0005f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	56                   	push   esi
c0005f25:	e8 30 23 00 00       	call   c000825a <ff_memfree>
c0005f2a:	83 c4 10             	add    esp,0x10
c0005f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f31:	83 c4 20             	add    esp,0x20
c0005f34:	5b                   	pop    ebx
c0005f35:	5e                   	pop    esi
c0005f36:	5f                   	pop    edi
c0005f37:	c3                   	ret    

c0005f38 <f_stat>:
c0005f38:	57                   	push   edi
c0005f39:	31 c9                	xor    ecx,ecx
c0005f3b:	56                   	push   esi
c0005f3c:	53                   	push   ebx
c0005f3d:	83 ec 50             	sub    esp,0x50
c0005f40:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f44:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f48:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f4c:	e8 50 c5 ff ff       	call   c00024a1 <mount_volume>
c0005f51:	89 c3                	mov    ebx,eax
c0005f53:	85 c0                	test   eax,eax
c0005f55:	75 67                	jne    c0005fbe <f_stat+0x86>
c0005f57:	83 ec 0c             	sub    esp,0xc
c0005f5a:	bb 11 00 00 00       	mov    ebx,0x11
c0005f5f:	68 60 04 00 00       	push   0x460
c0005f64:	e8 db 22 00 00       	call   c0008244 <ff_memalloc>
c0005f69:	83 c4 10             	add    esp,0x10
c0005f6c:	89 c6                	mov    esi,eax
c0005f6e:	85 c0                	test   eax,eax
c0005f70:	74 4c                	je     c0005fbe <f_stat+0x86>
c0005f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f76:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f7c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f7f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f82:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f86:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f8a:	e8 88 ec ff ff       	call   c0004c17 <follow_path>
c0005f8f:	89 c3                	mov    ebx,eax
c0005f91:	85 c0                	test   eax,eax
c0005f93:	75 1d                	jne    c0005fb2 <f_stat+0x7a>
c0005f95:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f9a:	78 11                	js     c0005fad <f_stat+0x75>
c0005f9c:	85 ff                	test   edi,edi
c0005f9e:	74 12                	je     c0005fb2 <f_stat+0x7a>
c0005fa0:	89 fa                	mov    edx,edi
c0005fa2:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fa6:	e8 e0 e9 ff ff       	call   c000498b <get_fileinfo>
c0005fab:	eb 05                	jmp    c0005fb2 <f_stat+0x7a>
c0005fad:	bb 06 00 00 00       	mov    ebx,0x6
c0005fb2:	83 ec 0c             	sub    esp,0xc
c0005fb5:	56                   	push   esi
c0005fb6:	e8 9f 22 00 00       	call   c000825a <ff_memfree>
c0005fbb:	83 c4 10             	add    esp,0x10
c0005fbe:	83 c4 50             	add    esp,0x50
c0005fc1:	89 d8                	mov    eax,ebx
c0005fc3:	5b                   	pop    ebx
c0005fc4:	5e                   	pop    esi
c0005fc5:	5f                   	pop    edi
c0005fc6:	c3                   	ret    

c0005fc7 <f_getfree>:
c0005fc7:	55                   	push   ebp
c0005fc8:	31 c9                	xor    ecx,ecx
c0005fca:	57                   	push   edi
c0005fcb:	56                   	push   esi
c0005fcc:	53                   	push   ebx
c0005fcd:	83 ec 5c             	sub    esp,0x5c
c0005fd0:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fd4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fd8:	e8 c4 c4 ff ff       	call   c00024a1 <mount_volume>
c0005fdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	0f 85 9d 01 00 00    	jne    c0006186 <f_getfree+0x1bf>
c0005fe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fed:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005ff1:	89 02                	mov    DWORD PTR [edx],eax
c0005ff3:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005ff6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005ff9:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005ffc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006000:	39 f2                	cmp    edx,esi
c0006002:	77 0b                	ja     c000600f <f_getfree+0x48>
c0006004:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006008:	89 10                	mov    DWORD PTR [eax],edx
c000600a:	e9 77 01 00 00       	jmp    c0006186 <f_getfree+0x1bf>
c000600f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006011:	80 fa 01             	cmp    dl,0x1
c0006014:	75 3a                	jne    c0006050 <f_getfree+0x89>
c0006016:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000601a:	be 02 00 00 00       	mov    esi,0x2
c000601f:	31 db                	xor    ebx,ebx
c0006021:	89 f2                	mov    edx,esi
c0006023:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006027:	e8 4b cd ff ff       	call   c0002d77 <get_fat>
c000602c:	83 f8 ff             	cmp    eax,0xffffffff
c000602f:	0f 84 28 01 00 00    	je     c000615d <f_getfree+0x196>
c0006035:	83 f8 01             	cmp    eax,0x1
c0006038:	0f 84 29 01 00 00    	je     c0006167 <f_getfree+0x1a0>
c000603e:	83 d3 00             	adc    ebx,0x0
c0006041:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006045:	46                   	inc    esi
c0006046:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006049:	77 d6                	ja     c0006021 <f_getfree+0x5a>
c000604b:	e9 25 01 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c0006050:	80 fa 04             	cmp    dl,0x4
c0006053:	0f 85 88 00 00 00    	jne    c00060e1 <f_getfree+0x11a>
c0006059:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000605c:	31 ed                	xor    ebp,ebp
c000605e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006061:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006069:	31 db                	xor    ebx,ebx
c000606b:	85 ed                	test   ebp,ebp
c000606d:	75 3f                	jne    c00060ae <f_getfree+0xe7>
c000606f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006077:	83 c0 01             	add    eax,0x1
c000607a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000607e:	83 d2 00             	adc    edx,0x0
c0006081:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006085:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006091:	e8 59 c1 ff ff       	call   c00021ef <move_window>
c0006096:	85 c0                	test   eax,eax
c0006098:	0f 85 d3 00 00 00    	jne    c0006171 <f_getfree+0x1aa>
c000609e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060b2:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060b5:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060b9:	89 cf                	mov    edi,ecx
c00060bb:	85 f6                	test   esi,esi
c00060bd:	74 12                	je     c00060d1 <f_getfree+0x10a>
c00060bf:	88 c1                	mov    cl,al
c00060c1:	83 e1 01             	and    ecx,0x1
c00060c4:	80 f9 01             	cmp    cl,0x1
c00060c7:	83 d3 00             	adc    ebx,0x0
c00060ca:	d0 e8                	shr    al,1
c00060cc:	4e                   	dec    esi
c00060cd:	39 fe                	cmp    esi,edi
c00060cf:	75 ea                	jne    c00060bb <f_getfree+0xf4>
c00060d1:	45                   	inc    ebp
c00060d2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060d8:	85 f6                	test   esi,esi
c00060da:	75 8f                	jne    c000606b <f_getfree+0xa4>
c00060dc:	e9 94 00 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c00060e1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060e4:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060e7:	31 f6                	xor    esi,esi
c00060e9:	31 db                	xor    ebx,ebx
c00060eb:	85 f6                	test   esi,esi
c00060ed:	75 1b                	jne    c000610a <f_getfree+0x143>
c00060ef:	89 d7                	mov    edi,edx
c00060f1:	89 cd                	mov    ebp,ecx
c00060f3:	83 c7 01             	add    edi,0x1
c00060f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fa:	83 d5 00             	adc    ebp,0x0
c00060fd:	e8 ed c0 ff ff       	call   c00021ef <move_window>
c0006102:	85 c0                	test   eax,eax
c0006104:	75 6b                	jne    c0006171 <f_getfree+0x1aa>
c0006106:	89 fa                	mov    edx,edi
c0006108:	89 e9                	mov    ecx,ebp
c000610a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000610e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006112:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006116:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006119:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000611d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006121:	75 11                	jne    c0006134 <f_getfree+0x16d>
c0006123:	e8 e9 b8 ff ff       	call   c0001a11 <ld_word>
c0006128:	66 83 f8 01          	cmp    ax,0x1
c000612c:	83 d3 00             	adc    ebx,0x0
c000612f:	83 c6 02             	add    esi,0x2
c0006132:	eb 13                	jmp    c0006147 <f_getfree+0x180>
c0006134:	e8 e5 b8 ff ff       	call   c0001a1e <ld_dword>
c0006139:	25 ff ff ff 0f       	and    eax,0xfffffff
c000613e:	83 f8 01             	cmp    eax,0x1
c0006141:	83 d3 00             	adc    ebx,0x0
c0006144:	83 c6 04             	add    esi,0x4
c0006147:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000614d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006151:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006155:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006159:	75 90                	jne    c00060eb <f_getfree+0x124>
c000615b:	eb 18                	jmp    c0006175 <f_getfree+0x1ae>
c000615d:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006165:	eb 0e                	jmp    c0006175 <f_getfree+0x1ae>
c0006167:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000616f:	eb 04                	jmp    c0006175 <f_getfree+0x1ae>
c0006171:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006175:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006179:	89 18                	mov    DWORD PTR [eax],ebx
c000617b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000617f:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006182:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000618a:	83 c4 5c             	add    esp,0x5c
c000618d:	5b                   	pop    ebx
c000618e:	5e                   	pop    esi
c000618f:	5f                   	pop    edi
c0006190:	5d                   	pop    ebp
c0006191:	c3                   	ret    

c0006192 <f_truncate>:
c0006192:	56                   	push   esi
c0006193:	53                   	push   ebx
c0006194:	83 ec 14             	sub    esp,0x14
c0006197:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000619b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000619f:	89 d8                	mov    eax,ebx
c00061a1:	e8 6e bf ff ff       	call   c0002114 <validate>
c00061a6:	89 c6                	mov    esi,eax
c00061a8:	85 c0                	test   eax,eax
c00061aa:	0f 85 d2 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061b0:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061b4:	85 f6                	test   esi,esi
c00061b6:	0f 85 c6 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061bc:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061c0:	0f 84 b7 00 00 00    	je     c000627d <f_truncate+0xeb>
c00061c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061cc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061cf:	89 d1                	mov    ecx,edx
c00061d1:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061d4:	0f 83 a8 00 00 00    	jae    c0006282 <f_truncate+0xf0>
c00061da:	09 c2                	or     edx,eax
c00061dc:	75 15                	jne    c00061f3 <f_truncate+0x61>
c00061de:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061e1:	31 c9                	xor    ecx,ecx
c00061e3:	89 d8                	mov    eax,ebx
c00061e5:	e8 7a d0 ff ff       	call   c0003264 <remove_chain>
c00061ea:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061f1:	eb 35                	jmp    c0006228 <f_truncate+0x96>
c00061f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061f6:	89 d8                	mov    eax,ebx
c00061f8:	e8 7a cb ff ff       	call   c0002d77 <get_fat>
c00061fd:	89 c2                	mov    edx,eax
c00061ff:	b8 01 00 00 00       	mov    eax,0x1
c0006204:	83 fa ff             	cmp    edx,0xffffffff
c0006207:	74 1f                	je     c0006228 <f_truncate+0x96>
c0006209:	b8 02 00 00 00       	mov    eax,0x2
c000620e:	83 fa 01             	cmp    edx,0x1
c0006211:	74 15                	je     c0006228 <f_truncate+0x96>
c0006213:	31 c0                	xor    eax,eax
c0006215:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006219:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000621c:	76 0a                	jbe    c0006228 <f_truncate+0x96>
c000621e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006221:	89 d8                	mov    eax,ebx
c0006223:	e8 3c d0 ff ff       	call   c0003264 <remove_chain>
c0006228:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000622b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000622e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006231:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006234:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006237:	83 ca 40             	or     edx,0x40
c000623a:	85 c0                	test   eax,eax
c000623c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000623f:	75 35                	jne    c0006276 <f_truncate+0xe4>
c0006241:	84 d2                	test   dl,dl
c0006243:	79 3d                	jns    c0006282 <f_truncate+0xf0>
c0006245:	83 ec 0c             	sub    esp,0xc
c0006248:	8d 43 50             	lea    eax,[ebx+0x50]
c000624b:	6a 01                	push   0x1
c000624d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006250:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006253:	50                   	push   eax
c0006254:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006258:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000625c:	50                   	push   eax
c000625d:	e8 7a b7 ff ff       	call   c00019dc <disk_write>
c0006262:	83 c4 20             	add    esp,0x20
c0006265:	85 c0                	test   eax,eax
c0006267:	75 08                	jne    c0006271 <f_truncate+0xdf>
c0006269:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000626d:	31 f6                	xor    esi,esi
c000626f:	eb 11                	jmp    c0006282 <f_truncate+0xf0>
c0006271:	b8 01 00 00 00       	mov    eax,0x1
c0006276:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006279:	89 c6                	mov    esi,eax
c000627b:	eb 05                	jmp    c0006282 <f_truncate+0xf0>
c000627d:	be 07 00 00 00       	mov    esi,0x7
c0006282:	89 f0                	mov    eax,esi
c0006284:	83 c4 14             	add    esp,0x14
c0006287:	5b                   	pop    ebx
c0006288:	5e                   	pop    esi
c0006289:	c3                   	ret    

c000628a <f_unlink>:
c000628a:	56                   	push   esi
c000628b:	b9 02 00 00 00       	mov    ecx,0x2
c0006290:	53                   	push   ebx
c0006291:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006297:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000629b:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062a2:	e8 fa c1 ff ff       	call   c00024a1 <mount_volume>
c00062a7:	85 c0                	test   eax,eax
c00062a9:	0f 85 55 01 00 00    	jne    c0006404 <f_unlink+0x17a>
c00062af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b3:	83 ec 0c             	sub    esp,0xc
c00062b6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ba:	68 60 04 00 00       	push   0x460
c00062bf:	e8 80 1f 00 00       	call   c0008244 <ff_memalloc>
c00062c4:	83 c4 10             	add    esp,0x10
c00062c7:	89 c3                	mov    ebx,eax
c00062c9:	b8 11 00 00 00       	mov    eax,0x11
c00062ce:	85 db                	test   ebx,ebx
c00062d0:	0f 84 2e 01 00 00    	je     c0006404 <f_unlink+0x17a>
c00062d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062da:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062e0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062e6:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062f1:	e8 21 e9 ff ff       	call   c0004c17 <follow_path>
c00062f6:	85 c0                	test   eax,eax
c00062f8:	0f 85 f2 00 00 00    	jne    c00063f0 <f_unlink+0x166>
c00062fe:	b8 06 00 00 00       	mov    eax,0x6
c0006303:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000630b:	0f 88 df 00 00 00    	js     c00063f0 <f_unlink+0x166>
c0006311:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006316:	74 0a                	je     c0006322 <f_unlink+0x98>
c0006318:	b8 07 00 00 00       	mov    eax,0x7
c000631d:	e9 ce 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006326:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000632a:	8a 02                	mov    al,BYTE PTR [edx]
c000632c:	3c 04                	cmp    al,0x4
c000632e:	75 12                	jne    c0006342 <f_unlink+0xb8>
c0006330:	8d 42 10             	lea    eax,[edx+0x10]
c0006333:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006337:	e8 a1 e8 ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c000633c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006340:	eb 0e                	jmp    c0006350 <f_unlink+0xc6>
c0006342:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006349:	e8 3e e8 ff ff       	call   c0004b8c <ld_clust.isra.0>
c000634e:	89 c6                	mov    esi,eax
c0006350:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006355:	75 12                	jne    c0006369 <f_unlink+0xdf>
c0006357:	8d 44 24 48          	lea    eax,[esp+0x48]
c000635b:	e8 94 d6 ff ff       	call   c00039f4 <dir_remove>
c0006360:	85 c0                	test   eax,eax
c0006362:	74 6c                	je     c00063d0 <f_unlink+0x146>
c0006364:	e9 87 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000636d:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006374:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000637b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000637e:	75 21                	jne    c00063a1 <f_unlink+0x117>
c0006380:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006384:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006388:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000638f:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006396:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000639a:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063a1:	31 d2                	xor    edx,edx
c00063a3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063aa:	e8 be cb ff ff       	call   c0002f6d <dir_sdi>
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 3d                	jne    c00063f0 <f_unlink+0x166>
c00063b3:	31 d2                	xor    edx,edx
c00063b5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063bc:	e8 bc d3 ff ff       	call   c000377d <dir_read>
c00063c1:	85 c0                	test   eax,eax
c00063c3:	0f 84 4f ff ff ff    	je     c0006318 <f_unlink+0x8e>
c00063c9:	83 f8 04             	cmp    eax,0x4
c00063cc:	75 22                	jne    c00063f0 <f_unlink+0x166>
c00063ce:	eb 87                	jmp    c0006357 <f_unlink+0xcd>
c00063d0:	85 f6                	test   esi,esi
c00063d2:	75 0b                	jne    c00063df <f_unlink+0x155>
c00063d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d8:	e8 3d df ff ff       	call   c000431a <sync_fs>
c00063dd:	eb 11                	jmp    c00063f0 <f_unlink+0x166>
c00063df:	31 c9                	xor    ecx,ecx
c00063e1:	89 f2                	mov    edx,esi
c00063e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063e7:	e8 78 ce ff ff       	call   c0003264 <remove_chain>
c00063ec:	85 c0                	test   eax,eax
c00063ee:	74 e4                	je     c00063d4 <f_unlink+0x14a>
c00063f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063f4:	83 ec 0c             	sub    esp,0xc
c00063f7:	53                   	push   ebx
c00063f8:	e8 5d 1e 00 00       	call   c000825a <ff_memfree>
c00063fd:	83 c4 10             	add    esp,0x10
c0006400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006404:	81 c4 e4 00 00 00    	add    esp,0xe4
c000640a:	5b                   	pop    ebx
c000640b:	5e                   	pop    esi
c000640c:	c3                   	ret    

c000640d <f_mkdir>:
c000640d:	57                   	push   edi
c000640e:	b9 02 00 00 00       	mov    ecx,0x2
c0006413:	56                   	push   esi
c0006414:	53                   	push   ebx
c0006415:	83 c4 80             	add    esp,0xffffff80
c0006418:	8d 54 24 08          	lea    edx,[esp+0x8]
c000641c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006423:	e8 79 c0 ff ff       	call   c00024a1 <mount_volume>
c0006428:	89 c3                	mov    ebx,eax
c000642a:	85 c0                	test   eax,eax
c000642c:	0f 85 fe 01 00 00    	jne    c0006630 <f_mkdir+0x223>
c0006432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006436:	bb 11 00 00 00       	mov    ebx,0x11
c000643b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	68 60 04 00 00       	push   0x460
c0006447:	e8 f8 1d 00 00       	call   c0008244 <ff_memalloc>
c000644c:	83 c4 10             	add    esp,0x10
c000644f:	89 c7                	mov    edi,eax
c0006451:	85 c0                	test   eax,eax
c0006453:	0f 84 d7 01 00 00    	je     c0006630 <f_mkdir+0x223>
c0006459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000645d:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006463:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006466:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006469:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006470:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006474:	e8 9e e7 ff ff       	call   c0004c17 <follow_path>
c0006479:	89 c3                	mov    ebx,eax
c000647b:	85 c0                	test   eax,eax
c000647d:	74 3e                	je     c00064bd <f_mkdir+0xb0>
c000647f:	83 f8 04             	cmp    eax,0x4
c0006482:	75 3e                	jne    c00064c2 <f_mkdir+0xb5>
c0006484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006488:	31 d2                	xor    edx,edx
c000648a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000648e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006492:	e8 ce cb ff ff       	call   c0003065 <create_chain>
c0006497:	89 c6                	mov    esi,eax
c0006499:	85 c0                	test   eax,eax
c000649b:	74 0c                	je     c00064a9 <f_mkdir+0x9c>
c000649d:	bb 02 00 00 00       	mov    ebx,0x2
c00064a2:	83 f8 01             	cmp    eax,0x1
c00064a5:	74 07                	je     c00064ae <f_mkdir+0xa1>
c00064a7:	eb 2a                	jmp    c00064d3 <f_mkdir+0xc6>
c00064a9:	bb 07 00 00 00       	mov    ebx,0x7
c00064ae:	31 c9                	xor    ecx,ecx
c00064b0:	89 f2                	mov    edx,esi
c00064b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064b6:	e8 a9 cd ff ff       	call   c0003264 <remove_chain>
c00064bb:	eb 05                	jmp    c00064c2 <f_mkdir+0xb5>
c00064bd:	bb 08 00 00 00       	mov    ebx,0x8
c00064c2:	83 ec 0c             	sub    esp,0xc
c00064c5:	57                   	push   edi
c00064c6:	e8 8f 1d 00 00       	call   c000825a <ff_memfree>
c00064cb:	83 c4 10             	add    esp,0x10
c00064ce:	e9 5d 01 00 00       	jmp    c0006630 <f_mkdir+0x223>
c00064d3:	bb 01 00 00 00       	mov    ebx,0x1
c00064d8:	83 f8 ff             	cmp    eax,0xffffffff
c00064db:	74 d1                	je     c00064ae <f_mkdir+0xa1>
c00064dd:	89 f2                	mov    edx,esi
c00064df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e3:	e8 c4 ce ff ff       	call   c00033ac <dir_clear>
c00064e8:	89 c3                	mov    ebx,eax
c00064ea:	85 c0                	test   eax,eax
c00064ec:	75 c0                	jne    c00064ae <f_mkdir+0xa1>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f5:	74 69                	je     c0006560 <f_mkdir+0x153>
c00064f7:	b9 0b 00 00 00       	mov    ecx,0xb
c00064fc:	83 c0 54             	add    eax,0x54
c00064ff:	ba 20 00 00 00       	mov    edx,0x20
c0006504:	e8 9c b5 ff ff       	call   c0001aa5 <mem_set>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006512:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006516:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000651a:	83 c0 6a             	add    eax,0x6a
c000651d:	e8 65 b5 ff ff       	call   c0001a87 <st_dword>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	89 f1                	mov    ecx,esi
c0006528:	8d 50 54             	lea    edx,[eax+0x54]
c000652b:	e8 85 e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	b9 20 00 00 00       	mov    ecx,0x20
c0006539:	8d 50 54             	lea    edx,[eax+0x54]
c000653c:	83 c0 74             	add    eax,0x74
c000653f:	e8 4c b5 ff ff       	call   c0001a90 <mem_cpy>
c0006544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006548:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000654c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006550:	8d 50 74             	lea    edx,[eax+0x74]
c0006553:	e8 5d e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006560:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006564:	e8 2f db ff ff       	call   c0004098 <dir_register>
c0006569:	89 c3                	mov    ebx,eax
c000656b:	85 c0                	test   eax,eax
c000656d:	0f 85 3b ff ff ff    	jne    c00064ae <f_mkdir+0xa1>
c0006573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006577:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000657a:	75 74                	jne    c00065f0 <f_mkdir+0x1e3>
c000657c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000657f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006584:	83 c0 0c             	add    eax,0xc
c0006587:	e8 fb b4 ff ff       	call   c0001a87 <st_dword>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	89 f2                	mov    edx,esi
c0006592:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006595:	83 c0 34             	add    eax,0x34
c0006598:	e8 ea b4 ff ff       	call   c0001a87 <st_dword>
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a8:	c1 e2 09             	shl    edx,0x9
c00065ab:	83 c0 38             	add    eax,0x38
c00065ae:	e8 d4 b4 ff ff       	call   c0001a87 <st_dword>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065be:	c1 e2 09             	shl    edx,0x9
c00065c1:	83 c0 28             	add    eax,0x28
c00065c4:	e8 be b4 ff ff       	call   c0001a87 <st_dword>
c00065c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065d0:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d7:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065db:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065df:	e8 8b d3 ff ff       	call   c000396f <store_xdir>
c00065e4:	89 c3                	mov    ebx,eax
c00065e6:	85 c0                	test   eax,eax
c00065e8:	0f 85 d4 fe ff ff    	jne    c00064c2 <f_mkdir+0xb5>
c00065ee:	eb 30                	jmp    c0006620 <f_mkdir+0x213>
c00065f0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f4:	ba 00 00 21 50       	mov    edx,0x50210000
c00065f9:	83 c0 16             	add    eax,0x16
c00065fc:	e8 86 b4 ff ff       	call   c0001a87 <st_dword>
c0006601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006605:	89 f1                	mov    ecx,esi
c0006607:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000660b:	e8 a5 e5 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006610:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006614:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000661c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006624:	e8 f1 dc ff ff       	call   c000431a <sync_fs>
c0006629:	89 c3                	mov    ebx,eax
c000662b:	e9 92 fe ff ff       	jmp    c00064c2 <f_mkdir+0xb5>
c0006630:	83 ec 80             	sub    esp,0xffffff80
c0006633:	89 d8                	mov    eax,ebx
c0006635:	5b                   	pop    ebx
c0006636:	5e                   	pop    esi
c0006637:	5f                   	pop    edi
c0006638:	c3                   	ret    

c0006639 <f_rename>:
c0006639:	55                   	push   ebp
c000663a:	57                   	push   edi
c000663b:	56                   	push   esi
c000663c:	53                   	push   ebx
c000663d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006643:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000664a:	e8 a4 b9 ff ff       	call   c0001ff3 <get_ldnumber>
c000664f:	b9 02 00 00 00       	mov    ecx,0x2
c0006654:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006658:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000665f:	e8 3d be ff ff       	call   c00024a1 <mount_volume>
c0006664:	85 c0                	test   eax,eax
c0006666:	0f 85 b5 02 00 00    	jne    c0006921 <f_rename+0x2e8>
c000666c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006670:	83 ec 0c             	sub    esp,0xc
c0006673:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006677:	68 60 04 00 00       	push   0x460
c000667c:	e8 c3 1b 00 00       	call   c0008244 <ff_memalloc>
c0006681:	83 c4 10             	add    esp,0x10
c0006684:	89 c3                	mov    ebx,eax
c0006686:	b8 11 00 00 00       	mov    eax,0x11
c000668b:	85 db                	test   ebx,ebx
c000668d:	0f 84 8e 02 00 00    	je     c0006921 <f_rename+0x2e8>
c0006693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006697:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000669d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066a3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066aa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066ae:	e8 64 e5 ff ff       	call   c0004c17 <follow_path>
c00066b3:	85 c0                	test   eax,eax
c00066b5:	0f 85 52 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066bb:	b8 06 00 00 00       	mov    eax,0x6
c00066c0:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066c8:	0f 85 3f 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d5:	0f 85 05 01 00 00    	jne    c00067e0 <f_rename+0x1a7>
c00066db:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066de:	b9 40 00 00 00       	mov    ecx,0x40
c00066e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066e7:	e8 a4 b3 ff ff       	call   c0001a90 <mem_cpy>
c00066ec:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066f5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066fc:	e8 8f b3 ff ff       	call   c0001a90 <mem_cpy>
c0006701:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006708:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000670f:	e8 03 e5 ff ff       	call   c0004c17 <follow_path>
c0006714:	85 c0                	test   eax,eax
c0006716:	75 29                	jne    c0006741 <f_rename+0x108>
c0006718:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000671c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006723:	74 0a                	je     c000672f <f_rename+0xf6>
c0006725:	b8 08 00 00 00       	mov    eax,0x8
c000672a:	e9 de 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c000672f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006736:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000673d:	75 e6                	jne    c0006725 <f_rename+0xec>
c000673f:	eb 09                	jmp    c000674a <f_rename+0x111>
c0006741:	83 f8 04             	cmp    eax,0x4
c0006744:	0f 85 c3 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000674a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006751:	e8 42 d9 ff ff       	call   c0004098 <dir_register>
c0006756:	85 c0                	test   eax,eax
c0006758:	0f 85 af 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000675e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006762:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006765:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006768:	89 c5                	mov    ebp,eax
c000676a:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000676d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006771:	8d 46 24             	lea    eax,[esi+0x24]
c0006774:	e8 98 b2 ff ff       	call   c0001a11 <ld_word>
c0006779:	b9 40 00 00 00       	mov    ecx,0x40
c000677e:	89 c7                	mov    edi,eax
c0006780:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006784:	89 f0                	mov    eax,esi
c0006786:	e8 05 b3 ff ff       	call   c0001a90 <mem_cpy>
c000678b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678f:	89 e9                	mov    ecx,ebp
c0006791:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006794:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006797:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000679b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067a5:	0f b7 d7             	movzx  edx,di
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 24             	add    eax,0x24
c00067ae:	e8 d0 b2 ff ff       	call   c0001a83 <st_word>
c00067b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ba:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067bd:	a8 10                	test   al,0x10
c00067bf:	75 06                	jne    c00067c7 <f_rename+0x18e>
c00067c1:	83 c8 20             	or     eax,0x20
c00067c4:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ce:	e8 9c d1 ff ff       	call   c000396f <store_xdir>
c00067d3:	85 c0                	test   eax,eax
c00067d5:	0f 84 1c 01 00 00    	je     c00068f7 <f_rename+0x2be>
c00067db:	e9 2d 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c00067e0:	b9 20 00 00 00       	mov    ecx,0x20
c00067e5:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067ec:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067f0:	e8 9b b2 ff ff       	call   c0001a90 <mem_cpy>
c00067f5:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067fa:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067fe:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006805:	e8 86 b2 ff ff       	call   c0001a90 <mem_cpy>
c000680a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006811:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006818:	e8 fa e3 ff ff       	call   c0004c17 <follow_path>
c000681d:	85 c0                	test   eax,eax
c000681f:	75 27                	jne    c0006848 <f_rename+0x20f>
c0006821:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006825:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000682c:	0f 85 f3 fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006832:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006839:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006840:	0f 85 df fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006846:	eb 09                	jmp    c0006851 <f_rename+0x218>
c0006848:	83 f8 04             	cmp    eax,0x4
c000684b:	0f 85 bc 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006851:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006858:	e8 3b d8 ff ff       	call   c0004098 <dir_register>
c000685d:	85 c0                	test   eax,eax
c000685f:	0f 85 a8 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006865:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000686c:	b9 13 00 00 00       	mov    ecx,0x13
c0006871:	8d 46 0d             	lea    eax,[esi+0xd]
c0006874:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006878:	e8 13 b2 ff ff       	call   c0001a90 <mem_cpy>
c000687d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006881:	a8 10                	test   al,0x10
c0006883:	75 03                	jne    c0006888 <f_rename+0x24f>
c0006885:	83 c8 20             	or     eax,0x20
c0006888:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000688b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000688f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006893:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006897:	74 5e                	je     c00068f7 <f_rename+0x2be>
c0006899:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068a0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068a4:	74 51                	je     c00068f7 <f_rename+0x2be>
c00068a6:	89 f2                	mov    edx,esi
c00068a8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068ac:	8a 07                	mov    al,BYTE PTR [edi]
c00068ae:	e8 d9 e2 ff ff       	call   c0004b8c <ld_clust.isra.0>
c00068b3:	89 c2                	mov    edx,eax
c00068b5:	89 f8                	mov    eax,edi
c00068b7:	e8 ee b3 ff ff       	call   c0001caa <clst2sect>
c00068bc:	89 c6                	mov    esi,eax
c00068be:	89 d1                	mov    ecx,edx
c00068c0:	b8 02 00 00 00       	mov    eax,0x2
c00068c5:	09 f2                	or     edx,esi
c00068c7:	74 44                	je     c000690d <f_rename+0x2d4>
c00068c9:	89 f2                	mov    edx,esi
c00068cb:	89 f8                	mov    eax,edi
c00068cd:	e8 1d b9 ff ff       	call   c00021ef <move_window>
c00068d2:	85 c0                	test   eax,eax
c00068d4:	75 37                	jne    c000690d <f_rename+0x2d4>
c00068d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068da:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068de:	75 17                	jne    c00068f7 <f_rename+0x2be>
c00068e0:	8d 50 74             	lea    edx,[eax+0x74]
c00068e3:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068ea:	e8 c6 e2 ff ff       	call   c0004bb5 <st_clust.isra.1>
c00068ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068f7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fb:	e8 f4 d0 ff ff       	call   c00039f4 <dir_remove>
c0006900:	85 c0                	test   eax,eax
c0006902:	75 09                	jne    c000690d <f_rename+0x2d4>
c0006904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006908:	e8 0d da ff ff       	call   c000431a <sync_fs>
c000690d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006911:	83 ec 0c             	sub    esp,0xc
c0006914:	53                   	push   ebx
c0006915:	e8 40 19 00 00       	call   c000825a <ff_memfree>
c000691a:	83 c4 10             	add    esp,0x10
c000691d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006921:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006927:	5b                   	pop    ebx
c0006928:	5e                   	pop    esi
c0006929:	5f                   	pop    edi
c000692a:	5d                   	pop    ebp
c000692b:	c3                   	ret    

c000692c <f_chmod>:
c000692c:	57                   	push   edi
c000692d:	b9 02 00 00 00       	mov    ecx,0x2
c0006932:	56                   	push   esi
c0006933:	53                   	push   ebx
c0006934:	83 ec 60             	sub    esp,0x60
c0006937:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000693b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000693f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006943:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006947:	e8 55 bb ff ff       	call   c00024a1 <mount_volume>
c000694c:	85 c0                	test   eax,eax
c000694e:	0f 85 af 00 00 00    	jne    c0006a03 <f_chmod+0xd7>
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	83 ec 0c             	sub    esp,0xc
c000695b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000695f:	68 60 04 00 00       	push   0x460
c0006964:	e8 db 18 00 00       	call   c0008244 <ff_memalloc>
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	89 c6                	mov    esi,eax
c000696e:	b8 11 00 00 00       	mov    eax,0x11
c0006973:	85 f6                	test   esi,esi
c0006975:	0f 84 88 00 00 00    	je     c0006a03 <f_chmod+0xd7>
c000697b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000697f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006985:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006988:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000698b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000698f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006993:	e8 7f e2 ff ff       	call   c0004c17 <follow_path>
c0006998:	85 c0                	test   eax,eax
c000699a:	75 53                	jne    c00069ef <f_chmod+0xc3>
c000699c:	b8 06 00 00 00       	mov    eax,0x6
c00069a1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069a6:	75 47                	jne    c00069ef <f_chmod+0xc3>
c00069a8:	89 f9                	mov    ecx,edi
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 e1 27             	and    ecx,0x27
c00069b1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069b4:	75 1d                	jne    c00069d3 <f_chmod+0xa7>
c00069b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069b9:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069bc:	21 cb                	and    ebx,ecx
c00069be:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069c1:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c8:	e8 a2 cf ff ff       	call   c000396f <store_xdir>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	75 1e                	jne    c00069ef <f_chmod+0xc3>
c00069d1:	eb 13                	jmp    c00069e6 <f_chmod+0xba>
c00069d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069d7:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069da:	21 cb                	and    ebx,ecx
c00069dc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069df:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ea:	e8 2b d9 ff ff       	call   c000431a <sync_fs>
c00069ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069f3:	83 ec 0c             	sub    esp,0xc
c00069f6:	56                   	push   esi
c00069f7:	e8 5e 18 00 00       	call   c000825a <ff_memfree>
c00069fc:	83 c4 10             	add    esp,0x10
c00069ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a03:	83 c4 60             	add    esp,0x60
c0006a06:	5b                   	pop    ebx
c0006a07:	5e                   	pop    esi
c0006a08:	5f                   	pop    edi
c0006a09:	c3                   	ret    

c0006a0a <f_utime>:
c0006a0a:	56                   	push   esi
c0006a0b:	b9 02 00 00 00       	mov    ecx,0x2
c0006a10:	53                   	push   ebx
c0006a11:	83 ec 64             	sub    esp,0x64
c0006a14:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a18:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a1c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a20:	e8 7c ba ff ff       	call   c00024a1 <mount_volume>
c0006a25:	85 c0                	test   eax,eax
c0006a27:	0f 85 b5 00 00 00    	jne    c0006ae2 <f_utime+0xd8>
c0006a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a31:	83 ec 0c             	sub    esp,0xc
c0006a34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a38:	68 60 04 00 00       	push   0x460
c0006a3d:	e8 02 18 00 00       	call   c0008244 <ff_memalloc>
c0006a42:	83 c4 10             	add    esp,0x10
c0006a45:	89 c3                	mov    ebx,eax
c0006a47:	b8 11 00 00 00       	mov    eax,0x11
c0006a4c:	85 db                	test   ebx,ebx
c0006a4e:	0f 84 8e 00 00 00    	je     c0006ae2 <f_utime+0xd8>
c0006a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a58:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a5e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a64:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a68:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a6c:	e8 a6 e1 ff ff       	call   c0004c17 <follow_path>
c0006a71:	85 c0                	test   eax,eax
c0006a73:	75 59                	jne    c0006ace <f_utime+0xc4>
c0006a75:	b8 06 00 00 00       	mov    eax,0x6
c0006a7a:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a7f:	75 4d                	jne    c0006ace <f_utime+0xc4>
c0006a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a85:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a89:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a8d:	c1 e2 10             	shl    edx,0x10
c0006a90:	09 ca                	or     edx,ecx
c0006a92:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a95:	75 1a                	jne    c0006ab1 <f_utime+0xa7>
c0006a97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a9a:	83 c0 0c             	add    eax,0xc
c0006a9d:	e8 e5 af ff ff       	call   c0001a87 <st_dword>
c0006aa2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa6:	e8 c4 ce ff ff       	call   c000396f <store_xdir>
c0006aab:	85 c0                	test   eax,eax
c0006aad:	75 1f                	jne    c0006ace <f_utime+0xc4>
c0006aaf:	eb 14                	jmp    c0006ac5 <f_utime+0xbb>
c0006ab1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ab5:	83 c0 16             	add    eax,0x16
c0006ab8:	e8 ca af ff ff       	call   c0001a87 <st_dword>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	e8 4c d8 ff ff       	call   c000431a <sync_fs>
c0006ace:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ad2:	83 ec 0c             	sub    esp,0xc
c0006ad5:	53                   	push   ebx
c0006ad6:	e8 7f 17 00 00       	call   c000825a <ff_memfree>
c0006adb:	83 c4 10             	add    esp,0x10
c0006ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ae2:	83 c4 64             	add    esp,0x64
c0006ae5:	5b                   	pop    ebx
c0006ae6:	5e                   	pop    esi
c0006ae7:	c3                   	ret    

c0006ae8 <f_getlabel>:
c0006ae8:	55                   	push   ebp
c0006ae9:	31 c9                	xor    ecx,ecx
c0006aeb:	57                   	push   edi
c0006aec:	56                   	push   esi
c0006aed:	53                   	push   ebx
c0006aee:	83 ec 6c             	sub    esp,0x6c
c0006af1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006af5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006afc:	e8 a0 b9 ff ff       	call   c00024a1 <mount_volume>
c0006b01:	89 c6                	mov    esi,eax
c0006b03:	85 c0                	test   eax,eax
c0006b05:	0f 85 c1 01 00 00    	jne    c0006ccc <f_getlabel+0x1e4>
c0006b0b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b13:	0f 84 5f 01 00 00    	je     c0006c78 <f_getlabel+0x190>
c0006b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b1d:	31 d2                	xor    edx,edx
c0006b1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b23:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2f:	e8 39 c4 ff ff       	call   c0002f6d <dir_sdi>
c0006b34:	85 c0                	test   eax,eax
c0006b36:	0f 85 2d 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b3c:	ba 01 00 00 00       	mov    edx,0x1
c0006b41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b45:	e8 33 cc ff ff       	call   c000377d <dir_read>
c0006b4a:	85 c0                	test   eax,eax
c0006b4c:	0f 85 17 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b59:	74 09                	je     c0006b64 <f_getlabel+0x7c>
c0006b5b:	31 db                	xor    ebx,ebx
c0006b5d:	31 c9                	xor    ecx,ecx
c0006b5f:	e9 c8 00 00 00       	jmp    c0006c2c <f_getlabel+0x144>
c0006b64:	31 ed                	xor    ebp,ebp
c0006b66:	31 db                	xor    ebx,ebx
c0006b68:	31 ff                	xor    edi,edi
c0006b6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b72:	39 fa                	cmp    edx,edi
c0006b74:	76 4b                	jbe    c0006bc1 <f_getlabel+0xd9>
c0006b76:	47                   	inc    edi
c0006b77:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b7a:	01 d0                	add    eax,edx
c0006b7c:	e8 90 ae ff ff       	call   c0001a11 <ld_word>
c0006b81:	66 85 ed             	test   bp,bp
c0006b84:	75 0d                	jne    c0006b93 <f_getlabel+0xab>
c0006b86:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b8c:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b91:	76 28                	jbe    c0006bbb <f_getlabel+0xd3>
c0006b93:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b9a:	89 e9                	mov    ecx,ebp
c0006b9c:	01 da                	add    edx,ebx
c0006b9e:	c1 e1 10             	shl    ecx,0x10
c0006ba1:	0f b7 c0             	movzx  eax,ax
c0006ba4:	09 c8                	or     eax,ecx
c0006ba6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bab:	e8 01 b0 ff ff       	call   c0001bb1 <put_utf>
c0006bb0:	84 c0                	test   al,al
c0006bb2:	74 0b                	je     c0006bbf <f_getlabel+0xd7>
c0006bb4:	0f b6 c0             	movzx  eax,al
c0006bb7:	01 c3                	add    ebx,eax
c0006bb9:	31 c0                	xor    eax,eax
c0006bbb:	89 c5                	mov    ebp,eax
c0006bbd:	eb ab                	jmp    c0006b6a <f_getlabel+0x82>
c0006bbf:	31 db                	xor    ebx,ebx
c0006bc1:	66 85 ed             	test   bp,bp
c0006bc4:	74 02                	je     c0006bc8 <f_getlabel+0xe0>
c0006bc6:	31 db                	xor    ebx,ebx
c0006bc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bcf:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bd3:	e9 a0 00 00 00       	jmp    c0006c78 <f_getlabel+0x190>
c0006bd8:	83 ff 0b             	cmp    edi,0xb
c0006bdb:	74 11                	je     c0006bee <f_getlabel+0x106>
c0006bdd:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006be2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006be6:	8d 79 02             	lea    edi,[ecx+0x2]
c0006be9:	c1 e0 08             	shl    eax,0x8
c0006bec:	09 c2                	or     edx,eax
c0006bee:	0f b7 d2             	movzx  edx,dx
c0006bf1:	50                   	push   eax
c0006bf2:	50                   	push   eax
c0006bf3:	68 b5 01 00 00       	push   0x1b5
c0006bf8:	52                   	push   edx
c0006bf9:	e8 03 17 00 00       	call   c0008301 <ff_oem2uni>
c0006bfe:	83 c4 10             	add    esp,0x10
c0006c01:	66 85 c0             	test   ax,ax
c0006c04:	74 46                	je     c0006c4c <f_getlabel+0x164>
c0006c06:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c0d:	0f b7 c0             	movzx  eax,ax
c0006c10:	01 da                	add    edx,ebx
c0006c12:	b9 04 00 00 00       	mov    ecx,0x4
c0006c17:	e8 95 af ff ff       	call   c0001bb1 <put_utf>
c0006c1c:	84 c0                	test   al,al
c0006c1e:	74 2c                	je     c0006c4c <f_getlabel+0x164>
c0006c20:	0f b6 c0             	movzx  eax,al
c0006c23:	01 c3                	add    ebx,eax
c0006c25:	83 ff 0b             	cmp    edi,0xb
c0006c28:	74 24                	je     c0006c4e <f_getlabel+0x166>
c0006c2a:	89 f9                	mov    ecx,edi
c0006c2c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c30:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c33:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c38:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c41:	e8 9f ae ff ff       	call   c0001ae5 <dbc_1st>
c0006c46:	85 c0                	test   eax,eax
c0006c48:	74 a4                	je     c0006bee <f_getlabel+0x106>
c0006c4a:	eb 8c                	jmp    c0006bd8 <f_getlabel+0xf0>
c0006c4c:	31 db                	xor    ebx,ebx
c0006c4e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c55:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c58:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c5f:	74 17                	je     c0006c78 <f_getlabel+0x190>
c0006c61:	4b                   	dec    ebx
c0006c62:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c65:	74 ee                	je     c0006c55 <f_getlabel+0x16d>
c0006c67:	eb 0f                	jmp    c0006c78 <f_getlabel+0x190>
c0006c69:	83 f8 04             	cmp    eax,0x4
c0006c6c:	75 5c                	jne    c0006cca <f_getlabel+0x1e2>
c0006c6e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c78:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c80:	74 4a                	je     c0006ccc <f_getlabel+0x1e4>
c0006c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c86:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c89:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c8c:	e8 5e b5 ff ff       	call   c00021ef <move_window>
c0006c91:	89 c6                	mov    esi,eax
c0006c93:	85 c0                	test   eax,eax
c0006c95:	75 35                	jne    c0006ccc <f_getlabel+0x1e4>
c0006c97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c9b:	b8 43 00 00 00       	mov    eax,0x43
c0006ca0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ca2:	80 f9 03             	cmp    cl,0x3
c0006ca5:	74 0f                	je     c0006cb6 <f_getlabel+0x1ce>
c0006ca7:	31 c0                	xor    eax,eax
c0006ca9:	80 f9 04             	cmp    cl,0x4
c0006cac:	0f 94 c0             	sete   al
c0006caf:	48                   	dec    eax
c0006cb0:	83 e0 c3             	and    eax,0xffffffc3
c0006cb3:	83 c0 64             	add    eax,0x64
c0006cb6:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cba:	e8 5f ad ff ff       	call   c0001a1e <ld_dword>
c0006cbf:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cc6:	89 07                	mov    DWORD PTR [edi],eax
c0006cc8:	eb 02                	jmp    c0006ccc <f_getlabel+0x1e4>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	83 c4 6c             	add    esp,0x6c
c0006ccf:	89 f0                	mov    eax,esi
c0006cd1:	5b                   	pop    ebx
c0006cd2:	5e                   	pop    esi
c0006cd3:	5f                   	pop    edi
c0006cd4:	5d                   	pop    ebp
c0006cd5:	c3                   	ret    

c0006cd6 <f_setlabel>:
c0006cd6:	56                   	push   esi
c0006cd7:	b9 02 00 00 00       	mov    ecx,0x2
c0006cdc:	53                   	push   ebx
c0006cdd:	83 ec 74             	sub    esp,0x74
c0006ce0:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ce4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ceb:	e8 b1 b7 ff ff       	call   c00024a1 <mount_volume>
c0006cf0:	89 c6                	mov    esi,eax
c0006cf2:	85 c0                	test   eax,eax
c0006cf4:	0f 85 41 02 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006cfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cfe:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d01:	0f 85 8e 00 00 00    	jne    c0006d95 <f_setlabel+0xbf>
c0006d07:	b9 16 00 00 00       	mov    ecx,0x16
c0006d0c:	31 d2                	xor    edx,edx
c0006d0e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d12:	31 db                	xor    ebx,ebx
c0006d14:	e8 8c ad ff ff       	call   c0001aa5 <mem_set>
c0006d19:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d20:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d23:	0f 86 0a 01 00 00    	jbe    c0006e33 <f_setlabel+0x15d>
c0006d29:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d30:	e8 b6 ad ff ff       	call   c0001aeb <tchar2uni>
c0006d35:	89 c6                	mov    esi,eax
c0006d37:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d3c:	76 2a                	jbe    c0006d68 <f_setlabel+0x92>
c0006d3e:	83 f8 ff             	cmp    eax,0xffffffff
c0006d41:	74 05                	je     c0006d48 <f_setlabel+0x72>
c0006d43:	83 fb 09             	cmp    ebx,0x9
c0006d46:	76 0a                	jbe    c0006d52 <f_setlabel+0x7c>
c0006d48:	be 06 00 00 00       	mov    esi,0x6
c0006d4d:	e9 e9 01 00 00       	jmp    c0006f3b <f_setlabel+0x265>
c0006d52:	89 c2                	mov    edx,eax
c0006d54:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d58:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d5b:	c1 ea 10             	shr    edx,0x10
c0006d5e:	01 c8                	add    eax,ecx
c0006d60:	43                   	inc    ebx
c0006d61:	e8 1d ad ff ff       	call   c0001a83 <st_word>
c0006d66:	eb 04                	jmp    c0006d6c <f_setlabel+0x96>
c0006d68:	85 c0                	test   eax,eax
c0006d6a:	74 dc                	je     c0006d48 <f_setlabel+0x72>
c0006d6c:	89 f2                	mov    edx,esi
c0006d6e:	b8 b7 70 02 c0       	mov    eax,0xc00270b7
c0006d73:	e8 5b ad ff ff       	call   c0001ad3 <chk_chr>
c0006d78:	85 c0                	test   eax,eax
c0006d7a:	75 cc                	jne    c0006d48 <f_setlabel+0x72>
c0006d7c:	83 fb 0a             	cmp    ebx,0xa
c0006d7f:	77 c7                	ja     c0006d48 <f_setlabel+0x72>
c0006d81:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d84:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d88:	0f b7 d6             	movzx  edx,si
c0006d8b:	01 c8                	add    eax,ecx
c0006d8d:	43                   	inc    ebx
c0006d8e:	e8 f0 ac ff ff       	call   c0001a83 <st_word>
c0006d93:	eb 84                	jmp    c0006d19 <f_setlabel+0x43>
c0006d95:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d9a:	ba 20 00 00 00       	mov    edx,0x20
c0006d9f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006da3:	31 db                	xor    ebx,ebx
c0006da5:	e8 fb ac ff ff       	call   c0001aa5 <mem_set>
c0006daa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006db1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006db4:	76 60                	jbe    c0006e16 <f_setlabel+0x140>
c0006db6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dbd:	e8 29 ad ff ff       	call   c0001aeb <tchar2uni>
c0006dc2:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dc7:	0f 87 7b ff ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006dcd:	83 ec 0c             	sub    esp,0xc
c0006dd0:	50                   	push   eax
c0006dd1:	e8 97 15 00 00       	call   c000836d <ff_wtoupper>
c0006dd6:	5a                   	pop    edx
c0006dd7:	59                   	pop    ecx
c0006dd8:	68 b5 01 00 00       	push   0x1b5
c0006ddd:	50                   	push   eax
c0006dde:	e8 8e 14 00 00       	call   c0008271 <ff_uni2oem>
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	89 c6                	mov    esi,eax
c0006de8:	66 85 c0             	test   ax,ax
c0006deb:	0f 84 57 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006df1:	0f b7 d0             	movzx  edx,ax
c0006df4:	b8 b0 70 02 c0       	mov    eax,0xc00270b0
c0006df9:	e8 d5 ac ff ff       	call   c0001ad3 <chk_chr>
c0006dfe:	85 c0                	test   eax,eax
c0006e00:	0f 85 42 ff ff ff    	jne    c0006d48 <f_setlabel+0x72>
c0006e06:	66 81 fe ff 00       	cmp    si,0xff
c0006e0b:	0f 87 14 01 00 00    	ja     c0006f25 <f_setlabel+0x24f>
c0006e11:	e9 fa 00 00 00       	jmp    c0006f10 <f_setlabel+0x23a>
c0006e16:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e1b:	0f 84 27 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006e21:	85 db                	test   ebx,ebx
c0006e23:	74 0e                	je     c0006e33 <f_setlabel+0x15d>
c0006e25:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e28:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e2d:	75 04                	jne    c0006e33 <f_setlabel+0x15d>
c0006e2f:	89 c3                	mov    ebx,eax
c0006e31:	eb ee                	jmp    c0006e21 <f_setlabel+0x14b>
c0006e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e37:	31 d2                	xor    edx,edx
c0006e39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e3d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e49:	e8 1f c1 ff ff       	call   c0002f6d <dir_sdi>
c0006e4e:	89 c6                	mov    esi,eax
c0006e50:	85 c0                	test   eax,eax
c0006e52:	0f 85 e3 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006e58:	ba 01 00 00 00       	mov    edx,0x1
c0006e5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e61:	e8 17 c9 ff ff       	call   c000377d <dir_read>
c0006e66:	85 c0                	test   eax,eax
c0006e68:	75 21                	jne    c0006e8b <f_setlabel+0x1b5>
c0006e6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e6e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e72:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e75:	74 5d                	je     c0006ed4 <f_setlabel+0x1fe>
c0006e77:	85 db                	test   ebx,ebx
c0006e79:	74 0b                	je     c0006e86 <f_setlabel+0x1b0>
c0006e7b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e80:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e84:	eb 70                	jmp    c0006ef6 <f_setlabel+0x220>
c0006e86:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e89:	eb 70                	jmp    c0006efb <f_setlabel+0x225>
c0006e8b:	83 f8 04             	cmp    eax,0x4
c0006e8e:	75 7c                	jne    c0006f0c <f_setlabel+0x236>
c0006e90:	85 db                	test   ebx,ebx
c0006e92:	0f 84 a3 00 00 00    	je     c0006f3b <f_setlabel+0x265>
c0006e98:	ba 01 00 00 00       	mov    edx,0x1
c0006e9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea1:	e8 51 ca ff ff       	call   c00038f7 <dir_alloc>
c0006ea6:	89 c6                	mov    esi,eax
c0006ea8:	85 c0                	test   eax,eax
c0006eaa:	0f 85 8b 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006eb0:	31 d2                	xor    edx,edx
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	b9 20 00 00 00       	mov    ecx,0x20
c0006ebb:	e8 e5 ab ff ff       	call   c0001aa5 <mem_set>
c0006ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ec4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	75 18                	jne    c0006ee5 <f_setlabel+0x20f>
c0006ecd:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ed0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed4:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ed7:	b9 16 00 00 00       	mov    ecx,0x16
c0006edc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee0:	83 c0 02             	add    eax,0x2
c0006ee3:	eb 9b                	jmp    c0006e80 <f_setlabel+0x1aa>
c0006ee5:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ee9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ef2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef6:	e8 95 ab ff ff       	call   c0001a90 <mem_cpy>
c0006efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eff:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f07:	e8 0e d4 ff ff       	call   c000431a <sync_fs>
c0006f0c:	89 c6                	mov    esi,eax
c0006f0e:	eb 2b                	jmp    c0006f3b <f_setlabel+0x265>
c0006f10:	83 fb 0a             	cmp    ebx,0xa
c0006f13:	0f 87 2f fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f1f:	43                   	inc    ebx
c0006f20:	e9 85 fe ff ff       	jmp    c0006daa <f_setlabel+0xd4>
c0006f25:	83 fb 09             	cmp    ebx,0x9
c0006f28:	0f 87 1a fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f2e:	89 f0                	mov    eax,esi
c0006f30:	66 c1 e8 08          	shr    ax,0x8
c0006f34:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f38:	43                   	inc    ebx
c0006f39:	eb de                	jmp    c0006f19 <f_setlabel+0x243>
c0006f3b:	89 f0                	mov    eax,esi
c0006f3d:	83 c4 74             	add    esp,0x74
c0006f40:	5b                   	pop    ebx
c0006f41:	5e                   	pop    esi
c0006f42:	c3                   	ret    

c0006f43 <f_forward>:
c0006f43:	55                   	push   ebp
c0006f44:	57                   	push   edi
c0006f45:	56                   	push   esi
c0006f46:	53                   	push   ebx
c0006f47:	83 ec 2c             	sub    esp,0x2c
c0006f4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f58:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f5c:	89 d8                	mov    eax,ebx
c0006f5e:	e8 b1 b1 ff ff       	call   c0002114 <validate>
c0006f63:	89 c5                	mov    ebp,eax
c0006f65:	85 c0                	test   eax,eax
c0006f67:	0f 85 aa 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f6d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f71:	85 ed                	test   ebp,ebp
c0006f73:	0f 85 9e 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f79:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f7d:	0f 84 8f 01 00 00    	je     c0007112 <f_forward+0x1cf>
c0006f83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f89:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f8c:	bf 00 00 00 00       	mov    edi,0x0
c0006f91:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f94:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f98:	89 d1                	mov    ecx,edx
c0006f9a:	19 f9                	sbb    ecx,edi
c0006f9c:	0f 83 cf 00 00 00    	jae    c0007071 <f_forward+0x12e>
c0006fa2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fa6:	e9 c6 00 00 00       	jmp    c0007071 <f_forward+0x12e>
c0006fab:	50                   	push   eax
c0006fac:	50                   	push   eax
c0006fad:	6a 00                	push   0x0
c0006faf:	6a 00                	push   0x0
c0006fb1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fb5:	83 c4 10             	add    esp,0x10
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	0f 84 57 01 00 00    	je     c0007117 <f_forward+0x1d4>
c0006fc0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fc3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fc7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fca:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fce:	89 d7                	mov    edi,edx
c0006fd0:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fd3:	89 c6                	mov    esi,eax
c0006fd5:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fd9:	21 ce                	and    esi,ecx
c0006fdb:	89 c1                	mov    ecx,eax
c0006fdd:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fe3:	0f 84 98 00 00 00    	je     c0007081 <f_forward+0x13e>
c0006fe9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fed:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006ff0:	89 c8                	mov    eax,ecx
c0006ff2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ff6:	e8 af ac ff ff       	call   c0001caa <clst2sect>
c0006ffb:	89 d7                	mov    edi,edx
c0006ffd:	09 c7                	or     edi,eax
c0006fff:	0f 84 9e 00 00 00    	je     c00070a3 <f_forward+0x160>
c0007005:	31 ff                	xor    edi,edi
c0007007:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000700a:	01 c6                	add    esi,eax
c000700c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007010:	11 d7                	adc    edi,edx
c0007012:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007015:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007018:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000701c:	39 fa                	cmp    edx,edi
c000701e:	0f 85 a2 00 00 00    	jne    c00070c6 <f_forward+0x183>
c0007024:	39 f0                	cmp    eax,esi
c0007026:	0f 85 9a 00 00 00    	jne    c00070c6 <f_forward+0x183>
c000702c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000702f:	ba 00 02 00 00       	mov    edx,0x200
c0007034:	25 ff 01 00 00       	and    eax,0x1ff
c0007039:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000703d:	29 c2                	sub    edx,eax
c000703f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007042:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007045:	39 d1                	cmp    ecx,edx
c0007047:	76 02                	jbe    c000704b <f_forward+0x108>
c0007049:	89 d1                	mov    ecx,edx
c000704b:	8d 73 50             	lea    esi,[ebx+0x50]
c000704e:	52                   	push   edx
c000704f:	01 c6                	add    esi,eax
c0007051:	52                   	push   edx
c0007052:	51                   	push   ecx
c0007053:	56                   	push   esi
c0007054:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007058:	83 c4 10             	add    esp,0x10
c000705b:	85 c0                	test   eax,eax
c000705d:	74 44                	je     c00070a3 <f_forward+0x160>
c000705f:	31 ff                	xor    edi,edi
c0007061:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007064:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007067:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000706b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000706f:	01 07                	add    DWORD PTR [edi],eax
c0007071:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007076:	0f 85 2f ff ff ff    	jne    c0006fab <f_forward+0x68>
c000707c:	e9 96 00 00 00       	jmp    c0007117 <f_forward+0x1d4>
c0007081:	85 f6                	test   esi,esi
c0007083:	0f 85 60 ff ff ff    	jne    c0006fe9 <f_forward+0xa6>
c0007089:	89 d7                	mov    edi,edx
c000708b:	09 c7                	or     edi,eax
c000708d:	75 05                	jne    c0007094 <f_forward+0x151>
c000708f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007092:	eb 0a                	jmp    c000709e <f_forward+0x15b>
c0007094:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007097:	89 d8                	mov    eax,ebx
c0007099:	e8 d9 bc ff ff       	call   c0002d77 <get_fat>
c000709e:	83 f8 01             	cmp    eax,0x1
c00070a1:	77 0b                	ja     c00070ae <f_forward+0x16b>
c00070a3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070a7:	bd 02 00 00 00       	mov    ebp,0x2
c00070ac:	eb 69                	jmp    c0007117 <f_forward+0x1d4>
c00070ae:	83 f8 ff             	cmp    eax,0xffffffff
c00070b1:	75 0b                	jne    c00070be <f_forward+0x17b>
c00070b3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070b7:	bd 01 00 00 00       	mov    ebp,0x1
c00070bc:	eb 59                	jmp    c0007117 <f_forward+0x1d4>
c00070be:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070c1:	e9 23 ff ff ff       	jmp    c0006fe9 <f_forward+0xa6>
c00070c6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070ca:	79 20                	jns    c00070ec <f_forward+0x1a9>
c00070cc:	83 ec 0c             	sub    esp,0xc
c00070cf:	6a 01                	push   0x1
c00070d1:	52                   	push   edx
c00070d2:	50                   	push   eax
c00070d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070db:	50                   	push   eax
c00070dc:	e8 fb a8 ff ff       	call   c00019dc <disk_write>
c00070e1:	83 c4 20             	add    esp,0x20
c00070e4:	85 c0                	test   eax,eax
c00070e6:	75 cb                	jne    c00070b3 <f_forward+0x170>
c00070e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070ec:	83 ec 0c             	sub    esp,0xc
c00070ef:	6a 01                	push   0x1
c00070f1:	57                   	push   edi
c00070f2:	56                   	push   esi
c00070f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ff:	50                   	push   eax
c0007100:	e8 c1 a8 ff ff       	call   c00019c6 <disk_read>
c0007105:	83 c4 20             	add    esp,0x20
c0007108:	85 c0                	test   eax,eax
c000710a:	0f 84 1c ff ff ff    	je     c000702c <f_forward+0xe9>
c0007110:	eb a1                	jmp    c00070b3 <f_forward+0x170>
c0007112:	bd 07 00 00 00       	mov    ebp,0x7
c0007117:	83 c4 2c             	add    esp,0x2c
c000711a:	89 e8                	mov    eax,ebp
c000711c:	5b                   	pop    ebx
c000711d:	5e                   	pop    esi
c000711e:	5f                   	pop    edi
c000711f:	5d                   	pop    ebp
c0007120:	c3                   	ret    

c0007121 <f_mkfs>:
c0007121:	55                   	push   ebp
c0007122:	57                   	push   edi
c0007123:	56                   	push   esi
c0007124:	53                   	push   ebx
c0007125:	bb 0b 00 00 00       	mov    ebx,0xb
c000712a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007130:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007137:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000713e:	e8 b0 ae ff ff       	call   c0001ff3 <get_ldnumber>
c0007143:	85 c0                	test   eax,eax
c0007145:	0f 88 ec 10 00 00    	js     c0008237 <f_mkfs+0x1116>
c000714b:	8b 14 85 60 ba 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd45a0]
c0007152:	85 d2                	test   edx,edx
c0007154:	74 03                	je     c0007159 <f_mkfs+0x38>
c0007156:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007159:	85 f6                	test   esi,esi
c000715b:	75 05                	jne    c0007162 <f_mkfs+0x41>
c000715d:	be a0 70 02 c0       	mov    esi,0xc00270a0
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	0f b6 c0             	movzx  eax,al
c0007168:	bb 03 00 00 00       	mov    ebx,0x3
c000716d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007171:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007175:	e8 49 a8 ff ff       	call   c00019c3 <disk_initialize>
c000717a:	83 c4 10             	add    esp,0x10
c000717d:	a8 01                	test   al,0x1
c000717f:	0f 85 b2 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007185:	bb 0a 00 00 00       	mov    ebx,0xa
c000718a:	a8 04                	test   al,0x4
c000718c:	0f 85 a5 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007192:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007195:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007199:	85 c0                	test   eax,eax
c000719b:	75 20                	jne    c00071bd <f_mkfs+0x9c>
c000719d:	51                   	push   ecx
c000719e:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071a2:	50                   	push   eax
c00071a3:	6a 03                	push   0x3
c00071a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a9:	e8 44 a8 ff ff       	call   c00019f2 <disk_ioctl>
c00071ae:	83 c4 10             	add    esp,0x10
c00071b1:	85 c0                	test   eax,eax
c00071b3:	74 08                	je     c00071bd <f_mkfs+0x9c>
c00071b5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071bd:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071c1:	8d 42 ff             	lea    eax,[edx-0x1]
c00071c4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071c9:	77 04                	ja     c00071cf <f_mkfs+0xae>
c00071cb:	85 c2                	test   edx,eax
c00071cd:	74 08                	je     c00071d7 <f_mkfs+0xb6>
c00071cf:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071d7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071da:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071de:	48                   	dec    eax
c00071df:	3c 01                	cmp    al,0x1
c00071e1:	76 05                	jbe    c00071e8 <f_mkfs+0xc7>
c00071e3:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071e8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071ef:	48                   	dec    eax
c00071f0:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f5:	77 07                	ja     c00071fe <f_mkfs+0xdd>
c00071f7:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071fc:	74 08                	je     c0007206 <f_mkfs+0xe5>
c00071fe:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007206:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007209:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000720f:	77 07                	ja     c0007218 <f_mkfs+0xf7>
c0007211:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007214:	85 d8                	test   eax,ebx
c0007216:	74 02                	je     c000721a <f_mkfs+0xf9>
c0007218:	31 db                	xor    ebx,ebx
c000721a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007225:	77 0a                	ja     c0007231 <f_mkfs+0x110>
c0007227:	bb 11 00 00 00       	mov    ebx,0x11
c000722c:	e9 06 10 00 00       	jmp    c0008237 <f_mkfs+0x1116>
c0007231:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007238:	8b 36                	mov    esi,DWORD PTR [esi]
c000723a:	85 ed                	test   ebp,ebp
c000723c:	75 1e                	jne    c000725c <f_mkfs+0x13b>
c000723e:	83 ec 0c             	sub    esp,0xc
c0007241:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007248:	25 00 fe ff ff       	and    eax,0xfffffe00
c000724d:	50                   	push   eax
c000724e:	e8 f1 0f 00 00       	call   c0008244 <ff_memalloc>
c0007253:	83 c4 10             	add    esp,0x10
c0007256:	89 c5                	mov    ebp,eax
c0007258:	85 c0                	test   eax,eax
c000725a:	74 cb                	je     c0007227 <f_mkfs+0x106>
c000725c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007264:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000726c:	52                   	push   edx
c000726d:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007271:	50                   	push   eax
c0007272:	6a 01                	push   0x1
c0007274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007278:	e8 75 a7 ff ff       	call   c00019f2 <disk_ioctl>
c000727d:	83 c4 10             	add    esp,0x10
c0007280:	85 c0                	test   eax,eax
c0007282:	0f 85 4a 0f 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007288:	89 f1                	mov    ecx,esi
c000728a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007292:	83 e1 0f             	and    ecx,0xf
c0007295:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000729d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072a1:	83 e6 08             	and    esi,0x8
c00072a4:	75 56                	jne    c00072fc <f_mkfs+0x1db>
c00072a6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072aa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072ae:	83 ff 00             	cmp    edi,0x0
c00072b1:	76 20                	jbe    c00072d3 <f_mkfs+0x1b2>
c00072b3:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072b8:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072c0:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072c6:	83 d7 ff             	adc    edi,0xffffffff
c00072c9:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072cd:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072d1:	eb 21                	jmp    c00072f4 <f_mkfs+0x1d3>
c00072d3:	ba 3f 00 00 00       	mov    edx,0x3f
c00072d8:	39 f2                	cmp    edx,esi
c00072da:	19 f8                	sbb    eax,edi
c00072dc:	73 1e                	jae    c00072fc <f_mkfs+0x1db>
c00072de:	83 c6 c1             	add    esi,0xffffffc1
c00072e1:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072e9:	83 d7 ff             	adc    edi,0xffffffff
c00072ec:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072f0:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072fc:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007300:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007304:	89 04 24             	mov    DWORD PTR [esp],eax
c0007307:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000730b:	31 c0                	xor    eax,eax
c000730d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007312:	89 c7                	mov    edi,eax
c0007314:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007317:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000731b:	0f 83 c5 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c0007321:	89 df                	mov    edi,ebx
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000732a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007331:	c1 ef 09             	shr    edi,0x9
c0007334:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007339:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000733d:	74 29                	je     c0007368 <f_mkfs+0x247>
c000733f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007345:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000734a:	0f 97 c2             	seta   dl
c000734d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007350:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007354:	0f 92 c0             	setb   al
c0007357:	08 c2                	or     dl,al
c0007359:	75 5b                	jne    c00073b6 <f_mkfs+0x295>
c000735b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000735f:	83 e0 07             	and    eax,0x7
c0007362:	3c 04                	cmp    al,0x4
c0007364:	74 50                	je     c00073b6 <f_mkfs+0x295>
c0007366:	eb 1b                	jmp    c0007383 <f_mkfs+0x262>
c0007368:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000736d:	0f 87 73 0a 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007373:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007379:	76 08                	jbe    c0007383 <f_mkfs+0x262>
c000737b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007383:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007387:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000738b:	83 e0 01             	and    eax,0x1
c000738e:	80 e1 02             	and    cl,0x2
c0007391:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007395:	74 0d                	je     c00073a4 <f_mkfs+0x283>
c0007397:	84 c0                	test   al,al
c0007399:	0f 84 53 09 00 00    	je     c0007cf2 <f_mkfs+0xbd1>
c000739f:	e9 12 08 00 00       	jmp    c0007bb6 <f_mkfs+0xa95>
c00073a4:	bb 13 00 00 00       	mov    ebx,0x13
c00073a9:	84 c0                	test   al,al
c00073ab:	0f 85 05 08 00 00    	jne    c0007bb6 <f_mkfs+0xa95>
c00073b1:	e9 39 0e 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c00073b6:	31 c0                	xor    eax,eax
c00073b8:	ba ff 0f 00 00       	mov    edx,0xfff
c00073bd:	89 c7                	mov    edi,eax
c00073bf:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073c2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073c6:	0f 83 1a 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00073cc:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073d2:	77 39                	ja     c000740d <f_mkfs+0x2ec>
c00073d4:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073d9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073e1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073e4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073e8:	73 08                	jae    c00073f2 <f_mkfs+0x2d1>
c00073ea:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073f2:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073fa:	b8 00 00 00 00       	mov    eax,0x0
c00073ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007403:	73 08                	jae    c000740d <f_mkfs+0x2ec>
c0007405:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000740d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007411:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007415:	83 c0 20             	add    eax,0x20
c0007418:	83 d2 00             	adc    edx,0x0
c000741b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000741f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007427:	31 d2                	xor    edx,edx
c0007429:	31 ff                	xor    edi,edi
c000742b:	52                   	push   edx
c000742c:	89 fb                	mov    ebx,edi
c000742e:	50                   	push   eax
c000742f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007433:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007437:	e8 f0 d2 01 00       	call   c002472c <__udivdi3>
c000743c:	83 c4 10             	add    esp,0x10
c000743f:	c1 e0 02             	shl    eax,0x2
c0007442:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007446:	05 07 02 00 00       	add    eax,0x207
c000744b:	89 f1                	mov    ecx,esi
c000744d:	c1 e8 09             	shr    eax,0x9
c0007450:	83 c1 ff             	add    ecx,0xffffffff
c0007453:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007457:	83 d3 ff             	adc    ebx,0xffffffff
c000745a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000745e:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007462:	31 d2                	xor    edx,edx
c0007464:	01 c8                	add    eax,ecx
c0007466:	11 da                	adc    edx,ebx
c0007468:	89 c1                	mov    ecx,eax
c000746a:	f7 de                	neg    esi
c000746c:	89 d0                	mov    eax,edx
c000746e:	83 d7 00             	adc    edi,0x0
c0007471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007475:	f7 df                	neg    edi
c0007477:	21 f1                	and    ecx,esi
c0007479:	21 f8                	and    eax,edi
c000747b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000747f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007483:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007487:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000748b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000748f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007492:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007496:	0f ac d0 01          	shrd   eax,edx,0x1
c000749a:	89 df                	mov    edi,ebx
c000749c:	d1 ea                	shr    edx,1
c000749e:	39 c1                	cmp    ecx,eax
c00074a0:	19 d7                	sbb    edi,edx
c00074a2:	0f 83 3e 09 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00074a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ac:	31 d2                	xor    edx,edx
c00074ae:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074b6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074bd:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074c1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074cd:	83 f8 0f             	cmp    eax,0xf
c00074d0:	0f 86 10 09 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c00074d6:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074de:	0f 87 02 09 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c00074e4:	31 d2                	xor    edx,edx
c00074e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074ea:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074f2:	83 c0 07             	add    eax,0x7
c00074f5:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074fd:	c1 e8 03             	shr    eax,0x3
c0007500:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007507:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000750b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000750f:	c1 e0 09             	shl    eax,0x9
c0007512:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007516:	48                   	dec    eax
c0007517:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000751b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000751f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007523:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007527:	31 d2                	xor    edx,edx
c0007529:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000752d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007538:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000753d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007541:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007545:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007549:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000754d:	31 ff                	xor    edi,edi
c000754f:	31 f6                	xor    esi,esi
c0007551:	31 db                	xor    ebx,ebx
c0007553:	85 ff                	test   edi,edi
c0007555:	74 05                	je     c000755c <f_mkfs+0x43b>
c0007557:	4f                   	dec    edi
c0007558:	74 44                	je     c000759e <f_mkfs+0x47d>
c000755a:	eb 4f                	jmp    c00075ab <f_mkfs+0x48a>
c000755c:	83 ec 0c             	sub    esp,0xc
c000755f:	0f b7 c3             	movzx  eax,bx
c0007562:	50                   	push   eax
c0007563:	e8 05 0e 00 00       	call   c000836d <ff_wtoupper>
c0007568:	83 c4 10             	add    esp,0x10
c000756b:	89 c1                	mov    ecx,eax
c000756d:	8d 53 01             	lea    edx,[ebx+0x1]
c0007570:	66 39 c3             	cmp    bx,ax
c0007573:	75 3e                	jne    c00075b3 <f_mkfs+0x492>
c0007575:	be 01 00 00 00       	mov    esi,0x1
c000757a:	89 df                	mov    edi,ebx
c000757c:	66 01 f7             	add    di,si
c000757f:	75 07                	jne    c0007588 <f_mkfs+0x467>
c0007581:	83 fe 7f             	cmp    esi,0x7f
c0007584:	77 31                	ja     c00075b7 <f_mkfs+0x496>
c0007586:	eb 16                	jmp    c000759e <f_mkfs+0x47d>
c0007588:	83 ec 0c             	sub    esp,0xc
c000758b:	0f b7 ff             	movzx  edi,di
c000758e:	57                   	push   edi
c000758f:	e8 d9 0d 00 00       	call   c000836d <ff_wtoupper>
c0007594:	83 c4 10             	add    esp,0x10
c0007597:	39 c7                	cmp    edi,eax
c0007599:	75 e6                	jne    c0007581 <f_mkfs+0x460>
c000759b:	46                   	inc    esi
c000759c:	eb dc                	jmp    c000757a <f_mkfs+0x459>
c000759e:	31 c0                	xor    eax,eax
c00075a0:	89 d9                	mov    ecx,ebx
c00075a2:	4e                   	dec    esi
c00075a3:	0f 95 c0             	setne  al
c00075a6:	43                   	inc    ebx
c00075a7:	89 c7                	mov    edi,eax
c00075a9:	eb 14                	jmp    c00075bf <f_mkfs+0x49e>
c00075ab:	89 f1                	mov    ecx,esi
c00075ad:	01 f3                	add    ebx,esi
c00075af:	31 ff                	xor    edi,edi
c00075b1:	eb 0c                	jmp    c00075bf <f_mkfs+0x49e>
c00075b3:	89 d3                	mov    ebx,edx
c00075b5:	eb 08                	jmp    c00075bf <f_mkfs+0x49e>
c00075b7:	bf 02 00 00 00       	mov    edi,0x2
c00075bc:	83 c9 ff             	or     ecx,0xffffffff
c00075bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c6:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075ca:	0f b6 c1             	movzx  eax,cl
c00075cd:	e8 3a a9 ff ff       	call   c0001f0c <xsum32>
c00075d2:	66 c1 e9 08          	shr    cx,0x8
c00075d6:	89 c2                	mov    edx,eax
c00075d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075db:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075df:	0f b7 c1             	movzx  eax,cx
c00075e2:	e8 25 a9 ff ff       	call   c0001f0c <xsum32>
c00075e7:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075ec:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075f0:	66 85 db             	test   bx,bx
c00075f3:	74 1f                	je     c0007614 <f_mkfs+0x4f3>
c00075f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f8:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075ff:	83 c0 02             	add    eax,0x2
c0007602:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007608:	39 c2                	cmp    edx,eax
c000760a:	74 08                	je     c0007614 <f_mkfs+0x4f3>
c000760c:	89 04 24             	mov    DWORD PTR [esp],eax
c000760f:	e9 3f ff ff ff       	jmp    c0007553 <f_mkfs+0x432>
c0007614:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007617:	83 ec 0c             	sub    esp,0xc
c000761a:	05 01 02 00 00       	add    eax,0x201
c000761f:	c1 e8 09             	shr    eax,0x9
c0007622:	50                   	push   eax
c0007623:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007627:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762f:	55                   	push   ebp
c0007630:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007634:	e8 a3 a3 ff ff       	call   c00019dc <disk_write>
c0007639:	83 c4 20             	add    esp,0x20
c000763c:	85 c0                	test   eax,eax
c000763e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007641:	0f 85 8b 0b 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007647:	89 d0                	mov    eax,edx
c0007649:	31 d2                	xor    edx,edx
c000764b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000764f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007653:	66 85 db             	test   bx,bx
c0007656:	74 04                	je     c000765c <f_mkfs+0x53b>
c0007658:	31 c0                	xor    eax,eax
c000765a:	eb b0                	jmp    c000760c <f_mkfs+0x4eb>
c000765c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007660:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007664:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007668:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000766e:	31 d2                	xor    edx,edx
c0007670:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000767b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000767f:	c1 eb 09             	shr    ebx,0x9
c0007682:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000768d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007695:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007699:	8d 70 01             	lea    esi,[eax+0x1]
c000769c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076a4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076ab:	31 d2                	xor    edx,edx
c00076ad:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00076b5:	89 c1                	mov    ecx,eax
c00076b7:	89 e8                	mov    eax,ebp
c00076b9:	e8 e7 a3 ff ff       	call   c0001aa5 <mem_set>
c00076be:	31 c0                	xor    eax,eax
c00076c0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c3:	76 10                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076c5:	83 fe 07             	cmp    esi,0x7
c00076c8:	76 0b                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076ca:	40                   	inc    eax
c00076cb:	83 ee 08             	sub    esi,0x8
c00076ce:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076d3:	eb eb                	jmp    c00076c0 <f_mkfs+0x59f>
c00076d5:	b2 01                	mov    dl,0x1
c00076d7:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076db:	85 f6                	test   esi,esi
c00076dd:	74 0c                	je     c00076eb <f_mkfs+0x5ca>
c00076df:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076e2:	76 07                	jbe    c00076eb <f_mkfs+0x5ca>
c00076e4:	08 11                	or     BYTE PTR [ecx],dl
c00076e6:	4e                   	dec    esi
c00076e7:	d1 e2                	shl    edx,1
c00076e9:	eb f0                	jmp    c00076db <f_mkfs+0x5ba>
c00076eb:	89 df                	mov    edi,ebx
c00076ed:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076f1:	76 04                	jbe    c00076f7 <f_mkfs+0x5d6>
c00076f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076f7:	83 ec 0c             	sub    esp,0xc
c00076fa:	57                   	push   edi
c00076fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007703:	55                   	push   ebp
c0007704:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007708:	e8 cf a2 ff ff       	call   c00019dc <disk_write>
c000770d:	83 c4 20             	add    esp,0x20
c0007710:	85 c0                	test   eax,eax
c0007712:	0f 85 ba 0a 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007718:	31 d2                	xor    edx,edx
c000771a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000771e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007722:	29 fb                	sub    ebx,edi
c0007724:	0f 85 7a ff ff ff    	jne    c00076a4 <f_mkfs+0x583>
c000772a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000772e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007736:	31 f6                	xor    esi,esi
c0007738:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000773c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000773f:	31 d2                	xor    edx,edx
c0007741:	89 e8                	mov    eax,ebp
c0007743:	e8 5d a3 ff ff       	call   c0001aa5 <mem_set>
c0007748:	31 c9                	xor    ecx,ecx
c000774a:	85 db                	test   ebx,ebx
c000774c:	75 40                	jne    c000778e <f_mkfs+0x66d>
c000774e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007753:	89 e8                	mov    eax,ebp
c0007755:	bb 02 00 00 00       	mov    ebx,0x2
c000775a:	e8 28 a3 ff ff       	call   c0001a87 <st_dword>
c000775f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007762:	83 ca ff             	or     edx,0xffffffff
c0007765:	e8 1d a3 ff ff       	call   c0001a87 <st_dword>
c000776a:	b9 08 00 00 00       	mov    ecx,0x8
c000776f:	eb 1d                	jmp    c000778e <f_mkfs+0x66d>
c0007771:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007774:	76 3b                	jbe    c00077b1 <f_mkfs+0x690>
c0007776:	43                   	inc    ebx
c0007777:	83 fe 01             	cmp    esi,0x1
c000777a:	89 da                	mov    edx,ebx
c000777c:	77 03                	ja     c0007781 <f_mkfs+0x660>
c000777e:	83 ca ff             	or     edx,0xffffffff
c0007781:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007785:	4e                   	dec    esi
c0007786:	e8 fc a2 ff ff       	call   c0001a87 <st_dword>
c000778b:	83 c1 04             	add    ecx,0x4
c000778e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007792:	85 f6                	test   esi,esi
c0007794:	75 db                	jne    c0007771 <f_mkfs+0x650>
c0007796:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000779b:	77 14                	ja     c00077b1 <f_mkfs+0x690>
c000779d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077a1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077a8:	85 f6                	test   esi,esi
c00077aa:	74 05                	je     c00077b1 <f_mkfs+0x690>
c00077ac:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077af:	77 dd                	ja     c000778e <f_mkfs+0x66d>
c00077b1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077b9:	39 cf                	cmp    edi,ecx
c00077bb:	76 02                	jbe    c00077bf <f_mkfs+0x69e>
c00077bd:	89 cf                	mov    edi,ecx
c00077bf:	83 ec 0c             	sub    esp,0xc
c00077c2:	57                   	push   edi
c00077c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077c7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077cb:	55                   	push   ebp
c00077cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d0:	e8 07 a2 ff ff       	call   c00019dc <disk_write>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	85 c0                	test   eax,eax
c00077da:	0f 85 f2 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00077e0:	31 d2                	xor    edx,edx
c00077e2:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077e6:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077ea:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077ee:	0f 85 48 ff ff ff    	jne    c000773c <f_mkfs+0x61b>
c00077f4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077f7:	31 d2                	xor    edx,edx
c00077f9:	89 e8                	mov    eax,ebp
c00077fb:	31 ff                	xor    edi,edi
c00077fd:	e8 a3 a2 ff ff       	call   c0001aa5 <mem_set>
c0007802:	8d 45 34             	lea    eax,[ebp+0x34]
c0007805:	ba 02 00 00 00       	mov    edx,0x2
c000780a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000780e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007812:	e8 70 a2 ff ff       	call   c0001a87 <st_dword>
c0007817:	8d 45 38             	lea    eax,[ebp+0x38]
c000781a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000781e:	e8 64 a2 ff ff       	call   c0001a87 <st_dword>
c0007823:	8d 45 44             	lea    eax,[ebp+0x44]
c0007826:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000782a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000782e:	e8 54 a2 ff ff       	call   c0001a87 <st_dword>
c0007833:	8d 45 54             	lea    eax,[ebp+0x54]
c0007836:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000783a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000783e:	83 c2 02             	add    edx,0x2
c0007841:	e8 41 a2 ff ff       	call   c0001a87 <st_dword>
c0007846:	8d 45 58             	lea    eax,[ebp+0x58]
c0007849:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000784d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007851:	e8 31 a2 ff ff       	call   c0001a87 <st_dword>
c0007856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000785a:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000785f:	89 c6                	mov    esi,eax
c0007861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007865:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007869:	89 04 24             	mov    DWORD PTR [esp],eax
c000786c:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007870:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007873:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007877:	39 cb                	cmp    ebx,ecx
c0007879:	76 02                	jbe    c000787d <f_mkfs+0x75c>
c000787b:	89 cb                	mov    ebx,ecx
c000787d:	83 ec 0c             	sub    esp,0xc
c0007880:	53                   	push   ebx
c0007881:	57                   	push   edi
c0007882:	56                   	push   esi
c0007883:	55                   	push   ebp
c0007884:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007888:	e8 4f a1 ff ff       	call   c00019dc <disk_write>
c000788d:	83 c4 20             	add    esp,0x20
c0007890:	85 c0                	test   eax,eax
c0007892:	0f 85 3a 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007898:	31 d2                	xor    edx,edx
c000789a:	b9 00 02 00 00       	mov    ecx,0x200
c000789f:	89 e8                	mov    eax,ebp
c00078a1:	e8 ff a1 ff ff       	call   c0001aa5 <mem_set>
c00078a6:	31 d2                	xor    edx,edx
c00078a8:	01 de                	add    esi,ebx
c00078aa:	11 d7                	adc    edi,edx
c00078ac:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078af:	75 bf                	jne    c0007870 <f_mkfs+0x74f>
c00078b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078b9:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078c1:	b9 00 02 00 00       	mov    ecx,0x200
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	89 e8                	mov    eax,ebp
c00078ca:	e8 d6 a1 ff ff       	call   c0001aa5 <mem_set>
c00078cf:	b9 0b 00 00 00       	mov    ecx,0xb
c00078d4:	ba 80 71 02 c0       	mov    edx,0xc0027180
c00078d9:	89 e8                	mov    eax,ebp
c00078db:	e8 b0 a1 ff ff       	call   c0001a90 <mem_cpy>
c00078e0:	8d 45 40             	lea    eax,[ebp+0x40]
c00078e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078eb:	e8 9a a1 ff ff       	call   c0001a8a <st_qword>
c00078f0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078f4:	8d 45 48             	lea    eax,[ebp+0x48]
c00078f7:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078fb:	e8 8a a1 ff ff       	call   c0001a8a <st_qword>
c0007900:	8d 45 50             	lea    eax,[ebp+0x50]
c0007903:	ba 20 00 00 00       	mov    edx,0x20
c0007908:	e8 7a a1 ff ff       	call   c0001a87 <st_dword>
c000790d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007911:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007915:	e8 6d a1 ff ff       	call   c0001a87 <st_dword>
c000791a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007926:	e8 5c a1 ff ff       	call   c0001a87 <st_dword>
c000792b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000792e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007932:	e8 50 a1 ff ff       	call   c0001a87 <st_dword>
c0007937:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000793b:	8d 50 02             	lea    edx,[eax+0x2]
c000793e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007941:	e8 41 a1 ff ff       	call   c0001a87 <st_dword>
c0007946:	8d 45 64             	lea    eax,[ebp+0x64]
c0007949:	ba 00 00 21 50       	mov    edx,0x50210000
c000794e:	e8 34 a1 ff ff       	call   c0001a87 <st_dword>
c0007953:	8d 45 68             	lea    eax,[ebp+0x68]
c0007956:	ba 00 01 00 00       	mov    edx,0x100
c000795b:	e8 23 a1 ff ff       	call   c0001a83 <st_word>
c0007960:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007964:	b8 0a 00 00 00       	mov    eax,0xa
c0007969:	48                   	dec    eax
c000796a:	74 05                	je     c0007971 <f_mkfs+0x850>
c000796c:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000796f:	eb f8                	jmp    c0007969 <f_mkfs+0x848>
c0007971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007975:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007979:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000797d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007981:	74 05                	je     c0007988 <f_mkfs+0x867>
c0007983:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007986:	eb f5                	jmp    c000797d <f_mkfs+0x85c>
c0007988:	8d 45 78             	lea    eax,[ebp+0x78]
c000798b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007990:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007996:	31 db                	xor    ebx,ebx
c0007998:	e8 e6 a0 ff ff       	call   c0001a83 <st_word>
c000799d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079a3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00079ab:	e8 d3 a0 ff ff       	call   c0001a83 <st_word>
c00079b0:	31 c9                	xor    ecx,ecx
c00079b2:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079b5:	83 f8 01             	cmp    eax,0x1
c00079b8:	76 13                	jbe    c00079cd <f_mkfs+0x8ac>
c00079ba:	83 f9 70             	cmp    ecx,0x70
c00079bd:	74 0e                	je     c00079cd <f_mkfs+0x8ac>
c00079bf:	89 da                	mov    edx,ebx
c00079c1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079c6:	e8 41 a5 ff ff       	call   c0001f0c <xsum32>
c00079cb:	89 c3                	mov    ebx,eax
c00079cd:	41                   	inc    ecx
c00079ce:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079d4:	75 dc                	jne    c00079b2 <f_mkfs+0x891>
c00079d6:	89 f0                	mov    eax,esi
c00079d8:	89 fa                	mov    edx,edi
c00079da:	83 c0 01             	add    eax,0x1
c00079dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079e1:	83 d2 00             	adc    edx,0x0
c00079e4:	83 ec 0c             	sub    esp,0xc
c00079e7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079eb:	6a 01                	push   0x1
c00079ed:	57                   	push   edi
c00079ee:	56                   	push   esi
c00079ef:	55                   	push   ebp
c00079f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079f4:	e8 e3 9f ff ff       	call   c00019dc <disk_write>
c00079f9:	83 c4 20             	add    esp,0x20
c00079fc:	85 c0                	test   eax,eax
c00079fe:	0f 85 ce 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a04:	31 d2                	xor    edx,edx
c0007a06:	b9 00 02 00 00       	mov    ecx,0x200
c0007a0b:	89 e8                	mov    eax,ebp
c0007a0d:	e8 93 a0 ff ff       	call   c0001aa5 <mem_set>
c0007a12:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a1a:	e8 64 a0 ff ff       	call   c0001a83 <st_word>
c0007a1f:	89 f0                	mov    eax,esi
c0007a21:	89 fa                	mov    edx,edi
c0007a23:	83 c0 09             	add    eax,0x9
c0007a26:	83 d2 00             	adc    edx,0x0
c0007a29:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a30:	31 c9                	xor    ecx,ecx
c0007a32:	41                   	inc    ecx
c0007a33:	89 da                	mov    edx,ebx
c0007a35:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a3a:	e8 cd a4 ff ff       	call   c0001f0c <xsum32>
c0007a3f:	89 c3                	mov    ebx,eax
c0007a41:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a47:	75 e9                	jne    c0007a32 <f_mkfs+0x911>
c0007a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a4d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a51:	83 c0 01             	add    eax,0x1
c0007a54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a58:	83 d2 00             	adc    edx,0x0
c0007a5b:	83 ec 0c             	sub    esp,0xc
c0007a5e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a62:	6a 01                	push   0x1
c0007a64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a6c:	55                   	push   ebp
c0007a6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a71:	e8 66 9f ff ff       	call   c00019dc <disk_write>
c0007a76:	83 c4 20             	add    esp,0x20
c0007a79:	85 c0                	test   eax,eax
c0007a7b:	0f 85 51 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a85:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a89:	75 09                	jne    c0007a94 <f_mkfs+0x973>
c0007a8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a8e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a92:	74 12                	je     c0007aa6 <f_mkfs+0x985>
c0007a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007aa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aa4:	eb 8a                	jmp    c0007a30 <f_mkfs+0x90f>
c0007aa6:	31 d2                	xor    edx,edx
c0007aa8:	b9 00 02 00 00       	mov    ecx,0x200
c0007aad:	89 e8                	mov    eax,ebp
c0007aaf:	e8 f1 9f ff ff       	call   c0001aa5 <mem_set>
c0007ab4:	83 c6 0b             	add    esi,0xb
c0007ab7:	83 d7 00             	adc    edi,0x0
c0007aba:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007abe:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ac2:	31 c9                	xor    ecx,ecx
c0007ac4:	41                   	inc    ecx
c0007ac5:	89 da                	mov    edx,ebx
c0007ac7:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007acc:	e8 3b a4 ff ff       	call   c0001f0c <xsum32>
c0007ad1:	89 c3                	mov    ebx,eax
c0007ad3:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ad9:	75 e9                	jne    c0007ac4 <f_mkfs+0x9a3>
c0007adb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ade:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ae2:	83 c6 01             	add    esi,0x1
c0007ae5:	83 d7 00             	adc    edi,0x0
c0007ae8:	83 ec 0c             	sub    esp,0xc
c0007aeb:	6a 01                	push   0x1
c0007aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af5:	55                   	push   ebp
c0007af6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007afa:	e8 dd 9e ff ff       	call   c00019dc <disk_write>
c0007aff:	83 c4 20             	add    esp,0x20
c0007b02:	85 c0                	test   eax,eax
c0007b04:	0f 85 c8 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b0a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b0e:	75 06                	jne    c0007b16 <f_mkfs+0x9f5>
c0007b10:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b14:	74 09                	je     c0007b1f <f_mkfs+0x9fe>
c0007b16:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b19:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b1d:	eb a3                	jmp    c0007ac2 <f_mkfs+0x9a1>
c0007b1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b23:	89 da                	mov    edx,ebx
c0007b25:	01 e8                	add    eax,ebp
c0007b27:	e8 5b 9f ff ff       	call   c0001a87 <st_dword>
c0007b2c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b31:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b39:	75 e4                	jne    c0007b1f <f_mkfs+0x9fe>
c0007b3b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b3e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b42:	83 c6 02             	add    esi,0x2
c0007b45:	83 d7 00             	adc    edi,0x0
c0007b48:	83 ec 0c             	sub    esp,0xc
c0007b4b:	6a 01                	push   0x1
c0007b4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b55:	55                   	push   ebp
c0007b56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b5a:	e8 7d 9e ff ff       	call   c00019dc <disk_write>
c0007b5f:	83 c4 20             	add    esp,0x20
c0007b62:	85 c0                	test   eax,eax
c0007b64:	0f 85 68 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b6a:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b6f:	74 0d                	je     c0007b7e <f_mkfs+0xa5d>
c0007b71:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b79:	e9 43 fd ff ff       	jmp    c00078c1 <f_mkfs+0x7a0>
c0007b7e:	b1 07                	mov    cl,0x7
c0007b80:	e9 e3 05 00 00       	jmp    c0008168 <f_mkfs+0x1047>
c0007b85:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b8a:	0f 85 4f 02 00 00    	jne    c0007ddf <f_mkfs+0xcbe>
c0007b90:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b95:	0f 86 22 02 00 00    	jbe    c0007dbd <f_mkfs+0xc9c>
c0007b9b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ba0:	0f 85 81 06 00 00    	jne    c0008227 <f_mkfs+0x1106>
c0007ba6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ba9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bad:	83 f8 40             	cmp    eax,0x40
c0007bb0:	0f 87 51 06 00 00    	ja     c0008207 <f_mkfs+0x10e6>
c0007bb6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bba:	85 ff                	test   edi,edi
c0007bbc:	75 1c                	jne    c0007bda <f_mkfs+0xab9>
c0007bbe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bc1:	ba 80 70 02 c0       	mov    edx,0xc0027080
c0007bc6:	c1 e9 0c             	shr    ecx,0xc
c0007bc9:	bf 01 00 00 00       	mov    edi,0x1
c0007bce:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bd1:	66 85 c0             	test   ax,ax
c0007bd4:	0f 85 95 01 00 00    	jne    c0007d6f <f_mkfs+0xc4e>
c0007bda:	31 d2                	xor    edx,edx
c0007bdc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bdf:	f7 f7                	div    edi
c0007be1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007be6:	0f 86 95 01 00 00    	jbe    c0007d81 <f_mkfs+0xc60>
c0007bec:	83 c0 02             	add    eax,0x2
c0007bef:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bf4:	01 c0                	add    eax,eax
c0007bf6:	05 ff 01 00 00       	add    eax,0x1ff
c0007bfb:	be 01 00 00 00       	mov    esi,0x1
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c0b:	c1 e0 05             	shl    eax,0x5
c0007c0e:	c1 e8 09             	shr    eax,0x9
c0007c11:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c15:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c20:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c24:	89 f0                	mov    eax,esi
c0007c26:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c2a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c3a:	31 d2                	xor    edx,edx
c0007c3c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c41:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c45:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c49:	31 db                	xor    ebx,ebx
c0007c4b:	01 c8                	add    eax,ecx
c0007c4d:	11 da                	adc    edx,ebx
c0007c4f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c53:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c57:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c5b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c5f:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c63:	f7 da                	neg    edx
c0007c65:	21 d1                	and    ecx,edx
c0007c67:	29 d9                	sub    ecx,ebx
c0007c69:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c6e:	0f 85 20 01 00 00    	jne    c0007d94 <f_mkfs+0xc73>
c0007c74:	31 db                	xor    ebx,ebx
c0007c76:	01 ce                	add    esi,ecx
c0007c78:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c7c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c80:	31 d2                	xor    edx,edx
c0007c82:	89 f8                	mov    eax,edi
c0007c84:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c88:	c1 e0 04             	shl    eax,0x4
c0007c8b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c8f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c93:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c97:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c9b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c9e:	19 d3                	sbb    ebx,edx
c0007ca0:	0f 82 40 01 00 00    	jb     c0007de6 <f_mkfs+0xcc5>
c0007ca6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ca9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cad:	89 c8                	mov    eax,ecx
c0007caf:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cb4:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cb8:	29 f0                	sub    eax,esi
c0007cba:	29 d0                	sub    eax,edx
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	f7 f7                	div    edi
c0007cc0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc5:	89 c3                	mov    ebx,eax
c0007cc7:	0f 85 b8 fe ff ff    	jne    c0007b85 <f_mkfs+0xa64>
c0007ccd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cd2:	0f 87 1d 01 00 00    	ja     c0007df5 <f_mkfs+0xcd4>
c0007cd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cdd:	0f 85 03 01 00 00    	jne    c0007de6 <f_mkfs+0xcc5>
c0007ce3:	83 ff 01             	cmp    edi,0x1
c0007ce6:	0f 86 fa 00 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c0007cec:	d1 ef                	shr    edi,1
c0007cee:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cf2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cf6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cf9:	85 db                	test   ebx,ebx
c0007cfb:	75 2d                	jne    c0007d2a <f_mkfs+0xc09>
c0007cfd:	89 cb                	mov    ebx,ecx
c0007cff:	ba 90 70 02 c0       	mov    edx,0xc0027090
c0007d04:	c1 eb 11             	shr    ebx,0x11
c0007d07:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d0f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d12:	66 85 c0             	test   ax,ax
c0007d15:	74 11                	je     c0007d28 <f_mkfs+0xc07>
c0007d17:	83 c2 02             	add    edx,0x2
c0007d1a:	39 d8                	cmp    eax,ebx
c0007d1c:	77 0a                	ja     c0007d28 <f_mkfs+0xc07>
c0007d1e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d22:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d26:	eb e7                	jmp    c0007d0f <f_mkfs+0xbee>
c0007d28:	31 db                	xor    ebx,ebx
c0007d2a:	31 d2                	xor    edx,edx
c0007d2c:	89 c8                	mov    eax,ecx
c0007d2e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d32:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d39:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d3e:	c1 ea 09             	shr    edx,0x9
c0007d41:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d46:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d4a:	0f 87 96 00 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007d50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d54:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d5c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d60:	be 20 00 00 00       	mov    esi,0x20
c0007d65:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d6a:	e9 a6 fe ff ff       	jmp    c0007c15 <f_mkfs+0xaf4>
c0007d6f:	83 c2 02             	add    edx,0x2
c0007d72:	39 c8                	cmp    eax,ecx
c0007d74:	0f 87 60 fe ff ff    	ja     c0007bda <f_mkfs+0xab9>
c0007d7a:	01 ff                	add    edi,edi
c0007d7c:	e9 4d fe ff ff       	jmp    c0007bce <f_mkfs+0xaad>
c0007d81:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d84:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d89:	40                   	inc    eax
c0007d8a:	d1 e8                	shr    eax,1
c0007d8c:	83 c0 03             	add    eax,0x3
c0007d8f:	e9 62 fe ff ff       	jmp    c0007bf6 <f_mkfs+0xad5>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	89 c8                	mov    eax,ecx
c0007d98:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d9c:	85 d2                	test   edx,edx
c0007d9e:	74 0c                	je     c0007dac <f_mkfs+0xc8b>
c0007da0:	49                   	dec    ecx
c0007da1:	46                   	inc    esi
c0007da2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007da7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007dac:	89 c8                	mov    eax,ecx
c0007dae:	31 d2                	xor    edx,edx
c0007db0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007db4:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007db8:	e9 c3 fe ff ff       	jmp    c0007c80 <f_mkfs+0xb5f>
c0007dbd:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dc2:	77 31                	ja     c0007df5 <f_mkfs+0xcd4>
c0007dc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dc9:	75 1b                	jne    c0007de6 <f_mkfs+0xcc5>
c0007dcb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dd2:	3d 80 00 00 00       	cmp    eax,0x80
c0007dd7:	0f 86 d9 fd ff ff    	jbe    c0007bb6 <f_mkfs+0xa95>
c0007ddd:	eb 07                	jmp    c0007de6 <f_mkfs+0xcc5>
c0007ddf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007de4:	76 0a                	jbe    c0007df0 <f_mkfs+0xccf>
c0007de6:	bb 0e 00 00 00       	mov    ebx,0xe
c0007deb:	e9 ff 03 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c0007df0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007df5:	31 d2                	xor    edx,edx
c0007df7:	b9 00 02 00 00       	mov    ecx,0x200
c0007dfc:	89 e8                	mov    eax,ebp
c0007dfe:	e8 a2 9c ff ff       	call   c0001aa5 <mem_set>
c0007e03:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e08:	ba a2 71 02 c0       	mov    edx,0xc00271a2
c0007e0d:	89 e8                	mov    eax,ebp
c0007e0f:	e8 7c 9c ff ff       	call   c0001a90 <mem_cpy>
c0007e14:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e17:	ba 00 02 00 00       	mov    edx,0x200
c0007e1c:	e8 62 9c ff ff       	call   c0001a83 <st_word>
c0007e21:	89 f8                	mov    eax,edi
c0007e23:	0f b7 d6             	movzx  edx,si
c0007e26:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e29:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e2c:	e8 52 9c ff ff       	call   c0001a83 <st_word>
c0007e31:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e35:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e3a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e3d:	75 08                	jne    c0007e47 <f_mkfs+0xd26>
c0007e3f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e47:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e4e:	e8 30 9c ff ff       	call   c0001a83 <st_word>
c0007e53:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e58:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e5c:	39 d0                	cmp    eax,edx
c0007e5e:	b8 00 00 00 00       	mov    eax,0x0
c0007e63:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e67:	72 0a                	jb     c0007e73 <f_mkfs+0xd52>
c0007e69:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e6c:	e8 12 9c ff ff       	call   c0001a83 <st_word>
c0007e71:	eb 08                	jmp    c0007e7b <f_mkfs+0xd5a>
c0007e73:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e76:	e8 0c 9c ff ff       	call   c0001a87 <st_dword>
c0007e7b:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e7e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e83:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e87:	e8 f7 9b ff ff       	call   c0001a83 <st_word>
c0007e8c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e8f:	ba ff 00 00 00       	mov    edx,0xff
c0007e94:	e8 ea 9b ff ff       	call   c0001a83 <st_word>
c0007e99:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ea0:	e8 e2 9b ff ff       	call   c0001a87 <st_dword>
c0007ea5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eaa:	75 57                	jne    c0007f03 <f_mkfs+0xde2>
c0007eac:	8d 45 43             	lea    eax,[ebp+0x43]
c0007eaf:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eb4:	e8 ce 9b ff ff       	call   c0001a87 <st_dword>
c0007eb9:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ebc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec0:	e8 c2 9b ff ff       	call   c0001a87 <st_dword>
c0007ec5:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ec8:	ba 02 00 00 00       	mov    edx,0x2
c0007ecd:	e8 b5 9b ff ff       	call   c0001a87 <st_dword>
c0007ed2:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ed5:	ba 01 00 00 00       	mov    edx,0x1
c0007eda:	e8 a4 9b ff ff       	call   c0001a83 <st_word>
c0007edf:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ee2:	ba 06 00 00 00       	mov    edx,0x6
c0007ee7:	e8 97 9b ff ff       	call   c0001a83 <st_word>
c0007eec:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ef0:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ef4:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ef7:	b9 13 00 00 00       	mov    ecx,0x13
c0007efc:	ba ae 71 02 c0       	mov    edx,0xc00271ae
c0007f01:	eb 2f                	jmp    c0007f32 <f_mkfs+0xe11>
c0007f03:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f06:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f0b:	e8 77 9b ff ff       	call   c0001a87 <st_dword>
c0007f10:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f15:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f18:	e8 66 9b ff ff       	call   c0001a83 <st_word>
c0007f1d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f21:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f25:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f28:	b9 13 00 00 00       	mov    ecx,0x13
c0007f2d:	ba c2 71 02 c0       	mov    edx,0xc00271c2
c0007f32:	e8 59 9b ff ff       	call   c0001a90 <mem_cpy>
c0007f37:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f42:	89 f0                	mov    eax,esi
c0007f44:	e8 3a 9b ff ff       	call   c0001a83 <st_word>
c0007f49:	83 ec 0c             	sub    esp,0xc
c0007f4c:	6a 01                	push   0x1
c0007f4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f56:	55                   	push   ebp
c0007f57:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f5b:	e8 7c 9a ff ff       	call   c00019dc <disk_write>
c0007f60:	83 c4 20             	add    esp,0x20
c0007f63:	85 c0                	test   eax,eax
c0007f65:	0f 85 67 02 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007f6b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f70:	0f 85 b7 00 00 00    	jne    c000802d <f_mkfs+0xf0c>
c0007f76:	83 ec 0c             	sub    esp,0xc
c0007f79:	6a 01                	push   0x1
c0007f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f83:	83 c0 06             	add    eax,0x6
c0007f86:	83 d2 00             	adc    edx,0x0
c0007f89:	52                   	push   edx
c0007f8a:	50                   	push   eax
c0007f8b:	55                   	push   ebp
c0007f8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f90:	e8 47 9a ff ff       	call   c00019dc <disk_write>
c0007f95:	83 c4 20             	add    esp,0x20
c0007f98:	b9 00 02 00 00       	mov    ecx,0x200
c0007f9d:	31 d2                	xor    edx,edx
c0007f9f:	89 e8                	mov    eax,ebp
c0007fa1:	e8 ff 9a ff ff       	call   c0001aa5 <mem_set>
c0007fa6:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fab:	89 e8                	mov    eax,ebp
c0007fad:	e8 d5 9a ff ff       	call   c0001a87 <st_dword>
c0007fb2:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fb8:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fbd:	e8 c5 9a ff ff       	call   c0001a87 <st_dword>
c0007fc2:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fc5:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fcb:	e8 b7 9a ff ff       	call   c0001a87 <st_dword>
c0007fd0:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fd6:	ba 02 00 00 00       	mov    edx,0x2
c0007fdb:	e8 a7 9a ff ff       	call   c0001a87 <st_dword>
c0007fe0:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fe5:	89 f0                	mov    eax,esi
c0007fe7:	e8 97 9a ff ff       	call   c0001a83 <st_word>
c0007fec:	83 ec 0c             	sub    esp,0xc
c0007fef:	6a 01                	push   0x1
c0007ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ff5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ff9:	83 c0 07             	add    eax,0x7
c0007ffc:	83 d2 00             	adc    edx,0x0
c0007fff:	52                   	push   edx
c0008000:	50                   	push   eax
c0008001:	55                   	push   ebp
c0008002:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008006:	e8 d1 99 ff ff       	call   c00019dc <disk_write>
c000800b:	83 c4 14             	add    esp,0x14
c000800e:	6a 01                	push   0x1
c0008010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008014:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008018:	83 c0 01             	add    eax,0x1
c000801b:	83 d2 00             	adc    edx,0x0
c000801e:	52                   	push   edx
c000801f:	50                   	push   eax
c0008020:	55                   	push   ebp
c0008021:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008025:	e8 b2 99 ff ff       	call   c00019dc <disk_write>
c000802a:	83 c4 20             	add    esp,0x20
c000802d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008034:	31 d2                	xor    edx,edx
c0008036:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000803c:	31 db                	xor    ebx,ebx
c000803e:	89 e8                	mov    eax,ebp
c0008040:	e8 60 9a ff ff       	call   c0001aa5 <mem_set>
c0008045:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000804a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008051:	0f 94 c3             	sete   bl
c0008054:	4b                   	dec    ebx
c0008055:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000805b:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008061:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008066:	75 21                	jne    c0008089 <f_mkfs+0xf68>
c0008068:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000806d:	89 e8                	mov    eax,ebp
c000806f:	e8 13 9a ff ff       	call   c0001a87 <st_dword>
c0008074:	8d 45 04             	lea    eax,[ebp+0x4]
c0008077:	83 ca ff             	or     edx,0xffffffff
c000807a:	e8 08 9a ff ff       	call   c0001a87 <st_dword>
c000807f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008082:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008087:	eb 04                	jmp    c000808d <f_mkfs+0xf6c>
c0008089:	89 da                	mov    edx,ebx
c000808b:	89 e8                	mov    eax,ebp
c000808d:	e8 f5 99 ff ff       	call   c0001a87 <st_dword>
c0008092:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008096:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000809a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080a2:	39 ce                	cmp    esi,ecx
c00080a4:	76 02                	jbe    c00080a8 <f_mkfs+0xf87>
c00080a6:	89 ce                	mov    esi,ecx
c00080a8:	83 ec 0c             	sub    esp,0xc
c00080ab:	56                   	push   esi
c00080ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b4:	55                   	push   ebp
c00080b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080b9:	e8 1e 99 ff ff       	call   c00019dc <disk_write>
c00080be:	83 c4 20             	add    esp,0x20
c00080c1:	85 c0                	test   eax,eax
c00080c3:	0f 85 09 01 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	b9 00 02 00 00       	mov    ecx,0x200
c00080d0:	89 e8                	mov    eax,ebp
c00080d2:	e8 ce 99 ff ff       	call   c0001aa5 <mem_set>
c00080d7:	31 d2                	xor    edx,edx
c00080d9:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080dd:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080e1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080e5:	75 b3                	jne    c000809a <f_mkfs+0xf79>
c00080e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080f1:	40                   	inc    eax
c00080f2:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080f6:	0f 87 65 ff ff ff    	ja     c0008061 <f_mkfs+0xf40>
c00080fc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008101:	74 04                	je     c0008107 <f_mkfs+0xfe6>
c0008103:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008107:	89 fb                	mov    ebx,edi
c0008109:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000810d:	76 04                	jbe    c0008113 <f_mkfs+0xff2>
c000810f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008113:	83 ec 0c             	sub    esp,0xc
c0008116:	53                   	push   ebx
c0008117:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811f:	55                   	push   ebp
c0008120:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008124:	e8 b3 98 ff ff       	call   c00019dc <disk_write>
c0008129:	83 c4 20             	add    esp,0x20
c000812c:	85 c0                	test   eax,eax
c000812e:	0f 85 9e 00 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0008134:	31 d2                	xor    edx,edx
c0008136:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000813a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000813e:	29 df                	sub    edi,ebx
c0008140:	75 c5                	jne    c0008107 <f_mkfs+0xfe6>
c0008142:	b1 0c                	mov    cl,0xc
c0008144:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008149:	74 1d                	je     c0008168 <f_mkfs+0x1047>
c000814b:	b8 ff ff 00 00       	mov    eax,0xffff
c0008150:	b1 06                	mov    cl,0x6
c0008152:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008156:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000815a:	72 0c                	jb     c0008168 <f_mkfs+0x1047>
c000815c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008161:	0f 94 c1             	sete   cl
c0008164:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008168:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000816d:	75 4c                	jne    c00081bb <f_mkfs+0x109a>
c000816f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008173:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008177:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000817e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008185:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008190:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000819b:	0f b6 c9             	movzx  ecx,cl
c000819e:	83 ec 0c             	sub    esp,0xc
c00081a1:	55                   	push   ebp
c00081a2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ad:	e8 2f c2 ff ff       	call   c00043e1 <create_partition>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	89 c3                	mov    ebx,eax
c00081b7:	85 c0                	test   eax,eax
c00081b9:	75 34                	jne    c00081ef <f_mkfs+0x10ce>
c00081bb:	31 db                	xor    ebx,ebx
c00081bd:	50                   	push   eax
c00081be:	6a 00                	push   0x0
c00081c0:	6a 00                	push   0x0
c00081c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081c6:	e8 27 98 ff ff       	call   c00019f2 <disk_ioctl>
c00081cb:	83 c4 10             	add    esp,0x10
c00081ce:	85 c0                	test   eax,eax
c00081d0:	74 1d                	je     c00081ef <f_mkfs+0x10ce>
c00081d2:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081da:	75 0c                	jne    c00081e8 <f_mkfs+0x10c7>
c00081dc:	83 ec 0c             	sub    esp,0xc
c00081df:	55                   	push   ebp
c00081e0:	e8 75 00 00 00       	call   c000825a <ff_memfree>
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	bb 01 00 00 00       	mov    ebx,0x1
c00081ed:	eb 48                	jmp    c0008237 <f_mkfs+0x1116>
c00081ef:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081f7:	75 3e                	jne    c0008237 <f_mkfs+0x1116>
c00081f9:	83 ec 0c             	sub    esp,0xc
c00081fc:	55                   	push   ebp
c00081fd:	e8 58 00 00 00       	call   c000825a <ff_memfree>
c0008202:	83 c4 10             	add    esp,0x10
c0008205:	eb 30                	jmp    c0008237 <f_mkfs+0x1116>
c0008207:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000820c:	0f 85 eb fa ff ff    	jne    c0007cfd <f_mkfs+0xbdc>
c0008212:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008216:	81 ff 80 00 00 00    	cmp    edi,0x80
c000821c:	0f 86 b8 f9 ff ff    	jbe    c0007bda <f_mkfs+0xab9>
c0008222:	e9 bf fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008227:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000822c:	0f 85 c0 fa ff ff    	jne    c0007cf2 <f_mkfs+0xbd1>
c0008232:	e9 af fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008237:	81 c4 9c 00 00 00    	add    esp,0x9c
c000823d:	89 d8                	mov    eax,ebx
c000823f:	5b                   	pop    ebx
c0008240:	5e                   	pop    esi
c0008241:	5f                   	pop    edi
c0008242:	5d                   	pop    ebp
c0008243:	c3                   	ret    

c0008244 <ff_memalloc>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 7d 72 00 00       	call   c000f4d0 <malloc>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 c4 0c             	add    esp,0xc
c0008259:	c3                   	ret    

c000825a <ff_memfree>:
c000825a:	83 ec 0c             	sub    esp,0xc
c000825d:	83 ec 0c             	sub    esp,0xc
c0008260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008264:	e8 77 72 00 00       	call   c000f4e0 <free>
c0008269:	83 c4 10             	add    esp,0x10
c000826c:	90                   	nop
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    

c0008271 <ff_uni2oem>:
c0008271:	83 ec 14             	sub    esp,0x14
c0008274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008278:	66 89 04 24          	mov    WORD PTR [esp],ax
c000827c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008283:	c7 44 24 0c e0 74 02 c0 	mov    DWORD PTR [esp+0xc],0xc00274e0
c000828b:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008290:	77 0b                	ja     c000829d <ff_uni2oem+0x2c>
c0008292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008296:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000829b:	eb 5b                	jmp    c00082f8 <ff_uni2oem+0x87>
c000829d:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082a5:	77 51                	ja     c00082f8 <ff_uni2oem+0x87>
c00082a7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ad:	75 49                	jne    c00082f8 <ff_uni2oem+0x87>
c00082af:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b6:	eb 0b                	jmp    c00082c3 <ff_uni2oem+0x52>
c00082b8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082bd:	40                   	inc    eax
c00082be:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082c3:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082c9:	77 1b                	ja     c00082e6 <ff_uni2oem+0x75>
c00082cb:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082d0:	01 c0                	add    eax,eax
c00082d2:	89 c2                	mov    edx,eax
c00082d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082d8:	01 d0                	add    eax,edx
c00082da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dd:	0f b7 c0             	movzx  eax,ax
c00082e0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082e4:	75 d2                	jne    c00082b8 <ff_uni2oem+0x47>
c00082e6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082eb:	83 e8 80             	sub    eax,0xffffff80
c00082ee:	25 ff 00 00 00       	and    eax,0xff
c00082f3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082fd:	83 c4 14             	add    esp,0x14
c0008300:	c3                   	ret    

c0008301 <ff_oem2uni>:
c0008301:	83 ec 18             	sub    esp,0x18
c0008304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008311:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008315:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000831c:	c7 44 24 10 e0 74 02 c0 	mov    DWORD PTR [esp+0x10],0xc00274e0
c0008324:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000832a:	77 0b                	ja     c0008337 <ff_oem2uni+0x36>
c000832c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008330:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008335:	eb 2d                	jmp    c0008364 <ff_oem2uni+0x63>
c0008337:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000833d:	75 25                	jne    c0008364 <ff_oem2uni+0x63>
c000833f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008346:	77 1c                	ja     c0008364 <ff_oem2uni+0x63>
c0008348:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000834d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008352:	01 c0                	add    eax,eax
c0008354:	89 c2                	mov    edx,eax
c0008356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000835a:	01 d0                	add    eax,edx
c000835c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008364:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008369:	83 c4 18             	add    esp,0x18
c000836c:	c3                   	ret    

c000836d <ff_wtoupper>:
c000836d:	83 ec 10             	sub    esp,0x10
c0008370:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008378:	0f 87 3e 01 00 00    	ja     c00084bc <ff_wtoupper+0x14f>
c000837e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008382:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008387:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000838e:	77 07                	ja     c0008397 <ff_wtoupper+0x2a>
c0008390:	b8 e0 72 02 c0       	mov    eax,0xc00272e0
c0008395:	eb 05                	jmp    c000839c <ff_wtoupper+0x2f>
c0008397:	b8 20 72 02 c0       	mov    eax,0xc0027220
c000839c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	8d 50 02             	lea    edx,[eax+0x2]
c00083a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ab:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ae:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083b3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083b9:	0f 84 f4 00 00 00    	je     c00084b3 <ff_wtoupper+0x146>
c00083bf:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083c4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083c9:	0f 82 e4 00 00 00    	jb     c00084b3 <ff_wtoupper+0x146>
c00083cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d3:	8d 50 02             	lea    edx,[eax+0x2]
c00083d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083dd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083e2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083e7:	66 c1 e8 08          	shr    ax,0x8
c00083eb:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083f0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083f7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083fc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008401:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008406:	01 ca                	add    edx,ecx
c0008408:	39 d0                	cmp    eax,edx
c000840a:	0f 8d 86 00 00 00    	jge    c0008496 <ff_wtoupper+0x129>
c0008410:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008415:	83 f8 08             	cmp    eax,0x8
c0008418:	0f 87 94 00 00 00    	ja     c00084b2 <ff_wtoupper+0x145>
c000841e:	8b 04 85 e0 71 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8e20]
c0008425:	ff e0                	jmp    eax
c0008427:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000842c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008431:	29 c2                	sub    edx,eax
c0008433:	89 d0                	mov    eax,edx
c0008435:	01 c0                	add    eax,eax
c0008437:	89 c2                	mov    edx,eax
c0008439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000843d:	01 d0                	add    eax,edx
c000843f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008442:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008447:	eb 4b                	jmp    c0008494 <ff_wtoupper+0x127>
c0008449:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000844e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008452:	83 e0 01             	and    eax,0x1
c0008455:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000845a:	eb 38                	jmp    c0008494 <ff_wtoupper+0x127>
c000845c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008462:	eb 30                	jmp    c0008494 <ff_wtoupper+0x127>
c0008464:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000846a:	eb 28                	jmp    c0008494 <ff_wtoupper+0x127>
c000846c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008472:	eb 20                	jmp    c0008494 <ff_wtoupper+0x127>
c0008474:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000847a:	eb 18                	jmp    c0008494 <ff_wtoupper+0x127>
c000847c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008482:	eb 10                	jmp    c0008494 <ff_wtoupper+0x127>
c0008484:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000848a:	eb 08                	jmp    c0008494 <ff_wtoupper+0x127>
c000848c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008493:	90                   	nop
c0008494:	eb 1c                	jmp    c00084b2 <ff_wtoupper+0x145>
c0008496:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000849c:	0f 85 fe fe ff ff    	jne    c00083a0 <ff_wtoupper+0x33>
c00084a2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084a7:	01 c0                	add    eax,eax
c00084a9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084ad:	e9 ee fe ff ff       	jmp    c00083a0 <ff_wtoupper+0x33>
c00084b2:	90                   	nop
c00084b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	c3                   	ret    

c00084c4 <psrc_set_converter>:
c00084c4:	56                   	push   esi
c00084c5:	89 d6                	mov    esi,edx
c00084c7:	53                   	push   ebx
c00084c8:	89 c3                	mov    ebx,eax
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	52                   	push   edx
c00084ce:	50                   	push   eax
c00084cf:	e8 6f 55 00 00       	call   c000da43 <sinc_set_converter>
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	85 c0                	test   eax,eax
c00084d9:	74 25                	je     c0008500 <psrc_set_converter+0x3c>
c00084db:	50                   	push   eax
c00084dc:	50                   	push   eax
c00084dd:	56                   	push   esi
c00084de:	53                   	push   ebx
c00084df:	e8 17 5d 00 00       	call   c000e1fb <zoh_set_converter>
c00084e4:	83 c4 10             	add    esp,0x10
c00084e7:	85 c0                	test   eax,eax
c00084e9:	74 15                	je     c0008500 <psrc_set_converter+0x3c>
c00084eb:	51                   	push   ecx
c00084ec:	51                   	push   ecx
c00084ed:	56                   	push   esi
c00084ee:	53                   	push   ebx
c00084ef:	e8 0f 11 00 00       	call   c0009603 <linear_set_converter>
c00084f4:	83 c4 10             	add    esp,0x10
c00084f7:	ba 0a 00 00 00       	mov    edx,0xa
c00084fc:	85 c0                	test   eax,eax
c00084fe:	75 02                	jne    c0008502 <psrc_set_converter+0x3e>
c0008500:	31 d2                	xor    edx,edx
c0008502:	89 d0                	mov    eax,edx
c0008504:	5a                   	pop    edx
c0008505:	5b                   	pop    ebx
c0008506:	5e                   	pop    esi
c0008507:	c3                   	ret    

c0008508 <src_delete>:
c0008508:	53                   	push   ebx
c0008509:	83 ec 08             	sub    esp,0x8
c000850c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008510:	85 db                	test   ebx,ebx
c0008512:	74 29                	je     c000853d <src_delete+0x35>
c0008514:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008517:	85 c0                	test   eax,eax
c0008519:	74 0c                	je     c0008527 <src_delete+0x1f>
c000851b:	83 ec 0c             	sub    esp,0xc
c000851e:	50                   	push   eax
c000851f:	e8 bc 6f 00 00       	call   c000f4e0 <free>
c0008524:	83 c4 10             	add    esp,0x10
c0008527:	50                   	push   eax
c0008528:	6a 3c                	push   0x3c
c000852a:	6a 00                	push   0x0
c000852c:	53                   	push   ebx
c000852d:	e8 59 81 ff ff       	call   c000068b <memset>
c0008532:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008535:	e8 a6 6f 00 00       	call   c000f4e0 <free>
c000853a:	83 c4 10             	add    esp,0x10
c000853d:	31 c0                	xor    eax,eax
c000853f:	83 c4 08             	add    esp,0x8
c0008542:	5b                   	pop    ebx
c0008543:	c3                   	ret    

c0008544 <src_process>:
c0008544:	55                   	push   ebp
c0008545:	57                   	push   edi
c0008546:	56                   	push   esi
c0008547:	53                   	push   ebx
c0008548:	83 ec 1c             	sub    esp,0x1c
c000854b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000854f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008553:	85 ed                	test   ebp,ebp
c0008555:	0f 84 6f 01 00 00    	je     c00086ca <src_process+0x186>
c000855b:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000855f:	0f 84 6c 01 00 00    	je     c00086d1 <src_process+0x18d>
c0008565:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008569:	0f 84 62 01 00 00    	je     c00086d1 <src_process+0x18d>
c000856f:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008576:	0f 85 5c 01 00 00    	jne    c00086d8 <src_process+0x194>
c000857c:	85 db                	test   ebx,ebx
c000857e:	0f 84 5b 01 00 00    	je     c00086df <src_process+0x19b>
c0008584:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008586:	85 f6                	test   esi,esi
c0008588:	0f 84 58 01 00 00    	je     c00086e6 <src_process+0x1a2>
c000858e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008591:	85 ff                	test   edi,edi
c0008593:	0f 84 4d 01 00 00    	je     c00086e6 <src_process+0x1a2>
c0008599:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000859c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000859f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085a7:	68 00 00 70 3f       	push   0x3f700000
c00085ac:	6a 00                	push   0x0
c00085ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b6:	e8 44 dc 01 00       	call   c00261ff <__ltdf2>
c00085bb:	83 c4 10             	add    esp,0x10
c00085be:	85 c0                	test   eax,eax
c00085c0:	0f 88 27 01 00 00    	js     c00086ed <src_process+0x1a9>
c00085c6:	68 00 00 70 40       	push   0x40700000
c00085cb:	6a 00                	push   0x0
c00085cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d5:	e8 07 dc 01 00       	call   c00261e1 <__gtdf2>
c00085da:	83 c4 10             	add    esp,0x10
c00085dd:	85 c0                	test   eax,eax
c00085df:	0f 8f 08 01 00 00    	jg     c00086ed <src_process+0x1a9>
c00085e5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085e9:	79 07                	jns    c00085f2 <src_process+0xae>
c00085eb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085f5:	85 c0                	test   eax,eax
c00085f7:	79 50                	jns    c0008649 <src_process+0x105>
c00085f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008600:	39 fe                	cmp    esi,edi
c0008602:	72 37                	jb     c000863b <src_process+0xf7>
c0008604:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000860b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008612:	68 00 00 70 3f       	push   0x3f700000
c0008617:	6a 00                	push   0x0
c0008619:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000861c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000861f:	e8 db db 01 00       	call   c00261ff <__ltdf2>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	85 c0                	test   eax,eax
c0008629:	79 37                	jns    c0008662 <src_process+0x11e>
c000862b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000862f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008633:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008636:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008639:	eb 27                	jmp    c0008662 <src_process+0x11e>
c000863b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000863e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008642:	8d 04 86             	lea    eax,[esi+eax*4]
c0008645:	39 c7                	cmp    edi,eax
c0008647:	eb 0d                	jmp    c0008656 <src_process+0x112>
c0008649:	39 fe                	cmp    esi,edi
c000864b:	72 ee                	jb     c000863b <src_process+0xf7>
c000864d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008651:	8d 04 87             	lea    eax,[edi+eax*4]
c0008654:	39 c6                	cmp    esi,eax
c0008656:	73 ac                	jae    c0008604 <src_process+0xc0>
c0008658:	b8 10 00 00 00       	mov    eax,0x10
c000865d:	e9 90 00 00 00       	jmp    c00086f2 <src_process+0x1ae>
c0008662:	83 ec 10             	sub    esp,0x10
c0008665:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008668:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000866b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000866e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008671:	e8 8e d2 01 00       	call   c0025904 <__subdf3>
c0008676:	83 c4 18             	add    esp,0x18
c0008679:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000867d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008681:	52                   	push   edx
c0008682:	50                   	push   eax
c0008683:	e8 08 dd 01 00       	call   c0026390 <fabs>
c0008688:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000868c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008690:	83 c4 10             	add    esp,0x10
c0008693:	68 af 03 d2 3c       	push   0x3cd203af
c0008698:	68 16 56 e7 9e       	push   0x9ee75616
c000869d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a5:	e8 55 db 01 00       	call   c00261ff <__ltdf2>
c00086aa:	83 c4 10             	add    esp,0x10
c00086ad:	85 c0                	test   eax,eax
c00086af:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086b3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086b7:	79 05                	jns    c00086be <src_process+0x17a>
c00086b9:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086bc:	eb 03                	jmp    c00086c1 <src_process+0x17d>
c00086be:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086c1:	83 c4 1c             	add    esp,0x1c
c00086c4:	5b                   	pop    ebx
c00086c5:	5e                   	pop    esi
c00086c6:	5f                   	pop    edi
c00086c7:	5d                   	pop    ebp
c00086c8:	ff e0                	jmp    eax
c00086ca:	b8 02 00 00 00       	mov    eax,0x2
c00086cf:	eb 21                	jmp    c00086f2 <src_process+0x1ae>
c00086d1:	b8 07 00 00 00       	mov    eax,0x7
c00086d6:	eb 1a                	jmp    c00086f2 <src_process+0x1ae>
c00086d8:	b8 12 00 00 00       	mov    eax,0x12
c00086dd:	eb 13                	jmp    c00086f2 <src_process+0x1ae>
c00086df:	b8 03 00 00 00       	mov    eax,0x3
c00086e4:	eb 0c                	jmp    c00086f2 <src_process+0x1ae>
c00086e6:	b8 04 00 00 00       	mov    eax,0x4
c00086eb:	eb 05                	jmp    c00086f2 <src_process+0x1ae>
c00086ed:	b8 06 00 00 00       	mov    eax,0x6
c00086f2:	83 c4 1c             	add    esp,0x1c
c00086f5:	5b                   	pop    ebx
c00086f6:	5e                   	pop    esi
c00086f7:	5f                   	pop    edi
c00086f8:	5d                   	pop    ebp
c00086f9:	c3                   	ret    

c00086fa <src_callback_read>:
c00086fa:	55                   	push   ebp
c00086fb:	57                   	push   edi
c00086fc:	56                   	push   esi
c00086fd:	53                   	push   ebx
c00086fe:	83 ec 3c             	sub    esp,0x3c
c0008701:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008705:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008709:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000870d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008711:	85 ed                	test   ebp,ebp
c0008713:	0f 8e 52 01 00 00    	jle    c000886b <src_callback_read+0x171>
c0008719:	85 db                	test   ebx,ebx
c000871b:	0f 84 4a 01 00 00    	je     c000886b <src_callback_read+0x171>
c0008721:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008728:	74 0c                	je     c0008736 <src_callback_read+0x3c>
c000872a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008731:	e9 35 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008736:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000873a:	75 0c                	jne    c0008748 <src_callback_read+0x4e>
c000873c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008743:	e9 23 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008748:	51                   	push   ecx
c0008749:	6a 24                	push   0x24
c000874b:	6a 00                	push   0x0
c000874d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008751:	50                   	push   eax
c0008752:	e8 34 7f ff ff       	call   c000068b <memset>
c0008757:	83 c4 10             	add    esp,0x10
c000875a:	68 00 00 70 3f       	push   0x3f700000
c000875f:	6a 00                	push   0x0
c0008761:	57                   	push   edi
c0008762:	56                   	push   esi
c0008763:	e8 97 da 01 00       	call   c00261ff <__ltdf2>
c0008768:	83 c4 10             	add    esp,0x10
c000876b:	85 c0                	test   eax,eax
c000876d:	78 3e                	js     c00087ad <src_callback_read+0xb3>
c000876f:	68 00 00 70 40       	push   0x40700000
c0008774:	6a 00                	push   0x0
c0008776:	57                   	push   edi
c0008777:	56                   	push   esi
c0008778:	e8 64 da 01 00       	call   c00261e1 <__gtdf2>
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	7f 29                	jg     c00087ad <src_callback_read+0xb3>
c0008784:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008788:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000878c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008790:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008794:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008797:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000879b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000879f:	31 f6                	xor    esi,esi
c00087a1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087a8:	e9 97 00 00 00       	jmp    c0008844 <src_callback_read+0x14a>
c00087ad:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087b4:	e9 b2 00 00 00       	jmp    c000886b <src_callback_read+0x171>
c00087b9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087c1:	52                   	push   edx
c00087c2:	52                   	push   edx
c00087c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087c7:	50                   	push   eax
c00087c8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087cb:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	85 c0                	test   eax,eax
c00087df:	75 08                	jne    c00087e9 <src_callback_read+0xef>
c00087e1:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087e9:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087f0:	50                   	push   eax
c00087f1:	50                   	push   eax
c00087f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087f6:	50                   	push   eax
c00087f7:	53                   	push   ebx
c00087f8:	e8 47 fd ff ff       	call   c0008544 <src_process>
c00087fd:	83 c4 10             	add    esp,0x10
c0008800:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008807:	85 c0                	test   eax,eax
c0008809:	75 49                	jne    c0008854 <src_callback_read+0x15a>
c000880b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000880f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008812:	89 f9                	mov    ecx,edi
c0008814:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008818:	0f af ca             	imul   ecx,edx
c000881b:	c1 e1 02             	shl    ecx,0x2
c000881e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008822:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008826:	0f af d1             	imul   edx,ecx
c0008829:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000882d:	c1 e2 02             	shl    edx,0x2
c0008830:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008834:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008837:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000883c:	74 12                	je     c0008850 <src_callback_read+0x156>
c000883e:	39 d5                	cmp    ebp,edx
c0008840:	7e 14                	jle    c0008856 <src_callback_read+0x15c>
c0008842:	89 d6                	mov    esi,edx
c0008844:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008849:	75 9e                	jne    c00087e9 <src_callback_read+0xef>
c000884b:	e9 69 ff ff ff       	jmp    c00087b9 <src_callback_read+0xbf>
c0008850:	85 c9                	test   ecx,ecx
c0008852:	75 ea                	jne    c000883e <src_callback_read+0x144>
c0008854:	89 f2                	mov    edx,esi
c0008856:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000885a:	85 c0                	test   eax,eax
c000885c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000885f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008863:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008866:	74 05                	je     c000886d <src_callback_read+0x173>
c0008868:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000886b:	31 d2                	xor    edx,edx
c000886d:	83 c4 3c             	add    esp,0x3c
c0008870:	89 d0                	mov    eax,edx
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	5f                   	pop    edi
c0008875:	5d                   	pop    ebp
c0008876:	c3                   	ret    

c0008877 <src_set_ratio>:
c0008877:	57                   	push   edi
c0008878:	ba 02 00 00 00       	mov    edx,0x2
c000887d:	56                   	push   esi
c000887e:	53                   	push   ebx
c000887f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008883:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008887:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000888b:	85 db                	test   ebx,ebx
c000888d:	74 4c                	je     c00088db <src_set_ratio+0x64>
c000888f:	ba 07 00 00 00       	mov    edx,0x7
c0008894:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008898:	74 41                	je     c00088db <src_set_ratio+0x64>
c000889a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000889e:	74 3b                	je     c00088db <src_set_ratio+0x64>
c00088a0:	68 00 00 70 3f       	push   0x3f700000
c00088a5:	6a 00                	push   0x0
c00088a7:	57                   	push   edi
c00088a8:	56                   	push   esi
c00088a9:	e8 51 d9 01 00       	call   c00261ff <__ltdf2>
c00088ae:	83 c4 10             	add    esp,0x10
c00088b1:	ba 06 00 00 00       	mov    edx,0x6
c00088b6:	85 c0                	test   eax,eax
c00088b8:	78 21                	js     c00088db <src_set_ratio+0x64>
c00088ba:	68 00 00 70 40       	push   0x40700000
c00088bf:	6a 00                	push   0x0
c00088c1:	57                   	push   edi
c00088c2:	56                   	push   esi
c00088c3:	e8 19 d9 01 00       	call   c00261e1 <__gtdf2>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	ba 06 00 00 00       	mov    edx,0x6
c00088d0:	85 c0                	test   eax,eax
c00088d2:	7f 07                	jg     c00088db <src_set_ratio+0x64>
c00088d4:	89 33                	mov    DWORD PTR [ebx],esi
c00088d6:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088d9:	31 d2                	xor    edx,edx
c00088db:	5b                   	pop    ebx
c00088dc:	89 d0                	mov    eax,edx
c00088de:	5e                   	pop    esi
c00088df:	5f                   	pop    edi
c00088e0:	c3                   	ret    

c00088e1 <src_get_channels>:
c00088e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088e5:	b8 02 00 00 00       	mov    eax,0x2
c00088ea:	85 d2                	test   edx,edx
c00088ec:	74 14                	je     c0008902 <src_get_channels+0x21>
c00088ee:	b8 07 00 00 00       	mov    eax,0x7
c00088f3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088f7:	74 09                	je     c0008902 <src_get_channels+0x21>
c00088f9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088fd:	74 03                	je     c0008902 <src_get_channels+0x21>
c00088ff:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008902:	c3                   	ret    

c0008903 <src_reset>:
c0008903:	53                   	push   ebx
c0008904:	b8 02 00 00 00       	mov    eax,0x2
c0008909:	83 ec 08             	sub    esp,0x8
c000890c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008910:	85 db                	test   ebx,ebx
c0008912:	74 36                	je     c000894a <src_reset+0x47>
c0008914:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008917:	85 c0                	test   eax,eax
c0008919:	74 09                	je     c0008924 <src_reset+0x21>
c000891b:	83 ec 0c             	sub    esp,0xc
c000891e:	53                   	push   ebx
c000891f:	ff d0                	call   eax
c0008921:	83 c4 10             	add    esp,0x10
c0008924:	31 c0                	xor    eax,eax
c0008926:	31 d2                	xor    edx,edx
c0008928:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000892b:	89 03                	mov    DWORD PTR [ebx],eax
c000892d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008930:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008933:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000893a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008941:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008948:	31 c0                	xor    eax,eax
c000894a:	83 c4 08             	add    esp,0x8
c000894d:	5b                   	pop    ebx
c000894e:	c3                   	ret    

c000894f <src_new>:
c000894f:	57                   	push   edi
c0008950:	56                   	push   esi
c0008951:	53                   	push   ebx
c0008952:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008956:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000895a:	85 f6                	test   esi,esi
c000895c:	74 73                	je     c00089d1 <src_new+0x82>
c000895e:	85 ff                	test   edi,edi
c0008960:	7f 08                	jg     c000896a <src_new+0x1b>
c0008962:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008968:	eb 1e                	jmp    c0008988 <src_new+0x39>
c000896a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008970:	50                   	push   eax
c0008971:	50                   	push   eax
c0008972:	6a 3c                	push   0x3c
c0008974:	6a 01                	push   0x1
c0008976:	e8 85 6b 00 00       	call   c000f500 <calloc>
c000897b:	83 c4 10             	add    esp,0x10
c000897e:	89 c3                	mov    ebx,eax
c0008980:	85 c0                	test   eax,eax
c0008982:	75 10                	jne    c0008994 <src_new+0x45>
c0008984:	85 f6                	test   esi,esi
c0008986:	75 04                	jne    c000898c <src_new+0x3d>
c0008988:	31 db                	xor    ebx,ebx
c000898a:	eb 4b                	jmp    c00089d7 <src_new+0x88>
c000898c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008992:	eb 43                	jmp    c00089d7 <src_new+0x88>
c0008994:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008997:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000899e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089a2:	e8 1d fb ff ff       	call   c00084c4 <psrc_set_converter>
c00089a7:	85 c0                	test   eax,eax
c00089a9:	74 18                	je     c00089c3 <src_new+0x74>
c00089ab:	85 f6                	test   esi,esi
c00089ad:	74 06                	je     c00089b5 <src_new+0x66>
c00089af:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089b5:	83 ec 0c             	sub    esp,0xc
c00089b8:	53                   	push   ebx
c00089b9:	31 db                	xor    ebx,ebx
c00089bb:	e8 20 6b 00 00       	call   c000f4e0 <free>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	53                   	push   ebx
c00089c7:	e8 37 ff ff ff       	call   c0008903 <src_reset>
c00089cc:	83 c4 10             	add    esp,0x10
c00089cf:	eb 06                	jmp    c00089d7 <src_new+0x88>
c00089d1:	85 ff                	test   edi,edi
c00089d3:	7f 9b                	jg     c0008970 <src_new+0x21>
c00089d5:	eb b1                	jmp    c0008988 <src_new+0x39>
c00089d7:	89 d8                	mov    eax,ebx
c00089d9:	5b                   	pop    ebx
c00089da:	5e                   	pop    esi
c00089db:	5f                   	pop    edi
c00089dc:	c3                   	ret    

c00089dd <src_callback_new>:
c00089dd:	56                   	push   esi
c00089de:	53                   	push   ebx
c00089df:	53                   	push   ebx
c00089e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089e8:	85 f6                	test   esi,esi
c00089ea:	75 0e                	jne    c00089fa <src_callback_new+0x1d>
c00089ec:	31 db                	xor    ebx,ebx
c00089ee:	85 c0                	test   eax,eax
c00089f0:	74 47                	je     c0008a39 <src_callback_new+0x5c>
c00089f2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089f8:	eb 3f                	jmp    c0008a39 <src_callback_new+0x5c>
c00089fa:	85 c0                	test   eax,eax
c00089fc:	74 06                	je     c0008a04 <src_callback_new+0x27>
c00089fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a04:	51                   	push   ecx
c0008a05:	50                   	push   eax
c0008a06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0e:	e8 3c ff ff ff       	call   c000894f <src_new>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	89 c3                	mov    ebx,eax
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	74 1d                	je     c0008a39 <src_callback_new+0x5c>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	50                   	push   eax
c0008a20:	e8 de fe ff ff       	call   c0008903 <src_reset>
c0008a25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a29:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a30:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a33:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 d8                	mov    eax,ebx
c0008a3b:	5a                   	pop    edx
c0008a3c:	5b                   	pop    ebx
c0008a3d:	5e                   	pop    esi
c0008a3e:	c3                   	ret    

c0008a3f <src_get_name>:
c0008a3f:	53                   	push   ebx
c0008a40:	83 ec 14             	sub    esp,0x14
c0008a43:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a47:	53                   	push   ebx
c0008a48:	e8 d0 4f 00 00       	call   c000da1d <sinc_get_name>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	85 c0                	test   eax,eax
c0008a52:	75 1d                	jne    c0008a71 <src_get_name+0x32>
c0008a54:	83 ec 0c             	sub    esp,0xc
c0008a57:	53                   	push   ebx
c0008a58:	e8 80 57 00 00       	call   c000e1dd <zoh_get_name>
c0008a5d:	83 c4 10             	add    esp,0x10
c0008a60:	85 c0                	test   eax,eax
c0008a62:	75 0d                	jne    c0008a71 <src_get_name+0x32>
c0008a64:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a68:	83 c4 08             	add    esp,0x8
c0008a6b:	5b                   	pop    ebx
c0008a6c:	e9 74 0b 00 00       	jmp    c00095e5 <linear_get_name>
c0008a71:	83 c4 08             	add    esp,0x8
c0008a74:	5b                   	pop    ebx
c0008a75:	c3                   	ret    

c0008a76 <src_get_description>:
c0008a76:	53                   	push   ebx
c0008a77:	83 ec 14             	sub    esp,0x14
c0008a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a7e:	53                   	push   ebx
c0008a7f:	e8 ac 4f 00 00       	call   c000da30 <sinc_get_description>
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	85 c0                	test   eax,eax
c0008a89:	75 1d                	jne    c0008aa8 <src_get_description+0x32>
c0008a8b:	83 ec 0c             	sub    esp,0xc
c0008a8e:	53                   	push   ebx
c0008a8f:	e8 58 57 00 00       	call   c000e1ec <zoh_get_description>
c0008a94:	83 c4 10             	add    esp,0x10
c0008a97:	85 c0                	test   eax,eax
c0008a99:	75 0d                	jne    c0008aa8 <src_get_description+0x32>
c0008a9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a9f:	83 c4 08             	add    esp,0x8
c0008aa2:	5b                   	pop    ebx
c0008aa3:	e9 4c 0b 00 00       	jmp    c00095f4 <linear_get_description>
c0008aa8:	83 c4 08             	add    esp,0x8
c0008aab:	5b                   	pop    ebx
c0008aac:	c3                   	ret    

c0008aad <src_get_version>:
c0008aad:	b8 e0 75 02 c0       	mov    eax,0xc00275e0
c0008ab2:	c3                   	ret    

c0008ab3 <src_is_valid_ratio>:
c0008ab3:	83 ec 1c             	sub    esp,0x1c
c0008ab6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008abe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ac2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ac6:	68 00 00 70 3f       	push   0x3f700000
c0008acb:	6a 00                	push   0x0
c0008acd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad5:	e8 25 d7 01 00       	call   c00261ff <__ltdf2>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	31 d2                	xor    edx,edx
c0008adf:	85 c0                	test   eax,eax
c0008ae1:	78 1e                	js     c0008b01 <src_is_valid_ratio+0x4e>
c0008ae3:	68 00 00 70 40       	push   0x40700000
c0008ae8:	6a 00                	push   0x0
c0008aea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af2:	e8 ea d6 01 00       	call   c00261e1 <__gtdf2>
c0008af7:	31 d2                	xor    edx,edx
c0008af9:	83 c4 10             	add    esp,0x10
c0008afc:	85 c0                	test   eax,eax
c0008afe:	0f 9e c2             	setle  dl
c0008b01:	89 d0                	mov    eax,edx
c0008b03:	83 c4 1c             	add    esp,0x1c
c0008b06:	c3                   	ret    

c0008b07 <src_error>:
c0008b07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0b:	31 c0                	xor    eax,eax
c0008b0d:	85 d2                	test   edx,edx
c0008b0f:	74 03                	je     c0008b14 <src_error+0xd>
c0008b11:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b14:	c3                   	ret    

c0008b15 <src_strerror>:
c0008b15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b19:	31 c0                	xor    eax,eax
c0008b1b:	83 fa 17             	cmp    edx,0x17
c0008b1e:	77 07                	ja     c0008b27 <src_strerror+0x12>
c0008b20:	8b 04 95 40 7a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd85c0]
c0008b27:	c3                   	ret    

c0008b28 <src_simple>:
c0008b28:	56                   	push   esi
c0008b29:	53                   	push   ebx
c0008b2a:	83 ec 18             	sub    esp,0x18
c0008b2d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b31:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b35:	50                   	push   eax
c0008b36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3e:	e8 0c fe ff ff       	call   c000894f <src_new>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	85 c0                	test   eax,eax
c0008b48:	75 06                	jne    c0008b50 <src_simple+0x28>
c0008b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4e:	eb 25                	jmp    c0008b75 <src_simple+0x4d>
c0008b50:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b57:	89 c3                	mov    ebx,eax
c0008b59:	50                   	push   eax
c0008b5a:	50                   	push   eax
c0008b5b:	56                   	push   esi
c0008b5c:	53                   	push   ebx
c0008b5d:	e8 e2 f9 ff ff       	call   c0008544 <src_process>
c0008b62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b69:	e8 9a f9 ff ff       	call   c0008508 <src_delete>
c0008b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b72:	83 c4 10             	add    esp,0x10
c0008b75:	83 c4 14             	add    esp,0x14
c0008b78:	5b                   	pop    ebx
c0008b79:	5e                   	pop    esi
c0008b7a:	c3                   	ret    

c0008b7b <src_short_to_float_array>:
c0008b7b:	53                   	push   ebx
c0008b7c:	83 ec 18             	sub    esp,0x18
c0008b7f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b83:	85 db                	test   ebx,ebx
c0008b85:	74 54                	je     c0008bdb <src_short_to_float_array+0x60>
c0008b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b8b:	4b                   	dec    ebx
c0008b8c:	83 ec 0c             	sub    esp,0xc
c0008b8f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b93:	50                   	push   eax
c0008b94:	e8 fa d3 01 00       	call   c0025f93 <__floatsidf>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba4:	68 00 00 00 3f       	push   0x3f000000
c0008ba9:	6a 00                	push   0x0
c0008bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb3:	e8 78 cd 01 00       	call   c0025930 <__muldf3>
c0008bb8:	59                   	pop    ecx
c0008bb9:	59                   	pop    ecx
c0008bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bca:	e8 34 d6 01 00       	call   c0026203 <__truncdfsf2>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bd6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bd9:	eb a8                	jmp    c0008b83 <src_short_to_float_array+0x8>
c0008bdb:	83 c4 18             	add    esp,0x18
c0008bde:	5b                   	pop    ebx
c0008bdf:	c3                   	ret    

c0008be0 <src_float_to_short_array>:
c0008be0:	56                   	push   esi
c0008be1:	53                   	push   ebx
c0008be2:	83 ec 14             	sub    esp,0x14
c0008be5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008be9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bed:	85 db                	test   ebx,ebx
c0008bef:	0f 84 a4 00 00 00    	je     c0008c99 <src_float_to_short_array+0xb9>
c0008bf5:	83 ec 0c             	sub    esp,0xc
c0008bf8:	4b                   	dec    ebx
c0008bf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bfd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c00:	e8 22 d7 01 00       	call   c0026327 <__extendsfdf2>
c0008c05:	83 c4 10             	add    esp,0x10
c0008c08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c10:	68 00 00 e0 41       	push   0x41e00000
c0008c15:	6a 00                	push   0x0
c0008c17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1f:	e8 0c cd 01 00       	call   c0025930 <__muldf3>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c2f:	68 ff ff df 41       	push   0x41dfffff
c0008c34:	68 00 00 c0 ff       	push   0xffc00000
c0008c39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c41:	e8 b7 d5 01 00       	call   c00261fd <__gedf2>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	85 c0                	test   eax,eax
c0008c4b:	78 08                	js     c0008c55 <src_float_to_short_array+0x75>
c0008c4d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c53:	eb 98                	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c55:	68 00 00 e0 c1       	push   0xc1e00000
c0008c5a:	6a 00                	push   0x0
c0008c5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c64:	e8 98 d5 01 00       	call   c0026201 <__ledf2>
c0008c69:	83 c4 10             	add    esp,0x10
c0008c6c:	85 c0                	test   eax,eax
c0008c6e:	7f 0b                	jg     c0008c7b <src_float_to_short_array+0x9b>
c0008c70:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c76:	e9 72 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c7b:	50                   	push   eax
c0008c7c:	50                   	push   eax
c0008c7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c85:	e8 26 d7 01 00       	call   c00263b0 <lrint>
c0008c8a:	83 c4 10             	add    esp,0x10
c0008c8d:	c1 f8 10             	sar    eax,0x10
c0008c90:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c94:	e9 54 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c99:	83 c4 14             	add    esp,0x14
c0008c9c:	5b                   	pop    ebx
c0008c9d:	5e                   	pop    esi
c0008c9e:	c3                   	ret    

c0008c9f <src_int_to_float_array>:
c0008c9f:	53                   	push   ebx
c0008ca0:	83 ec 18             	sub    esp,0x18
c0008ca3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca7:	85 db                	test   ebx,ebx
c0008ca9:	74 52                	je     c0008cfd <src_int_to_float_array+0x5e>
c0008cab:	83 ec 0c             	sub    esp,0xc
c0008cae:	4b                   	dec    ebx
c0008caf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cb6:	e8 d8 d2 01 00       	call   c0025f93 <__floatsidf>
c0008cbb:	83 c4 10             	add    esp,0x10
c0008cbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cc6:	68 00 00 00 3e       	push   0x3e000000
c0008ccb:	6a 00                	push   0x0
c0008ccd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd5:	e8 56 cc 01 00       	call   c0025930 <__muldf3>
c0008cda:	59                   	pop    ecx
c0008cdb:	59                   	pop    ecx
c0008cdc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cec:	e8 12 d5 01 00       	call   c0026203 <__truncdfsf2>
c0008cf1:	83 c4 10             	add    esp,0x10
c0008cf4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cf8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cfb:	eb aa                	jmp    c0008ca7 <src_int_to_float_array+0x8>
c0008cfd:	83 c4 18             	add    esp,0x18
c0008d00:	5b                   	pop    ebx
c0008d01:	c3                   	ret    

c0008d02 <src_float_to_int_array>:
c0008d02:	56                   	push   esi
c0008d03:	53                   	push   ebx
c0008d04:	83 ec 14             	sub    esp,0x14
c0008d07:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d0b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d0f:	85 db                	test   ebx,ebx
c0008d11:	0f 84 a2 00 00 00    	je     c0008db9 <src_float_to_int_array+0xb7>
c0008d17:	83 ec 0c             	sub    esp,0xc
c0008d1a:	4b                   	dec    ebx
c0008d1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d1f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d22:	e8 00 d6 01 00       	call   c0026327 <__extendsfdf2>
c0008d27:	83 c4 10             	add    esp,0x10
c0008d2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d32:	68 00 00 e0 41       	push   0x41e00000
c0008d37:	6a 00                	push   0x0
c0008d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d41:	e8 ea cb 01 00       	call   c0025930 <__muldf3>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d51:	68 ff ff df 41       	push   0x41dfffff
c0008d56:	68 00 00 c0 ff       	push   0xffc00000
c0008d5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d63:	e8 95 d4 01 00       	call   c00261fd <__gedf2>
c0008d68:	83 c4 10             	add    esp,0x10
c0008d6b:	85 c0                	test   eax,eax
c0008d6d:	78 09                	js     c0008d78 <src_float_to_int_array+0x76>
c0008d6f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d76:	eb 97                	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d78:	68 00 00 e0 c1       	push   0xc1e00000
c0008d7d:	6a 00                	push   0x0
c0008d7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d87:	e8 75 d4 01 00       	call   c0026201 <__ledf2>
c0008d8c:	83 c4 10             	add    esp,0x10
c0008d8f:	85 c0                	test   eax,eax
c0008d91:	7f 0c                	jg     c0008d9f <src_float_to_int_array+0x9d>
c0008d93:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d9a:	e9 70 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d9f:	50                   	push   eax
c0008da0:	50                   	push   eax
c0008da1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da9:	e8 02 d6 01 00       	call   c00263b0 <lrint>
c0008dae:	83 c4 10             	add    esp,0x10
c0008db1:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008db4:	e9 56 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008db9:	83 c4 14             	add    esp,0x14
c0008dbc:	5b                   	pop    ebx
c0008dbd:	5e                   	pop    esi
c0008dbe:	c3                   	ret    

c0008dbf <linear_vari_process>:
c0008dbf:	55                   	push   ebp
c0008dc0:	31 d2                	xor    edx,edx
c0008dc2:	57                   	push   edi
c0008dc3:	56                   	push   esi
c0008dc4:	53                   	push   ebx
c0008dc5:	83 ec 3c             	sub    esp,0x3c
c0008dc8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dcc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dd0:	0f 8e d3 07 00 00    	jle    c00095a9 <linear_vari_process+0x7ea>
c0008dd6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dda:	ba 05 00 00 00       	mov    edx,0x5
c0008ddf:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008de2:	85 db                	test   ebx,ebx
c0008de4:	0f 84 bf 07 00 00    	je     c00095a9 <linear_vari_process+0x7ea>
c0008dea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ded:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008df1:	74 19                	je     c0008e0c <linear_vari_process+0x4d>
c0008df3:	31 d2                	xor    edx,edx
c0008df5:	39 c2                	cmp    edx,eax
c0008df7:	7d 0c                	jge    c0008e05 <linear_vari_process+0x46>
c0008df9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dfb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008dfe:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e02:	42                   	inc    edx
c0008e03:	eb f0                	jmp    c0008df5 <linear_vari_process+0x36>
c0008e05:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e0c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e0f:	0f af d0             	imul   edx,eax
c0008e12:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e15:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e19:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e20:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e23:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e2a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e2e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e3b:	68 00 00 70 3f       	push   0x3f700000
c0008e40:	6a 00                	push   0x0
c0008e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e4a:	e8 b0 d3 01 00       	call   c00261ff <__ltdf2>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	ba 16 00 00 00       	mov    edx,0x16
c0008e57:	85 c0                	test   eax,eax
c0008e59:	0f 88 4a 07 00 00    	js     c00095a9 <linear_vari_process+0x7ea>
c0008e5f:	68 00 00 70 40       	push   0x40700000
c0008e64:	6a 00                	push   0x0
c0008e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6e:	e8 6e d3 01 00       	call   c00261e1 <__gtdf2>
c0008e73:	83 c4 10             	add    esp,0x10
c0008e76:	ba 16 00 00 00       	mov    edx,0x16
c0008e7b:	85 c0                	test   eax,eax
c0008e7d:	0f 8f 26 07 00 00    	jg     c00095a9 <linear_vari_process+0x7ea>
c0008e83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e87:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e95:	68 00 00 f0 3f       	push   0x3ff00000
c0008e9a:	6a 00                	push   0x0
c0008e9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea4:	e8 56 d3 01 00       	call   c00261ff <__ltdf2>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	0f 89 89 02 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008eb4:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008eb7:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eba:	0f 8d 7d 02 00 00    	jge    c000913d <linear_vari_process+0x37e>
c0008ec0:	83 ec 0c             	sub    esp,0xc
c0008ec3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008ec6:	e8 c8 d0 01 00       	call   c0025f93 <__floatsidf>
c0008ecb:	83 c4 10             	add    esp,0x10
c0008ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ed1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ed5:	68 00 00 f0 3f       	push   0x3ff00000
c0008eda:	6a 00                	push   0x0
c0008edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee4:	e8 ca c3 01 00       	call   c00252b3 <__adddf3>
c0008ee9:	83 c4 10             	add    esp,0x10
c0008eec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ef0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ef4:	52                   	push   edx
c0008ef5:	50                   	push   eax
c0008ef6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efe:	e8 2d ca 01 00       	call   c0025930 <__muldf3>
c0008f03:	5d                   	pop    ebp
c0008f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f08:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f0c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f0f:	e8 7f d0 01 00       	call   c0025f93 <__floatsidf>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f1f:	52                   	push   edx
c0008f20:	50                   	push   eax
c0008f21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f29:	e8 85 c3 01 00       	call   c00252b3 <__adddf3>
c0008f2e:	59                   	pop    ecx
c0008f2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f33:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f37:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f3a:	e8 54 d0 01 00       	call   c0025f93 <__floatsidf>
c0008f3f:	83 c4 10             	add    esp,0x10
c0008f42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f4a:	52                   	push   edx
c0008f4b:	50                   	push   eax
c0008f4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f54:	e8 a4 d2 01 00       	call   c00261fd <__gedf2>
c0008f59:	83 c4 10             	add    esp,0x10
c0008f5c:	85 c0                	test   eax,eax
c0008f5e:	0f 89 d9 01 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008f64:	85 ff                	test   edi,edi
c0008f66:	0f 8e f4 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008f6c:	83 ec 10             	sub    esp,0x10
c0008f6f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f72:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f75:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f7c:	ff 30                	push   DWORD PTR [eax]
c0008f7e:	e8 81 c9 01 00       	call   c0025904 <__subdf3>
c0008f83:	83 c4 18             	add    esp,0x18
c0008f86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8e:	52                   	push   edx
c0008f8f:	50                   	push   eax
c0008f90:	e8 fb d3 01 00       	call   c0026390 <fabs>
c0008f95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fa5:	68 23 42 92 0c       	push   0xc924223
c0008faa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb2:	e8 2a d2 01 00       	call   c00261e1 <__gtdf2>
c0008fb7:	83 c4 10             	add    esp,0x10
c0008fba:	85 c0                	test   eax,eax
c0008fbc:	0f 8e 9e 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008fc2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fc6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fd2:	52                   	push   edx
c0008fd3:	50                   	push   eax
c0008fd4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fd7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fda:	e8 25 c9 01 00       	call   c0025904 <__subdf3>
c0008fdf:	59                   	pop    ecx
c0008fe0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fe4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fe8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008feb:	e8 a3 cf 01 00       	call   c0025f93 <__floatsidf>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ffb:	52                   	push   edx
c0008ffc:	50                   	push   eax
c0008ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009005:	e8 26 c9 01 00       	call   c0025930 <__muldf3>
c000900a:	5f                   	pop    edi
c000900b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000900f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009013:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009016:	e8 78 cf 01 00       	call   c0025f93 <__floatsidf>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009022:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009026:	52                   	push   edx
c0009027:	50                   	push   eax
c0009028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000902c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009030:	e8 df cb 01 00       	call   c0025c14 <__divdf3>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000903c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009040:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009044:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009050:	e8 5e c2 01 00       	call   c00252b3 <__adddf3>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000905c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009060:	31 ff                	xor    edi,edi
c0009062:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009065:	0f 8e 9d 00 00 00    	jle    c0009108 <linear_vari_process+0x349>
c000906b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000906e:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009072:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009075:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009079:	89 04 24             	mov    DWORD PTR [esp],eax
c000907c:	8b 06                	mov    eax,DWORD PTR [esi]
c000907e:	52                   	push   edx
c000907f:	52                   	push   edx
c0009080:	55                   	push   ebp
c0009081:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009084:	47                   	inc    edi
c0009085:	e8 be bb 01 00       	call   c0024c48 <__subsf3>
c000908a:	89 04 24             	mov    DWORD PTR [esp],eax
c000908d:	e8 95 d2 01 00       	call   c0026327 <__extendsfdf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009099:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000909d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ad:	e8 7e c8 01 00       	call   c0025930 <__muldf3>
c00090b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090bd:	e8 65 d2 01 00       	call   c0026327 <__extendsfdf2>
c00090c2:	83 c4 10             	add    esp,0x10
c00090c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090c9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090cd:	52                   	push   edx
c00090ce:	50                   	push   eax
c00090cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d7:	e8 d7 c1 01 00       	call   c00252b3 <__adddf3>
c00090dc:	59                   	pop    ecx
c00090dd:	5d                   	pop    ebp
c00090de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ee:	e8 10 d1 01 00       	call   c0026203 <__truncdfsf2>
c00090f3:	83 c4 10             	add    esp,0x10
c00090f6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090f9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090fd:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009100:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009103:	e9 5a ff ff ff       	jmp    c0009062 <linear_vari_process+0x2a3>
c0009108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000910c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009110:	68 00 00 f0 3f       	push   0x3ff00000
c0009115:	6a 00                	push   0x0
c0009117:	e8 f8 ca 01 00       	call   c0025c14 <__divdf3>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009122:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009126:	52                   	push   edx
c0009127:	50                   	push   eax
c0009128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	e8 7e c1 01 00       	call   c00252b3 <__adddf3>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	e9 50 fd ff ff       	jmp    c0008e8d <linear_vari_process+0xce>
c000913d:	50                   	push   eax
c000913e:	50                   	push   eax
c000913f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009147:	e8 64 d2 01 00       	call   c00263b0 <lrint>
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	50                   	push   eax
c0009150:	e8 3e ce 01 00       	call   c0025f93 <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000915c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009166:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000916a:	e8 95 c7 01 00       	call   c0025904 <__subdf3>
c000916f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009173:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009177:	83 c4 20             	add    esp,0x20
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009186:	e8 74 d0 01 00       	call   c00261ff <__ltdf2>
c000918b:	83 c4 10             	add    esp,0x10
c000918e:	85 c0                	test   eax,eax
c0009190:	79 1e                	jns    c00091b0 <linear_vari_process+0x3f1>
c0009192:	68 00 00 f0 3f       	push   0x3ff00000
c0009197:	6a 00                	push   0x0
c0009199:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000919d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a1:	e8 0d c1 01 00       	call   c00252b3 <__adddf3>
c00091a6:	83 c4 10             	add    esp,0x10
c00091a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00091ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091b3:	83 ec 10             	sub    esp,0x10
c00091b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c6:	e8 39 c7 01 00       	call   c0025904 <__subdf3>
c00091cb:	83 c4 18             	add    esp,0x18
c00091ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091d6:	52                   	push   edx
c00091d7:	50                   	push   eax
c00091d8:	e8 d3 d1 01 00       	call   c00263b0 <lrint>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	0f af f8             	imul   edi,eax
c00091e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091e6:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091e9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091ec:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091ef:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091f2:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091f6:	0f 8d 13 03 00 00    	jge    c000950f <linear_vari_process+0x750>
c00091fc:	83 ec 0c             	sub    esp,0xc
c00091ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009202:	e8 8c cd 01 00       	call   c0025f93 <__floatsidf>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000920e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009212:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009216:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000921a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009222:	e8 09 c7 01 00       	call   c0025930 <__muldf3>
c0009227:	89 3c 24             	mov    DWORD PTR [esp],edi
c000922a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000922e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009232:	e8 5c cd 01 00       	call   c0025f93 <__floatsidf>
c0009237:	83 c4 10             	add    esp,0x10
c000923a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000923e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009242:	52                   	push   edx
c0009243:	50                   	push   eax
c0009244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000924c:	e8 62 c0 01 00       	call   c00252b3 <__adddf3>
c0009251:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009254:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009258:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925c:	e8 32 cd 01 00       	call   c0025f93 <__floatsidf>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009268:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926c:	52                   	push   edx
c000926d:	50                   	push   eax
c000926e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009276:	e8 84 cf 01 00       	call   c00261ff <__ltdf2>
c000927b:	83 c4 10             	add    esp,0x10
c000927e:	85 c0                	test   eax,eax
c0009280:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009284:	0f 89 85 02 00 00    	jns    c000950f <linear_vari_process+0x750>
c000928a:	85 c9                	test   ecx,ecx
c000928c:	0f 8e f5 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c0009292:	83 ec 10             	sub    esp,0x10
c0009295:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009298:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000929b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000929f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092a2:	ff 30                	push   DWORD PTR [eax]
c00092a4:	e8 5b c6 01 00       	call   c0025904 <__subdf3>
c00092a9:	83 c4 18             	add    esp,0x18
c00092ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b4:	52                   	push   edx
c00092b5:	50                   	push   eax
c00092b6:	e8 d5 d0 01 00       	call   c0026390 <fabs>
c00092bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c3:	83 c4 10             	add    esp,0x10
c00092c6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092cb:	68 23 42 92 0c       	push   0xc924223
c00092d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d8:	e8 04 cf 01 00       	call   c00261e1 <__gtdf2>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	85 c0                	test   eax,eax
c00092e2:	0f 8e 9f 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c00092e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00092f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092f9:	52                   	push   edx
c00092fa:	50                   	push   eax
c00092fb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092fe:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009301:	e8 fe c5 01 00       	call   c0025904 <__subdf3>
c0009306:	5f                   	pop    edi
c0009307:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000930b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000930f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009312:	e8 7c cc 01 00       	call   c0025f93 <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000931e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009322:	52                   	push   edx
c0009323:	50                   	push   eax
c0009324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000932c:	e8 ff c5 01 00       	call   c0025930 <__muldf3>
c0009331:	5d                   	pop    ebp
c0009332:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009336:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000933a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000933d:	e8 51 cc 01 00       	call   c0025f93 <__floatsidf>
c0009342:	83 c4 10             	add    esp,0x10
c0009345:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009349:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000934d:	52                   	push   edx
c000934e:	50                   	push   eax
c000934f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009357:	e8 b8 c8 01 00       	call   c0025c14 <__divdf3>
c000935c:	83 c4 10             	add    esp,0x10
c000935f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009363:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009367:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009377:	e8 37 bf 01 00       	call   c00252b3 <__adddf3>
c000937c:	83 c4 10             	add    esp,0x10
c000937f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009383:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009387:	31 ff                	xor    edi,edi
c0009389:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000938c:	39 f8                	cmp    eax,edi
c000938e:	0f 8e ac 00 00 00    	jle    c0009440 <linear_vari_process+0x681>
c0009394:	8b 16                	mov    edx,DWORD PTR [esi]
c0009396:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009399:	29 c1                	sub    ecx,eax
c000939b:	89 c8                	mov    eax,ecx
c000939d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093a0:	01 f8                	add    eax,edi
c00093a2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093a6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093b3:	51                   	push   ecx
c00093b4:	01 f8                	add    eax,edi
c00093b6:	51                   	push   ecx
c00093b7:	47                   	inc    edi
c00093b8:	55                   	push   ebp
c00093b9:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093bc:	e8 87 b8 01 00       	call   c0024c48 <__subsf3>
c00093c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c4:	e8 5e cf 01 00       	call   c0026327 <__extendsfdf2>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093d4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e4:	e8 47 c5 01 00       	call   c0025930 <__muldf3>
c00093e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093f4:	e8 2e cf 01 00       	call   c0026327 <__extendsfdf2>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009400:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009404:	52                   	push   edx
c0009405:	50                   	push   eax
c0009406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940e:	e8 a0 be 01 00       	call   c00252b3 <__adddf3>
c0009413:	5d                   	pop    ebp
c0009414:	59                   	pop    ecx
c0009415:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009419:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000941d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009421:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009425:	e8 d9 cd 01 00       	call   c0026203 <__truncdfsf2>
c000942a:	83 c4 10             	add    esp,0x10
c000942d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009431:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009435:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009438:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000943b:	e9 49 ff ff ff       	jmp    c0009389 <linear_vari_process+0x5ca>
c0009440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009448:	68 00 00 f0 3f       	push   0x3ff00000
c000944d:	6a 00                	push   0x0
c000944f:	e8 c0 c7 01 00       	call   c0025c14 <__divdf3>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000945f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009463:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946f:	e8 3f be 01 00       	call   c00252b3 <__adddf3>
c0009474:	59                   	pop    ecx
c0009475:	5f                   	pop    edi
c0009476:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000947a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000947e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009486:	e8 25 cf 01 00       	call   c00263b0 <lrint>
c000948b:	83 ec 0c             	sub    esp,0xc
c000948e:	50                   	push   eax
c000948f:	e8 ff ca 01 00       	call   c0025f93 <__floatsidf>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000949b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000949f:	52                   	push   edx
c00094a0:	50                   	push   eax
c00094a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a9:	e8 56 c4 01 00       	call   c0025904 <__subdf3>
c00094ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094b6:	83 c4 20             	add    esp,0x20
c00094b9:	6a 00                	push   0x0
c00094bb:	6a 00                	push   0x0
c00094bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c5:	e8 35 cd 01 00       	call   c00261ff <__ltdf2>
c00094ca:	83 c4 10             	add    esp,0x10
c00094cd:	85 c0                	test   eax,eax
c00094cf:	79 1e                	jns    c00094ef <linear_vari_process+0x730>
c00094d1:	68 00 00 f0 3f       	push   0x3ff00000
c00094d6:	6a 00                	push   0x0
c00094d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094e0:	e8 ce bd 01 00       	call   c00252b3 <__adddf3>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00094eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094f2:	83 ec 10             	sub    esp,0x10
c00094f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009505:	e8 fa c3 01 00       	call   c0025904 <__subdf3>
c000950a:	e9 bc fc ff ff       	jmp    c00091cb <linear_vari_process+0x40c>
c000950f:	39 fd                	cmp    ebp,edi
c0009511:	7d 38                	jge    c000954b <linear_vari_process+0x78c>
c0009513:	83 ec 0c             	sub    esp,0xc
c0009516:	89 f8                	mov    eax,edi
c0009518:	29 e8                	sub    eax,ebp
c000951a:	99                   	cdq    
c000951b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000951e:	50                   	push   eax
c000951f:	e8 6f ca 01 00       	call   c0025f93 <__floatsidf>
c0009524:	83 c4 10             	add    esp,0x10
c0009527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000952f:	52                   	push   edx
c0009530:	50                   	push   eax
c0009531:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009535:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009539:	e8 75 bd 01 00       	call   c00252b3 <__adddf3>
c000953e:	83 c4 10             	add    esp,0x10
c0009541:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009544:	89 04 24             	mov    DWORD PTR [esp],eax
c0009547:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000954b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000954f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009552:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009556:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009559:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000955c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000955f:	85 c0                	test   eax,eax
c0009561:	7f 29                	jg     c000958c <linear_vari_process+0x7cd>
c0009563:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000956b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000956f:	89 01                	mov    DWORD PTR [ecx],eax
c0009571:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009574:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009577:	99                   	cdq    
c0009578:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000957b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000957e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009581:	99                   	cdq    
c0009582:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009585:	31 d2                	xor    edx,edx
c0009587:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000958a:	eb 1d                	jmp    c00095a9 <linear_vari_process+0x7ea>
c000958c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000958f:	31 d2                	xor    edx,edx
c0009591:	29 c8                	sub    eax,ecx
c0009593:	c1 e0 02             	shl    eax,0x2
c0009596:	39 d1                	cmp    ecx,edx
c0009598:	7e c9                	jle    c0009563 <linear_vari_process+0x7a4>
c000959a:	8b 3e                	mov    edi,DWORD PTR [esi]
c000959c:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000959f:	83 c0 04             	add    eax,0x4
c00095a2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095a6:	42                   	inc    edx
c00095a7:	eb ed                	jmp    c0009596 <linear_vari_process+0x7d7>
c00095a9:	83 c4 3c             	add    esp,0x3c
c00095ac:	89 d0                	mov    eax,edx
c00095ae:	5b                   	pop    ebx
c00095af:	5e                   	pop    esi
c00095b0:	5f                   	pop    edi
c00095b1:	5d                   	pop    ebp
c00095b2:	c3                   	ret    

c00095b3 <linear_reset>:
c00095b3:	83 ec 0c             	sub    esp,0xc
c00095b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095ba:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095bd:	85 c0                	test   eax,eax
c00095bf:	74 20                	je     c00095e1 <linear_reset+0x2e>
c00095c1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095c4:	83 c0 1c             	add    eax,0x1c
c00095c7:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095ca:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095d1:	c1 e2 02             	shl    edx,0x2
c00095d4:	51                   	push   ecx
c00095d5:	52                   	push   edx
c00095d6:	6a 00                	push   0x0
c00095d8:	50                   	push   eax
c00095d9:	e8 ad 70 ff ff       	call   c000068b <memset>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	83 c4 0c             	add    esp,0xc
c00095e4:	c3                   	ret    

c00095e5 <linear_get_name>:
c00095e5:	31 c0                	xor    eax,eax
c00095e7:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095ec:	75 05                	jne    c00095f3 <linear_get_name+0xe>
c00095ee:	b8 a0 7a 02 c0       	mov    eax,0xc0027aa0
c00095f3:	c3                   	ret    

c00095f4 <linear_get_description>:
c00095f4:	31 c0                	xor    eax,eax
c00095f6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095fb:	75 05                	jne    c0009602 <linear_get_description+0xe>
c00095fd:	b8 b4 7a 02 c0       	mov    eax,0xc0027ab4
c0009602:	c3                   	ret    

c0009603 <linear_set_converter>:
c0009603:	53                   	push   ebx
c0009604:	b8 0a 00 00 00       	mov    eax,0xa
c0009609:	83 ec 08             	sub    esp,0x8
c000960c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009610:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009615:	75 6e                	jne    c0009685 <linear_set_converter+0x82>
c0009617:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000961a:	85 c0                	test   eax,eax
c000961c:	74 13                	je     c0009631 <linear_set_converter+0x2e>
c000961e:	83 ec 0c             	sub    esp,0xc
c0009621:	50                   	push   eax
c0009622:	e8 b9 5e 00 00       	call   c000f4e0 <free>
c0009627:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000962e:	83 c4 10             	add    esp,0x10
c0009631:	50                   	push   eax
c0009632:	50                   	push   eax
c0009633:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009636:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000963d:	50                   	push   eax
c000963e:	6a 01                	push   0x1
c0009640:	e8 bb 5e 00 00       	call   c000f500 <calloc>
c0009645:	83 c4 10             	add    esp,0x10
c0009648:	89 c2                	mov    edx,eax
c000964a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000964d:	85 d2                	test   edx,edx
c000964f:	b8 01 00 00 00       	mov    eax,0x1
c0009654:	74 2f                	je     c0009685 <linear_set_converter+0x82>
c0009656:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009659:	83 ec 0c             	sub    esp,0xc
c000965c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000965f:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009665:	c7 43 24 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008dbf
c000966c:	c7 43 20 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008dbf
c0009673:	c7 43 28 b3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095b3
c000967a:	53                   	push   ebx
c000967b:	e8 33 ff ff ff       	call   c00095b3 <linear_reset>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	31 c0                	xor    eax,eax
c0009685:	83 c4 08             	add    esp,0x8
c0009688:	5b                   	pop    ebx
c0009689:	c3                   	ret    

c000968a <int_to_fp>:
c000968a:	c1 e0 0c             	shl    eax,0xc
c000968d:	c3                   	ret    

c000968e <fp_to_int>:
c000968e:	c1 f8 0c             	sar    eax,0xc
c0009691:	c3                   	ret    

c0009692 <fp_fraction_part>:
c0009692:	25 ff 0f 00 00       	and    eax,0xfff
c0009697:	c3                   	ret    

c0009698 <fp_to_double>:
c0009698:	83 ec 1c             	sub    esp,0x1c
c000969b:	e8 f2 ff ff ff       	call   c0009692 <fp_fraction_part>
c00096a0:	83 ec 0c             	sub    esp,0xc
c00096a3:	50                   	push   eax
c00096a4:	e8 ea c8 01 00       	call   c0025f93 <__floatsidf>
c00096a9:	83 c4 10             	add    esp,0x10
c00096ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b4:	68 00 00 30 3f       	push   0x3f300000
c00096b9:	6a 00                	push   0x0
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	e8 68 c2 01 00       	call   c0025930 <__muldf3>
c00096c8:	83 c4 2c             	add    esp,0x2c
c00096cb:	c3                   	ret    

c00096cc <calc_output_single>:
c00096cc:	55                   	push   ebp
c00096cd:	57                   	push   edi
c00096ce:	56                   	push   esi
c00096cf:	89 c6                	mov    esi,eax
c00096d1:	53                   	push   ebx
c00096d2:	89 d3                	mov    ebx,edx
c00096d4:	83 ec 4c             	sub    esp,0x4c
c00096d7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096db:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096de:	e8 a7 ff ff ff       	call   c000968a <int_to_fp>
c00096e3:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096ea:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096ee:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096f2:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096f5:	99                   	cdq    
c00096f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096fe:	f7 fb                	idiv   ebx
c0009700:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009708:	89 da                	mov    edx,ebx
c000970a:	0f af d0             	imul   edx,eax
c000970d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009711:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009715:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009719:	29 c2                	sub    edx,eax
c000971b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009722:	83 c5 04             	add    ebp,0x4
c0009725:	e8 6e ff ff ff       	call   c0009698 <fp_to_double>
c000972a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000972e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009736:	e8 53 ff ff ff       	call   c000968e <fp_to_int>
c000973b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000973e:	52                   	push   edx
c000973f:	52                   	push   edx
c0009740:	51                   	push   ecx
c0009741:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009745:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009749:	e8 fa b4 01 00       	call   c0024c48 <__subsf3>
c000974e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009751:	e8 d1 cb 01 00       	call   c0026327 <__extendsfdf2>
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000975d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009761:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009769:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000976d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009771:	e8 ba c1 01 00       	call   c0025930 <__muldf3>
c0009776:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000977a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000977e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009781:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009785:	e8 9d cb 01 00       	call   c0026327 <__extendsfdf2>
c000978a:	83 c4 10             	add    esp,0x10
c000978d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009795:	52                   	push   edx
c0009796:	50                   	push   eax
c0009797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979f:	e8 0f bb 01 00       	call   c00252b3 <__adddf3>
c00097a4:	59                   	pop    ecx
c00097a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097ad:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097b3:	e8 6f cb 01 00       	call   c0026327 <__extendsfdf2>
c00097b8:	83 c4 10             	add    esp,0x10
c00097bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097bf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c3:	52                   	push   edx
c00097c4:	50                   	push   eax
c00097c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097cd:	e8 5e c1 01 00       	call   c0025930 <__muldf3>
c00097d2:	83 c4 10             	add    esp,0x10
c00097d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097dd:	52                   	push   edx
c00097de:	50                   	push   eax
c00097df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e7:	e8 c7 ba 01 00       	call   c00252b3 <__adddf3>
c00097ec:	83 c4 10             	add    esp,0x10
c00097ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097f7:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097fb:	0f 89 1d ff ff ff    	jns    c000971e <calc_output_single+0x52>
c0009801:	89 d9                	mov    ecx,ebx
c0009803:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009807:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000980b:	89 dd                	mov    ebp,ebx
c000980d:	29 c8                	sub    eax,ecx
c000980f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009817:	99                   	cdq    
c0009818:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009820:	f7 fb                	idiv   ebx
c0009822:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009826:	0f af e8             	imul   ebp,eax
c0009829:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000982d:	01 cd                	add    ebp,ecx
c000982f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009832:	89 e8                	mov    eax,ebp
c0009834:	83 ee 04             	sub    esi,0x4
c0009837:	e8 5c fe ff ff       	call   c0009698 <fp_to_double>
c000983c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009840:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009844:	89 e8                	mov    eax,ebp
c0009846:	29 dd                	sub    ebp,ebx
c0009848:	e8 41 fe ff ff       	call   c000968e <fp_to_int>
c000984d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009850:	52                   	push   edx
c0009851:	52                   	push   edx
c0009852:	51                   	push   ecx
c0009853:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009857:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000985b:	e8 e8 b3 01 00       	call   c0024c48 <__subsf3>
c0009860:	89 04 24             	mov    DWORD PTR [esp],eax
c0009863:	e8 bf ca 01 00       	call   c0026327 <__extendsfdf2>
c0009868:	83 c4 10             	add    esp,0x10
c000986b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000986f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000987b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000987f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009883:	e8 a8 c0 01 00       	call   c0025930 <__muldf3>
c0009888:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000988c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009890:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009893:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009897:	e8 8b ca 01 00       	call   c0026327 <__extendsfdf2>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098a7:	52                   	push   edx
c00098a8:	50                   	push   eax
c00098a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098b1:	e8 fd b9 01 00       	call   c00252b3 <__adddf3>
c00098b6:	59                   	pop    ecx
c00098b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098bb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098bf:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098c5:	e8 5d ca 01 00       	call   c0026327 <__extendsfdf2>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098d5:	52                   	push   edx
c00098d6:	50                   	push   eax
c00098d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098df:	e8 4c c0 01 00       	call   c0025930 <__muldf3>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098ef:	52                   	push   edx
c00098f0:	50                   	push   eax
c00098f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f9:	e8 b5 b9 01 00       	call   c00252b3 <__adddf3>
c00098fe:	83 c4 10             	add    esp,0x10
c0009901:	85 ed                	test   ebp,ebp
c0009903:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009907:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000990b:	0f 8f 21 ff ff ff    	jg     c0009832 <calc_output_single+0x166>
c0009911:	52                   	push   edx
c0009912:	50                   	push   eax
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 93 b9 01 00       	call   c00252b3 <__adddf3>
c0009920:	83 c4 5c             	add    esp,0x5c
c0009923:	5b                   	pop    ebx
c0009924:	5e                   	pop    esi
c0009925:	5f                   	pop    edi
c0009926:	5d                   	pop    ebp
c0009927:	c3                   	ret    

c0009928 <calc_output_stereo>:
c0009928:	55                   	push   ebp
c0009929:	89 cd                	mov    ebp,ecx
c000992b:	57                   	push   edi
c000992c:	56                   	push   esi
c000992d:	53                   	push   ebx
c000992e:	89 c3                	mov    ebx,eax
c0009930:	83 ec 6c             	sub    esp,0x6c
c0009933:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009937:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000993e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009945:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009949:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000994d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009950:	e8 35 fd ff ff       	call   c000968a <int_to_fp>
c0009955:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000995d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009961:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009969:	29 c8                	sub    eax,ecx
c000996b:	99                   	cdq    
c000996c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	0f af d0             	imul   edx,eax
c0009977:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000997a:	31 d2                	xor    edx,edx
c000997c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009980:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009984:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009987:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000998b:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c000998e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009992:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009996:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009999:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000999e:	29 c1                	sub    ecx,eax
c00099a0:	31 c0                	xor    eax,eax
c00099a2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099ad:	83 c7 08             	add    edi,0x8
c00099b0:	e8 e3 fc ff ff       	call   c0009698 <fp_to_double>
c00099b5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099c1:	e8 c8 fc ff ff       	call   c000968e <fp_to_int>
c00099c6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099c9:	52                   	push   edx
c00099ca:	52                   	push   edx
c00099cb:	51                   	push   ecx
c00099cc:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099d0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099d4:	e8 6f b2 01 00       	call   c0024c48 <__subsf3>
c00099d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099dc:	e8 46 c9 01 00       	call   c0026327 <__extendsfdf2>
c00099e1:	83 c4 10             	add    esp,0x10
c00099e4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099e8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099fc:	e8 2f bf 01 00       	call   c0025930 <__muldf3>
c0009a01:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a05:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a0c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a10:	e8 12 c9 01 00       	call   c0026327 <__extendsfdf2>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a1c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a20:	52                   	push   edx
c0009a21:	50                   	push   eax
c0009a22:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a26:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a2a:	e8 84 b8 01 00       	call   c00252b3 <__adddf3>
c0009a2f:	59                   	pop    ecx
c0009a30:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a34:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a38:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a3e:	e8 e4 c8 01 00       	call   c0026327 <__extendsfdf2>
c0009a43:	83 c4 10             	add    esp,0x10
c0009a46:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a4a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a56:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5e:	e8 cd be 01 00       	call   c0025930 <__muldf3>
c0009a63:	83 c4 10             	add    esp,0x10
c0009a66:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a6a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a6e:	52                   	push   edx
c0009a6f:	50                   	push   eax
c0009a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a78:	e8 36 b8 01 00       	call   c00252b3 <__adddf3>
c0009a7d:	59                   	pop    ecx
c0009a7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a82:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a86:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a8c:	e8 96 c8 01 00       	call   c0026327 <__extendsfdf2>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a98:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aa8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aac:	e8 7f be 01 00       	call   c0025930 <__muldf3>
c0009ab1:	83 c4 10             	add    esp,0x10
c0009ab4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ab8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009abc:	52                   	push   edx
c0009abd:	50                   	push   eax
c0009abe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac6:	e8 e8 b7 01 00       	call   c00252b3 <__adddf3>
c0009acb:	83 c4 10             	add    esp,0x10
c0009ace:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ad2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ada:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ade:	0f 89 c5 fe ff ff    	jns    c00099a9 <calc_output_stereo+0x81>
c0009ae4:	29 e9                	sub    ecx,ebp
c0009ae6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009aea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009aee:	29 c8                	sub    eax,ecx
c0009af0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009af8:	99                   	cdq    
c0009af9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009afd:	31 d2                	xor    edx,edx
c0009aff:	0f af f8             	imul   edi,eax
c0009b02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b06:	40                   	inc    eax
c0009b07:	01 cf                	add    edi,ecx
c0009b09:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b0e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b12:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b1a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b1d:	31 c0                	xor    eax,eax
c0009b1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b23:	89 f8                	mov    eax,edi
c0009b25:	83 eb 08             	sub    ebx,0x8
c0009b28:	e8 6b fb ff ff       	call   c0009698 <fp_to_double>
c0009b2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b35:	89 f8                	mov    eax,edi
c0009b37:	e8 52 fb ff ff       	call   c000968e <fp_to_int>
c0009b3c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b3f:	52                   	push   edx
c0009b40:	52                   	push   edx
c0009b41:	55                   	push   ebp
c0009b42:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b46:	e8 fd b0 01 00       	call   c0024c48 <__subsf3>
c0009b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b4e:	e8 d4 c7 01 00       	call   c0026327 <__extendsfdf2>
c0009b53:	83 c4 10             	add    esp,0x10
c0009b56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6e:	e8 bd bd 01 00       	call   c0025930 <__muldf3>
c0009b73:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7e:	e8 a4 c7 01 00       	call   c0026327 <__extendsfdf2>
c0009b83:	83 c4 10             	add    esp,0x10
c0009b86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b8a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b8e:	52                   	push   edx
c0009b8f:	50                   	push   eax
c0009b90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b98:	e8 16 b7 01 00       	call   c00252b3 <__adddf3>
c0009b9d:	59                   	pop    ecx
c0009b9e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ba2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ba6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bac:	e8 76 c7 01 00       	call   c0026327 <__extendsfdf2>
c0009bb1:	83 c4 10             	add    esp,0x10
c0009bb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bbc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bcc:	e8 5f bd 01 00       	call   c0025930 <__muldf3>
c0009bd1:	83 c4 10             	add    esp,0x10
c0009bd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bdc:	52                   	push   edx
c0009bdd:	50                   	push   eax
c0009bde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be6:	e8 c8 b6 01 00       	call   c00252b3 <__adddf3>
c0009beb:	5d                   	pop    ebp
c0009bec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009bf0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009bf4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bfa:	e8 28 c7 01 00       	call   c0026327 <__extendsfdf2>
c0009bff:	83 c4 10             	add    esp,0x10
c0009c02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c06:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c12:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c16:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c1a:	e8 11 bd 01 00       	call   c0025930 <__muldf3>
c0009c1f:	83 c4 10             	add    esp,0x10
c0009c22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c26:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c2a:	52                   	push   edx
c0009c2b:	50                   	push   eax
c0009c2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c34:	e8 7a b6 01 00       	call   c00252b3 <__adddf3>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c48:	85 ff                	test   edi,edi
c0009c4a:	0f 8f d3 fe ff ff    	jg     c0009b23 <calc_output_stereo+0x1fb>
c0009c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c60:	e8 4e b6 01 00       	call   c00252b3 <__adddf3>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c70:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c80:	e8 ab bc 01 00       	call   c0025930 <__muldf3>
c0009c85:	59                   	pop    ecx
c0009c86:	5b                   	pop    ebx
c0009c87:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c97:	e8 67 c5 01 00       	call   c0026203 <__truncdfsf2>
c0009c9c:	83 c4 10             	add    esp,0x10
c0009c9f:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb8:	e8 f6 b5 01 00       	call   c00252b3 <__adddf3>
c0009cbd:	83 c4 10             	add    esp,0x10
c0009cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ccc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd8:	e8 53 bc 01 00       	call   c0025930 <__muldf3>
c0009cdd:	5e                   	pop    esi
c0009cde:	5f                   	pop    edi
c0009cdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ce3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cef:	e8 0f c5 01 00       	call   c0026203 <__truncdfsf2>
c0009cf4:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009cfb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cfe:	83 c4 7c             	add    esp,0x7c
c0009d01:	5b                   	pop    ebx
c0009d02:	5e                   	pop    esi
c0009d03:	5f                   	pop    edi
c0009d04:	5d                   	pop    ebp
c0009d05:	c3                   	ret    

c0009d06 <calc_output_quad>:
c0009d06:	55                   	push   ebp
c0009d07:	57                   	push   edi
c0009d08:	56                   	push   esi
c0009d09:	89 c6                	mov    esi,eax
c0009d0b:	53                   	push   ebx
c0009d0c:	83 ec 7c             	sub    esp,0x7c
c0009d0f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d13:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d17:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d1e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d2d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d30:	e8 55 f9 ff ff       	call   c000968a <int_to_fp>
c0009d35:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d38:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d3b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d43:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d47:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d4b:	99                   	cdq    
c0009d4c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d50:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d54:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d57:	31 d2                	xor    edx,edx
c0009d59:	0f af d8             	imul   ebx,eax
c0009d5c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d64:	0f af c7             	imul   eax,edi
c0009d67:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d6b:	29 c1                	sub    ecx,eax
c0009d6d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d8e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d92:	89 d8                	mov    eax,ebx
c0009d94:	83 c7 10             	add    edi,0x10
c0009d97:	e8 fc f8 ff ff       	call   c0009698 <fp_to_double>
c0009d9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da4:	89 d8                	mov    eax,ebx
c0009da6:	e8 e3 f8 ff ff       	call   c000968e <fp_to_int>
c0009dab:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009daf:	52                   	push   edx
c0009db0:	52                   	push   edx
c0009db1:	51                   	push   ecx
c0009db2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009db6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dba:	e8 89 ae 01 00       	call   c0024c48 <__subsf3>
c0009dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dc2:	e8 60 c5 01 00       	call   c0026327 <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dde:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009de2:	e8 49 bb 01 00       	call   c0025930 <__muldf3>
c0009de7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009deb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009def:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009df6:	e8 2c c5 01 00       	call   c0026327 <__extendsfdf2>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e02:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e06:	52                   	push   edx
c0009e07:	50                   	push   eax
c0009e08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e10:	e8 9e b4 01 00       	call   c00252b3 <__adddf3>
c0009e15:	59                   	pop    ecx
c0009e16:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e1a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e1e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e24:	e8 fe c4 01 00       	call   c0026327 <__extendsfdf2>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e30:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e44:	e8 e7 ba 01 00       	call   c0025930 <__muldf3>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e50:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e54:	52                   	push   edx
c0009e55:	50                   	push   eax
c0009e56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5e:	e8 50 b4 01 00       	call   c00252b3 <__adddf3>
c0009e63:	59                   	pop    ecx
c0009e64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e6c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e72:	e8 b0 c4 01 00       	call   c0026327 <__extendsfdf2>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e7e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e8e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e92:	e8 99 ba 01 00       	call   c0025930 <__muldf3>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea2:	52                   	push   edx
c0009ea3:	50                   	push   eax
c0009ea4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eac:	e8 02 b4 01 00       	call   c00252b3 <__adddf3>
c0009eb1:	59                   	pop    ecx
c0009eb2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eb6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eba:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ec0:	e8 62 c4 01 00       	call   c0026327 <__extendsfdf2>
c0009ec5:	83 c4 10             	add    esp,0x10
c0009ec8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ecc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009edc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ee0:	e8 4b ba 01 00       	call   c0025930 <__muldf3>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef0:	52                   	push   edx
c0009ef1:	50                   	push   eax
c0009ef2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009efa:	e8 b4 b3 01 00       	call   c00252b3 <__adddf3>
c0009eff:	59                   	pop    ecx
c0009f00:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f04:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f08:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f0e:	e8 14 c4 01 00       	call   c0026327 <__extendsfdf2>
c0009f13:	83 c4 10             	add    esp,0x10
c0009f16:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f1a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2e:	e8 fd b9 01 00       	call   c0025930 <__muldf3>
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f3e:	52                   	push   edx
c0009f3f:	50                   	push   eax
c0009f40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f48:	e8 66 b3 01 00       	call   c00252b3 <__adddf3>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f54:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f58:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f5c:	0f 89 30 fe ff ff    	jns    c0009d92 <calc_output_quad+0x8c>
c0009f62:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f6a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f6e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f72:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f7a:	29 c8                	sub    eax,ecx
c0009f7c:	99                   	cdq    
c0009f7d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f81:	31 d2                	xor    edx,edx
c0009f83:	0f af d8             	imul   ebx,eax
c0009f86:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f8a:	40                   	inc    eax
c0009f8b:	01 cb                	add    ebx,ecx
c0009f8d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f92:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f96:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f9e:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fa1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fa9:	31 c0                	xor    eax,eax
c0009fab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009faf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fb7:	89 d8                	mov    eax,ebx
c0009fb9:	83 ee 10             	sub    esi,0x10
c0009fbc:	e8 d7 f6 ff ff       	call   c0009698 <fp_to_double>
c0009fc1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fc9:	89 d8                	mov    eax,ebx
c0009fcb:	e8 be f6 ff ff       	call   c000968e <fp_to_int>
c0009fd0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fd4:	52                   	push   edx
c0009fd5:	52                   	push   edx
c0009fd6:	57                   	push   edi
c0009fd7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fdb:	e8 68 ac 01 00       	call   c0024c48 <__subsf3>
c0009fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fe3:	e8 3f c3 01 00       	call   c0026327 <__extendsfdf2>
c0009fe8:	83 c4 10             	add    esp,0x10
c0009feb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fef:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ffb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a003:	e8 28 b9 01 00       	call   c0025930 <__muldf3>
c000a008:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a00b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a00f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a013:	e8 0f c3 01 00       	call   c0026327 <__extendsfdf2>
c000a018:	83 c4 10             	add    esp,0x10
c000a01b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a023:	52                   	push   edx
c000a024:	50                   	push   eax
c000a025:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a029:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02d:	e8 81 b2 01 00       	call   c00252b3 <__adddf3>
c000a032:	59                   	pop    ecx
c000a033:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a037:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a03b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a041:	e8 e1 c2 01 00       	call   c0026327 <__extendsfdf2>
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a04d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a059:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a061:	e8 ca b8 01 00       	call   c0025930 <__muldf3>
c000a066:	83 c4 10             	add    esp,0x10
c000a069:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a071:	52                   	push   edx
c000a072:	50                   	push   eax
c000a073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07b:	e8 33 b2 01 00       	call   c00252b3 <__adddf3>
c000a080:	5f                   	pop    edi
c000a081:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a085:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a089:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a08f:	e8 93 c2 01 00       	call   c0026327 <__extendsfdf2>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a09b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0af:	e8 7c b8 01 00       	call   c0025930 <__muldf3>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bf:	52                   	push   edx
c000a0c0:	50                   	push   eax
c000a0c1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c9:	e8 e5 b1 01 00       	call   c00252b3 <__adddf3>
c000a0ce:	59                   	pop    ecx
c000a0cf:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0d3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0d7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0dd:	e8 45 c2 01 00       	call   c0026327 <__extendsfdf2>
c000a0e2:	83 c4 10             	add    esp,0x10
c000a0e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0fd:	e8 2e b8 01 00       	call   c0025930 <__muldf3>
c000a102:	83 c4 10             	add    esp,0x10
c000a105:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a109:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10d:	52                   	push   edx
c000a10e:	50                   	push   eax
c000a10f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a113:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a117:	e8 97 b1 01 00       	call   c00252b3 <__adddf3>
c000a11c:	5f                   	pop    edi
c000a11d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a121:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a125:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a12b:	e8 f7 c1 01 00       	call   c0026327 <__extendsfdf2>
c000a130:	83 c4 10             	add    esp,0x10
c000a133:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a137:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a13b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a143:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a147:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a14b:	e8 e0 b7 01 00       	call   c0025930 <__muldf3>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a157:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a15b:	52                   	push   edx
c000a15c:	50                   	push   eax
c000a15d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a161:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a165:	e8 49 b1 01 00       	call   c00252b3 <__adddf3>
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a171:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a175:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a179:	85 db                	test   ebx,ebx
c000a17b:	0f 8f 36 fe ff ff    	jg     c0009fb7 <calc_output_quad+0x2b1>
c000a181:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a18d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a191:	e8 1d b1 01 00       	call   c00252b3 <__adddf3>
c000a196:	83 c4 10             	add    esp,0x10
c000a199:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a19d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b1:	e8 7a b7 01 00       	call   c0025930 <__muldf3>
c000a1b6:	59                   	pop    ecx
c000a1b7:	5b                   	pop    ebx
c000a1b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c8:	e8 36 c0 01 00       	call   c0026203 <__truncdfsf2>
c000a1cd:	83 c4 10             	add    esp,0x10
c000a1d0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1d7:	89 06                	mov    DWORD PTR [esi],eax
c000a1d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e9:	e8 c5 b0 01 00       	call   c00252b3 <__adddf3>
c000a1ee:	83 c4 10             	add    esp,0x10
c000a1f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a205:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a209:	e8 22 b7 01 00       	call   c0025930 <__muldf3>
c000a20e:	5e                   	pop    esi
c000a20f:	5f                   	pop    edi
c000a210:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a214:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a220:	e8 de bf 01 00       	call   c0026203 <__truncdfsf2>
c000a225:	83 c4 10             	add    esp,0x10
c000a228:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a22f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a232:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a236:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a23a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a23e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a242:	e8 6c b0 01 00       	call   c00252b3 <__adddf3>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a24e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a262:	e8 c9 b6 01 00       	call   c0025930 <__muldf3>
c000a267:	5d                   	pop    ebp
c000a268:	59                   	pop    ecx
c000a269:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a26d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a271:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a279:	e8 85 bf 01 00       	call   c0026203 <__truncdfsf2>
c000a27e:	83 c4 10             	add    esp,0x10
c000a281:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a288:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a28b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a293:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a297:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a29b:	e8 13 b0 01 00       	call   c00252b3 <__adddf3>
c000a2a0:	83 c4 10             	add    esp,0x10
c000a2a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2bb:	e8 70 b6 01 00       	call   c0025930 <__muldf3>
c000a2c0:	5b                   	pop    ebx
c000a2c1:	5e                   	pop    esi
c000a2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d2:	e8 2c bf 01 00       	call   c0026203 <__truncdfsf2>
c000a2d7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2de:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2e1:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2e7:	5b                   	pop    ebx
c000a2e8:	5e                   	pop    esi
c000a2e9:	5f                   	pop    edi
c000a2ea:	5d                   	pop    ebp
c000a2eb:	c3                   	ret    

c000a2ec <calc_output_hex>:
c000a2ec:	55                   	push   ebp
c000a2ed:	89 cd                	mov    ebp,ecx
c000a2ef:	57                   	push   edi
c000a2f0:	56                   	push   esi
c000a2f1:	53                   	push   ebx
c000a2f2:	89 c3                	mov    ebx,eax
c000a2f4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2fa:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2fd:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a304:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a30b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a30f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a313:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a316:	e8 6f f3 ff ff       	call   c000968a <int_to_fp>
c000a31b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a31e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a322:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a325:	29 c8                	sub    eax,ecx
c000a327:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a32b:	99                   	cdq    
c000a32c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a334:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a337:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a33f:	0f af f8             	imul   edi,eax
c000a342:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a345:	01 cf                	add    edi,ecx
c000a347:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a34b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a34e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a352:	0f af c2             	imul   eax,edx
c000a355:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a359:	29 c1                	sub    ecx,eax
c000a35b:	31 d2                	xor    edx,edx
c000a35d:	31 c0                	xor    eax,eax
c000a35f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a36a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a36e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a372:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a376:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a37a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a37e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	89 f8                	mov    eax,edi
c000a38c:	e8 07 f3 ff ff       	call   c0009698 <fp_to_double>
c000a391:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a395:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a399:	89 f8                	mov    eax,edi
c000a39b:	e8 ee f2 ff ff       	call   c000968e <fp_to_int>
c000a3a0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3a4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3a7:	52                   	push   edx
c000a3a8:	52                   	push   edx
c000a3a9:	51                   	push   ecx
c000a3aa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3ae:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3b5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3b9:	e8 8a a8 01 00       	call   c0024c48 <__subsf3>
c000a3be:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3c1:	e8 61 bf 01 00       	call   c0026327 <__extendsfdf2>
c000a3c6:	83 c4 10             	add    esp,0x10
c000a3c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3e1:	e8 4a b5 01 00       	call   c0025930 <__muldf3>
c000a3e6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3f5:	e8 2d bf 01 00       	call   c0026327 <__extendsfdf2>
c000a3fa:	83 c4 10             	add    esp,0x10
c000a3fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a401:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a405:	52                   	push   edx
c000a406:	50                   	push   eax
c000a407:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40f:	e8 9f ae 01 00       	call   c00252b3 <__adddf3>
c000a414:	59                   	pop    ecx
c000a415:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a419:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a41d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a423:	e8 ff be 01 00       	call   c0026327 <__extendsfdf2>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a42f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a43f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a443:	e8 e8 b4 01 00       	call   c0025930 <__muldf3>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a44f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a453:	52                   	push   edx
c000a454:	50                   	push   eax
c000a455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a459:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a45d:	e8 51 ae 01 00       	call   c00252b3 <__adddf3>
c000a462:	59                   	pop    ecx
c000a463:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a467:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a46b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a471:	e8 b1 be 01 00       	call   c0026327 <__extendsfdf2>
c000a476:	83 c4 10             	add    esp,0x10
c000a479:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a47d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a485:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a489:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a48d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a491:	e8 9a b4 01 00       	call   c0025930 <__muldf3>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a1:	52                   	push   edx
c000a4a2:	50                   	push   eax
c000a4a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ab:	e8 03 ae 01 00       	call   c00252b3 <__adddf3>
c000a4b0:	59                   	pop    ecx
c000a4b1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4b5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4b9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4bf:	e8 63 be 01 00       	call   c0026327 <__extendsfdf2>
c000a4c4:	83 c4 10             	add    esp,0x10
c000a4c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4cb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4db:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4df:	e8 4c b4 01 00       	call   c0025930 <__muldf3>
c000a4e4:	83 c4 10             	add    esp,0x10
c000a4e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ef:	52                   	push   edx
c000a4f0:	50                   	push   eax
c000a4f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f9:	e8 b5 ad 01 00       	call   c00252b3 <__adddf3>
c000a4fe:	59                   	pop    ecx
c000a4ff:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a503:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a507:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a50d:	e8 15 be 01 00       	call   c0026327 <__extendsfdf2>
c000a512:	83 c4 10             	add    esp,0x10
c000a515:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a519:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a525:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a529:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a52d:	e8 fe b3 01 00       	call   c0025930 <__muldf3>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a539:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53d:	52                   	push   edx
c000a53e:	50                   	push   eax
c000a53f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a543:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a547:	e8 67 ad 01 00       	call   c00252b3 <__adddf3>
c000a54c:	59                   	pop    ecx
c000a54d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a551:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a555:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a55b:	e8 c7 bd 01 00       	call   c0026327 <__extendsfdf2>
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a567:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a573:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a577:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a57b:	e8 b0 b3 01 00       	call   c0025930 <__muldf3>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	83 c6 18             	add    esi,0x18
c000a586:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a58a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58e:	52                   	push   edx
c000a58f:	50                   	push   eax
c000a590:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a594:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a598:	e8 16 ad 01 00       	call   c00252b3 <__adddf3>
c000a59d:	59                   	pop    ecx
c000a59e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5a2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5a6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5ac:	e8 76 bd 01 00       	call   c0026327 <__extendsfdf2>
c000a5b1:	83 c4 10             	add    esp,0x10
c000a5b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5b8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5cc:	e8 5f b3 01 00       	call   c0025930 <__muldf3>
c000a5d1:	83 c4 10             	add    esp,0x10
c000a5d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5dc:	52                   	push   edx
c000a5dd:	50                   	push   eax
c000a5de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e6:	e8 c8 ac 01 00       	call   c00252b3 <__adddf3>
c000a5eb:	83 c4 10             	add    esp,0x10
c000a5ee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5f2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5f6:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5f9:	0f 89 8b fd ff ff    	jns    c000a38a <calc_output_hex+0x9e>
c000a5ff:	31 f6                	xor    esi,esi
c000a601:	31 ff                	xor    edi,edi
c000a603:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a607:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a60a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a60e:	29 e9                	sub    ecx,ebp
c000a610:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a614:	29 c8                	sub    eax,ecx
c000a616:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a619:	99                   	cdq    
c000a61a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a61e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a621:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a625:	0f af e8             	imul   ebp,eax
c000a628:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a62c:	40                   	inc    eax
c000a62d:	01 cd                	add    ebp,ecx
c000a62f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a634:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a638:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a63c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a640:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a643:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a647:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a64b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a64f:	89 e8                	mov    eax,ebp
c000a651:	e8 42 f0 ff ff       	call   c0009698 <fp_to_double>
c000a656:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a65a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a65e:	89 e8                	mov    eax,ebp
c000a660:	e8 29 f0 ff ff       	call   c000968e <fp_to_int>
c000a665:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a669:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a66c:	52                   	push   edx
c000a66d:	52                   	push   edx
c000a66e:	51                   	push   ecx
c000a66f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a676:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a67d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a681:	e8 c2 a5 01 00       	call   c0024c48 <__subsf3>
c000a686:	89 04 24             	mov    DWORD PTR [esp],eax
c000a689:	e8 99 bc 01 00       	call   c0026327 <__extendsfdf2>
c000a68e:	83 c4 10             	add    esp,0x10
c000a691:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a695:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a9:	e8 82 b2 01 00       	call   c0025930 <__muldf3>
c000a6ae:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6b9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6bc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6c0:	e8 62 bc 01 00       	call   c0026327 <__extendsfdf2>
c000a6c5:	83 c4 10             	add    esp,0x10
c000a6c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d0:	52                   	push   edx
c000a6d1:	50                   	push   eax
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6da:	e8 d4 ab 01 00       	call   c00252b3 <__adddf3>
c000a6df:	59                   	pop    ecx
c000a6e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6e4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6e8:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6ee:	e8 34 bc 01 00       	call   c0026327 <__extendsfdf2>
c000a6f3:	83 c4 10             	add    esp,0x10
c000a6f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a706:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70e:	e8 1d b2 01 00       	call   c0025930 <__muldf3>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a71e:	52                   	push   edx
c000a71f:	50                   	push   eax
c000a720:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a724:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a728:	e8 86 ab 01 00       	call   c00252b3 <__adddf3>
c000a72d:	59                   	pop    ecx
c000a72e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a732:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a736:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a73c:	e8 e6 bb 01 00       	call   c0026327 <__extendsfdf2>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a748:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a74c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a754:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a758:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a75c:	e8 cf b1 01 00       	call   c0025930 <__muldf3>
c000a761:	83 c4 10             	add    esp,0x10
c000a764:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a768:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76c:	52                   	push   edx
c000a76d:	50                   	push   eax
c000a76e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a772:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a776:	e8 38 ab 01 00       	call   c00252b3 <__adddf3>
c000a77b:	59                   	pop    ecx
c000a77c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a780:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a784:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a78a:	e8 98 bb 01 00       	call   c0026327 <__extendsfdf2>
c000a78f:	83 c4 10             	add    esp,0x10
c000a792:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a796:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a79a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7a6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7aa:	e8 81 b1 01 00       	call   c0025930 <__muldf3>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ba:	52                   	push   edx
c000a7bb:	50                   	push   eax
c000a7bc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c4:	e8 ea aa 01 00       	call   c00252b3 <__adddf3>
c000a7c9:	59                   	pop    ecx
c000a7ca:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7ce:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7d2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7d8:	e8 4a bb 01 00       	call   c0026327 <__extendsfdf2>
c000a7dd:	83 c4 10             	add    esp,0x10
c000a7e0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7e4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f8:	e8 33 b1 01 00       	call   c0025930 <__muldf3>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a804:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a808:	52                   	push   edx
c000a809:	50                   	push   eax
c000a80a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a80e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a812:	e8 9c aa 01 00       	call   c00252b3 <__adddf3>
c000a817:	59                   	pop    ecx
c000a818:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a81c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a820:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a826:	e8 fc ba 01 00       	call   c0026327 <__extendsfdf2>
c000a82b:	83 c4 10             	add    esp,0x10
c000a82e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a832:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a836:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a842:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a846:	e8 e5 b0 01 00       	call   c0025930 <__muldf3>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	83 eb 18             	sub    ebx,0x18
c000a851:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a855:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a859:	52                   	push   edx
c000a85a:	50                   	push   eax
c000a85b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a85f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a863:	e8 4b aa 01 00       	call   c00252b3 <__adddf3>
c000a868:	59                   	pop    ecx
c000a869:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a86d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a871:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a877:	e8 ab ba 01 00       	call   c0026327 <__extendsfdf2>
c000a87c:	83 c4 10             	add    esp,0x10
c000a87f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a883:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a887:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a893:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a897:	e8 94 b0 01 00       	call   c0025930 <__muldf3>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8a7:	52                   	push   edx
c000a8a8:	50                   	push   eax
c000a8a9:	57                   	push   edi
c000a8aa:	56                   	push   esi
c000a8ab:	e8 03 aa 01 00       	call   c00252b3 <__adddf3>
c000a8b0:	83 c4 10             	add    esp,0x10
c000a8b3:	89 c6                	mov    esi,eax
c000a8b5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8b8:	89 d7                	mov    edi,edx
c000a8ba:	85 ed                	test   ebp,ebp
c000a8bc:	0f 8f 8d fd ff ff    	jg     c000a64f <calc_output_hex+0x363>
c000a8c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8d2:	e8 dc a9 01 00       	call   c00252b3 <__adddf3>
c000a8d7:	83 c4 10             	add    esp,0x10
c000a8da:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f1:	e8 3a b0 01 00       	call   c0025930 <__muldf3>
c000a8f6:	59                   	pop    ecx
c000a8f7:	5b                   	pop    ebx
c000a8f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a900:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a904:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a908:	e8 f6 b8 01 00       	call   c0026203 <__truncdfsf2>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a917:	89 03                	mov    DWORD PTR [ebx],eax
c000a919:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a91d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a921:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a925:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a929:	e8 85 a9 01 00       	call   c00252b3 <__adddf3>
c000a92e:	83 c4 10             	add    esp,0x10
c000a931:	89 04 24             	mov    DWORD PTR [esp],eax
c000a934:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a940:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a944:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a948:	e8 e3 af 01 00       	call   c0025930 <__muldf3>
c000a94d:	5d                   	pop    ebp
c000a94e:	59                   	pop    ecx
c000a94f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a953:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a957:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95f:	e8 9f b8 01 00       	call   c0026203 <__truncdfsf2>
c000a964:	83 c4 10             	add    esp,0x10
c000a967:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a96e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a971:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a975:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a979:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a97d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a981:	e8 2d a9 01 00       	call   c00252b3 <__adddf3>
c000a986:	83 c4 10             	add    esp,0x10
c000a989:	89 04 24             	mov    DWORD PTR [esp],eax
c000a98c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a99c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a0:	e8 8b af 01 00       	call   c0025930 <__muldf3>
c000a9a5:	5b                   	pop    ebx
c000a9a6:	5d                   	pop    ebp
c000a9a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b7:	e8 47 b8 01 00       	call   c0026203 <__truncdfsf2>
c000a9bc:	83 c4 10             	add    esp,0x10
c000a9bf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9c6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d9:	e8 d5 a8 01 00       	call   c00252b3 <__adddf3>
c000a9de:	83 c4 10             	add    esp,0x10
c000a9e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f8:	e8 33 af 01 00       	call   c0025930 <__muldf3>
c000a9fd:	59                   	pop    ecx
c000a9fe:	5b                   	pop    ebx
c000a9ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0f:	e8 ef b7 01 00       	call   c0026203 <__truncdfsf2>
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa1e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa31:	e8 7d a8 01 00       	call   c00252b3 <__adddf3>
c000aa36:	83 c4 10             	add    esp,0x10
c000aa39:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa50:	e8 db ae 01 00       	call   c0025930 <__muldf3>
c000aa55:	5d                   	pop    ebp
c000aa56:	59                   	pop    ecx
c000aa57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa67:	e8 97 b7 01 00       	call   c0026203 <__truncdfsf2>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa79:	57                   	push   edi
c000aa7a:	56                   	push   esi
c000aa7b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa7f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa83:	e8 2b a8 01 00       	call   c00252b3 <__adddf3>
c000aa88:	83 c4 10             	add    esp,0x10
c000aa8b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa2:	e8 89 ae 01 00       	call   c0025930 <__muldf3>
c000aaa7:	5b                   	pop    ebx
c000aaa8:	5e                   	pop    esi
c000aaa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aab1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab9:	e8 45 b7 01 00       	call   c0026203 <__truncdfsf2>
c000aabe:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aac5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aac8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aace:	5b                   	pop    ebx
c000aacf:	5e                   	pop    esi
c000aad0:	5f                   	pop    edi
c000aad1:	5d                   	pop    ebp
c000aad2:	c3                   	ret    

c000aad3 <sinc_reset>:
c000aad3:	56                   	push   esi
c000aad4:	53                   	push   ebx
c000aad5:	51                   	push   ecx
c000aad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aada:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aadd:	85 db                	test   ebx,ebx
c000aadf:	74 59                	je     c000ab3a <sinc_reset+0x67>
c000aae1:	31 d2                	xor    edx,edx
c000aae3:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aaea:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aaed:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aaf0:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aaf7:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aafe:	31 c0                	xor    eax,eax
c000ab00:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab06:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab09:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab0c:	52                   	push   edx
c000ab0d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab10:	c1 e0 02             	shl    eax,0x2
c000ab13:	50                   	push   eax
c000ab14:	6a 00                	push   0x0
c000ab16:	56                   	push   esi
c000ab17:	e8 6f 5b ff ff       	call   c000068b <memset>
c000ab1c:	83 c4 0c             	add    esp,0xc
c000ab1f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab22:	c1 e0 02             	shl    eax,0x2
c000ab25:	50                   	push   eax
c000ab26:	68 aa 00 00 00       	push   0xaa
c000ab2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab2e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab31:	50                   	push   eax
c000ab32:	e8 54 5b ff ff       	call   c000068b <memset>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	58                   	pop    eax
c000ab3b:	5b                   	pop    ebx
c000ab3c:	5e                   	pop    esi
c000ab3d:	c3                   	ret    

c000ab3e <calc_output_multi>:
c000ab3e:	55                   	push   ebp
c000ab3f:	57                   	push   edi
c000ab40:	56                   	push   esi
c000ab41:	89 c6                	mov    esi,eax
c000ab43:	53                   	push   ebx
c000ab44:	83 ec 4c             	sub    esp,0x4c
c000ab47:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab4b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab4f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab53:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab57:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab63:	8d 46 44             	lea    eax,[esi+0x44]
c000ab66:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab69:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab73:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab76:	e8 0f eb ff ff       	call   c000968a <int_to_fp>
c000ab7b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab7e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab82:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab86:	99                   	cdq    
c000ab87:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab8f:	0f af d0             	imul   edx,eax
c000ab92:	0f af c3             	imul   eax,ebx
c000ab95:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab99:	29 c1                	sub    ecx,eax
c000ab9b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab9f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000aba3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abae:	57                   	push   edi
c000abaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abb3:	6a 00                	push   0x0
c000abb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb9:	e8 cd 5a ff ff       	call   c000068b <memset>
c000abbe:	83 c4 10             	add    esp,0x10
c000abc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc5:	89 df                	mov    edi,ebx
c000abc7:	e8 cc ea ff ff       	call   c0009698 <fp_to_double>
c000abcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abd8:	e8 b1 ea ff ff       	call   c000968e <fp_to_int>
c000abdd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abe0:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abe3:	51                   	push   ecx
c000abe4:	51                   	push   ecx
c000abe5:	55                   	push   ebp
c000abe6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abea:	e8 59 a0 01 00       	call   c0024c48 <__subsf3>
c000abef:	89 04 24             	mov    DWORD PTR [esp],eax
c000abf2:	e8 30 b7 01 00       	call   c0026327 <__extendsfdf2>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac0a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac0e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac12:	e8 19 ad 01 00       	call   c0025930 <__muldf3>
c000ac17:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac1e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac22:	e8 00 b7 01 00       	call   c0026327 <__extendsfdf2>
c000ac27:	83 c4 10             	add    esp,0x10
c000ac2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac32:	52                   	push   edx
c000ac33:	50                   	push   eax
c000ac34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac3c:	e8 72 a6 01 00       	call   c00252b3 <__adddf3>
c000ac41:	83 c4 10             	add    esp,0x10
c000ac44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac48:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac4c:	89 f8                	mov    eax,edi
c000ac4e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac53:	99                   	cdq    
c000ac54:	f7 f9                	idiv   ecx
c000ac56:	4a                   	dec    edx
c000ac57:	83 fa 06             	cmp    edx,0x6
c000ac5a:	77 07                	ja     c000ac63 <calc_output_multi+0x125>
c000ac5c:	ff 24 95 e4 7a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd851c]
c000ac63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac66:	4f                   	dec    edi
c000ac67:	83 ec 0c             	sub    esp,0xc
c000ac6a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac71:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac78:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac7c:	e8 a6 b6 01 00       	call   c0026327 <__extendsfdf2>
c000ac81:	83 c4 10             	add    esp,0x10
c000ac84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac88:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac9c:	e8 8f ac 01 00       	call   c0025930 <__muldf3>
c000aca1:	83 c4 10             	add    esp,0x10
c000aca4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aca8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acac:	52                   	push   edx
c000acad:	50                   	push   eax
c000acae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acb1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000acb4:	e8 fa a5 01 00       	call   c00252b3 <__adddf3>
c000acb9:	83 c4 10             	add    esp,0x10
c000acbc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acbf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acc2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acc5:	4f                   	dec    edi
c000acc6:	83 ec 0c             	sub    esp,0xc
c000acc9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000accc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acd0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acd7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acdb:	e8 47 b6 01 00       	call   c0026327 <__extendsfdf2>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acf3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acf7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acfb:	e8 30 ac 01 00       	call   c0025930 <__muldf3>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad07:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad0b:	52                   	push   edx
c000ad0c:	50                   	push   eax
c000ad0d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad10:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad13:	e8 9b a5 01 00       	call   c00252b3 <__adddf3>
c000ad18:	83 c4 10             	add    esp,0x10
c000ad1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad24:	4f                   	dec    edi
c000ad25:	83 ec 0c             	sub    esp,0xc
c000ad28:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad2f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad36:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad3a:	e8 e8 b5 01 00       	call   c0026327 <__extendsfdf2>
c000ad3f:	83 c4 10             	add    esp,0x10
c000ad42:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad46:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad52:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad56:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad5a:	e8 d1 ab 01 00       	call   c0025930 <__muldf3>
c000ad5f:	83 c4 10             	add    esp,0x10
c000ad62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad6a:	52                   	push   edx
c000ad6b:	50                   	push   eax
c000ad6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad6f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad72:	e8 3c a5 01 00       	call   c00252b3 <__adddf3>
c000ad77:	83 c4 10             	add    esp,0x10
c000ad7a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad7d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad83:	4f                   	dec    edi
c000ad84:	83 ec 0c             	sub    esp,0xc
c000ad87:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad8e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad95:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad99:	e8 89 b5 01 00       	call   c0026327 <__extendsfdf2>
c000ad9e:	83 c4 10             	add    esp,0x10
c000ada1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ada5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adb1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb9:	e8 72 ab 01 00       	call   c0025930 <__muldf3>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adc5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adc9:	52                   	push   edx
c000adca:	50                   	push   eax
c000adcb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adce:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000add1:	e8 dd a4 01 00       	call   c00252b3 <__adddf3>
c000add6:	83 c4 10             	add    esp,0x10
c000add9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000addc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000addf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ade2:	4f                   	dec    edi
c000ade3:	83 ec 0c             	sub    esp,0xc
c000ade6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ade9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aded:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adf4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adf8:	e8 2a b5 01 00       	call   c0026327 <__extendsfdf2>
c000adfd:	83 c4 10             	add    esp,0x10
c000ae00:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae04:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae18:	e8 13 ab 01 00       	call   c0025930 <__muldf3>
c000ae1d:	83 c4 10             	add    esp,0x10
c000ae20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae24:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae28:	52                   	push   edx
c000ae29:	50                   	push   eax
c000ae2a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae2d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae30:	e8 7e a4 01 00       	call   c00252b3 <__adddf3>
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae3b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae41:	4f                   	dec    edi
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae4c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae53:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae57:	e8 cb b4 01 00       	call   c0026327 <__extendsfdf2>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae63:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae73:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae77:	e8 b4 aa 01 00       	call   c0025930 <__muldf3>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae87:	52                   	push   edx
c000ae88:	50                   	push   eax
c000ae89:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae8c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae8f:	e8 1f a4 01 00       	call   c00252b3 <__adddf3>
c000ae94:	83 c4 10             	add    esp,0x10
c000ae97:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae9a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea0:	4f                   	dec    edi
c000aea1:	83 ec 0c             	sub    esp,0xc
c000aea4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aea7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeab:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeb2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeb6:	e8 6c b4 01 00       	call   c0026327 <__extendsfdf2>
c000aebb:	83 c4 10             	add    esp,0x10
c000aebe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aec2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aece:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed6:	e8 55 aa 01 00       	call   c0025930 <__muldf3>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee6:	52                   	push   edx
c000aee7:	50                   	push   eax
c000aee8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeeb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeee:	e8 c0 a3 01 00       	call   c00252b3 <__adddf3>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aefc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeff:	4f                   	dec    edi
c000af00:	83 ec 0c             	sub    esp,0xc
c000af03:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af0a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af11:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af15:	e8 0d b4 01 00       	call   c0026327 <__extendsfdf2>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af21:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af35:	e8 f6 a9 01 00       	call   c0025930 <__muldf3>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af45:	52                   	push   edx
c000af46:	50                   	push   eax
c000af47:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af4a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af4d:	e8 61 a3 01 00       	call   c00252b3 <__adddf3>
c000af52:	83 c4 10             	add    esp,0x10
c000af55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af58:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af5b:	85 ff                	test   edi,edi
c000af5d:	0f 8f e9 fc ff ff    	jg     c000ac4c <calc_output_multi+0x10e>
c000af63:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af67:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af6b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af6f:	0f 89 4c fc ff ff    	jns    c000abc1 <calc_output_multi+0x83>
c000af75:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af7d:	29 c8                	sub    eax,ecx
c000af7f:	99                   	cdq    
c000af80:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af88:	0f af d0             	imul   edx,eax
c000af8b:	40                   	inc    eax
c000af8c:	01 d1                	add    ecx,edx
c000af8e:	0f af c3             	imul   eax,ebx
c000af91:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af95:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af9c:	55                   	push   ebp
c000af9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afa1:	6a 00                	push   0x0
c000afa3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afa7:	e8 df 56 ff ff       	call   c000068b <memset>
c000afac:	83 c4 10             	add    esp,0x10
c000afaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb3:	e8 e0 e6 ff ff       	call   c0009698 <fp_to_double>
c000afb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afc4:	e8 c5 e6 ff ff       	call   c000968e <fp_to_int>
c000afc9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afcc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afcf:	57                   	push   edi
c000afd0:	57                   	push   edi
c000afd1:	89 df                	mov    edi,ebx
c000afd3:	55                   	push   ebp
c000afd4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afd8:	e8 6b 9c 01 00       	call   c0024c48 <__subsf3>
c000afdd:	89 04 24             	mov    DWORD PTR [esp],eax
c000afe0:	e8 42 b3 01 00       	call   c0026327 <__extendsfdf2>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000aff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000affc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b000:	e8 2b a9 01 00       	call   c0025930 <__muldf3>
c000b005:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b008:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b00c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b010:	e8 12 b3 01 00       	call   c0026327 <__extendsfdf2>
c000b015:	83 c4 10             	add    esp,0x10
c000b018:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b01c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b020:	52                   	push   edx
c000b021:	50                   	push   eax
c000b022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02a:	e8 84 a2 01 00       	call   c00252b3 <__adddf3>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b036:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b03a:	89 f8                	mov    eax,edi
c000b03c:	b9 08 00 00 00       	mov    ecx,0x8
c000b041:	99                   	cdq    
c000b042:	f7 f9                	idiv   ecx
c000b044:	4a                   	dec    edx
c000b045:	83 fa 06             	cmp    edx,0x6
c000b048:	77 07                	ja     c000b051 <calc_output_multi+0x513>
c000b04a:	ff 24 95 00 7b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd8500]
c000b051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b055:	4f                   	dec    edi
c000b056:	83 ec 0c             	sub    esp,0xc
c000b059:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b060:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b067:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06b:	e8 b7 b2 01 00       	call   c0026327 <__extendsfdf2>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b077:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b07f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b083:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b087:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b08b:	e8 a0 a8 01 00       	call   c0025930 <__muldf3>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09b:	52                   	push   edx
c000b09c:	50                   	push   eax
c000b09d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a3:	e8 0b a2 01 00       	call   c00252b3 <__adddf3>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b5:	4f                   	dec    edi
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cb:	e8 57 b2 01 00       	call   c0026327 <__extendsfdf2>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0eb:	e8 40 a8 01 00       	call   c0025930 <__muldf3>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0fb:	52                   	push   edx
c000b0fc:	50                   	push   eax
c000b0fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b100:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b103:	e8 ab a1 01 00       	call   c00252b3 <__adddf3>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 f7 b1 01 00       	call   c0026327 <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b137:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b147:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b14b:	e8 e0 a7 01 00       	call   c0025930 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b157:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 4b a1 01 00       	call   c00252b3 <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b175:	4f                   	dec    edi
c000b176:	83 ec 0c             	sub    esp,0xc
c000b179:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b17c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b180:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b187:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b18b:	e8 97 b1 01 00       	call   c0026327 <__extendsfdf2>
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b19b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1ab:	e8 80 a7 01 00       	call   c0025930 <__muldf3>
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1bb:	52                   	push   edx
c000b1bc:	50                   	push   eax
c000b1bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1c3:	e8 eb a0 01 00       	call   c00252b3 <__adddf3>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1ce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1d5:	4f                   	dec    edi
c000b1d6:	83 ec 0c             	sub    esp,0xc
c000b1d9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1e0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1eb:	e8 37 b1 01 00       	call   c0026327 <__extendsfdf2>
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b203:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b207:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20b:	e8 20 a7 01 00       	call   c0025930 <__muldf3>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b217:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b21b:	52                   	push   edx
c000b21c:	50                   	push   eax
c000b21d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b220:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b223:	e8 8b a0 01 00       	call   c00252b3 <__adddf3>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b22e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b235:	4f                   	dec    edi
c000b236:	83 ec 0c             	sub    esp,0xc
c000b239:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b23c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b240:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b247:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b24b:	e8 d7 b0 01 00       	call   c0026327 <__extendsfdf2>
c000b250:	83 c4 10             	add    esp,0x10
c000b253:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b25b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b267:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b26b:	e8 c0 a6 01 00       	call   c0025930 <__muldf3>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b277:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b27b:	52                   	push   edx
c000b27c:	50                   	push   eax
c000b27d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b280:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b283:	e8 2b a0 01 00       	call   c00252b3 <__adddf3>
c000b288:	83 c4 10             	add    esp,0x10
c000b28b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b28e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b295:	4f                   	dec    edi
c000b296:	83 ec 0c             	sub    esp,0xc
c000b299:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b29c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2a0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2a7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2ab:	e8 77 b0 01 00       	call   c0026327 <__extendsfdf2>
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2cb:	e8 60 a6 01 00       	call   c0025930 <__muldf3>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2db:	52                   	push   edx
c000b2dc:	50                   	push   eax
c000b2dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2e0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2e3:	e8 cb 9f 01 00       	call   c00252b3 <__adddf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2f5:	4f                   	dec    edi
c000b2f6:	83 ec 0c             	sub    esp,0xc
c000b2f9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b300:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b307:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b30b:	e8 17 b0 01 00       	call   c0026327 <__extendsfdf2>
c000b310:	83 c4 10             	add    esp,0x10
c000b313:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b317:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b323:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b327:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b32b:	e8 00 a6 01 00       	call   c0025930 <__muldf3>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b337:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b33b:	52                   	push   edx
c000b33c:	50                   	push   eax
c000b33d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b340:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b343:	e8 6b 9f 01 00       	call   c00252b3 <__adddf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b34e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b351:	85 ff                	test   edi,edi
c000b353:	0f 8f e1 fc ff ff    	jg     c000b03a <calc_output_multi+0x4fc>
c000b359:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b35d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b361:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b365:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b36a:	0f 8f 3f fc ff ff    	jg     c000afaf <calc_output_multi+0x471>
c000b370:	be 08 00 00 00       	mov    esi,0x8
c000b375:	89 d8                	mov    eax,ebx
c000b377:	99                   	cdq    
c000b378:	f7 fe                	idiv   esi
c000b37a:	4a                   	dec    edx
c000b37b:	83 fa 06             	cmp    edx,0x6
c000b37e:	77 07                	ja     c000b387 <calc_output_multi+0x849>
c000b380:	ff 24 95 1c 7b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd84e4]
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4b                   	dec    ebx
c000b38c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b390:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b393:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b397:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b39b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b39e:	e8 10 9f 01 00       	call   c00252b3 <__adddf3>
c000b3a3:	83 c4 10             	add    esp,0x10
c000b3a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3be:	e8 6d a5 01 00       	call   c0025930 <__muldf3>
c000b3c3:	5d                   	pop    ebp
c000b3c4:	59                   	pop    ecx
c000b3c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	e8 29 ae 01 00       	call   c0026203 <__truncdfsf2>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3e1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e8:	4b                   	dec    ebx
c000b3e9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3ed:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3f8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3fb:	e8 b3 9e 01 00       	call   c00252b3 <__adddf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41b:	e8 10 a5 01 00       	call   c0025930 <__muldf3>
c000b420:	59                   	pop    ecx
c000b421:	5f                   	pop    edi
c000b422:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b42a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b432:	e8 cc ad 01 00       	call   c0026203 <__truncdfsf2>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b43e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b445:	4b                   	dec    ebx
c000b446:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b44a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b44d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b451:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b455:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b458:	e8 56 9e 01 00       	call   c00252b3 <__adddf3>
c000b45d:	83 c4 10             	add    esp,0x10
c000b460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b478:	e8 b3 a4 01 00       	call   c0025930 <__muldf3>
c000b47d:	5f                   	pop    edi
c000b47e:	5d                   	pop    ebp
c000b47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b483:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48f:	e8 6f ad 01 00       	call   c0026203 <__truncdfsf2>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b49b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b49e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a2:	4b                   	dec    ebx
c000b4a3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ae:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4b2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4b5:	e8 f9 9d 01 00       	call   c00252b3 <__adddf3>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	e8 56 a4 01 00       	call   c0025930 <__muldf3>
c000b4da:	5d                   	pop    ebp
c000b4db:	59                   	pop    ecx
c000b4dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ec:	e8 12 ad 01 00       	call   c0026203 <__truncdfsf2>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4f8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ff:	4b                   	dec    ebx
c000b500:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b504:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b50b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b50f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b512:	e8 9c 9d 01 00       	call   c00252b3 <__adddf3>
c000b517:	83 c4 10             	add    esp,0x10
c000b51a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b532:	e8 f9 a3 01 00       	call   c0025930 <__muldf3>
c000b537:	59                   	pop    ecx
c000b538:	5f                   	pop    edi
c000b539:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b53d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b549:	e8 b5 ac 01 00       	call   c0026203 <__truncdfsf2>
c000b54e:	83 c4 10             	add    esp,0x10
c000b551:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b555:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	4b                   	dec    ebx
c000b55d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b561:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b568:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b56c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b56f:	e8 3f 9d 01 00       	call   c00252b3 <__adddf3>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	e8 9c a3 01 00       	call   c0025930 <__muldf3>
c000b594:	5f                   	pop    edi
c000b595:	5d                   	pop    ebp
c000b596:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b59a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a6:	e8 58 ac 01 00       	call   c0026203 <__truncdfsf2>
c000b5ab:	83 c4 10             	add    esp,0x10
c000b5ae:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5b2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b9:	4b                   	dec    ebx
c000b5ba:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5be:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cc:	e8 e2 9c 01 00       	call   c00252b3 <__adddf3>
c000b5d1:	83 c4 10             	add    esp,0x10
c000b5d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ec:	e8 3f a3 01 00       	call   c0025930 <__muldf3>
c000b5f1:	5d                   	pop    ebp
c000b5f2:	59                   	pop    ecx
c000b5f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b603:	e8 fb ab 01 00       	call   c0026203 <__truncdfsf2>
c000b608:	83 c4 10             	add    esp,0x10
c000b60b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b60f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b616:	4b                   	dec    ebx
c000b617:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b61e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b622:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b626:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b629:	e8 85 9c 01 00       	call   c00252b3 <__adddf3>
c000b62e:	83 c4 10             	add    esp,0x10
c000b631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	e8 e2 a2 01 00       	call   c0025930 <__muldf3>
c000b64e:	59                   	pop    ecx
c000b64f:	5f                   	pop    edi
c000b650:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b654:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b658:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b660:	e8 9e ab 01 00       	call   c0026203 <__truncdfsf2>
c000b665:	83 c4 10             	add    esp,0x10
c000b668:	85 db                	test   ebx,ebx
c000b66a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b66e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b671:	0f 8f fe fc ff ff    	jg     c000b375 <calc_output_multi+0x837>
c000b677:	83 c4 4c             	add    esp,0x4c
c000b67a:	5b                   	pop    ebx
c000b67b:	5e                   	pop    esi
c000b67c:	5f                   	pop    edi
c000b67d:	5d                   	pop    ebp
c000b67e:	c3                   	ret    

c000b67f <double_to_fp>:
c000b67f:	83 ec 0c             	sub    esp,0xc
c000b682:	68 00 00 b0 40       	push   0x40b00000
c000b687:	6a 00                	push   0x0
c000b689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b68d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b691:	e8 9a a2 01 00       	call   c0025930 <__muldf3>
c000b696:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b69a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b69e:	83 c4 1c             	add    esp,0x1c
c000b6a1:	e9 0a ad 01 00       	jmp    c00263b0 <lrint>

c000b6a6 <prepare_data>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	56                   	push   esi
c000b6a9:	53                   	push   ebx
c000b6aa:	83 ec 1c             	sub    esp,0x1c
c000b6ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6b1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6b5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6b9:	0f 89 57 01 00 00    	jns    c000b816 <prepare_data+0x170>
c000b6bf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6c5:	85 d2                	test   edx,edx
c000b6c7:	75 0d                	jne    c000b6d6 <prepare_data+0x30>
c000b6c9:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6cc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6cf:	29 d0                	sub    eax,edx
c000b6d1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6d4:	eb 44                	jmp    c000b71a <prepare_data+0x74>
c000b6d6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6d9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6dc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6df:	39 c1                	cmp    ecx,eax
c000b6e1:	7d 04                	jge    c000b6e7 <prepare_data+0x41>
c000b6e3:	29 d0                	sub    eax,edx
c000b6e5:	eb 2d                	jmp    c000b714 <prepare_data+0x6e>
c000b6e7:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6ed:	29 d7                	sub    edi,edx
c000b6ef:	01 f7                	add    edi,esi
c000b6f1:	51                   	push   ecx
c000b6f2:	29 f2                	sub    edx,esi
c000b6f4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6fb:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6fe:	51                   	push   ecx
c000b6ff:	52                   	push   edx
c000b700:	50                   	push   eax
c000b701:	e8 17 4f ff ff       	call   c000061d <memmove>
c000b706:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b709:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b70f:	29 f0                	sub    eax,esi
c000b711:	83 c4 10             	add    esp,0x10
c000b714:	29 f0                	sub    eax,esi
c000b716:	79 02                	jns    c000b71a <prepare_data+0x74>
c000b718:	31 c0                	xor    eax,eax
c000b71a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b71d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b720:	29 ef                	sub    edi,ebp
c000b722:	39 c7                	cmp    edi,eax
c000b724:	7e 02                	jle    c000b728 <prepare_data+0x82>
c000b726:	89 c7                	mov    edi,eax
c000b728:	89 f8                	mov    eax,edi
c000b72a:	99                   	cdq    
c000b72b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b72e:	b8 15 00 00 00       	mov    eax,0x15
c000b733:	29 d7                	sub    edi,edx
c000b735:	0f 88 dd 00 00 00    	js     c000b818 <prepare_data+0x172>
c000b73b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b73e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b741:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b744:	0f 8f ce 00 00 00    	jg     c000b818 <prepare_data+0x172>
c000b74a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b750:	50                   	push   eax
c000b751:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b758:	50                   	push   eax
c000b759:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b75d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b75f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b762:	50                   	push   eax
c000b763:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b766:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b76a:	50                   	push   eax
c000b76b:	e8 e5 4e ff ff       	call   c0000655 <memcpy>
c000b770:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b773:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b776:	01 fd                	add    ebp,edi
c000b778:	01 f9                	add    ecx,edi
c000b77a:	83 c4 10             	add    esp,0x10
c000b77d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b780:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b783:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b78a:	0f 85 86 00 00 00    	jne    c000b816 <prepare_data+0x170>
c000b790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b793:	89 e8                	mov    eax,ebp
c000b795:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b798:	29 c8                	sub    eax,ecx
c000b79a:	39 f8                	cmp    eax,edi
c000b79c:	7d 78                	jge    c000b816 <prepare_data+0x170>
c000b79e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7a2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7a6:	74 6e                	je     c000b816 <prepare_data+0x170>
c000b7a8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7af:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7b2:	29 ef                	sub    edi,ebp
c000b7b4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7b8:	7c 29                	jl     c000b7e3 <prepare_data+0x13d>
c000b7ba:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7bd:	29 f1                	sub    ecx,esi
c000b7bf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7c6:	55                   	push   ebp
c000b7c7:	50                   	push   eax
c000b7c8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7cb:	50                   	push   eax
c000b7cc:	52                   	push   edx
c000b7cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7d1:	e8 47 4e ff ff       	call   c000061d <memmove>
c000b7d6:	83 c4 10             	add    esp,0x10
c000b7d9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7dc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7e6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7e9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7ec:	83 c6 05             	add    esi,0x5
c000b7ef:	78 07                	js     c000b7f8 <prepare_data+0x152>
c000b7f1:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f4:	39 cf                	cmp    edi,ecx
c000b7f6:	7e 04                	jle    c000b7fc <prepare_data+0x156>
c000b7f8:	89 ce                	mov    esi,ecx
c000b7fa:	29 c6                	sub    esi,eax
c000b7fc:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7ff:	51                   	push   ecx
c000b800:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b807:	51                   	push   ecx
c000b808:	6a 00                	push   0x0
c000b80a:	50                   	push   eax
c000b80b:	e8 7b 4e ff ff       	call   c000068b <memset>
c000b810:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b813:	83 c4 10             	add    esp,0x10
c000b816:	31 c0                	xor    eax,eax
c000b818:	83 c4 1c             	add    esp,0x1c
c000b81b:	5b                   	pop    ebx
c000b81c:	5e                   	pop    esi
c000b81d:	5f                   	pop    edi
c000b81e:	5d                   	pop    ebp
c000b81f:	c3                   	ret    

c000b820 <sinc_multichan_vari_process>:
c000b820:	55                   	push   ebp
c000b821:	ba 05 00 00 00       	mov    edx,0x5
c000b826:	57                   	push   edi
c000b827:	56                   	push   esi
c000b828:	53                   	push   ebx
c000b829:	83 ec 4c             	sub    esp,0x4c
c000b82c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b830:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b834:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b837:	85 db                	test   ebx,ebx
c000b839:	0f 84 9b 06 00 00    	je     c000beda <sinc_multichan_vari_process+0x6ba>
c000b83f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b842:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b845:	0f af c5             	imul   eax,ebp
c000b848:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b84b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b84e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b855:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b85c:	0f af c5             	imul   eax,ebp
c000b85f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b862:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b865:	8b 06                	mov    eax,DWORD PTR [esi]
c000b867:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86f:	68 00 00 70 3f       	push   0x3f700000
c000b874:	6a 00                	push   0x0
c000b876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87e:	e8 7c a9 01 00       	call   c00261ff <__ltdf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	ba 16 00 00 00       	mov    edx,0x16
c000b88b:	85 c0                	test   eax,eax
c000b88d:	0f 88 47 06 00 00    	js     c000beda <sinc_multichan_vari_process+0x6ba>
c000b893:	68 00 00 70 40       	push   0x40700000
c000b898:	6a 00                	push   0x0
c000b89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a2:	e8 3a a9 01 00       	call   c00261e1 <__gtdf2>
c000b8a7:	83 c4 10             	add    esp,0x10
c000b8aa:	ba 16 00 00 00       	mov    edx,0x16
c000b8af:	85 c0                	test   eax,eax
c000b8b1:	0f 8f 23 06 00 00    	jg     c000beda <sinc_multichan_vari_process+0x6ba>
c000b8b7:	83 ec 0c             	sub    esp,0xc
c000b8ba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8bd:	e8 d1 a6 01 00       	call   c0025f93 <__floatsidf>
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8cd:	68 00 00 00 40       	push   0x40000000
c000b8d2:	6a 00                	push   0x0
c000b8d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8dc:	e8 d2 99 01 00       	call   c00252b3 <__adddf3>
c000b8e1:	59                   	pop    ecx
c000b8e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8ed:	e8 a1 a6 01 00       	call   c0025f93 <__floatsidf>
c000b8f2:	83 c4 10             	add    esp,0x10
c000b8f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8fd:	52                   	push   edx
c000b8fe:	50                   	push   eax
c000b8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b907:	e8 08 a3 01 00       	call   c0025c14 <__divdf3>
c000b90c:	83 c4 10             	add    esp,0x10
c000b90f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b913:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b917:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b91a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b91d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b921:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b92d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b935:	e8 a7 a8 01 00       	call   c00261e1 <__gtdf2>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	85 c0                	test   eax,eax
c000b93f:	7e 2d                	jle    c000b96e <sinc_multichan_vari_process+0x14e>
c000b941:	68 00 00 f0 3f       	push   0x3ff00000
c000b946:	6a 00                	push   0x0
c000b948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b950:	e8 aa a8 01 00       	call   c00261ff <__ltdf2>
c000b955:	83 c4 10             	add    esp,0x10
c000b958:	85 c0                	test   eax,eax
c000b95a:	79 4d                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b968:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96c:	eb 1b                	jmp    c000b989 <sinc_multichan_vari_process+0x169>
c000b96e:	68 00 00 f0 3f       	push   0x3ff00000
c000b973:	6a 00                	push   0x0
c000b975:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97d:	e8 7d a8 01 00       	call   c00261ff <__ltdf2>
c000b982:	83 c4 10             	add    esp,0x10
c000b985:	85 c0                	test   eax,eax
c000b987:	79 20                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b98d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b995:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b999:	e8 76 a2 01 00       	call   c0025c14 <__divdf3>
c000b99e:	83 c4 10             	add    esp,0x10
c000b9a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9a9:	50                   	push   eax
c000b9aa:	50                   	push   eax
c000b9ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9b3:	e8 f8 a9 01 00       	call   c00263b0 <lrint>
c000b9b8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9bb:	40                   	inc    eax
c000b9bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9c0:	0f af c5             	imul   eax,ebp
c000b9c3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9c7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9ce:	58                   	pop    eax
c000b9cf:	5a                   	pop    edx
c000b9d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d8:	e8 d3 a9 01 00       	call   c00263b0 <lrint>
c000b9dd:	83 ec 0c             	sub    esp,0xc
c000b9e0:	50                   	push   eax
c000b9e1:	e8 ad a5 01 00       	call   c0025f93 <__floatsidf>
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9f1:	52                   	push   edx
c000b9f2:	50                   	push   eax
c000b9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9fb:	e8 04 9f 01 00       	call   c0025904 <__subdf3>
c000ba00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba08:	83 c4 20             	add    esp,0x20
c000ba0b:	6a 00                	push   0x0
c000ba0d:	6a 00                	push   0x0
c000ba0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba17:	e8 e3 a7 01 00       	call   c00261ff <__ltdf2>
c000ba1c:	83 c4 10             	add    esp,0x10
c000ba1f:	85 c0                	test   eax,eax
c000ba21:	79 1f                	jns    c000ba42 <sinc_multichan_vari_process+0x222>
c000ba23:	68 00 00 f0 3f       	push   0x3ff00000
c000ba28:	6a 00                	push   0x0
c000ba2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba32:	e8 7c 98 01 00       	call   c00252b3 <__adddf3>
c000ba37:	83 c4 10             	add    esp,0x10
c000ba3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba42:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba45:	83 ec 10             	sub    esp,0x10
c000ba48:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba4c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5f:	e8 a0 9e 01 00       	call   c0025904 <__subdf3>
c000ba64:	83 c4 18             	add    esp,0x18
c000ba67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba6f:	52                   	push   edx
c000ba70:	50                   	push   eax
c000ba71:	e8 3a a9 01 00       	call   c00263b0 <lrint>
c000ba76:	0f af e8             	imul   ebp,eax
c000ba79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba7d:	01 e8                	add    eax,ebp
c000ba7f:	99                   	cdq    
c000ba80:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba83:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8e:	68 00 00 f0 3f       	push   0x3ff00000
c000ba93:	6a 00                	push   0x0
c000ba95:	e8 7a a1 01 00       	call   c0025c14 <__divdf3>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000baa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baa5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000baaa:	68 23 42 92 0c       	push   0xc924223
c000baaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab7:	e8 f7 97 01 00       	call   c00252b3 <__adddf3>
c000babc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bac0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bac4:	83 c4 20             	add    esp,0x20
c000bac7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bacf:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bad7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bada:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000badd:	7d 50                	jge    c000bb2f <sinc_multichan_vari_process+0x30f>
c000badf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bae2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bae5:	01 c8                	add    eax,ecx
c000bae7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000baea:	99                   	cdq    
c000baeb:	f7 f9                	idiv   ecx
c000baed:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000baf1:	7d 0c                	jge    c000baff <sinc_multichan_vari_process+0x2df>
c000baf3:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000baf6:	85 ed                	test   ebp,ebp
c000baf8:	79 6b                	jns    c000bb65 <sinc_multichan_vari_process+0x345>
c000bafa:	e9 e6 00 00 00       	jmp    c000bbe5 <sinc_multichan_vari_process+0x3c5>
c000baff:	50                   	push   eax
c000bb00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb04:	57                   	push   edi
c000bb05:	53                   	push   ebx
c000bb06:	e8 9b fb ff ff       	call   c000b6a6 <prepare_data>
c000bb0b:	83 c4 10             	add    esp,0x10
c000bb0e:	89 c2                	mov    edx,eax
c000bb10:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb13:	85 c0                	test   eax,eax
c000bb15:	0f 85 bf 03 00 00    	jne    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb1b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb21:	01 c8                	add    eax,ecx
c000bb23:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb26:	99                   	cdq    
c000bb27:	f7 f9                	idiv   ecx
c000bb29:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2d:	7c c4                	jl     c000baf3 <sinc_multichan_vari_process+0x2d3>
c000bb2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb37:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb3a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb45:	89 06                	mov    DWORD PTR [esi],eax
c000bb47:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb4a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb4d:	99                   	cdq    
c000bb4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb51:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb57:	99                   	cdq    
c000bb58:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb5b:	31 d2                	xor    edx,edx
c000bb5d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb60:	e9 75 03 00 00       	jmp    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb6b:	e8 23 a4 01 00       	call   c0025f93 <__floatsidf>
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb8b:	e8 23 97 01 00       	call   c00252b3 <__adddf3>
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb97:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbab:	e8 03 97 01 00       	call   c00252b3 <__adddf3>
c000bbb0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbb7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbbb:	e8 d3 a3 01 00       	call   c0025f93 <__floatsidf>
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbcb:	52                   	push   edx
c000bbcc:	50                   	push   eax
c000bbcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd5:	e8 23 a6 01 00       	call   c00261fd <__gedf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	0f 89 4a ff ff ff    	jns    c000bb2f <sinc_multichan_vari_process+0x30f>
c000bbe5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbe9:	0f 8e ed 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bbef:	83 ec 10             	sub    esp,0x10
c000bbf2:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbf5:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbf8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbfb:	ff 36                	push   DWORD PTR [esi]
c000bbfd:	e8 02 9d 01 00       	call   c0025904 <__subdf3>
c000bc02:	83 c4 18             	add    esp,0x18
c000bc05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc0d:	52                   	push   edx
c000bc0e:	50                   	push   eax
c000bc0f:	e8 7c a7 01 00       	call   c0026390 <fabs>
c000bc14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc1c:	83 c4 10             	add    esp,0x10
c000bc1f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc24:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	e8 ab a5 01 00       	call   c00261e1 <__gtdf2>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	85 c0                	test   eax,eax
c000bc3b:	0f 8e 9b 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bc41:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc43:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc4a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc4e:	52                   	push   edx
c000bc4f:	50                   	push   eax
c000bc50:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc53:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc56:	e8 a9 9c 01 00       	call   c0025904 <__subdf3>
c000bc5b:	59                   	pop    ecx
c000bc5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc60:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc64:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc67:	e8 27 a3 01 00       	call   c0025f93 <__floatsidf>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc73:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc77:	52                   	push   edx
c000bc78:	50                   	push   eax
c000bc79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc81:	e8 aa 9c 01 00       	call   c0025930 <__muldf3>
c000bc86:	5d                   	pop    ebp
c000bc87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc8b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc8f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc92:	e8 fc a2 01 00       	call   c0025f93 <__floatsidf>
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca2:	52                   	push   edx
c000bca3:	50                   	push   eax
c000bca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcac:	e8 63 9f 01 00       	call   c0025c14 <__divdf3>
c000bcb1:	83 c4 10             	add    esp,0x10
c000bcb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcb8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bccc:	e8 e2 95 01 00       	call   c00252b3 <__adddf3>
c000bcd1:	83 c4 10             	add    esp,0x10
c000bcd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcdc:	83 ec 0c             	sub    esp,0xc
c000bcdf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bce2:	e8 ac a2 01 00       	call   c0025f93 <__floatsidf>
c000bce7:	83 c4 10             	add    esp,0x10
c000bcea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd02:	e8 f8 a4 01 00       	call   c00261ff <__ltdf2>
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	85 c0                	test   eax,eax
c000bd0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd14:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd18:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd1c:	78 10                	js     c000bd2e <sinc_multichan_vari_process+0x50e>
c000bd1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd2a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3e:	e8 ed 9b 01 00       	call   c0025930 <__muldf3>
c000bd43:	59                   	pop    ecx
c000bd44:	5d                   	pop    ebp
c000bd45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd55:	e8 25 f9 ff ff       	call   c000b67f <double_to_fp>
c000bd5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd5e:	89 c5                	mov    ebp,eax
c000bd60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6c:	e8 bf 9b 01 00       	call   c0025930 <__muldf3>
c000bd71:	83 c4 18             	add    esp,0x18
c000bd74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd7c:	52                   	push   edx
c000bd7d:	50                   	push   eax
c000bd7e:	e8 fc f8 ff ff       	call   c000b67f <double_to_fp>
c000bd83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd86:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd8a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd8d:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd90:	50                   	push   eax
c000bd91:	50                   	push   eax
c000bd92:	50                   	push   eax
c000bd93:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd96:	e8 f8 a1 01 00       	call   c0025f93 <__floatsidf>
c000bd9b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd9f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bda3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdaf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdb3:	e8 5c 9e 01 00       	call   c0025c14 <__divdf3>
c000bdb8:	83 c4 1c             	add    esp,0x1c
c000bdbb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdbf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdc3:	52                   	push   edx
c000bdc4:	89 ea                	mov    edx,ebp
c000bdc6:	50                   	push   eax
c000bdc7:	89 d8                	mov    eax,ebx
c000bdc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdcc:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdd0:	e8 69 ed ff ff       	call   c000ab3e <calc_output_multi>
c000bdd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdd8:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bddb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bddf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bde3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdeb:	e8 24 9e 01 00       	call   c0025c14 <__divdf3>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bdf7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be0b:	e8 a3 94 01 00       	call   c00252b3 <__adddf3>
c000be10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be18:	83 c4 28             	add    esp,0x28
c000be1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be23:	e8 88 a5 01 00       	call   c00263b0 <lrint>
c000be28:	83 ec 0c             	sub    esp,0xc
c000be2b:	50                   	push   eax
c000be2c:	e8 62 a1 01 00       	call   c0025f93 <__floatsidf>
c000be31:	83 c4 10             	add    esp,0x10
c000be34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3c:	52                   	push   edx
c000be3d:	50                   	push   eax
c000be3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be46:	e8 b9 9a 01 00       	call   c0025904 <__subdf3>
c000be4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be4f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be53:	83 c4 20             	add    esp,0x20
c000be56:	6a 00                	push   0x0
c000be58:	6a 00                	push   0x0
c000be5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be62:	e8 98 a3 01 00       	call   c00261ff <__ltdf2>
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	85 c0                	test   eax,eax
c000be6c:	79 20                	jns    c000be8e <sinc_multichan_vari_process+0x66e>
c000be6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 30 94 01 00       	call   c00252b3 <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bea7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000beab:	e8 54 9a 01 00       	call   c0025904 <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 ee a4 01 00       	call   c00263b0 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	01 e8                	add    eax,ebp
c000bece:	99                   	cdq    
c000becf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bed2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed5:	e9 fd fb ff ff       	jmp    c000bad7 <sinc_multichan_vari_process+0x2b7>
c000beda:	83 c4 4c             	add    esp,0x4c
c000bedd:	89 d0                	mov    eax,edx
c000bedf:	5b                   	pop    ebx
c000bee0:	5e                   	pop    esi
c000bee1:	5f                   	pop    edi
c000bee2:	5d                   	pop    ebp
c000bee3:	c3                   	ret    

c000bee4 <sinc_hex_vari_process>:
c000bee4:	55                   	push   ebp
c000bee5:	ba 05 00 00 00       	mov    edx,0x5
c000beea:	57                   	push   edi
c000beeb:	56                   	push   esi
c000beec:	53                   	push   ebx
c000beed:	83 ec 4c             	sub    esp,0x4c
c000bef0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bef4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bef8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000befb:	85 db                	test   ebx,ebx
c000befd:	0f 84 9c 06 00 00    	je     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf03:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf06:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf09:	0f af c7             	imul   eax,edi
c000bf0c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf0f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf12:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf19:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf20:	0f af c7             	imul   eax,edi
c000bf23:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf26:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf34:	68 00 00 70 3f       	push   0x3f700000
c000bf39:	6a 00                	push   0x0
c000bf3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf43:	e8 b7 a2 01 00       	call   c00261ff <__ltdf2>
c000bf48:	83 c4 10             	add    esp,0x10
c000bf4b:	ba 16 00 00 00       	mov    edx,0x16
c000bf50:	85 c0                	test   eax,eax
c000bf52:	0f 88 47 06 00 00    	js     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf58:	68 00 00 70 40       	push   0x40700000
c000bf5d:	6a 00                	push   0x0
c000bf5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf67:	e8 75 a2 01 00       	call   c00261e1 <__gtdf2>
c000bf6c:	83 c4 10             	add    esp,0x10
c000bf6f:	ba 16 00 00 00       	mov    edx,0x16
c000bf74:	85 c0                	test   eax,eax
c000bf76:	0f 8f 23 06 00 00    	jg     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf82:	e8 0c a0 01 00       	call   c0025f93 <__floatsidf>
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf92:	68 00 00 00 40       	push   0x40000000
c000bf97:	6a 00                	push   0x0
c000bf99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfa1:	e8 0d 93 01 00       	call   c00252b3 <__adddf3>
c000bfa6:	59                   	pop    ecx
c000bfa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfaf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfb2:	e8 dc 9f 01 00       	call   c0025f93 <__floatsidf>
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfbe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfc2:	52                   	push   edx
c000bfc3:	50                   	push   eax
c000bfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfcc:	e8 43 9c 01 00       	call   c0025c14 <__divdf3>
c000bfd1:	83 c4 10             	add    esp,0x10
c000bfd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfdc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfdf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfe2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfe6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bffa:	e8 e2 a1 01 00       	call   c00261e1 <__gtdf2>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	85 c0                	test   eax,eax
c000c004:	7e 2d                	jle    c000c033 <sinc_hex_vari_process+0x14f>
c000c006:	68 00 00 f0 3f       	push   0x3ff00000
c000c00b:	6a 00                	push   0x0
c000c00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c015:	e8 e5 a1 01 00       	call   c00261ff <__ltdf2>
c000c01a:	83 c4 10             	add    esp,0x10
c000c01d:	85 c0                	test   eax,eax
c000c01f:	79 4d                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c025:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c029:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c02d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c031:	eb 1b                	jmp    c000c04e <sinc_hex_vari_process+0x16a>
c000c033:	68 00 00 f0 3f       	push   0x3ff00000
c000c038:	6a 00                	push   0x0
c000c03a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c03e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c042:	e8 b8 a1 01 00       	call   c00261ff <__ltdf2>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	85 c0                	test   eax,eax
c000c04c:	79 20                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c04e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c052:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05e:	e8 b1 9b 01 00       	call   c0025c14 <__divdf3>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c06a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06e:	50                   	push   eax
c000c06f:	50                   	push   eax
c000c070:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c074:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c078:	e8 33 a3 01 00       	call   c00263b0 <lrint>
c000c07d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c080:	40                   	inc    eax
c000c081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c085:	0f af c7             	imul   eax,edi
c000c088:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c08c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c093:	58                   	pop    eax
c000c094:	5a                   	pop    edx
c000c095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c099:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c09d:	e8 0e a3 01 00       	call   c00263b0 <lrint>
c000c0a2:	83 ec 0c             	sub    esp,0xc
c000c0a5:	50                   	push   eax
c000c0a6:	e8 e8 9e 01 00       	call   c0025f93 <__floatsidf>
c000c0ab:	83 c4 10             	add    esp,0x10
c000c0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0b6:	52                   	push   edx
c000c0b7:	50                   	push   eax
c000c0b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c0:	e8 3f 98 01 00       	call   c0025904 <__subdf3>
c000c0c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	83 c4 20             	add    esp,0x20
c000c0d0:	6a 00                	push   0x0
c000c0d2:	6a 00                	push   0x0
c000c0d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0dc:	e8 1e a1 01 00       	call   c00261ff <__ltdf2>
c000c0e1:	83 c4 10             	add    esp,0x10
c000c0e4:	85 c0                	test   eax,eax
c000c0e6:	79 1f                	jns    c000c107 <sinc_hex_vari_process+0x223>
c000c0e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0ed:	6a 00                	push   0x0
c000c0ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f7:	e8 b7 91 01 00       	call   c00252b3 <__adddf3>
c000c0fc:	83 c4 10             	add    esp,0x10
c000c0ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c103:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c107:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c10a:	83 ec 10             	sub    esp,0x10
c000c10d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c111:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c124:	e8 db 97 01 00       	call   c0025904 <__subdf3>
c000c129:	83 c4 18             	add    esp,0x18
c000c12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c130:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c134:	52                   	push   edx
c000c135:	50                   	push   eax
c000c136:	e8 75 a2 01 00       	call   c00263b0 <lrint>
c000c13b:	0f af f8             	imul   edi,eax
c000c13e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c142:	01 f8                	add    eax,edi
c000c144:	99                   	cdq    
c000c145:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c148:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c14b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c14f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c153:	68 00 00 f0 3f       	push   0x3ff00000
c000c158:	6a 00                	push   0x0
c000c15a:	e8 b5 9a 01 00       	call   c0025c14 <__divdf3>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c16a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c16f:	68 23 42 92 0c       	push   0xc924223
c000c174:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c17c:	e8 32 91 01 00       	call   c00252b3 <__adddf3>
c000c181:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c185:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c189:	83 c4 20             	add    esp,0x20
c000c18c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c194:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c19c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c19f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1a2:	7d 50                	jge    c000c1f4 <sinc_hex_vari_process+0x310>
c000c1a4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1aa:	01 c8                	add    eax,ecx
c000c1ac:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1af:	99                   	cdq    
c000c1b0:	f7 f9                	idiv   ecx
c000c1b2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1b6:	7d 0c                	jge    c000c1c4 <sinc_hex_vari_process+0x2e0>
c000c1b8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1bb:	85 ff                	test   edi,edi
c000c1bd:	79 6c                	jns    c000c22b <sinc_hex_vari_process+0x347>
c000c1bf:	e9 e7 00 00 00       	jmp    c000c2ab <sinc_hex_vari_process+0x3c7>
c000c1c4:	50                   	push   eax
c000c1c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1c9:	56                   	push   esi
c000c1ca:	53                   	push   ebx
c000c1cb:	e8 d6 f4 ff ff       	call   c000b6a6 <prepare_data>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	89 c2                	mov    edx,eax
c000c1d5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1d8:	85 c0                	test   eax,eax
c000c1da:	0f 85 bf 03 00 00    	jne    c000c59f <sinc_hex_vari_process+0x6bb>
c000c1e0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e6:	01 c8                	add    eax,ecx
c000c1e8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1eb:	99                   	cdq    
c000c1ec:	f7 f9                	idiv   ecx
c000c1ee:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1f2:	7c c4                	jl     c000c1b8 <sinc_hex_vari_process+0x2d4>
c000c1f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1fc:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1ff:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c206:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c20a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c20d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c210:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c213:	99                   	cdq    
c000c214:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c217:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c21a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c21d:	99                   	cdq    
c000c21e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c221:	31 d2                	xor    edx,edx
c000c223:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c226:	e9 74 03 00 00       	jmp    c000c59f <sinc_hex_vari_process+0x6bb>
c000c22b:	83 ec 0c             	sub    esp,0xc
c000c22e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c231:	e8 5d 9d 01 00       	call   c0025f93 <__floatsidf>
c000c236:	83 c4 10             	add    esp,0x10
c000c239:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c23d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c241:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c249:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c251:	e8 5d 90 01 00       	call   c00252b3 <__adddf3>
c000c256:	83 c4 10             	add    esp,0x10
c000c259:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c25d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c261:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c265:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c271:	e8 3d 90 01 00       	call   c00252b3 <__adddf3>
c000c276:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c279:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c27d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c281:	e8 0d 9d 01 00       	call   c0025f93 <__floatsidf>
c000c286:	83 c4 10             	add    esp,0x10
c000c289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c291:	52                   	push   edx
c000c292:	50                   	push   eax
c000c293:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c29b:	e8 5d 9f 01 00       	call   c00261fd <__gedf2>
c000c2a0:	83 c4 10             	add    esp,0x10
c000c2a3:	85 c0                	test   eax,eax
c000c2a5:	0f 89 49 ff ff ff    	jns    c000c1f4 <sinc_hex_vari_process+0x310>
c000c2ab:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2af:	0f 8e ef 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c2b5:	83 ec 10             	sub    esp,0x10
c000c2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2be:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2c1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2c4:	e8 3b 96 01 00       	call   c0025904 <__subdf3>
c000c2c9:	83 c4 18             	add    esp,0x18
c000c2cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d4:	52                   	push   edx
c000c2d5:	50                   	push   eax
c000c2d6:	e8 b5 a0 01 00       	call   c0026390 <fabs>
c000c2db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2eb:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f8:	e8 e4 9e 01 00       	call   c00261e1 <__gtdf2>
c000c2fd:	83 c4 10             	add    esp,0x10
c000c300:	85 c0                	test   eax,eax
c000c302:	0f 8e 9c 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c308:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c30b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c30e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c312:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c316:	52                   	push   edx
c000c317:	50                   	push   eax
c000c318:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c31b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c31e:	e8 e1 95 01 00       	call   c0025904 <__subdf3>
c000c323:	59                   	pop    ecx
c000c324:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c328:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c32c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c32f:	e8 5f 9c 01 00       	call   c0025f93 <__floatsidf>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c33f:	52                   	push   edx
c000c340:	50                   	push   eax
c000c341:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c345:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c349:	e8 e2 95 01 00       	call   c0025930 <__muldf3>
c000c34e:	5f                   	pop    edi
c000c34f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c353:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c357:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c35a:	e8 34 9c 01 00       	call   c0025f93 <__floatsidf>
c000c35f:	83 c4 10             	add    esp,0x10
c000c362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c36a:	52                   	push   edx
c000c36b:	50                   	push   eax
c000c36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c374:	e8 9b 98 01 00       	call   c0025c14 <__divdf3>
c000c379:	83 c4 10             	add    esp,0x10
c000c37c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c380:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c388:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c38c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c390:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c394:	e8 1a 8f 01 00       	call   c00252b3 <__adddf3>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3aa:	e8 e4 9b 01 00       	call   c0025f93 <__floatsidf>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ca:	e8 30 9e 01 00       	call   c00261ff <__ltdf2>
c000c3cf:	83 c4 10             	add    esp,0x10
c000c3d2:	85 c0                	test   eax,eax
c000c3d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3dc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3e0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3e4:	78 10                	js     c000c3f6 <sinc_hex_vari_process+0x512>
c000c3e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c406:	e8 25 95 01 00       	call   c0025930 <__muldf3>
c000c40b:	59                   	pop    ecx
c000c40c:	5f                   	pop    edi
c000c40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c411:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c415:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c41d:	e8 5d f2 ff ff       	call   c000b67f <double_to_fp>
c000c422:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c426:	89 c7                	mov    edi,eax
c000c428:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c42c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c430:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c434:	e8 f7 94 01 00       	call   c0025930 <__muldf3>
c000c439:	83 c4 18             	add    esp,0x18
c000c43c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c440:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c444:	52                   	push   edx
c000c445:	50                   	push   eax
c000c446:	e8 34 f2 ff ff       	call   c000b67f <double_to_fp>
c000c44b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c44e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c452:	83 c4 0c             	add    esp,0xc
c000c455:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c458:	8d 04 90             	lea    eax,[eax+edx*4]
c000c45b:	50                   	push   eax
c000c45c:	50                   	push   eax
c000c45d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c460:	e8 2e 9b 01 00       	call   c0025f93 <__floatsidf>
c000c465:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c469:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c46d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c471:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c475:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c479:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c47d:	e8 92 97 01 00       	call   c0025c14 <__divdf3>
c000c482:	83 c4 18             	add    esp,0x18
c000c485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c48d:	52                   	push   edx
c000c48e:	89 fa                	mov    edx,edi
c000c490:	50                   	push   eax
c000c491:	89 d8                	mov    eax,ebx
c000c493:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c497:	e8 50 de ff ff       	call   c000a2ec <calc_output_hex>
c000c49c:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b0:	e8 5f 97 01 00       	call   c0025c14 <__divdf3>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4d0:	e8 de 8d 01 00       	call   c00252b3 <__adddf3>
c000c4d5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4d9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4dd:	83 c4 18             	add    esp,0x18
c000c4e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e8:	e8 c3 9e 01 00       	call   c00263b0 <lrint>
c000c4ed:	83 ec 0c             	sub    esp,0xc
c000c4f0:	50                   	push   eax
c000c4f1:	e8 9d 9a 01 00       	call   c0025f93 <__floatsidf>
c000c4f6:	83 c4 10             	add    esp,0x10
c000c4f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c501:	52                   	push   edx
c000c502:	50                   	push   eax
c000c503:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c507:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c50b:	e8 f4 93 01 00       	call   c0025904 <__subdf3>
c000c510:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c514:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c518:	83 c4 20             	add    esp,0x20
c000c51b:	6a 00                	push   0x0
c000c51d:	6a 00                	push   0x0
c000c51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c527:	e8 d3 9c 01 00       	call   c00261ff <__ltdf2>
c000c52c:	83 c4 10             	add    esp,0x10
c000c52f:	85 c0                	test   eax,eax
c000c531:	79 20                	jns    c000c553 <sinc_hex_vari_process+0x66f>
c000c533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 6b 8d 01 00       	call   c00252b3 <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c56c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c570:	e8 8f 93 01 00       	call   c0025904 <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c57c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 29 9e 01 00       	call   c00263b0 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c58e:	83 c4 10             	add    esp,0x10
c000c591:	01 f8                	add    eax,edi
c000c593:	99                   	cdq    
c000c594:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c597:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c59a:	e9 fd fb ff ff       	jmp    c000c19c <sinc_hex_vari_process+0x2b8>
c000c59f:	83 c4 4c             	add    esp,0x4c
c000c5a2:	89 d0                	mov    eax,edx
c000c5a4:	5b                   	pop    ebx
c000c5a5:	5e                   	pop    esi
c000c5a6:	5f                   	pop    edi
c000c5a7:	5d                   	pop    ebp
c000c5a8:	c3                   	ret    

c000c5a9 <sinc_quad_vari_process>:
c000c5a9:	55                   	push   ebp
c000c5aa:	ba 05 00 00 00       	mov    edx,0x5
c000c5af:	57                   	push   edi
c000c5b0:	56                   	push   esi
c000c5b1:	53                   	push   ebx
c000c5b2:	83 ec 4c             	sub    esp,0x4c
c000c5b5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5b9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5bd:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5c0:	85 db                	test   ebx,ebx
c000c5c2:	0f 84 9c 06 00 00    	je     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c5c8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5ce:	0f af c7             	imul   eax,edi
c000c5d1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5d4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5d7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5e5:	0f af c7             	imul   eax,edi
c000c5e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5eb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f9:	68 00 00 70 3f       	push   0x3f700000
c000c5fe:	6a 00                	push   0x0
c000c600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c608:	e8 f2 9b 01 00       	call   c00261ff <__ltdf2>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	ba 16 00 00 00       	mov    edx,0x16
c000c615:	85 c0                	test   eax,eax
c000c617:	0f 88 47 06 00 00    	js     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c61d:	68 00 00 70 40       	push   0x40700000
c000c622:	6a 00                	push   0x0
c000c624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62c:	e8 b0 9b 01 00       	call   c00261e1 <__gtdf2>
c000c631:	83 c4 10             	add    esp,0x10
c000c634:	ba 16 00 00 00       	mov    edx,0x16
c000c639:	85 c0                	test   eax,eax
c000c63b:	0f 8f 23 06 00 00    	jg     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c641:	83 ec 0c             	sub    esp,0xc
c000c644:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c647:	e8 47 99 01 00       	call   c0025f93 <__floatsidf>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c653:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c657:	68 00 00 00 40       	push   0x40000000
c000c65c:	6a 00                	push   0x0
c000c65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c666:	e8 48 8c 01 00       	call   c00252b3 <__adddf3>
c000c66b:	59                   	pop    ecx
c000c66c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c670:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c674:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c677:	e8 17 99 01 00       	call   c0025f93 <__floatsidf>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c683:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c687:	52                   	push   edx
c000c688:	50                   	push   eax
c000c689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c691:	e8 7e 95 01 00       	call   c0025c14 <__divdf3>
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c69d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6a1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6a4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bf:	e8 1d 9b 01 00       	call   c00261e1 <__gtdf2>
c000c6c4:	83 c4 10             	add    esp,0x10
c000c6c7:	85 c0                	test   eax,eax
c000c6c9:	7e 2d                	jle    c000c6f8 <sinc_quad_vari_process+0x14f>
c000c6cb:	68 00 00 f0 3f       	push   0x3ff00000
c000c6d0:	6a 00                	push   0x0
c000c6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	e8 20 9b 01 00       	call   c00261ff <__ltdf2>
c000c6df:	83 c4 10             	add    esp,0x10
c000c6e2:	85 c0                	test   eax,eax
c000c6e4:	79 4d                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6f6:	eb 1b                	jmp    c000c713 <sinc_quad_vari_process+0x16a>
c000c6f8:	68 00 00 f0 3f       	push   0x3ff00000
c000c6fd:	6a 00                	push   0x0
c000c6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c707:	e8 f3 9a 01 00       	call   c00261ff <__ltdf2>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	85 c0                	test   eax,eax
c000c711:	79 20                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c713:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c717:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c71b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c71f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c723:	e8 ec 94 01 00       	call   c0025c14 <__divdf3>
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c733:	50                   	push   eax
c000c734:	50                   	push   eax
c000c735:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c739:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c73d:	e8 6e 9c 01 00       	call   c00263b0 <lrint>
c000c742:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c745:	40                   	inc    eax
c000c746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c74a:	0f af c7             	imul   eax,edi
c000c74d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c754:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c758:	58                   	pop    eax
c000c759:	5a                   	pop    edx
c000c75a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c762:	e8 49 9c 01 00       	call   c00263b0 <lrint>
c000c767:	83 ec 0c             	sub    esp,0xc
c000c76a:	50                   	push   eax
c000c76b:	e8 23 98 01 00       	call   c0025f93 <__floatsidf>
c000c770:	83 c4 10             	add    esp,0x10
c000c773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c777:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c77b:	52                   	push   edx
c000c77c:	50                   	push   eax
c000c77d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c781:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c785:	e8 7a 91 01 00       	call   c0025904 <__subdf3>
c000c78a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	83 c4 20             	add    esp,0x20
c000c795:	6a 00                	push   0x0
c000c797:	6a 00                	push   0x0
c000c799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a1:	e8 59 9a 01 00       	call   c00261ff <__ltdf2>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	85 c0                	test   eax,eax
c000c7ab:	79 1f                	jns    c000c7cc <sinc_quad_vari_process+0x223>
c000c7ad:	68 00 00 f0 3f       	push   0x3ff00000
c000c7b2:	6a 00                	push   0x0
c000c7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7bc:	e8 f2 8a 01 00       	call   c00252b3 <__adddf3>
c000c7c1:	83 c4 10             	add    esp,0x10
c000c7c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7cc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7cf:	83 ec 10             	sub    esp,0x10
c000c7d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7d6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e9:	e8 16 91 01 00       	call   c0025904 <__subdf3>
c000c7ee:	83 c4 18             	add    esp,0x18
c000c7f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7f9:	52                   	push   edx
c000c7fa:	50                   	push   eax
c000c7fb:	e8 b0 9b 01 00       	call   c00263b0 <lrint>
c000c800:	0f af f8             	imul   edi,eax
c000c803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c807:	01 f8                	add    eax,edi
c000c809:	99                   	cdq    
c000c80a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c80d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c810:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c814:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c818:	68 00 00 f0 3f       	push   0x3ff00000
c000c81d:	6a 00                	push   0x0
c000c81f:	e8 f0 93 01 00       	call   c0025c14 <__divdf3>
c000c824:	83 c4 10             	add    esp,0x10
c000c827:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c82b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c82f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c834:	68 23 42 92 0c       	push   0xc924223
c000c839:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c83d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c841:	e8 6d 8a 01 00       	call   c00252b3 <__adddf3>
c000c846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c84e:	83 c4 20             	add    esp,0x20
c000c851:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c859:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c861:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c864:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c867:	7d 50                	jge    c000c8b9 <sinc_quad_vari_process+0x310>
c000c869:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c86c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c86f:	01 c8                	add    eax,ecx
c000c871:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c874:	99                   	cdq    
c000c875:	f7 f9                	idiv   ecx
c000c877:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c87b:	7d 0c                	jge    c000c889 <sinc_quad_vari_process+0x2e0>
c000c87d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c880:	85 ff                	test   edi,edi
c000c882:	79 6c                	jns    c000c8f0 <sinc_quad_vari_process+0x347>
c000c884:	e9 e7 00 00 00       	jmp    c000c970 <sinc_quad_vari_process+0x3c7>
c000c889:	50                   	push   eax
c000c88a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c88e:	56                   	push   esi
c000c88f:	53                   	push   ebx
c000c890:	e8 11 ee ff ff       	call   c000b6a6 <prepare_data>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	89 c2                	mov    edx,eax
c000c89a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c89d:	85 c0                	test   eax,eax
c000c89f:	0f 85 bf 03 00 00    	jne    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8a5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8ab:	01 c8                	add    eax,ecx
c000c8ad:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8b0:	99                   	cdq    
c000c8b1:	f7 f9                	idiv   ecx
c000c8b3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b7:	7c c4                	jl     c000c87d <sinc_quad_vari_process+0x2d4>
c000c8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8c1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8c4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8d2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8d8:	99                   	cdq    
c000c8d9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8dc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8df:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8e2:	99                   	cdq    
c000c8e3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8e6:	31 d2                	xor    edx,edx
c000c8e8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8eb:	e9 74 03 00 00       	jmp    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8f6:	e8 98 96 01 00       	call   c0025f93 <__floatsidf>
c000c8fb:	83 c4 10             	add    esp,0x10
c000c8fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c902:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c906:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c912:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c916:	e8 98 89 01 00       	call   c00252b3 <__adddf3>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c922:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c936:	e8 78 89 01 00       	call   c00252b3 <__adddf3>
c000c93b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c93e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c942:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c946:	e8 48 96 01 00       	call   c0025f93 <__floatsidf>
c000c94b:	83 c4 10             	add    esp,0x10
c000c94e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c952:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c956:	52                   	push   edx
c000c957:	50                   	push   eax
c000c958:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c95c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c960:	e8 98 98 01 00       	call   c00261fd <__gedf2>
c000c965:	83 c4 10             	add    esp,0x10
c000c968:	85 c0                	test   eax,eax
c000c96a:	0f 89 49 ff ff ff    	jns    c000c8b9 <sinc_quad_vari_process+0x310>
c000c970:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c974:	0f 8e ef 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c97a:	83 ec 10             	sub    esp,0x10
c000c97d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c980:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c983:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c986:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c989:	e8 76 8f 01 00       	call   c0025904 <__subdf3>
c000c98e:	83 c4 18             	add    esp,0x18
c000c991:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c995:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c999:	52                   	push   edx
c000c99a:	50                   	push   eax
c000c99b:	e8 f0 99 01 00       	call   c0026390 <fabs>
c000c9a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9a8:	83 c4 10             	add    esp,0x10
c000c9ab:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9b0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bd:	e8 1f 98 01 00       	call   c00261e1 <__gtdf2>
c000c9c2:	83 c4 10             	add    esp,0x10
c000c9c5:	85 c0                	test   eax,eax
c000c9c7:	0f 8e 9c 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c9cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9db:	52                   	push   edx
c000c9dc:	50                   	push   eax
c000c9dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9e0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9e3:	e8 1c 8f 01 00       	call   c0025904 <__subdf3>
c000c9e8:	59                   	pop    ecx
c000c9e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9ed:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9f4:	e8 9a 95 01 00       	call   c0025f93 <__floatsidf>
c000c9f9:	83 c4 10             	add    esp,0x10
c000c9fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca04:	52                   	push   edx
c000ca05:	50                   	push   eax
c000ca06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0e:	e8 1d 8f 01 00       	call   c0025930 <__muldf3>
c000ca13:	5f                   	pop    edi
c000ca14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca18:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca1c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca1f:	e8 6f 95 01 00       	call   c0025f93 <__floatsidf>
c000ca24:	83 c4 10             	add    esp,0x10
c000ca27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca2f:	52                   	push   edx
c000ca30:	50                   	push   eax
c000ca31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca39:	e8 d6 91 01 00       	call   c0025c14 <__divdf3>
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca59:	e8 55 88 01 00       	call   c00252b3 <__adddf3>
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca69:	83 ec 0c             	sub    esp,0xc
c000ca6c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca6f:	e8 1f 95 01 00       	call   c0025f93 <__floatsidf>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8f:	e8 6b 97 01 00       	call   c00261ff <__ltdf2>
c000ca94:	83 c4 10             	add    esp,0x10
c000ca97:	85 c0                	test   eax,eax
c000ca99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca9d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000caa1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000caa5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000caa9:	78 10                	js     c000cabb <sinc_quad_vari_process+0x512>
c000caab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cab3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cab7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cabb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cabf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cacb:	e8 60 8e 01 00       	call   c0025930 <__muldf3>
c000cad0:	59                   	pop    ecx
c000cad1:	5f                   	pop    edi
c000cad2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cae2:	e8 98 eb ff ff       	call   c000b67f <double_to_fp>
c000cae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caeb:	89 c7                	mov    edi,eax
c000caed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf9:	e8 32 8e 01 00       	call   c0025930 <__muldf3>
c000cafe:	83 c4 18             	add    esp,0x18
c000cb01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb09:	52                   	push   edx
c000cb0a:	50                   	push   eax
c000cb0b:	e8 6f eb ff ff       	call   c000b67f <double_to_fp>
c000cb10:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb13:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb17:	83 c4 0c             	add    esp,0xc
c000cb1a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb1d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb20:	50                   	push   eax
c000cb21:	50                   	push   eax
c000cb22:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb25:	e8 69 94 01 00       	call   c0025f93 <__floatsidf>
c000cb2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb42:	e8 cd 90 01 00       	call   c0025c14 <__divdf3>
c000cb47:	83 c4 18             	add    esp,0x18
c000cb4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb52:	52                   	push   edx
c000cb53:	89 fa                	mov    edx,edi
c000cb55:	50                   	push   eax
c000cb56:	89 d8                	mov    eax,ebx
c000cb58:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb5c:	e8 a5 d1 ff ff       	call   c0009d06 <calc_output_quad>
c000cb61:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb75:	e8 9a 90 01 00       	call   c0025c14 <__divdf3>
c000cb7a:	83 c4 10             	add    esp,0x10
c000cb7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb95:	e8 19 87 01 00       	call   c00252b3 <__adddf3>
c000cb9a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb9e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cba2:	83 c4 18             	add    esp,0x18
c000cba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbad:	e8 fe 97 01 00       	call   c00263b0 <lrint>
c000cbb2:	83 ec 0c             	sub    esp,0xc
c000cbb5:	50                   	push   eax
c000cbb6:	e8 d8 93 01 00       	call   c0025f93 <__floatsidf>
c000cbbb:	83 c4 10             	add    esp,0x10
c000cbbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc6:	52                   	push   edx
c000cbc7:	50                   	push   eax
c000cbc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbd0:	e8 2f 8d 01 00       	call   c0025904 <__subdf3>
c000cbd5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbd9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbdd:	83 c4 20             	add    esp,0x20
c000cbe0:	6a 00                	push   0x0
c000cbe2:	6a 00                	push   0x0
c000cbe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbec:	e8 0e 96 01 00       	call   c00261ff <__ltdf2>
c000cbf1:	83 c4 10             	add    esp,0x10
c000cbf4:	85 c0                	test   eax,eax
c000cbf6:	79 20                	jns    c000cc18 <sinc_quad_vari_process+0x66f>
c000cbf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 a6 86 01 00       	call   c00252b3 <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc35:	e8 ca 8c 01 00       	call   c0025904 <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 64 97 01 00       	call   c00263b0 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	01 f8                	add    eax,edi
c000cc58:	99                   	cdq    
c000cc59:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc5c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5f:	e9 fd fb ff ff       	jmp    c000c861 <sinc_quad_vari_process+0x2b8>
c000cc64:	83 c4 4c             	add    esp,0x4c
c000cc67:	89 d0                	mov    eax,edx
c000cc69:	5b                   	pop    ebx
c000cc6a:	5e                   	pop    esi
c000cc6b:	5f                   	pop    edi
c000cc6c:	5d                   	pop    ebp
c000cc6d:	c3                   	ret    

c000cc6e <sinc_stereo_vari_process>:
c000cc6e:	55                   	push   ebp
c000cc6f:	ba 05 00 00 00       	mov    edx,0x5
c000cc74:	57                   	push   edi
c000cc75:	56                   	push   esi
c000cc76:	53                   	push   ebx
c000cc77:	83 ec 4c             	sub    esp,0x4c
c000cc7a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc7e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc82:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc85:	85 db                	test   ebx,ebx
c000cc87:	0f 84 9c 06 00 00    	je     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cc8d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc93:	0f af c7             	imul   eax,edi
c000cc96:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc99:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc9c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cca3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ccaa:	0f af c7             	imul   eax,edi
c000ccad:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ccb0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccb6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbe:	68 00 00 70 3f       	push   0x3f700000
c000ccc3:	6a 00                	push   0x0
c000ccc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccd:	e8 2d 95 01 00       	call   c00261ff <__ltdf2>
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	ba 16 00 00 00       	mov    edx,0x16
c000ccda:	85 c0                	test   eax,eax
c000ccdc:	0f 88 47 06 00 00    	js     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cce2:	68 00 00 70 40       	push   0x40700000
c000cce7:	6a 00                	push   0x0
c000cce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf1:	e8 eb 94 01 00       	call   c00261e1 <__gtdf2>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	ba 16 00 00 00       	mov    edx,0x16
c000ccfe:	85 c0                	test   eax,eax
c000cd00:	0f 8f 23 06 00 00    	jg     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cd06:	83 ec 0c             	sub    esp,0xc
c000cd09:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd0c:	e8 82 92 01 00       	call   c0025f93 <__floatsidf>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd1c:	68 00 00 00 40       	push   0x40000000
c000cd21:	6a 00                	push   0x0
c000cd23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd2b:	e8 83 85 01 00       	call   c00252b3 <__adddf3>
c000cd30:	59                   	pop    ecx
c000cd31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd35:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd39:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3c:	e8 52 92 01 00       	call   c0025f93 <__floatsidf>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd4c:	52                   	push   edx
c000cd4d:	50                   	push   eax
c000cd4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd56:	e8 b9 8e 01 00       	call   c0025c14 <__divdf3>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd66:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd69:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd84:	e8 58 94 01 00       	call   c00261e1 <__gtdf2>
c000cd89:	83 c4 10             	add    esp,0x10
c000cd8c:	85 c0                	test   eax,eax
c000cd8e:	7e 2d                	jle    c000cdbd <sinc_stereo_vari_process+0x14f>
c000cd90:	68 00 00 f0 3f       	push   0x3ff00000
c000cd95:	6a 00                	push   0x0
c000cd97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	e8 5b 94 01 00       	call   c00261ff <__ltdf2>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	85 c0                	test   eax,eax
c000cda9:	79 4d                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdbb:	eb 1b                	jmp    c000cdd8 <sinc_stereo_vari_process+0x16a>
c000cdbd:	68 00 00 f0 3f       	push   0x3ff00000
c000cdc2:	6a 00                	push   0x0
c000cdc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdcc:	e8 2e 94 01 00       	call   c00261ff <__ltdf2>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	85 c0                	test   eax,eax
c000cdd6:	79 20                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cddc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cde0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde8:	e8 27 8e 01 00       	call   c0025c14 <__divdf3>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf8:	50                   	push   eax
c000cdf9:	50                   	push   eax
c000cdfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce02:	e8 a9 95 01 00       	call   c00263b0 <lrint>
c000ce07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce0a:	40                   	inc    eax
c000ce0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0f:	0f af c7             	imul   eax,edi
c000ce12:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce1d:	58                   	pop    eax
c000ce1e:	5a                   	pop    edx
c000ce1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce27:	e8 84 95 01 00       	call   c00263b0 <lrint>
c000ce2c:	83 ec 0c             	sub    esp,0xc
c000ce2f:	50                   	push   eax
c000ce30:	e8 5e 91 01 00       	call   c0025f93 <__floatsidf>
c000ce35:	83 c4 10             	add    esp,0x10
c000ce38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce40:	52                   	push   edx
c000ce41:	50                   	push   eax
c000ce42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce4a:	e8 b5 8a 01 00       	call   c0025904 <__subdf3>
c000ce4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	83 c4 20             	add    esp,0x20
c000ce5a:	6a 00                	push   0x0
c000ce5c:	6a 00                	push   0x0
c000ce5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce66:	e8 94 93 01 00       	call   c00261ff <__ltdf2>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	85 c0                	test   eax,eax
c000ce70:	79 1f                	jns    c000ce91 <sinc_stereo_vari_process+0x223>
c000ce72:	68 00 00 f0 3f       	push   0x3ff00000
c000ce77:	6a 00                	push   0x0
c000ce79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce81:	e8 2d 84 01 00       	call   c00252b3 <__adddf3>
c000ce86:	83 c4 10             	add    esp,0x10
c000ce89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce91:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce94:	83 ec 10             	sub    esp,0x10
c000ce97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce9b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceae:	e8 51 8a 01 00       	call   c0025904 <__subdf3>
c000ceb3:	83 c4 18             	add    esp,0x18
c000ceb6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cebe:	52                   	push   edx
c000cebf:	50                   	push   eax
c000cec0:	e8 eb 94 01 00       	call   c00263b0 <lrint>
c000cec5:	0f af f8             	imul   edi,eax
c000cec8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cecc:	01 f8                	add    eax,edi
c000cece:	99                   	cdq    
c000cecf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ced2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ced5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ced9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cedd:	68 00 00 f0 3f       	push   0x3ff00000
c000cee2:	6a 00                	push   0x0
c000cee4:	e8 2b 8d 01 00       	call   c0025c14 <__divdf3>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cef0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cef4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cef9:	68 23 42 92 0c       	push   0xc924223
c000cefe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf06:	e8 a8 83 01 00       	call   c00252b3 <__adddf3>
c000cf0b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf0f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf13:	83 c4 20             	add    esp,0x20
c000cf16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf1e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf29:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf2c:	7d 50                	jge    c000cf7e <sinc_stereo_vari_process+0x310>
c000cf2e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf31:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf34:	01 c8                	add    eax,ecx
c000cf36:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf39:	99                   	cdq    
c000cf3a:	f7 f9                	idiv   ecx
c000cf3c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf40:	7d 0c                	jge    c000cf4e <sinc_stereo_vari_process+0x2e0>
c000cf42:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf45:	85 ff                	test   edi,edi
c000cf47:	79 6c                	jns    c000cfb5 <sinc_stereo_vari_process+0x347>
c000cf49:	e9 e7 00 00 00       	jmp    c000d035 <sinc_stereo_vari_process+0x3c7>
c000cf4e:	50                   	push   eax
c000cf4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf53:	56                   	push   esi
c000cf54:	53                   	push   ebx
c000cf55:	e8 4c e7 ff ff       	call   c000b6a6 <prepare_data>
c000cf5a:	83 c4 10             	add    esp,0x10
c000cf5d:	89 c2                	mov    edx,eax
c000cf5f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf62:	85 c0                	test   eax,eax
c000cf64:	0f 85 bf 03 00 00    	jne    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cf6a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf70:	01 c8                	add    eax,ecx
c000cf72:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf75:	99                   	cdq    
c000cf76:	f7 f9                	idiv   ecx
c000cf78:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf7c:	7c c4                	jl     c000cf42 <sinc_stereo_vari_process+0x2d4>
c000cf7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf86:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf94:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf97:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf9d:	99                   	cdq    
c000cf9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfa1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfa4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfa7:	99                   	cdq    
c000cfa8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfab:	31 d2                	xor    edx,edx
c000cfad:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfb0:	e9 74 03 00 00       	jmp    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cfb5:	83 ec 0c             	sub    esp,0xc
c000cfb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfbb:	e8 d3 8f 01 00       	call   c0025f93 <__floatsidf>
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfdb:	e8 d3 82 01 00       	call   c00252b3 <__adddf3>
c000cfe0:	83 c4 10             	add    esp,0x10
c000cfe3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cffb:	e8 b3 82 01 00       	call   c00252b3 <__adddf3>
c000d000:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d003:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d007:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d00b:	e8 83 8f 01 00       	call   c0025f93 <__floatsidf>
c000d010:	83 c4 10             	add    esp,0x10
c000d013:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d017:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d01b:	52                   	push   edx
c000d01c:	50                   	push   eax
c000d01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d025:	e8 d3 91 01 00       	call   c00261fd <__gedf2>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	85 c0                	test   eax,eax
c000d02f:	0f 89 49 ff ff ff    	jns    c000cf7e <sinc_stereo_vari_process+0x310>
c000d035:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d039:	0f 8e ef 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d03f:	83 ec 10             	sub    esp,0x10
c000d042:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d045:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d048:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d04b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d04e:	e8 b1 88 01 00       	call   c0025904 <__subdf3>
c000d053:	83 c4 18             	add    esp,0x18
c000d056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d05a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05e:	52                   	push   edx
c000d05f:	50                   	push   eax
c000d060:	e8 2b 93 01 00       	call   c0026390 <fabs>
c000d065:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d069:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d06d:	83 c4 10             	add    esp,0x10
c000d070:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d075:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d07a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d07e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d082:	e8 5a 91 01 00       	call   c00261e1 <__gtdf2>
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	85 c0                	test   eax,eax
c000d08c:	0f 8e 9c 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d092:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d095:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d09c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0a0:	52                   	push   edx
c000d0a1:	50                   	push   eax
c000d0a2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0a5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0a8:	e8 57 88 01 00       	call   c0025904 <__subdf3>
c000d0ad:	59                   	pop    ecx
c000d0ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0b2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0b6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0b9:	e8 d5 8e 01 00       	call   c0025f93 <__floatsidf>
c000d0be:	83 c4 10             	add    esp,0x10
c000d0c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0c9:	52                   	push   edx
c000d0ca:	50                   	push   eax
c000d0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0d3:	e8 58 88 01 00       	call   c0025930 <__muldf3>
c000d0d8:	5f                   	pop    edi
c000d0d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0dd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0e1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0e4:	e8 aa 8e 01 00       	call   c0025f93 <__floatsidf>
c000d0e9:	83 c4 10             	add    esp,0x10
c000d0ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0f4:	52                   	push   edx
c000d0f5:	50                   	push   eax
c000d0f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fe:	e8 11 8b 01 00       	call   c0025c14 <__divdf3>
c000d103:	83 c4 10             	add    esp,0x10
c000d106:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11e:	e8 90 81 01 00       	call   c00252b3 <__adddf3>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d12e:	83 ec 0c             	sub    esp,0xc
c000d131:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d134:	e8 5a 8e 01 00       	call   c0025f93 <__floatsidf>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d154:	e8 a6 90 01 00       	call   c00261ff <__ltdf2>
c000d159:	83 c4 10             	add    esp,0x10
c000d15c:	85 c0                	test   eax,eax
c000d15e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d162:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d166:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d16a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d16e:	78 10                	js     c000d180 <sinc_stereo_vari_process+0x512>
c000d170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d174:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d178:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d17c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d188:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d18c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d190:	e8 9b 87 01 00       	call   c0025930 <__muldf3>
c000d195:	59                   	pop    ecx
c000d196:	5f                   	pop    edi
c000d197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a7:	e8 d3 e4 ff ff       	call   c000b67f <double_to_fp>
c000d1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b0:	89 c7                	mov    edi,eax
c000d1b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1be:	e8 6d 87 01 00       	call   c0025930 <__muldf3>
c000d1c3:	83 c4 18             	add    esp,0x18
c000d1c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1ce:	52                   	push   edx
c000d1cf:	50                   	push   eax
c000d1d0:	e8 aa e4 ff ff       	call   c000b67f <double_to_fp>
c000d1d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1dc:	83 c4 0c             	add    esp,0xc
c000d1df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1e2:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1e5:	50                   	push   eax
c000d1e6:	50                   	push   eax
c000d1e7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1ea:	e8 a4 8d 01 00       	call   c0025f93 <__floatsidf>
c000d1ef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1f3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d203:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d207:	e8 08 8a 01 00       	call   c0025c14 <__divdf3>
c000d20c:	83 c4 18             	add    esp,0x18
c000d20f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d213:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d217:	52                   	push   edx
c000d218:	89 fa                	mov    edx,edi
c000d21a:	50                   	push   eax
c000d21b:	89 d8                	mov    eax,ebx
c000d21d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d221:	e8 02 c7 ff ff       	call   c0009928 <calc_output_stereo>
c000d226:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d22a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d232:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d236:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23a:	e8 d5 89 01 00       	call   c0025c14 <__divdf3>
c000d23f:	83 c4 10             	add    esp,0x10
c000d242:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d246:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d252:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d256:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d25a:	e8 54 80 01 00       	call   c00252b3 <__adddf3>
c000d25f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d263:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d267:	83 c4 18             	add    esp,0x18
c000d26a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d272:	e8 39 91 01 00       	call   c00263b0 <lrint>
c000d277:	83 ec 0c             	sub    esp,0xc
c000d27a:	50                   	push   eax
c000d27b:	e8 13 8d 01 00       	call   c0025f93 <__floatsidf>
c000d280:	83 c4 10             	add    esp,0x10
c000d283:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28b:	52                   	push   edx
c000d28c:	50                   	push   eax
c000d28d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d291:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d295:	e8 6a 86 01 00       	call   c0025904 <__subdf3>
c000d29a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a2:	83 c4 20             	add    esp,0x20
c000d2a5:	6a 00                	push   0x0
c000d2a7:	6a 00                	push   0x0
c000d2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b1:	e8 49 8f 01 00       	call   c00261ff <__ltdf2>
c000d2b6:	83 c4 10             	add    esp,0x10
c000d2b9:	85 c0                	test   eax,eax
c000d2bb:	79 20                	jns    c000d2dd <sinc_stereo_vari_process+0x66f>
c000d2bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 e1 7f 01 00       	call   c00252b3 <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2fa:	e8 05 86 01 00       	call   c0025904 <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d306:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 9f 90 01 00       	call   c00263b0 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d318:	83 c4 10             	add    esp,0x10
c000d31b:	01 f8                	add    eax,edi
c000d31d:	99                   	cdq    
c000d31e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d321:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d324:	e9 fd fb ff ff       	jmp    c000cf26 <sinc_stereo_vari_process+0x2b8>
c000d329:	83 c4 4c             	add    esp,0x4c
c000d32c:	89 d0                	mov    eax,edx
c000d32e:	5b                   	pop    ebx
c000d32f:	5e                   	pop    esi
c000d330:	5f                   	pop    edi
c000d331:	5d                   	pop    ebp
c000d332:	c3                   	ret    

c000d333 <sinc_mono_vari_process>:
c000d333:	55                   	push   ebp
c000d334:	ba 05 00 00 00       	mov    edx,0x5
c000d339:	57                   	push   edi
c000d33a:	56                   	push   esi
c000d33b:	53                   	push   ebx
c000d33c:	83 ec 4c             	sub    esp,0x4c
c000d33f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d343:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d347:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d34a:	85 db                	test   ebx,ebx
c000d34c:	0f 84 c1 06 00 00    	je     c000da13 <sinc_mono_vari_process+0x6e0>
c000d352:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d355:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d358:	0f af c7             	imul   eax,edi
c000d35b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d35e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d361:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d368:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d36f:	0f af c7             	imul   eax,edi
c000d372:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d375:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d379:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d37c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d37e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d382:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d386:	68 00 00 70 3f       	push   0x3f700000
c000d38b:	6a 00                	push   0x0
c000d38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d395:	e8 65 8e 01 00       	call   c00261ff <__ltdf2>
c000d39a:	83 c4 10             	add    esp,0x10
c000d39d:	ba 16 00 00 00       	mov    edx,0x16
c000d3a2:	85 c0                	test   eax,eax
c000d3a4:	0f 88 69 06 00 00    	js     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3aa:	68 00 00 70 40       	push   0x40700000
c000d3af:	6a 00                	push   0x0
c000d3b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b9:	e8 23 8e 01 00       	call   c00261e1 <__gtdf2>
c000d3be:	83 c4 10             	add    esp,0x10
c000d3c1:	ba 16 00 00 00       	mov    edx,0x16
c000d3c6:	85 c0                	test   eax,eax
c000d3c8:	0f 8f 45 06 00 00    	jg     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3ce:	83 ec 0c             	sub    esp,0xc
c000d3d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3d4:	e8 ba 8b 01 00       	call   c0025f93 <__floatsidf>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3e4:	68 00 00 00 40       	push   0x40000000
c000d3e9:	6a 00                	push   0x0
c000d3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3f3:	e8 bb 7e 01 00       	call   c00252b3 <__adddf3>
c000d3f8:	59                   	pop    ecx
c000d3f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3fd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d401:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d404:	e8 8a 8b 01 00       	call   c0025f93 <__floatsidf>
c000d409:	83 c4 10             	add    esp,0x10
c000d40c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d410:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d414:	52                   	push   edx
c000d415:	50                   	push   eax
c000d416:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41e:	e8 f1 87 01 00       	call   c0025c14 <__divdf3>
c000d423:	83 c4 10             	add    esp,0x10
c000d426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d42e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d431:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d44c:	e8 90 8d 01 00       	call   c00261e1 <__gtdf2>
c000d451:	83 c4 10             	add    esp,0x10
c000d454:	85 c0                	test   eax,eax
c000d456:	7e 2d                	jle    c000d485 <sinc_mono_vari_process+0x152>
c000d458:	68 00 00 f0 3f       	push   0x3ff00000
c000d45d:	6a 00                	push   0x0
c000d45f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d467:	e8 93 8d 01 00       	call   c00261ff <__ltdf2>
c000d46c:	83 c4 10             	add    esp,0x10
c000d46f:	85 c0                	test   eax,eax
c000d471:	79 4d                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d477:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d47b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d47f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d483:	eb 1b                	jmp    c000d4a0 <sinc_mono_vari_process+0x16d>
c000d485:	68 00 00 f0 3f       	push   0x3ff00000
c000d48a:	6a 00                	push   0x0
c000d48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d494:	e8 66 8d 01 00       	call   c00261ff <__ltdf2>
c000d499:	83 c4 10             	add    esp,0x10
c000d49c:	85 c0                	test   eax,eax
c000d49e:	79 20                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d4a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b0:	e8 5f 87 01 00       	call   c0025c14 <__divdf3>
c000d4b5:	83 c4 10             	add    esp,0x10
c000d4b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4c0:	50                   	push   eax
c000d4c1:	50                   	push   eax
c000d4c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ca:	e8 e1 8e 01 00       	call   c00263b0 <lrint>
c000d4cf:	40                   	inc    eax
c000d4d0:	0f af c7             	imul   eax,edi
c000d4d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4d7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4db:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4e9:	58                   	pop    eax
c000d4ea:	5a                   	pop    edx
c000d4eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f3:	e8 b8 8e 01 00       	call   c00263b0 <lrint>
c000d4f8:	83 ec 0c             	sub    esp,0xc
c000d4fb:	50                   	push   eax
c000d4fc:	e8 92 8a 01 00       	call   c0025f93 <__floatsidf>
c000d501:	83 c4 10             	add    esp,0x10
c000d504:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d508:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d50c:	52                   	push   edx
c000d50d:	50                   	push   eax
c000d50e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d512:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d516:	e8 e9 83 01 00       	call   c0025904 <__subdf3>
c000d51b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d51f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d523:	83 c4 20             	add    esp,0x20
c000d526:	6a 00                	push   0x0
c000d528:	6a 00                	push   0x0
c000d52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d532:	e8 c8 8c 01 00       	call   c00261ff <__ltdf2>
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	85 c0                	test   eax,eax
c000d53c:	79 1f                	jns    c000d55d <sinc_mono_vari_process+0x22a>
c000d53e:	68 00 00 f0 3f       	push   0x3ff00000
c000d543:	6a 00                	push   0x0
c000d545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d54d:	e8 61 7d 01 00       	call   c00252b3 <__adddf3>
c000d552:	83 c4 10             	add    esp,0x10
c000d555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d559:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d55d:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d560:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d563:	83 ec 10             	sub    esp,0x10
c000d566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d572:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d576:	e8 89 83 01 00       	call   c0025904 <__subdf3>
c000d57b:	83 c4 18             	add    esp,0x18
c000d57e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d582:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d586:	52                   	push   edx
c000d587:	50                   	push   eax
c000d588:	e8 23 8e 01 00       	call   c00263b0 <lrint>
c000d58d:	0f af f8             	imul   edi,eax
c000d590:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d593:	31 ff                	xor    edi,edi
c000d595:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d59a:	99                   	cdq    
c000d59b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d59e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a9:	55                   	push   ebp
c000d5aa:	57                   	push   edi
c000d5ab:	e8 64 86 01 00       	call   c0025c14 <__divdf3>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5bb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5c0:	68 23 42 92 0c       	push   0xc924223
c000d5c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5cd:	e8 e1 7c 01 00       	call   c00252b3 <__adddf3>
c000d5d2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5d6:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5da:	83 c4 20             	add    esp,0x20
c000d5dd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5e1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5e8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5eb:	7d 54                	jge    c000d641 <sinc_mono_vari_process+0x30e>
c000d5ed:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5f0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5f3:	01 c8                	add    eax,ecx
c000d5f5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5f8:	99                   	cdq    
c000d5f9:	f7 f9                	idiv   ecx
c000d5fb:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5ff:	7d 0c                	jge    c000d60d <sinc_mono_vari_process+0x2da>
c000d601:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d604:	85 ff                	test   edi,edi
c000d606:	79 73                	jns    c000d67b <sinc_mono_vari_process+0x348>
c000d608:	e9 ee 00 00 00       	jmp    c000d6fb <sinc_mono_vari_process+0x3c8>
c000d60d:	50                   	push   eax
c000d60e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d612:	56                   	push   esi
c000d613:	53                   	push   ebx
c000d614:	e8 8d e0 ff ff       	call   c000b6a6 <prepare_data>
c000d619:	89 c2                	mov    edx,eax
c000d61b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d625:	85 d2                	test   edx,edx
c000d627:	0f 85 e6 03 00 00    	jne    c000da13 <sinc_mono_vari_process+0x6e0>
c000d62d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d630:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d633:	01 c8                	add    eax,ecx
c000d635:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d638:	99                   	cdq    
c000d639:	f7 f9                	idiv   ecx
c000d63b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d63f:	7c c0                	jl     c000d601 <sinc_mono_vari_process+0x2ce>
c000d641:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d649:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d64d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d650:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d657:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d65b:	89 01                	mov    DWORD PTR [ecx],eax
c000d65d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d660:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d663:	99                   	cdq    
c000d664:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d66a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d66d:	99                   	cdq    
c000d66e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d671:	31 d2                	xor    edx,edx
c000d673:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d676:	e9 98 03 00 00       	jmp    c000da13 <sinc_mono_vari_process+0x6e0>
c000d67b:	83 ec 0c             	sub    esp,0xc
c000d67e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d681:	e8 0d 89 01 00       	call   c0025f93 <__floatsidf>
c000d686:	83 c4 10             	add    esp,0x10
c000d689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d68d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d695:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d699:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d69d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6a1:	e8 0d 7c 01 00       	call   c00252b3 <__adddf3>
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6c1:	e8 ed 7b 01 00       	call   c00252b3 <__adddf3>
c000d6c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6cd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6d1:	e8 bd 88 01 00       	call   c0025f93 <__floatsidf>
c000d6d6:	83 c4 10             	add    esp,0x10
c000d6d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6e1:	52                   	push   edx
c000d6e2:	50                   	push   eax
c000d6e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6eb:	e8 f1 8a 01 00       	call   c00261e1 <__gtdf2>
c000d6f0:	83 c4 10             	add    esp,0x10
c000d6f3:	85 c0                	test   eax,eax
c000d6f5:	0f 8f 46 ff ff ff    	jg     c000d641 <sinc_mono_vari_process+0x30e>
c000d6fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6ff:	0f 8e f5 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d705:	83 ec 10             	sub    esp,0x10
c000d708:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d70b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d70e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d712:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d715:	ff 30                	push   DWORD PTR [eax]
c000d717:	e8 e8 81 01 00       	call   c0025904 <__subdf3>
c000d71c:	83 c4 18             	add    esp,0x18
c000d71f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d723:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d727:	52                   	push   edx
c000d728:	50                   	push   eax
c000d729:	e8 62 8c 01 00       	call   c0026390 <fabs>
c000d72e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d732:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d73e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d743:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d747:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d74b:	e8 91 8a 01 00       	call   c00261e1 <__gtdf2>
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	85 c0                	test   eax,eax
c000d755:	0f 8e 9f 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d75b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d75f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d762:	8b 00                	mov    eax,DWORD PTR [eax]
c000d764:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d768:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d76c:	52                   	push   edx
c000d76d:	50                   	push   eax
c000d76e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d771:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d774:	e8 8b 81 01 00       	call   c0025904 <__subdf3>
c000d779:	5f                   	pop    edi
c000d77a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d77e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d782:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d785:	e8 09 88 01 00       	call   c0025f93 <__floatsidf>
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d795:	52                   	push   edx
c000d796:	50                   	push   eax
c000d797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79f:	e8 8c 81 01 00       	call   c0025930 <__muldf3>
c000d7a4:	5d                   	pop    ebp
c000d7a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7ad:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7b0:	e8 de 87 01 00       	call   c0025f93 <__floatsidf>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7c0:	52                   	push   edx
c000d7c1:	50                   	push   eax
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	e8 45 84 01 00       	call   c0025c14 <__divdf3>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ea:	e8 c4 7a 01 00       	call   c00252b3 <__adddf3>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d800:	e8 8e 87 01 00       	call   c0025f93 <__floatsidf>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d80c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d820:	e8 da 89 01 00       	call   c00261ff <__ltdf2>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	85 c0                	test   eax,eax
c000d82a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d82e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d832:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d836:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d83a:	78 10                	js     c000d84c <sinc_mono_vari_process+0x519>
c000d83c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d840:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d848:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d84c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d850:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d854:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d858:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d85c:	e8 cf 80 01 00       	call   c0025930 <__muldf3>
c000d861:	59                   	pop    ecx
c000d862:	5f                   	pop    edi
c000d863:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d867:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d86b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d86f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d873:	e8 07 de ff ff       	call   c000b67f <double_to_fp>
c000d878:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d87c:	89 c7                	mov    edi,eax
c000d87e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d882:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d886:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d88a:	e8 a1 80 01 00       	call   c0025930 <__muldf3>
c000d88f:	83 c4 18             	add    esp,0x18
c000d892:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d896:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d89a:	52                   	push   edx
c000d89b:	50                   	push   eax
c000d89c:	e8 de dd ff ff       	call   c000b67f <double_to_fp>
c000d8a1:	83 ec 0c             	sub    esp,0xc
c000d8a4:	89 c5                	mov    ebp,eax
c000d8a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8a9:	e8 e5 86 01 00       	call   c0025f93 <__floatsidf>
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8b5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8b9:	52                   	push   edx
c000d8ba:	50                   	push   eax
c000d8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8c3:	e8 4c 83 01 00       	call   c0025c14 <__divdf3>
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	89 e9                	mov    ecx,ebp
c000d8cd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8d1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8d5:	89 d8                	mov    eax,ebx
c000d8d7:	89 fa                	mov    edx,edi
c000d8d9:	e8 ee bd ff ff       	call   c00096cc <calc_output_single>
c000d8de:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8e1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8ec:	52                   	push   edx
c000d8ed:	50                   	push   eax
c000d8ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f6:	e8 35 80 01 00       	call   c0025930 <__muldf3>
c000d8fb:	59                   	pop    ecx
c000d8fc:	59                   	pop    ecx
c000d8fd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d901:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d905:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d909:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d90d:	e8 f1 88 01 00       	call   c0026203 <__truncdfsf2>
c000d912:	83 c4 10             	add    esp,0x10
c000d915:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d918:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d91b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d91f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d923:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d927:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d92b:	e8 e4 82 01 00       	call   c0025c14 <__divdf3>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d937:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d93b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d943:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d947:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d94b:	e8 63 79 01 00       	call   c00252b3 <__adddf3>
c000d950:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d954:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d958:	83 c4 18             	add    esp,0x18
c000d95b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d963:	e8 48 8a 01 00       	call   c00263b0 <lrint>
c000d968:	83 ec 0c             	sub    esp,0xc
c000d96b:	50                   	push   eax
c000d96c:	e8 22 86 01 00       	call   c0025f93 <__floatsidf>
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d978:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d97c:	52                   	push   edx
c000d97d:	50                   	push   eax
c000d97e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d982:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d986:	e8 79 7f 01 00       	call   c0025904 <__subdf3>
c000d98b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d98f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d993:	83 c4 20             	add    esp,0x20
c000d996:	6a 00                	push   0x0
c000d998:	6a 00                	push   0x0
c000d99a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d99e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a2:	e8 58 88 01 00       	call   c00261ff <__ltdf2>
c000d9a7:	83 c4 10             	add    esp,0x10
c000d9aa:	85 c0                	test   eax,eax
c000d9ac:	79 20                	jns    c000d9ce <sinc_mono_vari_process+0x69b>
c000d9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9be:	e8 f0 78 01 00       	call   c00252b3 <__adddf3>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9ce:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9d1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9d4:	83 ec 10             	sub    esp,0x10
c000d9d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e7:	e8 18 7f 01 00       	call   c0025904 <__subdf3>
c000d9ec:	83 c4 18             	add    esp,0x18
c000d9ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9f7:	52                   	push   edx
c000d9f8:	50                   	push   eax
c000d9f9:	e8 b2 89 01 00       	call   c00263b0 <lrint>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	0f af f8             	imul   edi,eax
c000da04:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da07:	99                   	cdq    
c000da08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da0e:	e9 d2 fb ff ff       	jmp    c000d5e5 <sinc_mono_vari_process+0x2b2>
c000da13:	83 c4 4c             	add    esp,0x4c
c000da16:	89 d0                	mov    eax,edx
c000da18:	5b                   	pop    ebx
c000da19:	5e                   	pop    esi
c000da1a:	5f                   	pop    edi
c000da1b:	5d                   	pop    ebp
c000da1c:	c3                   	ret    

c000da1d <sinc_get_name>:
c000da1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da21:	31 c0                	xor    eax,eax
c000da23:	83 fa 02             	cmp    edx,0x2
c000da26:	77 07                	ja     c000da2f <sinc_get_name+0x12>
c000da28:	8b 04 95 44 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd84bc]
c000da2f:	c3                   	ret    

c000da30 <sinc_get_description>:
c000da30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da34:	31 c0                	xor    eax,eax
c000da36:	83 fa 02             	cmp    edx,0x2
c000da39:	77 07                	ja     c000da42 <sinc_get_description+0x12>
c000da3b:	8b 04 95 38 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd84c8]
c000da42:	c3                   	ret    

c000da43 <sinc_set_converter>:
c000da43:	53                   	push   ebx
c000da44:	81 ec 58 08 00 00    	sub    esp,0x858
c000da4a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da51:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da54:	85 c0                	test   eax,eax
c000da56:	74 13                	je     c000da6b <sinc_set_converter+0x28>
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	50                   	push   eax
c000da5c:	e8 7f 1a 00 00       	call   c000f4e0 <free>
c000da61:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da68:	83 c4 10             	add    esp,0x10
c000da6b:	50                   	push   eax
c000da6c:	68 44 08 00 00       	push   0x844
c000da71:	6a 00                	push   0x0
c000da73:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da77:	50                   	push   eax
c000da78:	e8 0e 2c ff ff       	call   c000068b <memset>
c000da7d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	b8 0b 00 00 00       	mov    eax,0xb
c000da88:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da8e:	7f 6e                	jg     c000dafe <sinc_set_converter+0xbb>
c000da90:	83 fa 01             	cmp    edx,0x1
c000da93:	75 10                	jne    c000daa5 <sinc_set_converter+0x62>
c000da95:	c7 43 24 33 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d333
c000da9c:	c7 43 20 33 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d333
c000daa3:	eb 4d                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daa5:	83 fa 02             	cmp    edx,0x2
c000daa8:	75 10                	jne    c000daba <sinc_set_converter+0x77>
c000daaa:	c7 43 24 6e cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc6e
c000dab1:	c7 43 20 6e cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc6e
c000dab8:	eb 38                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daba:	83 fa 04             	cmp    edx,0x4
c000dabd:	75 10                	jne    c000dacf <sinc_set_converter+0x8c>
c000dabf:	c7 43 24 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5a9
c000dac6:	c7 43 20 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5a9
c000dacd:	eb 23                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dacf:	83 fa 06             	cmp    edx,0x6
c000dad2:	75 10                	jne    c000dae4 <sinc_set_converter+0xa1>
c000dad4:	c7 43 24 e4 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bee4
c000dadb:	c7 43 20 e4 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bee4
c000dae2:	eb 0e                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dae4:	c7 43 24 20 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b820
c000daeb:	c7 43 20 20 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b820
c000daf2:	c7 43 28 d3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aad3
c000daf9:	b8 0a 00 00 00       	mov    eax,0xa
c000dafe:	81 c4 58 08 00 00    	add    esp,0x858
c000db04:	5b                   	pop    ebx
c000db05:	c3                   	ret    

c000db06 <zoh_vari_process>:
c000db06:	55                   	push   ebp
c000db07:	31 d2                	xor    edx,edx
c000db09:	57                   	push   edi
c000db0a:	56                   	push   esi
c000db0b:	53                   	push   ebx
c000db0c:	83 ec 3c             	sub    esp,0x3c
c000db0f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db13:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db17:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db1b:	0f 8e 80 06 00 00    	jle    c000e1a1 <zoh_vari_process+0x69b>
c000db21:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db24:	ba 05 00 00 00       	mov    edx,0x5
c000db29:	85 db                	test   ebx,ebx
c000db2b:	0f 84 70 06 00 00    	je     c000e1a1 <zoh_vari_process+0x69b>
c000db31:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db34:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db38:	74 19                	je     c000db53 <zoh_vari_process+0x4d>
c000db3a:	31 d2                	xor    edx,edx
c000db3c:	39 c2                	cmp    edx,eax
c000db3e:	7d 0c                	jge    c000db4c <zoh_vari_process+0x46>
c000db40:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db42:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db45:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db49:	42                   	inc    edx
c000db4a:	eb f0                	jmp    c000db3c <zoh_vari_process+0x36>
c000db4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db53:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db56:	0f af d0             	imul   edx,eax
c000db59:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db5c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db67:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db71:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db74:	8b 07                	mov    eax,DWORD PTR [edi]
c000db76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db7e:	68 00 00 70 3f       	push   0x3f700000
c000db83:	6a 00                	push   0x0
c000db85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db8d:	e8 6d 86 01 00       	call   c00261ff <__ltdf2>
c000db92:	83 c4 10             	add    esp,0x10
c000db95:	ba 16 00 00 00       	mov    edx,0x16
c000db9a:	85 c0                	test   eax,eax
c000db9c:	0f 88 ff 05 00 00    	js     c000e1a1 <zoh_vari_process+0x69b>
c000dba2:	68 00 00 70 40       	push   0x40700000
c000dba7:	6a 00                	push   0x0
c000dba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb1:	e8 2b 86 01 00       	call   c00261e1 <__gtdf2>
c000dbb6:	83 c4 10             	add    esp,0x10
c000dbb9:	ba 16 00 00 00       	mov    edx,0x16
c000dbbe:	85 c0                	test   eax,eax
c000dbc0:	0f 8f db 05 00 00    	jg     c000e1a1 <zoh_vari_process+0x69b>
c000dbc6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbc9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbd4:	68 00 00 f0 3f       	push   0x3ff00000
c000dbd9:	6a 00                	push   0x0
c000dbdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe3:	e8 17 86 01 00       	call   c00261ff <__ltdf2>
c000dbe8:	83 c4 10             	add    esp,0x10
c000dbeb:	85 c0                	test   eax,eax
c000dbed:	0f 89 da 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dbf3:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbf6:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbf9:	0f 8d ce 01 00 00    	jge    c000ddcd <zoh_vari_process+0x2c7>
c000dbff:	83 ec 0c             	sub    esp,0xc
c000dc02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc05:	e8 89 83 01 00       	call   c0025f93 <__floatsidf>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc10:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc24:	e8 07 7d 01 00       	call   c0025930 <__muldf3>
c000dc29:	59                   	pop    ecx
c000dc2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc35:	e8 59 83 01 00       	call   c0025f93 <__floatsidf>
c000dc3a:	83 c4 10             	add    esp,0x10
c000dc3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc45:	52                   	push   edx
c000dc46:	50                   	push   eax
c000dc47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4f:	e8 5f 76 01 00       	call   c00252b3 <__adddf3>
c000dc54:	59                   	pop    ecx
c000dc55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc59:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc5d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc60:	e8 2e 83 01 00       	call   c0025f93 <__floatsidf>
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc70:	52                   	push   edx
c000dc71:	50                   	push   eax
c000dc72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc7a:	e8 7e 85 01 00       	call   c00261fd <__gedf2>
c000dc7f:	83 c4 10             	add    esp,0x10
c000dc82:	85 c0                	test   eax,eax
c000dc84:	0f 89 43 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dc8a:	85 ed                	test   ebp,ebp
c000dc8c:	0f 8e ec 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dc92:	83 ec 10             	sub    esp,0x10
c000dc95:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc98:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc9b:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc9e:	ff 37                	push   DWORD PTR [edi]
c000dca0:	e8 5f 7c 01 00       	call   c0025904 <__subdf3>
c000dca5:	83 c4 18             	add    esp,0x18
c000dca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcb0:	52                   	push   edx
c000dcb1:	50                   	push   eax
c000dcb2:	e8 d9 86 01 00       	call   c0026390 <fabs>
c000dcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcc7:	68 23 42 92 0c       	push   0xc924223
c000dccc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd4:	e8 08 85 01 00       	call   c00261e1 <__gtdf2>
c000dcd9:	83 c4 10             	add    esp,0x10
c000dcdc:	85 c0                	test   eax,eax
c000dcde:	0f 8e 9a 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dce4:	8b 07                	mov    eax,DWORD PTR [edi]
c000dce6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dce9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dcf0:	52                   	push   edx
c000dcf1:	50                   	push   eax
c000dcf2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcf5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcf8:	e8 07 7c 01 00       	call   c0025904 <__subdf3>
c000dcfd:	59                   	pop    ecx
c000dcfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd09:	e8 85 82 01 00       	call   c0025f93 <__floatsidf>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd19:	52                   	push   edx
c000dd1a:	50                   	push   eax
c000dd1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd23:	e8 08 7c 01 00       	call   c0025930 <__muldf3>
c000dd28:	5d                   	pop    ebp
c000dd29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd2d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd34:	e8 5a 82 01 00       	call   c0025f93 <__floatsidf>
c000dd39:	83 c4 10             	add    esp,0x10
c000dd3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd44:	52                   	push   edx
c000dd45:	50                   	push   eax
c000dd46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4e:	e8 c1 7e 01 00       	call   c0025c14 <__divdf3>
c000dd53:	83 c4 10             	add    esp,0x10
c000dd56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd5e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd62:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6e:	e8 40 75 01 00       	call   c00252b3 <__adddf3>
c000dd73:	83 c4 10             	add    esp,0x10
c000dd76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd7e:	31 c0                	xor    eax,eax
c000dd80:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd83:	7e 13                	jle    c000dd98 <zoh_vari_process+0x292>
c000dd85:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd89:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd8c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd8f:	40                   	inc    eax
c000dd90:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd93:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd96:	eb e8                	jmp    c000dd80 <zoh_vari_process+0x27a>
c000dd98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dda0:	68 00 00 f0 3f       	push   0x3ff00000
c000dda5:	6a 00                	push   0x0
c000dda7:	e8 68 7e 01 00       	call   c0025c14 <__divdf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddb6:	52                   	push   edx
c000ddb7:	50                   	push   eax
c000ddb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc0:	e8 ee 74 01 00       	call   c00252b3 <__adddf3>
c000ddc5:	83 c4 10             	add    esp,0x10
c000ddc8:	e9 ff fd ff ff       	jmp    c000dbcc <zoh_vari_process+0xc6>
c000ddcd:	55                   	push   ebp
c000ddce:	55                   	push   ebp
c000ddcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd7:	e8 d4 85 01 00       	call   c00263b0 <lrint>
c000dddc:	83 ec 0c             	sub    esp,0xc
c000dddf:	50                   	push   eax
c000dde0:	e8 ae 81 01 00       	call   c0025f93 <__floatsidf>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddf0:	52                   	push   edx
c000ddf1:	50                   	push   eax
c000ddf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddfa:	e8 05 7b 01 00       	call   c0025904 <__subdf3>
c000ddff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de07:	83 c4 20             	add    esp,0x20
c000de0a:	6a 00                	push   0x0
c000de0c:	6a 00                	push   0x0
c000de0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de16:	e8 e4 83 01 00       	call   c00261ff <__ltdf2>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	85 c0                	test   eax,eax
c000de20:	79 1e                	jns    c000de40 <zoh_vari_process+0x33a>
c000de22:	68 00 00 f0 3f       	push   0x3ff00000
c000de27:	6a 00                	push   0x0
c000de29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de31:	e8 7d 74 01 00       	call   c00252b3 <__adddf3>
c000de36:	83 c4 10             	add    esp,0x10
c000de39:	89 04 24             	mov    DWORD PTR [esp],eax
c000de3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de40:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de43:	83 ec 10             	sub    esp,0x10
c000de46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de56:	e8 a9 7a 01 00       	call   c0025904 <__subdf3>
c000de5b:	83 c4 18             	add    esp,0x18
c000de5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de66:	52                   	push   edx
c000de67:	50                   	push   eax
c000de68:	e8 43 85 01 00       	call   c00263b0 <lrint>
c000de6d:	83 c4 10             	add    esp,0x10
c000de70:	0f af e8             	imul   ebp,eax
c000de73:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de76:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de79:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de7d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de80:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de87:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de8a:	0f 8d 7a 02 00 00    	jge    c000e10a <zoh_vari_process+0x604>
c000de90:	83 ec 0c             	sub    esp,0xc
c000de93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de96:	e8 f8 80 01 00       	call   c0025f93 <__floatsidf>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dea2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deaa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb6:	e8 75 7a 01 00       	call   c0025930 <__muldf3>
c000debb:	59                   	pop    ecx
c000debc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dec0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec8:	e8 c6 80 01 00       	call   c0025f93 <__floatsidf>
c000decd:	83 c4 10             	add    esp,0x10
c000ded0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ded4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ded8:	52                   	push   edx
c000ded9:	50                   	push   eax
c000deda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dede:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dee2:	e8 cc 73 01 00       	call   c00252b3 <__adddf3>
c000dee7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000deea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000deee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000def2:	e8 9c 80 01 00       	call   c0025f93 <__floatsidf>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000defe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df02:	52                   	push   edx
c000df03:	50                   	push   eax
c000df04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df0c:	e8 f0 82 01 00       	call   c0026201 <__ledf2>
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	85 c0                	test   eax,eax
c000df16:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df1a:	0f 8f ea 01 00 00    	jg     c000e10a <zoh_vari_process+0x604>
c000df20:	85 c9                	test   ecx,ecx
c000df22:	0f 8e ed 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df28:	83 ec 10             	sub    esp,0x10
c000df2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df31:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df34:	ff 37                	push   DWORD PTR [edi]
c000df36:	e8 c9 79 01 00       	call   c0025904 <__subdf3>
c000df3b:	83 c4 18             	add    esp,0x18
c000df3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df46:	52                   	push   edx
c000df47:	50                   	push   eax
c000df48:	e8 43 84 01 00       	call   c0026390 <fabs>
c000df4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df51:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df5d:	68 23 42 92 0c       	push   0xc924223
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6a:	e8 72 82 01 00       	call   c00261e1 <__gtdf2>
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	85 c0                	test   eax,eax
c000df74:	0f 8e 9b 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df7a:	8b 07                	mov    eax,DWORD PTR [edi]
c000df7c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df87:	52                   	push   edx
c000df88:	50                   	push   eax
c000df89:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df8c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df8f:	e8 70 79 01 00       	call   c0025904 <__subdf3>
c000df94:	5d                   	pop    ebp
c000df95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df99:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df9d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfa0:	e8 ee 7f 01 00       	call   c0025f93 <__floatsidf>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfb0:	52                   	push   edx
c000dfb1:	50                   	push   eax
c000dfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 71 79 01 00       	call   c0025930 <__muldf3>
c000dfbf:	59                   	pop    ecx
c000dfc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfc4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfc8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfcb:	e8 c3 7f 01 00       	call   c0025f93 <__floatsidf>
c000dfd0:	83 c4 10             	add    esp,0x10
c000dfd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfdb:	52                   	push   edx
c000dfdc:	50                   	push   eax
c000dfdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe5:	e8 2a 7c 01 00       	call   c0025c14 <__divdf3>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dff5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	e8 a9 72 01 00       	call   c00252b3 <__adddf3>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e011:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e015:	31 d2                	xor    edx,edx
c000e017:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e01a:	39 d0                	cmp    eax,edx
c000e01c:	7e 1d                	jle    c000e03b <zoh_vari_process+0x535>
c000e01e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e021:	29 c1                	sub    ecx,eax
c000e023:	89 c8                	mov    eax,ecx
c000e025:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e027:	01 d0                	add    eax,edx
c000e029:	42                   	inc    edx
c000e02a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e02d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e030:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e033:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e036:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e039:	eb dc                	jmp    c000e017 <zoh_vari_process+0x511>
c000e03b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	68 00 00 f0 3f       	push   0x3ff00000
c000e048:	6a 00                	push   0x0
c000e04a:	e8 c5 7b 01 00       	call   c0025c14 <__divdf3>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e05a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e05e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06a:	e8 44 72 01 00       	call   c00252b3 <__adddf3>
c000e06f:	5d                   	pop    ebp
c000e070:	59                   	pop    ecx
c000e071:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e075:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e07d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e081:	e8 2a 83 01 00       	call   c00263b0 <lrint>
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	50                   	push   eax
c000e08a:	e8 04 7f 01 00       	call   c0025f93 <__floatsidf>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e09a:	52                   	push   edx
c000e09b:	50                   	push   eax
c000e09c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a4:	e8 5b 78 01 00       	call   c0025904 <__subdf3>
c000e0a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0b1:	83 c4 20             	add    esp,0x20
c000e0b4:	6a 00                	push   0x0
c000e0b6:	6a 00                	push   0x0
c000e0b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c0:	e8 3a 81 01 00       	call   c00261ff <__ltdf2>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	85 c0                	test   eax,eax
c000e0ca:	79 1e                	jns    c000e0ea <zoh_vari_process+0x5e4>
c000e0cc:	68 00 00 f0 3f       	push   0x3ff00000
c000e0d1:	6a 00                	push   0x0
c000e0d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0db:	e8 d3 71 01 00       	call   c00252b3 <__adddf3>
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0ea:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0ed:	83 ec 10             	sub    esp,0x10
c000e0f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e100:	e8 ff 77 01 00       	call   c0025904 <__subdf3>
c000e105:	e9 51 fd ff ff       	jmp    c000de5b <zoh_vari_process+0x355>
c000e10a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e10e:	7d 3a                	jge    c000e14a <zoh_vari_process+0x644>
c000e110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e114:	83 ec 0c             	sub    esp,0xc
c000e117:	29 e8                	sub    eax,ebp
c000e119:	99                   	cdq    
c000e11a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e11d:	50                   	push   eax
c000e11e:	e8 70 7e 01 00       	call   c0025f93 <__floatsidf>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e12e:	52                   	push   edx
c000e12f:	50                   	push   eax
c000e130:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e134:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e138:	e8 76 71 01 00       	call   c00252b3 <__adddf3>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e143:	89 04 24             	mov    DWORD PTR [esp],eax
c000e146:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e14a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e14d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e151:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e154:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e157:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e15a:	85 c0                	test   eax,eax
c000e15c:	7f 25                	jg     c000e183 <zoh_vari_process+0x67d>
c000e15e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e166:	89 07                	mov    DWORD PTR [edi],eax
c000e168:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e16b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e16e:	99                   	cdq    
c000e16f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e172:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e175:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e178:	99                   	cdq    
c000e179:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e17c:	31 d2                	xor    edx,edx
c000e17e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e181:	eb 1e                	jmp    c000e1a1 <zoh_vari_process+0x69b>
c000e183:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e186:	31 d2                	xor    edx,edx
c000e188:	29 c8                	sub    eax,ecx
c000e18a:	c1 e0 02             	shl    eax,0x2
c000e18d:	39 d1                	cmp    ecx,edx
c000e18f:	7e cd                	jle    c000e15e <zoh_vari_process+0x658>
c000e191:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e193:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e197:	83 c0 04             	add    eax,0x4
c000e19a:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e19e:	42                   	inc    edx
c000e19f:	eb ec                	jmp    c000e18d <zoh_vari_process+0x687>
c000e1a1:	83 c4 3c             	add    esp,0x3c
c000e1a4:	89 d0                	mov    eax,edx
c000e1a6:	5b                   	pop    ebx
c000e1a7:	5e                   	pop    esi
c000e1a8:	5f                   	pop    edi
c000e1a9:	5d                   	pop    ebp
c000e1aa:	c3                   	ret    

c000e1ab <zoh_reset>:
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1b5:	85 c0                	test   eax,eax
c000e1b7:	74 20                	je     c000e1d9 <zoh_reset+0x2e>
c000e1b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1bc:	83 c0 1c             	add    eax,0x1c
c000e1bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1c9:	c1 e2 02             	shl    edx,0x2
c000e1cc:	51                   	push   ecx
c000e1cd:	52                   	push   edx
c000e1ce:	6a 00                	push   0x0
c000e1d0:	50                   	push   eax
c000e1d1:	e8 b5 24 ff ff       	call   c000068b <memset>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	83 c4 0c             	add    esp,0xc
c000e1dc:	c3                   	ret    

c000e1dd <zoh_get_name>:
c000e1dd:	31 c0                	xor    eax,eax
c000e1df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e4:	75 05                	jne    c000e1eb <zoh_get_name+0xe>
c000e1e6:	b8 5e 7c 02 c0       	mov    eax,0xc0027c5e
c000e1eb:	c3                   	ret    

c000e1ec <zoh_get_description>:
c000e1ec:	31 c0                	xor    eax,eax
c000e1ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1f3:	75 05                	jne    c000e1fa <zoh_get_description+0xe>
c000e1f5:	b8 6f 7c 02 c0       	mov    eax,0xc0027c6f
c000e1fa:	c3                   	ret    

c000e1fb <zoh_set_converter>:
c000e1fb:	53                   	push   ebx
c000e1fc:	b8 0a 00 00 00       	mov    eax,0xa
c000e201:	83 ec 08             	sub    esp,0x8
c000e204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e208:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e20d:	75 6e                	jne    c000e27d <zoh_set_converter+0x82>
c000e20f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e212:	85 c0                	test   eax,eax
c000e214:	74 13                	je     c000e229 <zoh_set_converter+0x2e>
c000e216:	83 ec 0c             	sub    esp,0xc
c000e219:	50                   	push   eax
c000e21a:	e8 c1 12 00 00       	call   c000f4e0 <free>
c000e21f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	50                   	push   eax
c000e22a:	50                   	push   eax
c000e22b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e22e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e235:	50                   	push   eax
c000e236:	6a 01                	push   0x1
c000e238:	e8 c3 12 00 00       	call   c000f500 <calloc>
c000e23d:	83 c4 10             	add    esp,0x10
c000e240:	89 c2                	mov    edx,eax
c000e242:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e245:	85 d2                	test   edx,edx
c000e247:	b8 01 00 00 00       	mov    eax,0x1
c000e24c:	74 2f                	je     c000e27d <zoh_set_converter+0x82>
c000e24e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e257:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e25d:	c7 43 24 06 db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db06
c000e264:	c7 43 20 06 db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db06
c000e26b:	c7 43 28 ab e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1ab
c000e272:	53                   	push   ebx
c000e273:	e8 33 ff ff ff       	call   c000e1ab <zoh_reset>
c000e278:	83 c4 10             	add    esp,0x10
c000e27b:	31 c0                	xor    eax,eax
c000e27d:	83 c4 08             	add    esp,0x8
c000e280:	5b                   	pop    ebx
c000e281:	c3                   	ret    

c000e282 <CPU::current()>:
c000e282:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c000e287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e28d:	90                   	nop
c000e28e:	c3                   	ret    

c000e28f <operator new(unsigned long)>:
c000e28f:	83 ec 0c             	sub    esp,0xc
c000e292:	83 ec 0c             	sub    esp,0xc
c000e295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e299:	e8 32 12 00 00       	call   c000f4d0 <malloc>
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	83 c4 0c             	add    esp,0xc
c000e2a4:	c3                   	ret    
c000e2a5:	90                   	nop

c000e2a6 <Computer::close(int, int, void*)>:
c000e2a6:	57                   	push   edi
c000e2a7:	56                   	push   esi
c000e2a8:	53                   	push   ebx
c000e2a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2b5:	83 ec 0c             	sub    esp,0xc
c000e2b8:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2be:	e8 3f 59 00 00       	call   c0013c02 <Device::closeAll()>
c000e2c3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2c9:	83 c4 10             	add    esp,0x10
c000e2cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2ce:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2d2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2da:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e2:	5b                   	pop    ebx
c000e2e3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2e6:	5e                   	pop    esi
c000e2e7:	5f                   	pop    edi
c000e2e8:	ff e0                	jmp    eax

c000e2ea <Computer::Computer()>:
c000e2ea:	83 ec 0c             	sub    esp,0xc
c000e2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f1:	83 ec 08             	sub    esp,0x8
c000e2f4:	68 a6 7c 02 c0       	push   0xc0027ca6
c000e2f9:	50                   	push   eax
c000e2fa:	e8 7d 59 00 00       	call   c0013c7c <Device::Device(char const*)>
c000e2ff:	83 c4 10             	add    esp,0x10
c000e302:	ba 70 7e 02 c0       	mov    edx,0xc0027e70
c000e307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30b:	89 10                	mov    DWORD PTR [eax],edx
c000e30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e311:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e333:	83 ca 04             	or     edx,0x4
c000e336:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e340:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e346:	0f b6 d0             	movzx  edx,al
c000e349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e358:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e35e:	0f b6 d0             	movzx  edx,al
c000e361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e365:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e374:	8d 50 01             	lea    edx,[eax+0x1]
c000e377:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e37b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e381:	0f b6 d0             	movzx  edx,al
c000e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e388:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e38c:	83 e1 3f             	and    ecx,0x3f
c000e38f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e397:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e39d:	0f b6 d0             	movzx  edx,al
c000e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3b5:	0f b6 d0             	movzx  edx,al
c000e3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3bc:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3cb:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3d2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e3d8:	0f b6 d0             	movzx  edx,al
c000e3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3df:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e3e3:	83 e1 3f             	and    ecx,0x3f
c000e3e6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3f4:	0f b6 d0             	movzx  edx,al
c000e3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e406:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e40c:	0f b6 d0             	movzx  edx,al
c000e40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e413:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e422:	8d 50 01             	lea    edx,[eax+0x1]
c000e425:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e429:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e42f:	0f b6 d0             	movzx  edx,al
c000e432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e436:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e43a:	83 e1 3f             	and    ecx,0x3f
c000e43d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e441:	90                   	nop
c000e442:	83 c4 0c             	add    esp,0xc
c000e445:	c3                   	ret    

c000e446 <Computer::setBootMessage(char const*)>:
c000e446:	c3                   	ret    
c000e447:	90                   	nop

c000e448 <Computer::start()>:
c000e448:	56                   	push   esi
c000e449:	53                   	push   ebx
c000e44a:	83 ec 10             	sub    esp,0x10
c000e44d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e451:	fb                   	sti    
c000e452:	68 3b 07 00 00       	push   0x73b
c000e457:	e8 74 10 00 00       	call   c000f4d0 <malloc>
c000e45c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e463:	89 c6                	mov    esi,eax
c000e465:	ff 35 d4 cf 02 c0    	push   DWORD PTR ds:0xc002cfd4
c000e46b:	68 af 7c 02 c0       	push   0xc0027caf
c000e470:	6a 01                	push   0x1
c000e472:	50                   	push   eax
c000e473:	e8 fe db 00 00       	call   c001c076 <Process::Process(bool, char const*, Process*, char**)>
c000e478:	83 c4 20             	add    esp,0x20
c000e47b:	68 ff 00 00 00       	push   0xff
c000e480:	6a 00                	push   0x0
c000e482:	68 65 ee 00 c0       	push   0xc000ee65
c000e487:	56                   	push   esi
c000e488:	e8 cb de 00 00       	call   c001c358 <Process::createThread(void (*)(void*), void*, int)>
c000e48d:	6a 7a                	push   0x7a
c000e48f:	6a 00                	push   0x0
c000e491:	68 91 cb 01 c0       	push   0xc001cb91
c000e496:	ff 35 d4 cf 02 c0    	push   DWORD PTR ds:0xc002cfd4
c000e49c:	e8 b7 de 00 00       	call   c001c358 <Process::createThread(void (*)(void*), void*, int)>
c000e4a1:	83 c4 20             	add    esp,0x20
c000e4a4:	a3 88 cf 02 c0       	mov    ds:0xc002cf88,eax
c000e4a9:	e8 63 ea 00 00       	call   c001cf11 <Vm::initialise8086()>
c000e4ae:	c6 05 cd ba 02 c0 01 	mov    BYTE PTR ds:0xc002bacd,0x1
c000e4b5:	e8 3e 45 00 00       	call   c00129f8 <initVFS()>
c000e4ba:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e4c0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4c2:	6a 00                	push   0x0
c000e4c4:	6a 00                	push   0x0
c000e4c6:	6a 00                	push   0x0
c000e4c8:	50                   	push   eax
c000e4c9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4cc:	e8 6a c5 00 00       	call   c001aa3b <setupSystemCalls()>
c000e4d1:	e8 34 50 00 00       	call   c001350a <loadClockSettings()>
c000e4d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4d9:	e8 f8 56 00 00       	call   c0013bd6 <Device::loadDriversForAll()>
c000e4de:	58                   	pop    eax
c000e4df:	8b 1d c8 ba 02 c0    	mov    ebx,DWORD PTR ds:0xc002bac8
c000e4e5:	5a                   	pop    edx
c000e4e6:	6a 01                	push   0x1
c000e4e8:	68 bc 7c 02 c0       	push   0xc0027cbc
c000e4ed:	e8 f9 d6 00 00       	call   c001bbeb <Thr::loadDLL(char const*, bool)>
c000e4f2:	59                   	pop    ecx
c000e4f3:	5e                   	pop    esi
c000e4f4:	53                   	push   ebx
c000e4f5:	50                   	push   eax
c000e4f6:	e8 ff d8 00 00       	call   c001bdfa <Thr::executeDLL(unsigned long, void*)>
c000e4fb:	c7 04 24 28 8f 02 c0 	mov    DWORD PTR [esp],0xc0028f28
c000e502:	e8 96 41 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e507:	83 c4 10             	add    esp,0x10
c000e50a:	83 ec 0c             	sub    esp,0xc
c000e50d:	6a 02                	push   0x2
c000e50f:	e8 a8 e1 00 00       	call   c001c6bc <blockTask(TaskState)>
c000e514:	83 c4 10             	add    esp,0x10
c000e517:	eb f1                	jmp    c000e50a <Computer::start()+0xc2>

c000e519 <firstTask()>:
c000e519:	83 ec 18             	sub    esp,0x18
c000e51c:	ff 35 c8 ba 02 c0    	push   DWORD PTR ds:0xc002bac8
c000e522:	e8 21 ff ff ff       	call   c000e448 <Computer::start()>
c000e527:	90                   	nop

c000e528 <Computer::detectFeatures()>:
c000e528:	55                   	push   ebp
c000e529:	57                   	push   edi
c000e52a:	56                   	push   esi
c000e52b:	53                   	push   ebx
c000e52c:	83 ec 1c             	sub    esp,0x1c
c000e52f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e533:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e53d:	e8 57 1d ff ff       	call   c0000299 <detectCPUID>
c000e542:	85 c0                	test   eax,eax
c000e544:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e54a:	0f 95 c2             	setne  dl
c000e54d:	83 e0 fd             	and    eax,0xfffffffd
c000e550:	d1 e2                	shl    edx,1
c000e552:	09 d0                	or     eax,edx
c000e554:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e55a:	a8 02                	test   al,0x2
c000e55c:	75 46                	jne    c000e5a4 <Computer::detectFeatures()+0x7c>
c000e55e:	f6 05 e1 ba 02 c0 04 	test   BYTE PTR ds:0xc002bae1,0x4
c000e565:	74 07                	je     c000e56e <Computer::detectFeatures()+0x46>
c000e567:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e56e:	e8 83 5e 01 00       	call   c00243f6 <x87Detect>
c000e573:	83 e0 01             	and    eax,0x1
c000e576:	c1 e0 04             	shl    eax,0x4
c000e579:	88 c2                	mov    dl,al
c000e57b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e581:	83 e0 ef             	and    eax,0xffffffef
c000e584:	09 d0                	or     eax,edx
c000e586:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e58c:	a8 10                	test   al,0x10
c000e58e:	0f 85 2a 01 00 00    	jne    c000e6be <Computer::detectFeatures()+0x196>
c000e594:	84 c0                	test   al,al
c000e596:	0f 88 45 01 00 00    	js     c000e6e1 <Computer::detectFeatures()+0x1b9>
c000e59c:	83 c4 1c             	add    esp,0x1c
c000e59f:	5b                   	pop    ebx
c000e5a0:	5e                   	pop    esi
c000e5a1:	5f                   	pop    edi
c000e5a2:	5d                   	pop    ebp
c000e5a3:	c3                   	ret    
c000e5a4:	83 ec 0c             	sub    esp,0xc
c000e5a7:	6a 20                	push   0x20
c000e5a9:	e8 90 9a 00 00       	call   c001803e <CPU::cpuidCheckEDX(unsigned int)>
c000e5ae:	83 e0 01             	and    eax,0x1
c000e5b1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5b8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5be:	83 e0 f7             	and    eax,0xfffffff7
c000e5c1:	09 d0                	or     eax,edx
c000e5c3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5c9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5d0:	e8 69 9a 00 00       	call   c001803e <CPU::cpuidCheckEDX(unsigned int)>
c000e5d5:	83 e0 01             	and    eax,0x1
c000e5d8:	88 c2                	mov    dl,al
c000e5da:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5e0:	83 e0 fe             	and    eax,0xfffffffe
c000e5e3:	09 d0                	or     eax,edx
c000e5e5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5eb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5f2:	e8 47 9a 00 00       	call   c001803e <CPU::cpuidCheckEDX(unsigned int)>
c000e5f7:	c1 e0 07             	shl    eax,0x7
c000e5fa:	88 c2                	mov    dl,al
c000e5fc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e602:	83 e0 7f             	and    eax,0x7f
c000e605:	09 d0                	or     eax,edx
c000e607:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e60d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e614:	e8 25 9a 00 00       	call   c001803e <CPU::cpuidCheckEDX(unsigned int)>
c000e619:	83 c4 10             	add    esp,0x10
c000e61c:	83 e0 01             	and    eax,0x1
c000e61f:	c1 e0 05             	shl    eax,0x5
c000e622:	88 c2                	mov    dl,al
c000e624:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e62a:	83 e0 df             	and    eax,0xffffffdf
c000e62d:	09 d0                	or     eax,edx
c000e62f:	f7 05 e0 ba 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002bae0,0x401
c000e639:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e63f:	0f 84 c2 00 00 00    	je     c000e707 <Computer::detectFeatures()+0x1df>
c000e645:	83 e0 fe             	and    eax,0xfffffffe
c000e648:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e64e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e654:	88 c2                	mov    dl,al
c000e656:	83 e2 09             	and    edx,0x9
c000e659:	fe ca                	dec    dl
c000e65b:	75 09                	jne    c000e666 <Computer::detectFeatures()+0x13e>
c000e65d:	83 e0 fe             	and    eax,0xfffffffe
c000e660:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e666:	83 ec 0c             	sub    esp,0xc
c000e669:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e66d:	50                   	push   eax
c000e66e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e672:	55                   	push   ebp
c000e673:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e677:	57                   	push   edi
c000e678:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e67c:	56                   	push   esi
c000e67d:	68 00 00 00 80       	push   0x80000000
c000e682:	e8 33 99 00 00       	call   c0017fba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e687:	83 c4 20             	add    esp,0x20
c000e68a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e691:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e695:	0f 86 c3 fe ff ff    	jbe    c000e55e <Computer::detectFeatures()+0x36>
c000e69b:	83 ec 0c             	sub    esp,0xc
c000e69e:	50                   	push   eax
c000e69f:	55                   	push   ebp
c000e6a0:	57                   	push   edi
c000e6a1:	56                   	push   esi
c000e6a2:	68 01 00 00 80       	push   0x80000001
c000e6a7:	e8 0e 99 00 00       	call   c0017fba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e6ac:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6b6:	83 c4 20             	add    esp,0x20
c000e6b9:	e9 a0 fe ff ff       	jmp    c000e55e <Computer::detectFeatures()+0x36>
c000e6be:	e8 ed 5c 01 00       	call   c00243b0 <absolutelyNoChanceInHell>
c000e6c3:	88 c2                	mov    dl,al
c000e6c5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6cb:	c1 e2 07             	shl    edx,0x7
c000e6ce:	83 e0 7f             	and    eax,0x7f
c000e6d1:	09 d0                	or     eax,edx
c000e6d3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6d9:	84 c0                	test   al,al
c000e6db:	0f 89 bb fe ff ff    	jns    c000e59c <Computer::detectFeatures()+0x74>
c000e6e1:	e8 aa 5c 01 00       	call   c0024390 <avxDetect>
c000e6e6:	83 e0 01             	and    eax,0x1
c000e6e9:	c1 e0 05             	shl    eax,0x5
c000e6ec:	88 c2                	mov    dl,al
c000e6ee:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6f4:	83 e0 df             	and    eax,0xffffffdf
c000e6f7:	09 d0                	or     eax,edx
c000e6f9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e6ff:	83 c4 1c             	add    esp,0x1c
c000e702:	5b                   	pop    ebx
c000e703:	5e                   	pop    esi
c000e704:	5f                   	pop    edi
c000e705:	5d                   	pop    ebp
c000e706:	c3                   	ret    
c000e707:	83 ec 0c             	sub    esp,0xc
c000e70a:	68 00 02 00 00       	push   0x200
c000e70f:	e8 2a 99 00 00       	call   c001803e <CPU::cpuidCheckEDX(unsigned int)>
c000e714:	83 c4 10             	add    esp,0x10
c000e717:	83 e0 01             	and    eax,0x1
c000e71a:	88 c2                	mov    dl,al
c000e71c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e722:	83 e0 fe             	and    eax,0xfffffffe
c000e725:	09 d0                	or     eax,edx
c000e727:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e72d:	e9 1c ff ff ff       	jmp    c000e64e <Computer::detectFeatures()+0x126>

c000e732 <Computer::displayFeatures()>:
c000e732:	53                   	push   ebx
c000e733:	83 ec 14             	sub    esp,0x14
c000e736:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e73a:	68 df 7c 02 c0       	push   0xc0027cdf
c000e73f:	e8 59 3f 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e744:	83 c4 10             	add    esp,0x10
c000e747:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e74e:	0f 85 73 02 00 00    	jne    c000e9c7 <Computer::displayFeatures()+0x295>
c000e754:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c000e759:	83 ec 08             	sub    esp,0x8
c000e75c:	50                   	push   eax
c000e75d:	68 f2 7c 02 c0       	push   0xc0027cf2
c000e762:	e8 36 3f 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e767:	83 c4 10             	add    esp,0x10
c000e76a:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e771:	0f 85 8c 02 00 00    	jne    c000ea03 <Computer::displayFeatures()+0x2d1>
c000e777:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c000e77c:	83 ec 08             	sub    esp,0x8
c000e77f:	50                   	push   eax
c000e780:	68 03 7d 02 c0       	push   0xc0027d03
c000e785:	e8 13 3f 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e78a:	83 c4 10             	add    esp,0x10
c000e78d:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e794:	0f 85 5f 02 00 00    	jne    c000e9f9 <Computer::displayFeatures()+0x2c7>
c000e79a:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c000e79f:	83 ec 08             	sub    esp,0x8
c000e7a2:	50                   	push   eax
c000e7a3:	68 14 7d 02 c0       	push   0xc0027d14
c000e7a8:	e8 f0 3e 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e7ad:	83 c4 10             	add    esp,0x10
c000e7b0:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7b7:	0f 85 32 02 00 00    	jne    c000e9ef <Computer::displayFeatures()+0x2bd>
c000e7bd:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c000e7c2:	83 ec 08             	sub    esp,0x8
c000e7c5:	50                   	push   eax
c000e7c6:	68 25 7d 02 c0       	push   0xc0027d25
c000e7cb:	e8 cd 3e 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e7d0:	83 c4 10             	add    esp,0x10
c000e7d3:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7da:	0f 85 05 02 00 00    	jne    c000e9e5 <Computer::displayFeatures()+0x2b3>
c000e7e0:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c000e7e5:	83 ec 08             	sub    esp,0x8
c000e7e8:	50                   	push   eax
c000e7e9:	68 36 7d 02 c0       	push   0xc0027d36
c000e7ee:	e8 aa 3e 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e7f3:	83 c4 10             	add    esp,0x10
c000e7f6:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e7fd:	0f 85 d8 01 00 00    	jne    c000e9db <Computer::displayFeatures()+0x2a9>
c000e803:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c000e808:	83 ec 08             	sub    esp,0x8
c000e80b:	50                   	push   eax
c000e80c:	68 47 7d 02 c0       	push   0xc0027d47
c000e811:	e8 87 3e 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e816:	83 c4 10             	add    esp,0x10
c000e819:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e820:	0f 85 ab 01 00 00    	jne    c000e9d1 <Computer::displayFeatures()+0x29f>
c000e826:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c000e82b:	83 ec 08             	sub    esp,0x8
c000e82e:	50                   	push   eax
c000e82f:	68 58 7d 02 c0       	push   0xc0027d58
c000e834:	e8 64 3e 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e839:	83 c4 10             	add    esp,0x10
c000e83c:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e843:	0f 88 1b 02 00 00    	js     c000ea64 <Computer::displayFeatures()+0x332>
c000e849:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c000e84e:	83 ec 08             	sub    esp,0x8
c000e851:	50                   	push   eax
c000e852:	68 69 7d 02 c0       	push   0xc0027d69
c000e857:	e8 41 3e 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e85c:	83 c4 10             	add    esp,0x10
c000e85f:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e866:	0f 85 a1 01 00 00    	jne    c000ea0d <Computer::displayFeatures()+0x2db>
c000e86c:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c000e871:	83 ec 08             	sub    esp,0x8
c000e874:	50                   	push   eax
c000e875:	68 7a 7d 02 c0       	push   0xc0027d7a
c000e87a:	e8 1e 3e 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e87f:	83 c4 10             	add    esp,0x10
c000e882:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e889:	0f 85 cb 01 00 00    	jne    c000ea5a <Computer::displayFeatures()+0x328>
c000e88f:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c000e894:	83 ec 08             	sub    esp,0x8
c000e897:	50                   	push   eax
c000e898:	68 8b 7d 02 c0       	push   0xc0027d8b
c000e89d:	e8 fb 3d 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e8a2:	83 c4 10             	add    esp,0x10
c000e8a5:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e8ac:	0f 85 9e 01 00 00    	jne    c000ea50 <Computer::displayFeatures()+0x31e>
c000e8b2:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c000e8b7:	83 ec 08             	sub    esp,0x8
c000e8ba:	50                   	push   eax
c000e8bb:	68 9c 7d 02 c0       	push   0xc0027d9c
c000e8c0:	e8 d8 3d 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e8c5:	83 c4 10             	add    esp,0x10
c000e8c8:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8cf:	0f 85 71 01 00 00    	jne    c000ea46 <Computer::displayFeatures()+0x314>
c000e8d5:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c000e8da:	83 ec 08             	sub    esp,0x8
c000e8dd:	50                   	push   eax
c000e8de:	68 ad 7d 02 c0       	push   0xc0027dad
c000e8e3:	e8 b5 3d 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e8e8:	83 c4 10             	add    esp,0x10
c000e8eb:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8f2:	0f 85 44 01 00 00    	jne    c000ea3c <Computer::displayFeatures()+0x30a>
c000e8f8:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c000e8fd:	83 ec 08             	sub    esp,0x8
c000e900:	50                   	push   eax
c000e901:	68 be 7d 02 c0       	push   0xc0027dbe
c000e906:	e8 92 3d 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e90b:	83 c4 10             	add    esp,0x10
c000e90e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e915:	0f 85 17 01 00 00    	jne    c000ea32 <Computer::displayFeatures()+0x300>
c000e91b:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c000e920:	83 ec 08             	sub    esp,0x8
c000e923:	50                   	push   eax
c000e924:	68 cf 7d 02 c0       	push   0xc0027dcf
c000e929:	e8 6f 3d 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e92e:	83 c4 10             	add    esp,0x10
c000e931:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e938:	0f 85 ea 00 00 00    	jne    c000ea28 <Computer::displayFeatures()+0x2f6>
c000e93e:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c000e943:	83 ec 08             	sub    esp,0x8
c000e946:	50                   	push   eax
c000e947:	68 e0 7d 02 c0       	push   0xc0027de0
c000e94c:	e8 4c 3d 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e951:	83 c4 10             	add    esp,0x10
c000e954:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e95b:	0f 88 0d 01 00 00    	js     c000ea6e <Computer::displayFeatures()+0x33c>
c000e961:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c000e966:	83 ec 08             	sub    esp,0x8
c000e969:	50                   	push   eax
c000e96a:	68 f1 7d 02 c0       	push   0xc0027df1
c000e96f:	e8 29 3d 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e974:	83 c4 10             	add    esp,0x10
c000e977:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e97e:	0f 85 9a 00 00 00    	jne    c000ea1e <Computer::displayFeatures()+0x2ec>
c000e984:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c000e989:	83 ec 08             	sub    esp,0x8
c000e98c:	50                   	push   eax
c000e98d:	68 02 7e 02 c0       	push   0xc0027e02
c000e992:	e8 06 3d 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e997:	83 c4 10             	add    esp,0x10
c000e99a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e9a1:	75 74                	jne    c000ea17 <Computer::displayFeatures()+0x2e5>
c000e9a3:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c000e9a8:	83 ec 08             	sub    esp,0x8
c000e9ab:	50                   	push   eax
c000e9ac:	68 13 7e 02 c0       	push   0xc0027e13
c000e9b1:	e8 e7 3c 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000e9b6:	c7 44 24 20 42 95 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029542
c000e9be:	83 c4 18             	add    esp,0x18
c000e9c1:	5b                   	pop    ebx
c000e9c2:	e9 d6 3c 00 00       	jmp    c001269d <Dbg::kprintf(char const*, ...)>
c000e9c7:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c000e9cc:	e9 88 fd ff ff       	jmp    c000e759 <Computer::displayFeatures()+0x27>
c000e9d1:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c000e9d6:	e9 50 fe ff ff       	jmp    c000e82b <Computer::displayFeatures()+0xf9>
c000e9db:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c000e9e0:	e9 23 fe ff ff       	jmp    c000e808 <Computer::displayFeatures()+0xd6>
c000e9e5:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c000e9ea:	e9 f6 fd ff ff       	jmp    c000e7e5 <Computer::displayFeatures()+0xb3>
c000e9ef:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c000e9f4:	e9 c9 fd ff ff       	jmp    c000e7c2 <Computer::displayFeatures()+0x90>
c000e9f9:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c000e9fe:	e9 9c fd ff ff       	jmp    c000e79f <Computer::displayFeatures()+0x6d>
c000ea03:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c000ea08:	e9 6f fd ff ff       	jmp    c000e77c <Computer::displayFeatures()+0x4a>
c000ea0d:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c000ea12:	e9 5a fe ff ff       	jmp    c000e871 <Computer::displayFeatures()+0x13f>
c000ea17:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c000ea1c:	eb 8a                	jmp    c000e9a8 <Computer::displayFeatures()+0x276>
c000ea1e:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c000ea23:	e9 61 ff ff ff       	jmp    c000e989 <Computer::displayFeatures()+0x257>
c000ea28:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c000ea2d:	e9 11 ff ff ff       	jmp    c000e943 <Computer::displayFeatures()+0x211>
c000ea32:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c000ea37:	e9 e4 fe ff ff       	jmp    c000e920 <Computer::displayFeatures()+0x1ee>
c000ea3c:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c000ea41:	e9 b7 fe ff ff       	jmp    c000e8fd <Computer::displayFeatures()+0x1cb>
c000ea46:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c000ea4b:	e9 8a fe ff ff       	jmp    c000e8da <Computer::displayFeatures()+0x1a8>
c000ea50:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c000ea55:	e9 5d fe ff ff       	jmp    c000e8b7 <Computer::displayFeatures()+0x185>
c000ea5a:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c000ea5f:	e9 30 fe ff ff       	jmp    c000e894 <Computer::displayFeatures()+0x162>
c000ea64:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c000ea69:	e9 e0 fd ff ff       	jmp    c000e84e <Computer::displayFeatures()+0x11c>
c000ea6e:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c000ea73:	e9 ee fe ff ff       	jmp    c000e966 <Computer::displayFeatures()+0x234>

c000ea78 <Computer::rdmsr(unsigned int)>:
c000ea78:	83 ec 0c             	sub    esp,0xc
c000ea7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea7f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea86:	74 0a                	je     c000ea92 <Computer::rdmsr(unsigned int)+0x1a>
c000ea88:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea8c:	0f 32                	rdmsr  
c000ea8e:	83 c4 0c             	add    esp,0xc
c000ea91:	c3                   	ret    
c000ea92:	83 ec 0c             	sub    esp,0xc
c000ea95:	68 24 7e 02 c0       	push   0xc0027e24
c000ea9a:	e8 42 a7 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c000ea9f:	83 c4 10             	add    esp,0x10
c000eaa2:	eb e4                	jmp    c000ea88 <Computer::rdmsr(unsigned int)+0x10>

c000eaa4 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eaa4:	57                   	push   edi
c000eaa5:	56                   	push   esi
c000eaa6:	52                   	push   edx
c000eaa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaab:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eaaf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eab3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eaba:	74 0e                	je     c000eaca <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eabc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eac0:	89 f0                	mov    eax,esi
c000eac2:	89 fa                	mov    edx,edi
c000eac4:	0f 30                	wrmsr  
c000eac6:	58                   	pop    eax
c000eac7:	5e                   	pop    esi
c000eac8:	5f                   	pop    edi
c000eac9:	c3                   	ret    
c000eaca:	83 ec 0c             	sub    esp,0xc
c000eacd:	68 2a 7e 02 c0       	push   0xc0027e2a
c000ead2:	e8 0a a7 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	eb e0                	jmp    c000eabc <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eadc <Computer::nmiEnabled()>:
c000eadc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eae0:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eae6:	c3                   	ret    
c000eae7:	90                   	nop

c000eae8 <Computer::readCMOS(unsigned char)>:
c000eae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eaec:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eaf3:	19 c0                	sbb    eax,eax
c000eaf5:	83 e0 80             	and    eax,0xffffff80
c000eaf8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eafc:	e6 70                	out    0x70,al
c000eafe:	e4 71                	in     al,0x71
c000eb00:	c3                   	ret    
c000eb01:	90                   	nop

c000eb02 <Computer::enableNMI(bool)>:
c000eb02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb0a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb10:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb18:	eb ce                	jmp    c000eae8 <Computer::readCMOS(unsigned char)>

c000eb1a <Computer::open(int, int, void*)>:
c000eb1a:	56                   	push   esi
c000eb1b:	53                   	push   ebx
c000eb1c:	83 ec 10             	sub    esp,0x10
c000eb1f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb23:	f6 05 e0 ba 02 c0 04 	test   BYTE PTR ds:0xc002bae0,0x4
c000eb2a:	68 68 22 00 00       	push   0x2268
c000eb2f:	0f 94 05 80 aa 02 c0 	sete   BYTE PTR ds:0xc002aa80
c000eb36:	e8 95 09 00 00       	call   c000f4d0 <malloc>
c000eb3b:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb3e:	89 c6                	mov    esi,eax
c000eb40:	e8 05 8b 00 00       	call   c001764a <ACPI::ACPI()>
c000eb45:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb4b:	58                   	pop    eax
c000eb4c:	5a                   	pop    edx
c000eb4d:	56                   	push   esi
c000eb4e:	53                   	push   ebx
c000eb4f:	e8 38 4f 00 00       	call   c0013a8c <Device::addChild(Device*)>
c000eb54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb57:	e8 cc f9 ff ff       	call   c000e528 <Computer::detectFeatures()>
c000eb5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb5f:	e8 ce fb ff ff       	call   c000e732 <Computer::displayFeatures()>
c000eb64:	59                   	pop    ecx
c000eb65:	5e                   	pop    esi
c000eb66:	6a 01                	push   0x1
c000eb68:	53                   	push   ebx
c000eb69:	e8 94 ff ff ff       	call   c000eb02 <Computer::enableNMI(bool)>
c000eb6e:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb75:	e8 56 09 00 00       	call   c000f4d0 <malloc>
c000eb7a:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb7d:	89 c6                	mov    esi,eax
c000eb7f:	e8 72 95 00 00       	call   c00180f6 <CPU::CPU()>
c000eb84:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb8a:	58                   	pop    eax
c000eb8b:	5a                   	pop    edx
c000eb8c:	56                   	push   esi
c000eb8d:	53                   	push   ebx
c000eb8e:	e8 f9 4e 00 00       	call   c0013a8c <Device::addChild(Device*)>
c000eb93:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eb99:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eb9f:	6a 00                	push   0x0
c000eba1:	6a 00                	push   0x0
c000eba3:	50                   	push   eax
c000eba4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000eba7:	83 c4 20             	add    esp,0x20
c000ebaa:	e8 4f 54 00 00       	call   c0013ffe <setupFPU()>
c000ebaf:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ebb5:	85 c0                	test   eax,eax
c000ebb7:	74 1f                	je     c000ebd8 <Computer::open(int, int, void*)+0xbe>
c000ebb9:	83 ec 08             	sub    esp,0x8
c000ebbc:	50                   	push   eax
c000ebbd:	53                   	push   ebx
c000ebbe:	e8 c9 4e 00 00       	call   c0013a8c <Device::addChild(Device*)>
c000ebc3:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebc9:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebcb:	6a 00                	push   0x0
c000ebcd:	6a 00                	push   0x0
c000ebcf:	6a 00                	push   0x0
c000ebd1:	50                   	push   eax
c000ebd2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebd5:	83 c4 20             	add    esp,0x20
c000ebd8:	83 ec 0c             	sub    esp,0xc
c000ebdb:	68 19 e5 00 c0       	push   0xc000e519
c000ebe0:	e8 73 d8 00 00       	call   c001c458 <setupMultitasking(void (*)())>
c000ebe5:	83 c4 14             	add    esp,0x14
c000ebe8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebed:	5b                   	pop    ebx
c000ebee:	5e                   	pop    esi
c000ebef:	c3                   	ret    

c000ebf0 <Computer::disableNMI()>:
c000ebf0:	6a 00                	push   0x0
c000ebf2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ebf6:	e8 07 ff ff ff       	call   c000eb02 <Computer::enableNMI(bool)>
c000ebfb:	58                   	pop    eax
c000ebfc:	5a                   	pop    edx
c000ebfd:	c3                   	ret    

c000ebfe <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ebfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec02:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec09:	19 c0                	sbb    eax,eax
c000ec0b:	83 e0 80             	and    eax,0xffffff80
c000ec0e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec12:	e6 70                	out    0x70,al
c000ec14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec18:	e6 71                	out    0x71,al
c000ec1a:	c3                   	ret    
c000ec1b:	90                   	nop

c000ec1c <Computer::handleNMI()>:
c000ec1c:	56                   	push   esi
c000ec1d:	53                   	push   ebx
c000ec1e:	83 ec 10             	sub    esp,0x10
c000ec21:	e4 92                	in     al,0x92
c000ec23:	89 c6                	mov    esi,eax
c000ec25:	e4 61                	in     al,0x61
c000ec27:	68 30 7e 02 c0       	push   0xc0027e30
c000ec2c:	88 c3                	mov    bl,al
c000ec2e:	e8 6a 3a 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000ec33:	83 c4 10             	add    esp,0x10
c000ec36:	83 e6 10             	and    esi,0x10
c000ec39:	75 0d                	jne    c000ec48 <Computer::handleNMI()+0x2c>
c000ec3b:	f6 c3 40             	test   bl,0x40
c000ec3e:	75 1d                	jne    c000ec5d <Computer::handleNMI()+0x41>
c000ec40:	84 db                	test   bl,bl
c000ec42:	78 2d                	js     c000ec71 <Computer::handleNMI()+0x55>
c000ec44:	58                   	pop    eax
c000ec45:	5b                   	pop    ebx
c000ec46:	5e                   	pop    esi
c000ec47:	c3                   	ret    
c000ec48:	83 ec 0c             	sub    esp,0xc
c000ec4b:	68 41 7e 02 c0       	push   0xc0027e41
c000ec50:	e8 8c a5 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c000ec55:	83 c4 10             	add    esp,0x10
c000ec58:	f6 c3 40             	test   bl,0x40
c000ec5b:	74 e3                	je     c000ec40 <Computer::handleNMI()+0x24>
c000ec5d:	83 ec 0c             	sub    esp,0xc
c000ec60:	68 4e 7e 02 c0       	push   0xc0027e4e
c000ec65:	e8 77 a5 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c000ec6a:	83 c4 10             	add    esp,0x10
c000ec6d:	84 db                	test   bl,bl
c000ec6f:	79 d3                	jns    c000ec44 <Computer::handleNMI()+0x28>
c000ec71:	c7 44 24 10 58 7e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0027e58
c000ec79:	5a                   	pop    edx
c000ec7a:	5b                   	pop    ebx
c000ec7b:	5e                   	pop    esi
c000ec7c:	e9 60 a5 00 00       	jmp    c00191e1 <Krnl::panic(char const*)>
c000ec81:	90                   	nop

c000ec82 <Computer::setDiskActivityLight(int, bool)>:
c000ec82:	56                   	push   esi
c000ec83:	53                   	push   ebx
c000ec84:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec88:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec8d:	77 1b                	ja     c000ecaa <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec8f:	e4 92                	in     al,0x92
c000ec91:	bb 40 00 00 00       	mov    ebx,0x40
c000ec96:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ec9a:	89 da                	mov    edx,ebx
c000ec9c:	d3 e2                	shl    edx,cl
c000ec9e:	89 f1                	mov    ecx,esi
c000eca0:	f7 d2                	not    edx
c000eca2:	d3 e3                	shl    ebx,cl
c000eca4:	21 d0                	and    eax,edx
c000eca6:	09 d8                	or     eax,ebx
c000eca8:	e6 92                	out    0x92,al
c000ecaa:	5b                   	pop    ebx
c000ecab:	5e                   	pop    esi
c000ecac:	c3                   	ret    
c000ecad:	90                   	nop

c000ecae <GDTEntry::setBase(unsigned int)>:
c000ecae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecb2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecb6:	89 c1                	mov    ecx,eax
c000ecb8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecbc:	c1 e9 10             	shr    ecx,0x10
c000ecbf:	c1 e8 18             	shr    eax,0x18
c000ecc2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecc5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ecc8:	c3                   	ret    
c000ecc9:	90                   	nop

c000ecca <GDTEntry::setLimit(unsigned int)>:
c000ecca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecd2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecd5:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecd8:	83 e2 f0             	and    edx,0xfffffff0
c000ecdb:	c1 e8 10             	shr    eax,0x10
c000ecde:	83 e0 0f             	and    eax,0xf
c000ece1:	09 d0                	or     eax,edx
c000ece3:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ece6:	c3                   	ret    
c000ece7:	90                   	nop

c000ece8 <GDT::GDT()>:
c000ece8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecf6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecfc:	90                   	nop
c000ecfd:	c3                   	ret    

c000ecfe <GDT::addEntry(GDTEntry)>:
c000ecfe:	53                   	push   ebx
c000ecff:	83 ec 0c             	sub    esp,0xc
c000ed02:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed06:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed08:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ed0f:	52                   	push   edx
c000ed10:	50                   	push   eax
c000ed11:	68 94 7e 02 c0       	push   0xc0027e94
c000ed16:	e8 82 39 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000ed1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed1d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed21:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed25:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed29:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed2d:	8d 50 01             	lea    edx,[eax+0x1]
c000ed30:	c1 e0 03             	shl    eax,0x3
c000ed33:	89 13                	mov    DWORD PTR [ebx],edx
c000ed35:	83 c4 18             	add    esp,0x18
c000ed38:	5b                   	pop    ebx
c000ed39:	c3                   	ret    

c000ed3a <GDT::getNumberOfEntries()>:
c000ed3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed3e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed40:	c3                   	ret    
c000ed41:	90                   	nop

c000ed42 <GDT::flush()>:
c000ed42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed46:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed48:	83 c0 04             	add    eax,0x4
c000ed4b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed52:	a3 d2 ba 02 c0       	mov    ds:0xc002bad2,eax
c000ed57:	66 89 15 d0 ba 02 c0 	mov    WORD PTR ds:0xc002bad0,dx
c000ed5e:	e9 9a 16 ff ff       	jmp    c00003fd <loadGDT>
c000ed63:	90                   	nop

c000ed64 <GDT::setup()>:
c000ed64:	55                   	push   ebp
c000ed65:	57                   	push   edi
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	83 ec 3c             	sub    esp,0x3c
c000ed6b:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed6f:	6a 00                	push   0x0
c000ed71:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed75:	53                   	push   ebx
c000ed76:	e8 33 ff ff ff       	call   c000ecae <GDTEntry::setBase(unsigned int)>
c000ed7b:	6a 00                	push   0x0
c000ed7d:	53                   	push   ebx
c000ed7e:	e8 47 ff ff ff       	call   c000ecca <GDTEntry::setLimit(unsigned int)>
c000ed83:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed8b:	6a 00                	push   0x0
c000ed8d:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed91:	53                   	push   ebx
c000ed92:	e8 17 ff ff ff       	call   c000ecae <GDTEntry::setBase(unsigned int)>
c000ed97:	68 ff ff ff 00       	push   0xffffff
c000ed9c:	53                   	push   ebx
c000ed9d:	e8 28 ff ff ff       	call   c000ecca <GDTEntry::setLimit(unsigned int)>
c000eda2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000eda6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edab:	0d 00 9a c0 00       	or     eax,0xc09a00
c000edb0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edb4:	83 c4 20             	add    esp,0x20
c000edb7:	6a 00                	push   0x0
c000edb9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edbd:	53                   	push   ebx
c000edbe:	e8 eb fe ff ff       	call   c000ecae <GDTEntry::setBase(unsigned int)>
c000edc3:	68 ff ff ff 00       	push   0xffffff
c000edc8:	53                   	push   ebx
c000edc9:	e8 fc fe ff ff       	call   c000ecca <GDTEntry::setLimit(unsigned int)>
c000edce:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edd2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000edda:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000edde:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ede2:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ede7:	0d 00 92 c0 00       	or     eax,0xc09200
c000edec:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edf0:	89 d8                	mov    eax,ebx
c000edf2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edf6:	80 cc 60             	or     ah,0x60
c000edf9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000edfd:	83 c4 0c             	add    esp,0xc
c000ee00:	89 f8                	mov    eax,edi
c000ee02:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee06:	80 cc 60             	or     ah,0x60
c000ee09:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee0d:	89 c7                	mov    edi,eax
c000ee0f:	55                   	push   ebp
c000ee10:	e8 e9 fe ff ff       	call   c000ecfe <GDT::addEntry(GDTEntry)>
c000ee15:	83 c4 0c             	add    esp,0xc
c000ee18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee20:	55                   	push   ebp
c000ee21:	e8 d8 fe ff ff       	call   c000ecfe <GDT::addEntry(GDTEntry)>
c000ee26:	83 c4 0c             	add    esp,0xc
c000ee29:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee31:	55                   	push   ebp
c000ee32:	e8 c7 fe ff ff       	call   c000ecfe <GDT::addEntry(GDTEntry)>
c000ee37:	83 c4 0c             	add    esp,0xc
c000ee3a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee42:	53                   	push   ebx
c000ee43:	51                   	push   ecx
c000ee44:	55                   	push   ebp
c000ee45:	e8 b4 fe ff ff       	call   c000ecfe <GDT::addEntry(GDTEntry)>
c000ee4a:	83 c4 0c             	add    esp,0xc
c000ee4d:	57                   	push   edi
c000ee4e:	56                   	push   esi
c000ee4f:	55                   	push   ebp
c000ee50:	e8 a9 fe ff ff       	call   c000ecfe <GDT::addEntry(GDTEntry)>
c000ee55:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee58:	e8 e5 fe ff ff       	call   c000ed42 <GDT::flush()>
c000ee5d:	83 c4 4c             	add    esp,0x4c
c000ee60:	5b                   	pop    ebx
c000ee61:	5e                   	pop    esi
c000ee62:	5f                   	pop    edi
c000ee63:	5d                   	pop    ebp
c000ee64:	c3                   	ret    

c000ee65 <idleFunction(void*)>:
c000ee65:	53                   	push   ebx
c000ee66:	83 ec 08             	sub    esp,0x8
c000ee69:	e8 bb d3 00 00       	call   c001c229 <unlockScheduler()>
c000ee6e:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c000ee73:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee79:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee80:	74 3c                	je     c000eebe <idleFunction(void*)+0x59>
c000ee82:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee89:	74 33                	je     c000eebe <idleFunction(void*)+0x59>
c000ee8b:	31 db                	xor    ebx,ebx
c000ee8d:	52                   	push   edx
c000ee8e:	52                   	push   edx
c000ee8f:	68 e1 00 00 00       	push   0xe1
c000ee94:	50                   	push   eax
c000ee95:	e8 de fb ff ff       	call   c000ea78 <Computer::rdmsr(unsigned int)>
c000ee9a:	53                   	push   ebx
c000ee9b:	83 e0 02             	and    eax,0x2
c000ee9e:	50                   	push   eax
c000ee9f:	68 e1 00 00 00       	push   0xe1
c000eea4:	ff 35 c8 ba 02 c0    	push   DWORD PTR ds:0xc002bac8
c000eeaa:	e8 f5 fb ff ff       	call   c000eaa4 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eeaf:	83 c4 20             	add    esp,0x20
c000eeb2:	e8 7d 13 ff ff       	call   c0000234 <doTPAUSE>
c000eeb7:	e8 74 75 01 00       	call   c0026430 <idleCommon()>
c000eebc:	eb f4                	jmp    c000eeb2 <idleFunction(void*)+0x4d>
c000eebe:	fb                   	sti    
c000eebf:	f4                   	hlt    
c000eec0:	e8 6b 75 01 00       	call   c0026430 <idleCommon()>
c000eec5:	eb f7                	jmp    c000eebe <idleFunction(void*)+0x59>
c000eec7:	90                   	nop

c000eec8 <IDTEntry::IDTEntry(bool)>:
c000eec8:	83 ec 04             	sub    esp,0x4
c000eecb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eecf:	88 04 24             	mov    BYTE PTR [esp],al
c000eed2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eed6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eedc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eee4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeeb:	83 e2 f0             	and    edx,0xfffffff0
c000eeee:	83 ca 0e             	or     edx,0xe
c000eef1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eef8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eefb:	83 e2 ef             	and    edx,0xffffffef
c000eefe:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef01:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ef05:	74 04                	je     c000ef0b <IDTEntry::IDTEntry(bool)+0x43>
c000ef07:	b2 03                	mov    dl,0x3
c000ef09:	eb 02                	jmp    c000ef0d <IDTEntry::IDTEntry(bool)+0x45>
c000ef0b:	b2 00                	mov    dl,0x0
c000ef0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef11:	83 e2 03             	and    edx,0x3
c000ef14:	88 d1                	mov    cl,dl
c000ef16:	c1 e1 05             	shl    ecx,0x5
c000ef19:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef1c:	83 e2 9f             	and    edx,0xffffff9f
c000ef1f:	09 ca                	or     edx,ecx
c000ef21:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef28:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef2b:	83 ca 80             	or     edx,0xffffff80
c000ef2e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef31:	90                   	nop
c000ef32:	83 c4 04             	add    esp,0x4
c000ef35:	c3                   	ret    

c000ef36 <IDTEntry::setOffset(unsigned int)>:
c000ef36:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef3e:	66 89 02             	mov    WORD PTR [edx],ax
c000ef41:	c1 e8 10             	shr    eax,0x10
c000ef44:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef48:	c3                   	ret    
c000ef49:	90                   	nop

c000ef4a <IDT::IDT()>:
c000ef4a:	90                   	nop
c000ef4b:	c3                   	ret    

c000ef4c <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef50:	83 c0 30             	add    eax,0x30
c000ef53:	c3                   	ret    

c000ef54 <IDT::addEntry(IDTEntry, int)>:
c000ef54:	53                   	push   ebx
c000ef55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef65:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef68:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef6c:	5b                   	pop    ebx
c000ef6d:	c3                   	ret    

c000ef6e <IDT::addEntry(int, void (*)(), bool)>:
c000ef6e:	53                   	push   ebx
c000ef6f:	83 ec 10             	sub    esp,0x10
c000ef72:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef77:	50                   	push   eax
c000ef78:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef7c:	53                   	push   ebx
c000ef7d:	e8 46 ff ff ff       	call   c000eec8 <IDTEntry::IDTEntry(bool)>
c000ef82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef86:	53                   	push   ebx
c000ef87:	e8 aa ff ff ff       	call   c000ef36 <IDTEntry::setOffset(unsigned int)>
c000ef8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef90:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef9c:	e8 b3 ff ff ff       	call   c000ef54 <IDT::addEntry(IDTEntry, int)>
c000efa1:	83 c4 30             	add    esp,0x30
c000efa4:	5b                   	pop    ebx
c000efa5:	c3                   	ret    

c000efa6 <IDT::flush()>:
c000efa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efaa:	66 c7 05 d8 ba 02 c0 ff 07 	mov    WORD PTR ds:0xc002bad8,0x7ff
c000efb3:	a3 da ba 02 c0       	mov    ds:0xc002bada,eax
c000efb8:	0f 01 1d d8 ba 02 c0 	lidtd  ds:0xc002bad8
c000efbf:	c3                   	ret    

c000efc0 <IDT::setup()>:
c000efc0:	57                   	push   edi
c000efc1:	56                   	push   esi
c000efc2:	53                   	push   ebx
c000efc3:	83 ec 10             	sub    esp,0x10
c000efc6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efca:	6a 00                	push   0x0
c000efcc:	68 1d 04 00 c0       	push   0xc000041d
c000efd1:	6a 00                	push   0x0
c000efd3:	53                   	push   ebx
c000efd4:	e8 95 ff ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000efd9:	6a 00                	push   0x0
c000efdb:	68 2d 04 00 c0       	push   0xc000042d
c000efe0:	6a 01                	push   0x1
c000efe2:	53                   	push   ebx
c000efe3:	e8 86 ff ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000efe8:	83 c4 20             	add    esp,0x20
c000efeb:	6a 00                	push   0x0
c000efed:	68 37 04 00 c0       	push   0xc0000437
c000eff2:	6a 02                	push   0x2
c000eff4:	53                   	push   ebx
c000eff5:	e8 74 ff ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000effa:	6a 00                	push   0x0
c000effc:	68 41 04 00 c0       	push   0xc0000441
c000f001:	6a 03                	push   0x3
c000f003:	53                   	push   ebx
c000f004:	e8 65 ff ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f009:	83 c4 20             	add    esp,0x20
c000f00c:	6a 00                	push   0x0
c000f00e:	68 4b 04 00 c0       	push   0xc000044b
c000f013:	6a 04                	push   0x4
c000f015:	53                   	push   ebx
c000f016:	e8 53 ff ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f01b:	6a 00                	push   0x0
c000f01d:	68 55 04 00 c0       	push   0xc0000455
c000f022:	6a 05                	push   0x5
c000f024:	53                   	push   ebx
c000f025:	e8 44 ff ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f02a:	83 c4 20             	add    esp,0x20
c000f02d:	6a 00                	push   0x0
c000f02f:	68 5f 04 00 c0       	push   0xc000045f
c000f034:	6a 06                	push   0x6
c000f036:	53                   	push   ebx
c000f037:	e8 32 ff ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f03c:	6a 00                	push   0x0
c000f03e:	68 69 04 00 c0       	push   0xc0000469
c000f043:	6a 07                	push   0x7
c000f045:	53                   	push   ebx
c000f046:	e8 23 ff ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f04b:	83 c4 20             	add    esp,0x20
c000f04e:	6a 00                	push   0x0
c000f050:	68 73 04 00 c0       	push   0xc0000473
c000f055:	6a 08                	push   0x8
c000f057:	53                   	push   ebx
c000f058:	e8 11 ff ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f05d:	6a 00                	push   0x0
c000f05f:	68 7b 04 00 c0       	push   0xc000047b
c000f064:	6a 09                	push   0x9
c000f066:	53                   	push   ebx
c000f067:	e8 02 ff ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f06c:	83 c4 20             	add    esp,0x20
c000f06f:	6a 00                	push   0x0
c000f071:	68 85 04 00 c0       	push   0xc0000485
c000f076:	6a 0a                	push   0xa
c000f078:	53                   	push   ebx
c000f079:	e8 f0 fe ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f07e:	6a 00                	push   0x0
c000f080:	68 8d 04 00 c0       	push   0xc000048d
c000f085:	6a 0b                	push   0xb
c000f087:	53                   	push   ebx
c000f088:	e8 e1 fe ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f08d:	83 c4 20             	add    esp,0x20
c000f090:	6a 00                	push   0x0
c000f092:	68 95 04 00 c0       	push   0xc0000495
c000f097:	6a 0c                	push   0xc
c000f099:	53                   	push   ebx
c000f09a:	e8 cf fe ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f09f:	6a 00                	push   0x0
c000f0a1:	68 9d 04 00 c0       	push   0xc000049d
c000f0a6:	6a 0d                	push   0xd
c000f0a8:	53                   	push   ebx
c000f0a9:	e8 c0 fe ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f0ae:	83 c4 20             	add    esp,0x20
c000f0b1:	6a 00                	push   0x0
c000f0b3:	68 a5 04 00 c0       	push   0xc00004a5
c000f0b8:	6a 0e                	push   0xe
c000f0ba:	53                   	push   ebx
c000f0bb:	e8 ae fe ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f0c0:	6a 00                	push   0x0
c000f0c2:	68 ad 04 00 c0       	push   0xc00004ad
c000f0c7:	6a 0f                	push   0xf
c000f0c9:	53                   	push   ebx
c000f0ca:	e8 9f fe ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f0cf:	83 c4 20             	add    esp,0x20
c000f0d2:	6a 00                	push   0x0
c000f0d4:	68 b7 04 00 c0       	push   0xc00004b7
c000f0d9:	6a 10                	push   0x10
c000f0db:	53                   	push   ebx
c000f0dc:	e8 8d fe ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f0e1:	6a 00                	push   0x0
c000f0e3:	68 c1 04 00 c0       	push   0xc00004c1
c000f0e8:	6a 11                	push   0x11
c000f0ea:	53                   	push   ebx
c000f0eb:	e8 7e fe ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f0f0:	83 c4 20             	add    esp,0x20
c000f0f3:	6a 00                	push   0x0
c000f0f5:	68 cb 04 00 c0       	push   0xc00004cb
c000f0fa:	6a 12                	push   0x12
c000f0fc:	53                   	push   ebx
c000f0fd:	e8 6c fe ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f102:	6a 01                	push   0x1
c000f104:	68 65 05 00 c0       	push   0xc0000565
c000f109:	6a 60                	push   0x60
c000f10b:	53                   	push   ebx
c000f10c:	e8 5d fe ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f111:	83 c4 20             	add    esp,0x20
c000f114:	6a 00                	push   0x0
c000f116:	68 6c 05 00 c0       	push   0xc000056c
c000f11b:	6a 20                	push   0x20
c000f11d:	53                   	push   ebx
c000f11e:	e8 4b fe ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f123:	6a 00                	push   0x0
c000f125:	68 57 05 00 c0       	push   0xc0000557
c000f12a:	6a 21                	push   0x21
c000f12c:	53                   	push   ebx
c000f12d:	e8 3c fe ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f132:	83 c4 20             	add    esp,0x20
c000f135:	6a 00                	push   0x0
c000f137:	68 5e 05 00 c0       	push   0xc000055e
c000f13c:	6a 22                	push   0x22
c000f13e:	53                   	push   ebx
c000f13f:	e8 2a fe ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f144:	6a 00                	push   0x0
c000f146:	68 d5 04 00 c0       	push   0xc00004d5
c000f14b:	6a 23                	push   0x23
c000f14d:	53                   	push   ebx
c000f14e:	e8 1b fe ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f153:	83 c4 20             	add    esp,0x20
c000f156:	6a 00                	push   0x0
c000f158:	68 df 04 00 c0       	push   0xc00004df
c000f15d:	6a 24                	push   0x24
c000f15f:	53                   	push   ebx
c000f160:	e8 09 fe ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f165:	6a 00                	push   0x0
c000f167:	68 e9 04 00 c0       	push   0xc00004e9
c000f16c:	6a 25                	push   0x25
c000f16e:	53                   	push   ebx
c000f16f:	e8 fa fd ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f174:	83 c4 20             	add    esp,0x20
c000f177:	6a 00                	push   0x0
c000f179:	68 f3 04 00 c0       	push   0xc00004f3
c000f17e:	6a 26                	push   0x26
c000f180:	53                   	push   ebx
c000f181:	e8 e8 fd ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f186:	6a 00                	push   0x0
c000f188:	68 fd 04 00 c0       	push   0xc00004fd
c000f18d:	6a 27                	push   0x27
c000f18f:	53                   	push   ebx
c000f190:	e8 d9 fd ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f195:	83 c4 20             	add    esp,0x20
c000f198:	6a 00                	push   0x0
c000f19a:	68 07 05 00 c0       	push   0xc0000507
c000f19f:	6a 28                	push   0x28
c000f1a1:	53                   	push   ebx
c000f1a2:	e8 c7 fd ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f1a7:	6a 00                	push   0x0
c000f1a9:	68 11 05 00 c0       	push   0xc0000511
c000f1ae:	6a 29                	push   0x29
c000f1b0:	53                   	push   ebx
c000f1b1:	e8 b8 fd ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f1b6:	83 c4 20             	add    esp,0x20
c000f1b9:	6a 00                	push   0x0
c000f1bb:	68 1b 05 00 c0       	push   0xc000051b
c000f1c0:	6a 2a                	push   0x2a
c000f1c2:	53                   	push   ebx
c000f1c3:	e8 a6 fd ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f1c8:	6a 00                	push   0x0
c000f1ca:	68 25 05 00 c0       	push   0xc0000525
c000f1cf:	6a 2b                	push   0x2b
c000f1d1:	53                   	push   ebx
c000f1d2:	e8 97 fd ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f1d7:	83 c4 20             	add    esp,0x20
c000f1da:	6a 00                	push   0x0
c000f1dc:	68 2f 05 00 c0       	push   0xc000052f
c000f1e1:	6a 2c                	push   0x2c
c000f1e3:	53                   	push   ebx
c000f1e4:	e8 85 fd ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f1e9:	6a 00                	push   0x0
c000f1eb:	68 39 05 00 c0       	push   0xc0000539
c000f1f0:	6a 2d                	push   0x2d
c000f1f2:	53                   	push   ebx
c000f1f3:	e8 76 fd ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f1f8:	83 c4 20             	add    esp,0x20
c000f1fb:	6a 00                	push   0x0
c000f1fd:	68 43 05 00 c0       	push   0xc0000543
c000f202:	6a 2e                	push   0x2e
c000f204:	53                   	push   ebx
c000f205:	e8 64 fd ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f20a:	6a 00                	push   0x0
c000f20c:	68 4d 05 00 c0       	push   0xc000054d
c000f211:	6a 2f                	push   0x2f
c000f213:	53                   	push   ebx
c000f214:	e8 55 fd ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f219:	83 c4 20             	add    esp,0x20
c000f21c:	6a 00                	push   0x0
c000f21e:	68 a2 05 00 c0       	push   0xc00005a2
c000f223:	6a 30                	push   0x30
c000f225:	53                   	push   ebx
c000f226:	e8 43 fd ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f22b:	6a 00                	push   0x0
c000f22d:	68 ac 05 00 c0       	push   0xc00005ac
c000f232:	6a 31                	push   0x31
c000f234:	53                   	push   ebx
c000f235:	e8 34 fd ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f23a:	83 c4 20             	add    esp,0x20
c000f23d:	6a 00                	push   0x0
c000f23f:	68 b6 05 00 c0       	push   0xc00005b6
c000f244:	6a 32                	push   0x32
c000f246:	53                   	push   ebx
c000f247:	e8 22 fd ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f24c:	6a 00                	push   0x0
c000f24e:	68 c0 05 00 c0       	push   0xc00005c0
c000f253:	6a 33                	push   0x33
c000f255:	53                   	push   ebx
c000f256:	e8 13 fd ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f25b:	83 c4 20             	add    esp,0x20
c000f25e:	6a 00                	push   0x0
c000f260:	68 ca 05 00 c0       	push   0xc00005ca
c000f265:	6a 34                	push   0x34
c000f267:	53                   	push   ebx
c000f268:	e8 01 fd ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f26d:	6a 00                	push   0x0
c000f26f:	68 d4 05 00 c0       	push   0xc00005d4
c000f274:	6a 35                	push   0x35
c000f276:	53                   	push   ebx
c000f277:	e8 f2 fc ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f27c:	83 c4 20             	add    esp,0x20
c000f27f:	6a 00                	push   0x0
c000f281:	68 de 05 00 c0       	push   0xc00005de
c000f286:	6a 36                	push   0x36
c000f288:	53                   	push   ebx
c000f289:	e8 e0 fc ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f28e:	6a 00                	push   0x0
c000f290:	68 e8 05 00 c0       	push   0xc00005e8
c000f295:	6a 37                	push   0x37
c000f297:	53                   	push   ebx
c000f298:	e8 d1 fc ff ff       	call   c000ef6e <IDT::addEntry(int, void (*)(), bool)>
c000f29d:	83 c4 20             	add    esp,0x20
c000f2a0:	e8 98 25 00 00       	call   c001183d <Virt::getAKernelVAS()>
c000f2a5:	52                   	push   edx
c000f2a6:	6a 03                	push   0x3
c000f2a8:	6a 02                	push   0x2
c000f2aa:	50                   	push   eax
c000f2ab:	e8 c8 2b 00 00       	call   c0011e78 <VAS::allocatePages(int, int)>
c000f2b0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2b7:	89 c6                	mov    esi,eax
c000f2b9:	e8 12 02 00 00       	call   c000f4d0 <malloc>
c000f2be:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2c4:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2c7:	89 c7                	mov    edi,eax
c000f2c9:	e8 10 1d 00 00       	call   c0010fde <TSS::TSS()>
c000f2ce:	83 c4 0c             	add    esp,0xc
c000f2d1:	68 73 04 00 c0       	push   0xc0000473
c000f2d6:	56                   	push   esi
c000f2d7:	57                   	push   edi
c000f2d8:	e8 41 1d 00 00       	call   c001101e <TSS::setup(unsigned long, unsigned long)>
c000f2dd:	59                   	pop    ecx
c000f2de:	89 c6                	mov    esi,eax
c000f2e0:	5f                   	pop    edi
c000f2e1:	6a 00                	push   0x0
c000f2e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2e7:	50                   	push   eax
c000f2e8:	e8 db fb ff ff       	call   c000eec8 <IDTEntry::IDTEntry(bool)>
c000f2ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2f1:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2f6:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f2fd:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f303:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f307:	80 ce 05             	or     dh,0x5
c000f30a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f30d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f311:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f315:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f318:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f31b:	e8 86 fc ff ff       	call   c000efa6 <IDT::flush()>
c000f320:	83 c4 20             	add    esp,0x20
c000f323:	5b                   	pop    ebx
c000f324:	5e                   	pop    esi
c000f325:	5f                   	pop    edi
c000f326:	c3                   	ret    

c000f327 <sbrk>:
c000f327:	55                   	push   ebp
c000f328:	57                   	push   edi
c000f329:	56                   	push   esi
c000f32a:	53                   	push   ebx
c000f32b:	83 ec 1c             	sub    esp,0x1c
c000f32e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f332:	85 c0                	test   eax,eax
c000f334:	74 3e                	je     c000f374 <sbrk+0x4d>
c000f336:	78 43                	js     c000f37b <sbrk+0x54>
c000f338:	8b 15 c8 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002bac8
c000f33e:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f344:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f34a:	83 e2 01             	and    edx,0x1
c000f34d:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f351:	8b 0d 74 aa 02 c0    	mov    ecx,DWORD PTR ds:0xc002aa74
c000f357:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f35b:	05 ff 0f 00 00       	add    eax,0xfff
c000f360:	89 c2                	mov    edx,eax
c000f362:	78 2f                	js     c000f393 <sbrk+0x6c>
c000f364:	c1 fa 0c             	sar    edx,0xc
c000f367:	89 d7                	mov    edi,edx
c000f369:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f36d:	be 00 00 00 00       	mov    esi,0x0
c000f372:	eb 36                	jmp    c000f3aa <sbrk+0x83>
c000f374:	a1 74 aa 02 c0       	mov    eax,ds:0xc002aa74
c000f379:	eb 74                	jmp    c000f3ef <sbrk+0xc8>
c000f37b:	83 ec 08             	sub    esp,0x8
c000f37e:	50                   	push   eax
c000f37f:	68 b0 7e 02 c0       	push   0xc0027eb0
c000f384:	e8 14 33 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000f389:	83 c4 10             	add    esp,0x10
c000f38c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f391:	eb 5c                	jmp    c000f3ef <sbrk+0xc8>
c000f393:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f399:	eb c9                	jmp    c000f364 <sbrk+0x3d>
c000f39b:	81 05 74 aa 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002aa74,0x1000
c000f3a5:	46                   	inc    esi
c000f3a6:	39 f7                	cmp    edi,esi
c000f3a8:	74 34                	je     c000f3de <sbrk+0xb7>
c000f3aa:	e8 8e 24 00 00       	call   c001183d <Virt::getAKernelVAS()>
c000f3af:	89 c3                	mov    ebx,eax
c000f3b1:	8b 2d 74 aa 02 c0    	mov    ebp,DWORD PTR ds:0xc002aa74
c000f3b7:	e8 be 06 00 00       	call   c000fa7a <Phys::allocatePage()>
c000f3bc:	68 01 04 00 00       	push   0x401
c000f3c1:	55                   	push   ebp
c000f3c2:	50                   	push   eax
c000f3c3:	53                   	push   ebx
c000f3c4:	e8 af 29 00 00       	call   c0011d78 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3c9:	83 c4 10             	add    esp,0x10
c000f3cc:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3d1:	74 c8                	je     c000f39b <sbrk+0x74>
c000f3d3:	8b 1d 74 aa 02 c0    	mov    ebx,DWORD PTR ds:0xc002aa74
c000f3d9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3dc:	eb bd                	jmp    c000f39b <sbrk+0x74>
c000f3de:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3e3:	75 12                	jne    c000f3f7 <sbrk+0xd0>
c000f3e5:	0f 20 d8             	mov    eax,cr3
c000f3e8:	0f 22 d8             	mov    cr3,eax
c000f3eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3ef:	83 c4 1c             	add    esp,0x1c
c000f3f2:	5b                   	pop    ebx
c000f3f3:	5e                   	pop    esi
c000f3f4:	5f                   	pop    edi
c000f3f5:	5d                   	pop    ebp
c000f3f6:	c3                   	ret    
c000f3f7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f3fb:	89 cb                	mov    ebx,ecx
c000f3fd:	c1 eb 0a             	shr    ebx,0xa
c000f400:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f406:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f40c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f410:	c1 e0 0c             	shl    eax,0xc
c000f413:	01 c8                	add    eax,ecx
c000f415:	c1 e8 0a             	shr    eax,0xa
c000f418:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f41d:	2d 00 00 40 00       	sub    eax,0x400000
c000f422:	39 c3                	cmp    ebx,eax
c000f424:	77 c5                	ja     c000f3eb <sbrk+0xc4>
c000f426:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f429:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f42f:	39 d8                	cmp    eax,ebx
c000f431:	73 f3                	jae    c000f426 <sbrk+0xff>
c000f433:	eb b6                	jmp    c000f3eb <sbrk+0xc4>

c000f435 <mmap>:
c000f435:	83 ec 18             	sub    esp,0x18
c000f438:	68 e0 7e 02 c0       	push   0xc0027ee0
c000f43d:	e8 9f 9d 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c000f442:	b8 00 00 00 00       	mov    eax,0x0
c000f447:	83 c4 1c             	add    esp,0x1c
c000f44a:	c3                   	ret    

c000f44b <munmap>:
c000f44b:	83 ec 18             	sub    esp,0x18
c000f44e:	68 e5 7e 02 c0       	push   0xc0027ee5
c000f453:	e8 89 9d 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c000f458:	b8 00 00 00 00       	mov    eax,0x0
c000f45d:	83 c4 1c             	add    esp,0x1c
c000f460:	c3                   	ret    

c000f461 <liballoc_lock()>:
c000f461:	83 ec 0c             	sub    esp,0xc
c000f464:	e8 be cd 00 00       	call   c001c227 <lockScheduler()>
c000f469:	b8 00 00 00 00       	mov    eax,0x0
c000f46e:	83 c4 0c             	add    esp,0xc
c000f471:	c3                   	ret    

c000f472 <liballoc_unlock()>:
c000f472:	83 ec 0c             	sub    esp,0xc
c000f475:	e8 af cd 00 00       	call   c001c229 <unlockScheduler()>
c000f47a:	b8 00 00 00 00       	mov    eax,0x0
c000f47f:	83 c4 0c             	add    esp,0xc
c000f482:	c3                   	ret    

c000f483 <liballoc_alloc(int)>:
c000f483:	83 ec 0c             	sub    esp,0xc
c000f486:	e8 b2 23 00 00       	call   c001183d <Virt::getAKernelVAS()>
c000f48b:	83 ec 04             	sub    esp,0x4
c000f48e:	6a 01                	push   0x1
c000f490:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f494:	50                   	push   eax
c000f495:	e8 de 29 00 00       	call   c0011e78 <VAS::allocatePages(int, int)>
c000f49a:	83 c4 1c             	add    esp,0x1c
c000f49d:	c3                   	ret    

c000f49e <liballoc_free(void*, int)>:
c000f49e:	83 ec 0c             	sub    esp,0xc
c000f4a1:	e8 97 23 00 00       	call   c001183d <Virt::getAKernelVAS()>
c000f4a6:	83 ec 08             	sub    esp,0x8
c000f4a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4ad:	50                   	push   eax
c000f4ae:	e8 81 26 00 00       	call   c0011b34 <VAS::freeAllocatedPages(unsigned long)>
c000f4b3:	b8 00 00 00 00       	mov    eax,0x0
c000f4b8:	83 c4 1c             	add    esp,0x1c
c000f4bb:	c3                   	ret    

c000f4bc <realloc>:
c000f4bc:	83 ec 14             	sub    esp,0x14
c000f4bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c7:	e8 38 1f ff ff       	call   c0001404 <dlrealloc>
c000f4cc:	83 c4 1c             	add    esp,0x1c
c000f4cf:	c3                   	ret    

c000f4d0 <malloc>:
c000f4d0:	83 ec 18             	sub    esp,0x18
c000f4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4d7:	e8 eb 19 ff ff       	call   c0000ec7 <dlmalloc>
c000f4dc:	83 c4 1c             	add    esp,0x1c
c000f4df:	c3                   	ret    

c000f4e0 <free>:
c000f4e0:	83 ec 18             	sub    esp,0x18
c000f4e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4e7:	e8 80 16 ff ff       	call   c0000b6c <dlfree>
c000f4ec:	83 c4 1c             	add    esp,0x1c
c000f4ef:	c3                   	ret    

c000f4f0 <rfree>:
c000f4f0:	83 ec 18             	sub    esp,0x18
c000f4f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4f7:	e8 70 16 ff ff       	call   c0000b6c <dlfree>
c000f4fc:	83 c4 1c             	add    esp,0x1c
c000f4ff:	c3                   	ret    

c000f500 <calloc>:
c000f500:	56                   	push   esi
c000f501:	53                   	push   ebx
c000f502:	83 ec 10             	sub    esp,0x10
c000f505:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f509:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f50e:	53                   	push   ebx
c000f50f:	e8 bc ff ff ff       	call   c000f4d0 <malloc>
c000f514:	89 c6                	mov    esi,eax
c000f516:	83 c4 0c             	add    esp,0xc
c000f519:	53                   	push   ebx
c000f51a:	6a 00                	push   0x0
c000f51c:	50                   	push   eax
c000f51d:	e8 69 11 ff ff       	call   c000068b <memset>
c000f522:	89 f0                	mov    eax,esi
c000f524:	83 c4 14             	add    esp,0x14
c000f527:	5b                   	pop    ebx
c000f528:	5e                   	pop    esi
c000f529:	c3                   	ret    

c000f52a <hwTextMode_loadInData(VgaText*)>:
c000f52a:	57                   	push   edi
c000f52b:	56                   	push   esi
c000f52c:	53                   	push   ebx
c000f52d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f531:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f537:	85 c0                	test   eax,eax
c000f539:	7e 30                	jle    c000f56b <hwTextMode_loadInData(VgaText*)+0x41>
c000f53b:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f53e:	31 f6                	xor    esi,esi
c000f540:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f543:	31 c0                	xor    eax,eax
c000f545:	c1 e1 05             	shl    ecx,0x5
c000f548:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f54e:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f552:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f556:	40                   	inc    eax
c000f557:	83 f8 50             	cmp    eax,0x50
c000f55a:	75 f2                	jne    c000f54e <hwTextMode_loadInData(VgaText*)+0x24>
c000f55c:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f562:	46                   	inc    esi
c000f563:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f569:	7f d5                	jg     c000f540 <hwTextMode_loadInData(VgaText*)+0x16>
c000f56b:	5b                   	pop    ebx
c000f56c:	5e                   	pop    esi
c000f56d:	5f                   	pop    edi
c000f56e:	c3                   	ret    

c000f56f <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f56f:	56                   	push   esi
c000f570:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f575:	53                   	push   ebx
c000f576:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f57a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f57e:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f584:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f58a:	c1 e0 04             	shl    eax,0x4
c000f58d:	83 e6 0f             	and    esi,0xf
c000f590:	0f b6 c0             	movzx  eax,al
c000f593:	41                   	inc    ecx
c000f594:	09 f0                	or     eax,esi
c000f596:	83 c2 02             	add    edx,0x2
c000f599:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f59d:	c1 e0 08             	shl    eax,0x8
c000f5a0:	09 f0                	or     eax,esi
c000f5a2:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f5a6:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f5ac:	75 d0                	jne    c000f57e <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f5ae:	5b                   	pop    ebx
c000f5af:	5e                   	pop    esi
c000f5b0:	c3                   	ret    

c000f5b1 <hwTextMode_showCursor(VgaText*, bool)>:
c000f5b1:	56                   	push   esi
c000f5b2:	53                   	push   ebx
c000f5b3:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f5b8:	74 38                	je     c000f5f2 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f5ba:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f5bf:	b0 0a                	mov    al,0xa
c000f5c1:	89 da                	mov    edx,ebx
c000f5c3:	ee                   	out    dx,al
c000f5c4:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f5c9:	89 ca                	mov    edx,ecx
c000f5cb:	ec                   	in     al,dx
c000f5cc:	b2 0f                	mov    dl,0xf
c000f5ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f5d2:	83 e0 c0             	and    eax,0xffffffc0
c000f5d5:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f5db:	09 d0                	or     eax,edx
c000f5dd:	89 ca                	mov    edx,ecx
c000f5df:	ee                   	out    dx,al
c000f5e0:	b0 0b                	mov    al,0xb
c000f5e2:	89 da                	mov    edx,ebx
c000f5e4:	ee                   	out    dx,al
c000f5e5:	89 ca                	mov    edx,ecx
c000f5e7:	ec                   	in     al,dx
c000f5e8:	83 e0 e0             	and    eax,0xffffffe0
c000f5eb:	83 c8 0f             	or     eax,0xf
c000f5ee:	ee                   	out    dx,al
c000f5ef:	5b                   	pop    ebx
c000f5f0:	5e                   	pop    esi
c000f5f1:	c3                   	ret    
c000f5f2:	b0 0a                	mov    al,0xa
c000f5f4:	ba d4 03 00 00       	mov    edx,0x3d4
c000f5f9:	ee                   	out    dx,al
c000f5fa:	b0 20                	mov    al,0x20
c000f5fc:	ba d5 03 00 00       	mov    edx,0x3d5
c000f601:	ee                   	out    dx,al
c000f602:	5b                   	pop    ebx
c000f603:	5e                   	pop    esi
c000f604:	c3                   	ret    

c000f605 <hwTextMode_update(VgaText*)>:
c000f605:	c3                   	ret    

c000f606 <hwTextMode_updateCursor(VgaText*)>:
c000f606:	56                   	push   esi
c000f607:	b9 19 00 00 00       	mov    ecx,0x19
c000f60c:	53                   	push   ebx
c000f60d:	be d4 03 00 00       	mov    esi,0x3d4
c000f612:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f616:	89 f2                	mov    edx,esi
c000f618:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f61e:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f624:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f627:	c1 e1 04             	shl    ecx,0x4
c000f62a:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f630:	b0 0f                	mov    al,0xf
c000f632:	ee                   	out    dx,al
c000f633:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f638:	88 c8                	mov    al,cl
c000f63a:	89 da                	mov    edx,ebx
c000f63c:	ee                   	out    dx,al
c000f63d:	b0 0e                	mov    al,0xe
c000f63f:	89 f2                	mov    edx,esi
c000f641:	ee                   	out    dx,al
c000f642:	89 c8                	mov    eax,ecx
c000f644:	89 da                	mov    edx,ebx
c000f646:	66 c1 e8 08          	shr    ax,0x8
c000f64a:	ee                   	out    dx,al
c000f64b:	5b                   	pop    ebx
c000f64c:	5e                   	pop    esi
c000f64d:	c3                   	ret    

c000f64e <hwTextMode_disableBlink(VgaText*, bool)>:
c000f64e:	ba da 03 00 00       	mov    edx,0x3da
c000f653:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f658:	75 18                	jne    c000f672 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f65a:	ec                   	in     al,dx
c000f65b:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f660:	b0 30                	mov    al,0x30
c000f662:	89 ca                	mov    edx,ecx
c000f664:	ee                   	out    dx,al
c000f665:	ba c1 03 00 00       	mov    edx,0x3c1
c000f66a:	ec                   	in     al,dx
c000f66b:	83 c8 08             	or     eax,0x8
c000f66e:	89 ca                	mov    edx,ecx
c000f670:	ee                   	out    dx,al
c000f671:	c3                   	ret    
c000f672:	ec                   	in     al,dx
c000f673:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f678:	b0 30                	mov    al,0x30
c000f67a:	89 ca                	mov    edx,ecx
c000f67c:	ee                   	out    dx,al
c000f67d:	ba c1 03 00 00       	mov    edx,0x3c1
c000f682:	ec                   	in     al,dx
c000f683:	83 e0 f7             	and    eax,0xfffffff7
c000f686:	89 ca                	mov    edx,ecx
c000f688:	ee                   	out    dx,al
c000f689:	c3                   	ret    

c000f68a <hwTextMode_scrollScreen(VgaText*)>:
c000f68a:	55                   	push   ebp
c000f68b:	bd 02 00 00 00       	mov    ebp,0x2
c000f690:	57                   	push   edi
c000f691:	56                   	push   esi
c000f692:	53                   	push   ebx
c000f693:	83 ec 1c             	sub    esp,0x1c
c000f696:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f69e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f6a2:	31 c0                	xor    eax,eax
c000f6a4:	eb 0b                	jmp    c000f6b1 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f6a6:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6ac:	74 57                	je     c000f705 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f6ae:	43                   	inc    ebx
c000f6af:	89 f0                	mov    eax,esi
c000f6b1:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f6b7:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f6bd:	88 13                	mov    BYTE PTR [ebx],dl
c000f6bf:	8d 70 01             	lea    esi,[eax+0x1]
c000f6c2:	83 fd 18             	cmp    ebp,0x18
c000f6c5:	75 df                	jne    c000f6a6 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f6c7:	a8 01                	test   al,0x1
c000f6c9:	75 13                	jne    c000f6de <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f6cb:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f6ce:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6d4:	75 d8                	jne    c000f6ae <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f6d6:	83 c4 1c             	add    esp,0x1c
c000f6d9:	5b                   	pop    ebx
c000f6da:	5e                   	pop    esi
c000f6db:	5f                   	pop    edi
c000f6dc:	5d                   	pop    ebp
c000f6dd:	c3                   	ret    
c000f6de:	83 ec 08             	sub    esp,0x8
c000f6e1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f6e5:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f6ec:	50                   	push   eax
c000f6ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6f1:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f6f8:	50                   	push   eax
c000f6f9:	e8 c0 0b 00 00       	call   c00102be <VgaText::combineColours(unsigned char, unsigned char)>
c000f6fe:	83 c4 10             	add    esp,0x10
c000f701:	88 07                	mov    BYTE PTR [edi],al
c000f703:	eb c9                	jmp    c000f6ce <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f705:	45                   	inc    ebp
c000f706:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f70e:	eb 8e                	jmp    c000f69e <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f710 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f710:	56                   	push   esi
c000f711:	53                   	push   ebx
c000f712:	83 ec 0c             	sub    esp,0xc
c000f715:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f719:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f71d:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f722:	50                   	push   eax
c000f723:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f728:	50                   	push   eax
c000f729:	e8 90 0b 00 00       	call   c00102be <VgaText::combineColours(unsigned char, unsigned char)>
c000f72e:	5a                   	pop    edx
c000f72f:	0f b6 c0             	movzx  eax,al
c000f732:	59                   	pop    ecx
c000f733:	50                   	push   eax
c000f734:	89 f0                	mov    eax,esi
c000f736:	0f be f0             	movsx  esi,al
c000f739:	56                   	push   esi
c000f73a:	e8 25 0c 00 00       	call   c0010364 <VgaText::combineCharAndColour(char, unsigned char)>
c000f73f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f743:	ba 19 00 00 00       	mov    edx,0x19
c000f748:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f74e:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f751:	8d 14 92             	lea    edx,[edx+edx*4]
c000f754:	c1 e1 04             	shl    ecx,0x4
c000f757:	c1 e2 04             	shl    edx,0x4
c000f75a:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f75e:	01 ca                	add    edx,ecx
c000f760:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f768:	83 c4 14             	add    esp,0x14
c000f76b:	5b                   	pop    ebx
c000f76c:	5e                   	pop    esi
c000f76d:	c3                   	ret    

c000f76e <setupTextMode()>:
c000f76e:	c7 05 78 bb 02 c0 4e f6 00 c0 	mov    DWORD PTR ds:0xc002bb78,0xc000f64e
c000f778:	c7 05 64 bb 02 c0 2a f5 00 c0 	mov    DWORD PTR ds:0xc002bb64,0xc000f52a
c000f782:	c7 05 60 bb 02 c0 6f f5 00 c0 	mov    DWORD PTR ds:0xc002bb60,0xc000f56f
c000f78c:	c7 05 6c bb 02 c0 8a f6 00 c0 	mov    DWORD PTR ds:0xc002bb6c,0xc000f68a
c000f796:	c7 05 74 bb 02 c0 b1 f5 00 c0 	mov    DWORD PTR ds:0xc002bb74,0xc000f5b1
c000f7a0:	c7 05 68 bb 02 c0 05 f6 00 c0 	mov    DWORD PTR ds:0xc002bb68,0xc000f605
c000f7aa:	c7 05 70 bb 02 c0 06 f6 00 c0 	mov    DWORD PTR ds:0xc002bb70,0xc000f606
c000f7b4:	c7 05 7c bb 02 c0 10 f7 00 c0 	mov    DWORD PTR ds:0xc002bb7c,0xc000f710
c000f7be:	c3                   	ret    

c000f7bf <kernel_main>:
c000f7bf:	57                   	push   edi
c000f7c0:	bf f9 03 00 00       	mov    edi,0x3f9
c000f7c5:	56                   	push   esi
c000f7c6:	31 f6                	xor    esi,esi
c000f7c8:	53                   	push   ebx
c000f7c9:	83 ec 10             	sub    esp,0x10
c000f7cc:	e8 47 09 00 00       	call   c0010118 <installVgaTextImplementation()>
c000f7d1:	e8 98 ff ff ff       	call   c000f76e <setupTextMode()>
c000f7d6:	89 f0                	mov    eax,esi
c000f7d8:	89 fa                	mov    edx,edi
c000f7da:	ee                   	out    dx,al
c000f7db:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f7e0:	b0 80                	mov    al,0x80
c000f7e2:	89 da                	mov    edx,ebx
c000f7e4:	ee                   	out    dx,al
c000f7e5:	b1 03                	mov    cl,0x3
c000f7e7:	ba f8 03 00 00       	mov    edx,0x3f8
c000f7ec:	88 c8                	mov    al,cl
c000f7ee:	ee                   	out    dx,al
c000f7ef:	89 f0                	mov    eax,esi
c000f7f1:	89 fa                	mov    edx,edi
c000f7f3:	ee                   	out    dx,al
c000f7f4:	88 c8                	mov    al,cl
c000f7f6:	89 da                	mov    edx,ebx
c000f7f8:	ee                   	out    dx,al
c000f7f9:	b0 c7                	mov    al,0xc7
c000f7fb:	ba fa 03 00 00       	mov    edx,0x3fa
c000f800:	ee                   	out    dx,al
c000f801:	b0 0b                	mov    al,0xb
c000f803:	ba fc 03 00 00       	mov    edx,0x3fc
c000f808:	ee                   	out    dx,al
c000f809:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	05 ff 0f 00 00       	add    eax,0xfff
c000f816:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f81b:	50                   	push   eax
c000f81c:	e8 b3 03 00 00       	call   c000fbd4 <Phys::physicalMemorySetup(unsigned int)>
c000f821:	e8 98 1f 00 00       	call   c00117be <Virt::virtualMemorySetup()>
c000f826:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f82c:	83 c4 10             	add    esp,0x10
c000f82f:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f835:	75 0e                	jne    c000f845 <kernel_main+0x86>
c000f837:	89 d8                	mov    eax,ebx
c000f839:	25 48 03 00 00       	and    eax,0x348
c000f83e:	3d 00 03 00 00       	cmp    eax,0x300
c000f843:	74 10                	je     c000f855 <kernel_main+0x96>
c000f845:	83 ec 0c             	sub    esp,0xc
c000f848:	68 43 95 02 c0       	push   0xc0029543
c000f84d:	e8 8f 99 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c000f852:	83 c4 10             	add    esp,0x10
c000f855:	83 ec 0c             	sub    esp,0xc
c000f858:	89 1d e0 ba 02 c0    	mov    DWORD PTR ds:0xc002bae0,ebx
c000f85e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f862:	53                   	push   ebx
c000f863:	e8 0a 21 00 00       	call   c0011972 <VAS::VAS()>
c000f868:	89 1d 24 bc 02 c0    	mov    DWORD PTR ds:0xc002bc24,ebx
c000f86e:	e8 ad 07 ff ff       	call   c0000020 <callGlobalConstructors>
c000f873:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f87a:	e8 51 fc ff ff       	call   c000f4d0 <malloc>
c000f87f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f882:	89 c6                	mov    esi,eax
c000f884:	e8 61 ea ff ff       	call   c000e2ea <Computer::Computer()>
c000f889:	6a 00                	push   0x0
c000f88b:	89 35 c8 ba 02 c0    	mov    DWORD PTR ds:0xc002bac8,esi
c000f891:	6a 00                	push   0x0
c000f893:	6a 00                	push   0x0
c000f895:	56                   	push   esi
c000f896:	e8 7f f2 ff ff       	call   c000eb1a <Computer::open(int, int, void*)>
c000f89b:	83 c4 14             	add    esp,0x14
c000f89e:	53                   	push   ebx
c000f89f:	e8 68 23 00 00       	call   c0011c0c <VAS::~VAS()>
c000f8a4:	c7 04 24 ec 7e 02 c0 	mov    DWORD PTR [esp],0xc0027eec
c000f8ab:	e8 31 99 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c000f8b0:	83 c4 20             	add    esp,0x20
c000f8b3:	5b                   	pop    ebx
c000f8b4:	5e                   	pop    esi
c000f8b5:	5f                   	pop    edi
c000f8b6:	c3                   	ret    

c000f8b7 <Phys::allocateDMA(unsigned long)>:
c000f8b7:	55                   	push   ebp
c000f8b8:	31 d2                	xor    edx,edx
c000f8ba:	57                   	push   edi
c000f8bb:	31 ed                	xor    ebp,ebp
c000f8bd:	56                   	push   esi
c000f8be:	31 c9                	xor    ecx,ecx
c000f8c0:	53                   	push   ebx
c000f8c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8c5:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f8cb:	31 c0                	xor    eax,eax
c000f8cd:	c1 ee 0c             	shr    esi,0xc
c000f8d0:	eb 17                	jmp    c000f8e9 <Phys::allocateDMA(unsigned long)+0x32>
c000f8d2:	85 c9                	test   ecx,ecx
c000f8d4:	75 04                	jne    c000f8da <Phys::allocateDMA(unsigned long)+0x23>
c000f8d6:	89 d5                	mov    ebp,edx
c000f8d8:	89 d0                	mov    eax,edx
c000f8da:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f8dd:	39 de                	cmp    esi,ebx
c000f8df:	74 20                	je     c000f901 <Phys::allocateDMA(unsigned long)+0x4a>
c000f8e1:	42                   	inc    edx
c000f8e2:	89 d9                	mov    ecx,ebx
c000f8e4:	83 fa 2f             	cmp    edx,0x2f
c000f8e7:	7f 11                	jg     c000f8fa <Phys::allocateDMA(unsigned long)+0x43>
c000f8e9:	80 ba 20 bb 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd44e0],0x0
c000f8f0:	74 e0                	je     c000f8d2 <Phys::allocateDMA(unsigned long)+0x1b>
c000f8f2:	31 c9                	xor    ecx,ecx
c000f8f4:	42                   	inc    edx
c000f8f5:	83 fa 2f             	cmp    edx,0x2f
c000f8f8:	7e ef                	jle    c000f8e9 <Phys::allocateDMA(unsigned long)+0x32>
c000f8fa:	5b                   	pop    ebx
c000f8fb:	31 c0                	xor    eax,eax
c000f8fd:	5e                   	pop    esi
c000f8fe:	5f                   	pop    edi
c000f8ff:	5d                   	pop    ebp
c000f900:	c3                   	ret    
c000f901:	8d 14 30             	lea    edx,[eax+esi*1]
c000f904:	89 d7                	mov    edi,edx
c000f906:	4f                   	dec    edi
c000f907:	79 03                	jns    c000f90c <Phys::allocateDMA(unsigned long)+0x55>
c000f909:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f90c:	c1 ff 04             	sar    edi,0x4
c000f90f:	89 c2                	mov    edx,eax
c000f911:	c1 fa 04             	sar    edx,0x4
c000f914:	39 fa                	cmp    edx,edi
c000f916:	75 2f                	jne    c000f947 <Phys::allocateDMA(unsigned long)+0x90>
c000f918:	85 db                	test   ebx,ebx
c000f91a:	74 1a                	je     c000f936 <Phys::allocateDMA(unsigned long)+0x7f>
c000f91c:	be 20 bb 02 c0       	mov    esi,0xc002bb20
c000f921:	8d 90 20 bb 02 c0    	lea    edx,[eax-0x3ffd44e0]
c000f927:	f7 d6                	not    esi
c000f929:	29 c6                	sub    esi,eax
c000f92b:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f92e:	42                   	inc    edx
c000f92f:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f932:	39 d9                	cmp    ecx,ebx
c000f934:	7f f5                	jg     c000f92b <Phys::allocateDMA(unsigned long)+0x74>
c000f936:	85 ff                	test   edi,edi
c000f938:	74 13                	je     c000f94d <Phys::allocateDMA(unsigned long)+0x96>
c000f93a:	5b                   	pop    ebx
c000f93b:	05 50 20 0c 00       	add    eax,0xc2050
c000f940:	5e                   	pop    esi
c000f941:	c1 e0 0c             	shl    eax,0xc
c000f944:	5f                   	pop    edi
c000f945:	5d                   	pop    ebp
c000f946:	c3                   	ret    
c000f947:	89 ea                	mov    edx,ebp
c000f949:	31 c9                	xor    ecx,ecx
c000f94b:	eb a7                	jmp    c000f8f4 <Phys::allocateDMA(unsigned long)+0x3d>
c000f94d:	5b                   	pop    ebx
c000f94e:	c1 e0 0c             	shl    eax,0xc
c000f951:	5e                   	pop    esi
c000f952:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f957:	5f                   	pop    edi
c000f958:	5d                   	pop    ebp
c000f959:	c3                   	ret    

c000f95a <Phys::freeDMA(unsigned long, unsigned long)>:
c000f95a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f95e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f962:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f968:	c1 e9 0c             	shr    ecx,0xc
c000f96b:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f970:	76 25                	jbe    c000f997 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f972:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f977:	c1 e8 0c             	shr    eax,0xc
c000f97a:	8d 50 10             	lea    edx,[eax+0x10]
c000f97d:	85 c9                	test   ecx,ecx
c000f97f:	74 15                	je     c000f996 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f981:	8d 82 20 bb 02 c0    	lea    eax,[edx-0x3ffd44e0]
c000f987:	8d 94 11 20 bb 02 c0 	lea    edx,[ecx+edx*1-0x3ffd44e0]
c000f98e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f991:	40                   	inc    eax
c000f992:	39 d0                	cmp    eax,edx
c000f994:	75 f8                	jne    c000f98e <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f996:	c3                   	ret    
c000f997:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f99d:	c1 ea 0c             	shr    edx,0xc
c000f9a0:	eb db                	jmp    c000f97d <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f9a2 <Phys::setPageState(unsigned long, bool)>:
c000f9a2:	56                   	push   esi
c000f9a3:	ba 01 00 00 00       	mov    edx,0x1
c000f9a8:	53                   	push   ebx
c000f9a9:	8b 35 78 aa 02 c0    	mov    esi,DWORD PTR ds:0xc002aa78
c000f9af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9b7:	89 c8                	mov    eax,ecx
c000f9b9:	83 e1 07             	and    ecx,0x7
c000f9bc:	c1 e8 03             	shr    eax,0x3
c000f9bf:	d3 e3                	shl    ebx,cl
c000f9c1:	01 c6                	add    esi,eax
c000f9c3:	d3 e2                	shl    edx,cl
c000f9c5:	f7 d2                	not    edx
c000f9c7:	20 16                	and    BYTE PTR [esi],dl
c000f9c9:	03 05 78 aa 02 c0    	add    eax,DWORD PTR ds:0xc002aa78
c000f9cf:	08 18                	or     BYTE PTR [eax],bl
c000f9d1:	5b                   	pop    ebx
c000f9d2:	5e                   	pop    esi
c000f9d3:	c3                   	ret    

c000f9d4 <Phys::getPageState(unsigned long)>:
c000f9d4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9d8:	8b 15 78 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa78
c000f9de:	89 c8                	mov    eax,ecx
c000f9e0:	83 e1 07             	and    ecx,0x7
c000f9e3:	c1 e8 03             	shr    eax,0x3
c000f9e6:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f9ea:	d3 f8                	sar    eax,cl
c000f9ec:	83 e0 01             	and    eax,0x1
c000f9ef:	c3                   	ret    

c000f9f0 <Phys::freePage(unsigned long)>:
c000f9f0:	53                   	push   ebx
c000f9f1:	83 ec 08             	sub    esp,0x8
c000f9f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9f8:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f9fe:	76 57                	jbe    c000fa57 <Phys::freePage(unsigned long)+0x67>
c000fa00:	c1 eb 0c             	shr    ebx,0xc
c000fa03:	53                   	push   ebx
c000fa04:	e8 cb ff ff ff       	call   c000f9d4 <Phys::getPageState(unsigned long)>
c000fa09:	5a                   	pop    edx
c000fa0a:	84 c0                	test   al,al
c000fa0c:	74 5b                	je     c000fa69 <Phys::freePage(unsigned long)+0x79>
c000fa0e:	a1 0c bb 02 c0       	mov    eax,ds:0xc002bb0c
c000fa13:	48                   	dec    eax
c000fa14:	a3 0c bb 02 c0       	mov    ds:0xc002bb0c,eax
c000fa19:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa1c:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa1f:	c1 e0 02             	shl    eax,0x2
c000fa22:	99                   	cdq    
c000fa23:	f7 3d 10 bb 02 c0    	idiv   DWORD PTR ds:0xc002bb10
c000fa29:	39 05 08 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb08,eax
c000fa2f:	75 13                	jne    c000fa44 <Phys::freePage(unsigned long)+0x54>
c000fa31:	83 ec 08             	sub    esp,0x8
c000fa34:	6a 00                	push   0x0
c000fa36:	53                   	push   ebx
c000fa37:	e8 66 ff ff ff       	call   c000f9a2 <Phys::setPageState(unsigned long, bool)>
c000fa3c:	83 c4 10             	add    esp,0x10
c000fa3f:	83 c4 08             	add    esp,0x8
c000fa42:	5b                   	pop    ebx
c000fa43:	c3                   	ret    
c000fa44:	83 ec 0c             	sub    esp,0xc
c000fa47:	a3 08 bb 02 c0       	mov    ds:0xc002bb08,eax
c000fa4c:	50                   	push   eax
c000fa4d:	e8 5a 0a 00 00       	call   c00104ac <VgaText::updateRAMUsageDisplay(int)>
c000fa52:	83 c4 10             	add    esp,0x10
c000fa55:	eb da                	jmp    c000fa31 <Phys::freePage(unsigned long)+0x41>
c000fa57:	68 00 10 00 00       	push   0x1000
c000fa5c:	53                   	push   ebx
c000fa5d:	e8 f8 fe ff ff       	call   c000f95a <Phys::freeDMA(unsigned long, unsigned long)>
c000fa62:	59                   	pop    ecx
c000fa63:	5b                   	pop    ebx
c000fa64:	83 c4 08             	add    esp,0x8
c000fa67:	5b                   	pop    ebx
c000fa68:	c3                   	ret    
c000fa69:	c7 44 24 10 07 7f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0027f07
c000fa71:	83 c4 08             	add    esp,0x8
c000fa74:	5b                   	pop    ebx
c000fa75:	e9 67 97 00 00       	jmp    c00191e1 <Krnl::panic(char const*)>

c000fa7a <Phys::allocatePage()>:
c000fa7a:	56                   	push   esi
c000fa7b:	53                   	push   ebx
c000fa7c:	51                   	push   ecx
c000fa7d:	8b 35 00 bb 02 c0    	mov    esi,DWORD PTR ds:0xc002bb00
c000fa83:	89 f3                	mov    ebx,esi
c000fa85:	eb 0a                	jmp    c000fa91 <Phys::allocatePage()+0x17>
c000fa87:	89 1d 00 bb 02 c0    	mov    DWORD PTR ds:0xc002bb00,ebx
c000fa8d:	39 de                	cmp    esi,ebx
c000fa8f:	74 24                	je     c000fab5 <Phys::allocatePage()+0x3b>
c000fa91:	53                   	push   ebx
c000fa92:	e8 3d ff ff ff       	call   c000f9d4 <Phys::getPageState(unsigned long)>
c000fa97:	5a                   	pop    edx
c000fa98:	84 c0                	test   al,al
c000fa9a:	74 5a                	je     c000faf6 <Phys::allocatePage()+0x7c>
c000fa9c:	43                   	inc    ebx
c000fa9d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000faa3:	75 e2                	jne    c000fa87 <Phys::allocatePage()+0xd>
c000faa5:	31 db                	xor    ebx,ebx
c000faa7:	c7 05 00 bb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bb00,0x0
c000fab1:	39 de                	cmp    esi,ebx
c000fab3:	75 dc                	jne    c000fa91 <Phys::allocatePage()+0x17>
c000fab5:	83 ec 0c             	sub    esp,0xc
c000fab8:	68 1d 7f 02 c0       	push   0xc0027f1d
c000fabd:	e8 db 2b 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000fac2:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fac9:	e8 e9 fd ff ff       	call   c000f8b7 <Phys::allocateDMA(unsigned long)>
c000face:	83 c4 10             	add    esp,0x10
c000fad1:	85 c0                	test   eax,eax
c000fad3:	75 56                	jne    c000fb2b <Phys::allocatePage()+0xb1>
c000fad5:	83 ec 0c             	sub    esp,0xc
c000fad8:	68 2e 7f 02 c0       	push   0xc0027f2e
c000fadd:	e8 ff 96 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c000fae2:	83 c4 10             	add    esp,0x10
c000fae5:	8b 1d 00 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb00
c000faeb:	53                   	push   ebx
c000faec:	e8 e3 fe ff ff       	call   c000f9d4 <Phys::getPageState(unsigned long)>
c000faf1:	5a                   	pop    edx
c000faf2:	84 c0                	test   al,al
c000faf4:	75 a6                	jne    c000fa9c <Phys::allocatePage()+0x22>
c000faf6:	6a 01                	push   0x1
c000faf8:	53                   	push   ebx
c000faf9:	e8 a4 fe ff ff       	call   c000f9a2 <Phys::setPageState(unsigned long, bool)>
c000fafe:	a1 0c bb 02 c0       	mov    eax,ds:0xc002bb0c
c000fb03:	59                   	pop    ecx
c000fb04:	40                   	inc    eax
c000fb05:	5b                   	pop    ebx
c000fb06:	a3 0c bb 02 c0       	mov    ds:0xc002bb0c,eax
c000fb0b:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb0e:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb11:	c1 e0 02             	shl    eax,0x2
c000fb14:	99                   	cdq    
c000fb15:	f7 3d 10 bb 02 c0    	idiv   DWORD PTR ds:0xc002bb10
c000fb1b:	39 05 08 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb08,eax
c000fb21:	75 0c                	jne    c000fb2f <Phys::allocatePage()+0xb5>
c000fb23:	a1 00 bb 02 c0       	mov    eax,ds:0xc002bb00
c000fb28:	c1 e0 0c             	shl    eax,0xc
c000fb2b:	5a                   	pop    edx
c000fb2c:	5b                   	pop    ebx
c000fb2d:	5e                   	pop    esi
c000fb2e:	c3                   	ret    
c000fb2f:	83 ec 0c             	sub    esp,0xc
c000fb32:	a3 08 bb 02 c0       	mov    ds:0xc002bb08,eax
c000fb37:	50                   	push   eax
c000fb38:	e8 6f 09 00 00       	call   c00104ac <VgaText::updateRAMUsageDisplay(int)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	eb e1                	jmp    c000fb23 <Phys::allocatePage()+0xa9>

c000fb42 <Phys::allocateContiguousPages(int)>:
c000fb42:	57                   	push   edi
c000fb43:	56                   	push   esi
c000fb44:	53                   	push   ebx
c000fb45:	31 db                	xor    ebx,ebx
c000fb47:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fb4b:	e8 d7 c6 00 00       	call   c001c227 <lockScheduler()>
c000fb50:	85 db                	test   ebx,ebx
c000fb52:	75 11                	jne    c000fb65 <Phys::allocateContiguousPages(int)+0x23>
c000fb54:	e8 21 ff ff ff       	call   c000fa7a <Phys::allocatePage()>
c000fb59:	83 ff 01             	cmp    edi,0x1
c000fb5c:	89 c6                	mov    esi,eax
c000fb5e:	74 21                	je     c000fb81 <Phys::allocateContiguousPages(int)+0x3f>
c000fb60:	bb 01 00 00 00       	mov    ebx,0x1
c000fb65:	e8 10 ff ff ff       	call   c000fa7a <Phys::allocatePage()>
c000fb6a:	89 da                	mov    edx,ebx
c000fb6c:	c1 e2 0c             	shl    edx,0xc
c000fb6f:	01 f2                	add    edx,esi
c000fb71:	39 c2                	cmp    edx,eax
c000fb73:	74 17                	je     c000fb8c <Phys::allocateContiguousPages(int)+0x4a>
c000fb75:	bb 01 00 00 00       	mov    ebx,0x1
c000fb7a:	89 c6                	mov    esi,eax
c000fb7c:	83 ff 01             	cmp    edi,0x1
c000fb7f:	75 e4                	jne    c000fb65 <Phys::allocateContiguousPages(int)+0x23>
c000fb81:	e8 a3 c6 00 00       	call   c001c229 <unlockScheduler()>
c000fb86:	89 f0                	mov    eax,esi
c000fb88:	5b                   	pop    ebx
c000fb89:	5e                   	pop    esi
c000fb8a:	5f                   	pop    edi
c000fb8b:	c3                   	ret    
c000fb8c:	43                   	inc    ebx
c000fb8d:	39 fb                	cmp    ebx,edi
c000fb8f:	75 bf                	jne    c000fb50 <Phys::allocateContiguousPages(int)+0xe>
c000fb91:	e8 93 c6 00 00       	call   c001c229 <unlockScheduler()>
c000fb96:	89 f0                	mov    eax,esi
c000fb98:	5b                   	pop    ebx
c000fb99:	5e                   	pop    esi
c000fb9a:	5f                   	pop    edi
c000fb9b:	c3                   	ret    

c000fb9c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fb9c:	56                   	push   esi
c000fb9d:	53                   	push   ebx
c000fb9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fba2:	39 1d 04 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb04,ebx
c000fba8:	73 06                	jae    c000fbb0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fbaa:	89 1d 04 bb 02 c0    	mov    DWORD PTR ds:0xc002bb04,ebx
c000fbb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbb4:	c1 eb 0c             	shr    ebx,0xc
c000fbb7:	c1 e8 0c             	shr    eax,0xc
c000fbba:	39 d8                	cmp    eax,ebx
c000fbbc:	73 13                	jae    c000fbd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fbbe:	6a 00                	push   0x0
c000fbc0:	8d 70 01             	lea    esi,[eax+0x1]
c000fbc3:	50                   	push   eax
c000fbc4:	e8 d9 fd ff ff       	call   c000f9a2 <Phys::setPageState(unsigned long, bool)>
c000fbc9:	5a                   	pop    edx
c000fbca:	89 f0                	mov    eax,esi
c000fbcc:	59                   	pop    ecx
c000fbcd:	39 f3                	cmp    ebx,esi
c000fbcf:	75 ed                	jne    c000fbbe <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fbd1:	5b                   	pop    ebx
c000fbd2:	5e                   	pop    esi
c000fbd3:	c3                   	ret    

c000fbd4 <Phys::physicalMemorySetup(unsigned int)>:
c000fbd4:	55                   	push   ebp
c000fbd5:	57                   	push   edi
c000fbd6:	56                   	push   esi
c000fbd7:	53                   	push   ebx
c000fbd8:	31 db                	xor    ebx,ebx
c000fbda:	83 ec 40             	sub    esp,0x40
c000fbdd:	6a 30                	push   0x30
c000fbdf:	6a 00                	push   0x0
c000fbe1:	68 20 bb 02 c0       	push   0xc002bb20
c000fbe6:	e8 a0 0a ff ff       	call   c000068b <memset>
c000fbeb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fbef:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fbf4:	05 00 10 00 00       	add    eax,0x1000
c000fbf9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fbfd:	83 c4 10             	add    esp,0x10
c000fc00:	83 ec 08             	sub    esp,0x8
c000fc03:	6a 01                	push   0x1
c000fc05:	53                   	push   ebx
c000fc06:	43                   	inc    ebx
c000fc07:	e8 96 fd ff ff       	call   c000f9a2 <Phys::setPageState(unsigned long, bool)>
c000fc0c:	83 c4 10             	add    esp,0x10
c000fc0f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fc15:	75 e9                	jne    c000fc00 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fc17:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fc1e:	66 85 c0             	test   ax,ax
c000fc21:	0f 84 8e 01 00 00    	je     c000fdb5 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fc27:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fc2b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fc33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc37:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fc3c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fc40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fc48:	eb 15                	jmp    c000fc5f <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fc4a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fc4e:	83 c3 18             	add    ebx,0x18
c000fc51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc55:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fc59:	0f 84 66 01 00 00    	je     c000fdc5 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fc5f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fc62:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fc65:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fc68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fc70:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fc72:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fc75:	01 f0                	add    eax,esi
c000fc77:	55                   	push   ebp
c000fc78:	11 fa                	adc    edx,edi
c000fc7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fc82:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fc86:	56                   	push   esi
c000fc87:	68 68 7f 02 c0       	push   0xc0027f68
c000fc8c:	e8 0c 2a 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000fc91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc95:	83 c4 10             	add    esp,0x10
c000fc98:	09 f8                	or     eax,edi
c000fc9a:	0f 85 25 01 00 00    	jne    c000fdc5 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fca0:	4d                   	dec    ebp
c000fca1:	75 a7                	jne    c000fc4a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fca3:	ba 00 00 08 00       	mov    edx,0x80000
c000fca8:	89 c1                	mov    ecx,eax
c000fcaa:	39 f2                	cmp    edx,esi
c000fcac:	19 f9                	sbb    ecx,edi
c000fcae:	0f 82 a7 00 00 00    	jb     c000fd5b <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fcb4:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fcb8:	89 c1                	mov    ecx,eax
c000fcba:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fcbe:	0f 83 97 00 00 00    	jae    c000fd5b <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fcc4:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fcc9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fccd:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fcd1:	39 fa                	cmp    edx,edi
c000fcd3:	19 e8                	sbb    eax,ebp
c000fcd5:	0f 82 14 01 00 00    	jb     c000fdef <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fcdb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fcdf:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fce3:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fce9:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcee:	83 d5 ff             	adc    ebp,0xffffffff
c000fcf1:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fcf5:	31 c0                	xor    eax,eax
c000fcf7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fcfb:	39 fa                	cmp    edx,edi
c000fcfd:	89 c1                	mov    ecx,eax
c000fcff:	19 e9                	sbb    ecx,ebp
c000fd01:	0f 83 43 ff ff ff    	jae    c000fc4a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd07:	be 00 00 08 00       	mov    esi,0x80000
c000fd0c:	50                   	push   eax
c000fd0d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fd11:	57                   	push   edi
c000fd12:	56                   	push   esi
c000fd13:	68 8c 7f 02 c0       	push   0xc0027f8c
c000fd18:	e8 80 29 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000fd1d:	5a                   	pop    edx
c000fd1e:	59                   	pop    ecx
c000fd1f:	57                   	push   edi
c000fd20:	56                   	push   esi
c000fd21:	e8 76 fe ff ff       	call   c000fb9c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fd26:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fd2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fd2e:	83 c4 0c             	add    esp,0xc
c000fd31:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fd35:	03 05 10 bb 02 c0    	add    eax,DWORD PTR ds:0xc002bb10
c000fd3b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd42:	a3 10 bb 02 c0       	mov    ds:0xc002bb10,eax
c000fd47:	52                   	push   edx
c000fd48:	50                   	push   eax
c000fd49:	68 4a 7f 02 c0       	push   0xc0027f4a
c000fd4e:	e8 4a 29 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c000fd53:	83 c4 10             	add    esp,0x10
c000fd56:	e9 ef fe ff ff       	jmp    c000fc4a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd5b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fd5f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd63:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd67:	39 ea                	cmp    edx,ebp
c000fd69:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fd6d:	0f 82 d7 fe ff ff    	jb     c000fc4a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd73:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fd78:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fd7c:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fd80:	0f 83 c4 fe ff ff    	jae    c000fc4a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd86:	39 ee                	cmp    esi,ebp
c000fd88:	89 f8                	mov    eax,edi
c000fd8a:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fd8e:	0f 83 78 ff ff ff    	jae    c000fd0c <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fd94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fd9c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fda0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fda4:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fda8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fdac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fdb0:	e9 57 ff ff ff       	jmp    c000fd0c <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fdb5:	83 ec 0c             	sub    esp,0xc
c000fdb8:	68 3c 7f 02 c0       	push   0xc0027f3c
c000fdbd:	e8 1f 94 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c000fdc2:	83 c4 10             	add    esp,0x10
c000fdc5:	bb 40 01 00 00       	mov    ebx,0x140
c000fdca:	83 ec 08             	sub    esp,0x8
c000fdcd:	6a 00                	push   0x0
c000fdcf:	53                   	push   ebx
c000fdd0:	43                   	inc    ebx
c000fdd1:	e8 cc fb ff ff       	call   c000f9a2 <Phys::setPageState(unsigned long, bool)>
c000fdd6:	ff 05 10 bb 02 c0    	inc    DWORD PTR ds:0xc002bb10
c000fddc:	83 c4 10             	add    esp,0x10
c000fddf:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fde5:	75 e3                	jne    c000fdca <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fde7:	83 c4 3c             	add    esp,0x3c
c000fdea:	5b                   	pop    ebx
c000fdeb:	5e                   	pop    esi
c000fdec:	5f                   	pop    edi
c000fded:	5d                   	pop    ebp
c000fdee:	c3                   	ret    
c000fdef:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fdf7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fdff:	e9 d7 fe ff ff       	jmp    c000fcdb <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fe04 <Pipe::isAtty()>:
c000fe04:	31 c0                	xor    eax,eax
c000fe06:	c3                   	ret    
c000fe07:	90                   	nop

c000fe08 <Pipe::~Pipe()>:
c000fe08:	83 ec 0c             	sub    esp,0xc
c000fe0b:	ba f8 7f 02 c0       	mov    edx,0xc0027ff8
c000fe10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe14:	89 10                	mov    DWORD PTR [eax],edx
c000fe16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe1a:	83 ec 0c             	sub    esp,0xc
c000fe1d:	50                   	push   eax
c000fe1e:	e8 29 16 00 00       	call   c001144c <UnixFile::~UnixFile()>
c000fe23:	83 c4 10             	add    esp,0x10
c000fe26:	90                   	nop
c000fe27:	83 c4 0c             	add    esp,0xc
c000fe2a:	c3                   	ret    
c000fe2b:	90                   	nop

c000fe2c <Pipe::~Pipe()>:
c000fe2c:	83 ec 0c             	sub    esp,0xc
c000fe2f:	83 ec 0c             	sub    esp,0xc
c000fe32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe36:	e8 cd ff ff ff       	call   c000fe08 <Pipe::~Pipe()>
c000fe3b:	83 c4 10             	add    esp,0x10
c000fe3e:	83 ec 08             	sub    esp,0x8
c000fe41:	6a 20                	push   0x20
c000fe43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe47:	e8 71 27 00 00       	call   c00125bd <operator delete(void*, unsigned long)>
c000fe4c:	83 c4 10             	add    esp,0x10
c000fe4f:	83 c4 0c             	add    esp,0xc
c000fe52:	c3                   	ret    
c000fe53:	90                   	nop

c000fe54 <Pipe::read(unsigned long long, void*, int*)>:
c000fe54:	55                   	push   ebp
c000fe55:	57                   	push   edi
c000fe56:	56                   	push   esi
c000fe57:	53                   	push   ebx
c000fe58:	83 ec 1c             	sub    esp,0x1c
c000fe5b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fe5f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fe63:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fe67:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fe6a:	89 c8                	mov    eax,ecx
c000fe6c:	99                   	cdq    
c000fe6d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fe71:	74 19                	je     c000fe8c <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe73:	39 f9                	cmp    ecx,edi
c000fe75:	89 d1                	mov    ecx,edx
c000fe77:	19 f1                	sbb    ecx,esi
c000fe79:	73 11                	jae    c000fe8c <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe7b:	e8 a7 c3 00 00       	call   c001c227 <lockScheduler()>
c000fe80:	e8 dd c6 00 00       	call   c001c562 <schedule()>
c000fe85:	e8 9f c3 00 00       	call   c001c229 <unlockScheduler()>
c000fe8a:	eb db                	jmp    c000fe67 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fe8c:	39 f8                	cmp    eax,edi
c000fe8e:	89 d1                	mov    ecx,edx
c000fe90:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fe94:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fe98:	19 f1                	sbb    ecx,esi
c000fe9a:	73 08                	jae    c000fea4 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fe9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fea0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fea4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fea7:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000feaa:	29 c6                	sub    esi,eax
c000feac:	89 f1                	mov    ecx,esi
c000feae:	c1 f9 1f             	sar    ecx,0x1f
c000feb1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000feb5:	89 ca                	mov    edx,ecx
c000feb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000febb:	19 d1                	sbb    ecx,edx
c000febd:	73 04                	jae    c000fec3 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000febf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fec3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fec7:	89 fd                	mov    ebp,edi
c000fec9:	29 f5                	sub    ebp,esi
c000fecb:	85 f6                	test   esi,esi
c000fecd:	74 12                	je     c000fee1 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fecf:	52                   	push   edx
c000fed0:	56                   	push   esi
c000fed1:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fed4:	50                   	push   eax
c000fed5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fed9:	e8 77 07 ff ff       	call   c0000655 <memcpy>
c000fede:	83 c4 10             	add    esp,0x10
c000fee1:	85 ed                	test   ebp,ebp
c000fee3:	74 12                	je     c000fef7 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fee5:	50                   	push   eax
c000fee6:	55                   	push   ebp
c000fee7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000feea:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000feee:	56                   	push   esi
c000feef:	e8 61 07 ff ff       	call   c0000655 <memcpy>
c000fef4:	83 c4 10             	add    esp,0x10
c000fef7:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fefa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fefd:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ff00:	99                   	cdq    
c000ff01:	89 f7                	mov    edi,esi
c000ff03:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ff07:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ff0b:	c1 ff 1f             	sar    edi,0x1f
c000ff0e:	57                   	push   edi
c000ff0f:	56                   	push   esi
c000ff10:	52                   	push   edx
c000ff11:	50                   	push   eax
c000ff12:	e8 15 49 01 00       	call   c002482c <__umoddi3>
c000ff17:	83 c4 10             	add    esp,0x10
c000ff1a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ff1d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff22:	75 10                	jne    c000ff34 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ff24:	83 ec 0c             	sub    esp,0xc
c000ff27:	68 b5 7f 02 c0       	push   0xc0027fb5
c000ff2c:	e8 b0 92 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c000ff31:	83 c4 10             	add    esp,0x10
c000ff34:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff3c:	89 10                	mov    DWORD PTR [eax],edx
c000ff3e:	83 c4 1c             	add    esp,0x1c
c000ff41:	31 c0                	xor    eax,eax
c000ff43:	5b                   	pop    ebx
c000ff44:	5e                   	pop    esi
c000ff45:	5f                   	pop    edi
c000ff46:	5d                   	pop    ebp
c000ff47:	c3                   	ret    

c000ff48 <Pipe::write(unsigned long long, void*, int*)>:
c000ff48:	55                   	push   ebp
c000ff49:	57                   	push   edi
c000ff4a:	56                   	push   esi
c000ff4b:	53                   	push   ebx
c000ff4c:	83 ec 1c             	sub    esp,0x1c
c000ff4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ff53:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ff57:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ff5b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff5e:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ff61:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ff64:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ff68:	89 de                	mov    esi,ebx
c000ff6a:	89 df                	mov    edi,ebx
c000ff6c:	c1 ff 1f             	sar    edi,0x1f
c000ff6f:	01 c6                	add    esi,eax
c000ff71:	89 c8                	mov    eax,ecx
c000ff73:	11 d7                	adc    edi,edx
c000ff75:	99                   	cdq    
c000ff76:	39 f1                	cmp    ecx,esi
c000ff78:	89 d0                	mov    eax,edx
c000ff7a:	19 f8                	sbb    eax,edi
c000ff7c:	b8 01 00 00 00       	mov    eax,0x1
c000ff81:	0f 82 80 00 00 00    	jb     c0010007 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ff87:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ff8a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ff8d:	01 d8                	add    eax,ebx
c000ff8f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ff93:	99                   	cdq    
c000ff94:	f7 f9                	idiv   ecx
c000ff96:	29 d1                	sub    ecx,edx
c000ff98:	89 d7                	mov    edi,edx
c000ff9a:	89 c8                	mov    eax,ecx
c000ff9c:	99                   	cdq    
c000ff9d:	39 ce                	cmp    esi,ecx
c000ff9f:	19 d3                	sbb    ebx,edx
c000ffa1:	bb 00 00 00 00       	mov    ebx,0x0
c000ffa6:	72 04                	jb     c000ffac <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ffa8:	89 f3                	mov    ebx,esi
c000ffaa:	29 cb                	sub    ebx,ecx
c000ffac:	89 f1                	mov    ecx,esi
c000ffae:	29 d9                	sub    ecx,ebx
c000ffb0:	74 1a                	je     c000ffcc <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ffb2:	52                   	push   edx
c000ffb3:	51                   	push   ecx
c000ffb4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ffb8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ffbc:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ffbf:	57                   	push   edi
c000ffc0:	e8 90 06 ff ff       	call   c0000655 <memcpy>
c000ffc5:	83 c4 10             	add    esp,0x10
c000ffc8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ffcc:	85 db                	test   ebx,ebx
c000ffce:	74 12                	je     c000ffe2 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000ffd0:	50                   	push   eax
c000ffd1:	53                   	push   ebx
c000ffd2:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000ffd6:	51                   	push   ecx
c000ffd7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ffda:	e8 76 06 ff ff       	call   c0000655 <memcpy>
c000ffdf:	83 c4 10             	add    esp,0x10
c000ffe2:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000ffe5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ffea:	75 10                	jne    c000fffc <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000ffec:	83 ec 0c             	sub    esp,0xc
c000ffef:	68 d1 7f 02 c0       	push   0xc0027fd1
c000fff4:	e8 e8 91 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c000fff9:	83 c4 10             	add    esp,0x10
c000fffc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010000:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010003:	89 38                	mov    DWORD PTR [eax],edi
c0010005:	31 c0                	xor    eax,eax
c0010007:	83 c4 1c             	add    esp,0x1c
c001000a:	5b                   	pop    ebx
c001000b:	5e                   	pop    esi
c001000c:	5f                   	pop    edi
c001000d:	5d                   	pop    ebp
c001000e:	c3                   	ret    
c001000f:	90                   	nop

c0010010 <Pipe::Pipe(int)>:
c0010010:	83 ec 0c             	sub    esp,0xc
c0010013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010017:	83 ec 08             	sub    esp,0x8
c001001a:	6a 00                	push   0x0
c001001c:	50                   	push   eax
c001001d:	e8 48 12 00 00       	call   c001126a <UnixFile::UnixFile(int)>
c0010022:	83 c4 10             	add    esp,0x10
c0010025:	ba f8 7f 02 c0       	mov    edx,0xc0027ff8
c001002a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001002e:	89 10                	mov    DWORD PTR [eax],edx
c0010030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010034:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010038:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001003b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001003f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001004a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010051:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010055:	83 ec 0c             	sub    esp,0xc
c0010058:	50                   	push   eax
c0010059:	e8 72 f4 ff ff       	call   c000f4d0 <malloc>
c001005e:	83 c4 10             	add    esp,0x10
c0010061:	89 c2                	mov    edx,eax
c0010063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010067:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001006a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001006e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010072:	90                   	nop
c0010073:	83 c4 0c             	add    esp,0xc
c0010076:	c3                   	ret    
c0010077:	90                   	nop

c0010078 <VgaText::isAtty()>:
c0010078:	b0 01                	mov    al,0x1
c001007a:	c3                   	ret    
c001007b:	90                   	nop

c001007c <VgaText::~VgaText()>:
c001007c:	83 ec 0c             	sub    esp,0xc
c001007f:	ba b4 80 02 c0       	mov    edx,0xc00280b4
c0010084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010088:	89 10                	mov    DWORD PTR [eax],edx
c001008a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001008e:	83 ec 0c             	sub    esp,0xc
c0010091:	50                   	push   eax
c0010092:	e8 b5 13 00 00       	call   c001144c <UnixFile::~UnixFile()>
c0010097:	83 c4 10             	add    esp,0x10
c001009a:	90                   	nop
c001009b:	83 c4 0c             	add    esp,0xc
c001009e:	c3                   	ret    
c001009f:	90                   	nop

c00100a0 <VgaText::~VgaText()>:
c00100a0:	83 ec 0c             	sub    esp,0xc
c00100a3:	83 ec 0c             	sub    esp,0xc
c00100a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100aa:	e8 cd ff ff ff       	call   c001007c <VgaText::~VgaText()>
c00100af:	83 c4 10             	add    esp,0x10
c00100b2:	83 ec 08             	sub    esp,0x8
c00100b5:	68 60 12 00 00       	push   0x1260
c00100ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100be:	e8 fa 24 00 00       	call   c00125bd <operator delete(void*, unsigned long)>
c00100c3:	83 c4 10             	add    esp,0x10
c00100c6:	83 c4 0c             	add    esp,0xc
c00100c9:	c3                   	ret    

c00100ca <VgaText::read(unsigned long long, void*, int*)>:
c00100ca:	83 ec 10             	sub    esp,0x10
c00100cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100d1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00100d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100d9:	e8 f3 57 00 00       	call   c00158d1 <readKeyboard(VgaText*, char*, unsigned long)>
c00100de:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00100e2:	89 02                	mov    DWORD PTR [edx],eax
c00100e4:	31 c0                	xor    eax,eax
c00100e6:	83 c4 1c             	add    esp,0x1c
c00100e9:	c3                   	ret    

c00100ea <setTerminalScrollLock(bool)>:
c00100ea:	c3                   	ret    

c00100eb <addToTerminalCycle(VgaText*)>:
c00100eb:	8b 15 80 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb80
c00100f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100f5:	85 d2                	test   edx,edx
c00100f7:	75 0c                	jne    c0010105 <addToTerminalCycle(VgaText*)+0x1a>
c00100f9:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00100ff:	a3 80 bb 02 c0       	mov    ds:0xc002bb80,eax
c0010104:	c3                   	ret    
c0010105:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001010b:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010111:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010117:	c3                   	ret    

c0010118 <installVgaTextImplementation()>:
c0010118:	83 ec 10             	sub    esp,0x10
c001011b:	6a 20                	push   0x20
c001011d:	6a 00                	push   0x0
c001011f:	68 60 bb 02 c0       	push   0xc002bb60
c0010124:	e8 62 05 ff ff       	call   c000068b <memset>
c0010129:	83 c4 1c             	add    esp,0x1c
c001012c:	c3                   	ret    

c001012d <scrollTerminalScrollLock(int)>:
c001012d:	c3                   	ret    

c001012e <VgaText::load()>:
c001012e:	53                   	push   ebx
c001012f:	31 c0                	xor    eax,eax
c0010131:	83 ec 58             	sub    esp,0x58
c0010134:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010138:	89 e2                	mov    edx,esp
c001013a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001013e:	40                   	inc    eax
c001013f:	83 f8 50             	cmp    eax,0x50
c0010142:	75 f6                	jne    c001013a <VgaText::load()+0xc>
c0010144:	31 c0                	xor    eax,eax
c0010146:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c001014d:	84 c9                	test   cl,cl
c001014f:	74 06                	je     c0010157 <VgaText::load()+0x29>
c0010151:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010154:	40                   	inc    eax
c0010155:	eb ef                	jmp    c0010146 <VgaText::load()+0x18>
c0010157:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c001015d:	85 c0                	test   eax,eax
c001015f:	74 09                	je     c001016a <VgaText::load()+0x3c>
c0010161:	51                   	push   ecx
c0010162:	51                   	push   ecx
c0010163:	52                   	push   edx
c0010164:	53                   	push   ebx
c0010165:	ff d0                	call   eax
c0010167:	83 c4 10             	add    esp,0x10
c001016a:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010170:	85 c0                	test   eax,eax
c0010172:	74 09                	je     c001017d <VgaText::load()+0x4f>
c0010174:	83 ec 0c             	sub    esp,0xc
c0010177:	53                   	push   ebx
c0010178:	ff d0                	call   eax
c001017a:	83 c4 10             	add    esp,0x10
c001017d:	83 c4 58             	add    esp,0x58
c0010180:	5b                   	pop    ebx
c0010181:	c3                   	ret    

c0010182 <VgaText::updateCursor()>:
c0010182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010186:	39 05 84 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb84,eax
c001018c:	75 0c                	jne    c001019a <VgaText::updateCursor()+0x18>
c001018e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010194:	85 c0                	test   eax,eax
c0010196:	74 02                	je     c001019a <VgaText::updateCursor()+0x18>
c0010198:	ff e0                	jmp    eax
c001019a:	c3                   	ret    
c001019b:	90                   	nop

c001019c <VgaText::showCursor(bool)>:
c001019c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101a4:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00101aa:	c3                   	ret    
c00101ab:	90                   	nop

c00101ac <VgaText::disableBlink(bool)>:
c00101ac:	56                   	push   esi
c00101ad:	53                   	push   ebx
c00101ae:	51                   	push   ecx
c00101af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00101b7:	39 1d 84 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb84,ebx
c00101bd:	75 18                	jne    c00101d7 <VgaText::disableBlink(bool)+0x2b>
c00101bf:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00101c5:	85 c0                	test   eax,eax
c00101c7:	74 0e                	je     c00101d7 <VgaText::disableBlink(bool)+0x2b>
c00101c9:	89 f1                	mov    ecx,esi
c00101cb:	52                   	push   edx
c00101cc:	52                   	push   edx
c00101cd:	0f b6 d1             	movzx  edx,cl
c00101d0:	52                   	push   edx
c00101d1:	53                   	push   ebx
c00101d2:	ff d0                	call   eax
c00101d4:	83 c4 10             	add    esp,0x10
c00101d7:	89 f0                	mov    eax,esi
c00101d9:	83 f0 01             	xor    eax,0x1
c00101dc:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00101e2:	58                   	pop    eax
c00101e3:	5b                   	pop    ebx
c00101e4:	5e                   	pop    esi
c00101e5:	c3                   	ret    

c00101e6 <VgaText::doANSI_SGR(int)>:
c00101e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101ee:	85 d2                	test   edx,edx
c00101f0:	75 14                	jne    c0010206 <VgaText::doANSI_SGR(int)+0x20>
c00101f2:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00101f8:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00101fe:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010204:	eb 65                	jmp    c001026b <VgaText::doANSI_SGR(int)+0x85>
c0010206:	83 fa 07             	cmp    edx,0x7
c0010209:	75 14                	jne    c001021f <VgaText::doANSI_SGR(int)+0x39>
c001020b:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010211:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010217:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c001021d:	eb 4c                	jmp    c001026b <VgaText::doANSI_SGR(int)+0x85>
c001021f:	83 fa 1b             	cmp    edx,0x1b
c0010222:	74 ce                	je     c00101f2 <VgaText::doANSI_SGR(int)+0xc>
c0010224:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010227:	83 f9 07             	cmp    ecx,0x7
c001022a:	77 09                	ja     c0010235 <VgaText::doANSI_SGR(int)+0x4f>
c001022c:	8b 14 8d a0 aa 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd5560]
c0010233:	eb 20                	jmp    c0010255 <VgaText::doANSI_SGR(int)+0x6f>
c0010235:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010238:	83 f9 07             	cmp    ecx,0x7
c001023b:	77 09                	ja     c0010246 <VgaText::doANSI_SGR(int)+0x60>
c001023d:	8b 14 8d a0 aa 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd5560]
c0010244:	eb 25                	jmp    c001026b <VgaText::doANSI_SGR(int)+0x85>
c0010246:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010249:	83 f9 07             	cmp    ecx,0x7
c001024c:	77 0e                	ja     c001025c <VgaText::doANSI_SGR(int)+0x76>
c001024e:	8b 14 95 58 a9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd56a8]
c0010255:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001025b:	c3                   	ret    
c001025c:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001025f:	83 f9 07             	cmp    ecx,0x7
c0010262:	77 0d                	ja     c0010271 <VgaText::doANSI_SGR(int)+0x8b>
c0010264:	8b 14 95 30 a9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd56d0]
c001026b:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010271:	c3                   	ret    

c0010272 <VgaText::setDefaultBgColour(VgaColour)>:
c0010272:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010276:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001027a:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010280:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010286:	c3                   	ret    
c0010287:	90                   	nop

c0010288 <VgaText::setDefaultFgColour(VgaColour)>:
c0010288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001028c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010290:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010296:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001029c:	c3                   	ret    
c001029d:	90                   	nop

c001029e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001029e:	53                   	push   ebx
c001029f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00102a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00102ab:	51                   	push   ecx
c00102ac:	e8 c1 ff ff ff       	call   c0010272 <VgaText::setDefaultBgColour(VgaColour)>
c00102b1:	58                   	pop    eax
c00102b2:	5a                   	pop    edx
c00102b3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00102b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00102bb:	5b                   	pop    ebx
c00102bc:	eb ca                	jmp    c0010288 <VgaText::setDefaultFgColour(VgaColour)>

c00102be <VgaText::combineColours(unsigned char, unsigned char)>:
c00102be:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00102c2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00102c7:	83 e0 0f             	and    eax,0xf
c00102ca:	c1 e2 04             	shl    edx,0x4
c00102cd:	09 d0                	or     eax,edx
c00102cf:	c3                   	ret    

c00102d0 <VgaText::scrollScreen()>:
c00102d0:	57                   	push   edi
c00102d1:	56                   	push   esi
c00102d2:	be 01 00 00 00       	mov    esi,0x1
c00102d7:	53                   	push   ebx
c00102d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102dc:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00102e2:	31 ff                	xor    edi,edi
c00102e4:	01 d9                	add    ecx,ebx
c00102e6:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00102e9:	83 fe 17             	cmp    esi,0x17
c00102ec:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00102f2:	75 28                	jne    c001031c <VgaText::scrollScreen()+0x4c>
c00102f4:	f7 c7 01 00 00 00    	test   edi,0x1
c00102fa:	74 1c                	je     c0010318 <VgaText::scrollScreen()+0x48>
c00102fc:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010303:	50                   	push   eax
c0010304:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001030b:	50                   	push   eax
c001030c:	e8 ad ff ff ff       	call   c00102be <VgaText::combineColours(unsigned char, unsigned char)>
c0010311:	5a                   	pop    edx
c0010312:	5a                   	pop    edx
c0010313:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010316:	eb 04                	jmp    c001031c <VgaText::scrollScreen()+0x4c>
c0010318:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c001031c:	47                   	inc    edi
c001031d:	41                   	inc    ecx
c001031e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010324:	75 c0                	jne    c00102e6 <VgaText::scrollScreen()+0x16>
c0010326:	46                   	inc    esi
c0010327:	83 fe 18             	cmp    esi,0x18
c001032a:	75 b0                	jne    c00102dc <VgaText::scrollScreen()+0xc>
c001032c:	39 1d 84 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb84,ebx
c0010332:	75 24                	jne    c0010358 <VgaText::scrollScreen()+0x88>
c0010334:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001033b:	74 08                	je     c0010345 <VgaText::scrollScreen()+0x75>
c001033d:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010343:	eb 13                	jmp    c0010358 <VgaText::scrollScreen()+0x88>
c0010345:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001034b:	85 c0                	test   eax,eax
c001034d:	74 09                	je     c0010358 <VgaText::scrollScreen()+0x88>
c001034f:	83 ec 0c             	sub    esp,0xc
c0010352:	53                   	push   ebx
c0010353:	ff d0                	call   eax
c0010355:	83 c4 10             	add    esp,0x10
c0010358:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001035c:	5b                   	pop    ebx
c001035d:	5e                   	pop    esi
c001035e:	5f                   	pop    edi
c001035f:	e9 1e fe ff ff       	jmp    c0010182 <VgaText::updateCursor()>

c0010364 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010364:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010369:	c1 e0 08             	shl    eax,0x8
c001036c:	89 c2                	mov    edx,eax
c001036e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010373:	09 d0                	or     eax,edx
c0010375:	c3                   	ret    

c0010376 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010376:	53                   	push   ebx
c0010377:	83 ec 08             	sub    esp,0x8
c001037a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001037e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010383:	50                   	push   eax
c0010384:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010389:	50                   	push   eax
c001038a:	e8 2f ff ff ff       	call   c00102be <VgaText::combineColours(unsigned char, unsigned char)>
c001038f:	5a                   	pop    edx
c0010390:	0f b6 c0             	movzx  eax,al
c0010393:	5b                   	pop    ebx
c0010394:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010399:	50                   	push   eax
c001039a:	53                   	push   ebx
c001039b:	e8 c4 ff ff ff       	call   c0010364 <VgaText::combineCharAndColour(char, unsigned char)>
c00103a0:	5a                   	pop    edx
c00103a1:	5a                   	pop    edx
c00103a2:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00103a8:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00103ac:	0f b7 d2             	movzx  edx,dx
c00103af:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00103b4:	39 0d 84 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb84,ecx
c00103ba:	75 14                	jne    c00103d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00103bc:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00103c2:	85 c0                	test   eax,eax
c00103c4:	74 0a                	je     c00103d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00103c6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00103ca:	83 c4 08             	add    esp,0x8
c00103cd:	5b                   	pop    ebx
c00103ce:	ff e0                	jmp    eax
c00103d0:	83 c4 08             	add    esp,0x8
c00103d3:	5b                   	pop    ebx
c00103d4:	c3                   	ret    
c00103d5:	90                   	nop

c00103d6 <VgaText::getCursorX()>:
c00103d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103da:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00103e0:	c3                   	ret    
c00103e1:	90                   	nop

c00103e2 <VgaText::getCursorY()>:
c00103e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103e6:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00103ec:	c3                   	ret    
c00103ed:	90                   	nop

c00103ee <VgaText::setCursor(int, int)>:
c00103ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103f6:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00103fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010400:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010406:	e9 77 fd ff ff       	jmp    c0010182 <VgaText::updateCursor()>
c001040b:	90                   	nop

c001040c <VgaText::setCursorX(int)>:
c001040c:	83 ec 10             	sub    esp,0x10
c001040f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010413:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010419:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001041d:	50                   	push   eax
c001041e:	e8 cb ff ff ff       	call   c00103ee <VgaText::setCursor(int, int)>
c0010423:	83 c4 1c             	add    esp,0x1c
c0010426:	c3                   	ret    
c0010427:	90                   	nop

c0010428 <VgaText::setCursorY(int)>:
c0010428:	83 ec 10             	sub    esp,0x10
c001042b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001042f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010433:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010439:	50                   	push   eax
c001043a:	e8 af ff ff ff       	call   c00103ee <VgaText::setCursor(int, int)>
c001043f:	83 c4 1c             	add    esp,0x1c
c0010442:	c3                   	ret    
c0010443:	90                   	nop

c0010444 <VgaText::incrementCursor(bool)>:
c0010444:	56                   	push   esi
c0010445:	53                   	push   ebx
c0010446:	51                   	push   ecx
c0010447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001044b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001044f:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010455:	40                   	inc    eax
c0010456:	83 f8 50             	cmp    eax,0x50
c0010459:	74 08                	je     c0010463 <VgaText::incrementCursor(bool)+0x1f>
c001045b:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010461:	eb 33                	jmp    c0010496 <VgaText::incrementCursor(bool)+0x52>
c0010463:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010469:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010473:	8d 50 01             	lea    edx,[eax+0x1]
c0010476:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001047c:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010482:	75 12                	jne    c0010496 <VgaText::incrementCursor(bool)+0x52>
c0010484:	83 ec 0c             	sub    esp,0xc
c0010487:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001048d:	53                   	push   ebx
c001048e:	e8 3d fe ff ff       	call   c00102d0 <VgaText::scrollScreen()>
c0010493:	83 c4 10             	add    esp,0x10
c0010496:	89 f0                	mov    eax,esi
c0010498:	84 c0                	test   al,al
c001049a:	74 0c                	je     c00104a8 <VgaText::incrementCursor(bool)+0x64>
c001049c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104a0:	5a                   	pop    edx
c00104a1:	5b                   	pop    ebx
c00104a2:	5e                   	pop    esi
c00104a3:	e9 da fc ff ff       	jmp    c0010182 <VgaText::updateCursor()>
c00104a8:	58                   	pop    eax
c00104a9:	5b                   	pop    ebx
c00104aa:	5e                   	pop    esi
c00104ab:	c3                   	ret    

c00104ac <VgaText::updateRAMUsageDisplay(int)>:
c00104ac:	53                   	push   ebx
c00104ad:	bb 0a 00 00 00       	mov    ebx,0xa
c00104b2:	6a 0f                	push   0xf
c00104b4:	6a 00                	push   0x0
c00104b6:	e8 03 fe ff ff       	call   c00102be <VgaText::combineColours(unsigned char, unsigned char)>
c00104bb:	5a                   	pop    edx
c00104bc:	59                   	pop    ecx
c00104bd:	0f b6 c8             	movzx  ecx,al
c00104c0:	51                   	push   ecx
c00104c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104c5:	99                   	cdq    
c00104c6:	f7 fb                	idiv   ebx
c00104c8:	89 d3                	mov    ebx,edx
c00104ca:	83 c0 30             	add    eax,0x30
c00104cd:	83 c3 30             	add    ebx,0x30
c00104d0:	0f be c0             	movsx  eax,al
c00104d3:	0f b6 db             	movzx  ebx,bl
c00104d6:	50                   	push   eax
c00104d7:	e8 88 fe ff ff       	call   c0010364 <VgaText::combineCharAndColour(char, unsigned char)>
c00104dc:	5a                   	pop    edx
c00104dd:	5a                   	pop    edx
c00104de:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c00104e4:	51                   	push   ecx
c00104e5:	53                   	push   ebx
c00104e6:	e8 79 fe ff ff       	call   c0010364 <VgaText::combineCharAndColour(char, unsigned char)>
c00104eb:	5b                   	pop    ebx
c00104ec:	5a                   	pop    edx
c00104ed:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c00104f3:	51                   	push   ecx
c00104f4:	6a 25                	push   0x25
c00104f6:	e8 69 fe ff ff       	call   c0010364 <VgaText::combineCharAndColour(char, unsigned char)>
c00104fb:	59                   	pop    ecx
c00104fc:	5b                   	pop    ebx
c00104fd:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c0010503:	5b                   	pop    ebx
c0010504:	c3                   	ret    
c0010505:	90                   	nop

c0010506 <VgaText::updateDiskUsage()>:
c0010506:	55                   	push   ebp
c0010507:	bd 10 27 00 00       	mov    ebp,0x2710
c001050c:	57                   	push   edi
c001050d:	56                   	push   esi
c001050e:	53                   	push   ebx
c001050f:	6a 0f                	push   0xf
c0010511:	6a 00                	push   0x0
c0010513:	e8 a6 fd ff ff       	call   c00102be <VgaText::combineColours(unsigned char, unsigned char)>
c0010518:	5a                   	pop    edx
c0010519:	0f b6 d8             	movzx  ebx,al
c001051c:	59                   	pop    ecx
c001051d:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0010522:	53                   	push   ebx
c0010523:	b9 0a 00 00 00       	mov    ecx,0xa
c0010528:	99                   	cdq    
c0010529:	f7 fd                	idiv   ebp
c001052b:	99                   	cdq    
c001052c:	f7 f9                	idiv   ecx
c001052e:	8d 42 30             	lea    eax,[edx+0x30]
c0010531:	0f b6 c0             	movzx  eax,al
c0010534:	50                   	push   eax
c0010535:	e8 2a fe ff ff       	call   c0010364 <VgaText::combineCharAndColour(char, unsigned char)>
c001053a:	5e                   	pop    esi
c001053b:	5f                   	pop    edi
c001053c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c0010542:	bf e8 03 00 00       	mov    edi,0x3e8
c0010547:	53                   	push   ebx
c0010548:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c001054d:	99                   	cdq    
c001054e:	f7 ff                	idiv   edi
c0010550:	99                   	cdq    
c0010551:	f7 f9                	idiv   ecx
c0010553:	8d 42 30             	lea    eax,[edx+0x30]
c0010556:	0f b6 c0             	movzx  eax,al
c0010559:	50                   	push   eax
c001055a:	e8 05 fe ff ff       	call   c0010364 <VgaText::combineCharAndColour(char, unsigned char)>
c001055f:	5a                   	pop    edx
c0010560:	5e                   	pop    esi
c0010561:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c0010567:	be 64 00 00 00       	mov    esi,0x64
c001056c:	53                   	push   ebx
c001056d:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0010572:	99                   	cdq    
c0010573:	f7 fe                	idiv   esi
c0010575:	99                   	cdq    
c0010576:	f7 f9                	idiv   ecx
c0010578:	8d 42 30             	lea    eax,[edx+0x30]
c001057b:	0f b6 c0             	movzx  eax,al
c001057e:	50                   	push   eax
c001057f:	e8 e0 fd ff ff       	call   c0010364 <VgaText::combineCharAndColour(char, unsigned char)>
c0010584:	5a                   	pop    edx
c0010585:	5a                   	pop    edx
c0010586:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001058c:	53                   	push   ebx
c001058d:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0010592:	99                   	cdq    
c0010593:	f7 f9                	idiv   ecx
c0010595:	99                   	cdq    
c0010596:	f7 f9                	idiv   ecx
c0010598:	8d 42 30             	lea    eax,[edx+0x30]
c001059b:	0f b6 c0             	movzx  eax,al
c001059e:	50                   	push   eax
c001059f:	e8 c0 fd ff ff       	call   c0010364 <VgaText::combineCharAndColour(char, unsigned char)>
c00105a4:	5a                   	pop    edx
c00105a5:	5a                   	pop    edx
c00105a6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c00105ac:	53                   	push   ebx
c00105ad:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c00105b2:	99                   	cdq    
c00105b3:	f7 f9                	idiv   ecx
c00105b5:	8d 42 30             	lea    eax,[edx+0x30]
c00105b8:	0f b6 c0             	movzx  eax,al
c00105bb:	50                   	push   eax
c00105bc:	e8 a3 fd ff ff       	call   c0010364 <VgaText::combineCharAndColour(char, unsigned char)>
c00105c1:	5a                   	pop    edx
c00105c2:	5a                   	pop    edx
c00105c3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c00105c9:	53                   	push   ebx
c00105ca:	a1 c4 dd 02 c0       	mov    eax,ds:0xc002ddc4
c00105cf:	99                   	cdq    
c00105d0:	f7 fd                	idiv   ebp
c00105d2:	99                   	cdq    
c00105d3:	f7 f9                	idiv   ecx
c00105d5:	8d 42 30             	lea    eax,[edx+0x30]
c00105d8:	0f b6 c0             	movzx  eax,al
c00105db:	50                   	push   eax
c00105dc:	e8 83 fd ff ff       	call   c0010364 <VgaText::combineCharAndColour(char, unsigned char)>
c00105e1:	5d                   	pop    ebp
c00105e2:	5a                   	pop    edx
c00105e3:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c00105e9:	53                   	push   ebx
c00105ea:	a1 c4 dd 02 c0       	mov    eax,ds:0xc002ddc4
c00105ef:	99                   	cdq    
c00105f0:	f7 ff                	idiv   edi
c00105f2:	99                   	cdq    
c00105f3:	f7 f9                	idiv   ecx
c00105f5:	8d 42 30             	lea    eax,[edx+0x30]
c00105f8:	0f b6 c0             	movzx  eax,al
c00105fb:	50                   	push   eax
c00105fc:	e8 63 fd ff ff       	call   c0010364 <VgaText::combineCharAndColour(char, unsigned char)>
c0010601:	5f                   	pop    edi
c0010602:	5d                   	pop    ebp
c0010603:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c0010609:	53                   	push   ebx
c001060a:	a1 c4 dd 02 c0       	mov    eax,ds:0xc002ddc4
c001060f:	99                   	cdq    
c0010610:	f7 fe                	idiv   esi
c0010612:	99                   	cdq    
c0010613:	f7 f9                	idiv   ecx
c0010615:	8d 42 30             	lea    eax,[edx+0x30]
c0010618:	0f b6 c0             	movzx  eax,al
c001061b:	50                   	push   eax
c001061c:	e8 43 fd ff ff       	call   c0010364 <VgaText::combineCharAndColour(char, unsigned char)>
c0010621:	5a                   	pop    edx
c0010622:	5e                   	pop    esi
c0010623:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c0010629:	53                   	push   ebx
c001062a:	a1 c4 dd 02 c0       	mov    eax,ds:0xc002ddc4
c001062f:	99                   	cdq    
c0010630:	f7 f9                	idiv   ecx
c0010632:	99                   	cdq    
c0010633:	f7 f9                	idiv   ecx
c0010635:	8d 42 30             	lea    eax,[edx+0x30]
c0010638:	0f b6 c0             	movzx  eax,al
c001063b:	50                   	push   eax
c001063c:	e8 23 fd ff ff       	call   c0010364 <VgaText::combineCharAndColour(char, unsigned char)>
c0010641:	5f                   	pop    edi
c0010642:	5d                   	pop    ebp
c0010643:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c0010649:	53                   	push   ebx
c001064a:	a1 c4 dd 02 c0       	mov    eax,ds:0xc002ddc4
c001064f:	99                   	cdq    
c0010650:	f7 f9                	idiv   ecx
c0010652:	83 c2 30             	add    edx,0x30
c0010655:	0f b6 d2             	movzx  edx,dl
c0010658:	52                   	push   edx
c0010659:	e8 06 fd ff ff       	call   c0010364 <VgaText::combineCharAndColour(char, unsigned char)>
c001065e:	5a                   	pop    edx
c001065f:	59                   	pop    ecx
c0010660:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c0010666:	5b                   	pop    ebx
c0010667:	5e                   	pop    esi
c0010668:	5f                   	pop    edi
c0010669:	5d                   	pop    ebp
c001066a:	c3                   	ret    
c001066b:	90                   	nop

c001066c <VgaText::updateTitle()>:
c001066c:	53                   	push   ebx
c001066d:	31 c0                	xor    eax,eax
c001066f:	83 ec 58             	sub    esp,0x58
c0010672:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010676:	89 e1                	mov    ecx,esp
c0010678:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001067c:	40                   	inc    eax
c001067d:	83 f8 50             	cmp    eax,0x50
c0010680:	75 f6                	jne    c0010678 <VgaText::updateTitle()+0xc>
c0010682:	31 c0                	xor    eax,eax
c0010684:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c001068b:	84 db                	test   bl,bl
c001068d:	74 06                	je     c0010695 <VgaText::updateTitle()+0x29>
c001068f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010692:	40                   	inc    eax
c0010693:	eb ef                	jmp    c0010684 <VgaText::updateTitle()+0x18>
c0010695:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c001069b:	85 c0                	test   eax,eax
c001069d:	74 09                	je     c00106a8 <VgaText::updateTitle()+0x3c>
c001069f:	53                   	push   ebx
c00106a0:	53                   	push   ebx
c00106a1:	51                   	push   ecx
c00106a2:	52                   	push   edx
c00106a3:	ff d0                	call   eax
c00106a5:	83 c4 10             	add    esp,0x10
c00106a8:	e8 59 fe ff ff       	call   c0010506 <VgaText::updateDiskUsage()>
c00106ad:	83 c4 58             	add    esp,0x58
c00106b0:	5b                   	pop    ebx
c00106b1:	c3                   	ret    

c00106b2 <VgaText::setTitleTextColour(VgaColour)>:
c00106b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ba:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00106c0:	eb aa                	jmp    c001066c <VgaText::updateTitle()>

c00106c2 <VgaText::setTitleColour(VgaColour)>:
c00106c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ca:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00106d0:	eb 9a                	jmp    c001066c <VgaText::updateTitle()>

c00106d2 <VgaText::setTitle(char*)>:
c00106d2:	53                   	push   ebx
c00106d3:	83 ec 10             	sub    esp,0x10
c00106d6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106de:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00106e4:	50                   	push   eax
c00106e5:	e8 40 00 ff ff       	call   c000072a <strcpy>
c00106ea:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00106ee:	83 c4 18             	add    esp,0x18
c00106f1:	5b                   	pop    ebx
c00106f2:	e9 75 ff ff ff       	jmp    c001066c <VgaText::updateTitle()>
c00106f7:	90                   	nop

c00106f8 <VgaText::decrementCursor(bool)>:
c00106f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00106fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010700:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010706:	85 c0                	test   eax,eax
c0010708:	74 07                	je     c0010711 <VgaText::decrementCursor(bool)+0x19>
c001070a:	48                   	dec    eax
c001070b:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010711:	84 c9                	test   cl,cl
c0010713:	74 09                	je     c001071e <VgaText::decrementCursor(bool)+0x26>
c0010715:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010719:	e9 64 fa ff ff       	jmp    c0010182 <VgaText::updateCursor()>
c001071e:	c3                   	ret    
c001071f:	90                   	nop

c0010720 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010720:	53                   	push   ebx
c0010721:	83 ec 08             	sub    esp,0x8
c0010724:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010728:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001072c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010730:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010734:	3c 07                	cmp    al,0x7
c0010736:	75 2a                	jne    c0010762 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010738:	a1 2c bc 02 c0       	mov    eax,ds:0xc002bc2c
c001073d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010745:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001074d:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010755:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010759:	83 c4 08             	add    esp,0x8
c001075c:	5b                   	pop    ebx
c001075d:	e9 3a 2d 00 00       	jmp    c001349c <Buzzer::beep(int, int, bool)>
c0010762:	3c 0d                	cmp    al,0xd
c0010764:	75 0c                	jne    c0010772 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010766:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010770:	eb 3b                	jmp    c00107ad <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010772:	3c 0a                	cmp    al,0xa
c0010774:	75 40                	jne    c00107b6 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010776:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001077c:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010786:	8d 50 01             	lea    edx,[eax+0x1]
c0010789:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001078f:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010795:	75 12                	jne    c00107a9 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010797:	83 ec 0c             	sub    esp,0xc
c001079a:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00107a0:	53                   	push   ebx
c00107a1:	e8 2a fb ff ff       	call   c00102d0 <VgaText::scrollScreen()>
c00107a6:	83 c4 10             	add    esp,0x10
c00107a9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107ad:	83 c4 08             	add    esp,0x8
c00107b0:	5b                   	pop    ebx
c00107b1:	e9 cc f9 ff ff       	jmp    c0010182 <VgaText::updateCursor()>
c00107b6:	3c 08                	cmp    al,0x8
c00107b8:	75 31                	jne    c00107eb <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00107ba:	50                   	push   eax
c00107bb:	50                   	push   eax
c00107bc:	6a 01                	push   0x1
c00107be:	53                   	push   ebx
c00107bf:	e8 34 ff ff ff       	call   c00106f8 <VgaText::decrementCursor(bool)>
c00107c4:	5a                   	pop    edx
c00107c5:	59                   	pop    ecx
c00107c6:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00107cc:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00107d2:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00107d8:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00107de:	6a 20                	push   0x20
c00107e0:	53                   	push   ebx
c00107e1:	e8 90 fb ff ff       	call   c0010376 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107e6:	83 c4 28             	add    esp,0x28
c00107e9:	5b                   	pop    ebx
c00107ea:	c3                   	ret    
c00107eb:	83 ec 08             	sub    esp,0x8
c00107ee:	0f be c0             	movsx  eax,al
c00107f1:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00107f7:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00107fd:	51                   	push   ecx
c00107fe:	52                   	push   edx
c00107ff:	50                   	push   eax
c0010800:	53                   	push   ebx
c0010801:	e8 70 fb ff ff       	call   c0010376 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010806:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001080a:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010812:	83 c4 28             	add    esp,0x28
c0010815:	5b                   	pop    ebx
c0010816:	e9 29 fc ff ff       	jmp    c0010444 <VgaText::incrementCursor(bool)>
c001081b:	90                   	nop

c001081c <VgaText::isShowingCursor()>:
c001081c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010820:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010826:	c3                   	ret    
c0010827:	90                   	nop

c0010828 <VgaText::isBlinkDisabled()>:
c0010828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001082c:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010832:	83 f0 01             	xor    eax,0x1
c0010835:	c3                   	ret    

c0010836 <VgaText::setCursorHeight(int)>:
c0010836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001083a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001083e:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010844:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c001084b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001084f:	e9 48 f9 ff ff       	jmp    c001019c <VgaText::showCursor(bool)>

c0010854 <VgaText::getCursorHeight()>:
c0010854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010858:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c001085e:	c3                   	ret    

c001085f <setActiveTerminal(VgaText*)>:
c001085f:	53                   	push   ebx
c0010860:	83 ec 08             	sub    esp,0x8
c0010863:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010867:	85 db                	test   ebx,ebx
c0010869:	75 11                	jne    c001087c <setActiveTerminal(VgaText*)+0x1d>
c001086b:	c7 44 24 10 0c 80 02 c0 	mov    DWORD PTR [esp+0x10],0xc002800c
c0010873:	83 c4 08             	add    esp,0x8
c0010876:	5b                   	pop    ebx
c0010877:	e9 65 89 00 00       	jmp    c00191e1 <Krnl::panic(char const*)>
c001087c:	50                   	push   eax
c001087d:	50                   	push   eax
c001087e:	53                   	push   ebx
c001087f:	68 1a 80 02 c0       	push   0xc002801a
c0010884:	e8 14 1e 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0010889:	a1 84 bb 02 c0       	mov    eax,ds:0xc002bb84
c001088e:	83 c4 10             	add    esp,0x10
c0010891:	85 c0                	test   eax,eax
c0010893:	74 0c                	je     c00108a1 <setActiveTerminal(VgaText*)+0x42>
c0010895:	83 ec 0c             	sub    esp,0xc
c0010898:	50                   	push   eax
c0010899:	e8 e4 f8 ff ff       	call   c0010182 <VgaText::updateCursor()>
c001089e:	83 c4 10             	add    esp,0x10
c00108a1:	89 1d 84 bb 02 c0    	mov    DWORD PTR ds:0xc002bb84,ebx
c00108a7:	51                   	push   ecx
c00108a8:	51                   	push   ecx
c00108a9:	53                   	push   ebx
c00108aa:	68 32 80 02 c0       	push   0xc0028032
c00108af:	e8 e9 1d 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00108b4:	83 c4 0c             	add    esp,0xc
c00108b7:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00108bd:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00108c3:	53                   	push   ebx
c00108c4:	e8 25 fb ff ff       	call   c00103ee <VgaText::setCursor(int, int)>
c00108c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108cc:	e8 57 ff ff ff       	call   c0010828 <VgaText::isBlinkDisabled()>
c00108d1:	5a                   	pop    edx
c00108d2:	0f b6 c0             	movzx  eax,al
c00108d5:	59                   	pop    ecx
c00108d6:	50                   	push   eax
c00108d7:	53                   	push   ebx
c00108d8:	e8 cf f8 ff ff       	call   c00101ac <VgaText::disableBlink(bool)>
c00108dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108e0:	e8 6f ff ff ff       	call   c0010854 <VgaText::getCursorHeight()>
c00108e5:	5a                   	pop    edx
c00108e6:	59                   	pop    ecx
c00108e7:	50                   	push   eax
c00108e8:	53                   	push   ebx
c00108e9:	e8 48 ff ff ff       	call   c0010836 <VgaText::setCursorHeight(int)>
c00108ee:	83 c4 10             	add    esp,0x10
c00108f1:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00108f8:	75 0a                	jne    c0010904 <setActiveTerminal(VgaText*)+0xa5>
c00108fa:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010904:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010908:	83 c4 08             	add    esp,0x8
c001090b:	5b                   	pop    ebx
c001090c:	e9 1d f8 ff ff       	jmp    c001012e <VgaText::load()>

c0010911 <doTerminalCycle()>:
c0010911:	83 ec 18             	sub    esp,0x18
c0010914:	a1 80 bb 02 c0       	mov    eax,ds:0xc002bb80
c0010919:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c001091f:	50                   	push   eax
c0010920:	a3 80 bb 02 c0       	mov    ds:0xc002bb80,eax
c0010925:	e8 35 ff ff ff       	call   c001085f <setActiveTerminal(VgaText*)>
c001092a:	83 c4 1c             	add    esp,0x1c
c001092d:	c3                   	ret    

c001092e <VgaText::doUpdate()>:
c001092e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010932:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010938:	85 c0                	test   eax,eax
c001093a:	74 02                	je     c001093e <VgaText::doUpdate()+0x10>
c001093c:	ff e0                	jmp    eax
c001093e:	c3                   	ret    
c001093f:	90                   	nop

c0010940 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010940:	55                   	push   ebp
c0010941:	57                   	push   edi
c0010942:	56                   	push   esi
c0010943:	53                   	push   ebx
c0010944:	83 ec 1c             	sub    esp,0x1c
c0010947:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001094b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010950:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010957:	8d 7d 0c             	lea    edi,[ebp+0xc]
c001095a:	50                   	push   eax
c001095b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010960:	50                   	push   eax
c0010961:	e8 58 f9 ff ff       	call   c00102be <VgaText::combineColours(unsigned char, unsigned char)>
c0010966:	59                   	pop    ecx
c0010967:	0f b6 c0             	movzx  eax,al
c001096a:	5b                   	pop    ebx
c001096b:	31 c9                	xor    ecx,ecx
c001096d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010975:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010979:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001097f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010983:	0f b7 db             	movzx  ebx,bx
c0010986:	01 db                	add    ebx,ebx
c0010988:	01 fb                	add    ebx,edi
c001098a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001098d:	84 c0                	test   al,al
c001098f:	0f 84 38 01 00 00    	je     c0010acd <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010995:	3c 0d                	cmp    al,0xd
c0010997:	75 0f                	jne    c00109a8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010999:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00109a3:	e9 1f 01 00 00       	jmp    c0010ac7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00109a8:	3c 0a                	cmp    al,0xa
c00109aa:	75 5b                	jne    c0010a07 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c00109ac:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00109b2:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00109bc:	8d 48 01             	lea    ecx,[eax+0x1]
c00109bf:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00109c5:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c00109cb:	75 12                	jne    c00109df <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00109cd:	83 ec 0c             	sub    esp,0xc
c00109d0:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c00109d6:	55                   	push   ebp
c00109d7:	e8 f4 f8 ff ff       	call   c00102d0 <VgaText::scrollScreen()>
c00109dc:	83 c4 10             	add    esp,0x10
c00109df:	83 ec 0c             	sub    esp,0xc
c00109e2:	55                   	push   ebp
c00109e3:	e8 9a f7 ff ff       	call   c0010182 <VgaText::updateCursor()>
c00109e8:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00109f0:	83 c4 10             	add    esp,0x10
c00109f3:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00109f9:	31 c9                	xor    ecx,ecx
c00109fb:	0f b7 db             	movzx  ebx,bx
c00109fe:	01 db                	add    ebx,ebx
c0010a00:	01 fb                	add    ebx,edi
c0010a02:	e9 c0 00 00 00       	jmp    c0010ac7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010a07:	3c 08                	cmp    al,0x8
c0010a09:	75 4e                	jne    c0010a59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010a0b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010a0f:	53                   	push   ebx
c0010a10:	53                   	push   ebx
c0010a11:	6a 01                	push   0x1
c0010a13:	55                   	push   ebp
c0010a14:	e8 df fc ff ff       	call   c00106f8 <VgaText::decrementCursor(bool)>
c0010a19:	58                   	pop    eax
c0010a1a:	5a                   	pop    edx
c0010a1b:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010a21:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010a27:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010a2d:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010a33:	6a 20                	push   0x20
c0010a35:	55                   	push   ebp
c0010a36:	e8 3b f9 ff ff       	call   c0010376 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a3b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a43:	83 c4 20             	add    esp,0x20
c0010a46:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010a4c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010a50:	0f b7 db             	movzx  ebx,bx
c0010a53:	01 db                	add    ebx,ebx
c0010a55:	01 fb                	add    ebx,edi
c0010a57:	eb 6e                	jmp    c0010ac7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010a59:	51                   	push   ecx
c0010a5a:	51                   	push   ecx
c0010a5b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010a5f:	50                   	push   eax
c0010a60:	e8 ff f8 ff ff       	call   c0010364 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a65:	83 c4 10             	add    esp,0x10
c0010a68:	66 89 03             	mov    WORD PTR [ebx],ax
c0010a6b:	39 2d 84 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb84,ebp
c0010a71:	75 2a                	jne    c0010a9d <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a73:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010a79:	85 c0                	test   eax,eax
c0010a7b:	74 20                	je     c0010a9d <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a7d:	52                   	push   edx
c0010a7e:	52                   	push   edx
c0010a7f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010a85:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010a8b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a8f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a93:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010a96:	51                   	push   ecx
c0010a97:	55                   	push   ebp
c0010a98:	ff d0                	call   eax
c0010a9a:	83 c4 20             	add    esp,0x20
c0010a9d:	83 c3 02             	add    ebx,0x2
c0010aa0:	50                   	push   eax
c0010aa1:	50                   	push   eax
c0010aa2:	6a 00                	push   0x0
c0010aa4:	55                   	push   ebp
c0010aa5:	e8 9a f9 ff ff       	call   c0010444 <VgaText::incrementCursor(bool)>
c0010aaa:	83 c4 10             	add    esp,0x10
c0010aad:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010ab4:	75 0f                	jne    c0010ac5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010ab6:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010abe:	0f b7 db             	movzx  ebx,bx
c0010ac1:	01 db                	add    ebx,ebx
c0010ac3:	01 fb                	add    ebx,edi
c0010ac5:	b1 01                	mov    cl,0x1
c0010ac7:	46                   	inc    esi
c0010ac8:	e9 bd fe ff ff       	jmp    c001098a <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010ad1:	83 ec 0c             	sub    esp,0xc
c0010ad4:	55                   	push   ebp
c0010ad5:	e8 a8 f6 ff ff       	call   c0010182 <VgaText::updateCursor()>
c0010ada:	83 c4 10             	add    esp,0x10
c0010add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010ae1:	84 c9                	test   cl,cl
c0010ae3:	74 0c                	je     c0010af1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010ae5:	83 ec 0c             	sub    esp,0xc
c0010ae8:	55                   	push   ebp
c0010ae9:	e8 40 fe ff ff       	call   c001092e <VgaText::doUpdate()>
c0010aee:	83 c4 10             	add    esp,0x10
c0010af1:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010af8:	83 c4 1c             	add    esp,0x1c
c0010afb:	5b                   	pop    ebx
c0010afc:	5e                   	pop    esi
c0010afd:	5f                   	pop    edi
c0010afe:	5d                   	pop    ebp
c0010aff:	c3                   	ret    

c0010b00 <VgaText::clearScreen()>:
c0010b00:	57                   	push   edi
c0010b01:	56                   	push   esi
c0010b02:	31 f6                	xor    esi,esi
c0010b04:	53                   	push   ebx
c0010b05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b09:	52                   	push   edx
c0010b0a:	6a 00                	push   0x0
c0010b0c:	6a 00                	push   0x0
c0010b0e:	53                   	push   ebx
c0010b0f:	e8 da f8 ff ff       	call   c00103ee <VgaText::setCursor(int, int)>
c0010b14:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010b1b:	83 c4 10             	add    esp,0x10
c0010b1e:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010b24:	7e 26                	jle    c0010b4c <VgaText::clearScreen()+0x4c>
c0010b26:	31 ff                	xor    edi,edi
c0010b28:	50                   	push   eax
c0010b29:	50                   	push   eax
c0010b2a:	56                   	push   esi
c0010b2b:	57                   	push   edi
c0010b2c:	47                   	inc    edi
c0010b2d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010b33:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010b39:	6a 20                	push   0x20
c0010b3b:	53                   	push   ebx
c0010b3c:	e8 35 f8 ff ff       	call   c0010376 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010b41:	83 c4 20             	add    esp,0x20
c0010b44:	83 ff 50             	cmp    edi,0x50
c0010b47:	75 df                	jne    c0010b28 <VgaText::clearScreen()+0x28>
c0010b49:	46                   	inc    esi
c0010b4a:	eb d2                	jmp    c0010b1e <VgaText::clearScreen()+0x1e>
c0010b4c:	83 ec 0c             	sub    esp,0xc
c0010b4f:	53                   	push   ebx
c0010b50:	e8 d9 fd ff ff       	call   c001092e <VgaText::doUpdate()>
c0010b55:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010b5c:	83 c4 10             	add    esp,0x10
c0010b5f:	5b                   	pop    ebx
c0010b60:	5e                   	pop    esi
c0010b61:	5f                   	pop    edi
c0010b62:	c3                   	ret    
c0010b63:	90                   	nop

c0010b64 <VgaText::putchar(char)>:
c0010b64:	56                   	push   esi
c0010b65:	53                   	push   ebx
c0010b66:	83 ec 14             	sub    esp,0x14
c0010b69:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b6d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b71:	3c 5b                	cmp    al,0x5b
c0010b73:	75 21                	jne    c0010b96 <VgaText::putchar(char)+0x32>
c0010b75:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010b7c:	74 28                	je     c0010ba6 <VgaText::putchar(char)+0x42>
c0010b7e:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010b87:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010b91:	e9 e2 00 00 00       	jmp    c0010c78 <VgaText::putchar(char)+0x114>
c0010b96:	3c 1b                	cmp    al,0x1b
c0010b98:	75 0c                	jne    c0010ba6 <VgaText::putchar(char)+0x42>
c0010b9a:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010ba1:	e9 d2 00 00 00       	jmp    c0010c78 <VgaText::putchar(char)+0x114>
c0010ba6:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010bac:	84 c9                	test   cl,cl
c0010bae:	0f 84 ab 00 00 00    	je     c0010c5f <VgaText::putchar(char)+0xfb>
c0010bb4:	8d 50 c0             	lea    edx,[eax-0x40]
c0010bb7:	80 fa 3e             	cmp    dl,0x3e
c0010bba:	0f 87 82 00 00 00    	ja     c0010c42 <VgaText::putchar(char)+0xde>
c0010bc0:	3c 6d                	cmp    al,0x6d
c0010bc2:	75 4d                	jne    c0010c11 <VgaText::putchar(char)+0xad>
c0010bc4:	31 f6                	xor    esi,esi
c0010bc6:	31 d2                	xor    edx,edx
c0010bc8:	31 c0                	xor    eax,eax
c0010bca:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010bd0:	7e 30                	jle    c0010c02 <VgaText::putchar(char)+0x9e>
c0010bd2:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010bda:	80 fa 3b             	cmp    dl,0x3b
c0010bdd:	75 17                	jne    c0010bf6 <VgaText::putchar(char)+0x92>
c0010bdf:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010be3:	50                   	push   eax
c0010be4:	53                   	push   ebx
c0010be5:	e8 fc f5 ff ff       	call   c00101e6 <VgaText::doANSI_SGR(int)>
c0010bea:	59                   	pop    ecx
c0010beb:	31 d2                	xor    edx,edx
c0010bed:	58                   	pop    eax
c0010bee:	31 c0                	xor    eax,eax
c0010bf0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010bf4:	eb 09                	jmp    c0010bff <VgaText::putchar(char)+0x9b>
c0010bf6:	6b c0 0a             	imul   eax,eax,0xa
c0010bf9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010bfd:	88 ca                	mov    dl,cl
c0010bff:	46                   	inc    esi
c0010c00:	eb c8                	jmp    c0010bca <VgaText::putchar(char)+0x66>
c0010c02:	84 d2                	test   dl,dl
c0010c04:	74 31                	je     c0010c37 <VgaText::putchar(char)+0xd3>
c0010c06:	50                   	push   eax
c0010c07:	53                   	push   ebx
c0010c08:	e8 d9 f5 ff ff       	call   c00101e6 <VgaText::doANSI_SGR(int)>
c0010c0d:	58                   	pop    eax
c0010c0e:	5a                   	pop    edx
c0010c0f:	eb 26                	jmp    c0010c37 <VgaText::putchar(char)+0xd3>
c0010c11:	3c 4a                	cmp    al,0x4a
c0010c13:	75 22                	jne    c0010c37 <VgaText::putchar(char)+0xd3>
c0010c15:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010c1c:	75 19                	jne    c0010c37 <VgaText::putchar(char)+0xd3>
c0010c1e:	83 ec 0c             	sub    esp,0xc
c0010c21:	53                   	push   ebx
c0010c22:	e8 d9 fe ff ff       	call   c0010b00 <VgaText::clearScreen()>
c0010c27:	83 c4 0c             	add    esp,0xc
c0010c2a:	6a 00                	push   0x0
c0010c2c:	6a 00                	push   0x0
c0010c2e:	53                   	push   ebx
c0010c2f:	e8 ba f7 ff ff       	call   c00103ee <VgaText::setCursor(int, int)>
c0010c34:	83 c4 10             	add    esp,0x10
c0010c37:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010c40:	eb 36                	jmp    c0010c78 <VgaText::putchar(char)+0x114>
c0010c42:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010c48:	83 fa 0e             	cmp    edx,0xe
c0010c4b:	7f 2b                	jg     c0010c78 <VgaText::putchar(char)+0x114>
c0010c4d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010c50:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010c56:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010c5d:	eb 19                	jmp    c0010c78 <VgaText::putchar(char)+0x114>
c0010c5f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c65:	0f be c0             	movsx  eax,al
c0010c68:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c6e:	50                   	push   eax
c0010c6f:	53                   	push   ebx
c0010c70:	e8 ab fa ff ff       	call   c0010720 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010c75:	83 c4 10             	add    esp,0x10
c0010c78:	83 c4 14             	add    esp,0x14
c0010c7b:	5b                   	pop    ebx
c0010c7c:	5e                   	pop    esi
c0010c7d:	c3                   	ret    

c0010c7e <VgaText::puts(char const*)>:
c0010c7e:	53                   	push   ebx
c0010c7f:	83 ec 08             	sub    esp,0x8
c0010c82:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c86:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010c89:	84 c0                	test   al,al
c0010c8b:	74 12                	je     c0010c9f <VgaText::puts(char const*)+0x21>
c0010c8d:	43                   	inc    ebx
c0010c8e:	51                   	push   ecx
c0010c8f:	51                   	push   ecx
c0010c90:	50                   	push   eax
c0010c91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c95:	e8 ca fe ff ff       	call   c0010b64 <VgaText::putchar(char)>
c0010c9a:	83 c4 10             	add    esp,0x10
c0010c9d:	eb e7                	jmp    c0010c86 <VgaText::puts(char const*)+0x8>
c0010c9f:	83 c4 08             	add    esp,0x8
c0010ca2:	5b                   	pop    ebx
c0010ca3:	c3                   	ret    

c0010ca4 <VgaText::putx(unsigned int)>:
c0010ca4:	57                   	push   edi
c0010ca5:	b9 11 00 00 00       	mov    ecx,0x11
c0010caa:	56                   	push   esi
c0010cab:	be 4e 80 02 c0       	mov    esi,0xc002804e
c0010cb0:	53                   	push   ebx
c0010cb1:	83 ec 20             	sub    esp,0x20
c0010cb4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010cb8:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010cbc:	fc                   	cld    
c0010cbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cbf:	be 08 00 00 00       	mov    esi,0x8
c0010cc4:	50                   	push   eax
c0010cc5:	50                   	push   eax
c0010cc6:	89 d8                	mov    eax,ebx
c0010cc8:	c1 e3 04             	shl    ebx,0x4
c0010ccb:	c1 e8 1c             	shr    eax,0x1c
c0010cce:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010cd3:	50                   	push   eax
c0010cd4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010cd8:	e8 87 fe ff ff       	call   c0010b64 <VgaText::putchar(char)>
c0010cdd:	83 c4 10             	add    esp,0x10
c0010ce0:	4e                   	dec    esi
c0010ce1:	75 e1                	jne    c0010cc4 <VgaText::putx(unsigned int)+0x20>
c0010ce3:	83 c4 20             	add    esp,0x20
c0010ce6:	5b                   	pop    ebx
c0010ce7:	5e                   	pop    esi
c0010ce8:	5f                   	pop    edi
c0010ce9:	c3                   	ret    

c0010cea <VgaText::VgaText(char const*)>:
c0010cea:	57                   	push   edi
c0010ceb:	56                   	push   esi
c0010cec:	53                   	push   ebx
c0010ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf1:	83 ec 08             	sub    esp,0x8
c0010cf4:	6a 00                	push   0x0
c0010cf6:	50                   	push   eax
c0010cf7:	e8 6e 05 00 00       	call   c001126a <UnixFile::UnixFile(int)>
c0010cfc:	83 c4 10             	add    esp,0x10
c0010cff:	ba b4 80 02 c0       	mov    edx,0xc00280b4
c0010d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d08:	89 10                	mov    DWORD PTR [eax],edx
c0010d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d0e:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d1c:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d2a:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d35:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d40:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d4e:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d5c:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010d63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d67:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d72:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010d78:	bb 60 bb 02 c0       	mov    ebx,0xc002bb60
c0010d7d:	b8 08 00 00 00       	mov    eax,0x8
c0010d82:	fc                   	cld    
c0010d83:	89 d7                	mov    edi,edx
c0010d85:	89 de                	mov    esi,ebx
c0010d87:	89 c1                	mov    ecx,eax
c0010d89:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d8f:	05 1e 10 00 00       	add    eax,0x101e
c0010d94:	83 ec 08             	sub    esp,0x8
c0010d97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d9b:	50                   	push   eax
c0010d9c:	e8 89 f9 fe ff       	call   c000072a <strcpy>
c0010da1:	83 c4 10             	add    esp,0x10
c0010da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010da8:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010db6:	83 c0 0c             	add    eax,0xc
c0010db9:	83 ec 04             	sub    esp,0x4
c0010dbc:	68 00 0f 00 00       	push   0xf00
c0010dc1:	6a 00                	push   0x0
c0010dc3:	50                   	push   eax
c0010dc4:	e8 c2 f8 fe ff       	call   c000068b <memset>
c0010dc9:	83 c4 10             	add    esp,0x10
c0010dcc:	83 ec 04             	sub    esp,0x4
c0010dcf:	6a 00                	push   0x0
c0010dd1:	6a 07                	push   0x7
c0010dd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dd7:	e8 c2 f4 ff ff       	call   c001029e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010ddc:	83 c4 10             	add    esp,0x10
c0010ddf:	83 ec 08             	sub    esp,0x8
c0010de2:	6a 02                	push   0x2
c0010de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010de8:	e8 49 fa ff ff       	call   c0010836 <VgaText::setCursorHeight(int)>
c0010ded:	83 c4 10             	add    esp,0x10
c0010df0:	83 ec 04             	sub    esp,0x4
c0010df3:	6a 00                	push   0x0
c0010df5:	6a 00                	push   0x0
c0010df7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dfb:	e8 ee f5 ff ff       	call   c00103ee <VgaText::setCursor(int, int)>
c0010e00:	83 c4 10             	add    esp,0x10
c0010e03:	83 ec 08             	sub    esp,0x8
c0010e06:	6a 01                	push   0x1
c0010e08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e0c:	e8 8b f3 ff ff       	call   c001019c <VgaText::showCursor(bool)>
c0010e11:	83 c4 10             	add    esp,0x10
c0010e14:	83 ec 08             	sub    esp,0x8
c0010e17:	6a 01                	push   0x1
c0010e19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e1d:	e8 8a f3 ff ff       	call   c00101ac <VgaText::disableBlink(bool)>
c0010e22:	83 c4 10             	add    esp,0x10
c0010e25:	83 ec 0c             	sub    esp,0xc
c0010e28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e2c:	e8 cf fc ff ff       	call   c0010b00 <VgaText::clearScreen()>
c0010e31:	83 c4 10             	add    esp,0x10
c0010e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e38:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e43:	05 9e 10 00 00       	add    eax,0x109e
c0010e48:	83 ec 04             	sub    esp,0x4
c0010e4b:	68 96 00 00 00       	push   0x96
c0010e50:	6a 00                	push   0x0
c0010e52:	50                   	push   eax
c0010e53:	e8 33 f8 fe ff       	call   c000068b <memset>
c0010e58:	83 c4 10             	add    esp,0x10
c0010e5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e5f:	05 34 11 00 00       	add    eax,0x1134
c0010e64:	83 ec 04             	sub    esp,0x4
c0010e67:	68 2c 01 00 00       	push   0x12c
c0010e6c:	6a 00                	push   0x0
c0010e6e:	50                   	push   eax
c0010e6f:	e8 17 f8 fe ff       	call   c000068b <memset>
c0010e74:	83 c4 10             	add    esp,0x10
c0010e77:	90                   	nop
c0010e78:	5b                   	pop    ebx
c0010e79:	5e                   	pop    esi
c0010e7a:	5f                   	pop    edi
c0010e7b:	c3                   	ret    

c0010e7c <VgaText::receiveKey(unsigned char)>:
c0010e7c:	55                   	push   ebp
c0010e7d:	57                   	push   edi
c0010e7e:	56                   	push   esi
c0010e7f:	53                   	push   ebx
c0010e80:	83 ec 1c             	sub    esp,0x1c
c0010e83:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010e87:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e8b:	84 db                	test   bl,bl
c0010e8d:	0f 84 c9 00 00 00    	je     c0010f5c <VgaText::receiveKey(unsigned char)+0xe0>
c0010e93:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010e99:	80 fb 08             	cmp    bl,0x8
c0010e9c:	75 2c                	jne    c0010eca <VgaText::receiveKey(unsigned char)+0x4e>
c0010e9e:	83 ec 0c             	sub    esp,0xc
c0010ea1:	57                   	push   edi
c0010ea2:	e8 01 f8 fe ff       	call   c00006a8 <strlen>
c0010ea7:	83 c4 10             	add    esp,0x10
c0010eaa:	85 c0                	test   eax,eax
c0010eac:	74 41                	je     c0010eef <VgaText::receiveKey(unsigned char)+0x73>
c0010eae:	50                   	push   eax
c0010eaf:	50                   	push   eax
c0010eb0:	6a 08                	push   0x8
c0010eb2:	56                   	push   esi
c0010eb3:	e8 ac fc ff ff       	call   c0010b64 <VgaText::putchar(char)>
c0010eb8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ebb:	e8 e8 f7 fe ff       	call   c00006a8 <strlen>
c0010ec0:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010ec8:	eb 22                	jmp    c0010eec <VgaText::receiveKey(unsigned char)+0x70>
c0010eca:	0f be c3             	movsx  eax,bl
c0010ecd:	52                   	push   edx
c0010ece:	52                   	push   edx
c0010ecf:	50                   	push   eax
c0010ed0:	56                   	push   esi
c0010ed1:	e8 8e fc ff ff       	call   c0010b64 <VgaText::putchar(char)>
c0010ed6:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010eda:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010edf:	59                   	pop    ecx
c0010ee0:	5d                   	pop    ebp
c0010ee1:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010ee5:	50                   	push   eax
c0010ee6:	57                   	push   edi
c0010ee7:	e8 f5 f8 fe ff       	call   c00007e1 <strcat>
c0010eec:	83 c4 10             	add    esp,0x10
c0010eef:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010ef6:	75 05                	jne    c0010efd <VgaText::receiveKey(unsigned char)+0x81>
c0010ef8:	80 fb 0a             	cmp    bl,0xa
c0010efb:	75 53                	jne    c0010f50 <VgaText::receiveKey(unsigned char)+0xd4>
c0010efd:	83 ec 0c             	sub    esp,0xc
c0010f00:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010f06:	53                   	push   ebx
c0010f07:	e8 9c f7 fe ff       	call   c00006a8 <strlen>
c0010f0c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010f0f:	89 c5                	mov    ebp,eax
c0010f11:	e8 92 f7 fe ff       	call   c00006a8 <strlen>
c0010f16:	83 c4 10             	add    esp,0x10
c0010f19:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010f1d:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010f22:	76 10                	jbe    c0010f34 <VgaText::receiveKey(unsigned char)+0xb8>
c0010f24:	83 ec 0c             	sub    esp,0xc
c0010f27:	68 5f 80 02 c0       	push   0xc002805f
c0010f2c:	e8 b0 82 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c0010f31:	83 c4 10             	add    esp,0x10
c0010f34:	50                   	push   eax
c0010f35:	50                   	push   eax
c0010f36:	57                   	push   edi
c0010f37:	53                   	push   ebx
c0010f38:	e8 a4 f8 fe ff       	call   c00007e1 <strcat>
c0010f3d:	83 c4 0c             	add    esp,0xc
c0010f40:	68 96 00 00 00       	push   0x96
c0010f45:	6a 00                	push   0x0
c0010f47:	57                   	push   edi
c0010f48:	e8 3e f7 fe ff       	call   c000068b <memset>
c0010f4d:	83 c4 10             	add    esp,0x10
c0010f50:	83 ec 0c             	sub    esp,0xc
c0010f53:	56                   	push   esi
c0010f54:	e8 d5 f9 ff ff       	call   c001092e <VgaText::doUpdate()>
c0010f59:	83 c4 10             	add    esp,0x10
c0010f5c:	83 c4 1c             	add    esp,0x1c
c0010f5f:	5b                   	pop    ebx
c0010f60:	5e                   	pop    esi
c0010f61:	5f                   	pop    edi
c0010f62:	5d                   	pop    ebp
c0010f63:	c3                   	ret    

c0010f64 <VgaText::write(unsigned long long, void*, int*)>:
c0010f64:	55                   	push   ebp
c0010f65:	57                   	push   edi
c0010f66:	56                   	push   esi
c0010f67:	53                   	push   ebx
c0010f68:	83 ec 0c             	sub    esp,0xc
c0010f6b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010f6f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010f73:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f77:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010f7e:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010f81:	39 eb                	cmp    ebx,ebp
c0010f83:	74 13                	je     c0010f98 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010f85:	43                   	inc    ebx
c0010f86:	50                   	push   eax
c0010f87:	50                   	push   eax
c0010f88:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010f8c:	50                   	push   eax
c0010f8d:	56                   	push   esi
c0010f8e:	e8 d1 fb ff ff       	call   c0010b64 <VgaText::putchar(char)>
c0010f93:	83 c4 10             	add    esp,0x10
c0010f96:	eb e9                	jmp    c0010f81 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010f98:	83 ec 0c             	sub    esp,0xc
c0010f9b:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010fa2:	56                   	push   esi
c0010fa3:	e8 86 f9 ff ff       	call   c001092e <VgaText::doUpdate()>
c0010fa8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010fac:	89 38                	mov    DWORD PTR [eax],edi
c0010fae:	83 c4 1c             	add    esp,0x1c
c0010fb1:	31 c0                	xor    eax,eax
c0010fb3:	5b                   	pop    ebx
c0010fb4:	5e                   	pop    esi
c0010fb5:	5f                   	pop    edi
c0010fb6:	5d                   	pop    ebp
c0010fb7:	c3                   	ret    

c0010fb8 <newTerminal(char*)>:
c0010fb8:	83 ec 28             	sub    esp,0x28
c0010fbb:	68 60 12 00 00       	push   0x1260
c0010fc0:	e8 0b e5 ff ff       	call   c000f4d0 <malloc>
c0010fc5:	5a                   	pop    edx
c0010fc6:	59                   	pop    ecx
c0010fc7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010fcb:	50                   	push   eax
c0010fcc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fd0:	e8 15 fd ff ff       	call   c0010cea <VgaText::VgaText(char const*)>
c0010fd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fd9:	83 c4 2c             	add    esp,0x2c
c0010fdc:	c3                   	ret    
c0010fdd:	90                   	nop

c0010fde <TSS::TSS()>:
c0010fde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fe2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010fe9:	90                   	nop
c0010fea:	c3                   	ret    
c0010feb:	90                   	nop

c0010fec <TSS::setESP(unsigned long)>:
c0010fec:	55                   	push   ebp
c0010fed:	89 e5                	mov    ebp,esp
c0010fef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ff2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ff5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010ff8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010ffb:	90                   	nop
c0010ffc:	5d                   	pop    ebp
c0010ffd:	c3                   	ret    

c0010ffe <TSS::flush()>:
c0010ffe:	55                   	push   ebp
c0010fff:	89 e5                	mov    ebp,esp
c0011001:	83 ec 10             	sub    esp,0x10
c0011004:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011007:	8b 00                	mov    eax,DWORD PTR [eax]
c0011009:	83 c8 03             	or     eax,0x3
c001100c:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011010:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011014:	66 89 d0             	mov    ax,dx
c0011017:	0f 00 d8             	ltr    ax
c001101a:	90                   	nop
c001101b:	c9                   	leave  
c001101c:	c3                   	ret    
c001101d:	90                   	nop

c001101e <TSS::setup(unsigned long, unsigned long)>:
c001101e:	55                   	push   ebp
c001101f:	89 e5                	mov    ebp,esp
c0011021:	83 ec 18             	sub    esp,0x18
c0011024:	83 ec 0c             	sub    esp,0xc
c0011027:	6a 68                	push   0x68
c0011029:	e8 a2 e4 ff ff       	call   c000f4d0 <malloc>
c001102e:	83 c4 10             	add    esp,0x10
c0011031:	89 c2                	mov    edx,eax
c0011033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011036:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001103c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001103f:	83 ec 04             	sub    esp,0x4
c0011042:	6a 68                	push   0x68
c0011044:	6a 00                	push   0x0
c0011046:	50                   	push   eax
c0011047:	e8 3f f6 fe ff       	call   c000068b <memset>
c001104c:	83 c4 10             	add    esp,0x10
c001104f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011052:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011055:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001105b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001105e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011061:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001106a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001106d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011070:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011073:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011076:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011079:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001107f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011082:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011085:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001108b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001108e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011091:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001109a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001109d:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00110a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110a9:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00110af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110b5:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00110bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110c1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00110c4:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00110c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00110d0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00110d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110d9:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00110e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110e6:	0f 20 da             	mov    edx,cr3
c00110e9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00110ec:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00110ef:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00110f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110f8:	83 ec 08             	sub    esp,0x8
c00110fb:	50                   	push   eax
c00110fc:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110ff:	50                   	push   eax
c0011100:	e8 a9 db ff ff       	call   c000ecae <GDTEntry::setBase(unsigned int)>
c0011105:	83 c4 10             	add    esp,0x10
c0011108:	83 ec 08             	sub    esp,0x8
c001110b:	6a 68                	push   0x68
c001110d:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011110:	50                   	push   eax
c0011111:	e8 b4 db ff ff       	call   c000ecca <GDTEntry::setLimit(unsigned int)>
c0011116:	83 c4 10             	add    esp,0x10
c0011119:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001111d:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011120:	83 e0 0f             	and    eax,0xf
c0011123:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011126:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011129:	83 c8 40             	or     eax,0x40
c001112c:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001112f:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0011134:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001113a:	05 78 01 00 00       	add    eax,0x178
c001113f:	83 ec 04             	sub    esp,0x4
c0011142:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011145:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011148:	50                   	push   eax
c0011149:	e8 b0 db ff ff       	call   c000ecfe <GDT::addEntry(GDTEntry)>
c001114e:	83 c4 10             	add    esp,0x10
c0011151:	89 c2                	mov    edx,eax
c0011153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011156:	89 10                	mov    DWORD PTR [eax],edx
c0011158:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c001115d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011163:	05 78 01 00 00       	add    eax,0x178
c0011168:	83 ec 0c             	sub    esp,0xc
c001116b:	50                   	push   eax
c001116c:	e8 d1 db ff ff       	call   c000ed42 <GDT::flush()>
c0011171:	83 c4 10             	add    esp,0x10
c0011174:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011177:	8b 00                	mov    eax,DWORD PTR [eax]
c0011179:	83 ec 08             	sub    esp,0x8
c001117c:	50                   	push   eax
c001117d:	68 c8 80 02 c0       	push   0xc00280c8
c0011182:	e8 16 15 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0011187:	83 c4 10             	add    esp,0x10
c001118a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001118d:	8b 00                	mov    eax,DWORD PTR [eax]
c001118f:	c9                   	leave  
c0011190:	c3                   	ret    
c0011191:	90                   	nop

c0011192 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011196:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001119a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001119d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00111a2:	75 08                	jne    c00111ac <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00111a4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00111aa:	eb 38                	jmp    c00111e4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00111ac:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111b1:	75 17                	jne    c00111ca <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00111b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111bb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00111c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00111c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111c7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00111ca:	89 c1                	mov    ecx,eax
c00111cc:	83 e1 fd             	and    ecx,0xfffffffd
c00111cf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00111d5:	74 cd                	je     c00111a4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00111d7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00111dc:	83 e0 ef             	and    eax,0xffffffef
c00111df:	83 f8 08             	cmp    eax,0x8
c00111e2:	76 c0                	jbe    c00111a4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00111e4:	31 c0                	xor    eax,eax
c00111e6:	c3                   	ret    
c00111e7:	90                   	nop

c00111e8 <ReservedFilename::isAtty()>:
c00111e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00111ef:	31 c0                	xor    eax,eax
c00111f1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00111f7:	74 09                	je     c0011202 <ReservedFilename::isAtty()+0x1a>
c00111f9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00111ff:	0f 94 c0             	sete   al
c0011202:	c3                   	ret    
c0011203:	90                   	nop

c0011204 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011208:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001120c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001120f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011213:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011218:	75 08                	jne    c0011222 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001121a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011220:	eb 3d                	jmp    c001125f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011222:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011227:	75 17                	jne    c0011240 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011229:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001122e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011231:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011237:	8b 10                	mov    edx,DWORD PTR [eax]
c0011239:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001123d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011240:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011245:	75 04                	jne    c001124b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011247:	89 0a                	mov    DWORD PTR [edx],ecx
c0011249:	eb 14                	jmp    c001125f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001124b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011250:	74 c8                	je     c001121a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011252:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011257:	83 e0 ef             	and    eax,0xffffffef
c001125a:	83 f8 08             	cmp    eax,0x8
c001125d:	76 bb                	jbe    c001121a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001125f:	31 c0                	xor    eax,eax
c0011261:	c3                   	ret    

c0011262 <UnixFile::getFileDescriptor()>:
c0011262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011266:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011269:	c3                   	ret    

c001126a <UnixFile::UnixFile(int)>:
c001126a:	53                   	push   ebx
c001126b:	83 ec 28             	sub    esp,0x28
c001126e:	ba b4 81 02 c0       	mov    edx,0xc00281b4
c0011273:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011277:	89 10                	mov    DWORD PTR [eax],edx
c0011279:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011281:	0f 8f 8c 01 00 00    	jg     c0011413 <UnixFile::UnixFile(int)+0x1a9>
c0011287:	a1 e0 aa 02 c0       	mov    eax,ds:0xc002aae0
c001128c:	8d 50 01             	lea    edx,[eax+0x1]
c001128f:	89 15 e0 aa 02 c0    	mov    DWORD PTR ds:0xc002aae0,edx
c0011295:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011299:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001129c:	83 ec 08             	sub    esp,0x8
c001129f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00112a3:	68 18 bc 02 c0       	push   0xc002bc18
c00112a8:	e8 f3 51 01 00       	call   c00264a0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00112ad:	83 c4 10             	add    esp,0x10
c00112b0:	a0 14 bc 02 c0       	mov    al,ds:0xc002bc14
c00112b5:	83 f0 01             	xor    eax,0x1
c00112b8:	84 c0                	test   al,al
c00112ba:	0f 84 54 01 00 00    	je     c0011414 <UnixFile::UnixFile(int)+0x1aa>
c00112c0:	c6 05 14 bc 02 c0 01 	mov    BYTE PTR ds:0xc002bc14,0x1
c00112c7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00112cf:	83 ec 0c             	sub    esp,0xc
c00112d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112d6:	e8 f5 e1 ff ff       	call   c000f4d0 <malloc>
c00112db:	83 c4 10             	add    esp,0x10
c00112de:	89 c3                	mov    ebx,eax
c00112e0:	83 ec 08             	sub    esp,0x8
c00112e3:	68 03 ff ff 0f       	push   0xfffff03
c00112e8:	53                   	push   ebx
c00112e9:	e8 2c 01 00 00       	call   c001141a <ReservedFilename::ReservedFilename(int)>
c00112ee:	83 c4 10             	add    esp,0x10
c00112f1:	89 1d 0c bc 02 c0    	mov    DWORD PTR ds:0xc002bc0c,ebx
c00112f7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00112ff:	83 ec 0c             	sub    esp,0xc
c0011302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011306:	e8 c5 e1 ff ff       	call   c000f4d0 <malloc>
c001130b:	83 c4 10             	add    esp,0x10
c001130e:	89 c3                	mov    ebx,eax
c0011310:	83 ec 08             	sub    esp,0x8
c0011313:	68 01 ff ff 0f       	push   0xfffff01
c0011318:	53                   	push   ebx
c0011319:	e8 fc 00 00 00       	call   c001141a <ReservedFilename::ReservedFilename(int)>
c001131e:	83 c4 10             	add    esp,0x10
c0011321:	89 1d 10 bc 02 c0    	mov    DWORD PTR ds:0xc002bc10,ebx
c0011327:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001132f:	83 ec 0c             	sub    esp,0xc
c0011332:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011336:	e8 95 e1 ff ff       	call   c000f4d0 <malloc>
c001133b:	83 c4 10             	add    esp,0x10
c001133e:	89 c3                	mov    ebx,eax
c0011340:	83 ec 08             	sub    esp,0x8
c0011343:	68 00 ff ff 0f       	push   0xfffff00
c0011348:	53                   	push   ebx
c0011349:	e8 cc 00 00 00       	call   c001141a <ReservedFilename::ReservedFilename(int)>
c001134e:	83 c4 10             	add    esp,0x10
c0011351:	89 1d 04 bc 02 c0    	mov    DWORD PTR ds:0xc002bc04,ebx
c0011357:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001135f:	83 ec 0c             	sub    esp,0xc
c0011362:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011366:	e8 65 e1 ff ff       	call   c000f4d0 <malloc>
c001136b:	83 c4 10             	add    esp,0x10
c001136e:	89 c3                	mov    ebx,eax
c0011370:	83 ec 08             	sub    esp,0x8
c0011373:	68 02 ff ff 0f       	push   0xfffff02
c0011378:	53                   	push   ebx
c0011379:	e8 9c 00 00 00       	call   c001141a <ReservedFilename::ReservedFilename(int)>
c001137e:	83 c4 10             	add    esp,0x10
c0011381:	89 1d 08 bc 02 c0    	mov    DWORD PTR ds:0xc002bc08,ebx
c0011387:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001138f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011394:	7f 7e                	jg     c0011414 <UnixFile::UnixFile(int)+0x1aa>
c0011396:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001139e:	83 ec 0c             	sub    esp,0xc
c00113a1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00113a5:	e8 26 e1 ff ff       	call   c000f4d0 <malloc>
c00113aa:	83 c4 10             	add    esp,0x10
c00113ad:	89 c3                	mov    ebx,eax
c00113af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113b3:	05 10 ff ff 0f       	add    eax,0xfffff10
c00113b8:	83 ec 08             	sub    esp,0x8
c00113bb:	50                   	push   eax
c00113bc:	53                   	push   ebx
c00113bd:	e8 58 00 00 00       	call   c001141a <ReservedFilename::ReservedFilename(int)>
c00113c2:	83 c4 10             	add    esp,0x10
c00113c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113c9:	89 1c 85 e0 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4420],ebx
c00113d0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00113d8:	83 ec 0c             	sub    esp,0xc
c00113db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00113df:	e8 ec e0 ff ff       	call   c000f4d0 <malloc>
c00113e4:	83 c4 10             	add    esp,0x10
c00113e7:	89 c3                	mov    ebx,eax
c00113e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113ed:	05 20 ff ff 0f       	add    eax,0xfffff20
c00113f2:	83 ec 08             	sub    esp,0x8
c00113f5:	50                   	push   eax
c00113f6:	53                   	push   ebx
c00113f7:	e8 1e 00 00 00       	call   c001141a <ReservedFilename::ReservedFilename(int)>
c00113fc:	83 c4 10             	add    esp,0x10
c00113ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011403:	89 1c 85 a0 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4460],ebx
c001140a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001140e:	e9 7c ff ff ff       	jmp    c001138f <UnixFile::UnixFile(int)+0x125>
c0011413:	90                   	nop
c0011414:	83 c4 28             	add    esp,0x28
c0011417:	5b                   	pop    ebx
c0011418:	c3                   	ret    
c0011419:	90                   	nop

c001141a <ReservedFilename::ReservedFilename(int)>:
c001141a:	83 ec 0c             	sub    esp,0xc
c001141d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011421:	83 ec 08             	sub    esp,0x8
c0011424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011428:	50                   	push   eax
c0011429:	e8 3c fe ff ff       	call   c001126a <UnixFile::UnixFile(int)>
c001142e:	83 c4 10             	add    esp,0x10
c0011431:	ba d0 81 02 c0       	mov    edx,0xc00281d0
c0011436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001143a:	89 10                	mov    DWORD PTR [eax],edx
c001143c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011440:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011444:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011447:	90                   	nop
c0011448:	83 c4 0c             	add    esp,0xc
c001144b:	c3                   	ret    

c001144c <UnixFile::~UnixFile()>:
c001144c:	83 ec 1c             	sub    esp,0x1c
c001144f:	ba b4 81 02 c0       	mov    edx,0xc00281b4
c0011454:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011458:	89 10                	mov    DWORD PTR [eax],edx
c001145a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001145e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011461:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011466:	7f 73                	jg     c00114db <UnixFile::~UnixFile()+0x8f>
c0011468:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011470:	83 ec 0c             	sub    esp,0xc
c0011473:	68 18 bc 02 c0       	push   0xc002bc18
c0011478:	e8 f7 50 01 00       	call   c0026574 <LinkedList<UnixFile>::getFirstElement()>
c001147d:	83 c4 10             	add    esp,0x10
c0011480:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011484:	83 ec 0c             	sub    esp,0xc
c0011487:	68 18 bc 02 c0       	push   0xc002bc18
c001148c:	e8 eb 50 01 00       	call   c002657c <LinkedList<UnixFile>::removeFirst()>
c0011491:	83 c4 10             	add    esp,0x10
c0011494:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011498:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001149c:	74 40                	je     c00114de <UnixFile::~UnixFile()+0x92>
c001149e:	83 ec 08             	sub    esp,0x8
c00114a1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00114a5:	68 18 bc 02 c0       	push   0xc002bc18
c00114aa:	e8 f1 4f 01 00       	call   c00264a0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00114af:	83 c4 10             	add    esp,0x10
c00114b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114b6:	8d 50 01             	lea    edx,[eax+0x1]
c00114b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00114bd:	3d 88 13 00 00       	cmp    eax,0x1388
c00114c2:	0f 94 c0             	sete   al
c00114c5:	84 c0                	test   al,al
c00114c7:	74 a7                	je     c0011470 <UnixFile::~UnixFile()+0x24>
c00114c9:	83 ec 0c             	sub    esp,0xc
c00114cc:	68 8c 81 02 c0       	push   0xc002818c
c00114d1:	e8 0b 7d 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c00114d6:	83 c4 10             	add    esp,0x10
c00114d9:	eb 95                	jmp    c0011470 <UnixFile::~UnixFile()+0x24>
c00114db:	90                   	nop
c00114dc:	eb 01                	jmp    c00114df <UnixFile::~UnixFile()+0x93>
c00114de:	90                   	nop
c00114df:	90                   	nop
c00114e0:	83 c4 1c             	add    esp,0x1c
c00114e3:	c3                   	ret    

c00114e4 <UnixFile::~UnixFile()>:
c00114e4:	83 ec 0c             	sub    esp,0xc
c00114e7:	83 ec 0c             	sub    esp,0xc
c00114ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114ee:	e8 59 ff ff ff       	call   c001144c <UnixFile::~UnixFile()>
c00114f3:	83 c4 10             	add    esp,0x10
c00114f6:	83 ec 08             	sub    esp,0x8
c00114f9:	6a 0c                	push   0xc
c00114fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114ff:	e8 b9 10 00 00       	call   c00125bd <operator delete(void*, unsigned long)>
c0011504:	83 c4 10             	add    esp,0x10
c0011507:	83 c4 0c             	add    esp,0xc
c001150a:	c3                   	ret    
c001150b:	90                   	nop

c001150c <ReservedFilename::~ReservedFilename()>:
c001150c:	83 ec 0c             	sub    esp,0xc
c001150f:	ba d0 81 02 c0       	mov    edx,0xc00281d0
c0011514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011518:	89 10                	mov    DWORD PTR [eax],edx
c001151a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001151e:	83 ec 0c             	sub    esp,0xc
c0011521:	50                   	push   eax
c0011522:	e8 25 ff ff ff       	call   c001144c <UnixFile::~UnixFile()>
c0011527:	83 c4 10             	add    esp,0x10
c001152a:	90                   	nop
c001152b:	83 c4 0c             	add    esp,0xc
c001152e:	c3                   	ret    
c001152f:	90                   	nop

c0011530 <ReservedFilename::~ReservedFilename()>:
c0011530:	83 ec 0c             	sub    esp,0xc
c0011533:	83 ec 0c             	sub    esp,0xc
c0011536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001153a:	e8 cd ff ff ff       	call   c001150c <ReservedFilename::~ReservedFilename()>
c001153f:	83 c4 10             	add    esp,0x10
c0011542:	83 ec 08             	sub    esp,0x8
c0011545:	6a 0c                	push   0xc
c0011547:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001154b:	e8 6d 10 00 00       	call   c00125bd <operator delete(void*, unsigned long)>
c0011550:	83 c4 10             	add    esp,0x10
c0011553:	83 c4 0c             	add    esp,0xc
c0011556:	c3                   	ret    

c0011557 <getFromFileDescriptor(int)>:
c0011557:	53                   	push   ebx
c0011558:	83 ec 08             	sub    esp,0x8
c001155b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001155f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011565:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001156b:	7f 2c                	jg     c0011599 <getFromFileDescriptor(int)+0x42>
c001156d:	83 ec 0c             	sub    esp,0xc
c0011570:	68 18 bc 02 c0       	push   0xc002bc18
c0011575:	e8 fa 4f 01 00       	call   c0026574 <LinkedList<UnixFile>::getFirstElement()>
c001157a:	83 c4 10             	add    esp,0x10
c001157d:	85 c0                	test   eax,eax
c001157f:	75 04                	jne    c0011585 <getFromFileDescriptor(int)+0x2e>
c0011581:	31 c0                	xor    eax,eax
c0011583:	eb 6e                	jmp    c00115f3 <getFromFileDescriptor(int)+0x9c>
c0011585:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011588:	74 69                	je     c00115f3 <getFromFileDescriptor(int)+0x9c>
c001158a:	52                   	push   edx
c001158b:	52                   	push   edx
c001158c:	50                   	push   eax
c001158d:	68 18 bc 02 c0       	push   0xc002bc18
c0011592:	e8 87 50 01 00       	call   c002661e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011597:	eb e1                	jmp    c001157a <getFromFileDescriptor(int)+0x23>
c0011599:	a1 0c bc 02 c0       	mov    eax,ds:0xc002bc0c
c001159e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00115a4:	74 4d                	je     c00115f3 <getFromFileDescriptor(int)+0x9c>
c00115a6:	a1 10 bc 02 c0       	mov    eax,ds:0xc002bc10
c00115ab:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00115b1:	74 40                	je     c00115f3 <getFromFileDescriptor(int)+0x9c>
c00115b3:	a1 08 bc 02 c0       	mov    eax,ds:0xc002bc08
c00115b8:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00115be:	74 33                	je     c00115f3 <getFromFileDescriptor(int)+0x9c>
c00115c0:	a1 04 bc 02 c0       	mov    eax,ds:0xc002bc04
c00115c5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00115cb:	74 26                	je     c00115f3 <getFromFileDescriptor(int)+0x9c>
c00115cd:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00115d3:	83 f8 08             	cmp    eax,0x8
c00115d6:	77 09                	ja     c00115e1 <getFromFileDescriptor(int)+0x8a>
c00115d8:	8b 04 85 e0 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4420]
c00115df:	eb 12                	jmp    c00115f3 <getFromFileDescriptor(int)+0x9c>
c00115e1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00115e7:	83 fb 08             	cmp    ebx,0x8
c00115ea:	77 95                	ja     c0011581 <getFromFileDescriptor(int)+0x2a>
c00115ec:	8b 04 9d a0 bb 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4460]
c00115f3:	83 c4 08             	add    esp,0x8
c00115f6:	5b                   	pop    ebx
c00115f7:	c3                   	ret    

c00115f8 <__static_initialization_and_destruction_0(int, int)>:
c00115f8:	83 ec 0c             	sub    esp,0xc
c00115fb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011600:	75 34                	jne    c0011636 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011602:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001160a:	75 2a                	jne    c0011636 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001160c:	83 ec 0c             	sub    esp,0xc
c001160f:	68 18 bc 02 c0       	push   0xc002bc18
c0011614:	e8 2f 4e 01 00       	call   c0026448 <LinkedList<UnixFile>::LinkedList()>
c0011619:	83 c4 10             	add    esp,0x10
c001161c:	83 ec 04             	sub    esp,0x4
c001161f:	68 70 aa 02 c0       	push   0xc002aa70
c0011624:	68 18 bc 02 c0       	push   0xc002bc18
c0011629:	68 46 64 02 c0       	push   0xc0026446
c001162e:	e8 04 0f 00 00       	call   c0012537 <__cxa_atexit>
c0011633:	83 c4 10             	add    esp,0x10
c0011636:	90                   	nop
c0011637:	83 c4 0c             	add    esp,0xc
c001163a:	c3                   	ret    

c001163b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001163b:	83 ec 0c             	sub    esp,0xc
c001163e:	83 ec 08             	sub    esp,0x8
c0011641:	68 ff ff 00 00       	push   0xffff
c0011646:	6a 01                	push   0x1
c0011648:	e8 ab ff ff ff       	call   c00115f8 <__static_initialization_and_destruction_0(int, int)>
c001164d:	83 c4 10             	add    esp,0x10
c0011650:	83 c4 0c             	add    esp,0xc
c0011653:	c3                   	ret    

c0011654 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011654:	53                   	push   ebx
c0011655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011659:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001165d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011663:	89 c8                	mov    eax,ecx
c0011665:	d1 e8                	shr    eax,1
c0011667:	03 05 e8 aa 02 c0    	add    eax,DWORD PTR ds:0xc002aae8
c001166d:	83 e1 01             	and    ecx,0x1
c0011670:	8a 10                	mov    dl,BYTE PTR [eax]
c0011672:	75 09                	jne    c001167d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011674:	83 e2 f0             	and    edx,0xfffffff0
c0011677:	09 da                	or     edx,ebx
c0011679:	88 10                	mov    BYTE PTR [eax],dl
c001167b:	5b                   	pop    ebx
c001167c:	c3                   	ret    
c001167d:	c1 e3 04             	shl    ebx,0x4
c0011680:	83 e2 0f             	and    edx,0xf
c0011683:	09 da                	or     edx,ebx
c0011685:	88 10                	mov    BYTE PTR [eax],dl
c0011687:	5b                   	pop    ebx
c0011688:	c3                   	ret    

c0011689 <Virt::getPageState(unsigned long)>:
c0011689:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001168d:	8b 0d e8 aa 02 c0    	mov    ecx,DWORD PTR ds:0xc002aae8
c0011693:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011699:	89 d0                	mov    eax,edx
c001169b:	d1 e8                	shr    eax,1
c001169d:	83 e2 01             	and    edx,0x1
c00116a0:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00116a3:	75 04                	jne    c00116a9 <Virt::getPageState(unsigned long)+0x20>
c00116a5:	83 e0 0f             	and    eax,0xf
c00116a8:	c3                   	ret    
c00116a9:	c0 e8 04             	shr    al,0x4
c00116ac:	c3                   	ret    

c00116ad <Virt::allocateKernelVirtualPages(int)>:
c00116ad:	55                   	push   ebp
c00116ae:	31 ed                	xor    ebp,ebp
c00116b0:	57                   	push   edi
c00116b1:	56                   	push   esi
c00116b2:	53                   	push   ebx
c00116b3:	31 db                	xor    ebx,ebx
c00116b5:	83 ec 1c             	sub    esp,0x1c
c00116b8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00116bc:	8b 3d e4 aa 02 c0    	mov    edi,DWORD PTR ds:0xc002aae4
c00116c2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00116c7:	57                   	push   edi
c00116c8:	e8 bc ff ff ff       	call   c0011689 <Virt::getPageState(unsigned long)>
c00116cd:	5a                   	pop    edx
c00116ce:	84 c0                	test   al,al
c00116d0:	75 3a                	jne    c001170c <Virt::allocateKernelVirtualPages(int)+0x5f>
c00116d2:	85 db                	test   ebx,ebx
c00116d4:	75 02                	jne    c00116d8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00116d6:	89 fd                	mov    ebp,edi
c00116d8:	43                   	inc    ebx
c00116d9:	39 f3                	cmp    ebx,esi
c00116db:	74 5a                	je     c0011737 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00116dd:	47                   	inc    edi
c00116de:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00116e4:	76 31                	jbe    c0011717 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00116e6:	c7 05 e4 aa 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002aae4,0xc8000
c00116f0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00116f5:	75 28                	jne    c001171f <Virt::allocateKernelVirtualPages(int)+0x72>
c00116f7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00116fc:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011701:	57                   	push   edi
c0011702:	e8 82 ff ff ff       	call   c0011689 <Virt::getPageState(unsigned long)>
c0011707:	5a                   	pop    edx
c0011708:	84 c0                	test   al,al
c001170a:	74 c6                	je     c00116d2 <Virt::allocateKernelVirtualPages(int)+0x25>
c001170c:	31 db                	xor    ebx,ebx
c001170e:	47                   	inc    edi
c001170f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011715:	77 cf                	ja     c00116e6 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011717:	89 3d e4 aa 02 c0    	mov    DWORD PTR ds:0xc002aae4,edi
c001171d:	eb a8                	jmp    c00116c7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001171f:	83 ec 0c             	sub    esp,0xc
c0011722:	68 e4 81 02 c0       	push   0xc00281e4
c0011727:	e8 b5 7a 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c001172c:	8b 3d e4 aa 02 c0    	mov    edi,DWORD PTR ds:0xc002aae4
c0011732:	83 c4 10             	add    esp,0x10
c0011735:	eb 90                	jmp    c00116c7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011737:	89 2d e4 aa 02 c0    	mov    DWORD PTR ds:0xc002aae4,ebp
c001173d:	4b                   	dec    ebx
c001173e:	74 5f                	je     c001179f <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011740:	85 f6                	test   esi,esi
c0011742:	74 3d                	je     c0011781 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011744:	89 e8                	mov    eax,ebp
c0011746:	31 db                	xor    ebx,ebx
c0011748:	8d 7e ff             	lea    edi,[esi-0x1]
c001174b:	eb 14                	jmp    c0011761 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001174d:	6a 01                	push   0x1
c001174f:	43                   	inc    ebx
c0011750:	50                   	push   eax
c0011751:	e8 fe fe ff ff       	call   c0011654 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011756:	58                   	pop    eax
c0011757:	39 f3                	cmp    ebx,esi
c0011759:	5a                   	pop    edx
c001175a:	74 25                	je     c0011781 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001175c:	a1 e4 aa 02 c0       	mov    eax,ds:0xc002aae4
c0011761:	8d 50 01             	lea    edx,[eax+0x1]
c0011764:	85 db                	test   ebx,ebx
c0011766:	89 15 e4 aa 02 c0    	mov    DWORD PTR ds:0xc002aae4,edx
c001176c:	74 20                	je     c001178e <Virt::allocateKernelVirtualPages(int)+0xe1>
c001176e:	39 df                	cmp    edi,ebx
c0011770:	75 db                	jne    c001174d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011772:	6a 03                	push   0x3
c0011774:	43                   	inc    ebx
c0011775:	50                   	push   eax
c0011776:	e8 d9 fe ff ff       	call   c0011654 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001177b:	59                   	pop    ecx
c001177c:	39 f3                	cmp    ebx,esi
c001177e:	58                   	pop    eax
c001177f:	75 db                	jne    c001175c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011781:	83 c4 1c             	add    esp,0x1c
c0011784:	89 e8                	mov    eax,ebp
c0011786:	5b                   	pop    ebx
c0011787:	c1 e0 0c             	shl    eax,0xc
c001178a:	5e                   	pop    esi
c001178b:	5f                   	pop    edi
c001178c:	5d                   	pop    ebp
c001178d:	c3                   	ret    
c001178e:	6a 02                	push   0x2
c0011790:	bb 01 00 00 00       	mov    ebx,0x1
c0011795:	50                   	push   eax
c0011796:	e8 b9 fe ff ff       	call   c0011654 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001179b:	58                   	pop    eax
c001179c:	5a                   	pop    edx
c001179d:	eb bd                	jmp    c001175c <Virt::allocateKernelVirtualPages(int)+0xaf>
c001179f:	6a 04                	push   0x4
c00117a1:	8d 45 01             	lea    eax,[ebp+0x1]
c00117a4:	55                   	push   ebp
c00117a5:	a3 e4 aa 02 c0       	mov    ds:0xc002aae4,eax
c00117aa:	e8 a5 fe ff ff       	call   c0011654 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117af:	59                   	pop    ecx
c00117b0:	89 e8                	mov    eax,ebp
c00117b2:	5b                   	pop    ebx
c00117b3:	c1 e0 0c             	shl    eax,0xc
c00117b6:	83 c4 1c             	add    esp,0x1c
c00117b9:	5b                   	pop    ebx
c00117ba:	5e                   	pop    esi
c00117bb:	5f                   	pop    edi
c00117bc:	5d                   	pop    ebp
c00117bd:	c3                   	ret    

c00117be <Virt::virtualMemorySetup()>:
c00117be:	53                   	push   ebx
c00117bf:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117c4:	83 ec 08             	sub    esp,0x8
c00117c7:	6a 0f                	push   0xf
c00117c9:	53                   	push   ebx
c00117ca:	43                   	inc    ebx
c00117cb:	e8 84 fe ff ff       	call   c0011654 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117d0:	59                   	pop    ecx
c00117d1:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00117d7:	58                   	pop    eax
c00117d8:	75 ed                	jne    c00117c7 <Virt::virtualMemorySetup()+0x9>
c00117da:	83 ec 08             	sub    esp,0x8
c00117dd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117e2:	68 00 00 00 c8       	push   0xc8000000
c00117e7:	68 6b 83 02 c0       	push   0xc002836b
c00117ec:	e8 ac 0e 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00117f1:	58                   	pop    eax
c00117f2:	5a                   	pop    edx
c00117f3:	68 00 f0 ff ef       	push   0xeffff000
c00117f8:	68 7f 83 02 c0       	push   0xc002837f
c00117fd:	e8 9b 0e 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0011802:	83 c4 10             	add    esp,0x10
c0011805:	83 ec 08             	sub    esp,0x8
c0011808:	6a 00                	push   0x0
c001180a:	53                   	push   ebx
c001180b:	43                   	inc    ebx
c001180c:	e8 43 fe ff ff       	call   c0011654 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011811:	83 c4 10             	add    esp,0x10
c0011814:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001181a:	75 e9                	jne    c0011805 <Virt::virtualMemorySetup()+0x47>
c001181c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011821:	83 ec 08             	sub    esp,0x8
c0011824:	6a 0f                	push   0xf
c0011826:	53                   	push   ebx
c0011827:	43                   	inc    ebx
c0011828:	e8 27 fe ff ff       	call   c0011654 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001182d:	83 c4 10             	add    esp,0x10
c0011830:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011836:	75 e9                	jne    c0011821 <Virt::virtualMemorySetup()+0x63>
c0011838:	83 c4 08             	add    esp,0x8
c001183b:	5b                   	pop    ebx
c001183c:	c3                   	ret    

c001183d <Virt::getAKernelVAS()>:
c001183d:	a1 24 bc 02 c0       	mov    eax,ds:0xc002bc24
c0011842:	c3                   	ret    

c0011843 <Virt::setupPageSwapping(int)>:
c0011843:	57                   	push   edi
c0011844:	56                   	push   esi
c0011845:	53                   	push   ebx
c0011846:	83 ec 1c             	sub    esp,0x1c
c0011849:	68 14 01 00 00       	push   0x114
c001184e:	e8 7d dc ff ff       	call   c000f4d0 <malloc>
c0011853:	83 c4 0c             	add    esp,0xc
c0011856:	89 c6                	mov    esi,eax
c0011858:	ff 35 d4 cf 02 c0    	push   DWORD PTR ds:0xc002cfd4
c001185e:	68 93 83 02 c0       	push   0xc0028393
c0011863:	50                   	push   eax
c0011864:	e8 63 13 00 00       	call   c0012bcc <File::File(char const*, Process*)>
c0011869:	89 34 24             	mov    DWORD PTR [esp],esi
c001186c:	e8 37 15 00 00       	call   c0012da8 <File::unlink()>
c0011871:	58                   	pop    eax
c0011872:	5a                   	pop    edx
c0011873:	6a 12                	push   0x12
c0011875:	56                   	push   esi
c0011876:	e8 b5 13 00 00       	call   c0012c30 <File::open(FileOpenMode)>
c001187b:	83 c4 10             	add    esp,0x10
c001187e:	85 c0                	test   eax,eax
c0011880:	0f 85 ca 00 00 00    	jne    c0011950 <Virt::setupPageSwapping(int)+0x10d>
c0011886:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001188a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011892:	c1 e3 08             	shl    ebx,0x8
c0011895:	83 ec 0c             	sub    esp,0xc
c0011898:	68 00 00 01 00       	push   0x10000
c001189d:	e8 2e dc ff ff       	call   c000f4d0 <malloc>
c00118a2:	83 c4 0c             	add    esp,0xc
c00118a5:	89 c7                	mov    edi,eax
c00118a7:	68 00 00 01 00       	push   0x10000
c00118ac:	6a 00                	push   0x0
c00118ae:	50                   	push   eax
c00118af:	e8 d7 ed fe ff       	call   c000068b <memset>
c00118b4:	83 c4 10             	add    esp,0x10
c00118b7:	85 db                	test   ebx,ebx
c00118b9:	79 03                	jns    c00118be <Virt::setupPageSwapping(int)+0x7b>
c00118bb:	83 c3 0f             	add    ebx,0xf
c00118be:	c1 fb 04             	sar    ebx,0x4
c00118c1:	4b                   	dec    ebx
c00118c2:	83 fb ff             	cmp    ebx,0xffffffff
c00118c5:	74 4b                	je     c0011912 <Virt::setupPageSwapping(int)+0xcf>
c00118c7:	83 ec 0c             	sub    esp,0xc
c00118ca:	8b 06                	mov    eax,DWORD PTR [esi]
c00118cc:	8d 54 24 18          	lea    edx,[esp+0x18]
c00118d0:	52                   	push   edx
c00118d1:	57                   	push   edi
c00118d2:	6a 00                	push   0x0
c00118d4:	68 00 00 01 00       	push   0x10000
c00118d9:	56                   	push   esi
c00118da:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00118dd:	83 c4 20             	add    esp,0x20
c00118e0:	85 c0                	test   eax,eax
c00118e2:	75 59                	jne    c001193d <Virt::setupPageSwapping(int)+0xfa>
c00118e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118e8:	3d 00 00 01 00       	cmp    eax,0x10000
c00118ed:	74 d2                	je     c00118c1 <Virt::setupPageSwapping(int)+0x7e>
c00118ef:	83 ec 08             	sub    esp,0x8
c00118f2:	4b                   	dec    ebx
c00118f3:	50                   	push   eax
c00118f4:	68 e6 83 02 c0       	push   0xc00283e6
c00118f9:	e8 9f 0d 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00118fe:	c7 04 24 ef 83 02 c0 	mov    DWORD PTR [esp],0xc00283ef
c0011905:	e8 d7 78 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c001190a:	83 c4 10             	add    esp,0x10
c001190d:	83 fb ff             	cmp    ebx,0xffffffff
c0011910:	75 b5                	jne    c00118c7 <Virt::setupPageSwapping(int)+0x84>
c0011912:	83 ec 0c             	sub    esp,0xc
c0011915:	56                   	push   esi
c0011916:	e8 73 13 00 00       	call   c0012c8e <File::close()>
c001191b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001191e:	e8 cd db ff ff       	call   c000f4f0 <rfree>
c0011923:	83 c4 10             	add    esp,0x10
c0011926:	85 f6                	test   esi,esi
c0011928:	74 0c                	je     c0011936 <Virt::setupPageSwapping(int)+0xf3>
c001192a:	83 ec 0c             	sub    esp,0xc
c001192d:	8b 06                	mov    eax,DWORD PTR [esi]
c001192f:	56                   	push   esi
c0011930:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011933:	83 c4 10             	add    esp,0x10
c0011936:	83 c4 10             	add    esp,0x10
c0011939:	5b                   	pop    ebx
c001193a:	5e                   	pop    esi
c001193b:	5f                   	pop    edi
c001193c:	c3                   	ret    
c001193d:	83 ec 08             	sub    esp,0x8
c0011940:	50                   	push   eax
c0011941:	68 ce 83 02 c0       	push   0xc00283ce
c0011946:	e8 52 0d 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001194b:	83 c4 10             	add    esp,0x10
c001194e:	eb 94                	jmp    c00118e4 <Virt::setupPageSwapping(int)+0xa1>
c0011950:	83 ec 08             	sub    esp,0x8
c0011953:	50                   	push   eax
c0011954:	68 aa 83 02 c0       	push   0xc00283aa
c0011959:	e8 3f 0d 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001195e:	c7 04 24 b3 83 02 c0 	mov    DWORD PTR [esp],0xc00283b3
c0011965:	e8 77 78 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c001196a:	83 c4 10             	add    esp,0x10
c001196d:	e9 14 ff ff ff       	jmp    c0011886 <Virt::setupPageSwapping(int)+0x43>

c0011972 <VAS::VAS()>:
c0011972:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011976:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001197d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011981:	a3 24 bc 02 c0       	mov    ds:0xc002bc24,eax
c0011986:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001198a:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001198e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011992:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011995:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011999:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c00119a0:	90                   	nop
c00119a1:	c3                   	ret    

c00119a2 <VAS::VAS(VAS*)>:
c00119a2:	83 ec 0c             	sub    esp,0xc
c00119a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119b0:	83 ec 0c             	sub    esp,0xc
c00119b3:	68 04 82 02 c0       	push   0xc0028204
c00119b8:	e8 24 78 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c00119bd:	83 c4 10             	add    esp,0x10
c00119c0:	90                   	nop
c00119c1:	83 c4 0c             	add    esp,0xc
c00119c4:	c3                   	ret    
c00119c5:	90                   	nop

c00119c6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00119c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119ca:	89 c2                	mov    edx,eax
c00119cc:	c1 e8 0a             	shr    eax,0xa
c00119cf:	c1 ea 16             	shr    edx,0x16
c00119d2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00119d7:	19 c9                	sbb    ecx,ecx
c00119d9:	c1 e2 0c             	shl    edx,0xc
c00119dc:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00119e2:	25 fc 0f 00 00       	and    eax,0xffc
c00119e7:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00119ee:	01 d0                	add    eax,edx
c00119f0:	c3                   	ret    
c00119f1:	90                   	nop

c00119f2 <VAS::getPageTableEntry(unsigned long)>:
c00119f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00119f6:	89 ca                	mov    edx,ecx
c00119f8:	c1 e9 0a             	shr    ecx,0xa
c00119fb:	c1 ea 16             	shr    edx,0x16
c00119fe:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011a04:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011a0a:	c1 e0 0c             	shl    eax,0xc
c0011a0d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011a10:	c3                   	ret    

c0011a11 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011a11:	57                   	push   edi
c0011a12:	56                   	push   esi
c0011a13:	be 01 00 00 00       	mov    esi,0x1
c0011a18:	53                   	push   ebx
c0011a19:	83 ec 10             	sub    esp,0x10
c0011a1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a20:	c1 eb 0c             	shr    ebx,0xc
c0011a23:	eb 3f                	jmp    c0011a64 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011a25:	e8 13 fe ff ff       	call   c001183d <Virt::getAKernelVAS()>
c0011a2a:	83 ec 08             	sub    esp,0x8
c0011a2d:	57                   	push   edi
c0011a2e:	50                   	push   eax
c0011a2f:	e8 be ff ff ff       	call   c00119f2 <VAS::getPageTableEntry(unsigned long)>
c0011a34:	83 c4 10             	add    esp,0x10
c0011a37:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a39:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a3d:	f6 c4 04             	test   ah,0x4
c0011a40:	75 5f                	jne    c0011aa1 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011a42:	80 fa 04             	cmp    dl,0x4
c0011a45:	74 78                	je     c0011abf <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011a47:	80 fa 02             	cmp    dl,0x2
c0011a4a:	0f 84 88 00 00 00    	je     c0011ad8 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011a50:	80 fa 03             	cmp    dl,0x3
c0011a53:	0f 84 ad 00 00 00    	je     c0011b06 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011a59:	fe ca                	dec    dl
c0011a5b:	0f 84 92 00 00 00    	je     c0011af3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a61:	43                   	inc    ebx
c0011a62:	31 f6                	xor    esi,esi
c0011a64:	53                   	push   ebx
c0011a65:	e8 1f fc ff ff       	call   c0011689 <Virt::getPageState(unsigned long)>
c0011a6a:	5f                   	pop    edi
c0011a6b:	89 df                	mov    edi,ebx
c0011a6d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011a71:	c1 e7 0c             	shl    edi,0xc
c0011a74:	84 c0                	test   al,al
c0011a76:	75 ad                	jne    c0011a25 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011a78:	83 ec 0c             	sub    esp,0xc
c0011a7b:	68 f5 83 02 c0       	push   0xc00283f5
c0011a80:	e8 5c 77 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c0011a85:	e8 b3 fd ff ff       	call   c001183d <Virt::getAKernelVAS()>
c0011a8a:	5a                   	pop    edx
c0011a8b:	59                   	pop    ecx
c0011a8c:	57                   	push   edi
c0011a8d:	50                   	push   eax
c0011a8e:	e8 5f ff ff ff       	call   c00119f2 <VAS::getPageTableEntry(unsigned long)>
c0011a93:	83 c4 10             	add    esp,0x10
c0011a96:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a98:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a9c:	f6 c4 04             	test   ah,0x4
c0011a9f:	74 c0                	je     c0011a61 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011aa1:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011aa5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011aaa:	83 ec 0c             	sub    esp,0xc
c0011aad:	50                   	push   eax
c0011aae:	e8 3d df ff ff       	call   c000f9f0 <Phys::freePage(unsigned long)>
c0011ab3:	83 c4 10             	add    esp,0x10
c0011ab6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011aba:	80 fa 04             	cmp    dl,0x4
c0011abd:	75 88                	jne    c0011a47 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011abf:	89 f0                	mov    eax,esi
c0011ac1:	84 c0                	test   al,al
c0011ac3:	75 47                	jne    c0011b0c <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011ac5:	c7 44 24 20 28 82 02 c0 	mov    DWORD PTR [esp+0x20],0xc0028228
c0011acd:	83 c4 10             	add    esp,0x10
c0011ad0:	5b                   	pop    ebx
c0011ad1:	5e                   	pop    esi
c0011ad2:	5f                   	pop    edi
c0011ad3:	e9 09 77 00 00       	jmp    c00191e1 <Krnl::panic(char const*)>
c0011ad8:	89 f0                	mov    eax,esi
c0011ada:	84 c0                	test   al,al
c0011adc:	75 15                	jne    c0011af3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ade:	83 ec 0c             	sub    esp,0xc
c0011ae1:	68 11 84 02 c0       	push   0xc0028411
c0011ae6:	e8 f6 76 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c0011aeb:	83 c4 10             	add    esp,0x10
c0011aee:	e9 6e ff ff ff       	jmp    c0011a61 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011af3:	83 ec 08             	sub    esp,0x8
c0011af6:	6a 00                	push   0x0
c0011af8:	53                   	push   ebx
c0011af9:	e8 56 fb ff ff       	call   c0011654 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011afe:	83 c4 10             	add    esp,0x10
c0011b01:	e9 5b ff ff ff       	jmp    c0011a61 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011b06:	89 f0                	mov    eax,esi
c0011b08:	84 c0                	test   al,al
c0011b0a:	75 15                	jne    c0011b21 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011b0c:	83 ec 08             	sub    esp,0x8
c0011b0f:	6a 00                	push   0x0
c0011b11:	53                   	push   ebx
c0011b12:	e8 3d fb ff ff       	call   c0011654 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b17:	83 c4 10             	add    esp,0x10
c0011b1a:	83 c4 10             	add    esp,0x10
c0011b1d:	5b                   	pop    ebx
c0011b1e:	5e                   	pop    esi
c0011b1f:	5f                   	pop    edi
c0011b20:	c3                   	ret    
c0011b21:	c7 44 24 20 2d 84 02 c0 	mov    DWORD PTR [esp+0x20],0xc002842d
c0011b29:	83 c4 10             	add    esp,0x10
c0011b2c:	5b                   	pop    ebx
c0011b2d:	5e                   	pop    esi
c0011b2e:	5f                   	pop    edi
c0011b2f:	e9 ad 76 00 00       	jmp    c00191e1 <Krnl::panic(char const*)>

c0011b34 <VAS::freeAllocatedPages(unsigned long)>:
c0011b34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b3c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011b40:	74 09                	je     c0011b4b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011b42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011b46:	e9 c6 fe ff ff       	jmp    c0011a11 <Virt::freeKernelVirtualPages(unsigned long)>
c0011b4b:	c7 44 24 04 4c 82 02 c0 	mov    DWORD PTR [esp+0x4],0xc002824c
c0011b53:	e9 45 0b 00 00       	jmp    c001269d <Dbg::kprintf(char const*, ...)>

c0011b58 <VAS::virtualToPhysical(unsigned long)>:
c0011b58:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b5c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b60:	e8 8d fe ff ff       	call   c00119f2 <VAS::getPageTableEntry(unsigned long)>
c0011b65:	5a                   	pop    edx
c0011b66:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b68:	59                   	pop    ecx
c0011b69:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b6e:	c3                   	ret    
c0011b6f:	90                   	nop

c0011b70 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011b70:	55                   	push   ebp
c0011b71:	57                   	push   edi
c0011b72:	56                   	push   esi
c0011b73:	53                   	push   ebx
c0011b74:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011b78:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011b7c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011b80:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b84:	85 db                	test   ebx,ebx
c0011b86:	7e 22                	jle    c0011baa <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011b88:	c1 e3 0c             	shl    ebx,0xc
c0011b8b:	01 f3                	add    ebx,esi
c0011b8d:	56                   	push   esi
c0011b8e:	81 c6 00 10 00 00    	add    esi,0x1000
c0011b94:	55                   	push   ebp
c0011b95:	e8 58 fe ff ff       	call   c00119f2 <VAS::getPageTableEntry(unsigned long)>
c0011b9a:	5a                   	pop    edx
c0011b9b:	59                   	pop    ecx
c0011b9c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011b9e:	21 f9                	and    ecx,edi
c0011ba0:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011ba4:	39 f3                	cmp    ebx,esi
c0011ba6:	89 08                	mov    DWORD PTR [eax],ecx
c0011ba8:	75 e3                	jne    c0011b8d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011baa:	5b                   	pop    ebx
c0011bab:	5e                   	pop    esi
c0011bac:	5f                   	pop    edi
c0011bad:	5d                   	pop    ebp
c0011bae:	c3                   	ret    
c0011baf:	90                   	nop

c0011bb0 <VAS::setToWriteCombining(unsigned long, int)>:
c0011bb0:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0011bb5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011bbb:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011bc2:	75 01                	jne    c0011bc5 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011bc4:	c3                   	ret    
c0011bc5:	68 80 00 00 00       	push   0x80
c0011bca:	6a ff                	push   0xffffffff
c0011bcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bd8:	e8 93 ff ff ff       	call   c0011b70 <VAS::reflagRange(unsigned long, int, int, int)>
c0011bdd:	83 c4 14             	add    esp,0x14
c0011be0:	c3                   	ret    
c0011be1:	90                   	nop

c0011be2 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011be2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011be7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011beb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011bee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bf2:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011bf5:	19 c0                	sbb    eax,eax
c0011bf7:	83 ca 03             	or     edx,0x3
c0011bfa:	83 e0 fc             	and    eax,0xfffffffc
c0011bfd:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011c04:	0f 20 d8             	mov    eax,cr3
c0011c07:	0f 22 d8             	mov    cr3,eax
c0011c0a:	c3                   	ret    
c0011c0b:	90                   	nop

c0011c0c <VAS::~VAS()>:
c0011c0c:	83 ec 2c             	sub    esp,0x2c
c0011c0f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011c17:	e8 0b a6 00 00       	call   c001c227 <lockScheduler()>
c0011c1c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c21:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c23:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c26:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c2c:	83 ec 04             	sub    esp,0x4
c0011c2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011c33:	6a 01                	push   0x1
c0011c35:	50                   	push   eax
c0011c36:	e8 a7 ff ff ff       	call   c0011be2 <VAS::mapOtherVASIn(bool, VAS*)>
c0011c3b:	83 c4 10             	add    esp,0x10
c0011c3e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011c46:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011c4e:	0f 8f d7 00 00 00    	jg     c0011d2b <VAS::~VAS()+0x11f>
c0011c54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011c5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011c5f:	c1 e2 02             	shl    edx,0x2
c0011c62:	01 d0                	add    eax,edx
c0011c64:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c6e:	83 e0 01             	and    eax,0x1
c0011c71:	0f 84 ab 00 00 00    	je     c0011d22 <VAS::~VAS()+0x116>
c0011c77:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011c7f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011c87:	7f 75                	jg     c0011cfe <VAS::~VAS()+0xf2>
c0011c89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c8d:	c1 e0 0a             	shl    eax,0xa
c0011c90:	89 c2                	mov    edx,eax
c0011c92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c96:	01 d0                	add    eax,edx
c0011c98:	c1 e0 0c             	shl    eax,0xc
c0011c9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c9f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011ca4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ca6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ca9:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011caf:	83 ec 04             	sub    esp,0x4
c0011cb2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011cb6:	6a 01                	push   0x1
c0011cb8:	50                   	push   eax
c0011cb9:	e8 08 fd ff ff       	call   c00119c6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011cbe:	83 c4 10             	add    esp,0x10
c0011cc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011cc5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011cc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ccb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ccf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cd3:	25 01 04 00 00       	and    eax,0x401
c0011cd8:	3d 01 04 00 00       	cmp    eax,0x401
c0011cdd:	75 19                	jne    c0011cf8 <VAS::~VAS()+0xec>
c0011cdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ce3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ce8:	83 ec 0c             	sub    esp,0xc
c0011ceb:	50                   	push   eax
c0011cec:	e8 ff dc ff ff       	call   c000f9f0 <Phys::freePage(unsigned long)>
c0011cf1:	83 c4 10             	add    esp,0x10
c0011cf4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cf8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011cfc:	eb 81                	jmp    c0011c7f <VAS::~VAS()+0x73>
c0011cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d02:	25 00 04 00 00       	and    eax,0x400
c0011d07:	74 19                	je     c0011d22 <VAS::~VAS()+0x116>
c0011d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d0d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d12:	83 ec 0c             	sub    esp,0xc
c0011d15:	50                   	push   eax
c0011d16:	e8 d5 dc ff ff       	call   c000f9f0 <Phys::freePage(unsigned long)>
c0011d1b:	83 c4 10             	add    esp,0x10
c0011d1e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011d22:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011d26:	e9 1b ff ff ff       	jmp    c0011c46 <VAS::~VAS()+0x3a>
c0011d2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d2f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d32:	83 ec 0c             	sub    esp,0xc
c0011d35:	50                   	push   eax
c0011d36:	e8 d6 fc ff ff       	call   c0011a11 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d3b:	83 c4 10             	add    esp,0x10
c0011d3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d42:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d45:	83 ec 0c             	sub    esp,0xc
c0011d48:	50                   	push   eax
c0011d49:	e8 a2 dc ff ff       	call   c000f9f0 <Phys::freePage(unsigned long)>
c0011d4e:	83 c4 10             	add    esp,0x10
c0011d51:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011d55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d59:	c1 e0 02             	shl    eax,0x2
c0011d5c:	83 ec 08             	sub    esp,0x8
c0011d5f:	50                   	push   eax
c0011d60:	68 70 82 02 c0       	push   0xc0028270
c0011d65:	e8 33 09 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0011d6a:	83 c4 10             	add    esp,0x10
c0011d6d:	e8 b7 a4 00 00       	call   c001c229 <unlockScheduler()>
c0011d72:	90                   	nop
c0011d73:	83 c4 2c             	add    esp,0x2c
c0011d76:	c3                   	ret    
c0011d77:	90                   	nop

c0011d78 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011d78:	55                   	push   ebp
c0011d79:	57                   	push   edi
c0011d7a:	56                   	push   esi
c0011d7b:	53                   	push   ebx
c0011d7c:	83 ec 1c             	sub    esp,0x1c
c0011d7f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011d83:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d87:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011d8d:	77 08                	ja     ADDR_IN_KERNEL
c0011d8f:	0f 20 d8             	mov    eax,cr3
c0011d92:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011d95:	75 47                	jne    DO_FATAL_WARNING

ADDR_IN_KERNEL:
c0011d97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d9b:	09 d8                	or     eax,ebx
c0011d9d:	a9 ff 0f 00 00       	test   eax,0xfff
c0011da2:	75 57                	jne    DO_PANIC

c0011da4:	89 de                	mov    esi,ebx
c0011da6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011da9:	c1 ee 16             	shr    esi,0x16
c0011dac:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011db3:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011db7:	74 54                	je     D
c0011db9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011dbd:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011dc3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011dc7:	c1 e6 0c             	shl    esi,0xc
c0011dca:	c1 eb 0a             	shr    ebx,0xa
c0011dcd:	81 e3 fc 0f 00 00    	and    ebx,0xffc

c0011dd3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax	;FAULTING

c0011dd6:	83 c4 1c             	add    esp,0x1c

RETURN:
c0011dd9:	5b                   	pop    ebx
c0011dda:	5e                   	pop    esi
c0011ddb:	5f                   	pop    edi
c0011ddc:	5d                   	pop    ebp
c0011ddd:	c3                   	ret    

DO_FATAL_WARNING:
c0011dde:	83 ec 0c             	sub    esp,0xc
c0011de1:	68 90 82 02 c0       	push   0xc0028290
c0011de6:	e8 b2 08 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0011deb:	83 c4 10             	add    esp,0x10
c0011dee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011df2:	09 d8                	or     eax,ebx
c0011df4:	a9 ff 0f 00 00       	test   eax,0xfff
c0011df9:	74 a9                	je     c0011da4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>

DO_PANIC:
c0011dfb:	83 ec 0c             	sub    esp,0xc
c0011dfe:	68 f8 82 02 c0       	push   0xc00282f8
c0011e03:	e8 d9 73 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c0011e08:	83 c4 10             	add    esp,0x10
c0011e0b:	eb 97                	jmp    c0011da4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>

NEED_TO_ALLOCATE_TABLE:
c0011e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e11:	e8 64 dc ff ff       	call   c000fa7a <Phys::allocatePage()>
c0011e16:	89 c5                	mov    ebp,eax
c0011e18:	e8 20 fa ff ff       	call   c001183d <Virt::getAKernelVAS()>
c0011e1d:	83 ec 0c             	sub    esp,0xc
c0011e20:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e24:	6a 01                	push   0x1
c0011e26:	e8 82 f8 ff ff       	call   c00116ad <Virt::allocateKernelVirtualPages(int)>
c0011e2b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e32:	6a 01                	push   0x1
c0011e34:	50                   	push   eax
c0011e35:	55                   	push   ebp
c0011e36:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e3c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e40:	51                   	push   ecx
c0011e41:	e8 26 02 00 00       	call   c001206c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e46:	83 c4 1c             	add    esp,0x1c
c0011e49:	68 00 10 00 00       	push   0x1000
c0011e4e:	6a 00                	push   0x0
c0011e50:	50                   	push   eax
c0011e51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e55:	e8 31 e8 fe ff       	call   c000068b <memset>
c0011e5a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e5e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e61:	e8 ab fb ff ff       	call   c0011a11 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e66:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e6a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e6d:	83 c4 10             	add    esp,0x10
c0011e70:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011e73:	e9 41 ff ff ff       	jmp    END

c0011e78 <VAS::allocatePages(int, int)>:
c0011e78:	55                   	push   ebp
c0011e79:	57                   	push   edi
c0011e7a:	56                   	push   esi
c0011e7b:	53                   	push   ebx
c0011e7c:	83 ec 1c             	sub    esp,0x1c
c0011e7f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e83:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0011e88:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e8e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e94:	83 e0 01             	and    eax,0x1
c0011e97:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011e9b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e9f:	0f 85 cc 00 00 00    	jne    c0011f71 <VAS::allocatePages(int, int)+0xf9>
c0011ea5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011ea8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011eac:	85 c0                	test   eax,eax
c0011eae:	0f 84 a1 00 00 00    	je     c0011f55 <VAS::allocatePages(int, int)+0xdd>
c0011eb4:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011eb8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ebc:	c1 e6 0c             	shl    esi,0xc
c0011ebf:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011ec3:	85 c0                	test   eax,eax
c0011ec5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011ec8:	7e 33                	jle    c0011efd <VAS::allocatePages(int, int)+0x85>
c0011eca:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011ece:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ed2:	81 cd 00 04 00 00    	or     ebp,0x400
c0011ed8:	e8 9d db ff ff       	call   c000fa7a <Phys::allocatePage()>
c0011edd:	55                   	push   ebp
c0011ede:	53                   	push   ebx
c0011edf:	50                   	push   eax
c0011ee0:	57                   	push   edi
c0011ee1:	e8 92 fe ff ff       	call   c0011d78 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ee6:	83 c4 10             	add    esp,0x10
c0011ee9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011eee:	74 03                	je     c0011ef3 <VAS::allocatePages(int, int)+0x7b>
c0011ef0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ef3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ef9:	39 de                	cmp    esi,ebx
c0011efb:	75 db                	jne    c0011ed8 <VAS::allocatePages(int, int)+0x60>
c0011efd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f02:	75 12                	jne    c0011f16 <VAS::allocatePages(int, int)+0x9e>
c0011f04:	0f 20 d8             	mov    eax,cr3
c0011f07:	0f 22 d8             	mov    cr3,eax
c0011f0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f0e:	83 c4 1c             	add    esp,0x1c
c0011f11:	5b                   	pop    ebx
c0011f12:	5e                   	pop    esi
c0011f13:	5f                   	pop    edi
c0011f14:	5d                   	pop    ebp
c0011f15:	c3                   	ret    
c0011f16:	c1 ee 0a             	shr    esi,0xa
c0011f19:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f1d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011f23:	c1 eb 0a             	shr    ebx,0xa
c0011f26:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011f2c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f32:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f38:	39 c3                	cmp    ebx,eax
c0011f3a:	77 ce                	ja     c0011f0a <VAS::allocatePages(int, int)+0x92>
c0011f3c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f3f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f45:	39 d8                	cmp    eax,ebx
c0011f47:	73 f3                	jae    c0011f3c <VAS::allocatePages(int, int)+0xc4>
c0011f49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f4d:	83 c4 1c             	add    esp,0x1c
c0011f50:	5b                   	pop    ebx
c0011f51:	5e                   	pop    esi
c0011f52:	5f                   	pop    edi
c0011f53:	5d                   	pop    ebp
c0011f54:	c3                   	ret    
c0011f55:	83 ec 0c             	sub    esp,0xc
c0011f58:	68 1c 83 02 c0       	push   0xc002831c
c0011f5d:	e8 7f 72 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c0011f62:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f69:	83 c4 10             	add    esp,0x10
c0011f6c:	e9 43 ff ff ff       	jmp    c0011eb4 <VAS::allocatePages(int, int)+0x3c>
c0011f71:	83 ec 0c             	sub    esp,0xc
c0011f74:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f78:	e8 30 f7 ff ff       	call   c00116ad <Virt::allocateKernelVirtualPages(int)>
c0011f7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f81:	83 c4 10             	add    esp,0x10
c0011f84:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011f89:	0f 87 9b 00 00 00    	ja     c001202a <VAS::allocatePages(int, int)+0x1b2>
c0011f8f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f93:	85 d2                	test   edx,edx
c0011f95:	7e 3c                	jle    c0011fd3 <VAS::allocatePages(int, int)+0x15b>
c0011f97:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f9b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011f9f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011fa3:	c1 e5 0c             	shl    ebp,0xc
c0011fa6:	81 ce 00 04 00 00    	or     esi,0x400
c0011fac:	01 dd                	add    ebp,ebx
c0011fae:	e8 c7 da ff ff       	call   c000fa7a <Phys::allocatePage()>
c0011fb3:	56                   	push   esi
c0011fb4:	53                   	push   ebx
c0011fb5:	50                   	push   eax
c0011fb6:	57                   	push   edi
c0011fb7:	e8 bc fd ff ff       	call   c0011d78 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fbc:	83 c4 10             	add    esp,0x10
c0011fbf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fc4:	74 03                	je     c0011fc9 <VAS::allocatePages(int, int)+0x151>
c0011fc6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fc9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fcf:	39 dd                	cmp    ebp,ebx
c0011fd1:	75 db                	jne    c0011fae <VAS::allocatePages(int, int)+0x136>
c0011fd3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fd8:	0f 84 26 ff ff ff    	je     c0011f04 <VAS::allocatePages(int, int)+0x8c>
c0011fde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011fe2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fe6:	89 d3                	mov    ebx,edx
c0011fe8:	c1 e0 0c             	shl    eax,0xc
c0011feb:	c1 eb 0a             	shr    ebx,0xa
c0011fee:	01 d0                	add    eax,edx
c0011ff0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ff6:	c1 e8 0a             	shr    eax,0xa
c0011ff9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011fff:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012004:	2d 00 00 40 00       	sub    eax,0x400000
c0012009:	39 c3                	cmp    ebx,eax
c001200b:	0f 87 f9 fe ff ff    	ja     c0011f0a <VAS::allocatePages(int, int)+0x92>
c0012011:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012014:	81 c3 00 10 00 00    	add    ebx,0x1000
c001201a:	39 d8                	cmp    eax,ebx
c001201c:	73 f3                	jae    c0012011 <VAS::allocatePages(int, int)+0x199>
c001201e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012022:	83 c4 1c             	add    esp,0x1c
c0012025:	5b                   	pop    ebx
c0012026:	5e                   	pop    esi
c0012027:	5f                   	pop    edi
c0012028:	5d                   	pop    ebp
c0012029:	c3                   	ret    
c001202a:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c001202f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012035:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001203c:	0f 84 4d ff ff ff    	je     c0011f8f <VAS::allocatePages(int, int)+0x117>
c0012042:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001204a:	e9 40 ff ff ff       	jmp    c0011f8f <VAS::allocatePages(int, int)+0x117>
c001204f:	90                   	nop

c0012050 <VAS::setCPUSpecific(unsigned long)>:
c0012050:	83 ec 0c             	sub    esp,0xc
c0012053:	6a 05                	push   0x5
c0012055:	68 00 00 40 c2       	push   0xc2400000
c001205a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001205e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012062:	e8 11 fd ff ff       	call   c0011d78 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012067:	83 c4 1c             	add    esp,0x1c
c001206a:	c3                   	ret    
c001206b:	90                   	nop

c001206c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001206c:	55                   	push   ebp
c001206d:	57                   	push   edi
c001206e:	56                   	push   esi
c001206f:	53                   	push   ebx
c0012070:	83 ec 1c             	sub    esp,0x1c
c0012073:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0012078:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001207c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012082:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012086:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001208c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012090:	83 e0 01             	and    eax,0x1
c0012093:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012097:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001209b:	85 c0                	test   eax,eax
c001209d:	7e 39                	jle    c00120d8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001209f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120a3:	89 f3                	mov    ebx,esi
c00120a5:	c1 e0 0c             	shl    eax,0xc
c00120a8:	01 f0                	add    eax,esi
c00120aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120ae:	55                   	push   ebp
c00120af:	53                   	push   ebx
c00120b0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120b4:	29 f0                	sub    eax,esi
c00120b6:	01 d8                	add    eax,ebx
c00120b8:	50                   	push   eax
c00120b9:	57                   	push   edi
c00120ba:	e8 b9 fc ff ff       	call   c0011d78 <VAS::mapPage(unsigned long, unsigned long, int)>
c00120bf:	83 c4 10             	add    esp,0x10
c00120c2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120c7:	74 03                	je     c00120cc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00120c9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120cc:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120d2:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00120d6:	75 d6                	jne    c00120ae <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00120d8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120dd:	75 10                	jne    c00120ef <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00120df:	0f 20 d8             	mov    eax,cr3
c00120e2:	0f 22 d8             	mov    cr3,eax
c00120e5:	83 c4 1c             	add    esp,0x1c
c00120e8:	89 f0                	mov    eax,esi
c00120ea:	5b                   	pop    ebx
c00120eb:	5e                   	pop    esi
c00120ec:	5f                   	pop    edi
c00120ed:	5d                   	pop    ebp
c00120ee:	c3                   	ret    
c00120ef:	89 f3                	mov    ebx,esi
c00120f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120f5:	c1 eb 0a             	shr    ebx,0xa
c00120f8:	c1 e0 0c             	shl    eax,0xc
c00120fb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012101:	01 f0                	add    eax,esi
c0012103:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012109:	c1 e8 0a             	shr    eax,0xa
c001210c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012111:	2d 00 00 40 00       	sub    eax,0x400000
c0012116:	39 c3                	cmp    ebx,eax
c0012118:	77 cb                	ja     c00120e5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001211a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001211d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012123:	39 d8                	cmp    eax,ebx
c0012125:	73 f3                	jae    c001211a <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012127:	83 c4 1c             	add    esp,0x1c
c001212a:	89 f0                	mov    eax,esi
c001212c:	5b                   	pop    ebx
c001212d:	5e                   	pop    esi
c001212e:	5f                   	pop    edi
c001212f:	5d                   	pop    ebp
c0012130:	c3                   	ret    
c0012131:	90                   	nop

c0012132 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012132:	55                   	push   ebp
c0012133:	57                   	push   edi
c0012134:	56                   	push   esi
c0012135:	53                   	push   ebx
c0012136:	83 ec 1c             	sub    esp,0x1c
c0012139:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001213d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012141:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012145:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012149:	a9 ff 0f 00 00       	test   eax,0xfff
c001214e:	75 4a                	jne    c001219a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012150:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012154:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012157:	c1 eb 16             	shr    ebx,0x16
c001215a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012161:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012165:	74 4d                	je     c00121b4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012167:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001216b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001216f:	c1 e8 0a             	shr    eax,0xa
c0012172:	80 fa 01             	cmp    dl,0x1
c0012175:	19 d2                	sbb    edx,edx
c0012177:	c1 e3 0c             	shl    ebx,0xc
c001217a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001217e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012184:	25 fc 0f 00 00       	and    eax,0xffc
c0012189:	01 d8                	add    eax,ebx
c001218b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012192:	83 c4 1c             	add    esp,0x1c
c0012195:	5b                   	pop    ebx
c0012196:	5e                   	pop    esi
c0012197:	5f                   	pop    edi
c0012198:	5d                   	pop    ebp
c0012199:	c3                   	ret    
c001219a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001219e:	83 ec 0c             	sub    esp,0xc
c00121a1:	68 48 83 02 c0       	push   0xc0028348
c00121a6:	e8 36 70 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c00121ab:	83 c4 10             	add    esp,0x10
c00121ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121b2:	eb 9c                	jmp    c0012150 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00121b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00121b8:	e8 bd d8 ff ff       	call   c000fa7a <Phys::allocatePage()>
c00121bd:	89 c5                	mov    ebp,eax
c00121bf:	e8 79 f6 ff ff       	call   c001183d <Virt::getAKernelVAS()>
c00121c4:	83 ec 0c             	sub    esp,0xc
c00121c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121cb:	6a 01                	push   0x1
c00121cd:	e8 db f4 ff ff       	call   c00116ad <Virt::allocateKernelVirtualPages(int)>
c00121d2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00121d9:	6a 01                	push   0x1
c00121db:	50                   	push   eax
c00121dc:	55                   	push   ebp
c00121dd:	81 cd 07 04 00 00    	or     ebp,0x407
c00121e3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00121e7:	51                   	push   ecx
c00121e8:	e8 7f fe ff ff       	call   c001206c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00121ed:	83 c4 1c             	add    esp,0x1c
c00121f0:	68 00 10 00 00       	push   0x1000
c00121f5:	6a 00                	push   0x0
c00121f7:	50                   	push   eax
c00121f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121fc:	e8 8a e4 fe ff       	call   c000068b <memset>
c0012201:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012205:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012208:	e8 04 f8 ff ff       	call   c0011a11 <Virt::freeKernelVirtualPages(unsigned long)>
c001220d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012210:	83 c4 10             	add    esp,0x10
c0012213:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012216:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001221a:	e9 48 ff ff ff       	jmp    c0012167 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c001221f:	90                   	nop

c0012220 <VAS::VAS(bool)>:
c0012220:	53                   	push   ebx
c0012221:	83 ec 28             	sub    esp,0x28
c0012224:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012228:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001222c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012230:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012237:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001223b:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001223f:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012242:	e8 33 d8 ff ff       	call   c000fa7a <Phys::allocatePage()>
c0012247:	89 c2                	mov    edx,eax
c0012249:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001224d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012250:	e8 e8 f5 ff ff       	call   c001183d <Virt::getAKernelVAS()>
c0012255:	89 c3                	mov    ebx,eax
c0012257:	83 ec 0c             	sub    esp,0xc
c001225a:	6a 01                	push   0x1
c001225c:	e8 4c f4 ff ff       	call   c00116ad <Virt::allocateKernelVirtualPages(int)>
c0012261:	83 c4 10             	add    esp,0x10
c0012264:	89 c2                	mov    edx,eax
c0012266:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001226a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001226d:	83 ec 0c             	sub    esp,0xc
c0012270:	6a 03                	push   0x3
c0012272:	6a 01                	push   0x1
c0012274:	52                   	push   edx
c0012275:	50                   	push   eax
c0012276:	53                   	push   ebx
c0012277:	e8 f0 fd ff ff       	call   c001206c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001227c:	83 c4 20             	add    esp,0x20
c001227f:	89 c2                	mov    edx,eax
c0012281:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012285:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012288:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012290:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012298:	7f 1c                	jg     c00122b6 <VAS::VAS(bool)+0x96>
c001229a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001229e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122a5:	c1 e2 02             	shl    edx,0x2
c00122a8:	01 d0                	add    eax,edx
c00122aa:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00122b0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122b4:	eb da                	jmp    c0012290 <VAS::VAS(bool)+0x70>
c00122b6:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00122be:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00122c6:	7f 7a                	jg     c0012342 <VAS::VAS(bool)+0x122>
c00122c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122cc:	2d 00 02 00 00       	sub    eax,0x200
c00122d1:	c1 e0 0c             	shl    eax,0xc
c00122d4:	83 c8 03             	or     eax,0x3
c00122d7:	89 c2                	mov    edx,eax
c00122d9:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c00122de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122e4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122ea:	83 e0 10             	and    eax,0x10
c00122ed:	84 c0                	test   al,al
c00122ef:	74 07                	je     c00122f8 <VAS::VAS(bool)+0xd8>
c00122f1:	b8 00 01 00 00       	mov    eax,0x100
c00122f6:	eb 05                	jmp    c00122fd <VAS::VAS(bool)+0xdd>
c00122f8:	b8 00 00 00 00       	mov    eax,0x0
c00122fd:	09 d0                	or     eax,edx
c00122ff:	89 c1                	mov    ecx,eax
c0012301:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012305:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012308:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001230c:	c1 e2 02             	shl    edx,0x2
c001230f:	01 d0                	add    eax,edx
c0012311:	89 ca                	mov    edx,ecx
c0012313:	89 10                	mov    DWORD PTR [eax],edx
c0012315:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012319:	2d 40 03 00 00       	sub    eax,0x340
c001231e:	83 f8 7f             	cmp    eax,0x7f
c0012321:	77 16                	ja     c0012339 <VAS::VAS(bool)+0x119>
c0012323:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012327:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001232a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001232e:	c1 e2 02             	shl    edx,0x2
c0012331:	01 d0                	add    eax,edx
c0012333:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012339:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001233d:	e9 7c ff ff ff       	jmp    c00122be <VAS::VAS(bool)+0x9e>
c0012342:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0012347:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001234d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012353:	83 e0 10             	and    eax,0x10
c0012356:	84 c0                	test   al,al
c0012358:	74 07                	je     c0012361 <VAS::VAS(bool)+0x141>
c001235a:	b8 03 41 00 00       	mov    eax,0x4103
c001235f:	eb 05                	jmp    c0012366 <VAS::VAS(bool)+0x146>
c0012361:	b8 03 40 00 00       	mov    eax,0x4003
c0012366:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001236a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001236d:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012373:	89 02                	mov    DWORD PTR [edx],eax
c0012375:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c001237a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012380:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012386:	83 ec 08             	sub    esp,0x8
c0012389:	50                   	push   eax
c001238a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001238e:	e8 bd fc ff ff       	call   c0012050 <VAS::setCPUSpecific(unsigned long)>
c0012393:	83 c4 10             	add    esp,0x10
c0012396:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001239a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001239d:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c00123a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123a8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00123ae:	83 e0 10             	and    eax,0x10
c00123b1:	84 c0                	test   al,al
c00123b3:	74 07                	je     c00123bc <VAS::VAS(bool)+0x19c>
c00123b5:	b8 00 01 00 00       	mov    eax,0x100
c00123ba:	eb 05                	jmp    c00123c1 <VAS::VAS(bool)+0x1a1>
c00123bc:	b8 00 00 00 00       	mov    eax,0x0
c00123c1:	09 c2                	or     edx,eax
c00123c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00123ca:	05 fc 0f 00 00       	add    eax,0xffc
c00123cf:	83 ca 03             	or     edx,0x3
c00123d2:	89 10                	mov    DWORD PTR [eax],edx
c00123d4:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c00123d9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123df:	83 ec 0c             	sub    esp,0xc
c00123e2:	50                   	push   eax
c00123e3:	e8 90 19 00 00       	call   c0013d78 <Device::getName()>
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	83 ec 08             	sub    esp,0x8
c00123ee:	68 47 84 02 c0       	push   0xc0028447
c00123f3:	50                   	push   eax
c00123f4:	e8 82 e3 fe ff       	call   c000077b <strcmp>
c00123f9:	83 c4 10             	add    esp,0x10
c00123fc:	85 c0                	test   eax,eax
c00123fe:	0f 94 c0             	sete   al
c0012401:	84 c0                	test   al,al
c0012403:	74 70                	je     c0012475 <VAS::VAS(bool)+0x255>
c0012405:	e8 00 9e 00 00       	call   c001c20a <disableIRQs()>
c001240a:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c001240f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012415:	05 7c 09 00 00       	add    eax,0x97c
c001241a:	83 ec 0c             	sub    esp,0xc
c001241d:	50                   	push   eax
c001241e:	e8 29 cb ff ff       	call   c000ef4c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012423:	83 c4 10             	add    esp,0x10
c0012426:	25 00 f0 ff ff       	and    eax,0xfffff000
c001242b:	89 c3                	mov    ebx,eax
c001242d:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0012432:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012438:	05 7c 09 00 00       	add    eax,0x97c
c001243d:	83 ec 0c             	sub    esp,0xc
c0012440:	50                   	push   eax
c0012441:	e8 06 cb ff ff       	call   c000ef4c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012446:	83 c4 10             	add    esp,0x10
c0012449:	83 ec 08             	sub    esp,0x8
c001244c:	50                   	push   eax
c001244d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012451:	e8 9c f5 ff ff       	call   c00119f2 <VAS::getPageTableEntry(unsigned long)>
c0012456:	83 c4 10             	add    esp,0x10
c0012459:	8b 00                	mov    eax,DWORD PTR [eax]
c001245b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012460:	6a 11                	push   0x11
c0012462:	53                   	push   ebx
c0012463:	50                   	push   eax
c0012464:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012468:	e8 0b f9 ff ff       	call   c0011d78 <VAS::mapPage(unsigned long, unsigned long, int)>
c001246d:	83 c4 10             	add    esp,0x10
c0012470:	e8 a3 9d 00 00       	call   c001c218 <enableIRQs()>
c0012475:	90                   	nop
c0012476:	83 c4 28             	add    esp,0x28
c0012479:	5b                   	pop    ebx
c001247a:	c3                   	ret    

c001247b <mapVASFirstTime>:
c001247b:	55                   	push   ebp
c001247c:	57                   	push   edi
c001247d:	56                   	push   esi
c001247e:	53                   	push   ebx
c001247f:	83 ec 0c             	sub    esp,0xc
c0012482:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012487:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001248a:	4a                   	dec    edx
c001248b:	0f 84 8e 00 00 00    	je     c001251f <mapVASFirstTime+0xa4>
c0012491:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012494:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012497:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001249c:	c1 e5 15             	shl    ebp,0x15
c001249f:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c00124a4:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00124aa:	29 eb                	sub    ebx,ebp
c00124ac:	29 ee                	sub    esi,ebp
c00124ae:	e8 c7 d5 ff ff       	call   c000fa7a <Phys::allocatePage()>
c00124b3:	83 ec 0c             	sub    esp,0xc
c00124b6:	68 03 04 00 00       	push   0x403
c00124bb:	6a 01                	push   0x1
c00124bd:	53                   	push   ebx
c00124be:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00124c4:	50                   	push   eax
c00124c5:	57                   	push   edi
c00124c6:	e8 a1 fb ff ff       	call   c001206c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124cb:	83 c4 20             	add    esp,0x20
c00124ce:	39 f3                	cmp    ebx,esi
c00124d0:	75 dc                	jne    c00124ae <mapVASFirstTime+0x33>
c00124d2:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00124d7:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00124dc:	29 ee                	sub    esi,ebp
c00124de:	29 e8                	sub    eax,ebp
c00124e0:	89 c5                	mov    ebp,eax
c00124e2:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00124e6:	19 db                	sbb    ebx,ebx
c00124e8:	e8 8d d5 ff ff       	call   c000fa7a <Phys::allocatePage()>
c00124ed:	83 e3 04             	and    ebx,0x4
c00124f0:	83 ec 0c             	sub    esp,0xc
c00124f3:	81 c3 03 04 00 00    	add    ebx,0x403
c00124f9:	53                   	push   ebx
c00124fa:	6a 01                	push   0x1
c00124fc:	56                   	push   esi
c00124fd:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012503:	50                   	push   eax
c0012504:	57                   	push   edi
c0012505:	e8 62 fb ff ff       	call   c001206c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001250a:	83 c4 20             	add    esp,0x20
c001250d:	39 f5                	cmp    ebp,esi
c001250f:	75 d1                	jne    c00124e2 <mapVASFirstTime+0x67>
c0012511:	0f 20 d8             	mov    eax,cr3
c0012514:	0f 22 d8             	mov    cr3,eax
c0012517:	83 c4 0c             	add    esp,0xc
c001251a:	5b                   	pop    ebx
c001251b:	5e                   	pop    esi
c001251c:	5f                   	pop    edi
c001251d:	5d                   	pop    ebp
c001251e:	c3                   	ret    
c001251f:	83 ec 0c             	sub    esp,0xc
c0012522:	68 55 84 02 c0       	push   0xc0028455
c0012527:	e8 71 01 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001252c:	83 c4 10             	add    esp,0x10
c001252f:	83 c4 0c             	add    esp,0xc
c0012532:	5b                   	pop    ebx
c0012533:	5e                   	pop    esi
c0012534:	5f                   	pop    edi
c0012535:	5d                   	pop    ebp
c0012536:	c3                   	ret    

c0012537 <__cxa_atexit>:
c0012537:	31 c0                	xor    eax,eax
c0012539:	c3                   	ret    

c001253a <__cxa_finalize>:
c001253a:	c3                   	ret    

c001253b <__stack_chk_fail>:
c001253b:	55                   	push   ebp
c001253c:	89 e5                	mov    ebp,esp
c001253e:	83 ec 14             	sub    esp,0x14
c0012541:	68 6e 84 02 c0       	push   0xc002846e
c0012546:	e8 52 01 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001254b:	58                   	pop    eax
c001254c:	5a                   	pop    edx
c001254d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012550:	68 be 84 02 c0       	push   0xc00284be
c0012555:	e8 43 01 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001255a:	59                   	pop    ecx
c001255b:	58                   	pop    eax
c001255c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001255f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012562:	68 be 84 02 c0       	push   0xc00284be
c0012567:	e8 31 01 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001256c:	5a                   	pop    edx
c001256d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012570:	59                   	pop    ecx
c0012571:	8b 00                	mov    eax,DWORD PTR [eax]
c0012573:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012576:	68 be 84 02 c0       	push   0xc00284be
c001257b:	e8 1d 01 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0012580:	5a                   	pop    edx
c0012581:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012584:	59                   	pop    ecx
c0012585:	8b 00                	mov    eax,DWORD PTR [eax]
c0012587:	8b 00                	mov    eax,DWORD PTR [eax]
c0012589:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001258c:	68 be 84 02 c0       	push   0xc00284be
c0012591:	e8 07 01 00 00       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0012596:	c7 04 24 c6 84 02 c0 	mov    DWORD PTR [esp],0xc00284c6
c001259d:	e8 3f 6c 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c00125a2:	83 c4 10             	add    esp,0x10
c00125a5:	c9                   	leave  
c00125a6:	c3                   	ret    

c00125a7 <__cxa_pure_virtual>:
c00125a7:	83 ec 18             	sub    esp,0x18
c00125aa:	68 de 84 02 c0       	push   0xc00284de
c00125af:	e8 2d 6c 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c00125b4:	83 c4 1c             	add    esp,0x1c
c00125b7:	c3                   	ret    

c00125b8 <operator new[](unsigned long)>:
c00125b8:	e9 13 cf ff ff       	jmp    c000f4d0 <malloc>

c00125bd <operator delete(void*, unsigned long)>:
c00125bd:	e9 2e cf ff ff       	jmp    c000f4f0 <rfree>

c00125c2 <operator delete[](void*)>:
c00125c2:	e9 29 cf ff ff       	jmp    c000f4f0 <rfree>

c00125c7 <operator delete[](void*, unsigned long)>:
c00125c7:	e9 24 cf ff ff       	jmp    c000f4f0 <rfree>

c00125cc <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00125cc:	57                   	push   edi
c00125cd:	b9 3f 00 00 00       	mov    ecx,0x3f
c00125d2:	56                   	push   esi
c00125d3:	be f4 84 02 c0       	mov    esi,0xc00284f4
c00125d8:	53                   	push   ebx
c00125d9:	83 ec 40             	sub    esp,0x40
c00125dc:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00125e0:	8d 7c 24 01          	lea    edi,[esp+0x1]
c00125e4:	fc                   	cld    
c00125e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00125e7:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00125eb:	83 f9 3e             	cmp    ecx,0x3e
c00125ee:	7e 05                	jle    c00125f5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00125f0:	b9 3e 00 00 00       	mov    ecx,0x3e
c00125f5:	89 df                	mov    edi,ebx
c00125f7:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00125fb:	eb 02                	jmp    c00125ff <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00125fd:	89 c7                	mov    edi,eax
c00125ff:	31 d2                	xor    edx,edx
c0012601:	46                   	inc    esi
c0012602:	89 f8                	mov    eax,edi
c0012604:	f7 f1                	div    ecx
c0012606:	39 cf                	cmp    edi,ecx
c0012608:	73 f3                	jae    c00125fd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c001260a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001260d:	eb 02                	jmp    c0012611 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c001260f:	89 c3                	mov    ebx,eax
c0012611:	31 d2                	xor    edx,edx
c0012613:	4e                   	dec    esi
c0012614:	89 d8                	mov    eax,ebx
c0012616:	f7 f1                	div    ecx
c0012618:	39 cb                	cmp    ebx,ecx
c001261a:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c001261e:	88 16                	mov    BYTE PTR [esi],dl
c0012620:	73 ed                	jae    c001260f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012622:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012626:	83 c4 40             	add    esp,0x40
c0012629:	5b                   	pop    ebx
c001262a:	5e                   	pop    esi
c001262b:	5f                   	pop    edi
c001262c:	c3                   	ret    

c001262d <Dbg::logc(char)>:
c001262d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012631:	ba fd 03 00 00       	mov    edx,0x3fd
c0012636:	ec                   	in     al,dx
c0012637:	a8 20                	test   al,0x20
c0012639:	74 fb                	je     c0012636 <Dbg::logc(char)+0x9>
c001263b:	ba f8 03 00 00       	mov    edx,0x3f8
c0012640:	88 c8                	mov    al,cl
c0012642:	ee                   	out    dx,al
c0012643:	c3                   	ret    

c0012644 <Dbg::logs(char*)>:
c0012644:	53                   	push   ebx
c0012645:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012649:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001264c:	84 c0                	test   al,al
c001264e:	74 0f                	je     c001265f <Dbg::logs(char*)+0x1b>
c0012650:	50                   	push   eax
c0012651:	43                   	inc    ebx
c0012652:	e8 d6 ff ff ff       	call   c001262d <Dbg::logc(char)>
c0012657:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001265a:	5a                   	pop    edx
c001265b:	84 c0                	test   al,al
c001265d:	75 f1                	jne    c0012650 <Dbg::logs(char*)+0xc>
c001265f:	5b                   	pop    ebx
c0012660:	c3                   	ret    

c0012661 <Dbg::logWriteInt(unsigned int)>:
c0012661:	83 ec 10             	sub    esp,0x10
c0012664:	6a 0a                	push   0xa
c0012666:	8d 44 24 08          	lea    eax,[esp+0x8]
c001266a:	50                   	push   eax
c001266b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001266f:	e8 58 ff ff ff       	call   c00125cc <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012674:	50                   	push   eax
c0012675:	e8 ca ff ff ff       	call   c0012644 <Dbg::logs(char*)>
c001267a:	83 c4 20             	add    esp,0x20
c001267d:	c3                   	ret    

c001267e <Dbg::logWriteIntBase(unsigned int, int)>:
c001267e:	83 ec 10             	sub    esp,0x10
c0012681:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012685:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012689:	50                   	push   eax
c001268a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001268e:	e8 39 ff ff ff       	call   c00125cc <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012693:	50                   	push   eax
c0012694:	e8 ab ff ff ff       	call   c0012644 <Dbg::logs(char*)>
c0012699:	83 c4 20             	add    esp,0x20
c001269c:	c3                   	ret    

c001269d <Dbg::kprintf(char const*, ...)>:
c001269d:	55                   	push   ebp
c001269e:	57                   	push   edi
c001269f:	56                   	push   esi
c00126a0:	53                   	push   ebx
c00126a1:	83 ec 0c             	sub    esp,0xc
c00126a4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00126a8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00126ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00126b0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00126b3:	84 c0                	test   al,al
c00126b5:	74 4a                	je     c0012701 <Dbg::kprintf(char const*, ...)+0x64>
c00126b7:	31 db                	xor    ebx,ebx
c00126b9:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00126bc:	3c 25                	cmp    al,0x25
c00126be:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00126c1:	0f 85 e4 00 00 00    	jne    c00127ab <Dbg::kprintf(char const*, ...)+0x10e>
c00126c7:	83 c3 02             	add    ebx,0x2
c00126ca:	8a 07                	mov    al,BYTE PTR [edi]
c00126cc:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00126cf:	83 e8 25             	sub    eax,0x25
c00126d2:	3c 53                	cmp    al,0x53
c00126d4:	0f 87 ba 00 00 00    	ja     c0012794 <Dbg::kprintf(char const*, ...)+0xf7>
c00126da:	0f b6 c0             	movzx  eax,al
c00126dd:	ff 24 85 34 85 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd7acc]
c00126e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126e8:	89 c8                	mov    eax,ecx
c00126ea:	83 c1 04             	add    ecx,0x4
c00126ed:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00126f1:	ff 30                	push   DWORD PTR [eax]
c00126f3:	e8 4c ff ff ff       	call   c0012644 <Dbg::logs(char*)>
c00126f8:	58                   	pop    eax
c00126f9:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00126fd:	84 c0                	test   al,al
c00126ff:	75 b8                	jne    c00126b9 <Dbg::kprintf(char const*, ...)+0x1c>
c0012701:	83 c4 0c             	add    esp,0xc
c0012704:	5b                   	pop    ebx
c0012705:	5e                   	pop    esi
c0012706:	5f                   	pop    edi
c0012707:	5d                   	pop    ebp
c0012708:	c3                   	ret    
c0012709:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001270d:	89 d0                	mov    eax,edx
c001270f:	83 c2 04             	add    edx,0x4
c0012712:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012716:	ff 30                	push   DWORD PTR [eax]
c0012718:	e8 44 ff ff ff       	call   c0012661 <Dbg::logWriteInt(unsigned int)>
c001271d:	58                   	pop    eax
c001271e:	eb d9                	jmp    c00126f9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012720:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012724:	89 d0                	mov    eax,edx
c0012726:	83 c2 04             	add    edx,0x4
c0012729:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001272c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012730:	50                   	push   eax
c0012731:	e8 f7 fe ff ff       	call   c001262d <Dbg::logc(char)>
c0012736:	58                   	pop    eax
c0012737:	eb c0                	jmp    c00126f9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012739:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001273d:	89 c8                	mov    eax,ecx
c001273f:	83 c1 04             	add    ecx,0x4
c0012742:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012746:	ff 30                	push   DWORD PTR [eax]
c0012748:	e8 14 ff ff ff       	call   c0012661 <Dbg::logWriteInt(unsigned int)>
c001274d:	5f                   	pop    edi
c001274e:	eb a9                	jmp    c00126f9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012750:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012754:	89 c8                	mov    eax,ecx
c0012756:	83 c1 04             	add    ecx,0x4
c0012759:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001275d:	6a 10                	push   0x10
c001275f:	ff 30                	push   DWORD PTR [eax]
c0012761:	e8 18 ff ff ff       	call   c001267e <Dbg::logWriteIntBase(unsigned int, int)>
c0012766:	59                   	pop    ecx
c0012767:	5f                   	pop    edi
c0012768:	eb 8f                	jmp    c00126f9 <Dbg::kprintf(char const*, ...)+0x5c>
c001276a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001276e:	89 d0                	mov    eax,edx
c0012770:	83 c2 08             	add    edx,0x8
c0012773:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012777:	6a 10                	push   0x10
c0012779:	ff 30                	push   DWORD PTR [eax]
c001277b:	e8 fe fe ff ff       	call   c001267e <Dbg::logWriteIntBase(unsigned int, int)>
c0012780:	58                   	pop    eax
c0012781:	5a                   	pop    edx
c0012782:	e9 72 ff ff ff       	jmp    c00126f9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012787:	6a 25                	push   0x25
c0012789:	e8 9f fe ff ff       	call   c001262d <Dbg::logc(char)>
c001278e:	58                   	pop    eax
c001278f:	e9 65 ff ff ff       	jmp    c00126f9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012794:	6a 25                	push   0x25
c0012796:	e8 92 fe ff ff       	call   c001262d <Dbg::logc(char)>
c001279b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001279e:	50                   	push   eax
c001279f:	e8 89 fe ff ff       	call   c001262d <Dbg::logc(char)>
c00127a4:	5a                   	pop    edx
c00127a5:	59                   	pop    ecx
c00127a6:	e9 4e ff ff ff       	jmp    c00126f9 <Dbg::kprintf(char const*, ...)+0x5c>
c00127ab:	50                   	push   eax
c00127ac:	89 eb                	mov    ebx,ebp
c00127ae:	e8 7a fe ff ff       	call   c001262d <Dbg::logc(char)>
c00127b3:	89 fd                	mov    ebp,edi
c00127b5:	58                   	pop    eax
c00127b6:	e9 3e ff ff ff       	jmp    c00126f9 <Dbg::kprintf(char const*, ...)+0x5c>
c00127bb:	90                   	nop

c00127bc <File::read(unsigned long long, void*, int*)>:
c00127bc:	53                   	push   ebx
c00127bd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127c1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127c5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127cc:	3c 19                	cmp    al,0x19
c00127ce:	77 35                	ja     c0012805 <File::read(unsigned long long, void*, int*)+0x49>
c00127d0:	8b 04 85 c0 c0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3f40]
c00127d7:	85 c0                	test   eax,eax
c00127d9:	74 2a                	je     c0012805 <File::read(unsigned long long, void*, int*)+0x49>
c00127db:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00127e1:	85 c0                	test   eax,eax
c00127e3:	74 20                	je     c0012805 <File::read(unsigned long long, void*, int*)+0x49>
c00127e5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127e9:	74 21                	je     c001280c <File::read(unsigned long long, void*, int*)+0x50>
c00127eb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00127ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127f1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00127f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127ff:	5b                   	pop    ebx
c0012800:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012803:	ff e0                	jmp    eax
c0012805:	b8 0b 00 00 00       	mov    eax,0xb
c001280a:	eb 05                	jmp    c0012811 <File::read(unsigned long long, void*, int*)+0x55>
c001280c:	b8 05 00 00 00       	mov    eax,0x5
c0012811:	5b                   	pop    ebx
c0012812:	c3                   	ret    
c0012813:	90                   	nop

c0012814 <File::write(unsigned long long, void*, int*)>:
c0012814:	53                   	push   ebx
c0012815:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012819:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001281d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012824:	3c 19                	cmp    al,0x19
c0012826:	77 35                	ja     c001285d <File::write(unsigned long long, void*, int*)+0x49>
c0012828:	8b 04 85 c0 c0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3f40]
c001282f:	85 c0                	test   eax,eax
c0012831:	74 2a                	je     c001285d <File::write(unsigned long long, void*, int*)+0x49>
c0012833:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012839:	85 c0                	test   eax,eax
c001283b:	74 20                	je     c001285d <File::write(unsigned long long, void*, int*)+0x49>
c001283d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012841:	74 21                	je     c0012864 <File::write(unsigned long long, void*, int*)+0x50>
c0012843:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012845:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012849:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001284f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012853:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012857:	5b                   	pop    ebx
c0012858:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001285b:	ff e0                	jmp    eax
c001285d:	b8 0b 00 00 00       	mov    eax,0xb
c0012862:	eb 05                	jmp    c0012869 <File::write(unsigned long long, void*, int*)+0x55>
c0012864:	b8 05 00 00 00       	mov    eax,0x5
c0012869:	5b                   	pop    ebx
c001286a:	c3                   	ret    
c001286b:	90                   	nop

c001286c <Directory::read(unsigned long long, void*, int*)>:
c001286c:	53                   	push   ebx
c001286d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012871:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012875:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001287c:	3c 19                	cmp    al,0x19
c001287e:	77 35                	ja     c00128b5 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012880:	8b 04 85 c0 c0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3f40]
c0012887:	85 c0                	test   eax,eax
c0012889:	74 2a                	je     c00128b5 <Directory::read(unsigned long long, void*, int*)+0x49>
c001288b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012891:	85 c0                	test   eax,eax
c0012893:	74 20                	je     c00128b5 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012895:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012899:	74 21                	je     c00128bc <Directory::read(unsigned long long, void*, int*)+0x50>
c001289b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001289d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128a1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128af:	5b                   	pop    ebx
c00128b0:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00128b3:	ff e0                	jmp    eax
c00128b5:	b8 0b 00 00 00       	mov    eax,0xb
c00128ba:	eb 05                	jmp    c00128c1 <Directory::read(unsigned long long, void*, int*)+0x55>
c00128bc:	b8 05 00 00 00       	mov    eax,0x5
c00128c1:	5b                   	pop    ebx
c00128c2:	c3                   	ret    
c00128c3:	90                   	nop

c00128c4 <Directory::write(unsigned long long, void*, int*)>:
c00128c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128c8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00128cf:	b8 0b 00 00 00       	mov    eax,0xb
c00128d4:	80 fa 19             	cmp    dl,0x19
c00128d7:	77 18                	ja     c00128f1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128d9:	8b 14 95 c0 c0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3f40]
c00128e0:	85 d2                	test   edx,edx
c00128e2:	74 0d                	je     c00128f1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128e4:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00128eb:	19 c0                	sbb    eax,eax
c00128ed:	83 e0 0a             	and    eax,0xa
c00128f0:	40                   	inc    eax
c00128f1:	c3                   	ret    

c00128f2 <File::isAtty()>:
c00128f2:	31 c0                	xor    eax,eax
c00128f4:	c3                   	ret    
c00128f5:	90                   	nop

c00128f6 <Directory::isAtty()>:
c00128f6:	31 c0                	xor    eax,eax
c00128f8:	c3                   	ret    
c00128f9:	90                   	nop

c00128fa <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00128fa:	b8 0a 00 00 00       	mov    eax,0xa
c00128ff:	c3                   	ret    

c0012900 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012900:	b8 0a 00 00 00       	mov    eax,0xa
c0012905:	c3                   	ret    

c0012906 <File::~File()>:
c0012906:	83 ec 0c             	sub    esp,0xc
c0012909:	ba f0 86 02 c0       	mov    edx,0xc00286f0
c001290e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012912:	89 10                	mov    DWORD PTR [eax],edx
c0012914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012918:	83 ec 0c             	sub    esp,0xc
c001291b:	50                   	push   eax
c001291c:	e8 2b eb ff ff       	call   c001144c <UnixFile::~UnixFile()>
c0012921:	83 c4 10             	add    esp,0x10
c0012924:	90                   	nop
c0012925:	83 c4 0c             	add    esp,0xc
c0012928:	c3                   	ret    
c0012929:	90                   	nop

c001292a <File::~File()>:
c001292a:	83 ec 0c             	sub    esp,0xc
c001292d:	83 ec 0c             	sub    esp,0xc
c0012930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012934:	e8 cd ff ff ff       	call   c0012906 <File::~File()>
c0012939:	83 c4 10             	add    esp,0x10
c001293c:	83 ec 08             	sub    esp,0x8
c001293f:	68 14 01 00 00       	push   0x114
c0012944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012948:	e8 70 fc ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c001294d:	83 c4 10             	add    esp,0x10
c0012950:	83 c4 0c             	add    esp,0xc
c0012953:	c3                   	ret    

c0012954 <Directory::~Directory()>:
c0012954:	83 ec 0c             	sub    esp,0xc
c0012957:	ba 0c 87 02 c0       	mov    edx,0xc002870c
c001295c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012960:	89 10                	mov    DWORD PTR [eax],edx
c0012962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012966:	83 ec 0c             	sub    esp,0xc
c0012969:	50                   	push   eax
c001296a:	e8 dd ea ff ff       	call   c001144c <UnixFile::~UnixFile()>
c001296f:	83 c4 10             	add    esp,0x10
c0012972:	90                   	nop
c0012973:	83 c4 0c             	add    esp,0xc
c0012976:	c3                   	ret    
c0012977:	90                   	nop

c0012978 <Directory::~Directory()>:
c0012978:	83 ec 0c             	sub    esp,0xc
c001297b:	83 ec 0c             	sub    esp,0xc
c001297e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012982:	e8 cd ff ff ff       	call   c0012954 <Directory::~Directory()>
c0012987:	83 c4 10             	add    esp,0x10
c001298a:	83 ec 08             	sub    esp,0x8
c001298d:	68 14 01 00 00       	push   0x114
c0012992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012996:	e8 22 fc ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c001299b:	83 c4 10             	add    esp,0x10
c001299e:	83 c4 0c             	add    esp,0xc
c00129a1:	c3                   	ret    

c00129a2 <Filesystem::Filesystem()>:
c00129a2:	ba 8c 86 02 c0       	mov    edx,0xc002868c
c00129a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129ab:	89 10                	mov    DWORD PTR [eax],edx
c00129ad:	8b 15 28 bc 02 c0    	mov    edx,DWORD PTR ds:0xc002bc28
c00129b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00129ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129be:	a3 28 bc 02 c0       	mov    ds:0xc002bc28,eax
c00129c3:	90                   	nop
c00129c4:	c3                   	ret    
c00129c5:	90                   	nop

c00129c6 <Filesystem::~Filesystem()>:
c00129c6:	ba 8c 86 02 c0       	mov    edx,0xc002868c
c00129cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129cf:	89 10                	mov    DWORD PTR [eax],edx
c00129d1:	90                   	nop
c00129d2:	c3                   	ret    
c00129d3:	90                   	nop

c00129d4 <Filesystem::~Filesystem()>:
c00129d4:	83 ec 0c             	sub    esp,0xc
c00129d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00129db:	e8 e6 ff ff ff       	call   c00129c6 <Filesystem::~Filesystem()>
c00129e0:	83 c4 04             	add    esp,0x4
c00129e3:	83 ec 08             	sub    esp,0x8
c00129e6:	6a 08                	push   0x8
c00129e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129ec:	e8 cc fb ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c00129f1:	83 c4 10             	add    esp,0x10
c00129f4:	83 c4 0c             	add    esp,0xc
c00129f7:	c3                   	ret    

c00129f8 <initVFS()>:
c00129f8:	83 ec 18             	sub    esp,0x18
c00129fb:	6a 08                	push   0x8
c00129fd:	e8 ce ca ff ff       	call   c000f4d0 <malloc>
c0012a02:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a05:	e8 0c c8 00 00       	call   c001f216 <FAT::FAT()>
c0012a0a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012a11:	e8 ba ca ff ff       	call   c000f4d0 <malloc>
c0012a16:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a19:	e8 6e da 00 00       	call   c002048c <ISO9660::ISO9660()>
c0012a1e:	83 c4 1c             	add    esp,0x1c
c0012a21:	c3                   	ret    

c0012a22 <standardiseFiles(char*, char const*, char const*)>:
c0012a22:	55                   	push   ebp
c0012a23:	57                   	push   edi
c0012a24:	56                   	push   esi
c0012a25:	53                   	push   ebx
c0012a26:	81 ec 10 04 00 00    	sub    esp,0x410
c0012a2c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012a33:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012a3a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012a41:	68 00 04 00 00       	push   0x400
c0012a46:	6a 00                	push   0x0
c0012a48:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012a4c:	56                   	push   esi
c0012a4d:	e8 39 dc fe ff       	call   c000068b <memset>
c0012a52:	83 c4 10             	add    esp,0x10
c0012a55:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012a59:	75 0b                	jne    c0012a66 <standardiseFiles(char*, char const*, char const*)+0x44>
c0012a5b:	50                   	push   eax
c0012a5c:	50                   	push   eax
c0012a5d:	57                   	push   edi
c0012a5e:	56                   	push   esi
c0012a5f:	e8 c6 dc fe ff       	call   c000072a <strcpy>
c0012a64:	eb 41                	jmp    c0012aa7 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012a66:	8a 07                	mov    al,BYTE PTR [edi]
c0012a68:	3c 5c                	cmp    al,0x5c
c0012a6a:	74 04                	je     c0012a70 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012a6c:	3c 2f                	cmp    al,0x2f
c0012a6e:	75 18                	jne    c0012a88 <standardiseFiles(char*, char const*, char const*)+0x66>
c0012a70:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012a73:	3c 60                	cmp    al,0x60
c0012a75:	7e 03                	jle    c0012a7a <standardiseFiles(char*, char const*, char const*)+0x58>
c0012a77:	83 e8 20             	sub    eax,0x20
c0012a7a:	88 04 24             	mov    BYTE PTR [esp],al
c0012a7d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a84:	50                   	push   eax
c0012a85:	50                   	push   eax
c0012a86:	eb 18                	jmp    c0012aa0 <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012a88:	50                   	push   eax
c0012a89:	50                   	push   eax
c0012a8a:	55                   	push   ebp
c0012a8b:	56                   	push   esi
c0012a8c:	e8 99 dc fe ff       	call   c000072a <strcpy>
c0012a91:	5a                   	pop    edx
c0012a92:	59                   	pop    ecx
c0012a93:	68 69 9a 02 c0       	push   0xc0029a69
c0012a98:	56                   	push   esi
c0012a99:	e8 43 dd fe ff       	call   c00007e1 <strcat>
c0012a9e:	5d                   	pop    ebp
c0012a9f:	58                   	pop    eax
c0012aa0:	57                   	push   edi
c0012aa1:	56                   	push   esi
c0012aa2:	e8 3a dd fe ff       	call   c00007e1 <strcat>
c0012aa7:	83 c4 10             	add    esp,0x10
c0012aaa:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012aad:	3c 60                	cmp    al,0x60
c0012aaf:	7e 03                	jle    c0012ab4 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012ab1:	83 e8 20             	sub    eax,0x20
c0012ab4:	88 04 24             	mov    BYTE PTR [esp],al
c0012ab7:	88 03                	mov    BYTE PTR [ebx],al
c0012ab9:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ac0:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012ac6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012aca:	bf 03 00 00 00       	mov    edi,0x3
c0012acf:	b8 03 00 00 00       	mov    eax,0x3
c0012ad4:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012ad7:	84 d2                	test   dl,dl
c0012ad9:	0f 84 91 00 00 00    	je     c0012b70 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012adf:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012ae2:	80 fa 5c             	cmp    dl,0x5c
c0012ae5:	74 05                	je     c0012aec <standardiseFiles(char*, char const*, char const*)+0xca>
c0012ae7:	80 fa 2f             	cmp    dl,0x2f
c0012aea:	75 12                	jne    c0012afe <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012aec:	89 c5                	mov    ebp,eax
c0012aee:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012af3:	74 09                	je     c0012afe <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012af5:	40                   	inc    eax
c0012af6:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012afa:	89 cf                	mov    edi,ecx
c0012afc:	eb d6                	jmp    c0012ad4 <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012afe:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012b03:	75 5b                	jne    c0012b60 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b05:	80 fa 2e             	cmp    dl,0x2e
c0012b08:	75 56                	jne    c0012b60 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b0a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012b0e:	74 19                	je     c0012b29 <standardiseFiles(char*, char const*, char const*)+0x107>
c0012b10:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b15:	74 53                	je     c0012b6a <standardiseFiles(char*, char const*, char const*)+0x148>
c0012b17:	89 f9                	mov    ecx,edi
c0012b19:	41                   	inc    ecx
c0012b1a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b1d:	80 fa 2f             	cmp    dl,0x2f
c0012b20:	74 f7                	je     c0012b19 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b22:	80 fa 5c             	cmp    dl,0x5c
c0012b25:	74 f2                	je     c0012b19 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b27:	eb d1                	jmp    c0012afa <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b29:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b2e:	74 3a                	je     c0012b6a <standardiseFiles(char*, char const*, char const*)+0x148>
c0012b30:	83 f8 03             	cmp    eax,0x3
c0012b33:	74 c5                	je     c0012afa <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b35:	41                   	inc    ecx
c0012b36:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b39:	80 fa 2f             	cmp    dl,0x2f
c0012b3c:	74 f7                	je     c0012b35 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012b3e:	80 fa 5c             	cmp    dl,0x5c
c0012b41:	74 f2                	je     c0012b35 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012b43:	48                   	dec    eax
c0012b44:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b48:	75 06                	jne    c0012b50 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b4a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b4e:	eb f3                	jmp    c0012b43 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012b50:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b54:	74 07                	je     c0012b5d <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012b56:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b5a:	48                   	dec    eax
c0012b5b:	eb f3                	jmp    c0012b50 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b5d:	40                   	inc    eax
c0012b5e:	eb 9a                	jmp    c0012afa <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b60:	80 fa 2f             	cmp    dl,0x2f
c0012b63:	74 95                	je     c0012afa <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b65:	80 fa 5c             	cmp    dl,0x5c
c0012b68:	74 90                	je     c0012afa <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b6a:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012b6d:	40                   	inc    eax
c0012b6e:	eb 8a                	jmp    c0012afa <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b70:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b74:	83 ec 0c             	sub    esp,0xc
c0012b77:	53                   	push   ebx
c0012b78:	e8 2b db fe ff       	call   c00006a8 <strlen>
c0012b7d:	83 c4 10             	add    esp,0x10
c0012b80:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012b85:	75 26                	jne    c0012bad <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012b87:	83 ec 0c             	sub    esp,0xc
c0012b8a:	53                   	push   ebx
c0012b8b:	e8 18 db fe ff       	call   c00006a8 <strlen>
c0012b90:	83 c4 10             	add    esp,0x10
c0012b93:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012b98:	74 26                	je     c0012bc0 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012b9a:	83 ec 0c             	sub    esp,0xc
c0012b9d:	53                   	push   ebx
c0012b9e:	e8 05 db fe ff       	call   c00006a8 <strlen>
c0012ba3:	83 c4 10             	add    esp,0x10
c0012ba6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012bab:	eb c7                	jmp    c0012b74 <standardiseFiles(char*, char const*, char const*)+0x152>
c0012bad:	83 ec 0c             	sub    esp,0xc
c0012bb0:	53                   	push   ebx
c0012bb1:	e8 f2 da fe ff       	call   c00006a8 <strlen>
c0012bb6:	83 c4 10             	add    esp,0x10
c0012bb9:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012bbe:	74 c7                	je     c0012b87 <standardiseFiles(char*, char const*, char const*)+0x165>
c0012bc0:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012bc6:	5b                   	pop    ebx
c0012bc7:	5e                   	pop    esi
c0012bc8:	5f                   	pop    edi
c0012bc9:	5d                   	pop    ebp
c0012bca:	c3                   	ret    
c0012bcb:	90                   	nop

c0012bcc <File::File(char const*, Process*)>:
c0012bcc:	83 ec 0c             	sub    esp,0xc
c0012bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bd3:	83 ec 08             	sub    esp,0x8
c0012bd6:	6a 00                	push   0x0
c0012bd8:	50                   	push   eax
c0012bd9:	e8 8c e6 ff ff       	call   c001126a <UnixFile::UnixFile(int)>
c0012bde:	83 c4 10             	add    esp,0x10
c0012be1:	ba f0 86 02 c0       	mov    edx,0xc00286f0
c0012be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bea:	89 10                	mov    DWORD PTR [eax],edx
c0012bec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012bf0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bfa:	83 c0 0d             	add    eax,0xd
c0012bfd:	83 ec 04             	sub    esp,0x4
c0012c00:	52                   	push   edx
c0012c01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c05:	50                   	push   eax
c0012c06:	e8 17 fe ff ff       	call   c0012a22 <standardiseFiles(char*, char const*, char const*)>
c0012c0b:	83 c4 10             	add    esp,0x10
c0012c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c12:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c15:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c1c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c26:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012c2a:	90                   	nop
c0012c2b:	83 c4 0c             	add    esp,0xc
c0012c2e:	c3                   	ret    
c0012c2f:	90                   	nop

c0012c30 <File::open(FileOpenMode)>:
c0012c30:	53                   	push   ebx
c0012c31:	b8 0b 00 00 00       	mov    eax,0xb
c0012c36:	83 ec 08             	sub    esp,0x8
c0012c39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c3d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012c44:	80 fa 19             	cmp    dl,0x19
c0012c47:	77 40                	ja     c0012c89 <File::open(FileOpenMode)+0x59>
c0012c49:	8b 14 95 c0 c0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3f40]
c0012c50:	85 d2                	test   edx,edx
c0012c52:	74 35                	je     c0012c89 <File::open(FileOpenMode)+0x59>
c0012c54:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c5a:	85 d2                	test   edx,edx
c0012c5c:	74 2b                	je     c0012c89 <File::open(FileOpenMode)+0x59>
c0012c5e:	b8 06 00 00 00       	mov    eax,0x6
c0012c63:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012c67:	75 20                	jne    c0012c89 <File::open(FileOpenMode)+0x59>
c0012c69:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c6b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012c71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c75:	51                   	push   ecx
c0012c76:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012c79:	51                   	push   ecx
c0012c7a:	52                   	push   edx
c0012c7b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012c7e:	83 c4 10             	add    esp,0x10
c0012c81:	85 c0                	test   eax,eax
c0012c83:	75 04                	jne    c0012c89 <File::open(FileOpenMode)+0x59>
c0012c85:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012c89:	83 c4 08             	add    esp,0x8
c0012c8c:	5b                   	pop    ebx
c0012c8d:	c3                   	ret    

c0012c8e <File::close()>:
c0012c8e:	53                   	push   ebx
c0012c8f:	b8 0b 00 00 00       	mov    eax,0xb
c0012c94:	83 ec 08             	sub    esp,0x8
c0012c97:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012c9b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012ca2:	80 fa 19             	cmp    dl,0x19
c0012ca5:	77 41                	ja     c0012ce8 <File::close()+0x5a>
c0012ca7:	8b 1c 95 c0 c0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd3f40]
c0012cae:	85 db                	test   ebx,ebx
c0012cb0:	74 36                	je     c0012ce8 <File::close()+0x5a>
c0012cb2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012cb9:	74 2d                	je     c0012ce8 <File::close()+0x5a>
c0012cbb:	b8 05 00 00 00       	mov    eax,0x5
c0012cc0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012cc4:	74 22                	je     c0012ce8 <File::close()+0x5a>
c0012cc6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012cca:	8b 04 95 c0 c0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3f40]
c0012cd1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012cd7:	53                   	push   ebx
c0012cd8:	53                   	push   ebx
c0012cd9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cdb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012ce1:	50                   	push   eax
c0012ce2:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012ce5:	83 c4 10             	add    esp,0x10
c0012ce8:	83 c4 08             	add    esp,0x8
c0012ceb:	5b                   	pop    ebx
c0012cec:	c3                   	ret    
c0012ced:	90                   	nop

c0012cee <File::seek(unsigned long long)>:
c0012cee:	56                   	push   esi
c0012cef:	53                   	push   ebx
c0012cf0:	b8 0b 00 00 00       	mov    eax,0xb
c0012cf5:	51                   	push   ecx
c0012cf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012cfa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012cfe:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012d05:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d09:	80 fa 19             	cmp    dl,0x19
c0012d0c:	77 31                	ja     c0012d3f <File::seek(unsigned long long)+0x51>
c0012d0e:	8b 14 95 c0 c0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3f40]
c0012d15:	85 d2                	test   edx,edx
c0012d17:	74 26                	je     c0012d3f <File::seek(unsigned long long)+0x51>
c0012d19:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d1f:	85 d2                	test   edx,edx
c0012d21:	74 1c                	je     c0012d3f <File::seek(unsigned long long)+0x51>
c0012d23:	b8 05 00 00 00       	mov    eax,0x5
c0012d28:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012d2c:	74 11                	je     c0012d3f <File::seek(unsigned long long)+0x51>
c0012d2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d30:	53                   	push   ebx
c0012d31:	51                   	push   ecx
c0012d32:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012d38:	52                   	push   edx
c0012d39:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012d3c:	83 c4 10             	add    esp,0x10
c0012d3f:	5a                   	pop    edx
c0012d40:	5b                   	pop    ebx
c0012d41:	5e                   	pop    esi
c0012d42:	c3                   	ret    
c0012d43:	90                   	nop

c0012d44 <File::tell(unsigned long long*)>:
c0012d44:	83 ec 0c             	sub    esp,0xc
c0012d47:	b8 0b 00 00 00       	mov    eax,0xb
c0012d4c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d50:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d57:	80 fa 19             	cmp    dl,0x19
c0012d5a:	77 34                	ja     c0012d90 <File::tell(unsigned long long*)+0x4c>
c0012d5c:	8b 14 95 c0 c0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3f40]
c0012d63:	85 d2                	test   edx,edx
c0012d65:	74 29                	je     c0012d90 <File::tell(unsigned long long*)+0x4c>
c0012d67:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d6d:	85 d2                	test   edx,edx
c0012d6f:	74 1f                	je     c0012d90 <File::tell(unsigned long long*)+0x4c>
c0012d71:	b8 05 00 00 00       	mov    eax,0x5
c0012d76:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d7a:	74 14                	je     c0012d90 <File::tell(unsigned long long*)+0x4c>
c0012d7c:	50                   	push   eax
c0012d7d:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d83:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d89:	52                   	push   edx
c0012d8a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012d8d:	83 c4 10             	add    esp,0x10
c0012d90:	83 c4 0c             	add    esp,0xc
c0012d93:	c3                   	ret    

c0012d94 <File::rewind()>:
c0012d94:	83 ec 10             	sub    esp,0x10
c0012d97:	6a 00                	push   0x0
c0012d99:	6a 00                	push   0x0
c0012d9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d9f:	e8 4a ff ff ff       	call   c0012cee <File::seek(unsigned long long)>
c0012da4:	83 c4 1c             	add    esp,0x1c
c0012da7:	c3                   	ret    

c0012da8 <File::unlink()>:
c0012da8:	83 ec 0c             	sub    esp,0xc
c0012dab:	b8 0b 00 00 00       	mov    eax,0xb
c0012db0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012db4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012dbb:	80 f9 19             	cmp    cl,0x19
c0012dbe:	77 2f                	ja     c0012def <File::unlink()+0x47>
c0012dc0:	8b 0c 8d c0 c0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3f40]
c0012dc7:	85 c9                	test   ecx,ecx
c0012dc9:	74 24                	je     c0012def <File::unlink()+0x47>
c0012dcb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dd1:	85 c9                	test   ecx,ecx
c0012dd3:	74 1a                	je     c0012def <File::unlink()+0x47>
c0012dd5:	b8 06 00 00 00       	mov    eax,0x6
c0012dda:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dde:	75 0f                	jne    c0012def <File::unlink()+0x47>
c0012de0:	83 c2 0d             	add    edx,0xd
c0012de3:	50                   	push   eax
c0012de4:	50                   	push   eax
c0012de5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012de7:	52                   	push   edx
c0012de8:	51                   	push   ecx
c0012de9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012dec:	83 c4 10             	add    esp,0x10
c0012def:	83 c4 0c             	add    esp,0xc
c0012df2:	c3                   	ret    
c0012df3:	90                   	nop

c0012df4 <File::rename(char const*)>:
c0012df4:	83 ec 0c             	sub    esp,0xc
c0012df7:	b8 0b 00 00 00       	mov    eax,0xb
c0012dfc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e00:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e07:	80 f9 19             	cmp    cl,0x19
c0012e0a:	77 32                	ja     c0012e3e <File::rename(char const*)+0x4a>
c0012e0c:	8b 0c 8d c0 c0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3f40]
c0012e13:	85 c9                	test   ecx,ecx
c0012e15:	74 27                	je     c0012e3e <File::rename(char const*)+0x4a>
c0012e17:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e1d:	85 c9                	test   ecx,ecx
c0012e1f:	74 1d                	je     c0012e3e <File::rename(char const*)+0x4a>
c0012e21:	b8 06 00 00 00       	mov    eax,0x6
c0012e26:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e2a:	75 12                	jne    c0012e3e <File::rename(char const*)+0x4a>
c0012e2c:	83 c2 0d             	add    edx,0xd
c0012e2f:	50                   	push   eax
c0012e30:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e36:	52                   	push   edx
c0012e37:	51                   	push   ecx
c0012e38:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012e3b:	83 c4 10             	add    esp,0x10
c0012e3e:	83 c4 0c             	add    esp,0xc
c0012e41:	c3                   	ret    

c0012e42 <File::chfatattr(unsigned char, unsigned char)>:
c0012e42:	57                   	push   edi
c0012e43:	b8 0b 00 00 00       	mov    eax,0xb
c0012e48:	56                   	push   esi
c0012e49:	53                   	push   ebx
c0012e4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e4e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012e52:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e59:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012e5d:	80 f9 19             	cmp    cl,0x19
c0012e60:	77 37                	ja     c0012e99 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e62:	8b 0c 8d c0 c0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3f40]
c0012e69:	85 c9                	test   ecx,ecx
c0012e6b:	74 2c                	je     c0012e99 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e6d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e73:	85 c9                	test   ecx,ecx
c0012e75:	74 22                	je     c0012e99 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e77:	b8 06 00 00 00       	mov    eax,0x6
c0012e7c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e80:	75 17                	jne    c0012e99 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e82:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012e84:	89 f0                	mov    eax,esi
c0012e86:	83 c2 0d             	add    edx,0xd
c0012e89:	0f b6 f0             	movzx  esi,al
c0012e8c:	0f b6 db             	movzx  ebx,bl
c0012e8f:	56                   	push   esi
c0012e90:	53                   	push   ebx
c0012e91:	52                   	push   edx
c0012e92:	51                   	push   ecx
c0012e93:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012e96:	83 c4 10             	add    esp,0x10
c0012e99:	5b                   	pop    ebx
c0012e9a:	5e                   	pop    esi
c0012e9b:	5f                   	pop    edi
c0012e9c:	c3                   	ret    
c0012e9d:	90                   	nop

c0012e9e <File::exists()>:
c0012e9e:	83 ec 0c             	sub    esp,0xc
c0012ea1:	31 c0                	xor    eax,eax
c0012ea3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ea7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012eae:	80 f9 19             	cmp    cl,0x19
c0012eb1:	77 24                	ja     c0012ed7 <File::exists()+0x39>
c0012eb3:	8b 0c 8d c0 c0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3f40]
c0012eba:	85 c9                	test   ecx,ecx
c0012ebc:	74 19                	je     c0012ed7 <File::exists()+0x39>
c0012ebe:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ec4:	85 c9                	test   ecx,ecx
c0012ec6:	74 0f                	je     c0012ed7 <File::exists()+0x39>
c0012ec8:	83 c2 0d             	add    edx,0xd
c0012ecb:	50                   	push   eax
c0012ecc:	50                   	push   eax
c0012ecd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ecf:	52                   	push   edx
c0012ed0:	51                   	push   ecx
c0012ed1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012ed4:	83 c4 10             	add    esp,0x10
c0012ed7:	83 c4 0c             	add    esp,0xc
c0012eda:	c3                   	ret    
c0012edb:	90                   	nop

c0012edc <File::stat(unsigned long long*, bool*)>:
c0012edc:	56                   	push   esi
c0012edd:	53                   	push   ebx
c0012ede:	50                   	push   eax
c0012edf:	b8 0b 00 00 00       	mov    eax,0xb
c0012ee4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ee8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012eec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ef3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ef7:	80 f9 19             	cmp    cl,0x19
c0012efa:	77 3d                	ja     c0012f39 <File::stat(unsigned long long*, bool*)+0x5d>
c0012efc:	8b 0c 8d c0 c0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3f40]
c0012f03:	85 c9                	test   ecx,ecx
c0012f05:	74 32                	je     c0012f39 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f07:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f0d:	85 c9                	test   ecx,ecx
c0012f0f:	74 28                	je     c0012f39 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f11:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f13:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f17:	74 13                	je     c0012f2c <File::stat(unsigned long long*, bool*)+0x50>
c0012f19:	83 ec 04             	sub    esp,0x4
c0012f1c:	56                   	push   esi
c0012f1d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012f23:	51                   	push   ecx
c0012f24:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012f27:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012f2a:	eb 0a                	jmp    c0012f36 <File::stat(unsigned long long*, bool*)+0x5a>
c0012f2c:	53                   	push   ebx
c0012f2d:	83 c2 0d             	add    edx,0xd
c0012f30:	56                   	push   esi
c0012f31:	52                   	push   edx
c0012f32:	51                   	push   ecx
c0012f33:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012f36:	83 c4 10             	add    esp,0x10
c0012f39:	5a                   	pop    edx
c0012f3a:	5b                   	pop    ebx
c0012f3b:	5e                   	pop    esi
c0012f3c:	c3                   	ret    

c0012f3d <getcwd(Process*, char*, int)>:
c0012f3d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f41:	31 c0                	xor    eax,eax
c0012f43:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012f46:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012f4a:	7d 15                	jge    c0012f61 <getcwd(Process*, char*, int)+0x24>
c0012f4c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f50:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012f57:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012f5a:	84 c9                	test   cl,cl
c0012f5c:	74 06                	je     c0012f64 <getcwd(Process*, char*, int)+0x27>
c0012f5e:	40                   	inc    eax
c0012f5f:	eb e2                	jmp    c0012f43 <getcwd(Process*, char*, int)+0x6>
c0012f61:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012f64:	31 c0                	xor    eax,eax
c0012f66:	c3                   	ret    

c0012f67 <setcwd(Process*, char*)>:
c0012f67:	55                   	push   ebp
c0012f68:	57                   	push   edi
c0012f69:	56                   	push   esi
c0012f6a:	53                   	push   ebx
c0012f6b:	81 ec 20 02 00 00    	sub    esp,0x220
c0012f71:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012f78:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012f7e:	57                   	push   edi
c0012f7f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012f86:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012f8a:	56                   	push   esi
c0012f8b:	e8 92 fa ff ff       	call   c0012a22 <standardiseFiles(char*, char const*, char const*)>
c0012f90:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f93:	e8 10 d7 fe ff       	call   c00006a8 <strlen>
c0012f98:	83 c4 10             	add    esp,0x10
c0012f9b:	83 f8 02             	cmp    eax,0x2
c0012f9e:	77 17                	ja     c0012fb7 <setcwd(Process*, char*)+0x50>
c0012fa0:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012fa5:	83 e8 41             	sub    eax,0x41
c0012fa8:	83 f8 19             	cmp    eax,0x19
c0012fab:	76 24                	jbe    c0012fd1 <setcwd(Process*, char*)+0x6a>
c0012fad:	b8 03 00 00 00       	mov    eax,0x3
c0012fb2:	e9 e0 00 00 00       	jmp    c0013097 <setcwd(Process*, char*)+0x130>
c0012fb7:	83 ec 0c             	sub    esp,0xc
c0012fba:	56                   	push   esi
c0012fbb:	e8 e8 d6 fe ff       	call   c00006a8 <strlen>
c0012fc0:	83 c4 10             	add    esp,0x10
c0012fc3:	83 f8 03             	cmp    eax,0x3
c0012fc6:	75 34                	jne    c0012ffc <setcwd(Process*, char*)+0x95>
c0012fc8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012fcd:	75 2d                	jne    c0012ffc <setcwd(Process*, char*)+0x95>
c0012fcf:	eb cf                	jmp    c0012fa0 <setcwd(Process*, char*)+0x39>
c0012fd1:	8b 14 85 c0 c0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3f40]
c0012fd8:	b8 05 00 00 00       	mov    eax,0x5
c0012fdd:	85 d2                	test   edx,edx
c0012fdf:	0f 84 b2 00 00 00    	je     c0013097 <setcwd(Process*, char*)+0x130>
c0012fe5:	b8 06 00 00 00       	mov    eax,0x6
c0012fea:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012ff1:	0f 85 92 00 00 00    	jne    c0013089 <setcwd(Process*, char*)+0x122>
c0012ff7:	e9 9b 00 00 00       	jmp    c0013097 <setcwd(Process*, char*)+0x130>
c0012ffc:	83 ec 0c             	sub    esp,0xc
c0012fff:	68 14 01 00 00       	push   0x114
c0013004:	e8 c7 c4 ff ff       	call   c000f4d0 <malloc>
c0013009:	83 c4 0c             	add    esp,0xc
c001300c:	89 c3                	mov    ebx,eax
c001300e:	55                   	push   ebp
c001300f:	56                   	push   esi
c0013010:	50                   	push   eax
c0013011:	e8 b6 fb ff ff       	call   c0012bcc <File::File(char const*, Process*)>
c0013016:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001301b:	83 c4 0c             	add    esp,0xc
c001301e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013022:	50                   	push   eax
c0013023:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013027:	50                   	push   eax
c0013028:	53                   	push   ebx
c0013029:	e8 ae fe ff ff       	call   c0012edc <File::stat(unsigned long long*, bool*)>
c001302e:	83 c4 10             	add    esp,0x10
c0013031:	83 f8 02             	cmp    eax,0x2
c0013034:	74 04                	je     c001303a <setcwd(Process*, char*)+0xd3>
c0013036:	85 c0                	test   eax,eax
c0013038:	74 1c                	je     c0013056 <setcwd(Process*, char*)+0xef>
c001303a:	b8 01 00 00 00       	mov    eax,0x1
c001303f:	85 db                	test   ebx,ebx
c0013041:	74 54                	je     c0013097 <setcwd(Process*, char*)+0x130>
c0013043:	83 ec 0c             	sub    esp,0xc
c0013046:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013048:	53                   	push   ebx
c0013049:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001304c:	83 c4 10             	add    esp,0x10
c001304f:	b8 01 00 00 00       	mov    eax,0x1
c0013054:	eb 41                	jmp    c0013097 <setcwd(Process*, char*)+0x130>
c0013056:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001305b:	75 1c                	jne    c0013079 <setcwd(Process*, char*)+0x112>
c001305d:	b8 02 00 00 00       	mov    eax,0x2
c0013062:	85 db                	test   ebx,ebx
c0013064:	74 31                	je     c0013097 <setcwd(Process*, char*)+0x130>
c0013066:	83 ec 0c             	sub    esp,0xc
c0013069:	8b 03                	mov    eax,DWORD PTR [ebx]
c001306b:	53                   	push   ebx
c001306c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001306f:	83 c4 10             	add    esp,0x10
c0013072:	b8 02 00 00 00       	mov    eax,0x2
c0013077:	eb 1e                	jmp    c0013097 <setcwd(Process*, char*)+0x130>
c0013079:	85 db                	test   ebx,ebx
c001307b:	74 0c                	je     c0013089 <setcwd(Process*, char*)+0x122>
c001307d:	83 ec 0c             	sub    esp,0xc
c0013080:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013082:	53                   	push   ebx
c0013083:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013086:	83 c4 10             	add    esp,0x10
c0013089:	50                   	push   eax
c001308a:	50                   	push   eax
c001308b:	56                   	push   esi
c001308c:	57                   	push   edi
c001308d:	e8 98 d6 fe ff       	call   c000072a <strcpy>
c0013092:	83 c4 10             	add    esp,0x10
c0013095:	31 c0                	xor    eax,eax
c0013097:	81 c4 1c 02 00 00    	add    esp,0x21c
c001309d:	5b                   	pop    ebx
c001309e:	5e                   	pop    esi
c001309f:	5f                   	pop    edi
c00130a0:	5d                   	pop    ebp
c00130a1:	c3                   	ret    

c00130a2 <Directory::Directory(char const*, Process*)>:
c00130a2:	83 ec 0c             	sub    esp,0xc
c00130a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130a9:	83 ec 08             	sub    esp,0x8
c00130ac:	6a 00                	push   0x0
c00130ae:	50                   	push   eax
c00130af:	e8 b6 e1 ff ff       	call   c001126a <UnixFile::UnixFile(int)>
c00130b4:	83 c4 10             	add    esp,0x10
c00130b7:	ba 0c 87 02 c0       	mov    edx,0xc002870c
c00130bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c0:	89 10                	mov    DWORD PTR [eax],edx
c00130c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130c6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00130cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d0:	83 c0 0d             	add    eax,0xd
c00130d3:	83 ec 04             	sub    esp,0x4
c00130d6:	52                   	push   edx
c00130d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130db:	50                   	push   eax
c00130dc:	e8 41 f9 ff ff       	call   c0012a22 <standardiseFiles(char*, char const*, char const*)>
c00130e1:	83 c4 10             	add    esp,0x10
c00130e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00130eb:	8d 50 bf             	lea    edx,[eax-0x41]
c00130ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00130f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130fc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013100:	90                   	nop
c0013101:	83 c4 0c             	add    esp,0xc
c0013104:	c3                   	ret    
c0013105:	90                   	nop

c0013106 <Directory::open()>:
c0013106:	53                   	push   ebx
c0013107:	b8 0b 00 00 00       	mov    eax,0xb
c001310c:	83 ec 08             	sub    esp,0x8
c001310f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013113:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001311a:	80 fa 19             	cmp    dl,0x19
c001311d:	77 3d                	ja     c001315c <Directory::open()+0x56>
c001311f:	8b 14 95 c0 c0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3f40]
c0013126:	85 d2                	test   edx,edx
c0013128:	74 32                	je     c001315c <Directory::open()+0x56>
c001312a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013130:	85 d2                	test   edx,edx
c0013132:	74 28                	je     c001315c <Directory::open()+0x56>
c0013134:	b8 06 00 00 00       	mov    eax,0x6
c0013139:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001313d:	75 1d                	jne    c001315c <Directory::open()+0x56>
c001313f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013145:	50                   	push   eax
c0013146:	8b 02                	mov    eax,DWORD PTR [edx]
c0013148:	51                   	push   ecx
c0013149:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001314c:	51                   	push   ecx
c001314d:	52                   	push   edx
c001314e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013151:	83 c4 10             	add    esp,0x10
c0013154:	85 c0                	test   eax,eax
c0013156:	75 04                	jne    c001315c <Directory::open()+0x56>
c0013158:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001315c:	83 c4 08             	add    esp,0x8
c001315f:	5b                   	pop    ebx
c0013160:	c3                   	ret    
c0013161:	90                   	nop

c0013162 <Directory::close()>:
c0013162:	53                   	push   ebx
c0013163:	b8 0b 00 00 00       	mov    eax,0xb
c0013168:	83 ec 08             	sub    esp,0x8
c001316b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001316f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013176:	80 fa 19             	cmp    dl,0x19
c0013179:	77 41                	ja     c00131bc <Directory::close()+0x5a>
c001317b:	8b 1c 95 c0 c0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd3f40]
c0013182:	85 db                	test   ebx,ebx
c0013184:	74 36                	je     c00131bc <Directory::close()+0x5a>
c0013186:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001318d:	74 2d                	je     c00131bc <Directory::close()+0x5a>
c001318f:	b8 05 00 00 00       	mov    eax,0x5
c0013194:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013198:	74 22                	je     c00131bc <Directory::close()+0x5a>
c001319a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001319e:	8b 04 95 c0 c0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3f40]
c00131a5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131ab:	53                   	push   ebx
c00131ac:	53                   	push   ebx
c00131ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00131af:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00131b5:	50                   	push   eax
c00131b6:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00131b9:	83 c4 10             	add    esp,0x10
c00131bc:	83 c4 08             	add    esp,0x8
c00131bf:	5b                   	pop    ebx
c00131c0:	c3                   	ret    
c00131c1:	90                   	nop

c00131c2 <Directory::unlink()>:
c00131c2:	83 ec 0c             	sub    esp,0xc
c00131c5:	b8 0b 00 00 00       	mov    eax,0xb
c00131ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131d5:	80 f9 19             	cmp    cl,0x19
c00131d8:	77 2f                	ja     c0013209 <Directory::unlink()+0x47>
c00131da:	8b 0c 8d c0 c0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3f40]
c00131e1:	85 c9                	test   ecx,ecx
c00131e3:	74 24                	je     c0013209 <Directory::unlink()+0x47>
c00131e5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131eb:	85 c9                	test   ecx,ecx
c00131ed:	74 1a                	je     c0013209 <Directory::unlink()+0x47>
c00131ef:	b8 06 00 00 00       	mov    eax,0x6
c00131f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131f8:	75 0f                	jne    c0013209 <Directory::unlink()+0x47>
c00131fa:	83 c2 0d             	add    edx,0xd
c00131fd:	50                   	push   eax
c00131fe:	50                   	push   eax
c00131ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013201:	52                   	push   edx
c0013202:	51                   	push   ecx
c0013203:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013206:	83 c4 10             	add    esp,0x10
c0013209:	83 c4 0c             	add    esp,0xc
c001320c:	c3                   	ret    
c001320d:	90                   	nop

c001320e <Directory::rename(char const*)>:
c001320e:	83 ec 0c             	sub    esp,0xc
c0013211:	b8 0b 00 00 00       	mov    eax,0xb
c0013216:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001321a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013221:	80 f9 19             	cmp    cl,0x19
c0013224:	77 32                	ja     c0013258 <Directory::rename(char const*)+0x4a>
c0013226:	8b 0c 8d c0 c0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3f40]
c001322d:	85 c9                	test   ecx,ecx
c001322f:	74 27                	je     c0013258 <Directory::rename(char const*)+0x4a>
c0013231:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013237:	85 c9                	test   ecx,ecx
c0013239:	74 1d                	je     c0013258 <Directory::rename(char const*)+0x4a>
c001323b:	b8 06 00 00 00       	mov    eax,0x6
c0013240:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013244:	75 12                	jne    c0013258 <Directory::rename(char const*)+0x4a>
c0013246:	83 c2 0d             	add    edx,0xd
c0013249:	50                   	push   eax
c001324a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001324c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013250:	52                   	push   edx
c0013251:	51                   	push   ecx
c0013252:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013255:	83 c4 10             	add    esp,0x10
c0013258:	83 c4 0c             	add    esp,0xc
c001325b:	c3                   	ret    

c001325c <Directory::exists()>:
c001325c:	83 ec 0c             	sub    esp,0xc
c001325f:	31 c0                	xor    eax,eax
c0013261:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013265:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001326c:	80 f9 19             	cmp    cl,0x19
c001326f:	77 24                	ja     c0013295 <Directory::exists()+0x39>
c0013271:	8b 0c 8d c0 c0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3f40]
c0013278:	85 c9                	test   ecx,ecx
c001327a:	74 19                	je     c0013295 <Directory::exists()+0x39>
c001327c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013282:	85 c9                	test   ecx,ecx
c0013284:	74 0f                	je     c0013295 <Directory::exists()+0x39>
c0013286:	83 c2 0d             	add    edx,0xd
c0013289:	50                   	push   eax
c001328a:	50                   	push   eax
c001328b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001328d:	52                   	push   edx
c001328e:	51                   	push   ecx
c001328f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013292:	83 c4 10             	add    esp,0x10
c0013295:	83 c4 0c             	add    esp,0xc
c0013298:	c3                   	ret    
c0013299:	90                   	nop

c001329a <Directory::read(dirent*)>:
c001329a:	83 ec 1c             	sub    esp,0x1c
c001329d:	b8 0b 00 00 00       	mov    eax,0xb
c00132a2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00132a6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00132ad:	80 fa 19             	cmp    dl,0x19
c00132b0:	77 30                	ja     c00132e2 <Directory::read(dirent*)+0x48>
c00132b2:	8b 14 95 c0 c0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3f40]
c00132b9:	85 d2                	test   edx,edx
c00132bb:	74 25                	je     c00132e2 <Directory::read(dirent*)+0x48>
c00132bd:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00132c4:	74 1c                	je     c00132e2 <Directory::read(dirent*)+0x48>
c00132c6:	83 ec 0c             	sub    esp,0xc
c00132c9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132cb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00132cf:	52                   	push   edx
c00132d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00132d4:	6a 00                	push   0x0
c00132d6:	68 10 01 00 00       	push   0x110
c00132db:	51                   	push   ecx
c00132dc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00132df:	83 c4 20             	add    esp,0x20
c00132e2:	83 c4 1c             	add    esp,0x1c
c00132e5:	c3                   	ret    

c00132e6 <Directory::create()>:
c00132e6:	83 ec 0c             	sub    esp,0xc
c00132e9:	b8 0b 00 00 00       	mov    eax,0xb
c00132ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132f2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132f9:	80 f9 19             	cmp    cl,0x19
c00132fc:	77 2f                	ja     c001332d <Directory::create()+0x47>
c00132fe:	8b 0c 8d c0 c0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3f40]
c0013305:	85 c9                	test   ecx,ecx
c0013307:	74 24                	je     c001332d <Directory::create()+0x47>
c0013309:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001330f:	85 c9                	test   ecx,ecx
c0013311:	74 1a                	je     c001332d <Directory::create()+0x47>
c0013313:	b8 06 00 00 00       	mov    eax,0x6
c0013318:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001331c:	75 0f                	jne    c001332d <Directory::create()+0x47>
c001331e:	83 c2 0d             	add    edx,0xd
c0013321:	50                   	push   eax
c0013322:	50                   	push   eax
c0013323:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013325:	52                   	push   edx
c0013326:	51                   	push   ecx
c0013327:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001332a:	83 c4 10             	add    esp,0x10
c001332d:	83 c4 0c             	add    esp,0xc
c0013330:	c3                   	ret    
c0013331:	90                   	nop

c0013332 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013332:	b8 0a 00 00 00       	mov    eax,0xa
c0013337:	c3                   	ret    

c0013338 <Bus::Bus(char const*)>:
c0013338:	83 ec 0c             	sub    esp,0xc
c001333b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001333f:	83 ec 08             	sub    esp,0x8
c0013342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013346:	50                   	push   eax
c0013347:	e8 30 09 00 00       	call   c0013c7c <Device::Device(char const*)>
c001334c:	83 c4 10             	add    esp,0x10
c001334f:	ba 28 87 02 c0       	mov    edx,0xc0028728
c0013354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013358:	89 10                	mov    DWORD PTR [eax],edx
c001335a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001335e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013368:	90                   	nop
c0013369:	83 c4 0c             	add    esp,0xc
c001336c:	c3                   	ret    
c001336d:	90                   	nop

c001336e <Bus::~Bus()>:
c001336e:	83 ec 0c             	sub    esp,0xc
c0013371:	ba 28 87 02 c0       	mov    edx,0xc0028728
c0013376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001337a:	89 10                	mov    DWORD PTR [eax],edx
c001337c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013380:	83 ec 0c             	sub    esp,0xc
c0013383:	50                   	push   eax
c0013384:	e8 d5 05 00 00       	call   c001395e <Device::~Device()>
c0013389:	83 c4 10             	add    esp,0x10
c001338c:	90                   	nop
c001338d:	83 c4 0c             	add    esp,0xc
c0013390:	c3                   	ret    
c0013391:	90                   	nop

c0013392 <Bus::~Bus()>:
c0013392:	83 ec 0c             	sub    esp,0xc
c0013395:	83 ec 0c             	sub    esp,0xc
c0013398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001339c:	e8 cd ff ff ff       	call   c001336e <Bus::~Bus()>
c00133a1:	83 c4 10             	add    esp,0x10
c00133a4:	83 ec 08             	sub    esp,0x8
c00133a7:	68 58 01 00 00       	push   0x158
c00133ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133b0:	e8 08 f2 ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c00133b5:	83 c4 10             	add    esp,0x10
c00133b8:	83 c4 0c             	add    esp,0xc
c00133bb:	c3                   	ret    

c00133bc <Buzzer::Buzzer(char const*)>:
c00133bc:	83 ec 0c             	sub    esp,0xc
c00133bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c3:	83 ec 08             	sub    esp,0x8
c00133c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133ca:	50                   	push   eax
c00133cb:	e8 ac 08 00 00       	call   c0013c7c <Device::Device(char const*)>
c00133d0:	83 c4 10             	add    esp,0x10
c00133d3:	ba 54 87 02 c0       	mov    edx,0xc0028754
c00133d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133dc:	89 10                	mov    DWORD PTR [eax],edx
c00133de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00133ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f0:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00133fa:	90                   	nop
c00133fb:	83 c4 0c             	add    esp,0xc
c00133fe:	c3                   	ret    
c00133ff:	90                   	nop

c0013400 <Buzzer::~Buzzer()>:
c0013400:	83 ec 0c             	sub    esp,0xc
c0013403:	ba 54 87 02 c0       	mov    edx,0xc0028754
c0013408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001340c:	89 10                	mov    DWORD PTR [eax],edx
c001340e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013412:	83 ec 0c             	sub    esp,0xc
c0013415:	50                   	push   eax
c0013416:	e8 43 05 00 00       	call   c001395e <Device::~Device()>
c001341b:	83 c4 10             	add    esp,0x10
c001341e:	90                   	nop
c001341f:	83 c4 0c             	add    esp,0xc
c0013422:	c3                   	ret    
c0013423:	90                   	nop

c0013424 <Buzzer::~Buzzer()>:
c0013424:	83 ec 0c             	sub    esp,0xc
c0013427:	83 ec 0c             	sub    esp,0xc
c001342a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001342e:	e8 cd ff ff ff       	call   c0013400 <Buzzer::~Buzzer()>
c0013433:	83 c4 10             	add    esp,0x10
c0013436:	83 ec 08             	sub    esp,0x8
c0013439:	68 5c 01 00 00       	push   0x15c
c001343e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013442:	e8 76 f1 ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0013447:	83 c4 10             	add    esp,0x10
c001344a:	83 c4 0c             	add    esp,0xc
c001344d:	c3                   	ret    

c001344e <Buzzer::stop()>:
c001344e:	83 ec 14             	sub    esp,0x14
c0013451:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013455:	8b 10                	mov    edx,DWORD PTR [eax]
c0013457:	6a 00                	push   0x0
c0013459:	50                   	push   eax
c001345a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001345d:	83 c4 1c             	add    esp,0x1c
c0013460:	c3                   	ret    

c0013461 <beepThread(void*)>:
c0013461:	53                   	push   ebx
c0013462:	83 ec 08             	sub    esp,0x8
c0013465:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013469:	e8 bb 8d 00 00       	call   c001c229 <unlockScheduler()>
c001346e:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013473:	52                   	push   edx
c0013474:	52                   	push   edx
c0013475:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001347b:	52                   	push   edx
c001347c:	50                   	push   eax
c001347d:	e8 f4 92 00 00       	call   c001c776 <nanoSleep(unsigned long long)>
c0013482:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013485:	e8 c4 ff ff ff       	call   c001344e <Buzzer::stop()>
c001348a:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013492:	83 c4 18             	add    esp,0x18
c0013495:	5b                   	pop    ebx
c0013496:	e9 21 92 00 00       	jmp    c001c6bc <blockTask(TaskState)>
c001349b:	90                   	nop

c001349c <Buzzer::beep(int, int, bool)>:
c001349c:	57                   	push   edi
c001349d:	56                   	push   esi
c001349e:	53                   	push   ebx
c001349f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134a3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00134a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134ab:	52                   	push   edx
c00134ac:	52                   	push   edx
c00134ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00134af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134b3:	56                   	push   esi
c00134b4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00134b7:	83 c4 10             	add    esp,0x10
c00134ba:	89 f8                	mov    eax,edi
c00134bc:	84 c0                	test   al,al
c00134be:	74 1f                	je     c00134df <Buzzer::beep(int, int, bool)+0x43>
c00134c0:	50                   	push   eax
c00134c1:	50                   	push   eax
c00134c2:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00134c8:	99                   	cdq    
c00134c9:	52                   	push   edx
c00134ca:	50                   	push   eax
c00134cb:	e8 a6 92 00 00       	call   c001c776 <nanoSleep(unsigned long long)>
c00134d0:	83 c4 10             	add    esp,0x10
c00134d3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00134d7:	5b                   	pop    ebx
c00134d8:	5e                   	pop    esi
c00134d9:	5f                   	pop    edi
c00134da:	e9 6f ff ff ff       	jmp    c001344e <Buzzer::stop()>
c00134df:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00134e5:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00134ea:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00134f2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00134f6:	c7 44 24 14 61 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013461
c00134fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013502:	5b                   	pop    ebx
c0013503:	5e                   	pop    esi
c0013504:	5f                   	pop    edi
c0013505:	e9 4e 8e 00 00       	jmp    c001c358 <Process::createThread(void (*)(void*), void*, int)>

c001350a <loadClockSettings()>:
c001350a:	c7 05 34 bc 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002bc34,0xa
c0013514:	c6 05 31 bc 02 c0 00 	mov    BYTE PTR ds:0xc002bc31,0x0
c001351b:	c6 05 30 bc 02 c0 01 	mov    BYTE PTR ds:0xc002bc30,0x1
c0013522:	c3                   	ret    
c0013523:	90                   	nop

c0013524 <Clock::Clock(char const*)>:
c0013524:	83 ec 0c             	sub    esp,0xc
c0013527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001352b:	83 ec 08             	sub    esp,0x8
c001352e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013532:	50                   	push   eax
c0013533:	e8 44 07 00 00       	call   c0013c7c <Device::Device(char const*)>
c0013538:	83 c4 10             	add    esp,0x10
c001353b:	ba 84 87 02 c0       	mov    edx,0xc0028784
c0013540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013544:	89 10                	mov    DWORD PTR [eax],edx
c0013546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001354a:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013554:	90                   	nop
c0013555:	83 c4 0c             	add    esp,0xc
c0013558:	c3                   	ret    
c0013559:	90                   	nop

c001355a <Clock::~Clock()>:
c001355a:	83 ec 0c             	sub    esp,0xc
c001355d:	ba 84 87 02 c0       	mov    edx,0xc0028784
c0013562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013566:	89 10                	mov    DWORD PTR [eax],edx
c0013568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001356c:	83 ec 0c             	sub    esp,0xc
c001356f:	50                   	push   eax
c0013570:	e8 e9 03 00 00       	call   c001395e <Device::~Device()>
c0013575:	83 c4 10             	add    esp,0x10
c0013578:	90                   	nop
c0013579:	83 c4 0c             	add    esp,0xc
c001357c:	c3                   	ret    
c001357d:	90                   	nop

c001357e <Clock::~Clock()>:
c001357e:	83 ec 0c             	sub    esp,0xc
c0013581:	83 ec 0c             	sub    esp,0xc
c0013584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013588:	e8 cd ff ff ff       	call   c001355a <Clock::~Clock()>
c001358d:	83 c4 10             	add    esp,0x10
c0013590:	83 ec 08             	sub    esp,0x8
c0013593:	68 58 01 00 00       	push   0x158
c0013598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001359c:	e8 1c f0 ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c00135a1:	83 c4 10             	add    esp,0x10
c00135a4:	83 c4 0c             	add    esp,0xc
c00135a7:	c3                   	ret    

c00135a8 <Clock::timeInSecondsLocal()>:
c00135a8:	53                   	push   ebx
c00135a9:	83 ec 14             	sub    esp,0x14
c00135ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00135b2:	50                   	push   eax
c00135b3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00135b6:	0f b6 0d 30 bc 02 c0 	movzx  ecx,BYTE PTR ds:0xc002bc30
c00135bd:	03 0d 34 bc 02 c0    	add    ecx,DWORD PTR ds:0xc002bc34
c00135c3:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00135c9:	89 cb                	mov    ebx,ecx
c00135cb:	c1 fb 1f             	sar    ebx,0x1f
c00135ce:	01 c8                	add    eax,ecx
c00135d0:	11 da                	adc    edx,ebx
c00135d2:	83 c4 10             	add    esp,0x10
c00135d5:	31 c9                	xor    ecx,ecx
c00135d7:	80 3d 31 bc 02 c0 00 	cmp    BYTE PTR ds:0xc002bc31,0x0
c00135de:	74 05                	je     c00135e5 <Clock::timeInSecondsLocal()+0x3d>
c00135e0:	b9 08 07 00 00       	mov    ecx,0x708
c00135e5:	31 db                	xor    ebx,ebx
c00135e7:	01 c8                	add    eax,ecx
c00135e9:	11 da                	adc    edx,ebx
c00135eb:	83 c4 08             	add    esp,0x8
c00135ee:	5b                   	pop    ebx
c00135ef:	c3                   	ret    

c00135f0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00135f0:	57                   	push   edi
c00135f1:	56                   	push   esi
c00135f2:	53                   	push   ebx
c00135f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00135fb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135fd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013601:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013604:	0f b6 05 30 bc 02 c0 	movzx  eax,BYTE PTR ds:0xc002bc30
c001360b:	03 05 34 bc 02 c0    	add    eax,DWORD PTR ds:0xc002bc34
c0013611:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013617:	99                   	cdq    
c0013618:	29 c6                	sub    esi,eax
c001361a:	19 d7                	sbb    edi,edx
c001361c:	89 f0                	mov    eax,esi
c001361e:	89 fa                	mov    edx,edi
c0013620:	31 f6                	xor    esi,esi
c0013622:	80 3d 31 bc 02 c0 00 	cmp    BYTE PTR ds:0xc002bc31,0x0
c0013629:	74 05                	je     c0013630 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001362b:	be 08 07 00 00       	mov    esi,0x708
c0013630:	31 ff                	xor    edi,edi
c0013632:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013636:	29 f0                	sub    eax,esi
c0013638:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001363c:	19 fa                	sbb    edx,edi
c001363e:	89 d8                	mov    eax,ebx
c0013640:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013644:	5b                   	pop    ebx
c0013645:	5e                   	pop    esi
c0013646:	5f                   	pop    edi
c0013647:	ff e0                	jmp    eax

c0013649 <datetimeToSeconds(datetime_t)>:
c0013649:	55                   	push   ebp
c001364a:	57                   	push   edi
c001364b:	56                   	push   esi
c001364c:	53                   	push   ebx
c001364d:	83 ec 14             	sub    esp,0x14
c0013650:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013654:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013658:	89 d3                	mov    ebx,edx
c001365a:	0f b6 c6             	movzx  eax,dh
c001365d:	c1 eb 10             	shr    ebx,0x10
c0013660:	48                   	dec    eax
c0013661:	66 81 eb 6c 07       	sub    bx,0x76c
c0013666:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001366a:	0f b6 f5             	movzx  esi,ch
c001366d:	89 cf                	mov    edi,ecx
c001366f:	6b f6 3c             	imul   esi,esi,0x3c
c0013672:	c1 ef 10             	shr    edi,0x10
c0013675:	0f b6 c9             	movzx  ecx,cl
c0013678:	89 f8                	mov    eax,edi
c001367a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013680:	0f b6 f8             	movzx  edi,al
c0013683:	0f b6 d2             	movzx  edx,dl
c0013686:	01 fe                	add    esi,edi
c0013688:	01 f1                	add    ecx,esi
c001368a:	0f b7 f3             	movzx  esi,bx
c001368d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013691:	c1 f9 1f             	sar    ecx,0x1f
c0013694:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013699:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001369d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00136a2:	8b 0c 8d c0 87 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7840]
c00136a9:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00136ad:	76 29                	jbe    c00136d8 <datetimeToSeconds(datetime_t)+0x8f>
c00136af:	f6 c3 03             	test   bl,0x3
c00136b2:	75 24                	jne    c00136d8 <datetimeToSeconds(datetime_t)+0x8f>
c00136b4:	31 d2                	xor    edx,edx
c00136b6:	bf 64 00 00 00       	mov    edi,0x64
c00136bb:	89 d8                	mov    eax,ebx
c00136bd:	66 f7 f7             	div    di
c00136c0:	66 85 d2             	test   dx,dx
c00136c3:	75 12                	jne    c00136d7 <datetimeToSeconds(datetime_t)+0x8e>
c00136c5:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00136cb:	bf 90 01 00 00       	mov    edi,0x190
c00136d0:	99                   	cdq    
c00136d1:	f7 ff                	idiv   edi
c00136d3:	85 d2                	test   edx,edx
c00136d5:	75 01                	jne    c00136d8 <datetimeToSeconds(datetime_t)+0x8f>
c00136d7:	41                   	inc    ecx
c00136d8:	66 83 fb 46          	cmp    bx,0x46
c00136dc:	76 45                	jbe    c0013723 <datetimeToSeconds(datetime_t)+0xda>
c00136de:	bb 46 00 00 00       	mov    ebx,0x46
c00136e3:	bf 64 00 00 00       	mov    edi,0x64
c00136e8:	bd 90 01 00 00       	mov    ebp,0x190
c00136ed:	b8 6d 01 00 00       	mov    eax,0x16d
c00136f2:	f6 c3 03             	test   bl,0x3
c00136f5:	75 23                	jne    c001371a <datetimeToSeconds(datetime_t)+0xd1>
c00136f7:	89 d8                	mov    eax,ebx
c00136f9:	99                   	cdq    
c00136fa:	f7 ff                	idiv   edi
c00136fc:	b8 6e 01 00 00       	mov    eax,0x16e
c0013701:	85 d2                	test   edx,edx
c0013703:	75 15                	jne    c001371a <datetimeToSeconds(datetime_t)+0xd1>
c0013705:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001370b:	99                   	cdq    
c001370c:	f7 fd                	idiv   ebp
c001370e:	83 fa 01             	cmp    edx,0x1
c0013711:	19 c0                	sbb    eax,eax
c0013713:	f7 d0                	not    eax
c0013715:	05 6e 01 00 00       	add    eax,0x16e
c001371a:	01 c1                	add    ecx,eax
c001371c:	43                   	inc    ebx
c001371d:	39 f3                	cmp    ebx,esi
c001371f:	7c cc                	jl     c00136ed <datetimeToSeconds(datetime_t)+0xa4>
c0013721:	eb 35                	jmp    c0013758 <datetimeToSeconds(datetime_t)+0x10f>
c0013723:	74 33                	je     c0013758 <datetimeToSeconds(datetime_t)+0x10f>
c0013725:	b8 45 00 00 00       	mov    eax,0x45
c001372a:	89 c2                	mov    edx,eax
c001372c:	83 e2 03             	and    edx,0x3
c001372f:	39 f0                	cmp    eax,esi
c0013731:	7e 0f                	jle    c0013742 <datetimeToSeconds(datetime_t)+0xf9>
c0013733:	83 fa 01             	cmp    edx,0x1
c0013736:	19 d2                	sbb    edx,edx
c0013738:	48                   	dec    eax
c0013739:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013740:	eb e8                	jmp    c001372a <datetimeToSeconds(datetime_t)+0xe1>
c0013742:	b8 6d 01 00 00       	mov    eax,0x16d
c0013747:	85 d2                	test   edx,edx
c0013749:	75 0b                	jne    c0013756 <datetimeToSeconds(datetime_t)+0x10d>
c001374b:	66 83 fb 01          	cmp    bx,0x1
c001374f:	19 c0                	sbb    eax,eax
c0013751:	05 6e 01 00 00       	add    eax,0x16e
c0013756:	29 c1                	sub    ecx,eax
c0013758:	b8 80 51 01 00       	mov    eax,0x15180
c001375d:	f7 e9                	imul   ecx
c001375f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013763:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013767:	83 c4 14             	add    esp,0x14
c001376a:	5b                   	pop    ebx
c001376b:	5e                   	pop    esi
c001376c:	5f                   	pop    edi
c001376d:	5d                   	pop    ebp
c001376e:	c3                   	ret    
c001376f:	90                   	nop

c0013770 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013770:	57                   	push   edi
c0013771:	56                   	push   esi
c0013772:	53                   	push   ebx
c0013773:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013777:	8b 06                	mov    eax,DWORD PTR [esi]
c0013779:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001377c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013780:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013784:	e8 c0 fe ff ff       	call   c0013649 <datetimeToSeconds(datetime_t)>
c0013789:	59                   	pop    ecx
c001378a:	0f b6 0d 30 bc 02 c0 	movzx  ecx,BYTE PTR ds:0xc002bc30
c0013791:	5b                   	pop    ebx
c0013792:	03 0d 34 bc 02 c0    	add    ecx,DWORD PTR ds:0xc002bc34
c0013798:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001379e:	89 cb                	mov    ebx,ecx
c00137a0:	c1 fb 1f             	sar    ebx,0x1f
c00137a3:	29 c8                	sub    eax,ecx
c00137a5:	19 da                	sbb    edx,ebx
c00137a7:	31 c9                	xor    ecx,ecx
c00137a9:	80 3d 31 bc 02 c0 00 	cmp    BYTE PTR ds:0xc002bc31,0x0
c00137b0:	74 05                	je     c00137b7 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00137b2:	b9 08 07 00 00       	mov    ecx,0x708
c00137b7:	31 db                	xor    ebx,ebx
c00137b9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00137bd:	29 c8                	sub    eax,ecx
c00137bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00137c3:	19 da                	sbb    edx,ebx
c00137c5:	89 f8                	mov    eax,edi
c00137c7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00137cb:	5b                   	pop    ebx
c00137cc:	5e                   	pop    esi
c00137cd:	5f                   	pop    edi
c00137ce:	ff e0                	jmp    eax

c00137d0 <secondsToDatetime(unsigned long long)>:
c00137d0:	55                   	push   ebp
c00137d1:	57                   	push   edi
c00137d2:	56                   	push   esi
c00137d3:	53                   	push   ebx
c00137d4:	83 ec 1c             	sub    esp,0x1c
c00137d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00137db:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00137df:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00137e3:	6a 00                	push   0x0
c00137e5:	68 80 51 01 00       	push   0x15180
c00137ea:	55                   	push   ebp
c00137eb:	57                   	push   edi
c00137ec:	e8 3b 0f 01 00       	call   c002472c <__udivdi3>
c00137f1:	83 c4 10             	add    esp,0x10
c00137f4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00137fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137fe:	6a 00                	push   0x0
c0013800:	68 80 51 01 00       	push   0x15180
c0013805:	55                   	push   ebp
c0013806:	57                   	push   edi
c0013807:	bf 10 0e 00 00       	mov    edi,0xe10
c001380c:	e8 1b 10 01 00       	call   c002482c <__umoddi3>
c0013811:	83 c4 10             	add    esp,0x10
c0013814:	99                   	cdq    
c0013815:	f7 ff                	idiv   edi
c0013817:	bf 3c 00 00 00       	mov    edi,0x3c
c001381c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001381f:	89 d0                	mov    eax,edx
c0013821:	99                   	cdq    
c0013822:	f7 ff                	idiv   edi
c0013824:	85 db                	test   ebx,ebx
c0013826:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013829:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001382c:	79 11                	jns    c001383f <secondsToDatetime(unsigned long long)+0x6f>
c001382e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013832:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013838:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001383d:	eb 07                	jmp    c0013846 <secondsToDatetime(unsigned long long)+0x76>
c001383f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013844:	89 d8                	mov    eax,ebx
c0013846:	bf b4 05 00 00       	mov    edi,0x5b4
c001384b:	99                   	cdq    
c001384c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013851:	f7 f9                	idiv   ecx
c0013853:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013858:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001385c:	31 d2                	xor    edx,edx
c001385e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013866:	01 c3                	add    ebx,eax
c0013868:	89 d8                	mov    eax,ebx
c001386a:	f7 f1                	div    ecx
c001386c:	31 d2                	xor    edx,edx
c001386e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013871:	89 d8                	mov    eax,ebx
c0013873:	f7 f7                	div    edi
c0013875:	31 d2                	xor    edx,edx
c0013877:	29 c1                	sub    ecx,eax
c0013879:	89 d8                	mov    eax,ebx
c001387b:	f7 f5                	div    ebp
c001387d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013882:	29 c1                	sub    ecx,eax
c0013884:	31 d2                	xor    edx,edx
c0013886:	89 c8                	mov    eax,ecx
c0013888:	f7 f5                	div    ebp
c001388a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001388f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013893:	31 d2                	xor    edx,edx
c0013895:	89 c8                	mov    eax,ecx
c0013897:	f7 f5                	div    ebp
c0013899:	31 d2                	xor    edx,edx
c001389b:	01 c3                	add    ebx,eax
c001389d:	89 c8                	mov    eax,ecx
c001389f:	f7 f7                	div    edi
c00138a1:	bf 99 00 00 00       	mov    edi,0x99
c00138a6:	29 c3                	sub    ebx,eax
c00138a8:	31 d2                	xor    edx,edx
c00138aa:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00138b2:	29 c3                	sub    ebx,eax
c00138b4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00138b7:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00138ba:	bb 05 00 00 00       	mov    ebx,0x5
c00138bf:	83 c1 02             	add    ecx,0x2
c00138c2:	89 c8                	mov    eax,ecx
c00138c4:	f7 f7                	div    edi
c00138c6:	31 d2                	xor    edx,edx
c00138c8:	89 c7                	mov    edi,eax
c00138ca:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00138d0:	83 c0 02             	add    eax,0x2
c00138d3:	f7 f3                	div    ebx
c00138d5:	89 eb                	mov    ebx,ebp
c00138d7:	29 c3                	sub    ebx,eax
c00138d9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00138df:	88 1e                	mov    BYTE PTR [esi],bl
c00138e1:	19 c0                	sbb    eax,eax
c00138e3:	31 d2                	xor    edx,edx
c00138e5:	83 e0 0c             	and    eax,0xc
c00138e8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00138ec:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00138f4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00138f8:	83 f9 01             	cmp    ecx,0x1
c00138fb:	0f 96 c2             	setbe  dl
c00138fe:	41                   	inc    ecx
c00138ff:	01 d0                	add    eax,edx
c0013901:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013904:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013908:	83 c4 1c             	add    esp,0x1c
c001390b:	89 f0                	mov    eax,esi
c001390d:	5b                   	pop    ebx
c001390e:	5e                   	pop    esi
c001390f:	5f                   	pop    edi
c0013910:	5d                   	pop    ebp
c0013911:	c2 04 00             	ret    0x4

c0013914 <Clock::timeInDatetimeLocal()>:
c0013914:	53                   	push   ebx
c0013915:	83 ec 14             	sub    esp,0x14
c0013918:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001391c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013920:	e8 83 fc ff ff       	call   c00135a8 <Clock::timeInSecondsLocal()>
c0013925:	83 c4 0c             	add    esp,0xc
c0013928:	52                   	push   edx
c0013929:	50                   	push   eax
c001392a:	53                   	push   ebx
c001392b:	e8 a0 fe ff ff       	call   c00137d0 <secondsToDatetime(unsigned long long)>
c0013930:	89 d8                	mov    eax,ebx
c0013932:	83 c4 14             	add    esp,0x14
c0013935:	5b                   	pop    ebx
c0013936:	c2 04 00             	ret    0x4
c0013939:	90                   	nop

c001393a <Device::hibernate()>:
c001393a:	c3                   	ret    
c001393b:	90                   	nop

c001393c <Device::wake()>:
c001393c:	c3                   	ret    
c001393d:	90                   	nop

c001393e <Device::detect()>:
c001393e:	c3                   	ret    
c001393f:	90                   	nop

c0013940 <Device::disableLegacy()>:
c0013940:	c3                   	ret    
c0013941:	90                   	nop

c0013942 <Device::powerSaving(PowerSavingLevel)>:
c0013942:	c3                   	ret    
c0013943:	90                   	nop

c0013944 <DriverlessDevice::close(int, int, void*)>:
c0013944:	31 c0                	xor    eax,eax
c0013946:	c3                   	ret    
c0013947:	90                   	nop

c0013948 <DriverlessDevice::detect()>:
c0013948:	c3                   	ret    
c0013949:	90                   	nop

c001394a <DriverlessDevice::open(int, int, void*)>:
c001394a:	83 ec 18             	sub    esp,0x18
c001394d:	68 f0 87 02 c0       	push   0xc00287f0
c0013952:	e8 8a 58 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c0013957:	83 c8 ff             	or     eax,0xffffffff
c001395a:	83 c4 1c             	add    esp,0x1c
c001395d:	c3                   	ret    

c001395e <Device::~Device()>:
c001395e:	ba 18 88 02 c0       	mov    edx,0xc0028818
c0013963:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013967:	89 10                	mov    DWORD PTR [eax],edx
c0013969:	90                   	nop
c001396a:	c3                   	ret    
c001396b:	90                   	nop

c001396c <Device::~Device()>:
c001396c:	83 ec 0c             	sub    esp,0xc
c001396f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013973:	e8 e6 ff ff ff       	call   c001395e <Device::~Device()>
c0013978:	83 c4 04             	add    esp,0x4
c001397b:	83 ec 08             	sub    esp,0x8
c001397e:	68 58 01 00 00       	push   0x158
c0013983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013987:	e8 31 ec ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c001398c:	83 c4 10             	add    esp,0x10
c001398f:	83 c4 0c             	add    esp,0xc
c0013992:	c3                   	ret    
c0013993:	90                   	nop

c0013994 <Device::findAndLoadDriver()>:
c0013994:	c3                   	ret    
c0013995:	90                   	nop

c0013996 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013996:	57                   	push   edi
c0013997:	b9 09 00 00 00       	mov    ecx,0x9
c001399c:	56                   	push   esi
c001399d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00139a1:	8d 74 24 10          	lea    esi,[esp+0x10]
c00139a5:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00139af:	81 c7 18 01 00 00    	add    edi,0x118
c00139b5:	fc                   	cld    
c00139b6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00139b8:	5e                   	pop    esi
c00139b9:	5f                   	pop    edi
c00139ba:	c3                   	ret    
c00139bb:	90                   	nop

c00139bc <Device::preOpenACPI(void*, char*, char*)>:
c00139bc:	56                   	push   esi
c00139bd:	53                   	push   ebx
c00139be:	83 ec 08             	sub    esp,0x8
c00139c1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00139c5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00139c9:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00139d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139d7:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00139dd:	6a 1e                	push   0x1e
c00139df:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00139e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00139e9:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00139ef:	50                   	push   eax
c00139f0:	e8 60 cc fe ff       	call   c0000655 <memcpy>
c00139f5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00139f9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00139fd:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013a05:	83 c4 14             	add    esp,0x14
c0013a08:	5b                   	pop    ebx
c0013a09:	5e                   	pop    esi
c0013a0a:	e9 46 cc fe ff       	jmp    c0000655 <memcpy>
c0013a0f:	90                   	nop

c0013a10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013a10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a14:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a19:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a20:	75 0b                	jne    c0013a2d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013a22:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a24:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a28:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013a2b:	eb 1e                	jmp    c0013a4b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013a2d:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0013a32:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a38:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a3e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a40:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a48:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013a4b:	ff e0                	jmp    eax
c0013a4d:	90                   	nop

c0013a4e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013a4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a52:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a57:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a5e:	75 0b                	jne    c0013a6b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013a60:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a62:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a66:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013a69:	eb 1e                	jmp    c0013a89 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013a6b:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0013a70:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a76:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a7c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a86:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013a89:	ff e0                	jmp    eax
c0013a8b:	90                   	nop

c0013a8c <Device::addChild(Device*)>:
c0013a8c:	53                   	push   ebx
c0013a8d:	83 ec 08             	sub    esp,0x8
c0013a90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a98:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013a9e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013aa4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013aa6:	85 d2                	test   edx,edx
c0013aa8:	74 04                	je     c0013aae <Device::addChild(Device*)+0x22>
c0013aaa:	89 d3                	mov    ebx,edx
c0013aac:	eb f6                	jmp    c0013aa4 <Device::addChild(Device*)+0x18>
c0013aae:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013ab1:	83 ec 0c             	sub    esp,0xc
c0013ab4:	6a 08                	push   0x8
c0013ab6:	e8 15 ba ff ff       	call   c000f4d0 <malloc>
c0013abb:	89 03                	mov    DWORD PTR [ebx],eax
c0013abd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013ac3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013aca:	83 c4 18             	add    esp,0x18
c0013acd:	5b                   	pop    ebx
c0013ace:	c3                   	ret    
c0013acf:	90                   	nop

c0013ad0 <Device::removeAllChildren()>:
c0013ad0:	56                   	push   esi
c0013ad1:	53                   	push   ebx
c0013ad2:	52                   	push   edx
c0013ad3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ad7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013add:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ae0:	74 17                	je     c0013af9 <Device::removeAllChildren()+0x29>
c0013ae2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013ae5:	85 c0                	test   eax,eax
c0013ae7:	74 0c                	je     c0013af5 <Device::removeAllChildren()+0x25>
c0013ae9:	83 ec 0c             	sub    esp,0xc
c0013aec:	8b 10                	mov    edx,DWORD PTR [eax]
c0013aee:	50                   	push   eax
c0013aef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013af2:	83 c4 10             	add    esp,0x10
c0013af5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013af7:	eb e4                	jmp    c0013add <Device::removeAllChildren()+0xd>
c0013af9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013aff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b05:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b0b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b12:	58                   	pop    eax
c0013b13:	5b                   	pop    ebx
c0013b14:	5e                   	pop    esi
c0013b15:	c3                   	ret    

c0013b16 <Device::hibernateAll()>:
c0013b16:	53                   	push   ebx
c0013b17:	83 ec 14             	sub    esp,0x14
c0013b1a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b20:	53                   	push   ebx
c0013b21:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013b24:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b2a:	83 c4 10             	add    esp,0x10
c0013b2d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b30:	74 0f                	je     c0013b41 <Device::hibernateAll()+0x2b>
c0013b32:	83 ec 0c             	sub    esp,0xc
c0013b35:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b38:	e8 d9 ff ff ff       	call   c0013b16 <Device::hibernateAll()>
c0013b3d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b3f:	eb e9                	jmp    c0013b2a <Device::hibernateAll()+0x14>
c0013b41:	83 c4 08             	add    esp,0x8
c0013b44:	5b                   	pop    ebx
c0013b45:	c3                   	ret    

c0013b46 <Device::wakeAll()>:
c0013b46:	53                   	push   ebx
c0013b47:	83 ec 14             	sub    esp,0x14
c0013b4a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b50:	53                   	push   ebx
c0013b51:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013b54:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b5a:	83 c4 10             	add    esp,0x10
c0013b5d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b60:	74 0f                	je     c0013b71 <Device::wakeAll()+0x2b>
c0013b62:	83 ec 0c             	sub    esp,0xc
c0013b65:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b68:	e8 d9 ff ff ff       	call   c0013b46 <Device::wakeAll()>
c0013b6d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b6f:	eb e9                	jmp    c0013b5a <Device::wakeAll()+0x14>
c0013b71:	83 c4 08             	add    esp,0x8
c0013b74:	5b                   	pop    ebx
c0013b75:	c3                   	ret    

c0013b76 <Device::detectAll()>:
c0013b76:	53                   	push   ebx
c0013b77:	83 ec 14             	sub    esp,0x14
c0013b7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b80:	53                   	push   ebx
c0013b81:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013b84:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b8a:	83 c4 10             	add    esp,0x10
c0013b8d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b90:	74 0f                	je     c0013ba1 <Device::detectAll()+0x2b>
c0013b92:	83 ec 0c             	sub    esp,0xc
c0013b95:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b98:	e8 d9 ff ff ff       	call   c0013b76 <Device::detectAll()>
c0013b9d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b9f:	eb e9                	jmp    c0013b8a <Device::detectAll()+0x14>
c0013ba1:	83 c4 08             	add    esp,0x8
c0013ba4:	5b                   	pop    ebx
c0013ba5:	c3                   	ret    

c0013ba6 <Device::disableLegacyAll()>:
c0013ba6:	53                   	push   ebx
c0013ba7:	83 ec 14             	sub    esp,0x14
c0013baa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bb0:	53                   	push   ebx
c0013bb1:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013bb4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bba:	83 c4 10             	add    esp,0x10
c0013bbd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bc0:	74 0f                	je     c0013bd1 <Device::disableLegacyAll()+0x2b>
c0013bc2:	83 ec 0c             	sub    esp,0xc
c0013bc5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bc8:	e8 d9 ff ff ff       	call   c0013ba6 <Device::disableLegacyAll()>
c0013bcd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bcf:	eb e9                	jmp    c0013bba <Device::disableLegacyAll()+0x14>
c0013bd1:	83 c4 08             	add    esp,0x8
c0013bd4:	5b                   	pop    ebx
c0013bd5:	c3                   	ret    

c0013bd6 <Device::loadDriversForAll()>:
c0013bd6:	53                   	push   ebx
c0013bd7:	83 ec 08             	sub    esp,0x8
c0013bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bde:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013be4:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013be6:	85 db                	test   ebx,ebx
c0013be8:	74 12                	je     c0013bfc <Device::loadDriversForAll()+0x26>
c0013bea:	83 ec 0c             	sub    esp,0xc
c0013bed:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013bf0:	e8 e1 ff ff ff       	call   c0013bd6 <Device::loadDriversForAll()>
c0013bf5:	83 c4 10             	add    esp,0x10
c0013bf8:	89 d8                	mov    eax,ebx
c0013bfa:	eb e8                	jmp    c0013be4 <Device::loadDriversForAll()+0xe>
c0013bfc:	83 c4 08             	add    esp,0x8
c0013bff:	5b                   	pop    ebx
c0013c00:	c3                   	ret    
c0013c01:	90                   	nop

c0013c02 <Device::closeAll()>:
c0013c02:	53                   	push   ebx
c0013c03:	83 ec 08             	sub    esp,0x8
c0013c06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c0c:	6a 00                	push   0x0
c0013c0e:	6a 00                	push   0x0
c0013c10:	6a 00                	push   0x0
c0013c12:	53                   	push   ebx
c0013c13:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c16:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c1c:	83 c4 10             	add    esp,0x10
c0013c1f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c22:	74 0f                	je     c0013c33 <Device::closeAll()+0x31>
c0013c24:	83 ec 0c             	sub    esp,0xc
c0013c27:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c2a:	e8 d3 ff ff ff       	call   c0013c02 <Device::closeAll()>
c0013c2f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c31:	eb e9                	jmp    c0013c1c <Device::closeAll()+0x1a>
c0013c33:	83 c4 08             	add    esp,0x8
c0013c36:	5b                   	pop    ebx
c0013c37:	c3                   	ret    

c0013c38 <Device::powerSavingAll(PowerSavingLevel)>:
c0013c38:	56                   	push   esi
c0013c39:	53                   	push   ebx
c0013c3a:	83 ec 0c             	sub    esp,0xc
c0013c3d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c41:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013c45:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c47:	56                   	push   esi
c0013c48:	53                   	push   ebx
c0013c49:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013c4c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c52:	83 c4 10             	add    esp,0x10
c0013c55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c58:	74 0f                	je     c0013c69 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013c5a:	52                   	push   edx
c0013c5b:	52                   	push   edx
c0013c5c:	56                   	push   esi
c0013c5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c60:	e8 d3 ff ff ff       	call   c0013c38 <Device::powerSavingAll(PowerSavingLevel)>
c0013c65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c67:	eb e9                	jmp    c0013c52 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013c69:	58                   	pop    eax
c0013c6a:	5b                   	pop    ebx
c0013c6b:	5e                   	pop    esi
c0013c6c:	c3                   	ret    
c0013c6d:	90                   	nop

c0013c6e <Device::setName(char const*)>:
c0013c6e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013c76:	e9 af ca fe ff       	jmp    c000072a <strcpy>
c0013c7b:	90                   	nop

c0013c7c <Device::Device(char const*)>:
c0013c7c:	83 ec 1c             	sub    esp,0x1c
c0013c7f:	ba 18 88 02 c0       	mov    edx,0xc0028818
c0013c84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c88:	89 10                	mov    DWORD PTR [eax],edx
c0013c8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c8e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013c98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c9c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013ca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013caa:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013cb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cb8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013cc2:	83 ec 08             	sub    esp,0x8
c0013cc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ccd:	e8 9c ff ff ff       	call   c0013c6e <Device::setName(char const*)>
c0013cd2:	83 c4 10             	add    esp,0x10
c0013cd5:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013cdd:	83 ec 0c             	sub    esp,0xc
c0013ce0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ce4:	e8 e7 b7 ff ff       	call   c000f4d0 <malloc>
c0013ce9:	83 c4 10             	add    esp,0x10
c0013cec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013cf2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013cf9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013cfd:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013d03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d07:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d0d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d17:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d1d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d28:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013d2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d33:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013d3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d3e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d4c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d5a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d68:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013d72:	90                   	nop
c0013d73:	83 c4 1c             	add    esp,0x1c
c0013d76:	c3                   	ret    
c0013d77:	90                   	nop

c0013d78 <Device::getName()>:
c0013d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d7c:	05 d0 00 00 00       	add    eax,0xd0
c0013d81:	c3                   	ret    

c0013d82 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013d82:	83 ec 0c             	sub    esp,0xc
c0013d85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d89:	83 ec 08             	sub    esp,0x8
c0013d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d90:	50                   	push   eax
c0013d91:	e8 e6 fe ff ff       	call   c0013c7c <Device::Device(char const*)>
c0013d96:	83 c4 10             	add    esp,0x10
c0013d99:	ba 44 88 02 c0       	mov    edx,0xc0028844
c0013d9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013da2:	89 10                	mov    DWORD PTR [eax],edx
c0013da4:	90                   	nop
c0013da5:	83 c4 0c             	add    esp,0xc
c0013da8:	c3                   	ret    
c0013da9:	90                   	nop

c0013daa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013daa:	57                   	push   edi
c0013dab:	56                   	push   esi
c0013dac:	53                   	push   ebx
c0013dad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013db1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013db5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013db9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013dbf:	75 0c                	jne    c0013dcd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013dc1:	52                   	push   edx
c0013dc2:	52                   	push   edx
c0013dc3:	53                   	push   ebx
c0013dc4:	56                   	push   esi
c0013dc5:	e8 a0 28 01 00       	call   c002666a <LinkedList<Device>::addElement(Device*)>
c0013dca:	83 c4 10             	add    esp,0x10
c0013dcd:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dd3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dd6:	74 12                	je     c0013dea <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013dd8:	50                   	push   eax
c0013dd9:	57                   	push   edi
c0013dda:	56                   	push   esi
c0013ddb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dde:	e8 c7 ff ff ff       	call   c0013daa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013de3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013de5:	83 c4 10             	add    esp,0x10
c0013de8:	eb e9                	jmp    c0013dd3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013dea:	5b                   	pop    ebx
c0013deb:	5e                   	pop    esi
c0013dec:	5f                   	pop    edi
c0013ded:	c3                   	ret    

c0013dee <getDevicesOfType(DeviceType)>:
c0013dee:	53                   	push   ebx
c0013def:	83 ec 14             	sub    esp,0x14
c0013df2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013df6:	53                   	push   ebx
c0013df7:	e8 4a 29 01 00       	call   c0026746 <LinkedList<Device>::LinkedList()>
c0013dfc:	83 c4 0c             	add    esp,0xc
c0013dff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e03:	53                   	push   ebx
c0013e04:	ff 35 c8 ba 02 c0    	push   DWORD PTR ds:0xc002bac8
c0013e0a:	e8 9b ff ff ff       	call   c0013daa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013e0f:	89 d8                	mov    eax,ebx
c0013e11:	83 c4 18             	add    esp,0x18
c0013e14:	5b                   	pop    ebx
c0013e15:	c2 04 00             	ret    0x4

c0013e18 <HardDiskController::HardDiskController(char const*)>:
c0013e18:	83 ec 0c             	sub    esp,0xc
c0013e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e1f:	83 ec 08             	sub    esp,0x8
c0013e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e26:	50                   	push   eax
c0013e27:	e8 50 fe ff ff       	call   c0013c7c <Device::Device(char const*)>
c0013e2c:	83 c4 10             	add    esp,0x10
c0013e2f:	ba 70 88 02 c0       	mov    edx,0xc0028870
c0013e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e38:	89 10                	mov    DWORD PTR [eax],edx
c0013e3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e3e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013e48:	90                   	nop
c0013e49:	83 c4 0c             	add    esp,0xc
c0013e4c:	c3                   	ret    
c0013e4d:	90                   	nop

c0013e4e <HardDiskController::~HardDiskController()>:
c0013e4e:	83 ec 0c             	sub    esp,0xc
c0013e51:	ba 70 88 02 c0       	mov    edx,0xc0028870
c0013e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5a:	89 10                	mov    DWORD PTR [eax],edx
c0013e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e60:	83 ec 0c             	sub    esp,0xc
c0013e63:	50                   	push   eax
c0013e64:	e8 f5 fa ff ff       	call   c001395e <Device::~Device()>
c0013e69:	83 c4 10             	add    esp,0x10
c0013e6c:	90                   	nop
c0013e6d:	83 c4 0c             	add    esp,0xc
c0013e70:	c3                   	ret    
c0013e71:	90                   	nop

c0013e72 <HardDiskController::~HardDiskController()>:
c0013e72:	83 ec 0c             	sub    esp,0xc
c0013e75:	83 ec 0c             	sub    esp,0xc
c0013e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e7c:	e8 cd ff ff ff       	call   c0013e4e <HardDiskController::~HardDiskController()>
c0013e81:	83 c4 10             	add    esp,0x10
c0013e84:	83 ec 08             	sub    esp,0x8
c0013e87:	68 58 01 00 00       	push   0x158
c0013e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e90:	e8 28 e7 ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0013e95:	83 c4 10             	add    esp,0x10
c0013e98:	83 c4 0c             	add    esp,0xc
c0013e9b:	c3                   	ret    

c0013e9c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013e9c:	83 ec 0c             	sub    esp,0xc
c0013e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea3:	83 ec 08             	sub    esp,0x8
c0013ea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eaa:	50                   	push   eax
c0013eab:	e8 cc fd ff ff       	call   c0013c7c <Device::Device(char const*)>
c0013eb0:	83 c4 10             	add    esp,0x10
c0013eb3:	ba 9c 88 02 c0       	mov    edx,0xc002889c
c0013eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ebc:	89 10                	mov    DWORD PTR [eax],edx
c0013ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013ec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ecd:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed8:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ee6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013eea:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013efe:	90                   	nop
c0013eff:	83 c4 0c             	add    esp,0xc
c0013f02:	c3                   	ret    
c0013f03:	90                   	nop

c0013f04 <PhysicalDisk::startCache()>:
c0013f04:	56                   	push   esi
c0013f05:	53                   	push   ebx
c0013f06:	83 ec 10             	sub    esp,0x10
c0013f09:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f0d:	6a 30                	push   0x30
c0013f0f:	e8 bc b5 ff ff       	call   c000f4d0 <malloc>
c0013f14:	89 c6                	mov    esi,eax
c0013f16:	58                   	pop    eax
c0013f17:	5a                   	pop    edx
c0013f18:	53                   	push   ebx
c0013f19:	56                   	push   esi
c0013f1a:	e8 dd 25 00 00       	call   c00164fc <VCache::VCache(PhysicalDisk*)>
c0013f1f:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013f25:	83 c4 14             	add    esp,0x14
c0013f28:	5b                   	pop    ebx
c0013f29:	5e                   	pop    esi
c0013f2a:	c3                   	ret    
c0013f2b:	90                   	nop

c0013f2c <PhysicalDisk::~PhysicalDisk()>:
c0013f2c:	83 ec 0c             	sub    esp,0xc
c0013f2f:	ba 9c 88 02 c0       	mov    edx,0xc002889c
c0013f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f38:	89 10                	mov    DWORD PTR [eax],edx
c0013f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f3e:	83 ec 0c             	sub    esp,0xc
c0013f41:	50                   	push   eax
c0013f42:	e8 17 fa ff ff       	call   c001395e <Device::~Device()>
c0013f47:	83 c4 10             	add    esp,0x10
c0013f4a:	90                   	nop
c0013f4b:	83 c4 0c             	add    esp,0xc
c0013f4e:	c3                   	ret    
c0013f4f:	90                   	nop

c0013f50 <PhysicalDisk::~PhysicalDisk()>:
c0013f50:	83 ec 0c             	sub    esp,0xc
c0013f53:	83 ec 0c             	sub    esp,0xc
c0013f56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f5a:	e8 cd ff ff ff       	call   c0013f2c <PhysicalDisk::~PhysicalDisk()>
c0013f5f:	83 c4 10             	add    esp,0x10
c0013f62:	83 ec 08             	sub    esp,0x8
c0013f65:	68 6c 01 00 00       	push   0x16c
c0013f6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f6e:	e8 4a e6 ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0013f73:	83 c4 10             	add    esp,0x10
c0013f76:	83 c4 0c             	add    esp,0xc
c0013f79:	c3                   	ret    

c0013f7a <FPU::FPU(char const*)>:
c0013f7a:	83 ec 0c             	sub    esp,0xc
c0013f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f81:	83 ec 08             	sub    esp,0x8
c0013f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f88:	50                   	push   eax
c0013f89:	e8 ee fc ff ff       	call   c0013c7c <Device::Device(char const*)>
c0013f8e:	83 c4 10             	add    esp,0x10
c0013f91:	ba dc 88 02 c0       	mov    edx,0xc00288dc
c0013f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f9a:	89 10                	mov    DWORD PTR [eax],edx
c0013f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fa0:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013faa:	90                   	nop
c0013fab:	83 c4 0c             	add    esp,0xc
c0013fae:	c3                   	ret    
c0013faf:	90                   	nop

c0013fb0 <FPU::~FPU()>:
c0013fb0:	83 ec 0c             	sub    esp,0xc
c0013fb3:	ba dc 88 02 c0       	mov    edx,0xc00288dc
c0013fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fbc:	89 10                	mov    DWORD PTR [eax],edx
c0013fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc2:	83 ec 0c             	sub    esp,0xc
c0013fc5:	50                   	push   eax
c0013fc6:	e8 93 f9 ff ff       	call   c001395e <Device::~Device()>
c0013fcb:	83 c4 10             	add    esp,0x10
c0013fce:	90                   	nop
c0013fcf:	83 c4 0c             	add    esp,0xc
c0013fd2:	c3                   	ret    
c0013fd3:	90                   	nop

c0013fd4 <FPU::~FPU()>:
c0013fd4:	83 ec 0c             	sub    esp,0xc
c0013fd7:	83 ec 0c             	sub    esp,0xc
c0013fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fde:	e8 cd ff ff ff       	call   c0013fb0 <FPU::~FPU()>
c0013fe3:	83 c4 10             	add    esp,0x10
c0013fe6:	83 ec 08             	sub    esp,0x8
c0013fe9:	68 58 01 00 00       	push   0x158
c0013fee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ff2:	e8 c6 e5 ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0013ff7:	83 c4 10             	add    esp,0x10
c0013ffa:	83 c4 0c             	add    esp,0xc
c0013ffd:	c3                   	ret    

c0013ffe <setupFPU()>:
c0013ffe:	53                   	push   ebx
c0013fff:	83 ec 08             	sub    esp,0x8
c0014002:	8b 15 c8 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002bac8
c0014008:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001400f:	74 19                	je     c001402a <setupFPU()+0x2c>
c0014011:	83 ec 0c             	sub    esp,0xc
c0014014:	68 58 01 00 00       	push   0x158
c0014019:	e8 b2 b4 ff ff       	call   c000f4d0 <malloc>
c001401e:	89 c3                	mov    ebx,eax
c0014020:	89 04 24             	mov    DWORD PTR [esp],eax
c0014023:	e8 8c f2 00 00       	call   c00232b4 <AVX::AVX()>
c0014028:	eb 5b                	jmp    c0014085 <setupFPU()+0x87>
c001402a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014030:	84 c0                	test   al,al
c0014032:	79 19                	jns    c001404d <setupFPU()+0x4f>
c0014034:	83 ec 0c             	sub    esp,0xc
c0014037:	68 58 01 00 00       	push   0x158
c001403c:	e8 8f b4 ff ff       	call   c000f4d0 <malloc>
c0014041:	89 c3                	mov    ebx,eax
c0014043:	89 04 24             	mov    DWORD PTR [esp],eax
c0014046:	e8 8f f3 00 00       	call   c00233da <SSE::SSE()>
c001404b:	eb 38                	jmp    c0014085 <setupFPU()+0x87>
c001404d:	a8 20                	test   al,0x20
c001404f:	74 19                	je     c001406a <setupFPU()+0x6c>
c0014051:	83 ec 0c             	sub    esp,0xc
c0014054:	68 58 01 00 00       	push   0x158
c0014059:	e8 72 b4 ff ff       	call   c000f4d0 <malloc>
c001405e:	89 c3                	mov    ebx,eax
c0014060:	89 04 24             	mov    DWORD PTR [esp],eax
c0014063:	e8 dc f2 00 00       	call   c0023344 <MMX::MMX()>
c0014068:	eb 1b                	jmp    c0014085 <setupFPU()+0x87>
c001406a:	a8 10                	test   al,0x10
c001406c:	74 1c                	je     c001408a <setupFPU()+0x8c>
c001406e:	83 ec 0c             	sub    esp,0xc
c0014071:	68 58 01 00 00       	push   0x158
c0014076:	e8 55 b4 ff ff       	call   c000f4d0 <malloc>
c001407b:	89 c3                	mov    ebx,eax
c001407d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014080:	e8 e3 f3 00 00       	call   c0023468 <x87::x87()>
c0014085:	83 c4 10             	add    esp,0x10
c0014088:	eb 24                	jmp    c00140ae <setupFPU()+0xb0>
c001408a:	83 e0 ef             	and    eax,0xffffffef
c001408d:	83 ec 0c             	sub    esp,0xc
c0014090:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014096:	68 c8 88 02 c0       	push   0xc00288c8
c001409b:	e8 fd e5 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00140a0:	0f 20 c0             	mov    eax,cr0
c00140a3:	83 c8 04             	or     eax,0x4
c00140a6:	0f 22 c0             	mov    cr0,eax
c00140a9:	31 db                	xor    ebx,ebx
c00140ab:	83 c4 10             	add    esp,0x10
c00140ae:	89 d8                	mov    eax,ebx
c00140b0:	83 c4 08             	add    esp,0x8
c00140b3:	5b                   	pop    ebx
c00140b4:	c3                   	ret    
c00140b5:	90                   	nop

c00140b6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00140b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00140be:	c1 e0 04             	shl    eax,0x4
c00140c1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00140c5:	8d 50 10             	lea    edx,[eax+0x10]
c00140c8:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00140ce:	74 08                	je     c00140d8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00140d0:	83 c0 04             	add    eax,0x4
c00140d3:	39 d0                	cmp    eax,edx
c00140d5:	75 f1                	jne    c00140c8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00140d7:	c3                   	ret    
c00140d8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00140e2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00140ec:	eb e2                	jmp    c00140d0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00140ee <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00140ee:	57                   	push   edi
c00140ef:	31 c0                	xor    eax,eax
c00140f1:	56                   	push   esi
c00140f2:	53                   	push   ebx
c00140f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00140f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140fb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00140ff:	89 da                	mov    edx,ebx
c0014101:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014105:	c1 e2 04             	shl    edx,0x4
c0014108:	01 ca                	add    edx,ecx
c001410a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014112:	74 16                	je     c001412a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014114:	40                   	inc    eax
c0014115:	83 f8 04             	cmp    eax,0x4
c0014118:	75 f0                	jne    c001410a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001411a:	c7 44 24 10 0c 89 02 c0 	mov    DWORD PTR [esp+0x10],0xc002890c
c0014122:	5b                   	pop    ebx
c0014123:	5e                   	pop    esi
c0014124:	5f                   	pop    edi
c0014125:	e9 b7 50 00 00       	jmp    c00191e1 <Krnl::panic(char const*)>
c001412a:	8d 04 98             	lea    eax,[eax+ebx*4]
c001412d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014130:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014136:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001413c:	5b                   	pop    ebx
c001413d:	5e                   	pop    esi
c001413e:	5f                   	pop    edi
c001413f:	c3                   	ret    

c0014140 <doubleFault(regs*, void*)>:
c0014140:	55                   	push   ebp
c0014141:	89 e5                	mov    ebp,esp
c0014143:	83 ec 08             	sub    esp,0x8
c0014146:	83 ec 0c             	sub    esp,0xc
c0014149:	68 47 89 02 c0       	push   0xc0028947
c001414e:	e8 8e 50 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c0014153:	83 c4 10             	add    esp,0x10
c0014156:	90                   	nop
c0014157:	c9                   	leave  
c0014158:	c3                   	ret    
c0014159:	90                   	nop

c001415a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001415a:	56                   	push   esi
c001415b:	53                   	push   ebx
c001415c:	50                   	push   eax
c001415d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014161:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014165:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001416a:	75 35                	jne    c00141a1 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001416c:	8d 43 20             	lea    eax,[ebx+0x20]
c001416f:	31 d2                	xor    edx,edx
c0014171:	89 c1                	mov    ecx,eax
c0014173:	c1 e1 04             	shl    ecx,0x4
c0014176:	01 f1                	add    ecx,esi
c0014178:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014180:	74 3e                	je     c00141c0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014182:	42                   	inc    edx
c0014183:	83 fa 04             	cmp    edx,0x4
c0014186:	75 f0                	jne    c0014178 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014188:	83 ec 0c             	sub    esp,0xc
c001418b:	68 8c 89 02 c0       	push   0xc002898c
c0014190:	e8 4c 50 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c0014195:	83 c4 10             	add    esp,0x10
c0014198:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001419d:	5a                   	pop    edx
c001419e:	5b                   	pop    ebx
c001419f:	5e                   	pop    esi
c00141a0:	c3                   	ret    
c00141a1:	83 ec 0c             	sub    esp,0xc
c00141a4:	56                   	push   esi
c00141a5:	e8 ce fb ff ff       	call   c0013d78 <Device::getName()>
c00141aa:	83 c4 10             	add    esp,0x10
c00141ad:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00141b0:	75 ba                	jne    c001416c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141b2:	83 fb 0f             	cmp    ebx,0xf
c00141b5:	7f 29                	jg     c00141e0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00141b7:	0f b6 9b a0 ad 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd5260]
c00141be:	eb ac                	jmp    c001416c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141c0:	8d 04 82             	lea    eax,[edx+eax*4]
c00141c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141c7:	8d 04 86             	lea    eax,[esi+eax*4]
c00141ca:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00141d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141d4:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00141da:	89 d8                	mov    eax,ebx
c00141dc:	5a                   	pop    edx
c00141dd:	5b                   	pop    ebx
c00141de:	5e                   	pop    esi
c00141df:	c3                   	ret    
c00141e0:	83 ec 0c             	sub    esp,0xc
c00141e3:	68 54 89 02 c0       	push   0xc0028954
c00141e8:	e8 f4 4f 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c00141ed:	83 c4 10             	add    esp,0x10
c00141f0:	e9 77 ff ff ff       	jmp    c001416c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141f5:	90                   	nop

c00141f6 <InterruptController::clearAllHandlers(int, bool)>:
c00141f6:	56                   	push   esi
c00141f7:	53                   	push   ebx
c00141f8:	52                   	push   edx
c00141f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00141fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014201:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014206:	75 61                	jne    c0014269 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014208:	8d 46 20             	lea    eax,[esi+0x20]
c001420b:	c1 e6 04             	shl    esi,0x4
c001420e:	c1 e0 04             	shl    eax,0x4
c0014211:	01 de                	add    esi,ebx
c0014213:	01 d8                	add    eax,ebx
c0014215:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c001421f:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014229:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014233:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001423d:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014247:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014251:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001425b:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014265:	58                   	pop    eax
c0014266:	5b                   	pop    ebx
c0014267:	5e                   	pop    esi
c0014268:	c3                   	ret    
c0014269:	83 ec 0c             	sub    esp,0xc
c001426c:	53                   	push   ebx
c001426d:	e8 06 fb ff ff       	call   c0013d78 <Device::getName()>
c0014272:	83 c4 10             	add    esp,0x10
c0014275:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014278:	75 8e                	jne    c0014208 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001427a:	83 fe 0f             	cmp    esi,0xf
c001427d:	7f 09                	jg     c0014288 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001427f:	0f b6 b6 a0 ad 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd5260]
c0014286:	eb 80                	jmp    c0014208 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014288:	83 ec 0c             	sub    esp,0xc
c001428b:	68 c8 89 02 c0       	push   0xc00289c8
c0014290:	e8 4c 4f 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c0014295:	83 c4 10             	add    esp,0x10
c0014298:	e9 6b ff ff ff       	jmp    c0014208 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001429d:	90                   	nop

c001429e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001429e:	56                   	push   esi
c001429f:	53                   	push   ebx
c00142a0:	52                   	push   edx
c00142a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142a5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142a9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00142ae:	75 3a                	jne    c00142ea <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00142b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142b4:	8d 50 20             	lea    edx,[eax+0x20]
c00142b7:	c1 e2 04             	shl    edx,0x4
c00142ba:	8d 04 16             	lea    eax,[esi+edx*1]
c00142bd:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00142c1:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00142c7:	74 0b                	je     c00142d4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00142c9:	83 c0 04             	add    eax,0x4
c00142cc:	39 d0                	cmp    eax,edx
c00142ce:	75 f1                	jne    c00142c1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00142d0:	58                   	pop    eax
c00142d1:	5b                   	pop    ebx
c00142d2:	5e                   	pop    esi
c00142d3:	c3                   	ret    
c00142d4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00142de:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00142e8:	eb df                	jmp    c00142c9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00142ea:	83 ec 0c             	sub    esp,0xc
c00142ed:	56                   	push   esi
c00142ee:	e8 85 fa ff ff       	call   c0013d78 <Device::getName()>
c00142f3:	83 c4 10             	add    esp,0x10
c00142f6:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00142f9:	75 b5                	jne    c00142b0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142fb:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014300:	7f 11                	jg     c0014313 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014302:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014306:	0f b6 80 a0 ad 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd5260]
c001430d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014311:	eb 9d                	jmp    c00142b0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014313:	83 ec 0c             	sub    esp,0xc
c0014316:	68 c8 89 02 c0       	push   0xc00289c8
c001431b:	e8 c1 4e 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c0014320:	83 c4 10             	add    esp,0x10
c0014323:	eb 8b                	jmp    c00142b0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014325 <nmiHandler(regs*, void*)>:
c0014325:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c001432a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001432e:	e9 e9 a8 ff ff       	jmp    c000ec1c <Computer::handleNMI()>

c0014333 <int_handler>:
c0014333:	55                   	push   ebp
c0014334:	57                   	push   edi
c0014335:	56                   	push   esi
c0014336:	53                   	push   ebx
c0014337:	83 ec 0c             	sub    esp,0xc
c001433a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001433e:	80 3d d8 c5 02 c0 00 	cmp    BYTE PTR ds:0xc002c5d8,0x0
c0014345:	74 0b                	je     c0014352 <int_handler+0x1f>
c0014347:	fa                   	cli    
c0014348:	f4                   	hlt    
c0014349:	80 3d d8 c5 02 c0 00 	cmp    BYTE PTR ds:0xc002c5d8,0x0
c0014350:	75 f5                	jne    c0014347 <int_handler+0x14>
c0014352:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0014357:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001435a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014360:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014366:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014369:	83 f8 17             	cmp    eax,0x17
c001436c:	77 13                	ja     c0014381 <int_handler+0x4e>
c001436e:	83 ec 08             	sub    esp,0x8
c0014371:	8b 17                	mov    edx,DWORD PTR [edi]
c0014373:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014376:	0f b6 c0             	movzx  eax,al
c0014379:	50                   	push   eax
c001437a:	57                   	push   edi
c001437b:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001437e:	83 c4 10             	add    esp,0x10
c0014381:	83 c3 15             	add    ebx,0x15
c0014384:	c1 e3 04             	shl    ebx,0x4
c0014387:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001438b:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014392:	31 db                	xor    ebx,ebx
c0014394:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014398:	85 c0                	test   eax,eax
c001439a:	74 13                	je     c00143af <int_handler+0x7c>
c001439c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001439f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00143a3:	74 1c                	je     c00143c1 <int_handler+0x8e>
c00143a5:	83 ec 08             	sub    esp,0x8
c00143a8:	52                   	push   edx
c00143a9:	56                   	push   esi
c00143aa:	ff d0                	call   eax
c00143ac:	83 c4 10             	add    esp,0x10
c00143af:	43                   	inc    ebx
c00143b0:	83 fb 04             	cmp    ebx,0x4
c00143b3:	75 df                	jne    c0014394 <int_handler+0x61>
c00143b5:	83 c4 0c             	add    esp,0xc
c00143b8:	31 c0                	xor    eax,eax
c00143ba:	5b                   	pop    ebx
c00143bb:	31 d2                	xor    edx,edx
c00143bd:	5e                   	pop    esi
c00143be:	5f                   	pop    edi
c00143bf:	5d                   	pop    ebp
c00143c0:	c3                   	ret    
c00143c1:	83 ec 08             	sub    esp,0x8
c00143c4:	52                   	push   edx
c00143c5:	56                   	push   esi
c00143c6:	ff d0                	call   eax
c00143c8:	83 c4 10             	add    esp,0x10
c00143cb:	83 c4 0c             	add    esp,0xc
c00143ce:	5b                   	pop    ebx
c00143cf:	5e                   	pop    esi
c00143d0:	5f                   	pop    edi
c00143d1:	5d                   	pop    ebp
c00143d2:	c3                   	ret    
c00143d3:	90                   	nop

c00143d4 <InterruptController::InterruptController(char const*)>:
c00143d4:	83 ec 1c             	sub    esp,0x1c
c00143d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143db:	83 ec 08             	sub    esp,0x8
c00143de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00143e2:	50                   	push   eax
c00143e3:	e8 94 f8 ff ff       	call   c0013c7c <Device::Device(char const*)>
c00143e8:	83 c4 10             	add    esp,0x10
c00143eb:	ba fc 8b 02 c0       	mov    edx,0xc0028bfc
c00143f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143f4:	89 10                	mov    DWORD PTR [eax],edx
c00143f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143fa:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014404:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001440c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014414:	7f 5e                	jg     c0014474 <InterruptController::InterruptController(char const*)+0xa0>
c0014416:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001441e:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014423:	7f 49                	jg     c001446e <InterruptController::InterruptController(char const*)+0x9a>
c0014425:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014429:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001442d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014434:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014438:	01 ca                	add    edx,ecx
c001443a:	83 c2 54             	add    edx,0x54
c001443d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014445:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014449:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001444d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014454:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014458:	01 ca                	add    edx,ecx
c001445a:	81 c2 54 04 00 00    	add    edx,0x454
c0014460:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014468:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001446c:	eb b0                	jmp    c001441e <InterruptController::InterruptController(char const*)+0x4a>
c001446e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014472:	eb 98                	jmp    c001440c <InterruptController::InterruptController(char const*)+0x38>
c0014474:	90                   	nop
c0014475:	83 c4 1c             	add    esp,0x1c
c0014478:	c3                   	ret    
c0014479:	90                   	nop

c001447a <InterruptController::~InterruptController()>:
c001447a:	83 ec 0c             	sub    esp,0xc
c001447d:	ba fc 8b 02 c0       	mov    edx,0xc0028bfc
c0014482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014486:	89 10                	mov    DWORD PTR [eax],edx
c0014488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001448c:	83 ec 0c             	sub    esp,0xc
c001448f:	50                   	push   eax
c0014490:	e8 c9 f4 ff ff       	call   c001395e <Device::~Device()>
c0014495:	83 c4 10             	add    esp,0x10
c0014498:	90                   	nop
c0014499:	83 c4 0c             	add    esp,0xc
c001449c:	c3                   	ret    
c001449d:	90                   	nop

c001449e <InterruptController::~InterruptController()>:
c001449e:	83 ec 0c             	sub    esp,0xc
c00144a1:	83 ec 0c             	sub    esp,0xc
c00144a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144a8:	e8 cd ff ff ff       	call   c001447a <InterruptController::~InterruptController()>
c00144ad:	83 c4 10             	add    esp,0x10
c00144b0:	83 ec 08             	sub    esp,0x8
c00144b3:	68 58 21 00 00       	push   0x2158
c00144b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144bc:	e8 fc e0 ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c00144c1:	83 c4 10             	add    esp,0x10
c00144c4:	83 c4 0c             	add    esp,0xc
c00144c7:	c3                   	ret    

c00144c8 <displayDebugInfo(regs*)>:
c00144c8:	55                   	push   ebp
c00144c9:	57                   	push   edi
c00144ca:	56                   	push   esi
c00144cb:	53                   	push   ebx
c00144cc:	83 ec 24             	sub    esp,0x24
c00144cf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00144d3:	0f 20 c2             	mov    edx,cr0
c00144d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00144da:	0f 20 d7             	mov    edi,cr2
c00144dd:	0f 20 de             	mov    esi,cr3
c00144e0:	0f 20 e5             	mov    ebp,cr4
c00144e3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00144e6:	68 02 8a 02 c0       	push   0xc0028a02
c00144eb:	e8 ad e1 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00144f0:	58                   	pop    eax
c00144f1:	5a                   	pop    edx
c00144f2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00144f5:	68 0d 8a 02 c0       	push   0xc0028a0d
c00144fa:	e8 9e e1 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00144ff:	59                   	pop    ecx
c0014500:	58                   	pop    eax
c0014501:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014504:	68 18 8a 02 c0       	push   0xc0028a18
c0014509:	e8 8f e1 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001450e:	58                   	pop    eax
c001450f:	5a                   	pop    edx
c0014510:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014513:	68 23 8a 02 c0       	push   0xc0028a23
c0014518:	e8 80 e1 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001451d:	59                   	pop    ecx
c001451e:	58                   	pop    eax
c001451f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014522:	68 2e 8a 02 c0       	push   0xc0028a2e
c0014527:	e8 71 e1 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001452c:	58                   	pop    eax
c001452d:	5a                   	pop    edx
c001452e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014531:	68 39 8a 02 c0       	push   0xc0028a39
c0014536:	e8 62 e1 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001453b:	59                   	pop    ecx
c001453c:	58                   	pop    eax
c001453d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014540:	68 44 8a 02 c0       	push   0xc0028a44
c0014545:	e8 53 e1 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001454a:	58                   	pop    eax
c001454b:	5a                   	pop    edx
c001454c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001454f:	68 4f 8a 02 c0       	push   0xc0028a4f
c0014554:	e8 44 e1 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0014559:	59                   	pop    ecx
c001455a:	58                   	pop    eax
c001455b:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001455e:	68 5a 8a 02 c0       	push   0xc0028a5a
c0014563:	e8 35 e1 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0014568:	58                   	pop    eax
c0014569:	5a                   	pop    edx
c001456a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001456d:	68 69 8a 02 c0       	push   0xc0028a69
c0014572:	e8 26 e1 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0014577:	59                   	pop    ecx
c0014578:	58                   	pop    eax
c0014579:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001457c:	68 74 8a 02 c0       	push   0xc0028a74
c0014581:	e8 17 e1 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0014586:	58                   	pop    eax
c0014587:	5a                   	pop    edx
c0014588:	57                   	push   edi
c0014589:	68 7f 8a 02 c0       	push   0xc0028a7f
c001458e:	e8 0a e1 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0014593:	59                   	pop    ecx
c0014594:	58                   	pop    eax
c0014595:	56                   	push   esi
c0014596:	68 8a 8a 02 c0       	push   0xc0028a8a
c001459b:	e8 fd e0 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00145a0:	58                   	pop    eax
c00145a1:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00145a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ac:	e8 ae c2 ff ff       	call   c001085f <setActiveTerminal(VgaText*)>
c00145b1:	58                   	pop    eax
c00145b2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00145b5:	5a                   	pop    edx
c00145b6:	c1 e0 05             	shl    eax,0x5
c00145b9:	05 00 ab 02 c0       	add    eax,0xc002ab00
c00145be:	50                   	push   eax
c00145bf:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00145c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ca:	e8 af c6 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c00145cf:	59                   	pop    ecx
c00145d0:	58                   	pop    eax
c00145d1:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00145d6:	68 95 8a 02 c0       	push   0xc0028a95
c00145db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145e1:	e8 98 c6 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c00145e6:	58                   	pop    eax
c00145e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145ec:	5a                   	pop    edx
c00145ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00145f0:	83 c0 0c             	add    eax,0xc
c00145f3:	50                   	push   eax
c00145f4:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00145f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ff:	e8 7a c6 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c0014604:	59                   	pop    ecx
c0014605:	58                   	pop    eax
c0014606:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c001460b:	68 9e 8a 02 c0       	push   0xc0028a9e
c0014610:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014616:	e8 63 c6 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c001461b:	58                   	pop    eax
c001461c:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0014621:	5a                   	pop    edx
c0014622:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014625:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001462b:	e8 74 c6 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c0014630:	59                   	pop    ecx
c0014631:	58                   	pop    eax
c0014632:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0014637:	68 a6 8a 02 c0       	push   0xc0028aa6
c001463c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014642:	e8 37 c6 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c0014647:	58                   	pop    eax
c0014648:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c001464d:	5a                   	pop    edx
c001464e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014651:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014657:	e8 48 c6 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c001465c:	59                   	pop    ecx
c001465d:	58                   	pop    eax
c001465e:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0014663:	68 ae 8a 02 c0       	push   0xc0028aae
c0014668:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001466e:	e8 0b c6 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c0014673:	58                   	pop    eax
c0014674:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0014679:	5a                   	pop    edx
c001467a:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001467d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014683:	e8 1c c6 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c0014688:	59                   	pop    ecx
c0014689:	58                   	pop    eax
c001468a:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c001468f:	68 b6 8a 02 c0       	push   0xc0028ab6
c0014694:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001469a:	e8 df c5 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c001469f:	58                   	pop    eax
c00146a0:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00146a5:	5a                   	pop    edx
c00146a6:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00146a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146af:	e8 f0 c5 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c00146b4:	59                   	pop    ecx
c00146b5:	58                   	pop    eax
c00146b6:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00146bb:	68 be 8a 02 c0       	push   0xc0028abe
c00146c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146c6:	e8 b3 c5 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c00146cb:	58                   	pop    eax
c00146cc:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00146d1:	5a                   	pop    edx
c00146d2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00146d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146db:	e8 c4 c5 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c00146e0:	59                   	pop    ecx
c00146e1:	58                   	pop    eax
c00146e2:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00146e7:	68 c6 8a 02 c0       	push   0xc0028ac6
c00146ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f2:	e8 87 c5 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c00146f7:	58                   	pop    eax
c00146f8:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00146fd:	5a                   	pop    edx
c00146fe:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014701:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014707:	e8 98 c5 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c001470c:	59                   	pop    ecx
c001470d:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0014712:	5b                   	pop    ebx
c0014713:	68 ce 8a 02 c0       	push   0xc0028ace
c0014718:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001471e:	e8 5b c5 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c0014723:	58                   	pop    eax
c0014724:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0014729:	5a                   	pop    edx
c001472a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001472e:	52                   	push   edx
c001472f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014735:	e8 6a c5 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c001473a:	59                   	pop    ecx
c001473b:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0014740:	5b                   	pop    ebx
c0014741:	68 d7 8a 02 c0       	push   0xc0028ad7
c0014746:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001474c:	e8 2d c5 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c0014751:	58                   	pop    eax
c0014752:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0014757:	5a                   	pop    edx
c0014758:	57                   	push   edi
c0014759:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001475f:	e8 40 c5 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c0014764:	59                   	pop    ecx
c0014765:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c001476a:	5b                   	pop    ebx
c001476b:	68 df 8a 02 c0       	push   0xc0028adf
c0014770:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014776:	e8 03 c5 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c001477b:	5f                   	pop    edi
c001477c:	58                   	pop    eax
c001477d:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0014782:	56                   	push   esi
c0014783:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014789:	e8 16 c5 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c001478e:	58                   	pop    eax
c001478f:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0014794:	5a                   	pop    edx
c0014795:	68 e7 8a 02 c0       	push   0xc0028ae7
c001479a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a0:	e8 d9 c4 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c00147a5:	59                   	pop    ecx
c00147a6:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00147ab:	5b                   	pop    ebx
c00147ac:	55                   	push   ebp
c00147ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b3:	e8 ec c4 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c00147b8:	5e                   	pop    esi
c00147b9:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00147be:	5f                   	pop    edi
c00147bf:	68 ef 8a 02 c0       	push   0xc0028aef
c00147c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ca:	e8 af c4 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c00147cf:	0f 21 c0             	mov    eax,db0
c00147d2:	5d                   	pop    ebp
c00147d3:	5a                   	pop    edx
c00147d4:	50                   	push   eax
c00147d5:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00147da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e0:	e8 bf c4 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c00147e5:	59                   	pop    ecx
c00147e6:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00147eb:	5b                   	pop    ebx
c00147ec:	68 f8 8a 02 c0       	push   0xc0028af8
c00147f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147f7:	e8 82 c4 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c00147fc:	0f 21 c8             	mov    eax,db1
c00147ff:	5e                   	pop    esi
c0014800:	5f                   	pop    edi
c0014801:	50                   	push   eax
c0014802:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0014807:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001480d:	e8 92 c4 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c0014812:	5d                   	pop    ebp
c0014813:	58                   	pop    eax
c0014814:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0014819:	68 00 8b 02 c0       	push   0xc0028b00
c001481e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014824:	e8 55 c4 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c0014829:	0f 21 d0             	mov    eax,db2
c001482c:	5a                   	pop    edx
c001482d:	59                   	pop    ecx
c001482e:	50                   	push   eax
c001482f:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0014834:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483a:	e8 65 c4 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c001483f:	5b                   	pop    ebx
c0014840:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0014845:	5e                   	pop    esi
c0014846:	68 08 8b 02 c0       	push   0xc0028b08
c001484b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014851:	e8 28 c4 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c0014856:	0f 21 d8             	mov    eax,db3
c0014859:	5f                   	pop    edi
c001485a:	5d                   	pop    ebp
c001485b:	50                   	push   eax
c001485c:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0014861:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014867:	e8 38 c4 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c001486c:	58                   	pop    eax
c001486d:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0014872:	5a                   	pop    edx
c0014873:	68 10 8b 02 c0       	push   0xc0028b10
c0014878:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001487e:	e8 fb c3 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c0014883:	0f 21 f0             	mov    eax,db6
c0014886:	59                   	pop    ecx
c0014887:	5b                   	pop    ebx
c0014888:	50                   	push   eax
c0014889:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c001488e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014894:	e8 0b c4 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c0014899:	5e                   	pop    esi
c001489a:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c001489f:	5f                   	pop    edi
c00148a0:	68 18 8b 02 c0       	push   0xc0028b18
c00148a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ab:	e8 ce c3 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c00148b0:	0f 21 f8             	mov    eax,db7
c00148b3:	5d                   	pop    ebp
c00148b4:	5a                   	pop    edx
c00148b5:	50                   	push   eax
c00148b6:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00148bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c1:	e8 de c3 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c00148c6:	fa                   	cli    
c00148c7:	f4                   	hlt    
c00148c8:	83 c4 10             	add    esp,0x10
c00148cb:	eb fe                	jmp    c00148cb <displayDebugInfo(regs*)+0x403>

c00148cd <x87EmulHandler(regs*, void*)>:
c00148cd:	53                   	push   ebx
c00148ce:	83 ec 14             	sub    esp,0x14
c00148d1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148d5:	53                   	push   ebx
c00148d6:	e8 5c 94 00 00       	call   c001dd37 <Vm::x87Handler(regs*)>
c00148db:	83 c4 10             	add    esp,0x10
c00148de:	84 c0                	test   al,al
c00148e0:	74 05                	je     c00148e7 <x87EmulHandler(regs*, void*)+0x1a>
c00148e2:	83 c4 08             	add    esp,0x8
c00148e5:	5b                   	pop    ebx
c00148e6:	c3                   	ret    
c00148e7:	83 ec 0c             	sub    esp,0xc
c00148ea:	68 20 8b 02 c0       	push   0xc0028b20
c00148ef:	e8 a9 dd ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00148f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148f7:	e8 cc fb ff ff       	call   c00144c8 <displayDebugInfo(regs*)>

c00148fc <gpFault(regs*, void*)>:
c00148fc:	53                   	push   ebx
c00148fd:	83 ec 14             	sub    esp,0x14
c0014900:	c7 05 50 bc 02 c0 11 d2 01 c0 	mov    DWORD PTR ds:0xc002bc50,0xc001d211
c001490a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001490e:	53                   	push   ebx
c001490f:	e8 fd 88 00 00       	call   c001d211 <Vm::faultHandler(regs*)>
c0014914:	83 c4 10             	add    esp,0x10
c0014917:	84 c0                	test   al,al
c0014919:	74 05                	je     c0014920 <gpFault(regs*, void*)+0x24>
c001491b:	83 c4 08             	add    esp,0x8
c001491e:	5b                   	pop    ebx
c001491f:	c3                   	ret    
c0014920:	83 ec 0c             	sub    esp,0xc
c0014923:	68 36 8b 02 c0       	push   0xc0028b36
c0014928:	e8 70 dd ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001492d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014930:	e8 93 fb ff ff       	call   c00144c8 <displayDebugInfo(regs*)>

c0014935 <pgFault(regs*, void*)>:
c0014935:	83 ec 18             	sub    esp,0x18
c0014938:	68 51 8b 02 c0       	push   0xc0028b51
c001493d:	e8 5b dd ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0014942:	58                   	pop    eax
c0014943:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014947:	e8 7c fb ff ff       	call   c00144c8 <displayDebugInfo(regs*)>

c001494c <otherISRHandler(regs*, void*)>:
c001494c:	53                   	push   ebx
c001494d:	83 ec 0c             	sub    esp,0xc
c0014950:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014954:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014957:	50                   	push   eax
c0014958:	50                   	push   eax
c0014959:	68 5e 8b 02 c0       	push   0xc0028b5e
c001495e:	e8 3a dd ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0014963:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014966:	e8 5d fb ff ff       	call   c00144c8 <displayDebugInfo(regs*)>

c001496b <opcodeFault(regs*, void*)>:
c001496b:	55                   	push   ebp
c001496c:	89 e5                	mov    ebp,esp
c001496e:	56                   	push   esi
c001496f:	53                   	push   ebx
c0014970:	83 ec 40             	sub    esp,0x40
c0014973:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0014978:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001497e:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014984:	84 c0                	test   al,al
c0014986:	74 24                	je     c00149ac <opcodeFault(regs*, void*)+0x41>
c0014988:	83 ec 0c             	sub    esp,0xc
c001498b:	68 7c 8b 02 c0       	push   0xc0028b7c
c0014990:	e8 08 dd ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0014995:	83 c4 10             	add    esp,0x10
c0014998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001499b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001499e:	8d 50 19             	lea    edx,[eax+0x19]
c00149a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149a4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149a7:	e9 77 05 00 00       	jmp    c0014f23 <opcodeFault(regs*, void*)+0x5b8>
c00149ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149b2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00149b5:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00149b9:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00149bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149c3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00149c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149c9:	8a 00                	mov    al,BYTE PTR [eax]
c00149cb:	3c f0                	cmp    al,0xf0
c00149cd:	75 17                	jne    c00149e6 <opcodeFault(regs*, void*)+0x7b>
c00149cf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149d8:	8d 50 01             	lea    edx,[eax+0x1]
c00149db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149de:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149e1:	e9 da 00 00 00       	jmp    c0014ac0 <opcodeFault(regs*, void*)+0x155>
c00149e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149e9:	8a 00                	mov    al,BYTE PTR [eax]
c00149eb:	3c f2                	cmp    al,0xf2
c00149ed:	74 09                	je     c00149f8 <opcodeFault(regs*, void*)+0x8d>
c00149ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149f2:	8a 00                	mov    al,BYTE PTR [eax]
c00149f4:	3c f3                	cmp    al,0xf3
c00149f6:	75 1b                	jne    c0014a13 <opcodeFault(regs*, void*)+0xa8>
c00149f8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149fc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a02:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a05:	8d 50 01             	lea    edx,[eax+0x1]
c0014a08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a0b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a0e:	e9 ad 00 00 00       	jmp    c0014ac0 <opcodeFault(regs*, void*)+0x155>
c0014a13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a16:	8a 00                	mov    al,BYTE PTR [eax]
c0014a18:	3c 66                	cmp    al,0x66
c0014a1a:	75 1f                	jne    c0014a3b <opcodeFault(regs*, void*)+0xd0>
c0014a1c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a20:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014a24:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a2a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a2d:	8d 50 01             	lea    edx,[eax+0x1]
c0014a30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a33:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a36:	e9 85 00 00 00       	jmp    c0014ac0 <opcodeFault(regs*, void*)+0x155>
c0014a3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a3e:	8a 00                	mov    al,BYTE PTR [eax]
c0014a40:	3c 67                	cmp    al,0x67
c0014a42:	75 18                	jne    c0014a5c <opcodeFault(regs*, void*)+0xf1>
c0014a44:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a48:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a4e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a51:	8d 50 01             	lea    edx,[eax+0x1]
c0014a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a57:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a5a:	eb 64                	jmp    c0014ac0 <opcodeFault(regs*, void*)+0x155>
c0014a5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a5f:	8a 00                	mov    al,BYTE PTR [eax]
c0014a61:	3c 2e                	cmp    al,0x2e
c0014a63:	74 09                	je     c0014a6e <opcodeFault(regs*, void*)+0x103>
c0014a65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a68:	8a 00                	mov    al,BYTE PTR [eax]
c0014a6a:	3c 3e                	cmp    al,0x3e
c0014a6c:	75 18                	jne    c0014a86 <opcodeFault(regs*, void*)+0x11b>
c0014a6e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a72:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a78:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a7b:	8d 50 01             	lea    edx,[eax+0x1]
c0014a7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a81:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a84:	eb 3a                	jmp    c0014ac0 <opcodeFault(regs*, void*)+0x155>
c0014a86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a89:	8a 00                	mov    al,BYTE PTR [eax]
c0014a8b:	3c 36                	cmp    al,0x36
c0014a8d:	74 1b                	je     c0014aaa <opcodeFault(regs*, void*)+0x13f>
c0014a8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a92:	8a 00                	mov    al,BYTE PTR [eax]
c0014a94:	3c 26                	cmp    al,0x26
c0014a96:	74 12                	je     c0014aaa <opcodeFault(regs*, void*)+0x13f>
c0014a98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a9b:	8a 00                	mov    al,BYTE PTR [eax]
c0014a9d:	3c 64                	cmp    al,0x64
c0014a9f:	74 09                	je     c0014aaa <opcodeFault(regs*, void*)+0x13f>
c0014aa1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aa4:	8a 00                	mov    al,BYTE PTR [eax]
c0014aa6:	3c 65                	cmp    al,0x65
c0014aa8:	75 16                	jne    c0014ac0 <opcodeFault(regs*, void*)+0x155>
c0014aaa:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014aae:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ab7:	8d 50 01             	lea    edx,[eax+0x1]
c0014aba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014abd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ac0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ac3:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac5:	3c 0f                	cmp    al,0xf
c0014ac7:	0f 85 ad 00 00 00    	jne    c0014b7a <opcodeFault(regs*, void*)+0x20f>
c0014acd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ad0:	40                   	inc    eax
c0014ad1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ad3:	3c c2                	cmp    al,0xc2
c0014ad5:	74 0e                	je     c0014ae5 <opcodeFault(regs*, void*)+0x17a>
c0014ad7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ada:	40                   	inc    eax
c0014adb:	8a 00                	mov    al,BYTE PTR [eax]
c0014add:	3c c3                	cmp    al,0xc3
c0014adf:	0f 85 95 00 00 00    	jne    c0014b7a <opcodeFault(regs*, void*)+0x20f>
c0014ae5:	83 ec 0c             	sub    esp,0xc
c0014ae8:	68 9f 8b 02 c0       	push   0xc0028b9f
c0014aed:	e8 ab db ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0014af2:	83 c4 10             	add    esp,0x10
c0014af5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014afb:	8d 50 01             	lea    edx,[eax+0x1]
c0014afe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b01:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b04:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b0a:	8a 00                	mov    al,BYTE PTR [eax]
c0014b0c:	8d 50 fe             	lea    edx,[eax-0x2]
c0014b0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b12:	88 10                	mov    BYTE PTR [eax],dl
c0014b14:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014b17:	50                   	push   eax
c0014b18:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014b1b:	50                   	push   eax
c0014b1c:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014b1f:	50                   	push   eax
c0014b20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014b23:	e8 be 44 00 00       	call   c0018fe6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014b28:	83 c4 10             	add    esp,0x10
c0014b2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b2e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b31:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b34:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014b37:	01 d0                	add    eax,edx
c0014b39:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014b3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b3f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b42:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b45:	48                   	dec    eax
c0014b46:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014b49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b4c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014b4f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b55:	83 ec 04             	sub    esp,0x4
c0014b58:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014b5b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014b5e:	50                   	push   eax
c0014b5f:	e8 05 b6 fe ff       	call   c0000169 <voodooXADD>
c0014b64:	83 c4 10             	add    esp,0x10
c0014b67:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014b6a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014b6d:	01 c2                	add    edx,eax
c0014b6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b72:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b75:	e9 a9 03 00 00       	jmp    c0014f23 <opcodeFault(regs*, void*)+0x5b8>
c0014b7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b7d:	8a 00                	mov    al,BYTE PTR [eax]
c0014b7f:	3c 0f                	cmp    al,0xf
c0014b81:	0f 85 8b 01 00 00    	jne    c0014d12 <opcodeFault(regs*, void*)+0x3a7>
c0014b87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b8a:	40                   	inc    eax
c0014b8b:	8a 00                	mov    al,BYTE PTR [eax]
c0014b8d:	3c c7                	cmp    al,0xc7
c0014b8f:	0f 86 7d 01 00 00    	jbe    c0014d12 <opcodeFault(regs*, void*)+0x3a7>
c0014b95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b98:	40                   	inc    eax
c0014b99:	8a 00                	mov    al,BYTE PTR [eax]
c0014b9b:	3c cf                	cmp    al,0xcf
c0014b9d:	0f 87 6f 01 00 00    	ja     c0014d12 <opcodeFault(regs*, void*)+0x3a7>
c0014ba3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ba6:	40                   	inc    eax
c0014ba7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ba9:	83 c0 38             	add    eax,0x38
c0014bac:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014baf:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014bb3:	75 0b                	jne    c0014bc0 <opcodeFault(regs*, void*)+0x255>
c0014bb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014bbb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bbe:	eb 75                	jmp    c0014c35 <opcodeFault(regs*, void*)+0x2ca>
c0014bc0:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014bc4:	75 0b                	jne    c0014bd1 <opcodeFault(regs*, void*)+0x266>
c0014bc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014bcc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bcf:	eb 64                	jmp    c0014c35 <opcodeFault(regs*, void*)+0x2ca>
c0014bd1:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014bd5:	75 0b                	jne    c0014be2 <opcodeFault(regs*, void*)+0x277>
c0014bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bda:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014bdd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014be0:	eb 53                	jmp    c0014c35 <opcodeFault(regs*, void*)+0x2ca>
c0014be2:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014be6:	75 0b                	jne    c0014bf3 <opcodeFault(regs*, void*)+0x288>
c0014be8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014beb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014bee:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bf1:	eb 42                	jmp    c0014c35 <opcodeFault(regs*, void*)+0x2ca>
c0014bf3:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014bf7:	75 0b                	jne    c0014c04 <opcodeFault(regs*, void*)+0x299>
c0014bf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bfc:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014bff:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c02:	eb 31                	jmp    c0014c35 <opcodeFault(regs*, void*)+0x2ca>
c0014c04:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014c08:	75 0b                	jne    c0014c15 <opcodeFault(regs*, void*)+0x2aa>
c0014c0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c0d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014c10:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c13:	eb 20                	jmp    c0014c35 <opcodeFault(regs*, void*)+0x2ca>
c0014c15:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014c19:	75 0b                	jne    c0014c26 <opcodeFault(regs*, void*)+0x2bb>
c0014c1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014c21:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c24:	eb 0f                	jmp    c0014c35 <opcodeFault(regs*, void*)+0x2ca>
c0014c26:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014c2a:	75 09                	jne    c0014c35 <opcodeFault(regs*, void*)+0x2ca>
c0014c2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c2f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014c32:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c35:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014c39:	74 10                	je     c0014c4b <opcodeFault(regs*, void*)+0x2e0>
c0014c3b:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014c42:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014c49:	eb 2d                	jmp    c0014c78 <opcodeFault(regs*, void*)+0x30d>
c0014c4b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c4e:	c1 e0 18             	shl    eax,0x18
c0014c51:	89 c2                	mov    edx,eax
c0014c53:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c56:	c1 e0 08             	shl    eax,0x8
c0014c59:	25 00 00 ff 00       	and    eax,0xff0000
c0014c5e:	09 c2                	or     edx,eax
c0014c60:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c63:	c1 e8 08             	shr    eax,0x8
c0014c66:	25 00 ff 00 00       	and    eax,0xff00
c0014c6b:	09 c2                	or     edx,eax
c0014c6d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c70:	c1 e8 18             	shr    eax,0x18
c0014c73:	09 d0                	or     eax,edx
c0014c75:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c78:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c7c:	75 0b                	jne    c0014c89 <opcodeFault(regs*, void*)+0x31e>
c0014c7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c81:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c84:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014c87:	eb 75                	jmp    c0014cfe <opcodeFault(regs*, void*)+0x393>
c0014c89:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c8d:	75 0b                	jne    c0014c9a <opcodeFault(regs*, void*)+0x32f>
c0014c8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c92:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c95:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014c98:	eb 64                	jmp    c0014cfe <opcodeFault(regs*, void*)+0x393>
c0014c9a:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c9e:	75 0b                	jne    c0014cab <opcodeFault(regs*, void*)+0x340>
c0014ca0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ca6:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014ca9:	eb 53                	jmp    c0014cfe <opcodeFault(regs*, void*)+0x393>
c0014cab:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014caf:	75 0b                	jne    c0014cbc <opcodeFault(regs*, void*)+0x351>
c0014cb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cb7:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014cba:	eb 42                	jmp    c0014cfe <opcodeFault(regs*, void*)+0x393>
c0014cbc:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014cc0:	75 0b                	jne    c0014ccd <opcodeFault(regs*, void*)+0x362>
c0014cc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cc8:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014ccb:	eb 31                	jmp    c0014cfe <opcodeFault(regs*, void*)+0x393>
c0014ccd:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014cd1:	75 0b                	jne    c0014cde <opcodeFault(regs*, void*)+0x373>
c0014cd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cd9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014cdc:	eb 20                	jmp    c0014cfe <opcodeFault(regs*, void*)+0x393>
c0014cde:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014ce2:	75 0b                	jne    c0014cef <opcodeFault(regs*, void*)+0x384>
c0014ce4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cea:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014ced:	eb 0f                	jmp    c0014cfe <opcodeFault(regs*, void*)+0x393>
c0014cef:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014cf3:	75 09                	jne    c0014cfe <opcodeFault(regs*, void*)+0x393>
c0014cf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cfb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014cfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d01:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d04:	8d 50 02             	lea    edx,[eax+0x2]
c0014d07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d0d:	e9 11 02 00 00       	jmp    c0014f23 <opcodeFault(regs*, void*)+0x5b8>
c0014d12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d15:	8a 00                	mov    al,BYTE PTR [eax]
c0014d17:	3c 0f                	cmp    al,0xf
c0014d19:	0f 85 76 01 00 00    	jne    c0014e95 <opcodeFault(regs*, void*)+0x52a>
c0014d1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d22:	40                   	inc    eax
c0014d23:	8a 00                	mov    al,BYTE PTR [eax]
c0014d25:	3c c7                	cmp    al,0xc7
c0014d27:	0f 85 68 01 00 00    	jne    c0014e95 <opcodeFault(regs*, void*)+0x52a>
c0014d2d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d33:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d36:	8d 50 01             	lea    edx,[eax+0x1]
c0014d39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d3c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d3f:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014d42:	50                   	push   eax
c0014d43:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014d46:	50                   	push   eax
c0014d47:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014d4a:	50                   	push   eax
c0014d4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d4e:	e8 93 42 00 00       	call   c0018fe6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d53:	83 c4 10             	add    esp,0x10
c0014d56:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014d59:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014d5c:	83 f0 01             	xor    eax,0x1
c0014d5f:	84 c0                	test   al,al
c0014d61:	0f 84 2e 01 00 00    	je     c0014e95 <opcodeFault(regs*, void*)+0x52a>
c0014d67:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014d6a:	3c 01                	cmp    al,0x1
c0014d6c:	0f 85 23 01 00 00    	jne    c0014e95 <opcodeFault(regs*, void*)+0x52a>
c0014d72:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014d75:	83 f0 01             	xor    eax,0x1
c0014d78:	84 c0                	test   al,al
c0014d7a:	0f 84 15 01 00 00    	je     c0014e95 <opcodeFault(regs*, void*)+0x52a>
c0014d80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d83:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d86:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d89:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014d90:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014d93:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014d96:	89 c2                	mov    edx,eax
c0014d98:	b8 00 00 00 00       	mov    eax,0x0
c0014d9d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014da0:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014da3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da6:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014da9:	ba 00 00 00 00       	mov    edx,0x0
c0014dae:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014db1:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014db4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014dba:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014dbd:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014dc4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014dc7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014dca:	89 c2                	mov    edx,eax
c0014dcc:	b8 00 00 00 00       	mov    eax,0x0
c0014dd1:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014dd4:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014dd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dda:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014ddd:	ba 00 00 00 00       	mov    edx,0x0
c0014de2:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014de5:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014de8:	e8 3a 74 00 00       	call   c001c227 <lockScheduler()>
c0014ded:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014df0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014df3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014df5:	89 c1                	mov    ecx,eax
c0014df7:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014dfa:	89 cb                	mov    ebx,ecx
c0014dfc:	89 d0                	mov    eax,edx
c0014dfe:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014e01:	89 c6                	mov    esi,eax
c0014e03:	89 f0                	mov    eax,esi
c0014e05:	09 d8                	or     eax,ebx
c0014e07:	85 c0                	test   eax,eax
c0014e09:	75 21                	jne    c0014e2c <opcodeFault(regs*, void*)+0x4c1>
c0014e0b:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014e0e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014e11:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014e14:	89 01                	mov    DWORD PTR [ecx],eax
c0014e16:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014e19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e1c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e1f:	83 c8 40             	or     eax,0x40
c0014e22:	89 c2                	mov    edx,eax
c0014e24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e27:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e2a:	eb 3e                	jmp    c0014e6a <opcodeFault(regs*, void*)+0x4ff>
c0014e2c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014e2f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014e32:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e34:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e37:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e3a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014e3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e40:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e43:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e46:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e49:	89 d0                	mov    eax,edx
c0014e4b:	31 d2                	xor    edx,edx
c0014e4d:	89 c3                	mov    ebx,eax
c0014e4f:	89 d6                	mov    esi,edx
c0014e51:	89 da                	mov    edx,ebx
c0014e53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e56:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e5f:	83 e0 bf             	and    eax,0xffffffbf
c0014e62:	89 c2                	mov    edx,eax
c0014e64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e67:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e6a:	e8 ba 73 00 00       	call   c001c229 <unlockScheduler()>
c0014e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e72:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e75:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014e78:	01 c2                	add    edx,eax
c0014e7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e7d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e80:	83 ec 0c             	sub    esp,0xc
c0014e83:	68 ae 8b 02 c0       	push   0xc0028bae
c0014e88:	e8 10 d8 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0014e8d:	83 c4 10             	add    esp,0x10
c0014e90:	e9 8e 00 00 00       	jmp    c0014f23 <opcodeFault(regs*, void*)+0x5b8>
c0014e95:	83 ec 0c             	sub    esp,0xc
c0014e98:	68 c1 8b 02 c0       	push   0xc0028bc1
c0014e9d:	e8 fb d7 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0014ea2:	83 c4 10             	add    esp,0x10
c0014ea5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014eab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014eb1:	c1 e0 04             	shl    eax,0x4
c0014eb4:	01 d0                	add    eax,edx
c0014eb6:	83 c0 03             	add    eax,0x3
c0014eb9:	8a 00                	mov    al,BYTE PTR [eax]
c0014ebb:	0f b6 d8             	movzx  ebx,al
c0014ebe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec1:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ec4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014eca:	c1 e0 04             	shl    eax,0x4
c0014ecd:	01 d0                	add    eax,edx
c0014ecf:	83 c0 02             	add    eax,0x2
c0014ed2:	8a 00                	mov    al,BYTE PTR [eax]
c0014ed4:	0f b6 c8             	movzx  ecx,al
c0014ed7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eda:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014edd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ee3:	c1 e0 04             	shl    eax,0x4
c0014ee6:	01 d0                	add    eax,edx
c0014ee8:	40                   	inc    eax
c0014ee9:	8a 00                	mov    al,BYTE PTR [eax]
c0014eeb:	0f b6 d0             	movzx  edx,al
c0014eee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef1:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014ef4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014efa:	c1 e0 04             	shl    eax,0x4
c0014efd:	01 f0                	add    eax,esi
c0014eff:	8a 00                	mov    al,BYTE PTR [eax]
c0014f01:	0f b6 c0             	movzx  eax,al
c0014f04:	83 ec 0c             	sub    esp,0xc
c0014f07:	53                   	push   ebx
c0014f08:	51                   	push   ecx
c0014f09:	52                   	push   edx
c0014f0a:	50                   	push   eax
c0014f0b:	68 d4 8b 02 c0       	push   0xc0028bd4
c0014f10:	e8 88 d7 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0014f15:	83 c4 20             	add    esp,0x20
c0014f18:	83 ec 0c             	sub    esp,0xc
c0014f1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f1e:	e8 a5 f5 ff ff       	call   c00144c8 <displayDebugInfo(regs*)>
c0014f23:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014f26:	5b                   	pop    ebx
c0014f27:	5e                   	pop    esi
c0014f28:	5d                   	pop    ebp
c0014f29:	c3                   	ret    

c0014f2a <displayProgramFault(char const*)>:
c0014f2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f2f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f32:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f38:	85 c0                	test   eax,eax
c0014f3a:	74 15                	je     c0014f51 <displayProgramFault(char const*)+0x27>
c0014f3c:	83 ec 0c             	sub    esp,0xc
c0014f3f:	6a 04                	push   0x4
c0014f41:	6a 0f                	push   0xf
c0014f43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f47:	50                   	push   eax
c0014f48:	e8 f3 b9 ff ff       	call   c0010940 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014f4d:	83 c4 1c             	add    esp,0x1c
c0014f50:	c3                   	ret    
c0014f51:	c3                   	ret    

c0014f52 <setupInterruptController()>:
c0014f52:	55                   	push   ebp
c0014f53:	89 e5                	mov    ebp,esp
c0014f55:	53                   	push   ebx
c0014f56:	83 ec 24             	sub    esp,0x24
c0014f59:	b8 00 00 00 00       	mov    eax,0x0
c0014f5e:	85 c0                	test   eax,eax
c0014f60:	0f 95 c0             	setne  al
c0014f63:	84 c0                	test   al,al
c0014f65:	74 5b                	je     c0014fc2 <setupInterruptController()+0x70>
c0014f67:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0014f6e:	83 ec 0c             	sub    esp,0xc
c0014f71:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0014f74:	e8 57 a5 ff ff       	call   c000f4d0 <malloc>
c0014f79:	83 c4 10             	add    esp,0x10
c0014f7c:	89 c3                	mov    ebx,eax
c0014f7e:	83 ec 0c             	sub    esp,0xc
c0014f81:	53                   	push   ebx
c0014f82:	e8 1f e7 00 00       	call   c00236a6 <APIC::APIC()>
c0014f87:	83 c4 10             	add    esp,0x10
c0014f8a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014f8d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014f90:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014f93:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f95:	83 c0 08             	add    eax,0x8
c0014f98:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f9a:	6a 00                	push   0x0
c0014f9c:	6a 00                	push   0x0
c0014f9e:	6a 00                	push   0x0
c0014fa0:	52                   	push   edx
c0014fa1:	ff d0                	call   eax
c0014fa3:	83 c4 10             	add    esp,0x10
c0014fa6:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0014fab:	83 ec 08             	sub    esp,0x8
c0014fae:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014fb1:	50                   	push   eax
c0014fb2:	e8 d5 ea ff ff       	call   c0013a8c <Device::addChild(Device*)>
c0014fb7:	83 c4 10             	add    esp,0x10
c0014fba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014fbd:	e9 52 03 00 00       	jmp    c0015314 <setupInterruptController()+0x3c2>
c0014fc2:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0014fc7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014fcd:	83 e0 01             	and    eax,0x1
c0014fd0:	84 c0                	test   al,al
c0014fd2:	0f 95 c0             	setne  al
c0014fd5:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014fd8:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0014fdf:	83 ec 0c             	sub    esp,0xc
c0014fe2:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014fe5:	e8 e6 a4 ff ff       	call   c000f4d0 <malloc>
c0014fea:	83 c4 10             	add    esp,0x10
c0014fed:	89 c3                	mov    ebx,eax
c0014fef:	83 ec 0c             	sub    esp,0xc
c0014ff2:	53                   	push   ebx
c0014ff3:	e8 06 ec 00 00       	call   c0023bfe <PIC::PIC()>
c0014ff8:	83 c4 10             	add    esp,0x10
c0014ffb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014ffe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015001:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015004:	8b 00                	mov    eax,DWORD PTR [eax]
c0015006:	83 c0 08             	add    eax,0x8
c0015009:	8b 00                	mov    eax,DWORD PTR [eax]
c001500b:	6a 00                	push   0x0
c001500d:	6a 00                	push   0x0
c001500f:	6a 00                	push   0x0
c0015011:	52                   	push   edx
c0015012:	ff d0                	call   eax
c0015014:	83 c4 10             	add    esp,0x10
c0015017:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001501b:	74 73                	je     c0015090 <setupInterruptController()+0x13e>
c001501d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015020:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015023:	8b 00                	mov    eax,DWORD PTR [eax]
c0015025:	83 c0 0c             	add    eax,0xc
c0015028:	8b 00                	mov    eax,DWORD PTR [eax]
c001502a:	6a 00                	push   0x0
c001502c:	6a 00                	push   0x0
c001502e:	6a 00                	push   0x0
c0015030:	52                   	push   edx
c0015031:	ff d0                	call   eax
c0015033:	83 c4 10             	add    esp,0x10
c0015036:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001503a:	74 15                	je     c0015051 <setupInterruptController()+0xff>
c001503c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001503f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015041:	83 c0 04             	add    eax,0x4
c0015044:	8b 00                	mov    eax,DWORD PTR [eax]
c0015046:	83 ec 0c             	sub    esp,0xc
c0015049:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001504c:	ff d0                	call   eax
c001504e:	83 c4 10             	add    esp,0x10
c0015051:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015058:	83 ec 0c             	sub    esp,0xc
c001505b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001505e:	e8 6d a4 ff ff       	call   c000f4d0 <malloc>
c0015063:	83 c4 10             	add    esp,0x10
c0015066:	89 c3                	mov    ebx,eax
c0015068:	83 ec 0c             	sub    esp,0xc
c001506b:	53                   	push   ebx
c001506c:	e8 35 e6 00 00       	call   c00236a6 <APIC::APIC()>
c0015071:	83 c4 10             	add    esp,0x10
c0015074:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015077:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001507a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001507d:	8b 00                	mov    eax,DWORD PTR [eax]
c001507f:	83 c0 08             	add    eax,0x8
c0015082:	8b 00                	mov    eax,DWORD PTR [eax]
c0015084:	6a 00                	push   0x0
c0015086:	6a 00                	push   0x0
c0015088:	6a 00                	push   0x0
c001508a:	52                   	push   edx
c001508b:	ff d0                	call   eax
c001508d:	83 c4 10             	add    esp,0x10
c0015090:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0015095:	83 ec 08             	sub    esp,0x8
c0015098:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001509b:	50                   	push   eax
c001509c:	e8 eb e9 ff ff       	call   c0013a8c <Device::addChild(Device*)>
c00150a1:	83 c4 10             	add    esp,0x10
c00150a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00150a9:	83 c0 24             	add    eax,0x24
c00150ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ae:	6a 00                	push   0x0
c00150b0:	68 4c 49 01 c0       	push   0xc001494c
c00150b5:	6a 00                	push   0x0
c00150b7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150ba:	ff d0                	call   eax
c00150bc:	83 c4 10             	add    esp,0x10
c00150bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00150c4:	83 c0 24             	add    eax,0x24
c00150c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00150c9:	6a 00                	push   0x0
c00150cb:	68 4c 49 01 c0       	push   0xc001494c
c00150d0:	6a 01                	push   0x1
c00150d2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150d5:	ff d0                	call   eax
c00150d7:	83 c4 10             	add    esp,0x10
c00150da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00150df:	83 c0 24             	add    eax,0x24
c00150e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00150e4:	6a 00                	push   0x0
c00150e6:	68 25 43 01 c0       	push   0xc0014325
c00150eb:	6a 02                	push   0x2
c00150ed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150f0:	ff d0                	call   eax
c00150f2:	83 c4 10             	add    esp,0x10
c00150f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00150fa:	83 c0 24             	add    eax,0x24
c00150fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ff:	6a 00                	push   0x0
c0015101:	68 4c 49 01 c0       	push   0xc001494c
c0015106:	6a 03                	push   0x3
c0015108:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001510b:	ff d0                	call   eax
c001510d:	83 c4 10             	add    esp,0x10
c0015110:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015113:	8b 00                	mov    eax,DWORD PTR [eax]
c0015115:	83 c0 24             	add    eax,0x24
c0015118:	8b 00                	mov    eax,DWORD PTR [eax]
c001511a:	6a 00                	push   0x0
c001511c:	68 4c 49 01 c0       	push   0xc001494c
c0015121:	6a 04                	push   0x4
c0015123:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015126:	ff d0                	call   eax
c0015128:	83 c4 10             	add    esp,0x10
c001512b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001512e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015130:	83 c0 24             	add    eax,0x24
c0015133:	8b 00                	mov    eax,DWORD PTR [eax]
c0015135:	6a 00                	push   0x0
c0015137:	68 4c 49 01 c0       	push   0xc001494c
c001513c:	6a 05                	push   0x5
c001513e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015141:	ff d0                	call   eax
c0015143:	83 c4 10             	add    esp,0x10
c0015146:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015149:	8b 00                	mov    eax,DWORD PTR [eax]
c001514b:	83 c0 24             	add    eax,0x24
c001514e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015150:	6a 00                	push   0x0
c0015152:	68 6b 49 01 c0       	push   0xc001496b
c0015157:	6a 06                	push   0x6
c0015159:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001515c:	ff d0                	call   eax
c001515e:	83 c4 10             	add    esp,0x10
c0015161:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015164:	8b 00                	mov    eax,DWORD PTR [eax]
c0015166:	83 c0 24             	add    eax,0x24
c0015169:	8b 00                	mov    eax,DWORD PTR [eax]
c001516b:	6a 00                	push   0x0
c001516d:	68 cd 48 01 c0       	push   0xc00148cd
c0015172:	6a 07                	push   0x7
c0015174:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015177:	ff d0                	call   eax
c0015179:	83 c4 10             	add    esp,0x10
c001517c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001517f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015181:	83 c0 24             	add    eax,0x24
c0015184:	8b 00                	mov    eax,DWORD PTR [eax]
c0015186:	6a 00                	push   0x0
c0015188:	68 40 41 01 c0       	push   0xc0014140
c001518d:	6a 08                	push   0x8
c001518f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015192:	ff d0                	call   eax
c0015194:	83 c4 10             	add    esp,0x10
c0015197:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001519a:	8b 00                	mov    eax,DWORD PTR [eax]
c001519c:	83 c0 24             	add    eax,0x24
c001519f:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a1:	6a 00                	push   0x0
c00151a3:	68 4c 49 01 c0       	push   0xc001494c
c00151a8:	6a 09                	push   0x9
c00151aa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151ad:	ff d0                	call   eax
c00151af:	83 c4 10             	add    esp,0x10
c00151b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b7:	83 c0 24             	add    eax,0x24
c00151ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00151bc:	6a 00                	push   0x0
c00151be:	68 4c 49 01 c0       	push   0xc001494c
c00151c3:	6a 0a                	push   0xa
c00151c5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151c8:	ff d0                	call   eax
c00151ca:	83 c4 10             	add    esp,0x10
c00151cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d2:	83 c0 24             	add    eax,0x24
c00151d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d7:	6a 00                	push   0x0
c00151d9:	68 4c 49 01 c0       	push   0xc001494c
c00151de:	6a 0b                	push   0xb
c00151e0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151e3:	ff d0                	call   eax
c00151e5:	83 c4 10             	add    esp,0x10
c00151e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ed:	83 c0 24             	add    eax,0x24
c00151f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f2:	6a 00                	push   0x0
c00151f4:	68 4c 49 01 c0       	push   0xc001494c
c00151f9:	6a 0c                	push   0xc
c00151fb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151fe:	ff d0                	call   eax
c0015200:	83 c4 10             	add    esp,0x10
c0015203:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015206:	8b 00                	mov    eax,DWORD PTR [eax]
c0015208:	83 c0 24             	add    eax,0x24
c001520b:	8b 00                	mov    eax,DWORD PTR [eax]
c001520d:	6a 00                	push   0x0
c001520f:	68 fc 48 01 c0       	push   0xc00148fc
c0015214:	6a 0d                	push   0xd
c0015216:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015219:	ff d0                	call   eax
c001521b:	83 c4 10             	add    esp,0x10
c001521e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015221:	8b 00                	mov    eax,DWORD PTR [eax]
c0015223:	83 c0 24             	add    eax,0x24
c0015226:	8b 00                	mov    eax,DWORD PTR [eax]
c0015228:	6a 00                	push   0x0
c001522a:	68 35 49 01 c0       	push   0xc0014935
c001522f:	6a 0e                	push   0xe
c0015231:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015234:	ff d0                	call   eax
c0015236:	83 c4 10             	add    esp,0x10
c0015239:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001523c:	8b 00                	mov    eax,DWORD PTR [eax]
c001523e:	83 c0 24             	add    eax,0x24
c0015241:	8b 00                	mov    eax,DWORD PTR [eax]
c0015243:	6a 00                	push   0x0
c0015245:	68 4c 49 01 c0       	push   0xc001494c
c001524a:	6a 0f                	push   0xf
c001524c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001524f:	ff d0                	call   eax
c0015251:	83 c4 10             	add    esp,0x10
c0015254:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015257:	8b 00                	mov    eax,DWORD PTR [eax]
c0015259:	83 c0 24             	add    eax,0x24
c001525c:	8b 00                	mov    eax,DWORD PTR [eax]
c001525e:	6a 00                	push   0x0
c0015260:	68 4c 49 01 c0       	push   0xc001494c
c0015265:	6a 10                	push   0x10
c0015267:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001526a:	ff d0                	call   eax
c001526c:	83 c4 10             	add    esp,0x10
c001526f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015272:	8b 00                	mov    eax,DWORD PTR [eax]
c0015274:	83 c0 24             	add    eax,0x24
c0015277:	8b 00                	mov    eax,DWORD PTR [eax]
c0015279:	6a 00                	push   0x0
c001527b:	68 4c 49 01 c0       	push   0xc001494c
c0015280:	6a 11                	push   0x11
c0015282:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015285:	ff d0                	call   eax
c0015287:	83 c4 10             	add    esp,0x10
c001528a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001528d:	8b 00                	mov    eax,DWORD PTR [eax]
c001528f:	83 c0 24             	add    eax,0x24
c0015292:	8b 00                	mov    eax,DWORD PTR [eax]
c0015294:	6a 00                	push   0x0
c0015296:	68 4c 49 01 c0       	push   0xc001494c
c001529b:	6a 12                	push   0x12
c001529d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152a0:	ff d0                	call   eax
c00152a2:	83 c4 10             	add    esp,0x10
c00152a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152aa:	83 c0 24             	add    eax,0x24
c00152ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00152af:	6a 00                	push   0x0
c00152b1:	68 4c 49 01 c0       	push   0xc001494c
c00152b6:	6a 13                	push   0x13
c00152b8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152bb:	ff d0                	call   eax
c00152bd:	83 c4 10             	add    esp,0x10
c00152c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c5:	83 c0 24             	add    eax,0x24
c00152c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ca:	6a 00                	push   0x0
c00152cc:	68 4c 49 01 c0       	push   0xc001494c
c00152d1:	6a 14                	push   0x14
c00152d3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152d6:	ff d0                	call   eax
c00152d8:	83 c4 10             	add    esp,0x10
c00152db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152de:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e0:	83 c0 24             	add    eax,0x24
c00152e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e5:	6a 00                	push   0x0
c00152e7:	68 4c 49 01 c0       	push   0xc001494c
c00152ec:	6a 1e                	push   0x1e
c00152ee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152f1:	ff d0                	call   eax
c00152f3:	83 c4 10             	add    esp,0x10
c00152f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fb:	83 c0 24             	add    eax,0x24
c00152fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015300:	6a 00                	push   0x0
c0015302:	68 f4 ab 01 c0       	push   0xc001abf4
c0015307:	6a 60                	push   0x60
c0015309:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001530c:	ff d0                	call   eax
c001530e:	83 c4 10             	add    esp,0x10
c0015311:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015314:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015317:	c9                   	leave  
c0015318:	c3                   	ret    
c0015319:	90                   	nop

c001531a <InterruptController::convertLegacyIRQNumber(int)>:
c001531a:	55                   	push   ebp
c001531b:	89 e5                	mov    ebp,esp
c001531d:	83 ec 08             	sub    esp,0x8
c0015320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015323:	83 ec 0c             	sub    esp,0xc
c0015326:	50                   	push   eax
c0015327:	e8 4c ea ff ff       	call   c0013d78 <Device::getName()>
c001532c:	83 c4 10             	add    esp,0x10
c001532f:	8a 00                	mov    al,BYTE PTR [eax]
c0015331:	3c 41                	cmp    al,0x41
c0015333:	0f 94 c0             	sete   al
c0015336:	84 c0                	test   al,al
c0015338:	74 28                	je     c0015362 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001533a:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001533e:	7f 12                	jg     c0015352 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015340:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015343:	05 a0 ad 02 c0       	add    eax,0xc002ada0
c0015348:	8a 00                	mov    al,BYTE PTR [eax]
c001534a:	0f b6 c0             	movzx  eax,al
c001534d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015350:	eb 10                	jmp    c0015362 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015352:	83 ec 0c             	sub    esp,0xc
c0015355:	68 54 89 02 c0       	push   0xc0028954
c001535a:	e8 82 3e 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c001535f:	83 c4 10             	add    esp,0x10
c0015362:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015365:	c9                   	leave  
c0015366:	c3                   	ret    
c0015367:	90                   	nop

c0015368 <startGUI(void*)>:
c0015368:	55                   	push   ebp
c0015369:	89 e5                	mov    ebp,esp
c001536b:	53                   	push   ebx
c001536c:	83 ec 04             	sub    esp,0x4
c001536f:	e8 b5 6e 00 00       	call   c001c229 <unlockScheduler()>
c0015374:	8b 1d c8 ba 02 c0    	mov    ebx,DWORD PTR ds:0xc002bac8
c001537a:	83 ec 08             	sub    esp,0x8
c001537d:	6a 01                	push   0x1
c001537f:	68 3c 8c 02 c0       	push   0xc0028c3c
c0015384:	e8 62 68 00 00       	call   c001bbeb <Thr::loadDLL(char const*, bool)>
c0015389:	83 c4 10             	add    esp,0x10
c001538c:	83 ec 08             	sub    esp,0x8
c001538f:	53                   	push   ebx
c0015390:	50                   	push   eax
c0015391:	e8 64 6a 00 00       	call   c001bdfa <Thr::executeDLL(unsigned long, void*)>
c0015396:	83 c4 10             	add    esp,0x10
c0015399:	8b 1d c8 ba 02 c0    	mov    ebx,DWORD PTR ds:0xc002bac8
c001539f:	83 ec 08             	sub    esp,0x8
c00153a2:	6a 01                	push   0x1
c00153a4:	68 56 8c 02 c0       	push   0xc0028c56
c00153a9:	e8 3d 68 00 00       	call   c001bbeb <Thr::loadDLL(char const*, bool)>
c00153ae:	83 c4 10             	add    esp,0x10
c00153b1:	83 ec 08             	sub    esp,0x8
c00153b4:	53                   	push   ebx
c00153b5:	50                   	push   eax
c00153b6:	e8 3f 6a 00 00       	call   c001bdfa <Thr::executeDLL(unsigned long, void*)>
c00153bb:	83 c4 10             	add    esp,0x10
c00153be:	90                   	nop
c00153bf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00153c2:	c9                   	leave  
c00153c3:	c3                   	ret    

c00153c4 <startGUIVESA(void*)>:
c00153c4:	55                   	push   ebp
c00153c5:	89 e5                	mov    ebp,esp
c00153c7:	53                   	push   ebx
c00153c8:	83 ec 04             	sub    esp,0x4
c00153cb:	e8 59 6e 00 00       	call   c001c229 <unlockScheduler()>
c00153d0:	8b 1d c8 ba 02 c0    	mov    ebx,DWORD PTR ds:0xc002bac8
c00153d6:	83 ec 08             	sub    esp,0x8
c00153d9:	6a 01                	push   0x1
c00153db:	68 70 8c 02 c0       	push   0xc0028c70
c00153e0:	e8 06 68 00 00       	call   c001bbeb <Thr::loadDLL(char const*, bool)>
c00153e5:	83 c4 10             	add    esp,0x10
c00153e8:	83 ec 08             	sub    esp,0x8
c00153eb:	53                   	push   ebx
c00153ec:	50                   	push   eax
c00153ed:	e8 08 6a 00 00       	call   c001bdfa <Thr::executeDLL(unsigned long, void*)>
c00153f2:	83 c4 10             	add    esp,0x10
c00153f5:	8b 1d c8 ba 02 c0    	mov    ebx,DWORD PTR ds:0xc002bac8
c00153fb:	83 ec 08             	sub    esp,0x8
c00153fe:	6a 01                	push   0x1
c0015400:	68 56 8c 02 c0       	push   0xc0028c56
c0015405:	e8 e1 67 00 00       	call   c001bbeb <Thr::loadDLL(char const*, bool)>
c001540a:	83 c4 10             	add    esp,0x10
c001540d:	83 ec 08             	sub    esp,0x8
c0015410:	53                   	push   ebx
c0015411:	50                   	push   eax
c0015412:	e8 e3 69 00 00       	call   c001bdfa <Thr::executeDLL(unsigned long, void*)>
c0015417:	83 c4 10             	add    esp,0x10
c001541a:	90                   	nop
c001541b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001541e:	c9                   	leave  
c001541f:	c3                   	ret    

c0015420 <sendKeyToTerminal(unsigned char)>:
c0015420:	55                   	push   ebp
c0015421:	89 e5                	mov    ebp,esp
c0015423:	83 ec 28             	sub    esp,0x28
c0015426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015429:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001542c:	a1 84 bb 02 c0       	mov    eax,ds:0xc002bb84
c0015431:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015435:	83 ec 08             	sub    esp,0x8
c0015438:	52                   	push   edx
c0015439:	50                   	push   eax
c001543a:	e8 3d ba ff ff       	call   c0010e7c <VgaText::receiveKey(unsigned char)>
c001543f:	83 c4 10             	add    esp,0x10
c0015442:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015446:	75 41                	jne    c0015489 <sendKeyToTerminal(unsigned char)+0x69>
c0015448:	e8 01 6e 00 00       	call   c001c24e <lockStuff()>
c001544d:	a1 60 bc 02 c0       	mov    eax,ds:0xc002bc60
c0015452:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015455:	c7 05 60 bc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bc60,0x0
c001545f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015463:	74 1f                	je     c0015484 <sendKeyToTerminal(unsigned char)+0x64>
c0015465:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015468:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001546b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001546e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015471:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015474:	83 ec 0c             	sub    esp,0xc
c0015477:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001547a:	e8 bf 73 00 00       	call   c001c83e <unblockTask(ThreadControlBlock*)>
c001547f:	83 c4 10             	add    esp,0x10
c0015482:	eb db                	jmp    c001545f <sendKeyToTerminal(unsigned char)+0x3f>
c0015484:	e8 5e 71 00 00       	call   c001c5e7 <unlockStuff()>
c0015489:	90                   	nop
c001548a:	c9                   	leave  
c001548b:	c3                   	ret    

c001548c <sendKeyboardToken(KeyboardToken)>:
c001548c:	55                   	push   ebp
c001548d:	89 e5                	mov    ebp,esp
c001548f:	83 ec 18             	sub    esp,0x18
c0015492:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015498:	0f b7 c0             	movzx  eax,ax
c001549b:	83 f2 01             	xor    edx,0x1
c001549e:	88 90 80 bc 02 c0    	mov    BYTE PTR [eax-0x3ffd4380],dl
c00154a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a7:	66 3d 03 02          	cmp    ax,0x203
c00154ab:	75 07                	jne    c00154b4 <sendKeyboardToken(KeyboardToken)+0x28>
c00154ad:	a0 80 bd 02 c0       	mov    al,ds:0xc002bd80
c00154b2:	84 c0                	test   al,al
c00154b4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00154b8:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00154bb:	a0 88 c0 02 c0       	mov    al,ds:0xc002c088
c00154c0:	38 c2                	cmp    dl,al
c00154c2:	74 1c                	je     c00154e0 <sendKeyboardToken(KeyboardToken)+0x54>
c00154c4:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00154c7:	a2 88 c0 02 c0       	mov    ds:0xc002c088,al
c00154cc:	a0 88 c0 02 c0       	mov    al,ds:0xc002c088
c00154d1:	0f b6 c0             	movzx  eax,al
c00154d4:	83 ec 0c             	sub    esp,0xc
c00154d7:	50                   	push   eax
c00154d8:	e8 0d ac ff ff       	call   c00100ea <setTerminalScrollLock(bool)>
c00154dd:	83 c4 10             	add    esp,0x10
c00154e0:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00154e3:	84 c0                	test   al,al
c00154e5:	0f 84 ae 00 00 00    	je     c0015599 <sendKeyboardToken(KeyboardToken)+0x10d>
c00154eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ee:	66 3d 10 03          	cmp    ax,0x310
c00154f2:	75 06                	jne    c00154fa <sendKeyboardToken(KeyboardToken)+0x6e>
c00154f4:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00154fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fd:	66 3d 11 03          	cmp    ax,0x311
c0015501:	75 06                	jne    c0015509 <sendKeyboardToken(KeyboardToken)+0x7d>
c0015503:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550c:	66 3d 12 03          	cmp    ax,0x312
c0015510:	75 06                	jne    c0015518 <sendKeyboardToken(KeyboardToken)+0x8c>
c0015512:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551b:	66 3d 13 03          	cmp    ax,0x313
c001551f:	75 06                	jne    c0015527 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015521:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552a:	66 3d 14 03          	cmp    ax,0x314
c001552e:	75 06                	jne    c0015536 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015530:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015539:	66 3d 15 03          	cmp    ax,0x315
c001553d:	75 06                	jne    c0015545 <sendKeyboardToken(KeyboardToken)+0xb9>
c001553f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015548:	66 3d 16 03          	cmp    ax,0x316
c001554c:	75 06                	jne    c0015554 <sendKeyboardToken(KeyboardToken)+0xc8>
c001554e:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015554:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015557:	66 3d 17 03          	cmp    ax,0x317
c001555b:	75 06                	jne    c0015563 <sendKeyboardToken(KeyboardToken)+0xd7>
c001555d:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015563:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015566:	66 3d 18 03          	cmp    ax,0x318
c001556a:	75 06                	jne    c0015572 <sendKeyboardToken(KeyboardToken)+0xe6>
c001556c:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015575:	66 3d 19 03          	cmp    ax,0x319
c0015579:	75 06                	jne    c0015581 <sendKeyboardToken(KeyboardToken)+0xf5>
c001557b:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015584:	66 3d 1a 03          	cmp    ax,0x31a
c0015588:	0f 85 c9 00 00 00    	jne    c0015657 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001558e:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015594:	e9 be 00 00 00       	jmp    c0015657 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559c:	66 3d 10 03          	cmp    ax,0x310
c00155a0:	75 0a                	jne    c00155ac <sendKeyboardToken(KeyboardToken)+0x120>
c00155a2:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00155a8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155af:	66 3d 11 03          	cmp    ax,0x311
c00155b3:	75 0a                	jne    c00155bf <sendKeyboardToken(KeyboardToken)+0x133>
c00155b5:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00155bb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c2:	66 3d 12 03          	cmp    ax,0x312
c00155c6:	75 0a                	jne    c00155d2 <sendKeyboardToken(KeyboardToken)+0x146>
c00155c8:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00155ce:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d5:	66 3d 13 03          	cmp    ax,0x313
c00155d9:	75 0a                	jne    c00155e5 <sendKeyboardToken(KeyboardToken)+0x159>
c00155db:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00155e1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e8:	66 3d 14 03          	cmp    ax,0x314
c00155ec:	75 0a                	jne    c00155f8 <sendKeyboardToken(KeyboardToken)+0x16c>
c00155ee:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00155f4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fb:	66 3d 15 03          	cmp    ax,0x315
c00155ff:	75 0a                	jne    c001560b <sendKeyboardToken(KeyboardToken)+0x17f>
c0015601:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015607:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001560b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560e:	66 3d 16 03          	cmp    ax,0x316
c0015612:	75 0a                	jne    c001561e <sendKeyboardToken(KeyboardToken)+0x192>
c0015614:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001561a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001561e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015621:	66 3d 17 03          	cmp    ax,0x317
c0015625:	75 0a                	jne    c0015631 <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015627:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001562d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015634:	66 3d 18 03          	cmp    ax,0x318
c0015638:	75 0a                	jne    c0015644 <sendKeyboardToken(KeyboardToken)+0x1b8>
c001563a:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015640:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015647:	66 3d 19 03          	cmp    ax,0x319
c001564b:	75 0a                	jne    c0015657 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001564d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015653:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565a:	66 3d 00 02          	cmp    ax,0x200
c001565e:	75 2c                	jne    c001568c <sendKeyboardToken(KeyboardToken)+0x200>
c0015660:	a0 80 c0 02 c0       	mov    al,ds:0xc002c080
c0015665:	83 f0 01             	xor    eax,0x1
c0015668:	84 c0                	test   al,al
c001566a:	74 20                	je     c001568c <sendKeyboardToken(KeyboardToken)+0x200>
c001566c:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0015671:	6a 01                	push   0x1
c0015673:	6a 00                	push   0x0
c0015675:	68 68 53 01 c0       	push   0xc0015368
c001567a:	50                   	push   eax
c001567b:	e8 d8 6c 00 00       	call   c001c358 <Process::createThread(void (*)(void*), void*, int)>
c0015680:	83 c4 10             	add    esp,0x10
c0015683:	c6 05 80 c0 02 c0 01 	mov    BYTE PTR ds:0xc002c080,0x1
c001568a:	eb 33                	jmp    c00156bf <sendKeyboardToken(KeyboardToken)+0x233>
c001568c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568f:	66 3d 01 02          	cmp    ax,0x201
c0015693:	75 2a                	jne    c00156bf <sendKeyboardToken(KeyboardToken)+0x233>
c0015695:	a0 80 c0 02 c0       	mov    al,ds:0xc002c080
c001569a:	83 f0 01             	xor    eax,0x1
c001569d:	84 c0                	test   al,al
c001569f:	74 1e                	je     c00156bf <sendKeyboardToken(KeyboardToken)+0x233>
c00156a1:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00156a6:	6a 01                	push   0x1
c00156a8:	6a 00                	push   0x0
c00156aa:	68 c4 53 01 c0       	push   0xc00153c4
c00156af:	50                   	push   eax
c00156b0:	e8 a3 6c 00 00       	call   c001c358 <Process::createThread(void (*)(void*), void*, int)>
c00156b5:	83 c4 10             	add    esp,0x10
c00156b8:	c6 05 80 c0 02 c0 01 	mov    BYTE PTR ds:0xc002c080,0x1
c00156bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c2:	66 3d 1d 03          	cmp    ax,0x31d
c00156c6:	75 06                	jne    c00156ce <sendKeyboardToken(KeyboardToken)+0x242>
c00156c8:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00156ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d1:	66 3d 1c 03          	cmp    ax,0x31c
c00156d5:	75 06                	jne    c00156dd <sendKeyboardToken(KeyboardToken)+0x251>
c00156d7:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00156dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e0:	66 3d 1b 03          	cmp    ax,0x31b
c00156e4:	75 06                	jne    c00156ec <sendKeyboardToken(KeyboardToken)+0x260>
c00156e6:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00156ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ef:	66 3d 1e 03          	cmp    ax,0x31e
c00156f3:	75 06                	jne    c00156fb <sendKeyboardToken(KeyboardToken)+0x26f>
c00156f5:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00156fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156fe:	66 3d 1f 03          	cmp    ax,0x31f
c0015702:	75 06                	jne    c001570a <sendKeyboardToken(KeyboardToken)+0x27e>
c0015704:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001570a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570d:	66 3d 1a 03          	cmp    ax,0x31a
c0015711:	75 06                	jne    c0015719 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015713:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015719:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001571d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015720:	83 f0 01             	xor    eax,0x1
c0015723:	84 c0                	test   al,al
c0015725:	74 77                	je     c001579e <sendKeyboardToken(KeyboardToken)+0x312>
c0015727:	a0 81 bd 02 c0       	mov    al,ds:0xc002bd81
c001572c:	84 c0                	test   al,al
c001572e:	74 41                	je     c0015771 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0015730:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015734:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015738:	74 2b                	je     c0015765 <sendKeyboardToken(KeyboardToken)+0x2d9>
c001573a:	8b 15 84 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c084
c0015740:	89 d0                	mov    eax,edx
c0015742:	c1 e0 02             	shl    eax,0x2
c0015745:	01 d0                	add    eax,edx
c0015747:	01 c0                	add    eax,eax
c0015749:	a3 84 c0 02 c0       	mov    ds:0xc002c084,eax
c001574e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015751:	0f b7 c0             	movzx  eax,ax
c0015754:	8d 50 d0             	lea    edx,[eax-0x30]
c0015757:	a1 84 c0 02 c0       	mov    eax,ds:0xc002c084
c001575c:	01 d0                	add    eax,edx
c001575e:	a3 84 c0 02 c0       	mov    ds:0xc002c084,eax
c0015763:	eb 6d                	jmp    c00157d2 <sendKeyboardToken(KeyboardToken)+0x346>
c0015765:	c7 05 84 c0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c084,0x0
c001576f:	eb 61                	jmp    c00157d2 <sendKeyboardToken(KeyboardToken)+0x346>
c0015771:	a1 84 c0 02 c0       	mov    eax,ds:0xc002c084
c0015776:	85 c0                	test   eax,eax
c0015778:	74 18                	je     c0015792 <sendKeyboardToken(KeyboardToken)+0x306>
c001577a:	a1 84 c0 02 c0       	mov    eax,ds:0xc002c084
c001577f:	0f b6 c0             	movzx  eax,al
c0015782:	83 ec 0c             	sub    esp,0xc
c0015785:	50                   	push   eax
c0015786:	e8 95 fc ff ff       	call   c0015420 <sendKeyToTerminal(unsigned char)>
c001578b:	83 c4 10             	add    esp,0x10
c001578e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015792:	c7 05 84 c0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c084,0x0
c001579c:	eb 34                	jmp    c00157d2 <sendKeyboardToken(KeyboardToken)+0x346>
c001579e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a1:	66 3d 01 01          	cmp    ax,0x101
c00157a5:	75 2b                	jne    c00157d2 <sendKeyboardToken(KeyboardToken)+0x346>
c00157a7:	a1 84 c0 02 c0       	mov    eax,ds:0xc002c084
c00157ac:	85 c0                	test   eax,eax
c00157ae:	74 18                	je     c00157c8 <sendKeyboardToken(KeyboardToken)+0x33c>
c00157b0:	a1 84 c0 02 c0       	mov    eax,ds:0xc002c084
c00157b5:	0f b6 c0             	movzx  eax,al
c00157b8:	83 ec 0c             	sub    esp,0xc
c00157bb:	50                   	push   eax
c00157bc:	e8 5f fc ff ff       	call   c0015420 <sendKeyToTerminal(unsigned char)>
c00157c1:	83 c4 10             	add    esp,0x10
c00157c4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00157c8:	c7 05 84 c0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c084,0x0
c00157d2:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00157d5:	83 f0 01             	xor    eax,0x1
c00157d8:	84 c0                	test   al,al
c00157da:	74 4c                	je     c0015828 <sendKeyboardToken(KeyboardToken)+0x39c>
c00157dc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00157df:	83 f0 01             	xor    eax,0x1
c00157e2:	84 c0                	test   al,al
c00157e4:	74 42                	je     c0015828 <sendKeyboardToken(KeyboardToken)+0x39c>
c00157e6:	a0 80 bd 02 c0       	mov    al,ds:0xc002bd80
c00157eb:	83 f0 01             	xor    eax,0x1
c00157ee:	84 c0                	test   al,al
c00157f0:	74 36                	je     c0015828 <sendKeyboardToken(KeyboardToken)+0x39c>
c00157f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f5:	66 83 f8 1f          	cmp    ax,0x1f
c00157f9:	76 09                	jbe    c0015804 <sendKeyboardToken(KeyboardToken)+0x378>
c00157fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fe:	66 83 f8 7e          	cmp    ax,0x7e
c0015802:	76 12                	jbe    c0015816 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015807:	66 83 f8 0a          	cmp    ax,0xa
c001580b:	74 09                	je     c0015816 <sendKeyboardToken(KeyboardToken)+0x38a>
c001580d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015810:	66 83 f8 08          	cmp    ax,0x8
c0015814:	75 12                	jne    c0015828 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015819:	0f b6 c0             	movzx  eax,al
c001581c:	83 ec 0c             	sub    esp,0xc
c001581f:	50                   	push   eax
c0015820:	e8 fb fb ff ff       	call   c0015420 <sendKeyToTerminal(unsigned char)>
c0015825:	83 c4 10             	add    esp,0x10
c0015828:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001582b:	83 f0 01             	xor    eax,0x1
c001582e:	84 c0                	test   al,al
c0015830:	74 4f                	je     c0015881 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015832:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015835:	83 f0 01             	xor    eax,0x1
c0015838:	84 c0                	test   al,al
c001583a:	74 45                	je     c0015881 <sendKeyboardToken(KeyboardToken)+0x3f5>
c001583c:	a0 80 bd 02 c0       	mov    al,ds:0xc002bd80
c0015841:	84 c0                	test   al,al
c0015843:	74 3c                	je     c0015881 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015848:	66 83 f8 3f          	cmp    ax,0x3f
c001584c:	76 33                	jbe    c0015881 <sendKeyboardToken(KeyboardToken)+0x3f5>
c001584e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015851:	66 83 f8 7f          	cmp    ax,0x7f
c0015855:	77 2a                	ja     c0015881 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585a:	88 c2                	mov    dl,al
c001585c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585f:	66 83 f8 5f          	cmp    ax,0x5f
c0015863:	76 04                	jbe    c0015869 <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015865:	b0 20                	mov    al,0x20
c0015867:	eb 02                	jmp    c001586b <sendKeyboardToken(KeyboardToken)+0x3df>
c0015869:	b0 00                	mov    al,0x0
c001586b:	29 c2                	sub    edx,eax
c001586d:	88 d0                	mov    al,dl
c001586f:	83 e8 40             	sub    eax,0x40
c0015872:	0f b6 c0             	movzx  eax,al
c0015875:	83 ec 0c             	sub    esp,0xc
c0015878:	50                   	push   eax
c0015879:	e8 a2 fb ff ff       	call   c0015420 <sendKeyToTerminal(unsigned char)>
c001587e:	83 c4 10             	add    esp,0x10
c0015881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015884:	66 3d 00 03          	cmp    ax,0x300
c0015888:	75 0f                	jne    c0015899 <sendKeyboardToken(KeyboardToken)+0x40d>
c001588a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001588d:	83 f0 01             	xor    eax,0x1
c0015890:	84 c0                	test   al,al
c0015892:	74 05                	je     c0015899 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015894:	e8 78 b0 ff ff       	call   c0010911 <doTerminalCycle()>
c0015899:	90                   	nop
c001589a:	c9                   	leave  
c001589b:	c3                   	ret    

c001589c <clearInternalKeybuffer(VgaText*)>:
c001589c:	55                   	push   ebp
c001589d:	89 e5                	mov    ebp,esp
c001589f:	83 ec 08             	sub    esp,0x8
c00158a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a5:	05 34 11 00 00       	add    eax,0x1134
c00158aa:	83 ec 0c             	sub    esp,0xc
c00158ad:	50                   	push   eax
c00158ae:	e8 f5 ad fe ff       	call   c00006a8 <strlen>
c00158b3:	83 c4 10             	add    esp,0x10
c00158b6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00158b9:	81 c2 34 11 00 00    	add    edx,0x1134
c00158bf:	83 ec 04             	sub    esp,0x4
c00158c2:	50                   	push   eax
c00158c3:	6a 00                	push   0x0
c00158c5:	52                   	push   edx
c00158c6:	e8 c0 ad fe ff       	call   c000068b <memset>
c00158cb:	83 c4 10             	add    esp,0x10
c00158ce:	90                   	nop
c00158cf:	c9                   	leave  
c00158d0:	c3                   	ret    

c00158d1 <readKeyboard(VgaText*, char*, unsigned long)>:
c00158d1:	55                   	push   ebp
c00158d2:	89 e5                	mov    ebp,esp
c00158d4:	83 ec 18             	sub    esp,0x18
c00158d7:	fb                   	sti    
c00158d8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00158df:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00158e3:	0f 84 8a 00 00 00    	je     c0015973 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00158e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ec:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00158f2:	84 c0                	test   al,al
c00158f4:	75 11                	jne    c0015907 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00158f6:	e8 2c 69 00 00       	call   c001c227 <lockScheduler()>
c00158fb:	e8 62 6c 00 00       	call   c001c562 <schedule()>
c0015900:	e8 24 69 00 00       	call   c001c229 <unlockScheduler()>
c0015905:	eb e2                	jmp    c00158e9 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015907:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001590a:	8d 50 01             	lea    edx,[eax+0x1]
c001590d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015910:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015913:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015919:	88 10                	mov    BYTE PTR [eax],dl
c001591b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591e:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015924:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015927:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592a:	05 34 11 00 00       	add    eax,0x1134
c001592f:	83 ec 0c             	sub    esp,0xc
c0015932:	50                   	push   eax
c0015933:	e8 70 ad fe ff       	call   c00006a8 <strlen>
c0015938:	83 c4 10             	add    esp,0x10
c001593b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001593e:	81 c2 34 11 00 00    	add    edx,0x1134
c0015944:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015947:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001594a:	81 c2 34 11 00 00    	add    edx,0x1134
c0015950:	83 ec 04             	sub    esp,0x4
c0015953:	50                   	push   eax
c0015954:	51                   	push   ecx
c0015955:	52                   	push   edx
c0015956:	e8 c2 ac fe ff       	call   c000061d <memmove>
c001595b:	83 c4 10             	add    esp,0x10
c001595e:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015961:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015964:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015968:	0f 85 71 ff ff ff    	jne    c00158df <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c001596e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015971:	eb 03                	jmp    c0015976 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015973:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015976:	c9                   	leave  
c0015977:	c3                   	ret    

c0015978 <Keyboard::Keyboard(char const*)>:
c0015978:	83 ec 0c             	sub    esp,0xc
c001597b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001597f:	83 ec 08             	sub    esp,0x8
c0015982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015986:	50                   	push   eax
c0015987:	e8 f0 e2 ff ff       	call   c0013c7c <Device::Device(char const*)>
c001598c:	83 c4 10             	add    esp,0x10
c001598f:	ba 94 8c 02 c0       	mov    edx,0xc0028c94
c0015994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015998:	89 10                	mov    DWORD PTR [eax],edx
c001599a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001599e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00159a8:	c6 05 64 bc 02 c0 01 	mov    BYTE PTR ds:0xc002bc64,0x1
c00159af:	90                   	nop
c00159b0:	83 c4 0c             	add    esp,0xc
c00159b3:	c3                   	ret    

c00159b4 <Keyboard::~Keyboard()>:
c00159b4:	83 ec 0c             	sub    esp,0xc
c00159b7:	ba 94 8c 02 c0       	mov    edx,0xc0028c94
c00159bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159c0:	89 10                	mov    DWORD PTR [eax],edx
c00159c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159c6:	83 ec 0c             	sub    esp,0xc
c00159c9:	50                   	push   eax
c00159ca:	e8 8f df ff ff       	call   c001395e <Device::~Device()>
c00159cf:	83 c4 10             	add    esp,0x10
c00159d2:	90                   	nop
c00159d3:	83 c4 0c             	add    esp,0xc
c00159d6:	c3                   	ret    
c00159d7:	90                   	nop

c00159d8 <Keyboard::~Keyboard()>:
c00159d8:	83 ec 0c             	sub    esp,0xc
c00159db:	83 ec 0c             	sub    esp,0xc
c00159de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159e2:	e8 cd ff ff ff       	call   c00159b4 <Keyboard::~Keyboard()>
c00159e7:	83 c4 10             	add    esp,0x10
c00159ea:	83 ec 08             	sub    esp,0x8
c00159ed:	68 5c 01 00 00       	push   0x15c
c00159f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159f6:	e8 c2 cb ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c00159fb:	83 c4 10             	add    esp,0x10
c00159fe:	83 c4 0c             	add    esp,0xc
c0015a01:	c3                   	ret    

c0015a02 <LogicalDisk::close(int, int, void*)>:
c0015a02:	83 c8 ff             	or     eax,0xffffffff
c0015a05:	c3                   	ret    

c0015a06 <LogicalDisk::~LogicalDisk()>:
c0015a06:	83 ec 0c             	sub    esp,0xc
c0015a09:	ba 44 8d 02 c0       	mov    edx,0xc0028d44
c0015a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a12:	89 10                	mov    DWORD PTR [eax],edx
c0015a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a18:	83 ec 0c             	sub    esp,0xc
c0015a1b:	50                   	push   eax
c0015a1c:	e8 3d df ff ff       	call   c001395e <Device::~Device()>
c0015a21:	83 c4 10             	add    esp,0x10
c0015a24:	90                   	nop
c0015a25:	83 c4 0c             	add    esp,0xc
c0015a28:	c3                   	ret    
c0015a29:	90                   	nop

c0015a2a <LogicalDisk::~LogicalDisk()>:
c0015a2a:	83 ec 0c             	sub    esp,0xc
c0015a2d:	83 ec 0c             	sub    esp,0xc
c0015a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a34:	e8 cd ff ff ff       	call   c0015a06 <LogicalDisk::~LogicalDisk()>
c0015a39:	83 c4 10             	add    esp,0x10
c0015a3c:	83 ec 08             	sub    esp,0x8
c0015a3f:	68 74 01 00 00       	push   0x174
c0015a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a48:	e8 70 cb ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0015a4d:	83 c4 10             	add    esp,0x10
c0015a50:	83 c4 0c             	add    esp,0xc
c0015a53:	c3                   	ret    

c0015a54 <LogicalDisk::open(int, int, void*)>:
c0015a54:	83 ec 18             	sub    esp,0x18
c0015a57:	68 c0 8c 02 c0       	push   0xc0028cc0
c0015a5c:	e8 80 37 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c0015a61:	83 c8 ff             	or     eax,0xffffffff
c0015a64:	83 c4 1c             	add    esp,0x1c
c0015a67:	c3                   	ret    

c0015a68 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015a68:	53                   	push   ebx
c0015a69:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015a6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015a71:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015a75:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015a7b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015a81:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015a87:	77 10                	ja     c0015a99 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015a89:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015a8f:	89 d3                	mov    ebx,edx
c0015a91:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015a97:	72 05                	jb     c0015a9e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015a99:	83 c8 ff             	or     eax,0xffffffff
c0015a9c:	89 c2                	mov    edx,eax
c0015a9e:	5b                   	pop    ebx
c0015a9f:	c3                   	ret    

c0015aa0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015aa0:	56                   	push   esi
c0015aa1:	83 c8 ff             	or     eax,0xffffffff
c0015aa4:	53                   	push   ebx
c0015aa5:	89 c2                	mov    edx,eax
c0015aa7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015aab:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015aaf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015ab3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015ab9:	77 27                	ja     c0015ae2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015abb:	89 d8                	mov    eax,ebx
c0015abd:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015ac3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015ac9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ace:	89 c2                	mov    edx,eax
c0015ad0:	73 10                	jae    c0015ae2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015ad2:	89 c8                	mov    eax,ecx
c0015ad4:	89 da                	mov    edx,ebx
c0015ad6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015adc:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015ae2:	5b                   	pop    ebx
c0015ae3:	5e                   	pop    esi
c0015ae4:	c3                   	ret    
c0015ae5:	90                   	nop

c0015ae6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015ae6:	83 ec 1c             	sub    esp,0x1c
c0015ae9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015aed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015af1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015af5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015af9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015afd:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b00:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015b04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015b08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b0c:	83 ec 08             	sub    esp,0x8
c0015b0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b13:	50                   	push   eax
c0015b14:	e8 63 e1 ff ff       	call   c0013c7c <Device::Device(char const*)>
c0015b19:	83 c4 10             	add    esp,0x10
c0015b1c:	ba 44 8d 02 c0       	mov    edx,0xc0028d44
c0015b21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b25:	89 10                	mov    DWORD PTR [eax],edx
c0015b27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b2b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015b32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b36:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015b3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b41:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015b4b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015b4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015b57:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015b5d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015b63:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015b67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015b6a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015b6e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015b74:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015b7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b82:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015b88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b8c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015b96:	90                   	nop
c0015b97:	83 c4 1c             	add    esp,0x1c
c0015b9a:	c3                   	ret    
c0015b9b:	90                   	nop

c0015b9c <LogicalDisk::assignDriveLetter()>:
c0015b9c:	55                   	push   ebp
c0015b9d:	57                   	push   edi
c0015b9e:	56                   	push   esi
c0015b9f:	53                   	push   ebx
c0015ba0:	83 ec 14             	sub    esp,0x14
c0015ba3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015ba7:	8b 3d a0 c0 02 c0    	mov    edi,DWORD PTR ds:0xc002c0a0
c0015bad:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015bb3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015bb7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015bbd:	8b 3d a4 c0 02 c0    	mov    edi,DWORD PTR ds:0xc002c0a4
c0015bc3:	3c 01                	cmp    al,0x1
c0015bc5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015bc9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015bcd:	19 c0                	sbb    eax,eax
c0015bcf:	83 e0 02             	and    eax,0x2
c0015bd2:	83 c0 41             	add    eax,0x41
c0015bd5:	0f be e8             	movsx  ebp,al
c0015bd8:	3c 43                	cmp    al,0x43
c0015bda:	75 10                	jne    c0015bec <LogicalDisk::assignDriveLetter()+0x50>
c0015bdc:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015be3:	75 5d                	jne    c0015c42 <LogicalDisk::assignDriveLetter()+0xa6>
c0015be5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015bea:	75 56                	jne    c0015c42 <LogicalDisk::assignDriveLetter()+0xa6>
c0015bec:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015bef:	ba 01 00 00 00       	mov    edx,0x1
c0015bf4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015bf8:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015bfc:	d3 e2                	shl    edx,cl
c0015bfe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015c02:	89 d7                	mov    edi,edx
c0015c04:	89 d6                	mov    esi,edx
c0015c06:	c1 ff 1f             	sar    edi,0x1f
c0015c09:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015c0d:	21 f9                	and    ecx,edi
c0015c0f:	09 d1                	or     ecx,edx
c0015c11:	75 2f                	jne    c0015c42 <LogicalDisk::assignDriveLetter()+0xa6>
c0015c13:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015c17:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015c1b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015c21:	09 f2                	or     edx,esi
c0015c23:	89 15 a0 c0 02 c0    	mov    DWORD PTR ds:0xc002c0a0,edx
c0015c29:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c2d:	09 fa                	or     edx,edi
c0015c2f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015c33:	89 15 a4 c0 02 c0    	mov    DWORD PTR ds:0xc002c0a4,edx
c0015c39:	89 1c bd c0 c0 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3f40],ebx
c0015c40:	eb 08                	jmp    c0015c4a <LogicalDisk::assignDriveLetter()+0xae>
c0015c42:	45                   	inc    ebp
c0015c43:	40                   	inc    eax
c0015c44:	3c 5b                	cmp    al,0x5b
c0015c46:	75 90                	jne    c0015bd8 <LogicalDisk::assignDriveLetter()+0x3c>
c0015c48:	31 c0                	xor    eax,eax
c0015c4a:	83 c4 14             	add    esp,0x14
c0015c4d:	5b                   	pop    ebx
c0015c4e:	5e                   	pop    esi
c0015c4f:	5f                   	pop    edi
c0015c50:	5d                   	pop    ebp
c0015c51:	c3                   	ret    

c0015c52 <LogicalDisk::mount()>:
c0015c52:	56                   	push   esi
c0015c53:	53                   	push   ebx
c0015c54:	51                   	push   ecx
c0015c55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015c59:	8b 1d 28 bc 02 c0    	mov    ebx,DWORD PTR ds:0xc002bc28
c0015c5f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015c69:	85 db                	test   ebx,ebx
c0015c6b:	74 50                	je     c0015cbd <LogicalDisk::mount()+0x6b>
c0015c6d:	e8 a0 65 00 00       	call   c001c212 <getIRQNestingLevel()>
c0015c72:	52                   	push   edx
c0015c73:	52                   	push   edx
c0015c74:	50                   	push   eax
c0015c75:	68 e4 8c 02 c0       	push   0xc0028ce4
c0015c7a:	e8 1e ca ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0015c7f:	83 c4 0c             	add    esp,0xc
c0015c82:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015c89:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015c8b:	83 e8 41             	sub    eax,0x41
c0015c8e:	50                   	push   eax
c0015c8f:	56                   	push   esi
c0015c90:	53                   	push   ebx
c0015c91:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015c94:	83 c4 10             	add    esp,0x10
c0015c97:	84 c0                	test   al,al
c0015c99:	74 08                	je     c0015ca3 <LogicalDisk::mount()+0x51>
c0015c9b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015ca1:	eb 1c                	jmp    c0015cbf <LogicalDisk::mount()+0x6d>
c0015ca3:	e8 6a 65 00 00       	call   c001c212 <getIRQNestingLevel()>
c0015ca8:	51                   	push   ecx
c0015ca9:	51                   	push   ecx
c0015caa:	50                   	push   eax
c0015cab:	68 ff 8c 02 c0       	push   0xc0028cff
c0015cb0:	e8 e8 c9 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0015cb5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015cb8:	83 c4 10             	add    esp,0x10
c0015cbb:	eb ac                	jmp    c0015c69 <LogicalDisk::mount()+0x17>
c0015cbd:	31 c0                	xor    eax,eax
c0015cbf:	5a                   	pop    edx
c0015cc0:	5b                   	pop    ebx
c0015cc1:	5e                   	pop    esi
c0015cc2:	c3                   	ret    
c0015cc3:	90                   	nop

c0015cc4 <LogicalDisk::unmount()>:
c0015cc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015cc8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015cd2:	c3                   	ret    
c0015cd3:	90                   	nop

c0015cd4 <LogicalDisk::unassignDriveLetter()>:
c0015cd4:	57                   	push   edi
c0015cd5:	56                   	push   esi
c0015cd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015cda:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015ce1:	84 c9                	test   cl,cl
c0015ce3:	75 0f                	jne    c0015cf4 <LogicalDisk::unassignDriveLetter()+0x20>
c0015ce5:	c7 44 24 0c 1a 8d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028d1a
c0015ced:	5e                   	pop    esi
c0015cee:	5f                   	pop    edi
c0015cef:	e9 ed 34 00 00       	jmp    c00191e1 <Krnl::panic(char const*)>
c0015cf4:	83 e9 41             	sub    ecx,0x41
c0015cf7:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015cfe:	b8 01 00 00 00       	mov    eax,0x1
c0015d03:	c7 04 8d c0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd3f40],0x0
c0015d0e:	d3 e0                	shl    eax,cl
c0015d10:	89 c7                	mov    edi,eax
c0015d12:	f7 d0                	not    eax
c0015d14:	c1 ff 1f             	sar    edi,0x1f
c0015d17:	21 05 a0 c0 02 c0    	and    DWORD PTR ds:0xc002c0a0,eax
c0015d1d:	89 fe                	mov    esi,edi
c0015d1f:	f7 d6                	not    esi
c0015d21:	21 35 a4 c0 02 c0    	and    DWORD PTR ds:0xc002c0a4,esi
c0015d27:	5e                   	pop    esi
c0015d28:	5f                   	pop    edi
c0015d29:	c3                   	ret    

c0015d2a <LogicalDisk::read(unsigned long long, int, void*)>:
c0015d2a:	57                   	push   edi
c0015d2b:	56                   	push   esi
c0015d2c:	53                   	push   ebx
c0015d2d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015d31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d35:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015d39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d3d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015d43:	77 41                	ja     c0015d86 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015d45:	99                   	cdq    
c0015d46:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015d4c:	01 c8                	add    eax,ecx
c0015d4e:	11 da                	adc    edx,ebx
c0015d50:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015d56:	19 d7                	sbb    edi,edx
c0015d58:	72 33                	jb     c0015d8d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015d5a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015d60:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015d66:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015d6a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015d6e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015d74:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015d7e:	5b                   	pop    ebx
c0015d7f:	5e                   	pop    esi
c0015d80:	5f                   	pop    edi
c0015d81:	e9 f8 09 00 00       	jmp    c001677e <VCache::read(unsigned long long, int, void*)>
c0015d86:	b8 05 00 00 00       	mov    eax,0x5
c0015d8b:	eb 05                	jmp    c0015d92 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015d8d:	b8 07 00 00 00       	mov    eax,0x7
c0015d92:	5b                   	pop    ebx
c0015d93:	5e                   	pop    esi
c0015d94:	5f                   	pop    edi
c0015d95:	c3                   	ret    

c0015d96 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015d96:	57                   	push   edi
c0015d97:	56                   	push   esi
c0015d98:	53                   	push   ebx
c0015d99:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015d9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015da1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015da5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015da9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015daf:	77 41                	ja     c0015df2 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015db1:	99                   	cdq    
c0015db2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015db8:	01 c8                	add    eax,ecx
c0015dba:	11 da                	adc    edx,ebx
c0015dbc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015dc2:	19 d7                	sbb    edi,edx
c0015dc4:	72 33                	jb     c0015df9 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015dc6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015dcc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015dd2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015dd6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015dda:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015de0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015de6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015dea:	5b                   	pop    ebx
c0015deb:	5e                   	pop    esi
c0015dec:	5f                   	pop    edi
c0015ded:	e9 a8 08 00 00       	jmp    c001669a <VCache::write(unsigned long long, int, void*)>
c0015df2:	b8 05 00 00 00       	mov    eax,0x5
c0015df7:	eb 05                	jmp    c0015dfe <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015df9:	b8 07 00 00 00       	mov    eax,0x7
c0015dfe:	5b                   	pop    ebx
c0015dff:	5e                   	pop    esi
c0015e00:	5f                   	pop    edi
c0015e01:	c3                   	ret    

c0015e02 <Mouse::Mouse(char const*)>:
c0015e02:	83 ec 0c             	sub    esp,0xc
c0015e05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e09:	83 ec 08             	sub    esp,0x8
c0015e0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e10:	50                   	push   eax
c0015e11:	e8 66 de ff ff       	call   c0013c7c <Device::Device(char const*)>
c0015e16:	83 c4 10             	add    esp,0x10
c0015e19:	ba 70 8d 02 c0       	mov    edx,0xc0028d70
c0015e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e22:	89 10                	mov    DWORD PTR [eax],edx
c0015e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e28:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015e32:	90                   	nop
c0015e33:	83 c4 0c             	add    esp,0xc
c0015e36:	c3                   	ret    
c0015e37:	90                   	nop

c0015e38 <Mouse::~Mouse()>:
c0015e38:	83 ec 0c             	sub    esp,0xc
c0015e3b:	ba 70 8d 02 c0       	mov    edx,0xc0028d70
c0015e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e44:	89 10                	mov    DWORD PTR [eax],edx
c0015e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e4a:	83 ec 0c             	sub    esp,0xc
c0015e4d:	50                   	push   eax
c0015e4e:	e8 0b db ff ff       	call   c001395e <Device::~Device()>
c0015e53:	83 c4 10             	add    esp,0x10
c0015e56:	90                   	nop
c0015e57:	83 c4 0c             	add    esp,0xc
c0015e5a:	c3                   	ret    
c0015e5b:	90                   	nop

c0015e5c <Mouse::~Mouse()>:
c0015e5c:	83 ec 0c             	sub    esp,0xc
c0015e5f:	83 ec 0c             	sub    esp,0xc
c0015e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e66:	e8 cd ff ff ff       	call   c0015e38 <Mouse::~Mouse()>
c0015e6b:	83 c4 10             	add    esp,0x10
c0015e6e:	83 ec 08             	sub    esp,0x8
c0015e71:	68 58 01 00 00       	push   0x158
c0015e76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e7a:	e8 3e c7 ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0015e7f:	83 c4 10             	add    esp,0x10
c0015e82:	83 c4 0c             	add    esp,0xc
c0015e85:	c3                   	ret    

c0015e86 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015e86:	55                   	push   ebp
c0015e87:	57                   	push   edi
c0015e88:	56                   	push   esi
c0015e89:	53                   	push   ebx
c0015e8a:	81 ec 28 01 00 00    	sub    esp,0x128
c0015e90:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015e97:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015e9e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015ea5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015eac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015eb0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015eb4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015ebb:	e8 b8 de ff ff       	call   c0013d78 <Device::getName()>
c0015ec0:	5a                   	pop    edx
c0015ec1:	59                   	pop    ecx
c0015ec2:	50                   	push   eax
c0015ec3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015ec7:	55                   	push   ebp
c0015ec8:	e8 5d a8 fe ff       	call   c000072a <strcpy>
c0015ecd:	5b                   	pop    ebx
c0015ece:	58                   	pop    eax
c0015ecf:	68 94 8d 02 c0       	push   0xc0028d94
c0015ed4:	55                   	push   ebp
c0015ed5:	e8 07 a9 fe ff       	call   c00007e1 <strcat>
c0015eda:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015ee1:	e8 ea 95 ff ff       	call   c000f4d0 <malloc>
c0015ee6:	83 c4 0c             	add    esp,0xc
c0015ee9:	89 c3                	mov    ebx,eax
c0015eeb:	57                   	push   edi
c0015eec:	56                   	push   esi
c0015eed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ef1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ef5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015efc:	55                   	push   ebp
c0015efd:	50                   	push   eax
c0015efe:	e8 e3 fb ff ff       	call   c0015ae6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015f03:	83 c4 14             	add    esp,0x14
c0015f06:	53                   	push   ebx
c0015f07:	e8 90 fc ff ff       	call   c0015b9c <LogicalDisk::assignDriveLetter()>
c0015f0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f0f:	e8 3e fd ff ff       	call   c0015c52 <LogicalDisk::mount()>
c0015f14:	58                   	pop    eax
c0015f15:	5a                   	pop    edx
c0015f16:	53                   	push   ebx
c0015f17:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015f1e:	e8 69 db ff ff       	call   c0013a8c <Device::addChild(Device*)>
c0015f23:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015f29:	5b                   	pop    ebx
c0015f2a:	5e                   	pop    esi
c0015f2b:	5f                   	pop    edi
c0015f2c:	5d                   	pop    ebp
c0015f2d:	c3                   	ret    

c0015f2e <createPartitionsForDisk(PhysicalDisk*)>:
c0015f2e:	55                   	push   ebp
c0015f2f:	57                   	push   edi
c0015f30:	56                   	push   esi
c0015f31:	53                   	push   ebx
c0015f32:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015f38:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015f3f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015f45:	3d 00 02 00 00       	cmp    eax,0x200
c0015f4a:	74 27                	je     c0015f73 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015f4c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015f52:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015f58:	83 ec 10             	sub    esp,0x10
c0015f5b:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015f5f:	99                   	cdq    
c0015f60:	c1 e6 0a             	shl    esi,0xa
c0015f63:	52                   	push   edx
c0015f64:	89 fd                	mov    ebp,edi
c0015f66:	50                   	push   eax
c0015f67:	55                   	push   ebp
c0015f68:	56                   	push   esi
c0015f69:	e8 be e7 00 00       	call   c002472c <__udivdi3>
c0015f6e:	e9 b1 00 00 00       	jmp    c0016024 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015f73:	83 ec 0c             	sub    esp,0xc
c0015f76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f78:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015f7c:	56                   	push   esi
c0015f7d:	6a 01                	push   0x1
c0015f7f:	6a 00                	push   0x0
c0015f81:	6a 00                	push   0x0
c0015f83:	53                   	push   ebx
c0015f84:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015f87:	83 c4 20             	add    esp,0x20
c0015f8a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015f92:	75 0a                	jne    c0015f9e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015f94:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015f9c:	74 2c                	je     c0015fca <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015f9e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015fa4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015faa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015fb0:	83 ec 10             	sub    esp,0x10
c0015fb3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015fb7:	89 f7                	mov    edi,esi
c0015fb9:	c1 e0 0a             	shl    eax,0xa
c0015fbc:	c1 ff 1f             	sar    edi,0x1f
c0015fbf:	57                   	push   edi
c0015fc0:	56                   	push   esi
c0015fc1:	52                   	push   edx
c0015fc2:	50                   	push   eax
c0015fc3:	e8 64 e7 00 00       	call   c002472c <__udivdi3>
c0015fc8:	eb 5a                	jmp    c0016024 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015fca:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015fd1:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015fd8:	83 e1 7f             	and    ecx,0x7f
c0015fdb:	83 e0 7f             	and    eax,0x7f
c0015fde:	01 c1                	add    ecx,eax
c0015fe0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015fe7:	83 e0 7f             	and    eax,0x7f
c0015fea:	01 c1                	add    ecx,eax
c0015fec:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015ff3:	83 e0 7f             	and    eax,0x7f
c0015ff6:	00 c1                	add    cl,al
c0015ff8:	74 41                	je     c001603b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015ffa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016000:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016006:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001600c:	83 ec 10             	sub    esp,0x10
c001600f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016013:	89 f7                	mov    edi,esi
c0016015:	c1 e0 0a             	shl    eax,0xa
c0016018:	c1 ff 1f             	sar    edi,0x1f
c001601b:	57                   	push   edi
c001601c:	56                   	push   esi
c001601d:	52                   	push   edx
c001601e:	50                   	push   eax
c001601f:	e8 08 e7 00 00       	call   c002472c <__udivdi3>
c0016024:	83 c4 14             	add    esp,0x14
c0016027:	52                   	push   edx
c0016028:	50                   	push   eax
c0016029:	6a 00                	push   0x0
c001602b:	6a 00                	push   0x0
c001602d:	53                   	push   ebx
c001602e:	e8 53 fe ff ff       	call   c0015e86 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016033:	83 c4 20             	add    esp,0x20
c0016036:	e9 79 01 00 00       	jmp    c00161b4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001603b:	89 f0                	mov    eax,esi
c001603d:	31 f6                	xor    esi,esi
c001603f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016046:	75 02                	jne    c001604a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016048:	89 f1                	mov    ecx,esi
c001604a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016051:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016058:	c1 e2 08             	shl    edx,0x8
c001605b:	c1 e7 10             	shl    edi,0x10
c001605e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016066:	09 fa                	or     edx,edi
c0016068:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016070:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016077:	83 c0 10             	add    eax,0x10
c001607a:	09 fa                	or     edx,edi
c001607c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016083:	c1 e7 18             	shl    edi,0x18
c0016086:	09 fa                	or     edx,edi
c0016088:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001608f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016093:	c1 e7 10             	shl    edi,0x10
c0016096:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001609d:	c1 e2 08             	shl    edx,0x8
c00160a0:	09 fa                	or     edx,edi
c00160a2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00160a9:	09 fa                	or     edx,edi
c00160ab:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00160b2:	c1 e7 18             	shl    edi,0x18
c00160b5:	09 fa                	or     edx,edi
c00160b7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00160bb:	46                   	inc    esi
c00160bc:	83 fe 04             	cmp    esi,0x4
c00160bf:	0f 85 7a ff ff ff    	jne    c001603f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00160c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160c9:	83 f0 01             	xor    eax,0x1
c00160cc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00160d0:	75 57                	jne    c0016129 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00160d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00160d6:	83 f0 01             	xor    eax,0x1
c00160d9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00160dd:	75 4a                	jne    c0016129 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00160df:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00160e3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00160eb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00160f3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00160f9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00160ff:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016105:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016109:	89 f7                	mov    edi,esi
c001610b:	c1 e0 0a             	shl    eax,0xa
c001610e:	c1 ff 1f             	sar    edi,0x1f
c0016111:	57                   	push   edi
c0016112:	56                   	push   esi
c0016113:	52                   	push   edx
c0016114:	50                   	push   eax
c0016115:	e8 12 e6 00 00       	call   c002472c <__udivdi3>
c001611a:	83 c4 10             	add    esp,0x10
c001611d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016121:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016125:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016129:	84 c9                	test   cl,cl
c001612b:	74 53                	je     c0016180 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001612d:	0f b6 c9             	movzx  ecx,cl
c0016130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016134:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016138:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001613c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016140:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016144:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016148:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001614c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016150:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016154:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016158:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001615c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016160:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016164:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016168:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001616c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016170:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016174:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016178:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001617c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016180:	31 ed                	xor    ebp,ebp
c0016182:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016186:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001618a:	89 f8                	mov    eax,edi
c001618c:	09 f0                	or     eax,esi
c001618e:	74 1e                	je     c00161ae <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016190:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016194:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016198:	89 d1                	mov    ecx,edx
c001619a:	09 c1                	or     ecx,eax
c001619c:	74 10                	je     c00161ae <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001619e:	83 ec 0c             	sub    esp,0xc
c00161a1:	57                   	push   edi
c00161a2:	56                   	push   esi
c00161a3:	52                   	push   edx
c00161a4:	50                   	push   eax
c00161a5:	53                   	push   ebx
c00161a6:	e8 db fc ff ff       	call   c0015e86 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00161ab:	83 c4 20             	add    esp,0x20
c00161ae:	45                   	inc    ebp
c00161af:	83 fd 04             	cmp    ebp,0x4
c00161b2:	75 ce                	jne    c0016182 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00161b4:	81 c4 5c 02 00 00    	add    esp,0x25c
c00161ba:	5b                   	pop    ebx
c00161bb:	5e                   	pop    esi
c00161bc:	5f                   	pop    edi
c00161bd:	5d                   	pop    ebp
c00161be:	c3                   	ret    
c00161bf:	90                   	nop

c00161c0 <Serial::Serial(char const*)>:
c00161c0:	83 ec 0c             	sub    esp,0xc
c00161c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161c7:	83 ec 08             	sub    esp,0x8
c00161ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161ce:	50                   	push   eax
c00161cf:	e8 a8 da ff ff       	call   c0013c7c <Device::Device(char const*)>
c00161d4:	83 c4 10             	add    esp,0x10
c00161d7:	ba a8 8d 02 c0       	mov    edx,0xc0028da8
c00161dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161e0:	89 10                	mov    DWORD PTR [eax],edx
c00161e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161e6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00161f0:	90                   	nop
c00161f1:	83 c4 0c             	add    esp,0xc
c00161f4:	c3                   	ret    
c00161f5:	90                   	nop

c00161f6 <Serial::~Serial()>:
c00161f6:	83 ec 0c             	sub    esp,0xc
c00161f9:	ba a8 8d 02 c0       	mov    edx,0xc0028da8
c00161fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016202:	89 10                	mov    DWORD PTR [eax],edx
c0016204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016208:	83 ec 0c             	sub    esp,0xc
c001620b:	50                   	push   eax
c001620c:	e8 4d d7 ff ff       	call   c001395e <Device::~Device()>
c0016211:	83 c4 10             	add    esp,0x10
c0016214:	90                   	nop
c0016215:	83 c4 0c             	add    esp,0xc
c0016218:	c3                   	ret    
c0016219:	90                   	nop

c001621a <Serial::~Serial()>:
c001621a:	83 ec 0c             	sub    esp,0xc
c001621d:	83 ec 0c             	sub    esp,0xc
c0016220:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016224:	e8 cd ff ff ff       	call   c00161f6 <Serial::~Serial()>
c0016229:	83 c4 10             	add    esp,0x10
c001622c:	83 ec 08             	sub    esp,0x8
c001622f:	68 58 01 00 00       	push   0x158
c0016234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016238:	e8 80 c3 ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c001623d:	83 c4 10             	add    esp,0x10
c0016240:	83 c4 0c             	add    esp,0xc
c0016243:	c3                   	ret    

c0016244 <Timer::Timer(char const*)>:
c0016244:	83 ec 0c             	sub    esp,0xc
c0016247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001624b:	83 ec 08             	sub    esp,0x8
c001624e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016252:	50                   	push   eax
c0016253:	e8 24 da ff ff       	call   c0013c7c <Device::Device(char const*)>
c0016258:	83 c4 10             	add    esp,0x10
c001625b:	ba ec 8d 02 c0       	mov    edx,0xc0028dec
c0016260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016264:	89 10                	mov    DWORD PTR [eax],edx
c0016266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001626a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016274:	90                   	nop
c0016275:	83 c4 0c             	add    esp,0xc
c0016278:	c3                   	ret    
c0016279:	90                   	nop

c001627a <Timer::~Timer()>:
c001627a:	83 ec 0c             	sub    esp,0xc
c001627d:	ba ec 8d 02 c0       	mov    edx,0xc0028dec
c0016282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016286:	89 10                	mov    DWORD PTR [eax],edx
c0016288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001628c:	83 ec 0c             	sub    esp,0xc
c001628f:	50                   	push   eax
c0016290:	e8 c9 d6 ff ff       	call   c001395e <Device::~Device()>
c0016295:	83 c4 10             	add    esp,0x10
c0016298:	90                   	nop
c0016299:	83 c4 0c             	add    esp,0xc
c001629c:	c3                   	ret    
c001629d:	90                   	nop

c001629e <Timer::~Timer()>:
c001629e:	83 ec 0c             	sub    esp,0xc
c00162a1:	83 ec 0c             	sub    esp,0xc
c00162a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162a8:	e8 cd ff ff ff       	call   c001627a <Timer::~Timer()>
c00162ad:	83 c4 10             	add    esp,0x10
c00162b0:	83 ec 08             	sub    esp,0x8
c00162b3:	68 5c 01 00 00       	push   0x15c
c00162b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162bc:	e8 fc c2 ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c00162c1:	83 c4 10             	add    esp,0x10
c00162c4:	83 c4 0c             	add    esp,0xc
c00162c7:	c3                   	ret    

c00162c8 <Timer::read()>:
c00162c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162cc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00162d2:	c3                   	ret    

c00162d3 <timerHandler(unsigned long long)>:
c00162d3:	55                   	push   ebp
c00162d4:	57                   	push   edi
c00162d5:	56                   	push   esi
c00162d6:	53                   	push   ebx
c00162d7:	83 ec 0c             	sub    esp,0xc
c00162da:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00162de:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00162e2:	01 35 30 c1 02 c0    	add    DWORD PTR ds:0xc002c130,esi
c00162e8:	11 3d 34 c1 02 c0    	adc    DWORD PTR ds:0xc002c134,edi
c00162ee:	80 3d cd ba 02 c0 00 	cmp    BYTE PTR ds:0xc002bacd,0x0
c00162f5:	0f 84 07 01 00 00    	je     c0016402 <timerHandler(unsigned long long)+0x12f>
c00162fb:	e8 4e 5f 00 00       	call   c001c24e <lockStuff()>
c0016300:	83 ec 0c             	sub    esp,0xc
c0016303:	68 bc cf 02 c0       	push   0xc002cfbc
c0016308:	e8 91 04 01 00       	call   c002679e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001630d:	c7 04 24 bc cf 02 c0 	mov    DWORD PTR [esp],0xc002cfbc
c0016314:	89 c3                	mov    ebx,eax
c0016316:	e8 8b 04 01 00       	call   c00267a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001631b:	83 c4 10             	add    esp,0x10
c001631e:	84 c0                	test   al,al
c0016320:	74 60                	je     c0016382 <timerHandler(unsigned long long)+0xaf>
c0016322:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016328:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c001632b:	85 c0                	test   eax,eax
c001632d:	0f 85 91 00 00 00    	jne    c00163c4 <timerHandler(unsigned long long)+0xf1>
c0016333:	e9 be 00 00 00       	jmp    c00163f6 <timerHandler(unsigned long long)+0x123>
c0016338:	83 ec 0c             	sub    esp,0xc
c001633b:	55                   	push   ebp
c001633c:	e8 fd 64 00 00       	call   c001c83e <unblockTask(ThreadControlBlock*)>
c0016341:	83 c4 10             	add    esp,0x10
c0016344:	39 eb                	cmp    ebx,ebp
c0016346:	75 12                	jne    c001635a <timerHandler(unsigned long long)+0x87>
c0016348:	83 ec 0c             	sub    esp,0xc
c001634b:	68 bc cf 02 c0       	push   0xc002cfbc
c0016350:	e8 49 04 01 00       	call   c002679e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016355:	89 c3                	mov    ebx,eax
c0016357:	83 c4 10             	add    esp,0x10
c001635a:	83 ec 0c             	sub    esp,0xc
c001635d:	68 bc cf 02 c0       	push   0xc002cfbc
c0016362:	e8 3f 04 01 00       	call   c00267a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016367:	83 c4 10             	add    esp,0x10
c001636a:	84 c0                	test   al,al
c001636c:	75 b4                	jne    c0016322 <timerHandler(unsigned long long)+0x4f>
c001636e:	83 ec 0c             	sub    esp,0xc
c0016371:	68 bc cf 02 c0       	push   0xc002cfbc
c0016376:	e8 23 04 01 00       	call   c002679e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001637b:	83 c4 10             	add    esp,0x10
c001637e:	39 d8                	cmp    eax,ebx
c0016380:	74 a0                	je     c0016322 <timerHandler(unsigned long long)+0x4f>
c0016382:	83 ec 0c             	sub    esp,0xc
c0016385:	68 bc cf 02 c0       	push   0xc002cfbc
c001638a:	e8 0f 04 01 00       	call   c002679e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001638f:	c7 04 24 bc cf 02 c0 	mov    DWORD PTR [esp],0xc002cfbc
c0016396:	89 c5                	mov    ebp,eax
c0016398:	e8 25 04 01 00       	call   c00267c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001639d:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00163a0:	83 c4 10             	add    esp,0x10
c00163a3:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00163a6:	39 15 30 c1 02 c0    	cmp    DWORD PTR ds:0xc002c130,edx
c00163ac:	a1 34 c1 02 c0       	mov    eax,ds:0xc002c134
c00163b1:	19 c8                	sbb    eax,ecx
c00163b3:	73 83                	jae    c0016338 <timerHandler(unsigned long long)+0x65>
c00163b5:	50                   	push   eax
c00163b6:	50                   	push   eax
c00163b7:	55                   	push   ebp
c00163b8:	68 bc cf 02 c0       	push   0xc002cfbc
c00163bd:	e8 ae 04 01 00       	call   c0026870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00163c2:	eb 93                	jmp    c0016357 <timerHandler(unsigned long long)+0x84>
c00163c4:	80 3d cc ba 02 c0 00 	cmp    BYTE PTR ds:0xc002bacc,0x0
c00163cb:	74 29                	je     c00163f6 <timerHandler(unsigned long long)+0x123>
c00163cd:	39 c6                	cmp    esi,eax
c00163cf:	bb 00 00 00 00       	mov    ebx,0x0
c00163d4:	19 df                	sbb    edi,ebx
c00163d6:	72 19                	jb     c00163f1 <timerHandler(unsigned long long)+0x11e>
c00163d8:	e8 4a 5e 00 00       	call   c001c227 <lockScheduler()>
c00163dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163e2:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00163e5:	e8 78 61 00 00       	call   c001c562 <schedule()>
c00163ea:	e8 3a 5e 00 00       	call   c001c229 <unlockScheduler()>
c00163ef:	eb 05                	jmp    c00163f6 <timerHandler(unsigned long long)+0x123>
c00163f1:	29 f0                	sub    eax,esi
c00163f3:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00163f6:	83 c4 0c             	add    esp,0xc
c00163f9:	5b                   	pop    ebx
c00163fa:	5e                   	pop    esi
c00163fb:	5f                   	pop    edi
c00163fc:	5d                   	pop    ebp
c00163fd:	e9 e5 61 00 00       	jmp    c001c5e7 <unlockStuff()>
c0016402:	83 c4 0c             	add    esp,0xc
c0016405:	5b                   	pop    ebx
c0016406:	5e                   	pop    esi
c0016407:	5f                   	pop    edi
c0016408:	5d                   	pop    ebp
c0016409:	c3                   	ret    

c001640a <setupTimer(int)>:
c001640a:	57                   	push   edi
c001640b:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0016410:	56                   	push   esi
c0016411:	53                   	push   ebx
c0016412:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016416:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001641c:	83 ec 0c             	sub    esp,0xc
c001641f:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016425:	e8 4e d9 ff ff       	call   c0013d78 <Device::getName()>
c001642a:	83 c4 10             	add    esp,0x10
c001642d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016430:	0f 85 8d 00 00 00    	jne    c00164c3 <setupTimer(int)+0xb9>
c0016436:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c001643b:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016442:	74 7f                	je     c00164c3 <setupTimer(int)+0xb9>
c0016444:	83 ec 0c             	sub    esp,0xc
c0016447:	68 5c 01 00 00       	push   0x15c
c001644c:	e8 7f 90 ff ff       	call   c000f4d0 <malloc>
c0016451:	89 04 24             	mov    DWORD PTR [esp],eax
c0016454:	89 c3                	mov    ebx,eax
c0016456:	e8 ad de 00 00       	call   c0024308 <PIT::PIT()>
c001645b:	59                   	pop    ecx
c001645c:	5f                   	pop    edi
c001645d:	53                   	push   ebx
c001645e:	ff 35 c8 ba 02 c0    	push   DWORD PTR ds:0xc002bac8
c0016464:	e8 23 d6 ff ff       	call   c0013a8c <Device::addChild(Device*)>
c0016469:	8b 03                	mov    eax,DWORD PTR [ebx]
c001646b:	6a 00                	push   0x0
c001646d:	6a 00                	push   0x0
c001646f:	56                   	push   esi
c0016470:	53                   	push   ebx
c0016471:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016474:	83 c4 14             	add    esp,0x14
c0016477:	68 60 01 00 00       	push   0x160
c001647c:	e8 4f 90 ff ff       	call   c000f4d0 <malloc>
c0016481:	89 04 24             	mov    DWORD PTR [esp],eax
c0016484:	89 c7                	mov    edi,eax
c0016486:	e8 2d dd 00 00       	call   c00241b8 <APICTimer::APICTimer()>
c001648b:	6a 00                	push   0x0
c001648d:	6a 00                	push   0x0
c001648f:	56                   	push   esi
c0016490:	57                   	push   edi
c0016491:	e8 24 dc 00 00       	call   c00240ba <APICTimer::open(int, int, void*)>
c0016496:	83 c4 20             	add    esp,0x20
c0016499:	8b 03                	mov    eax,DWORD PTR [ebx]
c001649b:	6a 00                	push   0x0
c001649d:	6a 00                	push   0x0
c001649f:	6a 00                	push   0x0
c00164a1:	53                   	push   ebx
c00164a2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00164a5:	58                   	pop    eax
c00164a6:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c00164ab:	5a                   	pop    edx
c00164ac:	57                   	push   edi
c00164ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00164b3:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00164b9:	e8 ce d5 ff ff       	call   c0013a8c <Device::addChild(Device*)>
c00164be:	83 c4 10             	add    esp,0x10
c00164c1:	eb 33                	jmp    c00164f6 <setupTimer(int)+0xec>
c00164c3:	83 ec 0c             	sub    esp,0xc
c00164c6:	68 5c 01 00 00       	push   0x15c
c00164cb:	e8 00 90 ff ff       	call   c000f4d0 <malloc>
c00164d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00164d3:	89 c3                	mov    ebx,eax
c00164d5:	e8 2e de 00 00       	call   c0024308 <PIT::PIT()>
c00164da:	58                   	pop    eax
c00164db:	5a                   	pop    edx
c00164dc:	53                   	push   ebx
c00164dd:	ff 35 c8 ba 02 c0    	push   DWORD PTR ds:0xc002bac8
c00164e3:	e8 a4 d5 ff ff       	call   c0013a8c <Device::addChild(Device*)>
c00164e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00164ea:	6a 00                	push   0x0
c00164ec:	6a 00                	push   0x0
c00164ee:	56                   	push   esi
c00164ef:	53                   	push   ebx
c00164f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00164f3:	83 c4 20             	add    esp,0x20
c00164f6:	89 d8                	mov    eax,ebx
c00164f8:	5b                   	pop    ebx
c00164f9:	5e                   	pop    esi
c00164fa:	5f                   	pop    edi
c00164fb:	c3                   	ret    

c00164fc <VCache::VCache(PhysicalDisk*)>:
c00164fc:	53                   	push   ebx
c00164fd:	83 ec 18             	sub    esp,0x18
c0016500:	ba 1c 8e 02 c0       	mov    edx,0xc0028e1c
c0016505:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016509:	89 10                	mov    DWORD PTR [eax],edx
c001650b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001650f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016516:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001651a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016521:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016525:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001652c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016533:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016537:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001653e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016545:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016549:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016550:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016554:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016558:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016560:	83 ec 0c             	sub    esp,0xc
c0016563:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016567:	e8 64 8f ff ff       	call   c000f4d0 <malloc>
c001656c:	83 c4 10             	add    esp,0x10
c001656f:	89 c3                	mov    ebx,eax
c0016571:	83 ec 0c             	sub    esp,0xc
c0016574:	53                   	push   ebx
c0016575:	e8 cc 5d 00 00       	call   c001c346 <Mutex::Mutex()>
c001657a:	83 c4 10             	add    esp,0x10
c001657d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016581:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016584:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016588:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001658c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001658f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016593:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001659a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001659e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00165a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165a8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00165ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00165af:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00165b5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00165bb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165bf:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00165c2:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00165c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165c9:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00165cd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00165d1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00165d7:	c1 e0 06             	shl    eax,0x6
c00165da:	83 ec 0c             	sub    esp,0xc
c00165dd:	50                   	push   eax
c00165de:	e8 ed 8e ff ff       	call   c000f4d0 <malloc>
c00165e3:	83 c4 10             	add    esp,0x10
c00165e6:	89 c2                	mov    edx,eax
c00165e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165ec:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00165ef:	90                   	nop
c00165f0:	83 c4 18             	add    esp,0x18
c00165f3:	5b                   	pop    ebx
c00165f4:	c3                   	ret    
c00165f5:	90                   	nop

c00165f6 <VCache::writeWriteBuffer()>:
c00165f6:	53                   	push   ebx
c00165f7:	83 ec 14             	sub    esp,0x14
c00165fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00165fe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016601:	8b 10                	mov    edx,DWORD PTR [eax]
c0016603:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016606:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016609:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001660c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001660f:	50                   	push   eax
c0016610:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016613:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001661a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016621:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016625:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001662c:	83 c4 28             	add    esp,0x28
c001662f:	5b                   	pop    ebx
c0016630:	c3                   	ret    
c0016631:	90                   	nop

c0016632 <VCache::~VCache()>:
c0016632:	83 ec 0c             	sub    esp,0xc
c0016635:	ba 1c 8e 02 c0       	mov    edx,0xc0028e1c
c001663a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001663e:	89 10                	mov    DWORD PTR [eax],edx
c0016640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016644:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016647:	84 c0                	test   al,al
c0016649:	74 0f                	je     c001665a <VCache::~VCache()+0x28>
c001664b:	83 ec 0c             	sub    esp,0xc
c001664e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016652:	e8 9f ff ff ff       	call   c00165f6 <VCache::writeWriteBuffer()>
c0016657:	83 c4 10             	add    esp,0x10
c001665a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001665e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016661:	83 ec 0c             	sub    esp,0xc
c0016664:	50                   	push   eax
c0016665:	e8 76 8e ff ff       	call   c000f4e0 <free>
c001666a:	83 c4 10             	add    esp,0x10
c001666d:	90                   	nop
c001666e:	83 c4 0c             	add    esp,0xc
c0016671:	c3                   	ret    

c0016672 <VCache::~VCache()>:
c0016672:	83 ec 0c             	sub    esp,0xc
c0016675:	83 ec 0c             	sub    esp,0xc
c0016678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001667c:	e8 b1 ff ff ff       	call   c0016632 <VCache::~VCache()>
c0016681:	83 c4 10             	add    esp,0x10
c0016684:	83 ec 08             	sub    esp,0x8
c0016687:	6a 30                	push   0x30
c0016689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001668d:	e8 2b bf ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0016692:	83 c4 10             	add    esp,0x10
c0016695:	83 c4 0c             	add    esp,0xc
c0016698:	c3                   	ret    
c0016699:	90                   	nop

c001669a <VCache::write(unsigned long long, int, void*)>:
c001669a:	55                   	push   ebp
c001669b:	57                   	push   edi
c001669c:	56                   	push   esi
c001669d:	53                   	push   ebx
c001669e:	83 ec 28             	sub    esp,0x28
c00166a1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00166a5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00166a9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00166ad:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00166b1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00166b4:	e8 ef 60 00 00       	call   c001c7a8 <Semaphore::acquire()>
c00166b9:	83 c4 10             	add    esp,0x10
c00166bc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00166c0:	74 66                	je     c0016728 <VCache::write(unsigned long long, int, void*)+0x8e>
c00166c2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00166c5:	99                   	cdq    
c00166c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166ca:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00166cd:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00166d0:	89 c1                	mov    ecx,eax
c00166d2:	89 d0                	mov    eax,edx
c00166d4:	31 f1                	xor    ecx,esi
c00166d6:	31 f8                	xor    eax,edi
c00166d8:	89 ca                	mov    edx,ecx
c00166da:	09 c2                	or     edx,eax
c00166dc:	75 3e                	jne    c001671c <VCache::write(unsigned long long, int, void*)+0x82>
c00166de:	83 fd 01             	cmp    ebp,0x1
c00166e1:	75 39                	jne    c001671c <VCache::write(unsigned long long, int, void*)+0x82>
c00166e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00166e6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00166ec:	51                   	push   ecx
c00166ed:	50                   	push   eax
c00166ee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166f2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00166f6:	0f af c8             	imul   ecx,eax
c00166f9:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00166fc:	51                   	push   ecx
c00166fd:	e8 53 9f fe ff       	call   c0000655 <memcpy>
c0016702:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016705:	83 c4 10             	add    esp,0x10
c0016708:	40                   	inc    eax
c0016709:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001670c:	83 f8 40             	cmp    eax,0x40
c001670f:	75 57                	jne    c0016768 <VCache::write(unsigned long long, int, void*)+0xce>
c0016711:	83 ec 0c             	sub    esp,0xc
c0016714:	53                   	push   ebx
c0016715:	e8 dc fe ff ff       	call   c00165f6 <VCache::writeWriteBuffer()>
c001671a:	eb 34                	jmp    c0016750 <VCache::write(unsigned long long, int, void*)+0xb6>
c001671c:	83 ec 0c             	sub    esp,0xc
c001671f:	53                   	push   ebx
c0016720:	e8 d1 fe ff ff       	call   c00165f6 <VCache::writeWriteBuffer()>
c0016725:	83 c4 10             	add    esp,0x10
c0016728:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001672b:	83 fd 3f             	cmp    ebp,0x3f
c001672e:	7f 25                	jg     c0016755 <VCache::write(unsigned long long, int, void*)+0xbb>
c0016730:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016733:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016736:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016739:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001673d:	52                   	push   edx
c001673e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016744:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016748:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001674b:	e8 05 9f fe ff       	call   c0000655 <memcpy>
c0016750:	83 c4 10             	add    esp,0x10
c0016753:	eb 13                	jmp    c0016768 <VCache::write(unsigned long long, int, void*)+0xce>
c0016755:	83 ec 0c             	sub    esp,0xc
c0016758:	8b 10                	mov    edx,DWORD PTR [eax]
c001675a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001675e:	55                   	push   ebp
c001675f:	57                   	push   edi
c0016760:	56                   	push   esi
c0016761:	50                   	push   eax
c0016762:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016765:	83 c4 20             	add    esp,0x20
c0016768:	83 ec 0c             	sub    esp,0xc
c001676b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001676e:	e8 bd 65 00 00       	call   c001cd30 <Semaphore::release()>
c0016773:	83 c4 2c             	add    esp,0x2c
c0016776:	31 c0                	xor    eax,eax
c0016778:	5b                   	pop    ebx
c0016779:	5e                   	pop    esi
c001677a:	5f                   	pop    edi
c001677b:	5d                   	pop    ebp
c001677c:	c3                   	ret    
c001677d:	90                   	nop

c001677e <VCache::read(unsigned long long, int, void*)>:
c001677e:	57                   	push   edi
c001677f:	56                   	push   esi
c0016780:	53                   	push   ebx
c0016781:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016785:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016789:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001678d:	83 ec 0c             	sub    esp,0xc
c0016790:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016793:	e8 10 60 00 00       	call   c001c7a8 <Semaphore::acquire()>
c0016798:	83 c4 10             	add    esp,0x10
c001679b:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001679f:	74 0c                	je     c00167ad <VCache::read(unsigned long long, int, void*)+0x2f>
c00167a1:	83 ec 0c             	sub    esp,0xc
c00167a4:	53                   	push   ebx
c00167a5:	e8 4c fe ff ff       	call   c00165f6 <VCache::writeWriteBuffer()>
c00167aa:	83 c4 10             	add    esp,0x10
c00167ad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00167b0:	83 ec 0c             	sub    esp,0xc
c00167b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00167b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167bd:	57                   	push   edi
c00167be:	56                   	push   esi
c00167bf:	50                   	push   eax
c00167c0:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00167c3:	83 c4 14             	add    esp,0x14
c00167c6:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00167c9:	e8 62 65 00 00       	call   c001cd30 <Semaphore::release()>
c00167ce:	83 c4 10             	add    esp,0x10
c00167d1:	31 c0                	xor    eax,eax
c00167d3:	5b                   	pop    ebx
c00167d4:	5e                   	pop    esi
c00167d5:	5f                   	pop    edi
c00167d6:	c3                   	ret    
c00167d7:	90                   	nop

c00167d8 <Video::putrect(int, int, int, int, unsigned int)>:
c00167d8:	55                   	push   ebp
c00167d9:	57                   	push   edi
c00167da:	56                   	push   esi
c00167db:	53                   	push   ebx
c00167dc:	83 ec 1c             	sub    esp,0x1c
c00167df:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00167e3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00167e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00167eb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00167ef:	01 e8                	add    eax,ebp
c00167f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00167f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167f9:	01 df                	add    edi,ebx
c00167fb:	39 fb                	cmp    ebx,edi
c00167fd:	7d 1b                	jge    c001681a <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00167ff:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016803:	7d 12                	jge    c0016817 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0016805:	8b 16                	mov    edx,DWORD PTR [esi]
c0016807:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001680b:	53                   	push   ebx
c001680c:	55                   	push   ebp
c001680d:	45                   	inc    ebp
c001680e:	56                   	push   esi
c001680f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016812:	83 c4 10             	add    esp,0x10
c0016815:	eb e8                	jmp    c00167ff <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0016817:	43                   	inc    ebx
c0016818:	eb e1                	jmp    c00167fb <Video::putrect(int, int, int, int, unsigned int)+0x23>
c001681a:	83 c4 1c             	add    esp,0x1c
c001681d:	5b                   	pop    ebx
c001681e:	5e                   	pop    esi
c001681f:	5f                   	pop    edi
c0016820:	5d                   	pop    ebp
c0016821:	c3                   	ret    

c0016822 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016822:	55                   	push   ebp
c0016823:	57                   	push   edi
c0016824:	31 ff                	xor    edi,edi
c0016826:	56                   	push   esi
c0016827:	53                   	push   ebx
c0016828:	83 ec 1c             	sub    esp,0x1c
c001682b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001682f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016833:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001683a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001683f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016843:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016847:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001684b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001684e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016852:	01 f9                	add    ecx,edi
c0016854:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016858:	7d 2f                	jge    c0016889 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001685a:	31 f6                	xor    esi,esi
c001685c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016860:	01 f2                	add    edx,esi
c0016862:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016866:	7d 1a                	jge    c0016882 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016868:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001686b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001686e:	46                   	inc    esi
c001686f:	51                   	push   ecx
c0016870:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016874:	52                   	push   edx
c0016875:	55                   	push   ebp
c0016876:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016879:	83 c4 10             	add    esp,0x10
c001687c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016880:	eb da                	jmp    c001685c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016882:	47                   	inc    edi
c0016883:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016887:	eb c5                	jmp    c001684e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016889:	83 c4 1c             	add    esp,0x1c
c001688c:	5b                   	pop    ebx
c001688d:	5e                   	pop    esi
c001688e:	5f                   	pop    edi
c001688f:	5d                   	pop    ebp
c0016890:	c3                   	ret    
c0016891:	90                   	nop

c0016892 <Video::blit(unsigned int*, int, int, int, int)>:
c0016892:	55                   	push   ebp
c0016893:	57                   	push   edi
c0016894:	56                   	push   esi
c0016895:	53                   	push   ebx
c0016896:	83 ec 1c             	sub    esp,0x1c
c0016899:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001689d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00168a1:	85 c0                	test   eax,eax
c00168a3:	79 02                	jns    c00168a7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00168a5:	31 c0                	xor    eax,eax
c00168a7:	c1 e0 02             	shl    eax,0x2
c00168aa:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00168ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168b2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00168b6:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00168ba:	39 d8                	cmp    eax,ebx
c00168bc:	7e 49                	jle    c0016907 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00168be:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00168c4:	7c 41                	jl     c0016907 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00168c6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00168ca:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00168ce:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00168d2:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00168d6:	39 f9                	cmp    ecx,edi
c00168d8:	7e 22                	jle    c00168fc <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00168da:	83 c5 04             	add    ebp,0x4
c00168dd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00168e3:	7c 14                	jl     c00168f9 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00168e5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00168e7:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00168ea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00168ee:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00168f2:	56                   	push   esi
c00168f3:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00168f6:	83 c4 10             	add    esp,0x10
c00168f9:	47                   	inc    edi
c00168fa:	eb d2                	jmp    c00168ce <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00168fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016900:	43                   	inc    ebx
c0016901:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016905:	eb ab                	jmp    c00168b2 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016907:	83 c4 1c             	add    esp,0x1c
c001690a:	5b                   	pop    ebx
c001690b:	5e                   	pop    esi
c001690c:	5f                   	pop    edi
c001690d:	5d                   	pop    ebp
c001690e:	c3                   	ret    
c001690f:	90                   	nop

c0016910 <Video::clearScreen(unsigned int)>:
c0016910:	57                   	push   edi
c0016911:	56                   	push   esi
c0016912:	53                   	push   ebx
c0016913:	31 db                	xor    ebx,ebx
c0016915:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016919:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001691f:	7e 1f                	jle    c0016940 <Video::clearScreen(unsigned int)+0x30>
c0016921:	31 ff                	xor    edi,edi
c0016923:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016929:	7e 12                	jle    c001693d <Video::clearScreen(unsigned int)+0x2d>
c001692b:	8b 06                	mov    eax,DWORD PTR [esi]
c001692d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016931:	53                   	push   ebx
c0016932:	57                   	push   edi
c0016933:	47                   	inc    edi
c0016934:	56                   	push   esi
c0016935:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016938:	83 c4 10             	add    esp,0x10
c001693b:	eb e6                	jmp    c0016923 <Video::clearScreen(unsigned int)+0x13>
c001693d:	43                   	inc    ebx
c001693e:	eb d9                	jmp    c0016919 <Video::clearScreen(unsigned int)+0x9>
c0016940:	5b                   	pop    ebx
c0016941:	5e                   	pop    esi
c0016942:	5f                   	pop    edi
c0016943:	c3                   	ret    

c0016944 <Video::putpixel(int, int, unsigned int)>:
c0016944:	c7 44 24 04 24 8e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028e24
c001694c:	e9 4c bd ff ff       	jmp    c001269d <Dbg::kprintf(char const*, ...)>
c0016951:	90                   	nop

c0016952 <Video::Video(char const*)>:
c0016952:	83 ec 0c             	sub    esp,0xc
c0016955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016959:	83 ec 08             	sub    esp,0x8
c001695c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016960:	50                   	push   eax
c0016961:	e8 16 d3 ff ff       	call   c0013c7c <Device::Device(char const*)>
c0016966:	83 c4 10             	add    esp,0x10
c0016969:	ba 98 8e 02 c0       	mov    edx,0xc0028e98
c001696e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016972:	89 10                	mov    DWORD PTR [eax],edx
c0016974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016978:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016982:	90                   	nop
c0016983:	83 c4 0c             	add    esp,0xc
c0016986:	c3                   	ret    
c0016987:	90                   	nop

c0016988 <Video::~Video()>:
c0016988:	83 ec 0c             	sub    esp,0xc
c001698b:	ba 98 8e 02 c0       	mov    edx,0xc0028e98
c0016990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016994:	89 10                	mov    DWORD PTR [eax],edx
c0016996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001699a:	83 ec 0c             	sub    esp,0xc
c001699d:	50                   	push   eax
c001699e:	e8 bb cf ff ff       	call   c001395e <Device::~Device()>
c00169a3:	83 c4 10             	add    esp,0x10
c00169a6:	90                   	nop
c00169a7:	83 c4 0c             	add    esp,0xc
c00169aa:	c3                   	ret    
c00169ab:	90                   	nop

c00169ac <Video::~Video()>:
c00169ac:	83 ec 0c             	sub    esp,0xc
c00169af:	83 ec 0c             	sub    esp,0xc
c00169b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169b6:	e8 cd ff ff ff       	call   c0016988 <Video::~Video()>
c00169bb:	83 c4 10             	add    esp,0x10
c00169be:	83 ec 08             	sub    esp,0x8
c00169c1:	68 64 01 00 00       	push   0x164
c00169c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169ca:	e8 ee bb ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c00169cf:	83 c4 10             	add    esp,0x10
c00169d2:	83 c4 0c             	add    esp,0xc
c00169d5:	c3                   	ret    

c00169d6 <Video::isMonochrome()>:
c00169d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00169da:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00169e0:	c3                   	ret    
c00169e1:	90                   	nop

c00169e2 <Video::getWidth()>:
c00169e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00169e6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00169ec:	c3                   	ret    
c00169ed:	90                   	nop

c00169ee <Video::getHeight()>:
c00169ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00169f2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169f8:	c3                   	ret    
c00169f9:	90                   	nop

c00169fa <Video::drawCursor(int, int, unsigned char*, int)>:
c00169fa:	55                   	push   ebp
c00169fb:	57                   	push   edi
c00169fc:	56                   	push   esi
c00169fd:	53                   	push   ebx
c00169fe:	83 ec 2c             	sub    esp,0x2c
c0016a01:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016a05:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016a09:	83 f8 01             	cmp    eax,0x1
c0016a0c:	19 c9                	sbb    ecx,ecx
c0016a0e:	31 db                	xor    ebx,ebx
c0016a10:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016a14:	89 cd                	mov    ebp,ecx
c0016a16:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016a1e:	f7 d5                	not    ebp
c0016a20:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016a26:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016a2a:	01 d8                	add    eax,ebx
c0016a2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a30:	56                   	push   esi
c0016a31:	e8 b8 ff ff ff       	call   c00169ee <Video::getHeight()>
c0016a36:	59                   	pop    ecx
c0016a37:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016a3b:	7e 70                	jle    c0016aad <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016a3d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016a41:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016a45:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016a48:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016a4c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016a50:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016a57:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a5b:	89 f8                	mov    eax,edi
c0016a5d:	83 c0 20             	add    eax,0x20
c0016a60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016a64:	56                   	push   esi
c0016a65:	e8 78 ff ff ff       	call   c00169e2 <Video::getWidth()>
c0016a6a:	5a                   	pop    edx
c0016a6b:	39 c7                	cmp    edi,eax
c0016a6d:	7d 34                	jge    c0016aa3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016a6f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016a74:	74 05                	je     c0016a7b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016a76:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a78:	55                   	push   ebp
c0016a79:	eb 0d                	jmp    c0016a88 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016a7b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016a80:	74 12                	je     c0016a94 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016a82:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a88:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a8c:	57                   	push   edi
c0016a8d:	56                   	push   esi
c0016a8e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016a91:	83 c4 10             	add    esp,0x10
c0016a94:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016a98:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016a9c:	47                   	inc    edi
c0016a9d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016aa1:	75 c1                	jne    c0016a64 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016aa3:	43                   	inc    ebx
c0016aa4:	83 fb 20             	cmp    ebx,0x20
c0016aa7:	0f 85 79 ff ff ff    	jne    c0016a26 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016aad:	83 c4 2c             	add    esp,0x2c
c0016ab0:	5b                   	pop    ebx
c0016ab1:	5e                   	pop    esi
c0016ab2:	5f                   	pop    edi
c0016ab3:	5d                   	pop    ebp
c0016ab4:	c3                   	ret    
c0016ab5:	90                   	nop

c0016ab6 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016ab6:	55                   	push   ebp
c0016ab7:	57                   	push   edi
c0016ab8:	56                   	push   esi
c0016ab9:	53                   	push   ebx
c0016aba:	83 ec 28             	sub    esp,0x28
c0016abd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016ac1:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016ac5:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016ac9:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016acd:	c1 e7 08             	shl    edi,0x8
c0016ad0:	01 c7                	add    edi,eax
c0016ad2:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016ad6:	c1 e0 08             	shl    eax,0x8
c0016ad9:	01 d0                	add    eax,edx
c0016adb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016adf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ae3:	0f af c7             	imul   eax,edi
c0016ae6:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016aed:	50                   	push   eax
c0016aee:	e8 dd 89 ff ff       	call   c000f4d0 <malloc>
c0016af3:	83 c4 10             	add    esp,0x10
c0016af6:	89 c5                	mov    ebp,eax
c0016af8:	85 c0                	test   eax,eax
c0016afa:	75 15                	jne    c0016b11 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016afc:	83 ec 0c             	sub    esp,0xc
c0016aff:	68 33 8e 02 c0       	push   0xc0028e33
c0016b04:	e8 94 bb ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0016b09:	83 c4 10             	add    esp,0x10
c0016b0c:	e9 1c 01 00 00       	jmp    c0016c2d <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016b11:	be 12 00 00 00       	mov    esi,0x12
c0016b16:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016b1a:	74 11                	je     c0016b2d <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016b1c:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016b20:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016b24:	c1 fe 03             	sar    esi,0x3
c0016b27:	0f af f0             	imul   esi,eax
c0016b2a:	83 c6 12             	add    esi,0x12
c0016b2d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016b31:	74 04                	je     c0016b37 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016b33:	85 ff                	test   edi,edi
c0016b35:	75 12                	jne    c0016b49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016b37:	83 ec 0c             	sub    esp,0xc
c0016b3a:	68 4a 8e 02 c0       	push   0xc0028e4a
c0016b3f:	e8 59 bb ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0016b44:	e9 ce 00 00 00       	jmp    c0016c17 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016b49:	52                   	push   edx
c0016b4a:	52                   	push   edx
c0016b4b:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016b4f:	50                   	push   eax
c0016b50:	68 5f 8e 02 c0       	push   0xc0028e5f
c0016b55:	e8 43 bb ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0016b5a:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016b5e:	83 c4 10             	add    esp,0x10
c0016b61:	80 fa 02             	cmp    dl,0x2
c0016b64:	0f 85 98 00 00 00    	jne    c0016c02 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016b6a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016b6f:	75 10                	jne    c0016b81 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016b71:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016b75:	75 0a                	jne    c0016b81 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016b77:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016b7a:	83 e8 18             	sub    eax,0x18
c0016b7d:	a8 f7                	test   al,0xf7
c0016b7f:	74 0a                	je     c0016b8b <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016b81:	83 ec 0c             	sub    esp,0xc
c0016b84:	68 6c 8e 02 c0       	push   0xc0028e6c
c0016b89:	eb 7f                	jmp    c0016c0a <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016b8b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016b93:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016b9b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016b9f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016ba7:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016bab:	75 0c                	jne    c0016bb9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016bad:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016bb2:	c1 e0 18             	shl    eax,0x18
c0016bb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bb9:	41                   	inc    ecx
c0016bba:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016bbf:	c1 e2 10             	shl    edx,0x10
c0016bc2:	89 d0                	mov    eax,edx
c0016bc4:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016bc9:	c1 e2 08             	shl    edx,0x8
c0016bcc:	09 c2                	or     edx,eax
c0016bce:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016bd2:	09 c2                	or     edx,eax
c0016bd4:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016bd8:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016bdc:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016be0:	c1 f8 03             	sar    eax,0x3
c0016be3:	01 c6                	add    esi,eax
c0016be5:	89 c8                	mov    eax,ecx
c0016be7:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016beb:	39 c7                	cmp    edi,eax
c0016bed:	7f b0                	jg     c0016b9f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016bef:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016bf3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bf7:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016bfa:	7e 22                	jle    c0016c1e <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016bfc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016c00:	eb 99                	jmp    c0016b9b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016c02:	50                   	push   eax
c0016c03:	50                   	push   eax
c0016c04:	52                   	push   edx
c0016c05:	68 7a 8e 02 c0       	push   0xc0028e7a
c0016c0a:	e8 8e ba ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0016c0f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016c12:	e8 c9 88 ff ff       	call   c000f4e0 <free>
c0016c17:	83 c4 10             	add    esp,0x10
c0016c1a:	31 ed                	xor    ebp,ebp
c0016c1c:	eb 0f                	jmp    c0016c2d <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016c1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016c22:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016c25:	89 38                	mov    DWORD PTR [eax],edi
c0016c27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016c2b:	89 08                	mov    DWORD PTR [eax],ecx
c0016c2d:	83 c4 1c             	add    esp,0x1c
c0016c30:	89 e8                	mov    eax,ebp
c0016c32:	5b                   	pop    ebx
c0016c33:	5e                   	pop    esi
c0016c34:	5f                   	pop    edi
c0016c35:	5d                   	pop    ebp
c0016c36:	c3                   	ret    
c0016c37:	90                   	nop

c0016c38 <Video::putTGA(int, int, unsigned char*, int)>:
c0016c38:	55                   	push   ebp
c0016c39:	57                   	push   edi
c0016c3a:	56                   	push   esi
c0016c3b:	53                   	push   ebx
c0016c3c:	83 ec 28             	sub    esp,0x28
c0016c3f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016c43:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c47:	50                   	push   eax
c0016c48:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c4c:	50                   	push   eax
c0016c4d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016c51:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016c55:	56                   	push   esi
c0016c56:	e8 5b fe ff ff       	call   c0016ab6 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016c5b:	83 c4 20             	add    esp,0x20
c0016c5e:	85 c0                	test   eax,eax
c0016c60:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016c64:	74 35                	je     c0016c9b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016c66:	89 c7                	mov    edi,eax
c0016c68:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016c6c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016c70:	39 d8                	cmp    eax,ebx
c0016c72:	7e 27                	jle    c0016c9b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016c74:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c7c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016c80:	39 e8                	cmp    eax,ebp
c0016c82:	7e 14                	jle    c0016c98 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016c84:	8b 06                	mov    eax,DWORD PTR [esi]
c0016c86:	83 c7 04             	add    edi,0x4
c0016c89:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016c8c:	53                   	push   ebx
c0016c8d:	55                   	push   ebp
c0016c8e:	45                   	inc    ebp
c0016c8f:	56                   	push   esi
c0016c90:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016c93:	83 c4 10             	add    esp,0x10
c0016c96:	eb e0                	jmp    c0016c78 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016c98:	43                   	inc    ebx
c0016c99:	eb cd                	jmp    c0016c68 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016c9b:	83 c4 1c             	add    esp,0x1c
c0016c9e:	5b                   	pop    ebx
c0016c9f:	5e                   	pop    esi
c0016ca0:	5f                   	pop    edi
c0016ca1:	5d                   	pop    ebp
c0016ca2:	c3                   	ret    
c0016ca3:	90                   	nop

c0016ca4 <ACPI::close(int, int, void*)>:
c0016ca4:	83 ec 1c             	sub    esp,0x1c
c0016ca7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016caf:	74 0a                	je     c0016cbb <ACPI::close(int, int, void*)+0x17>
c0016cb1:	b8 00 00 00 00       	mov    eax,0x0
c0016cb6:	e9 9a 00 00 00       	jmp    c0016d55 <ACPI::close(int, int, void*)+0xb1>
c0016cbb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016cc0:	75 37                	jne    c0016cf9 <ACPI::close(int, int, void*)+0x55>
c0016cc2:	83 ec 0c             	sub    esp,0xc
c0016cc5:	68 d8 8e 02 c0       	push   0xc0028ed8
c0016cca:	e8 ce b9 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0016ccf:	83 c4 10             	add    esp,0x10
c0016cd2:	a1 48 c1 02 c0       	mov    eax,ds:0xc002c148
c0016cd7:	85 c0                	test   eax,eax
c0016cd9:	74 07                	je     c0016ce2 <ACPI::close(int, int, void*)+0x3e>
c0016cdb:	a1 48 c1 02 c0       	mov    eax,ds:0xc002c148
c0016ce0:	ff d0                	call   eax
c0016ce2:	83 ec 0c             	sub    esp,0xc
c0016ce5:	68 ac 8f 02 c0       	push   0xc0028fac
c0016cea:	e8 f2 24 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c0016cef:	83 c4 10             	add    esp,0x10
c0016cf2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016cf7:	eb 5c                	jmp    c0016d55 <ACPI::close(int, int, void*)+0xb1>
c0016cf9:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016cfe:	75 50                	jne    c0016d50 <ACPI::close(int, int, void*)+0xac>
c0016d00:	a1 44 c1 02 c0       	mov    eax,ds:0xc002c144
c0016d05:	85 c0                	test   eax,eax
c0016d07:	74 07                	je     c0016d10 <ACPI::close(int, int, void*)+0x6c>
c0016d09:	a1 44 c1 02 c0       	mov    eax,ds:0xc002c144
c0016d0e:	ff d0                	call   eax
c0016d10:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016d15:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016d1a:	83 e0 02             	and    eax,0x2
c0016d1d:	74 1c                	je     c0016d3b <ACPI::close(int, int, void*)+0x97>
c0016d1f:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016d26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d2a:	89 c2                	mov    edx,eax
c0016d2c:	ec                   	in     al,dx
c0016d2d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016d31:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016d35:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016d39:	eb da                	jmp    c0016d15 <ACPI::close(int, int, void*)+0x71>
c0016d3b:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016d42:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016d47:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016d4b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016d4f:	ee                   	out    dx,al
c0016d50:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016d55:	83 c4 1c             	add    esp,0x1c
c0016d58:	c3                   	ret    

c0016d59 <findRSDP()>:
c0016d59:	83 ec 1c             	sub    esp,0x1c
c0016d5c:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0016d61:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016d67:	83 e0 04             	and    eax,0x4
c0016d6a:	84 c0                	test   al,al
c0016d6c:	75 07                	jne    c0016d75 <findRSDP()+0x1c>
c0016d6e:	b8 00 00 00 00       	mov    eax,0x0
c0016d73:	eb 6a                	jmp    c0016ddf <findRSDP()+0x86>
c0016d75:	a1 10 bb 02 c0       	mov    eax,ds:0xc002bb10
c0016d7a:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016d7f:	7f 1b                	jg     c0016d9c <findRSDP()+0x43>
c0016d81:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0016d86:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016d8c:	83 e2 fb             	and    edx,0xfffffffb
c0016d8f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016d95:	b8 00 00 00 00       	mov    eax,0x0
c0016d9a:	eb 43                	jmp    c0016ddf <findRSDP()+0x86>
c0016d9c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016da4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016dac:	77 2c                	ja     c0016dda <findRSDP()+0x81>
c0016dae:	83 ec 04             	sub    esp,0x4
c0016db1:	6a 08                	push   0x8
c0016db3:	68 e5 8e 02 c0       	push   0xc0028ee5
c0016db8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016dbc:	e8 31 98 fe ff       	call   c00005f2 <memcmp>
c0016dc1:	83 c4 10             	add    esp,0x10
c0016dc4:	85 c0                	test   eax,eax
c0016dc6:	0f 94 c0             	sete   al
c0016dc9:	84 c0                	test   al,al
c0016dcb:	74 06                	je     c0016dd3 <findRSDP()+0x7a>
c0016dcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dd1:	eb 0c                	jmp    c0016ddf <findRSDP()+0x86>
c0016dd3:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016dd8:	eb ca                	jmp    c0016da4 <findRSDP()+0x4b>
c0016dda:	b8 00 00 00 00       	mov    eax,0x0
c0016ddf:	83 c4 1c             	add    esp,0x1c
c0016de2:	c3                   	ret    

c0016de3 <loadACPITables(unsigned char*)>:
c0016de3:	56                   	push   esi
c0016de4:	53                   	push   ebx
c0016de5:	83 ec 44             	sub    esp,0x44
c0016de8:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0016ded:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016df3:	83 e0 04             	and    eax,0x4
c0016df6:	84 c0                	test   al,al
c0016df8:	0f 84 05 02 00 00    	je     c0017003 <loadACPITables(unsigned char*)+0x220>
c0016dfe:	a0 60 c3 02 c0       	mov    al,ds:0xc002c360
c0016e03:	84 c0                	test   al,al
c0016e05:	74 75                	je     c0016e7c <loadACPITables(unsigned char*)+0x99>
c0016e07:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016e0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016e16:	83 e8 24             	sub    eax,0x24
c0016e19:	c1 e8 03             	shr    eax,0x3
c0016e1c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016e20:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016e28:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e2c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016e30:	0f 8d b2 00 00 00    	jge    c0016ee8 <loadACPITables(unsigned char*)+0x105>
c0016e36:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e3a:	83 c0 24             	add    eax,0x24
c0016e3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016e41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016e45:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016e49:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e4d:	c1 e0 03             	shl    eax,0x3
c0016e50:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016e54:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e58:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016e5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e5d:	89 c1                	mov    ecx,eax
c0016e5f:	a1 4c c1 02 c0       	mov    eax,ds:0xc002c14c
c0016e64:	8d 50 01             	lea    edx,[eax+0x1]
c0016e67:	89 15 4c c1 02 c0    	mov    DWORD PTR ds:0xc002c14c,edx
c0016e6d:	89 ca                	mov    edx,ecx
c0016e6f:	89 14 c5 64 c1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd3e9c],edx
c0016e76:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016e7a:	eb ac                	jmp    c0016e28 <loadACPITables(unsigned char*)+0x45>
c0016e7c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e80:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016e84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016e8b:	83 e8 24             	sub    eax,0x24
c0016e8e:	c1 e8 02             	shr    eax,0x2
c0016e91:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e95:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016e9d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ea1:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016ea5:	7d 41                	jge    c0016ee8 <loadACPITables(unsigned char*)+0x105>
c0016ea7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016eab:	83 c0 24             	add    eax,0x24
c0016eae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016eb6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016eba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ebe:	c1 e0 02             	shl    eax,0x2
c0016ec1:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016ec5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ec9:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016ecb:	a1 4c c1 02 c0       	mov    eax,ds:0xc002c14c
c0016ed0:	8d 50 01             	lea    edx,[eax+0x1]
c0016ed3:	89 15 4c c1 02 c0    	mov    DWORD PTR ds:0xc002c14c,edx
c0016ed9:	89 ca                	mov    edx,ecx
c0016edb:	89 14 c5 64 c1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd3e9c],edx
c0016ee2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016ee6:	eb b5                	jmp    c0016e9d <loadACPITables(unsigned char*)+0xba>
c0016ee8:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016ef0:	a1 4c c1 02 c0       	mov    eax,ds:0xc002c14c
c0016ef5:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016ef9:	0f 8d 05 01 00 00    	jge    c0017004 <loadACPITables(unsigned char*)+0x221>
c0016eff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f03:	8b 04 c5 64 c1 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd3e9c]
c0016f0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f1a:	25 ff 0f 00 00       	and    eax,0xfff
c0016f1f:	89 c6                	mov    esi,eax
c0016f21:	e8 17 a9 ff ff       	call   c001183d <Virt::getAKernelVAS()>
c0016f26:	89 c3                	mov    ebx,eax
c0016f28:	83 ec 0c             	sub    esp,0xc
c0016f2b:	6a 01                	push   0x1
c0016f2d:	e8 7b a7 ff ff       	call   c00116ad <Virt::allocateKernelVirtualPages(int)>
c0016f32:	83 c4 10             	add    esp,0x10
c0016f35:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f39:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016f3f:	83 ec 0c             	sub    esp,0xc
c0016f42:	6a 01                	push   0x1
c0016f44:	6a 01                	push   0x1
c0016f46:	50                   	push   eax
c0016f47:	52                   	push   edx
c0016f48:	53                   	push   ebx
c0016f49:	e8 1e b1 ff ff       	call   c001206c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016f4e:	83 c4 20             	add    esp,0x20
c0016f51:	09 f0                	or     eax,esi
c0016f53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f57:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f5b:	c1 e0 03             	shl    eax,0x3
c0016f5e:	05 60 c1 02 c0       	add    eax,0xc002c160
c0016f63:	83 ec 04             	sub    esp,0x4
c0016f66:	6a 04                	push   0x4
c0016f68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f6c:	50                   	push   eax
c0016f6d:	e8 e3 96 fe ff       	call   c0000655 <memcpy>
c0016f72:	83 c4 10             	add    esp,0x10
c0016f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016f7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f84:	05 00 10 00 00       	add    eax,0x1000
c0016f89:	c1 e8 0c             	shr    eax,0xc
c0016f8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f94:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f9b:	25 ff 0f 00 00       	and    eax,0xfff
c0016fa0:	89 c6                	mov    esi,eax
c0016fa2:	e8 96 a8 ff ff       	call   c001183d <Virt::getAKernelVAS()>
c0016fa7:	89 c3                	mov    ebx,eax
c0016fa9:	83 ec 0c             	sub    esp,0xc
c0016fac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016fb0:	e8 f8 a6 ff ff       	call   c00116ad <Virt::allocateKernelVirtualPages(int)>
c0016fb5:	83 c4 10             	add    esp,0x10
c0016fb8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016fbc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016fc2:	83 ec 0c             	sub    esp,0xc
c0016fc5:	6a 01                	push   0x1
c0016fc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016fcb:	50                   	push   eax
c0016fcc:	52                   	push   edx
c0016fcd:	53                   	push   ebx
c0016fce:	e8 99 b0 ff ff       	call   c001206c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016fd3:	83 c4 20             	add    esp,0x20
c0016fd6:	09 f0                	or     eax,esi
c0016fd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016fdc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016fdf:	83 ec 0c             	sub    esp,0xc
c0016fe2:	50                   	push   eax
c0016fe3:	e8 29 aa ff ff       	call   c0011a11 <Virt::freeKernelVirtualPages(unsigned long)>
c0016fe8:	83 c4 10             	add    esp,0x10
c0016feb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016ff3:	89 14 c5 64 c1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd3e9c],edx
c0016ffa:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0016ffe:	e9 ed fe ff ff       	jmp    c0016ef0 <loadACPITables(unsigned char*)+0x10d>
c0017003:	90                   	nop
c0017004:	83 c4 44             	add    esp,0x44
c0017007:	5b                   	pop    ebx
c0017008:	5e                   	pop    esi
c0017009:	c3                   	ret    

c001700a <findRSDT(unsigned char*)>:
c001700a:	56                   	push   esi
c001700b:	53                   	push   ebx
c001700c:	83 ec 44             	sub    esp,0x44
c001700f:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0017014:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001701a:	83 e0 04             	and    eax,0x4
c001701d:	84 c0                	test   al,al
c001701f:	75 0a                	jne    c001702b <findRSDT(unsigned char*)+0x21>
c0017021:	b8 00 00 00 00       	mov    eax,0x0
c0017026:	e9 f7 00 00 00       	jmp    c0017122 <findRSDT(unsigned char*)+0x118>
c001702b:	83 ec 04             	sub    esp,0x4
c001702e:	6a 24                	push   0x24
c0017030:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017034:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017038:	50                   	push   eax
c0017039:	e8 17 96 fe ff       	call   c0000655 <memcpy>
c001703e:	83 c4 10             	add    esp,0x10
c0017041:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017045:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017049:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017051:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017055:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017059:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001705d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017061:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017065:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017069:	25 ff 0f 00 00       	and    eax,0xfff
c001706e:	89 c6                	mov    esi,eax
c0017070:	e8 c8 a7 ff ff       	call   c001183d <Virt::getAKernelVAS()>
c0017075:	89 c3                	mov    ebx,eax
c0017077:	83 ec 0c             	sub    esp,0xc
c001707a:	6a 02                	push   0x2
c001707c:	e8 2c a6 ff ff       	call   c00116ad <Virt::allocateKernelVirtualPages(int)>
c0017081:	83 c4 10             	add    esp,0x10
c0017084:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017088:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001708e:	83 ec 0c             	sub    esp,0xc
c0017091:	6a 01                	push   0x1
c0017093:	6a 02                	push   0x2
c0017095:	50                   	push   eax
c0017096:	52                   	push   edx
c0017097:	53                   	push   ebx
c0017098:	e8 cf af ff ff       	call   c001206c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001709d:	83 c4 20             	add    esp,0x20
c00170a0:	09 f0                	or     eax,esi
c00170a2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00170a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00170aa:	25 ff 0f 00 00       	and    eax,0xfff
c00170af:	89 c6                	mov    esi,eax
c00170b1:	e8 87 a7 ff ff       	call   c001183d <Virt::getAKernelVAS()>
c00170b6:	89 c3                	mov    ebx,eax
c00170b8:	83 ec 0c             	sub    esp,0xc
c00170bb:	6a 02                	push   0x2
c00170bd:	e8 eb a5 ff ff       	call   c00116ad <Virt::allocateKernelVirtualPages(int)>
c00170c2:	83 c4 10             	add    esp,0x10
c00170c5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00170c9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00170cf:	83 ec 0c             	sub    esp,0xc
c00170d2:	6a 01                	push   0x1
c00170d4:	6a 02                	push   0x2
c00170d6:	50                   	push   eax
c00170d7:	52                   	push   edx
c00170d8:	53                   	push   ebx
c00170d9:	e8 8e af ff ff       	call   c001206c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00170de:	83 c4 20             	add    esp,0x20
c00170e1:	09 f0                	or     eax,esi
c00170e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00170e7:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00170ec:	75 11                	jne    c00170ff <findRSDT(unsigned char*)+0xf5>
c00170ee:	c6 05 60 c3 02 c0 00 	mov    BYTE PTR ds:0xc002c360,0x0
c00170f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00170f9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00170fd:	eb 1f                	jmp    c001711e <findRSDT(unsigned char*)+0x114>
c00170ff:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017104:	75 11                	jne    c0017117 <findRSDT(unsigned char*)+0x10d>
c0017106:	c6 05 60 c3 02 c0 01 	mov    BYTE PTR ds:0xc002c360,0x1
c001710d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017111:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017115:	eb 07                	jmp    c001711e <findRSDT(unsigned char*)+0x114>
c0017117:	b8 00 00 00 00       	mov    eax,0x0
c001711c:	eb 04                	jmp    c0017122 <findRSDT(unsigned char*)+0x118>
c001711e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017122:	83 c4 44             	add    esp,0x44
c0017125:	5b                   	pop    ebx
c0017126:	5e                   	pop    esi
c0017127:	c3                   	ret    

c0017128 <findDataTable(unsigned char*, char*)>:
c0017128:	83 ec 1c             	sub    esp,0x1c
c001712b:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0017130:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017136:	83 e0 04             	and    eax,0x4
c0017139:	84 c0                	test   al,al
c001713b:	75 07                	jne    c0017144 <findDataTable(unsigned char*, char*)+0x1c>
c001713d:	b8 00 00 00 00       	mov    eax,0x0
c0017142:	eb 7c                	jmp    c00171c0 <findDataTable(unsigned char*, char*)+0x98>
c0017144:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001714c:	a1 4c c1 02 c0       	mov    eax,ds:0xc002c14c
c0017151:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017155:	7d 3a                	jge    c0017191 <findDataTable(unsigned char*, char*)+0x69>
c0017157:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001715b:	c1 e0 03             	shl    eax,0x3
c001715e:	05 60 c1 02 c0       	add    eax,0xc002c160
c0017163:	83 ec 04             	sub    esp,0x4
c0017166:	6a 04                	push   0x4
c0017168:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001716c:	50                   	push   eax
c001716d:	e8 80 94 fe ff       	call   c00005f2 <memcmp>
c0017172:	83 c4 10             	add    esp,0x10
c0017175:	85 c0                	test   eax,eax
c0017177:	0f 94 c0             	sete   al
c001717a:	84 c0                	test   al,al
c001717c:	74 0d                	je     c001718b <findDataTable(unsigned char*, char*)+0x63>
c001717e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017182:	8b 04 c5 64 c1 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd3e9c]
c0017189:	eb 35                	jmp    c00171c0 <findDataTable(unsigned char*, char*)+0x98>
c001718b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001718f:	eb bb                	jmp    c001714c <findDataTable(unsigned char*, char*)+0x24>
c0017191:	a0 60 c3 02 c0       	mov    al,ds:0xc002c360
c0017196:	84 c0                	test   al,al
c0017198:	74 07                	je     c00171a1 <findDataTable(unsigned char*, char*)+0x79>
c001719a:	b8 58 00 00 00       	mov    eax,0x58
c001719f:	eb 05                	jmp    c00171a6 <findDataTable(unsigned char*, char*)+0x7e>
c00171a1:	b8 52 00 00 00       	mov    eax,0x52
c00171a6:	83 ec 04             	sub    esp,0x4
c00171a9:	50                   	push   eax
c00171aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00171ae:	68 d0 8f 02 c0       	push   0xc0028fd0
c00171b3:	e8 e5 b4 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00171b8:	83 c4 10             	add    esp,0x10
c00171bb:	b8 00 00 00 00       	mov    eax,0x0
c00171c0:	83 c4 1c             	add    esp,0x1c
c00171c3:	c3                   	ret    

c00171c4 <scanMADT()>:
c00171c4:	53                   	push   ebx
c00171c5:	83 ec 38             	sub    esp,0x38
c00171c8:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c00171cd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00171d3:	83 e0 04             	and    eax,0x4
c00171d6:	84 c0                	test   al,al
c00171d8:	0f 84 63 04 00 00    	je     c0017641 <scanMADT()+0x47d>
c00171de:	e8 76 fb ff ff       	call   c0016d59 <findRSDP()>
c00171e3:	a3 6c c3 02 c0       	mov    ds:0xc002c36c,eax
c00171e8:	a1 6c c3 02 c0       	mov    eax,ds:0xc002c36c
c00171ed:	85 c0                	test   eax,eax
c00171ef:	75 19                	jne    c001720a <scanMADT()+0x46>
c00171f1:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c00171f6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00171fc:	83 e2 fb             	and    edx,0xfffffffb
c00171ff:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017205:	e9 3b 04 00 00       	jmp    c0017645 <scanMADT()+0x481>
c001720a:	a1 6c c3 02 c0       	mov    eax,ds:0xc002c36c
c001720f:	83 ec 0c             	sub    esp,0xc
c0017212:	50                   	push   eax
c0017213:	e8 f2 fd ff ff       	call   c001700a <findRSDT(unsigned char*)>
c0017218:	83 c4 10             	add    esp,0x10
c001721b:	a3 68 c3 02 c0       	mov    ds:0xc002c368,eax
c0017220:	a1 68 c3 02 c0       	mov    eax,ds:0xc002c368
c0017225:	85 c0                	test   eax,eax
c0017227:	75 19                	jne    c0017242 <scanMADT()+0x7e>
c0017229:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c001722e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017234:	83 e2 fb             	and    edx,0xfffffffb
c0017237:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001723d:	e9 03 04 00 00       	jmp    c0017645 <scanMADT()+0x481>
c0017242:	a1 68 c3 02 c0       	mov    eax,ds:0xc002c368
c0017247:	83 ec 0c             	sub    esp,0xc
c001724a:	50                   	push   eax
c001724b:	e8 93 fb ff ff       	call   c0016de3 <loadACPITables(unsigned char*)>
c0017250:	83 c4 10             	add    esp,0x10
c0017253:	a1 68 c3 02 c0       	mov    eax,ds:0xc002c368
c0017258:	83 ec 08             	sub    esp,0x8
c001725b:	68 ee 8e 02 c0       	push   0xc0028eee
c0017260:	50                   	push   eax
c0017261:	e8 c2 fe ff ff       	call   c0017128 <findDataTable(unsigned char*, char*)>
c0017266:	83 c4 10             	add    esp,0x10
c0017269:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001726d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017272:	75 19                	jne    c001728d <scanMADT()+0xc9>
c0017274:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0017279:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001727f:	83 e2 fe             	and    edx,0xfffffffe
c0017282:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017288:	e9 b8 03 00 00       	jmp    c0017645 <scanMADT()+0x481>
c001728d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017295:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017299:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001729c:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00172a0:	0f 87 9f 03 00 00    	ja     c0017645 <scanMADT()+0x481>
c00172a6:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00172ae:	0f 87 91 03 00 00    	ja     c0017645 <scanMADT()+0x481>
c00172b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00172bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172c0:	8d 50 01             	lea    edx,[eax+0x1]
c00172c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00172c7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00172cb:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00172cf:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00172d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172d7:	8d 50 01             	lea    edx,[eax+0x1]
c00172da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00172de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00172e2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00172e6:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00172ea:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00172ef:	0f 86 4f 03 00 00    	jbe    c0017644 <scanMADT()+0x480>
c00172f5:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00172fa:	75 57                	jne    c0017353 <scanMADT()+0x18f>
c00172fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017300:	8d 50 01             	lea    edx,[eax+0x1]
c0017303:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017307:	8a 15 60 c5 02 c0    	mov    dl,BYTE PTR ds:0xc002c560
c001730d:	0f b6 d2             	movzx  edx,dl
c0017310:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017314:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017318:	88 82 a0 c5 02 c0    	mov    BYTE PTR [edx-0x3ffd3a60],al
c001731e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017322:	8d 50 01             	lea    edx,[eax+0x1]
c0017325:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017329:	8a 15 60 c5 02 c0    	mov    dl,BYTE PTR ds:0xc002c560
c001732f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017332:	88 0d 60 c5 02 c0    	mov    BYTE PTR ds:0xc002c560,cl
c0017338:	0f b6 d2             	movzx  edx,dl
c001733b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001733f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017343:	88 82 80 c5 02 c0    	mov    BYTE PTR [edx-0x3ffd3a80],al
c0017349:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001734e:	e9 da 02 00 00       	jmp    c001762d <scanMADT()+0x469>
c0017353:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017358:	0f 85 14 01 00 00    	jne    c0017472 <scanMADT()+0x2ae>
c001735e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017362:	8d 50 01             	lea    edx,[eax+0x1]
c0017365:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017369:	8a 15 20 c4 02 c0    	mov    dl,BYTE PTR ds:0xc002c420
c001736f:	0f b6 d2             	movzx  edx,dl
c0017372:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017376:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001737a:	88 82 40 c4 02 c0    	mov    BYTE PTR [edx-0x3ffd3bc0],al
c0017380:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017384:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017388:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001738c:	01 d0                	add    eax,edx
c001738e:	83 c0 2c             	add    eax,0x2c
c0017391:	8a 00                	mov    al,BYTE PTR [eax]
c0017393:	0f b6 d0             	movzx  edx,al
c0017396:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001739a:	8d 48 01             	lea    ecx,[eax+0x1]
c001739d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173a1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00173a5:	0f b6 c0             	movzx  eax,al
c00173a8:	c1 e0 08             	shl    eax,0x8
c00173ab:	89 d1                	mov    ecx,edx
c00173ad:	09 c1                	or     ecx,eax
c00173af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173b3:	8d 50 02             	lea    edx,[eax+0x2]
c00173b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173ba:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00173be:	0f b6 c0             	movzx  eax,al
c00173c1:	c1 e0 10             	shl    eax,0x10
c00173c4:	09 c1                	or     ecx,eax
c00173c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173ca:	8d 50 03             	lea    edx,[eax+0x3]
c00173cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173d1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00173d5:	0f b6 c0             	movzx  eax,al
c00173d8:	c1 e0 18             	shl    eax,0x18
c00173db:	09 c1                	or     ecx,eax
c00173dd:	89 ca                	mov    edx,ecx
c00173df:	a0 20 c4 02 c0       	mov    al,ds:0xc002c420
c00173e4:	0f b6 c0             	movzx  eax,al
c00173e7:	89 14 85 60 c4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ba0],edx
c00173ee:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00173f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173fb:	01 d0                	add    eax,edx
c00173fd:	83 c0 2c             	add    eax,0x2c
c0017400:	8a 00                	mov    al,BYTE PTR [eax]
c0017402:	0f b6 d0             	movzx  edx,al
c0017405:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017409:	8d 48 01             	lea    ecx,[eax+0x1]
c001740c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017410:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017414:	0f b6 c0             	movzx  eax,al
c0017417:	c1 e0 08             	shl    eax,0x8
c001741a:	89 d1                	mov    ecx,edx
c001741c:	09 c1                	or     ecx,eax
c001741e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017422:	8d 50 02             	lea    edx,[eax+0x2]
c0017425:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017429:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001742d:	0f b6 c0             	movzx  eax,al
c0017430:	c1 e0 10             	shl    eax,0x10
c0017433:	09 c1                	or     ecx,eax
c0017435:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017439:	8d 50 03             	lea    edx,[eax+0x3]
c001743c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017440:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017444:	0f b6 c0             	movzx  eax,al
c0017447:	c1 e0 18             	shl    eax,0x18
c001744a:	09 c1                	or     ecx,eax
c001744c:	89 ca                	mov    edx,ecx
c001744e:	a0 20 c4 02 c0       	mov    al,ds:0xc002c420
c0017453:	0f b6 c0             	movzx  eax,al
c0017456:	89 14 85 e0 c4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3b20],edx
c001745d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017462:	a0 20 c4 02 c0       	mov    al,ds:0xc002c420
c0017467:	40                   	inc    eax
c0017468:	a2 20 c4 02 c0       	mov    ds:0xc002c420,al
c001746d:	e9 bb 01 00 00       	jmp    c001762d <scanMADT()+0x469>
c0017472:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017477:	0f 85 e9 00 00 00    	jne    c0017566 <scanMADT()+0x3a2>
c001747d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017481:	8d 50 01             	lea    edx,[eax+0x1]
c0017484:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017488:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001748c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017490:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017494:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017498:	8d 50 01             	lea    edx,[eax+0x1]
c001749b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001749f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174a3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00174a7:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00174ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174b3:	01 d0                	add    eax,edx
c00174b5:	83 c0 2c             	add    eax,0x2c
c00174b8:	8a 00                	mov    al,BYTE PTR [eax]
c00174ba:	0f b6 d0             	movzx  edx,al
c00174bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174c1:	8d 48 01             	lea    ecx,[eax+0x1]
c00174c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174c8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00174cc:	0f b6 c0             	movzx  eax,al
c00174cf:	c1 e0 08             	shl    eax,0x8
c00174d2:	89 d1                	mov    ecx,edx
c00174d4:	09 c1                	or     ecx,eax
c00174d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174da:	8d 50 02             	lea    edx,[eax+0x2]
c00174dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174e1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174e5:	0f b6 c0             	movzx  eax,al
c00174e8:	c1 e0 10             	shl    eax,0x10
c00174eb:	09 c1                	or     ecx,eax
c00174ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174f1:	8d 50 03             	lea    edx,[eax+0x3]
c00174f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174f8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174fc:	0f b6 c0             	movzx  eax,al
c00174ff:	c1 e0 18             	shl    eax,0x18
c0017502:	09 c8                	or     eax,ecx
c0017504:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017508:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001750d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017511:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017515:	01 d0                	add    eax,edx
c0017517:	83 c0 2c             	add    eax,0x2c
c001751a:	8a 00                	mov    al,BYTE PTR [eax]
c001751c:	0f b6 c0             	movzx  eax,al
c001751f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017523:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017526:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001752a:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001752e:	0f b6 d2             	movzx  edx,dl
c0017531:	c1 e2 08             	shl    edx,0x8
c0017534:	09 d0                	or     eax,edx
c0017536:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001753b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017540:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017545:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017549:	88 90 a0 ad 02 c0    	mov    BYTE PTR [eax-0x3ffd5260],dl
c001754f:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017554:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017559:	66 89 84 12 00 c4 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd3c00],ax
c0017561:	e9 c7 00 00 00       	jmp    c001762d <scanMADT()+0x469>
c0017566:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001756b:	0f 85 b0 00 00 00    	jne    c0017621 <scanMADT()+0x45d>
c0017571:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017575:	8d 50 01             	lea    edx,[eax+0x1]
c0017578:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001757c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017580:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017584:	0f b6 c0             	movzx  eax,al
c0017587:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001758b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001758f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017593:	01 d0                	add    eax,edx
c0017595:	83 c0 2c             	add    eax,0x2c
c0017598:	8a 00                	mov    al,BYTE PTR [eax]
c001759a:	0f b6 d0             	movzx  edx,al
c001759d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175a1:	8d 48 01             	lea    ecx,[eax+0x1]
c00175a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175a8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00175ac:	0f b6 c0             	movzx  eax,al
c00175af:	c1 e0 08             	shl    eax,0x8
c00175b2:	09 d0                	or     eax,edx
c00175b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175b8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00175bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175c1:	8d 50 01             	lea    edx,[eax+0x1]
c00175c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175cc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00175d0:	0f b6 c0             	movzx  eax,al
c00175d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175db:	c1 e0 08             	shl    eax,0x8
c00175de:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00175e2:	89 c1                	mov    ecx,eax
c00175e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175e8:	c1 e0 18             	shl    eax,0x18
c00175eb:	89 c3                	mov    ebx,eax
c00175ed:	a1 70 c3 02 c0       	mov    eax,ds:0xc002c370
c00175f2:	8d 50 01             	lea    edx,[eax+0x1]
c00175f5:	89 15 70 c3 02 c0    	mov    DWORD PTR ds:0xc002c370,edx
c00175fb:	09 d9                	or     ecx,ebx
c00175fd:	89 ca                	mov    edx,ecx
c00175ff:	89 14 85 80 c3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3c80],edx
c0017606:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001760a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001760e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017612:	68 00 90 02 c0       	push   0xc0029000
c0017617:	e8 81 b0 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001761c:	83 c4 10             	add    esp,0x10
c001761f:	eb 0c                	jmp    c001762d <scanMADT()+0x469>
c0017621:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017626:	75 05                	jne    c001762d <scanMADT()+0x469>
c0017628:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001762d:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017632:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017636:	01 d0                	add    eax,edx
c0017638:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001763c:	e9 54 fc ff ff       	jmp    c0017295 <scanMADT()+0xd1>
c0017641:	90                   	nop
c0017642:	eb 01                	jmp    c0017645 <scanMADT()+0x481>
c0017644:	90                   	nop
c0017645:	83 c4 38             	add    esp,0x38
c0017648:	5b                   	pop    ebx
c0017649:	c3                   	ret    

c001764a <ACPI::ACPI()>:
c001764a:	83 ec 0c             	sub    esp,0xc
c001764d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017651:	83 ec 08             	sub    esp,0x8
c0017654:	68 f3 8e 02 c0       	push   0xc0028ef3
c0017659:	50                   	push   eax
c001765a:	e8 1d c6 ff ff       	call   c0013c7c <Device::Device(char const*)>
c001765f:	83 c4 10             	add    esp,0x10
c0017662:	ba d8 90 02 c0       	mov    edx,0xc00290d8
c0017667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001766b:	89 10                	mov    DWORD PTR [eax],edx
c001766d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017671:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001767c:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0017686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001768a:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0017694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017698:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c001769f:	e8 20 fb ff ff       	call   c00171c4 <scanMADT()>
c00176a4:	90                   	nop
c00176a5:	83 c4 0c             	add    esp,0xc
c00176a8:	c3                   	ret    
c00176a9:	90                   	nop

c00176aa <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00176aa:	83 ec 2c             	sub    esp,0x2c
c00176ad:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00176b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00176b5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00176b9:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00176bd:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00176c2:	88 d0                	mov    al,dl
c00176c4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00176c8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00176cd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00176d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176d9:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00176df:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00176e3:	0f 8d 97 00 00 00    	jge    c0017780 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00176e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00176f1:	83 c2 2a             	add    edx,0x2a
c00176f4:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00176f8:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00176fd:	75 78                	jne    c0017777 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00176ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017703:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017707:	83 c2 2a             	add    edx,0x2a
c001770a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001770e:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017712:	75 63                	jne    c0017777 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017714:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017719:	74 3a                	je     c0017755 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001771b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001771f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017723:	83 c2 2a             	add    edx,0x2a
c0017726:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001772a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001772e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017731:	39 c2                	cmp    edx,eax
c0017733:	74 10                	je     c0017745 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017735:	83 ec 0c             	sub    esp,0xc
c0017738:	68 3c 90 02 c0       	push   0xc002903c
c001773d:	e8 9f 1a 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c0017742:	83 c4 10             	add    esp,0x10
c0017745:	83 ec 0c             	sub    esp,0xc
c0017748:	68 f8 8e 02 c0       	push   0xc0028ef8
c001774d:	e8 8f 1a 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c0017752:	83 c4 10             	add    esp,0x10
c0017755:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017759:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001775d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017761:	83 c2 2a             	add    edx,0x2a
c0017764:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017768:	8b 02                	mov    eax,DWORD PTR [edx]
c001776a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001776d:	89 01                	mov    DWORD PTR [ecx],eax
c001776f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017772:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017777:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001777b:	e9 55 ff ff ff       	jmp    c00176d5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017780:	90                   	nop
c0017781:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017785:	83 c4 2c             	add    esp,0x2c
c0017788:	c2 04 00             	ret    0x4
c001778b:	90                   	nop

c001778c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001778c:	56                   	push   esi
c001778d:	53                   	push   ebx
c001778e:	83 ec 14             	sub    esp,0x14
c0017791:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017795:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017799:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001779d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00177a2:	88 c8                	mov    al,cl
c00177a4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00177a8:	88 d0                	mov    al,dl
c00177aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00177ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177b2:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c00177b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177bc:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c00177c2:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c00177c7:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00177cc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00177d1:	83 ec 04             	sub    esp,0x4
c00177d4:	56                   	push   esi
c00177d5:	53                   	push   ebx
c00177d6:	51                   	push   ecx
c00177d7:	52                   	push   edx
c00177d8:	50                   	push   eax
c00177d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00177dd:	68 6c 90 02 c0       	push   0xc002906c
c00177e2:	e8 b6 ae ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00177e7:	83 c4 20             	add    esp,0x20
c00177ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177ee:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00177f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177f8:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00177fb:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00177ff:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017803:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017807:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001780d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017811:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017814:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017818:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001781d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017821:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017827:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001782b:	8d 48 01             	lea    ecx,[eax+0x1]
c001782e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017832:	83 c2 2a             	add    edx,0x2a
c0017835:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017839:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001783d:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017843:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017847:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001784a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001784e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017852:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017856:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001785c:	8d 50 01             	lea    edx,[eax+0x1]
c001785f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017863:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0017869:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001786d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017873:	3d 00 08 00 00       	cmp    eax,0x800
c0017878:	75 10                	jne    c001788a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c001787a:	83 ec 0c             	sub    esp,0xc
c001787d:	68 07 8f 02 c0       	push   0xc0028f07
c0017882:	e8 5a 19 00 00       	call   c00191e1 <Krnl::panic(char const*)>
c0017887:	83 c4 10             	add    esp,0x10
c001788a:	90                   	nop
c001788b:	83 c4 14             	add    esp,0x14
c001788e:	5b                   	pop    ebx
c001788f:	5e                   	pop    esi
c0017890:	c3                   	ret    
c0017891:	90                   	nop

c0017892 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017892:	b8 00 00 00 00       	mov    eax,0x0
c0017897:	c3                   	ret    

c0017898 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017898:	83 ec 1c             	sub    esp,0x1c
c001789b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001789f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00178a2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00178a6:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c00178ab:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00178b0:	83 ec 08             	sub    esp,0x8
c00178b3:	52                   	push   edx
c00178b4:	50                   	push   eax
c00178b5:	e8 2e 72 ff ff       	call   c000eae8 <Computer::readCMOS(unsigned char)>
c00178ba:	83 c4 10             	add    esp,0x10
c00178bd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00178c1:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c00178c6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00178cb:	83 ec 04             	sub    esp,0x4
c00178ce:	6a 01                	push   0x1
c00178d0:	52                   	push   edx
c00178d1:	50                   	push   eax
c00178d2:	e8 27 73 ff ff       	call   c000ebfe <Computer::writeCMOS(unsigned char, unsigned char)>
c00178d7:	83 c4 10             	add    esp,0x10
c00178da:	90                   	nop
c00178db:	83 c4 1c             	add    esp,0x1c
c00178de:	c3                   	ret    
c00178df:	90                   	nop

c00178e0 <ACPI::open(int, int, void*)>:
c00178e0:	53                   	push   ebx
c00178e1:	83 ec 28             	sub    esp,0x28
c00178e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178e8:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00178ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178f3:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00178f9:	84 c0                	test   al,al
c00178fb:	74 67                	je     c0017964 <ACPI::open(int, int, void*)+0x84>
c00178fd:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c0017905:	83 ec 0c             	sub    esp,0xc
c0017908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001790c:	e8 bf 7b ff ff       	call   c000f4d0 <malloc>
c0017911:	83 c4 10             	add    esp,0x10
c0017914:	89 c3                	mov    ebx,eax
c0017916:	83 ec 0c             	sub    esp,0xc
c0017919:	53                   	push   ebx
c001791a:	e8 a5 92 00 00       	call   c0020bc4 <PCI::PCI()>
c001791f:	83 c4 10             	add    esp,0x10
c0017922:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0017926:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001792a:	83 ec 08             	sub    esp,0x8
c001792d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017931:	50                   	push   eax
c0017932:	e8 55 c1 ff ff       	call   c0013a8c <Device::addChild(Device*)>
c0017937:	83 c4 10             	add    esp,0x10
c001793a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001793e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017940:	83 c0 08             	add    eax,0x8
c0017943:	8b 00                	mov    eax,DWORD PTR [eax]
c0017945:	6a 00                	push   0x0
c0017947:	6a 00                	push   0x0
c0017949:	6a 00                	push   0x0
c001794b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001794f:	ff d0                	call   eax
c0017951:	83 c4 10             	add    esp,0x10
c0017954:	83 ec 0c             	sub    esp,0xc
c0017957:	68 24 8f 02 c0       	push   0xc0028f24
c001795c:	e8 3c ad ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0017961:	83 c4 10             	add    esp,0x10
c0017964:	83 ec 0c             	sub    esp,0xc
c0017967:	68 2f 8f 02 c0       	push   0xc0028f2f
c001796c:	e8 ba 37 00 00       	call   c001b12b <Thr::loadKernelSymbolTable(char const*)>
c0017971:	83 c4 10             	add    esp,0x10
c0017974:	8b 1d c8 ba 02 c0    	mov    ebx,DWORD PTR ds:0xc002bac8
c001797a:	83 ec 08             	sub    esp,0x8
c001797d:	6a 01                	push   0x1
c001797f:	68 4d 8f 02 c0       	push   0xc0028f4d
c0017984:	e8 62 42 00 00       	call   c001bbeb <Thr::loadDLL(char const*, bool)>
c0017989:	83 c4 10             	add    esp,0x10
c001798c:	83 ec 08             	sub    esp,0x8
c001798f:	53                   	push   ebx
c0017990:	50                   	push   eax
c0017991:	e8 64 44 00 00       	call   c001bdfa <Thr::executeDLL(unsigned long, void*)>
c0017996:	83 c4 10             	add    esp,0x10
c0017999:	8b 1d c8 ba 02 c0    	mov    ebx,DWORD PTR ds:0xc002bac8
c001799f:	83 ec 08             	sub    esp,0x8
c00179a2:	6a 01                	push   0x1
c00179a4:	68 6a 8f 02 c0       	push   0xc0028f6a
c00179a9:	e8 3d 42 00 00       	call   c001bbeb <Thr::loadDLL(char const*, bool)>
c00179ae:	83 c4 10             	add    esp,0x10
c00179b1:	83 ec 08             	sub    esp,0x8
c00179b4:	53                   	push   ebx
c00179b5:	50                   	push   eax
c00179b6:	e8 3f 44 00 00       	call   c001bdfa <Thr::executeDLL(unsigned long, void*)>
c00179bb:	83 c4 10             	add    esp,0x10
c00179be:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c00179c3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179c9:	83 e0 04             	and    eax,0x4
c00179cc:	84 c0                	test   al,al
c00179ce:	0f 84 d6 00 00 00    	je     c0017aaa <ACPI::open(int, int, void*)+0x1ca>
c00179d4:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c00179dc:	83 ec 0c             	sub    esp,0xc
c00179df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179e3:	e8 e8 7a ff ff       	call   c000f4d0 <malloc>
c00179e8:	83 c4 10             	add    esp,0x10
c00179eb:	89 c3                	mov    ebx,eax
c00179ed:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00179f2:	83 ec 04             	sub    esp,0x4
c00179f5:	50                   	push   eax
c00179f6:	68 87 8f 02 c0       	push   0xc0028f87
c00179fb:	53                   	push   ebx
c00179fc:	e8 cb b1 ff ff       	call   c0012bcc <File::File(char const*, Process*)>
c0017a01:	83 c4 10             	add    esp,0x10
c0017a04:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0017a08:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017a0d:	74 17                	je     c0017a26 <ACPI::open(int, int, void*)+0x146>
c0017a0f:	83 ec 0c             	sub    esp,0xc
c0017a12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a16:	e8 83 b4 ff ff       	call   c0012e9e <File::exists()>
c0017a1b:	83 c4 10             	add    esp,0x10
c0017a1e:	84 c0                	test   al,al
c0017a20:	74 04                	je     c0017a26 <ACPI::open(int, int, void*)+0x146>
c0017a22:	b0 01                	mov    al,0x1
c0017a24:	eb 02                	jmp    c0017a28 <ACPI::open(int, int, void*)+0x148>
c0017a26:	b0 00                	mov    al,0x0
c0017a28:	84 c0                	test   al,al
c0017a2a:	74 25                	je     c0017a51 <ACPI::open(int, int, void*)+0x171>
c0017a2c:	8b 1d c8 ba 02 c0    	mov    ebx,DWORD PTR ds:0xc002bac8
c0017a32:	83 ec 08             	sub    esp,0x8
c0017a35:	6a 01                	push   0x1
c0017a37:	68 87 8f 02 c0       	push   0xc0028f87
c0017a3c:	e8 aa 41 00 00       	call   c001bbeb <Thr::loadDLL(char const*, bool)>
c0017a41:	83 c4 10             	add    esp,0x10
c0017a44:	83 ec 08             	sub    esp,0x8
c0017a47:	53                   	push   ebx
c0017a48:	50                   	push   eax
c0017a49:	e8 ac 43 00 00       	call   c001bdfa <Thr::executeDLL(unsigned long, void*)>
c0017a4e:	83 c4 10             	add    esp,0x10
c0017a51:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017a56:	74 1e                	je     c0017a76 <ACPI::open(int, int, void*)+0x196>
c0017a58:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017a5d:	74 17                	je     c0017a76 <ACPI::open(int, int, void*)+0x196>
c0017a5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a63:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a65:	83 c0 08             	add    eax,0x8
c0017a68:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a6a:	83 ec 0c             	sub    esp,0xc
c0017a6d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a71:	ff d0                	call   eax
c0017a73:	83 c4 10             	add    esp,0x10
c0017a76:	a1 68 c3 02 c0       	mov    eax,ds:0xc002c368
c0017a7b:	83 ec 08             	sub    esp,0x8
c0017a7e:	68 a4 8f 02 c0       	push   0xc0028fa4
c0017a83:	50                   	push   eax
c0017a84:	e8 9f f6 ff ff       	call   c0017128 <findDataTable(unsigned char*, char*)>
c0017a89:	83 c4 10             	add    esp,0x10
c0017a8c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a90:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017a95:	74 13                	je     c0017aaa <ACPI::open(int, int, void*)+0x1ca>
c0017a97:	83 ec 08             	sub    esp,0x8
c0017a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a9e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017aa2:	e8 f1 fd ff ff       	call   c0017898 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017aa7:	83 c4 10             	add    esp,0x10
c0017aaa:	b8 00 00 00 00       	mov    eax,0x0
c0017aaf:	83 c4 28             	add    esp,0x28
c0017ab2:	5b                   	pop    ebx
c0017ab3:	c3                   	ret    

c0017ab4 <ACPI::sleep()>:
c0017ab4:	83 ec 0c             	sub    esp,0xc
c0017ab7:	a1 40 c1 02 c0       	mov    eax,ds:0xc002c140
c0017abc:	85 c0                	test   eax,eax
c0017abe:	74 07                	je     c0017ac7 <ACPI::sleep()+0x13>
c0017ac0:	a1 40 c1 02 c0       	mov    eax,ds:0xc002c140
c0017ac5:	ff d0                	call   eax
c0017ac7:	90                   	nop
c0017ac8:	83 c4 0c             	add    esp,0xc
c0017acb:	c3                   	ret    

c0017acc <CPU::close(int, int, void*)>:
c0017acc:	31 c0                	xor    eax,eax
c0017ace:	c3                   	ret    
c0017acf:	90                   	nop

c0017ad0 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017ad0:	55                   	push   ebp
c0017ad1:	57                   	push   edi
c0017ad2:	56                   	push   esi
c0017ad3:	53                   	push   ebx
c0017ad4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017ad8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017adc:	89 ce                	mov    esi,ecx
c0017ade:	89 d5                	mov    ebp,edx
c0017ae0:	80 f9 04             	cmp    cl,0x4
c0017ae3:	75 28                	jne    c0017b0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017ae5:	8d 42 f9             	lea    eax,[edx-0x7]
c0017ae8:	3c 03                	cmp    al,0x3
c0017aea:	0f 86 63 01 00 00    	jbe    c0017c53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017af0:	80 fa 03             	cmp    dl,0x3
c0017af3:	0f 84 5a 01 00 00    	je     c0017c53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017af9:	8d 7a f2             	lea    edi,[edx-0xe]
c0017afc:	b8 70 af 02 c0       	mov    eax,0xc002af70
c0017b01:	89 fb                	mov    ebx,edi
c0017b03:	80 fb 01             	cmp    bl,0x1
c0017b06:	77 4e                	ja     c0017b56 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017b08:	e9 52 01 00 00       	jmp    c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b0d:	80 f9 05             	cmp    cl,0x5
c0017b10:	75 4d                	jne    c0017b5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017b12:	b8 80 af 02 c0       	mov    eax,0xc002af80
c0017b17:	80 fa 03             	cmp    dl,0x3
c0017b1a:	0f 86 3f 01 00 00    	jbe    c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b20:	8d 7a fa             	lea    edi,[edx-0x6]
c0017b23:	b8 90 af 02 c0       	mov    eax,0xc002af90
c0017b28:	89 fb                	mov    ebx,edi
c0017b2a:	80 fb 01             	cmp    bl,0x1
c0017b2d:	0f 86 2c 01 00 00    	jbe    c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b33:	b8 a0 af 02 c0       	mov    eax,0xc002afa0
c0017b38:	80 fa 08             	cmp    dl,0x8
c0017b3b:	0f 84 1e 01 00 00    	je     c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b41:	89 d7                	mov    edi,edx
c0017b43:	b8 b0 af 02 c0       	mov    eax,0xc002afb0
c0017b48:	83 e7 fb             	and    edi,0xfffffffb
c0017b4b:	89 fb                	mov    ebx,edi
c0017b4d:	80 fb 09             	cmp    bl,0x9
c0017b50:	0f 84 09 01 00 00    	je     c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b56:	31 c0                	xor    eax,eax
c0017b58:	89 eb                	mov    ebx,ebp
c0017b5a:	0f b6 fb             	movzx  edi,bl
c0017b5d:	eb 30                	jmp    c0017b8f <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017b5f:	31 c0                	xor    eax,eax
c0017b61:	80 f9 06             	cmp    cl,0x6
c0017b64:	75 f2                	jne    c0017b58 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017b66:	80 fa 0a             	cmp    dl,0xa
c0017b69:	77 ed                	ja     c0017b58 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017b6b:	bf de 05 00 00       	mov    edi,0x5de
c0017b70:	0f a3 d7             	bt     edi,edx
c0017b73:	73 e3                	jae    c0017b58 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017b75:	b8 c0 af 02 c0       	mov    eax,0xc002afc0
c0017b7a:	e9 e0 00 00 00       	jmp    c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b7f:	39 c7                	cmp    edi,eax
c0017b81:	0f 84 d3 00 00 00    	je     c0017c5a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017b87:	40                   	inc    eax
c0017b88:	3d d0 00 00 00       	cmp    eax,0xd0
c0017b8d:	74 09                	je     c0017b98 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017b8f:	89 f3                	mov    ebx,esi
c0017b91:	80 fb 0f             	cmp    bl,0xf
c0017b94:	75 f1                	jne    c0017b87 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017b96:	eb e7                	jmp    c0017b7f <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017b98:	80 f9 10             	cmp    cl,0x10
c0017b9b:	75 14                	jne    c0017bb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017b9d:	8d 42 fc             	lea    eax,[edx-0x4]
c0017ba0:	83 e0 fb             	and    eax,0xfffffffb
c0017ba3:	3c 02                	cmp    al,0x2
c0017ba5:	76 34                	jbe    c0017bdb <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017ba7:	b8 ee 93 02 c0       	mov    eax,0xc00293ee
c0017bac:	80 fa 02             	cmp    dl,0x2
c0017baf:	eb 24                	jmp    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017bb1:	80 f9 11             	cmp    cl,0x11
c0017bb4:	75 13                	jne    c0017bc9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017bb6:	b8 ee 93 02 c0       	mov    eax,0xc00293ee
c0017bbb:	80 fa 03             	cmp    dl,0x3
c0017bbe:	0f 85 9b 00 00 00    	jne    c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bc4:	e9 91 00 00 00       	jmp    c0017c5a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017bc9:	80 f9 12             	cmp    cl,0x12
c0017bcc:	75 14                	jne    c0017be2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017bce:	b8 ee 93 02 c0       	mov    eax,0xc00293ee
c0017bd3:	fe ca                	dec    dl
c0017bd5:	0f 85 84 00 00 00    	jne    c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bdb:	b8 e0 af 02 c0       	mov    eax,0xc002afe0
c0017be0:	eb 7d                	jmp    c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017be2:	80 f9 14             	cmp    cl,0x14
c0017be5:	75 12                	jne    c0017bf9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017be7:	4a                   	dec    edx
c0017be8:	b8 ee 93 02 c0       	mov    eax,0xc00293ee
c0017bed:	80 fa 01             	cmp    dl,0x1
c0017bf0:	77 6d                	ja     c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bf2:	b8 f0 af 02 c0       	mov    eax,0xc002aff0
c0017bf7:	eb 66                	jmp    c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bf9:	80 f9 15             	cmp    cl,0x15
c0017bfc:	75 31                	jne    c0017c2f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017bfe:	b8 00 b0 02 c0       	mov    eax,0xc002b000
c0017c03:	80 fa 01             	cmp    dl,0x1
c0017c06:	74 57                	je     c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c08:	b8 ee 93 02 c0       	mov    eax,0xc00293ee
c0017c0d:	80 fa 13             	cmp    dl,0x13
c0017c10:	76 0c                	jbe    c0017c1e <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017c12:	80 fa 30             	cmp    dl,0x30
c0017c15:	75 48                	jne    c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c17:	b8 20 b0 02 c0       	mov    eax,0xc002b020
c0017c1c:	eb 41                	jmp    c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c1e:	b9 04 00 09 00       	mov    ecx,0x90004
c0017c23:	0f a3 d1             	bt     ecx,edx
c0017c26:	73 37                	jae    c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c28:	b8 10 b0 02 c0       	mov    eax,0xc002b010
c0017c2d:	eb 30                	jmp    c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c2f:	b8 ee 93 02 c0       	mov    eax,0xc00293ee
c0017c34:	80 f9 16             	cmp    cl,0x16
c0017c37:	75 26                	jne    c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c39:	b8 30 b0 02 c0       	mov    eax,0xc002b030
c0017c3e:	84 d2                	test   dl,dl
c0017c40:	74 1d                	je     c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c42:	b8 ee 93 02 c0       	mov    eax,0xc00293ee
c0017c47:	80 fa 30             	cmp    dl,0x30
c0017c4a:	75 13                	jne    c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c4c:	b8 40 b0 02 c0       	mov    eax,0xc002b040
c0017c51:	eb 0c                	jmp    c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c53:	b8 60 af 02 c0       	mov    eax,0xc002af60
c0017c58:	eb 05                	jmp    c0017c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c5a:	b8 d0 af 02 c0       	mov    eax,0xc002afd0
c0017c5f:	5b                   	pop    ebx
c0017c60:	5e                   	pop    esi
c0017c61:	5f                   	pop    edi
c0017c62:	5d                   	pop    ebp
c0017c63:	c3                   	ret    

c0017c64 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017c64:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017c68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c6c:	80 f9 04             	cmp    cl,0x4
c0017c6f:	75 6b                	jne    c0017cdc <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017c71:	b8 c0 ad 02 c0       	mov    eax,0xc002adc0
c0017c76:	80 fa 01             	cmp    dl,0x1
c0017c79:	0f 86 92 02 00 00    	jbe    c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c7f:	b8 d0 ad 02 c0       	mov    eax,0xc002add0
c0017c84:	80 fa 02             	cmp    dl,0x2
c0017c87:	0f 84 84 02 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c8d:	b8 e0 ad 02 c0       	mov    eax,0xc002ade0
c0017c92:	80 fa 03             	cmp    dl,0x3
c0017c95:	0f 84 76 02 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c9b:	b8 f0 ad 02 c0       	mov    eax,0xc002adf0
c0017ca0:	80 fa 04             	cmp    dl,0x4
c0017ca3:	0f 84 68 02 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ca9:	b8 00 ae 02 c0       	mov    eax,0xc002ae00
c0017cae:	80 fa 05             	cmp    dl,0x5
c0017cb1:	0f 84 5a 02 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cb7:	b8 e0 ad 02 c0       	mov    eax,0xc002ade0
c0017cbc:	80 fa 07             	cmp    dl,0x7
c0017cbf:	0f 84 4c 02 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cc5:	83 ea 08             	sub    edx,0x8
c0017cc8:	b8 ee 93 02 c0       	mov    eax,0xc00293ee
c0017ccd:	80 fa 01             	cmp    dl,0x1
c0017cd0:	0f 87 3b 02 00 00    	ja     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cd6:	b8 10 ae 02 c0       	mov    eax,0xc002ae10
c0017cdb:	c3                   	ret    
c0017cdc:	80 f9 05             	cmp    cl,0x5
c0017cdf:	75 45                	jne    c0017d26 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017ce1:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017ce4:	b8 20 ae 02 c0       	mov    eax,0xc002ae20
c0017ce9:	80 f9 02             	cmp    cl,0x2
c0017cec:	0f 86 1f 02 00 00    	jbe    c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cf2:	80 fa 04             	cmp    dl,0x4
c0017cf5:	0f 84 f3 01 00 00    	je     c0017eee <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017cfb:	80 fa 07             	cmp    dl,0x7
c0017cfe:	0f 84 0d 02 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d04:	b8 30 ae 02 c0       	mov    eax,0xc002ae30
c0017d09:	80 fa 08             	cmp    dl,0x8
c0017d0c:	0f 84 ff 01 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d12:	b8 ee 93 02 c0       	mov    eax,0xc00293ee
c0017d17:	80 fa 09             	cmp    dl,0x9
c0017d1a:	0f 85 f1 01 00 00    	jne    c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d20:	b8 40 ae 02 c0       	mov    eax,0xc002ae40
c0017d25:	c3                   	ret    
c0017d26:	80 f9 06             	cmp    cl,0x6
c0017d29:	0f 85 85 01 00 00    	jne    c0017eb4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017d2f:	b8 50 ae 02 c0       	mov    eax,0xc002ae50
c0017d34:	80 fa 01             	cmp    dl,0x1
c0017d37:	0f 84 d4 01 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d3d:	8d 42 fb             	lea    eax,[edx-0x5]
c0017d40:	3c 01                	cmp    al,0x1
c0017d42:	0f 86 ac 01 00 00    	jbe    c0017ef4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017d48:	80 fa 03             	cmp    dl,0x3
c0017d4b:	0f 84 a3 01 00 00    	je     c0017ef4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017d51:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017d54:	b8 70 ae 02 c0       	mov    eax,0xc002ae70
c0017d59:	80 f9 01             	cmp    cl,0x1
c0017d5c:	0f 86 af 01 00 00    	jbe    c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d62:	80 fa 09             	cmp    dl,0x9
c0017d65:	0f 84 8f 01 00 00    	je     c0017efa <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017d6b:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017d6e:	80 f9 01             	cmp    cl,0x1
c0017d71:	0f 86 9a 01 00 00    	jbe    c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d77:	b8 80 ae 02 c0       	mov    eax,0xc002ae80
c0017d7c:	80 fa 0d             	cmp    dl,0xd
c0017d7f:	0f 84 8c 01 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d85:	b8 90 ae 02 c0       	mov    eax,0xc002ae90
c0017d8a:	80 fa 0e             	cmp    dl,0xe
c0017d8d:	0f 84 7e 01 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d93:	b8 a0 ae 02 c0       	mov    eax,0xc002aea0
c0017d98:	80 fa 0f             	cmp    dl,0xf
c0017d9b:	0f 84 70 01 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017da1:	b8 80 ae 02 c0       	mov    eax,0xc002ae80
c0017da6:	80 fa 15             	cmp    dl,0x15
c0017da9:	0f 84 62 01 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017daf:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017db2:	b8 a0 ae 02 c0       	mov    eax,0xc002aea0
c0017db7:	80 f9 01             	cmp    cl,0x1
c0017dba:	0f 86 51 01 00 00    	jbe    c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dc0:	80 fa 1a             	cmp    dl,0x1a
c0017dc3:	0f 84 37 01 00 00    	je     c0017f00 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017dc9:	80 fa 1c             	cmp    dl,0x1c
c0017dcc:	0f 84 34 01 00 00    	je     c0017f06 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017dd2:	80 fa 1d             	cmp    dl,0x1d
c0017dd5:	0f 84 36 01 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ddb:	b8 d0 ae 02 c0       	mov    eax,0xc002aed0
c0017de0:	80 fa 25             	cmp    dl,0x25
c0017de3:	0f 84 28 01 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017de9:	8d 4a da             	lea    ecx,[edx-0x26]
c0017dec:	b8 c0 ae 02 c0       	mov    eax,0xc002aec0
c0017df1:	80 f9 01             	cmp    cl,0x1
c0017df4:	0f 86 17 01 00 00    	jbe    c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dfa:	b8 e0 ae 02 c0       	mov    eax,0xc002aee0
c0017dff:	80 fa 2a             	cmp    dl,0x2a
c0017e02:	0f 84 09 01 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e08:	b8 d0 ae 02 c0       	mov    eax,0xc002aed0
c0017e0d:	80 fa 2c             	cmp    dl,0x2c
c0017e10:	0f 84 fb 00 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e16:	b8 e0 ae 02 c0       	mov    eax,0xc002aee0
c0017e1b:	80 fa 2d             	cmp    dl,0x2d
c0017e1e:	0f 84 ed 00 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e24:	b8 b0 ae 02 c0       	mov    eax,0xc002aeb0
c0017e29:	80 fa 2e             	cmp    dl,0x2e
c0017e2c:	0f 84 df 00 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e32:	b8 d0 ae 02 c0       	mov    eax,0xc002aed0
c0017e37:	80 fa 2f             	cmp    dl,0x2f
c0017e3a:	0f 84 d1 00 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e40:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017e43:	b8 c0 ae 02 c0       	mov    eax,0xc002aec0
c0017e48:	80 f9 01             	cmp    cl,0x1
c0017e4b:	0f 86 c0 00 00 00    	jbe    c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e51:	b8 f0 ae 02 c0       	mov    eax,0xc002aef0
c0017e56:	80 fa 37             	cmp    dl,0x37
c0017e59:	0f 84 b2 00 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e5f:	b8 00 af 02 c0       	mov    eax,0xc002af00
c0017e64:	80 fa 3a             	cmp    dl,0x3a
c0017e67:	0f 84 a4 00 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e6d:	b8 10 af 02 c0       	mov    eax,0xc002af10
c0017e72:	80 fa 3c             	cmp    dl,0x3c
c0017e75:	0f 84 96 00 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e7b:	b8 20 af 02 c0       	mov    eax,0xc002af20
c0017e80:	80 fa 3d             	cmp    dl,0x3d
c0017e83:	0f 84 88 00 00 00    	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e89:	b8 00 af 02 c0       	mov    eax,0xc002af00
c0017e8e:	80 fa 3e             	cmp    dl,0x3e
c0017e91:	74 7e                	je     c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e93:	8d 42 bb             	lea    eax,[edx-0x45]
c0017e96:	3c 01                	cmp    al,0x1
c0017e98:	76 72                	jbe    c0017f0c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017e9a:	80 fa 3f             	cmp    dl,0x3f
c0017e9d:	74 6d                	je     c0017f0c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017e9f:	80 fa 4a             	cmp    dl,0x4a
c0017ea2:	74 0a                	je     c0017eae <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017ea4:	b8 ee 93 02 c0       	mov    eax,0xc00293ee
c0017ea9:	80 fa 4d             	cmp    dl,0x4d
c0017eac:	75 63                	jne    c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eae:	b8 f0 ae 02 c0       	mov    eax,0xc002aef0
c0017eb3:	c3                   	ret    
c0017eb4:	b8 ee 93 02 c0       	mov    eax,0xc00293ee
c0017eb9:	80 f9 0b             	cmp    cl,0xb
c0017ebc:	75 0a                	jne    c0017ec8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017ebe:	fe ca                	dec    dl
c0017ec0:	75 4f                	jne    c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ec2:	b8 30 af 02 c0       	mov    eax,0xc002af30
c0017ec7:	c3                   	ret    
c0017ec8:	80 f9 0f             	cmp    cl,0xf
c0017ecb:	75 44                	jne    c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ecd:	b8 40 af 02 c0       	mov    eax,0xc002af40
c0017ed2:	80 fa 02             	cmp    dl,0x2
c0017ed5:	76 3a                	jbe    c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ed7:	8d 42 fd             	lea    eax,[edx-0x3]
c0017eda:	3c 01                	cmp    al,0x1
c0017edc:	76 0a                	jbe    c0017ee8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017ede:	b8 ee 93 02 c0       	mov    eax,0xc00293ee
c0017ee3:	80 fa 06             	cmp    dl,0x6
c0017ee6:	75 29                	jne    c0017f11 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ee8:	b8 50 af 02 c0       	mov    eax,0xc002af50
c0017eed:	c3                   	ret    
c0017eee:	b8 30 ae 02 c0       	mov    eax,0xc002ae30
c0017ef3:	c3                   	ret    
c0017ef4:	b8 60 ae 02 c0       	mov    eax,0xc002ae60
c0017ef9:	c3                   	ret    
c0017efa:	b8 80 ae 02 c0       	mov    eax,0xc002ae80
c0017eff:	c3                   	ret    
c0017f00:	b8 b0 ae 02 c0       	mov    eax,0xc002aeb0
c0017f05:	c3                   	ret    
c0017f06:	b8 c0 ae 02 c0       	mov    eax,0xc002aec0
c0017f0b:	c3                   	ret    
c0017f0c:	b8 10 af 02 c0       	mov    eax,0xc002af10
c0017f11:	c3                   	ret    

c0017f12 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0017f12:	60                   	pusha  
c0017f13:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f1f:	9c                   	pushf  
c0017f20:	fa                   	cli    
c0017f21:	0f 09                	wbinvd 
c0017f23:	0f 30                	wrmsr  
c0017f25:	9d                   	popf   
c0017f26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017f2a:	89 02                	mov    DWORD PTR [edx],eax
c0017f2c:	61                   	popa   
c0017f2d:	c3                   	ret    

c0017f2e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0017f2e:	60                   	pusha  
c0017f2f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f33:	9c                   	pushf  
c0017f34:	fa                   	cli    
c0017f35:	0f 09                	wbinvd 
c0017f37:	31 c0                	xor    eax,eax
c0017f39:	31 d2                	xor    edx,edx
c0017f3b:	0f 32                	rdmsr  
c0017f3d:	9d                   	popf   
c0017f3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f42:	89 02                	mov    DWORD PTR [edx],eax
c0017f44:	61                   	popa   
c0017f45:	c3                   	ret    

c0017f46 <CPU::AMD_K6_writeback(int, int, int)>:
c0017f46:	56                   	push   esi
c0017f47:	53                   	push   ebx
c0017f48:	83 ec 10             	sub    esp,0x10
c0017f4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f4f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0017f54:	75 5d                	jne    c0017fb3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017f56:	83 f8 08             	cmp    eax,0x8
c0017f59:	75 09                	jne    c0017f64 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0017f5b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0017f60:	7e 13                	jle    c0017f75 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017f62:	eb 30                	jmp    c0017f94 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017f64:	83 f8 06             	cmp    eax,0x6
c0017f67:	7c 4a                	jl     c0017fb3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017f69:	83 f8 07             	cmp    eax,0x7
c0017f6c:	7e 07                	jle    c0017f75 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017f6e:	83 f8 09             	cmp    eax,0x9
c0017f71:	74 21                	je     c0017f94 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017f73:	eb 3e                	jmp    c0017fb3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017f75:	89 e6                	mov    esi,esp
c0017f77:	8b 1d 04 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb04
c0017f7d:	56                   	push   esi
c0017f7e:	c1 eb 15             	shr    ebx,0x15
c0017f81:	68 82 00 00 c0       	push   0xc0000082
c0017f86:	83 e3 7e             	and    ebx,0x7e
c0017f89:	e8 a0 ff ff ff       	call   c0017f2e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017f8e:	56                   	push   esi
c0017f8f:	6a 00                	push   0x0
c0017f91:	53                   	push   ebx
c0017f92:	eb 12                	jmp    c0017fa6 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0017f94:	89 e3                	mov    ebx,esp
c0017f96:	53                   	push   ebx
c0017f97:	68 82 00 00 c0       	push   0xc0000082
c0017f9c:	e8 8d ff ff ff       	call   c0017f2e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017fa1:	53                   	push   ebx
c0017fa2:	6a 00                	push   0x0
c0017fa4:	6a 00                	push   0x0
c0017fa6:	68 82 00 00 c0       	push   0xc0000082
c0017fab:	e8 62 ff ff ff       	call   c0017f12 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0017fb0:	83 c4 18             	add    esp,0x18
c0017fb3:	83 c4 10             	add    esp,0x10
c0017fb6:	5b                   	pop    ebx
c0017fb7:	5e                   	pop    esi
c0017fb8:	c3                   	ret    
c0017fb9:	90                   	nop

c0017fba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017fba:	55                   	push   ebp
c0017fbb:	57                   	push   edi
c0017fbc:	56                   	push   esi
c0017fbd:	53                   	push   ebx
c0017fbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fc2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017fc6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017fca:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017fce:	39 05 60 b0 02 c0    	cmp    DWORD PTR ds:0xc002b060,eax
c0017fd4:	75 23                	jne    c0017ff9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017fd6:	a1 cc c5 02 c0       	mov    eax,ds:0xc002c5cc
c0017fdb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017fdf:	89 06                	mov    DWORD PTR [esi],eax
c0017fe1:	a1 c8 c5 02 c0       	mov    eax,ds:0xc002c5c8
c0017fe6:	89 07                	mov    DWORD PTR [edi],eax
c0017fe8:	a1 c4 c5 02 c0       	mov    eax,ds:0xc002c5c4
c0017fed:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017ff0:	a1 c0 c5 02 c0       	mov    eax,ds:0xc002c5c0
c0017ff5:	89 02                	mov    DWORD PTR [edx],eax
c0017ff7:	eb 3f                	jmp    c0018038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0017ff9:	31 c9                	xor    ecx,ecx
c0017ffb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fff:	0f a2                	cpuid  
c0018001:	89 06                	mov    DWORD PTR [esi],eax
c0018003:	89 1f                	mov    DWORD PTR [edi],ebx
c0018005:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018009:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001800c:	89 10                	mov    DWORD PTR [eax],edx
c001800e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018012:	a3 60 b0 02 c0       	mov    ds:0xc002b060,eax
c0018017:	8b 06                	mov    eax,DWORD PTR [esi]
c0018019:	a3 cc c5 02 c0       	mov    ds:0xc002c5cc,eax
c001801e:	8b 07                	mov    eax,DWORD PTR [edi]
c0018020:	a3 c8 c5 02 c0       	mov    ds:0xc002c5c8,eax
c0018025:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018028:	a3 c4 c5 02 c0       	mov    ds:0xc002c5c4,eax
c001802d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018031:	8b 00                	mov    eax,DWORD PTR [eax]
c0018033:	a3 c0 c5 02 c0       	mov    ds:0xc002c5c0,eax
c0018038:	5b                   	pop    ebx
c0018039:	5e                   	pop    esi
c001803a:	5f                   	pop    edi
c001803b:	5d                   	pop    ebp
c001803c:	c3                   	ret    
c001803d:	90                   	nop

c001803e <CPU::cpuidCheckEDX(unsigned int)>:
c001803e:	83 ec 10             	sub    esp,0x10
c0018041:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018045:	50                   	push   eax
c0018046:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001804a:	50                   	push   eax
c001804b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001804f:	50                   	push   eax
c0018050:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018054:	50                   	push   eax
c0018055:	6a 01                	push   0x1
c0018057:	e8 5e ff ff ff       	call   c0017fba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001805c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018060:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018064:	0f 95 c0             	setne  al
c0018067:	83 c4 24             	add    esp,0x24
c001806a:	c3                   	ret    
c001806b:	90                   	nop

c001806c <CPU::cpuidCheckECX(unsigned int)>:
c001806c:	83 ec 10             	sub    esp,0x10
c001806f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018073:	50                   	push   eax
c0018074:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018078:	50                   	push   eax
c0018079:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001807d:	50                   	push   eax
c001807e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018082:	50                   	push   eax
c0018083:	6a 01                	push   0x1
c0018085:	e8 30 ff ff ff       	call   c0017fba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001808a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001808e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018092:	0f 95 c0             	setne  al
c0018095:	83 c4 24             	add    esp,0x24
c0018098:	c3                   	ret    
c0018099:	90                   	nop

c001809a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001809a:	83 ec 10             	sub    esp,0x10
c001809d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180a1:	50                   	push   eax
c00180a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180a6:	50                   	push   eax
c00180a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180ab:	50                   	push   eax
c00180ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180b0:	50                   	push   eax
c00180b1:	6a 07                	push   0x7
c00180b3:	e8 02 ff ff ff       	call   c0017fba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00180b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180bc:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00180c0:	0f 95 c0             	setne  al
c00180c3:	83 c4 24             	add    esp,0x24
c00180c6:	c3                   	ret    
c00180c7:	90                   	nop

c00180c8 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00180c8:	83 ec 10             	sub    esp,0x10
c00180cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180cf:	50                   	push   eax
c00180d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180d4:	50                   	push   eax
c00180d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180d9:	50                   	push   eax
c00180da:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180de:	50                   	push   eax
c00180df:	6a 07                	push   0x7
c00180e1:	e8 d4 fe ff ff       	call   c0017fba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00180e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180ea:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00180ee:	0f 95 c0             	setne  al
c00180f1:	83 c4 24             	add    esp,0x24
c00180f4:	c3                   	ret    
c00180f5:	90                   	nop

c00180f6 <CPU::CPU()>:
c00180f6:	83 ec 0c             	sub    esp,0xc
c00180f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180fd:	83 ec 08             	sub    esp,0x8
c0018100:	68 ee 93 02 c0       	push   0xc00293ee
c0018105:	50                   	push   eax
c0018106:	e8 71 bb ff ff       	call   c0013c7c <Device::Device(char const*)>
c001810b:	83 c4 10             	add    esp,0x10
c001810e:	ba c8 94 02 c0       	mov    edx,0xc00294c8
c0018113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018117:	89 10                	mov    DWORD PTR [eax],edx
c0018119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001811d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001812b:	05 78 01 00 00       	add    eax,0x178
c0018130:	83 ec 0c             	sub    esp,0xc
c0018133:	50                   	push   eax
c0018134:	e8 af 6b ff ff       	call   c000ece8 <GDT::GDT()>
c0018139:	83 c4 10             	add    esp,0x10
c001813c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018140:	05 7c 09 00 00       	add    eax,0x97c
c0018145:	83 ec 0c             	sub    esp,0xc
c0018148:	50                   	push   eax
c0018149:	e8 fc 6d ff ff       	call   c000ef4a <IDT::IDT()>
c001814e:	83 c4 10             	add    esp,0x10
c0018151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018155:	05 7c 11 00 00       	add    eax,0x117c
c001815a:	83 ec 0c             	sub    esp,0xc
c001815d:	50                   	push   eax
c001815e:	e8 7b 8e ff ff       	call   c0010fde <TSS::TSS()>
c0018163:	83 c4 10             	add    esp,0x10
c0018166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001816a:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018175:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001817f:	90                   	nop
c0018180:	83 c4 0c             	add    esp,0xc
c0018183:	c3                   	ret    

c0018184 <CPU::displayFeatures()>:
c0018184:	53                   	push   ebx
c0018185:	83 ec 10             	sub    esp,0x10
c0018188:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001818c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018192:	68 fc 90 02 c0       	push   0xc00290fc
c0018197:	e8 01 a5 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001819c:	59                   	pop    ecx
c001819d:	58                   	pop    eax
c001819e:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00181a4:	50                   	push   eax
c00181a5:	68 0d 91 02 c0       	push   0xc002910d
c00181aa:	e8 ee a4 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00181af:	58                   	pop    eax
c00181b0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181b6:	5a                   	pop    edx
c00181b7:	c1 e8 0e             	shr    eax,0xe
c00181ba:	0f b6 c0             	movzx  eax,al
c00181bd:	50                   	push   eax
c00181be:	68 1e 91 02 c0       	push   0xc002911e
c00181c3:	e8 d5 a4 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00181c8:	59                   	pop    ecx
c00181c9:	58                   	pop    eax
c00181ca:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181d0:	66 c1 e8 06          	shr    ax,0x6
c00181d4:	0f b6 c0             	movzx  eax,al
c00181d7:	50                   	push   eax
c00181d8:	68 2f 91 02 c0       	push   0xc002912f
c00181dd:	e8 bb a4 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00181e2:	c7 04 24 42 95 02 c0 	mov    DWORD PTR [esp],0xc0029542
c00181e9:	e8 af a4 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00181ee:	83 c4 10             	add    esp,0x10
c00181f1:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c00181f6:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00181fd:	74 05                	je     c0018204 <CPU::displayFeatures()+0x80>
c00181ff:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c0018204:	52                   	push   edx
c0018205:	52                   	push   edx
c0018206:	50                   	push   eax
c0018207:	68 40 91 02 c0       	push   0xc0029140
c001820c:	e8 8c a4 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0018211:	83 c4 10             	add    esp,0x10
c0018214:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c0018219:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018220:	78 05                	js     c0018227 <CPU::displayFeatures()+0xa3>
c0018222:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c0018227:	51                   	push   ecx
c0018228:	51                   	push   ecx
c0018229:	50                   	push   eax
c001822a:	68 57 91 02 c0       	push   0xc0029157
c001822f:	e8 69 a4 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0018234:	83 c4 10             	add    esp,0x10
c0018237:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c001823c:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018243:	75 05                	jne    c001824a <CPU::displayFeatures()+0xc6>
c0018245:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c001824a:	52                   	push   edx
c001824b:	52                   	push   edx
c001824c:	50                   	push   eax
c001824d:	68 6e 91 02 c0       	push   0xc002916e
c0018252:	e8 46 a4 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0018257:	83 c4 10             	add    esp,0x10
c001825a:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c001825f:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018266:	75 05                	jne    c001826d <CPU::displayFeatures()+0xe9>
c0018268:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c001826d:	51                   	push   ecx
c001826e:	51                   	push   ecx
c001826f:	50                   	push   eax
c0018270:	68 85 91 02 c0       	push   0xc0029185
c0018275:	e8 23 a4 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001827a:	83 c4 10             	add    esp,0x10
c001827d:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c0018282:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018289:	75 05                	jne    c0018290 <CPU::displayFeatures()+0x10c>
c001828b:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c0018290:	52                   	push   edx
c0018291:	52                   	push   edx
c0018292:	50                   	push   eax
c0018293:	68 9c 91 02 c0       	push   0xc002919c
c0018298:	e8 00 a4 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001829d:	83 c4 10             	add    esp,0x10
c00182a0:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c00182a5:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00182ac:	75 05                	jne    c00182b3 <CPU::displayFeatures()+0x12f>
c00182ae:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c00182b3:	51                   	push   ecx
c00182b4:	51                   	push   ecx
c00182b5:	50                   	push   eax
c00182b6:	68 b3 91 02 c0       	push   0xc00291b3
c00182bb:	e8 dd a3 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00182c0:	83 c4 10             	add    esp,0x10
c00182c3:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c00182c8:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00182cf:	75 05                	jne    c00182d6 <CPU::displayFeatures()+0x152>
c00182d1:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c00182d6:	52                   	push   edx
c00182d7:	52                   	push   edx
c00182d8:	50                   	push   eax
c00182d9:	68 ca 91 02 c0       	push   0xc00291ca
c00182de:	e8 ba a3 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00182e3:	83 c4 10             	add    esp,0x10
c00182e6:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c00182eb:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00182f2:	75 05                	jne    c00182f9 <CPU::displayFeatures()+0x175>
c00182f4:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c00182f9:	51                   	push   ecx
c00182fa:	51                   	push   ecx
c00182fb:	50                   	push   eax
c00182fc:	68 e1 91 02 c0       	push   0xc00291e1
c0018301:	e8 97 a3 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0018306:	83 c4 10             	add    esp,0x10
c0018309:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c001830e:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018315:	75 05                	jne    c001831c <CPU::displayFeatures()+0x198>
c0018317:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c001831c:	52                   	push   edx
c001831d:	52                   	push   edx
c001831e:	50                   	push   eax
c001831f:	68 f8 91 02 c0       	push   0xc00291f8
c0018324:	e8 74 a3 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0018329:	83 c4 10             	add    esp,0x10
c001832c:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c0018331:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018338:	75 05                	jne    c001833f <CPU::displayFeatures()+0x1bb>
c001833a:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c001833f:	51                   	push   ecx
c0018340:	51                   	push   ecx
c0018341:	50                   	push   eax
c0018342:	68 0f 92 02 c0       	push   0xc002920f
c0018347:	e8 51 a3 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001834c:	83 c4 10             	add    esp,0x10
c001834f:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c0018354:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001835b:	75 05                	jne    c0018362 <CPU::displayFeatures()+0x1de>
c001835d:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c0018362:	52                   	push   edx
c0018363:	52                   	push   edx
c0018364:	50                   	push   eax
c0018365:	68 26 92 02 c0       	push   0xc0029226
c001836a:	e8 2e a3 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001836f:	83 c4 10             	add    esp,0x10
c0018372:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c0018377:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001837e:	75 05                	jne    c0018385 <CPU::displayFeatures()+0x201>
c0018380:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c0018385:	51                   	push   ecx
c0018386:	51                   	push   ecx
c0018387:	50                   	push   eax
c0018388:	68 3d 92 02 c0       	push   0xc002923d
c001838d:	e8 0b a3 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0018392:	83 c4 10             	add    esp,0x10
c0018395:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c001839a:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00183a1:	75 05                	jne    c00183a8 <CPU::displayFeatures()+0x224>
c00183a3:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c00183a8:	52                   	push   edx
c00183a9:	52                   	push   edx
c00183aa:	50                   	push   eax
c00183ab:	68 54 92 02 c0       	push   0xc0029254
c00183b0:	e8 e8 a2 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00183b5:	83 c4 10             	add    esp,0x10
c00183b8:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c00183bd:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00183c4:	78 05                	js     c00183cb <CPU::displayFeatures()+0x247>
c00183c6:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c00183cb:	51                   	push   ecx
c00183cc:	51                   	push   ecx
c00183cd:	50                   	push   eax
c00183ce:	68 6b 92 02 c0       	push   0xc002926b
c00183d3:	e8 c5 a2 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00183d8:	83 c4 10             	add    esp,0x10
c00183db:	b8 d8 7c 02 c0       	mov    eax,0xc0027cd8
c00183e0:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00183e7:	75 05                	jne    c00183ee <CPU::displayFeatures()+0x26a>
c00183e9:	b8 dc 7c 02 c0       	mov    eax,0xc0027cdc
c00183ee:	52                   	push   edx
c00183ef:	52                   	push   edx
c00183f0:	50                   	push   eax
c00183f1:	68 82 92 02 c0       	push   0xc0029282
c00183f6:	e8 a2 a2 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00183fb:	83 c4 18             	add    esp,0x18
c00183fe:	5b                   	pop    ebx
c00183ff:	c3                   	ret    

c0018400 <CPU::detectFeatures()>:
c0018400:	55                   	push   ebp
c0018401:	57                   	push   edi
c0018402:	56                   	push   esi
c0018403:	53                   	push   ebx
c0018404:	83 ec 50             	sub    esp,0x50
c0018407:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001840b:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018415:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001841c:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018422:	6a 0d                	push   0xd
c0018424:	6a 00                	push   0x0
c0018426:	57                   	push   edi
c0018427:	e8 5f 82 fe ff       	call   c000068b <memset>
c001842c:	83 c4 10             	add    esp,0x10
c001842f:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0018434:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001843b:	0f 84 20 09 00 00    	je     c0018d61 <CPU::detectFeatures()+0x961>
c0018441:	83 ec 0c             	sub    esp,0xc
c0018444:	6a 10                	push   0x10
c0018446:	e8 f3 fb ff ff       	call   c001803e <CPU::cpuidCheckEDX(unsigned int)>
c001844b:	83 e0 01             	and    eax,0x1
c001844e:	8d 14 00             	lea    edx,[eax+eax*1]
c0018451:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018457:	83 e0 fd             	and    eax,0xfffffffd
c001845a:	09 d0                	or     eax,edx
c001845c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018462:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018469:	e8 d0 fb ff ff       	call   c001803e <CPU::cpuidCheckEDX(unsigned int)>
c001846e:	83 e0 01             	and    eax,0x1
c0018471:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018478:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001847e:	83 e0 fb             	and    eax,0xfffffffb
c0018481:	09 d0                	or     eax,edx
c0018483:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018489:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018490:	e8 a9 fb ff ff       	call   c001803e <CPU::cpuidCheckEDX(unsigned int)>
c0018495:	83 e0 01             	and    eax,0x1
c0018498:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001849f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00184a5:	83 e0 f7             	and    eax,0xfffffff7
c00184a8:	09 d0                	or     eax,edx
c00184aa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00184b0:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00184b7:	e8 82 fb ff ff       	call   c001803e <CPU::cpuidCheckEDX(unsigned int)>
c00184bc:	83 e0 01             	and    eax,0x1
c00184bf:	c1 e0 04             	shl    eax,0x4
c00184c2:	88 c2                	mov    dl,al
c00184c4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00184ca:	83 e0 ef             	and    eax,0xffffffef
c00184cd:	09 d0                	or     eax,edx
c00184cf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00184d5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00184dc:	e8 5d fb ff ff       	call   c001803e <CPU::cpuidCheckEDX(unsigned int)>
c00184e1:	83 e0 01             	and    eax,0x1
c00184e4:	c1 e0 05             	shl    eax,0x5
c00184e7:	88 c2                	mov    dl,al
c00184e9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00184ef:	83 e0 df             	and    eax,0xffffffdf
c00184f2:	09 d0                	or     eax,edx
c00184f4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00184fa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018501:	e8 38 fb ff ff       	call   c001803e <CPU::cpuidCheckEDX(unsigned int)>
c0018506:	83 e0 01             	and    eax,0x1
c0018509:	8d 14 00             	lea    edx,[eax+eax*1]
c001850c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018512:	83 e0 fd             	and    eax,0xfffffffd
c0018515:	09 d0                	or     eax,edx
c0018517:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001851d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018524:	e8 15 fb ff ff       	call   c001803e <CPU::cpuidCheckEDX(unsigned int)>
c0018529:	83 e0 01             	and    eax,0x1
c001852c:	c1 e0 06             	shl    eax,0x6
c001852f:	88 c2                	mov    dl,al
c0018531:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018537:	83 e0 bf             	and    eax,0xffffffbf
c001853a:	09 d0                	or     eax,edx
c001853c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018542:	58                   	pop    eax
c0018543:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018547:	56                   	push   esi
c0018548:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001854c:	55                   	push   ebp
c001854d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018551:	50                   	push   eax
c0018552:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018556:	52                   	push   edx
c0018557:	6a 00                	push   0x0
c0018559:	e8 5c fa ff ff       	call   c0017fba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001855e:	83 c4 1c             	add    esp,0x1c
c0018561:	6a 04                	push   0x4
c0018563:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018567:	50                   	push   eax
c0018568:	57                   	push   edi
c0018569:	e8 e7 80 fe ff       	call   c0000655 <memcpy>
c001856e:	83 c4 0c             	add    esp,0xc
c0018571:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018577:	6a 04                	push   0x4
c0018579:	56                   	push   esi
c001857a:	50                   	push   eax
c001857b:	e8 d5 80 fe ff       	call   c0000655 <memcpy>
c0018580:	83 c4 0c             	add    esp,0xc
c0018583:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018589:	6a 04                	push   0x4
c001858b:	55                   	push   ebp
c001858c:	50                   	push   eax
c001858d:	e8 c3 80 fe ff       	call   c0000655 <memcpy>
c0018592:	58                   	pop    eax
c0018593:	5a                   	pop    edx
c0018594:	68 99 92 02 c0       	push   0xc0029299
c0018599:	57                   	push   edi
c001859a:	e8 dc 81 fe ff       	call   c000077b <strcmp>
c001859f:	83 c4 10             	add    esp,0x10
c00185a2:	85 c0                	test   eax,eax
c00185a4:	75 0f                	jne    c00185b5 <CPU::detectFeatures()+0x1b5>
c00185a6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00185b0:	e9 22 02 00 00       	jmp    c00187d7 <CPU::detectFeatures()+0x3d7>
c00185b5:	50                   	push   eax
c00185b6:	50                   	push   eax
c00185b7:	68 a6 92 02 c0       	push   0xc00292a6
c00185bc:	57                   	push   edi
c00185bd:	e8 b9 81 fe ff       	call   c000077b <strcmp>
c00185c2:	83 c4 10             	add    esp,0x10
c00185c5:	85 c0                	test   eax,eax
c00185c7:	74 dd                	je     c00185a6 <CPU::detectFeatures()+0x1a6>
c00185c9:	51                   	push   ecx
c00185ca:	51                   	push   ecx
c00185cb:	68 b3 92 02 c0       	push   0xc00292b3
c00185d0:	57                   	push   edi
c00185d1:	e8 a5 81 fe ff       	call   c000077b <strcmp>
c00185d6:	83 c4 10             	add    esp,0x10
c00185d9:	85 c0                	test   eax,eax
c00185db:	74 2a                	je     c0018607 <CPU::detectFeatures()+0x207>
c00185dd:	52                   	push   edx
c00185de:	52                   	push   edx
c00185df:	68 c0 92 02 c0       	push   0xc00292c0
c00185e4:	57                   	push   edi
c00185e5:	e8 91 81 fe ff       	call   c000077b <strcmp>
c00185ea:	83 c4 10             	add    esp,0x10
c00185ed:	85 c0                	test   eax,eax
c00185ef:	74 16                	je     c0018607 <CPU::detectFeatures()+0x207>
c00185f1:	50                   	push   eax
c00185f2:	50                   	push   eax
c00185f3:	68 cd 92 02 c0       	push   0xc00292cd
c00185f8:	57                   	push   edi
c00185f9:	e8 7d 81 fe ff       	call   c000077b <strcmp>
c00185fe:	83 c4 10             	add    esp,0x10
c0018601:	85 c0                	test   eax,eax
c0018603:	74 48                	je     c001864d <CPU::detectFeatures()+0x24d>
c0018605:	eb 0f                	jmp    c0018616 <CPU::detectFeatures()+0x216>
c0018607:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018611:	e9 c1 01 00 00       	jmp    c00187d7 <CPU::detectFeatures()+0x3d7>
c0018616:	50                   	push   eax
c0018617:	50                   	push   eax
c0018618:	68 da 92 02 c0       	push   0xc00292da
c001861d:	57                   	push   edi
c001861e:	e8 58 81 fe ff       	call   c000077b <strcmp>
c0018623:	83 c4 10             	add    esp,0x10
c0018626:	85 c0                	test   eax,eax
c0018628:	74 23                	je     c001864d <CPU::detectFeatures()+0x24d>
c001862a:	50                   	push   eax
c001862b:	50                   	push   eax
c001862c:	68 e7 92 02 c0       	push   0xc00292e7
c0018631:	57                   	push   edi
c0018632:	e8 44 81 fe ff       	call   c000077b <strcmp>
c0018637:	83 c4 10             	add    esp,0x10
c001863a:	85 c0                	test   eax,eax
c001863c:	75 1e                	jne    c001865c <CPU::detectFeatures()+0x25c>
c001863e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018648:	e9 8a 01 00 00       	jmp    c00187d7 <CPU::detectFeatures()+0x3d7>
c001864d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018657:	e9 7b 01 00 00       	jmp    c00187d7 <CPU::detectFeatures()+0x3d7>
c001865c:	50                   	push   eax
c001865d:	50                   	push   eax
c001865e:	68 f4 92 02 c0       	push   0xc00292f4
c0018663:	57                   	push   edi
c0018664:	e8 12 81 fe ff       	call   c000077b <strcmp>
c0018669:	83 c4 10             	add    esp,0x10
c001866c:	85 c0                	test   eax,eax
c001866e:	75 0f                	jne    c001867f <CPU::detectFeatures()+0x27f>
c0018670:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001867a:	e9 58 01 00 00       	jmp    c00187d7 <CPU::detectFeatures()+0x3d7>
c001867f:	50                   	push   eax
c0018680:	50                   	push   eax
c0018681:	68 b3 92 02 c0       	push   0xc00292b3
c0018686:	57                   	push   edi
c0018687:	e8 ef 80 fe ff       	call   c000077b <strcmp>
c001868c:	83 c4 10             	add    esp,0x10
c001868f:	85 c0                	test   eax,eax
c0018691:	75 0f                	jne    c00186a2 <CPU::detectFeatures()+0x2a2>
c0018693:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001869d:	e9 35 01 00 00       	jmp    c00187d7 <CPU::detectFeatures()+0x3d7>
c00186a2:	50                   	push   eax
c00186a3:	50                   	push   eax
c00186a4:	68 01 93 02 c0       	push   0xc0029301
c00186a9:	57                   	push   edi
c00186aa:	e8 cc 80 fe ff       	call   c000077b <strcmp>
c00186af:	83 c4 10             	add    esp,0x10
c00186b2:	85 c0                	test   eax,eax
c00186b4:	75 0f                	jne    c00186c5 <CPU::detectFeatures()+0x2c5>
c00186b6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00186c0:	e9 12 01 00 00       	jmp    c00187d7 <CPU::detectFeatures()+0x3d7>
c00186c5:	51                   	push   ecx
c00186c6:	51                   	push   ecx
c00186c7:	68 0e 93 02 c0       	push   0xc002930e
c00186cc:	57                   	push   edi
c00186cd:	e8 a9 80 fe ff       	call   c000077b <strcmp>
c00186d2:	83 c4 10             	add    esp,0x10
c00186d5:	85 c0                	test   eax,eax
c00186d7:	75 0f                	jne    c00186e8 <CPU::detectFeatures()+0x2e8>
c00186d9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00186e3:	e9 ef 00 00 00       	jmp    c00187d7 <CPU::detectFeatures()+0x3d7>
c00186e8:	52                   	push   edx
c00186e9:	52                   	push   edx
c00186ea:	68 1b 93 02 c0       	push   0xc002931b
c00186ef:	57                   	push   edi
c00186f0:	e8 86 80 fe ff       	call   c000077b <strcmp>
c00186f5:	83 c4 10             	add    esp,0x10
c00186f8:	85 c0                	test   eax,eax
c00186fa:	75 0f                	jne    c001870b <CPU::detectFeatures()+0x30b>
c00186fc:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018706:	e9 cc 00 00 00       	jmp    c00187d7 <CPU::detectFeatures()+0x3d7>
c001870b:	50                   	push   eax
c001870c:	50                   	push   eax
c001870d:	68 28 93 02 c0       	push   0xc0029328
c0018712:	57                   	push   edi
c0018713:	e8 63 80 fe ff       	call   c000077b <strcmp>
c0018718:	83 c4 10             	add    esp,0x10
c001871b:	85 c0                	test   eax,eax
c001871d:	75 0f                	jne    c001872e <CPU::detectFeatures()+0x32e>
c001871f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018729:	e9 a9 00 00 00       	jmp    c00187d7 <CPU::detectFeatures()+0x3d7>
c001872e:	50                   	push   eax
c001872f:	50                   	push   eax
c0018730:	68 35 93 02 c0       	push   0xc0029335
c0018735:	57                   	push   edi
c0018736:	e8 40 80 fe ff       	call   c000077b <strcmp>
c001873b:	83 c4 10             	add    esp,0x10
c001873e:	85 c0                	test   eax,eax
c0018740:	75 0f                	jne    c0018751 <CPU::detectFeatures()+0x351>
c0018742:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001874c:	e9 86 00 00 00       	jmp    c00187d7 <CPU::detectFeatures()+0x3d7>
c0018751:	50                   	push   eax
c0018752:	50                   	push   eax
c0018753:	68 42 93 02 c0       	push   0xc0029342
c0018758:	57                   	push   edi
c0018759:	e8 1d 80 fe ff       	call   c000077b <strcmp>
c001875e:	83 c4 10             	add    esp,0x10
c0018761:	85 c0                	test   eax,eax
c0018763:	75 0c                	jne    c0018771 <CPU::detectFeatures()+0x371>
c0018765:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001876f:	eb 66                	jmp    c00187d7 <CPU::detectFeatures()+0x3d7>
c0018771:	50                   	push   eax
c0018772:	50                   	push   eax
c0018773:	68 4f 93 02 c0       	push   0xc002934f
c0018778:	57                   	push   edi
c0018779:	e8 fd 7f fe ff       	call   c000077b <strcmp>
c001877e:	83 c4 10             	add    esp,0x10
c0018781:	85 c0                	test   eax,eax
c0018783:	75 0c                	jne    c0018791 <CPU::detectFeatures()+0x391>
c0018785:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001878f:	eb 46                	jmp    c00187d7 <CPU::detectFeatures()+0x3d7>
c0018791:	50                   	push   eax
c0018792:	50                   	push   eax
c0018793:	68 5c 93 02 c0       	push   0xc002935c
c0018798:	57                   	push   edi
c0018799:	e8 dd 7f fe ff       	call   c000077b <strcmp>
c001879e:	83 c4 10             	add    esp,0x10
c00187a1:	85 c0                	test   eax,eax
c00187a3:	74 e0                	je     c0018785 <CPU::detectFeatures()+0x385>
c00187a5:	50                   	push   eax
c00187a6:	50                   	push   eax
c00187a7:	68 69 93 02 c0       	push   0xc0029369
c00187ac:	57                   	push   edi
c00187ad:	e8 c9 7f fe ff       	call   c000077b <strcmp>
c00187b2:	83 c4 10             	add    esp,0x10
c00187b5:	85 c0                	test   eax,eax
c00187b7:	74 cc                	je     c0018785 <CPU::detectFeatures()+0x385>
c00187b9:	51                   	push   ecx
c00187ba:	51                   	push   ecx
c00187bb:	68 76 93 02 c0       	push   0xc0029376
c00187c0:	57                   	push   edi
c00187c1:	e8 b5 7f fe ff       	call   c000077b <strcmp>
c00187c6:	83 c4 10             	add    esp,0x10
c00187c9:	85 c0                	test   eax,eax
c00187cb:	74 b8                	je     c0018785 <CPU::detectFeatures()+0x385>
c00187cd:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00187d7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00187dc:	0f 86 be 00 00 00    	jbe    c00188a0 <CPU::detectFeatures()+0x4a0>
c00187e2:	83 ec 0c             	sub    esp,0xc
c00187e5:	68 80 00 00 00       	push   0x80
c00187ea:	e8 ab f8 ff ff       	call   c001809a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00187ef:	83 e0 01             	and    eax,0x1
c00187f2:	c1 e0 06             	shl    eax,0x6
c00187f5:	88 c2                	mov    dl,al
c00187f7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00187fd:	83 e0 bf             	and    eax,0xffffffbf
c0018800:	09 d0                	or     eax,edx
c0018802:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018808:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001880f:	e8 86 f8 ff ff       	call   c001809a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018814:	83 e0 01             	and    eax,0x1
c0018817:	c1 e0 04             	shl    eax,0x4
c001881a:	88 c2                	mov    dl,al
c001881c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018822:	83 e0 ef             	and    eax,0xffffffef
c0018825:	09 d0                	or     eax,edx
c0018827:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001882d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018834:	e8 61 f8 ff ff       	call   c001809a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018839:	c1 e0 07             	shl    eax,0x7
c001883c:	88 c2                	mov    dl,al
c001883e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018844:	83 e0 7f             	and    eax,0x7f
c0018847:	09 d0                	or     eax,edx
c0018849:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001884f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018856:	e8 6d f8 ff ff       	call   c00180c8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001885b:	83 e0 01             	and    eax,0x1
c001885e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018865:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001886b:	83 e0 f7             	and    eax,0xfffffff7
c001886e:	09 d0                	or     eax,edx
c0018870:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018876:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001887d:	e8 46 f8 ff ff       	call   c00180c8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018882:	83 c4 10             	add    esp,0x10
c0018885:	83 e0 01             	and    eax,0x1
c0018888:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001888f:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018895:	83 e0 fb             	and    eax,0xfffffffb
c0018898:	09 d0                	or     eax,edx
c001889a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00188a0:	83 ec 0c             	sub    esp,0xc
c00188a3:	56                   	push   esi
c00188a4:	55                   	push   ebp
c00188a5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00188a9:	57                   	push   edi
c00188aa:	8d 44 24 28          	lea    eax,[esp+0x28]
c00188ae:	50                   	push   eax
c00188af:	6a 01                	push   0x1
c00188b1:	e8 04 f7 ff ff       	call   c0017fba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188b6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00188ba:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00188c0:	88 ca                	mov    dl,cl
c00188c2:	83 e0 f0             	and    eax,0xfffffff0
c00188c5:	83 e2 0f             	and    edx,0xf
c00188c8:	09 d0                	or     eax,edx
c00188ca:	88 ca                	mov    dl,cl
c00188cc:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00188d2:	c0 ea 04             	shr    dl,0x4
c00188d5:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00188d9:	0f b6 c2             	movzx  eax,dl
c00188dc:	83 c4 20             	add    esp,0x20
c00188df:	c1 e0 06             	shl    eax,0x6
c00188e2:	89 c5                	mov    ebp,eax
c00188e4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00188ea:	66 25 3f c0          	and    ax,0xc03f
c00188ee:	09 e8                	or     eax,ebp
c00188f0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00188f7:	89 c8                	mov    eax,ecx
c00188f9:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00188ff:	c1 e8 08             	shr    eax,0x8
c0018902:	83 e2 3f             	and    edx,0x3f
c0018905:	83 e0 0f             	and    eax,0xf
c0018908:	89 c5                	mov    ebp,eax
c001890a:	c1 e5 06             	shl    ebp,0x6
c001890d:	09 d5                	or     ebp,edx
c001890f:	89 ea                	mov    edx,ebp
c0018911:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018917:	88 c2                	mov    dl,al
c0018919:	c0 ea 02             	shr    dl,0x2
c001891c:	89 d5                	mov    ebp,edx
c001891e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018924:	83 e2 c0             	and    edx,0xffffffc0
c0018927:	09 d5                	or     ebp,edx
c0018929:	89 ea                	mov    edx,ebp
c001892b:	89 cd                	mov    ebp,ecx
c001892d:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018933:	c1 ed 0c             	shr    ebp,0xc
c0018936:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001893c:	83 e5 03             	and    ebp,0x3
c001893f:	83 e2 cf             	and    edx,0xffffffcf
c0018942:	c1 e5 04             	shl    ebp,0x4
c0018945:	09 d5                	or     ebp,edx
c0018947:	3c 06                	cmp    al,0x6
c0018949:	89 ea                	mov    edx,ebp
c001894b:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018951:	74 04                	je     c0018957 <CPU::detectFeatures()+0x557>
c0018953:	3c 0f                	cmp    al,0xf
c0018955:	75 5c                	jne    c00189b3 <CPU::detectFeatures()+0x5b3>
c0018957:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001895b:	89 cd                	mov    ebp,ecx
c001895d:	c1 ed 10             	shr    ebp,0x10
c0018960:	c1 e5 04             	shl    ebp,0x4
c0018963:	09 ea                	or     edx,ebp
c0018965:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001896b:	0f b6 d2             	movzx  edx,dl
c001896e:	66 81 e5 3f c0       	and    bp,0xc03f
c0018973:	c1 e2 06             	shl    edx,0x6
c0018976:	09 ea                	or     edx,ebp
c0018978:	3c 0f                	cmp    al,0xf
c001897a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018981:	75 30                	jne    c00189b3 <CPU::detectFeatures()+0x5b3>
c0018983:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018989:	c1 e9 14             	shr    ecx,0x14
c001898c:	83 e0 3f             	and    eax,0x3f
c001898f:	83 c1 0f             	add    ecx,0xf
c0018992:	88 ca                	mov    dl,cl
c0018994:	c0 e9 02             	shr    cl,0x2
c0018997:	c1 e2 06             	shl    edx,0x6
c001899a:	09 d0                	or     eax,edx
c001899c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00189a2:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00189a8:	83 e0 c0             	and    eax,0xffffffc0
c00189ab:	09 c1                	or     ecx,eax
c00189ad:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00189b3:	83 ec 0c             	sub    esp,0xc
c00189b6:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00189bd:	56                   	push   esi
c00189be:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189c2:	50                   	push   eax
c00189c3:	57                   	push   edi
c00189c4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00189c8:	55                   	push   ebp
c00189c9:	68 00 00 00 80       	push   0x80000000
c00189ce:	e8 e7 f5 ff ff       	call   c0017fba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189d3:	83 c4 20             	add    esp,0x20
c00189d6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00189de:	8d 44 24 18          	lea    eax,[esp+0x18]
c00189e2:	76 1e                	jbe    c0018a02 <CPU::detectFeatures()+0x602>
c00189e4:	83 ec 0c             	sub    esp,0xc
c00189e7:	56                   	push   esi
c00189e8:	50                   	push   eax
c00189e9:	57                   	push   edi
c00189ea:	55                   	push   ebp
c00189eb:	68 01 00 00 80       	push   0x80000001
c00189f0:	e8 c5 f5 ff ff       	call   c0017fba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189f5:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00189ff:	83 c4 20             	add    esp,0x20
c0018a02:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018a08:	83 f8 01             	cmp    eax,0x1
c0018a0b:	75 6f                	jne    c0018a7c <CPU::detectFeatures()+0x67c>
c0018a0d:	51                   	push   ecx
c0018a0e:	51                   	push   ecx
c0018a0f:	68 82 93 02 c0       	push   0xc0029382
c0018a14:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018a18:	56                   	push   esi
c0018a19:	e8 0c 7d fe ff       	call   c000072a <strcpy>
c0018a1e:	5f                   	pop    edi
c0018a1f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a25:	5d                   	pop    ebp
c0018a26:	66 c1 e8 06          	shr    ax,0x6
c0018a2a:	0f b6 c0             	movzx  eax,al
c0018a2d:	50                   	push   eax
c0018a2e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a34:	c1 e8 0e             	shr    eax,0xe
c0018a37:	0f b6 c0             	movzx  eax,al
c0018a3a:	50                   	push   eax
c0018a3b:	e8 24 f2 ff ff       	call   c0017c64 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018a40:	5a                   	pop    edx
c0018a41:	59                   	pop    ecx
c0018a42:	50                   	push   eax
c0018a43:	56                   	push   esi
c0018a44:	e8 98 7d fe ff       	call   c00007e1 <strcat>
c0018a49:	5f                   	pop    edi
c0018a4a:	5d                   	pop    ebp
c0018a4b:	56                   	push   esi
c0018a4c:	53                   	push   ebx
c0018a4d:	e8 1c b2 ff ff       	call   c0013c6e <Device::setName(char const*)>
c0018a52:	58                   	pop    eax
c0018a53:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018a59:	5a                   	pop    edx
c0018a5a:	68 89 93 02 c0       	push   0xc0029389
c0018a5f:	50                   	push   eax
c0018a60:	e8 16 7d fe ff       	call   c000077b <strcmp>
c0018a65:	83 c4 10             	add    esp,0x10
c0018a68:	85 c0                	test   eax,eax
c0018a6a:	0f 85 71 03 00 00    	jne    c0018de1 <CPU::detectFeatures()+0x9e1>
c0018a70:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018a77:	e9 65 03 00 00       	jmp    c0018de1 <CPU::detectFeatures()+0x9e1>
c0018a7c:	83 f8 02             	cmp    eax,0x2
c0018a7f:	0f 85 b5 00 00 00    	jne    c0018b3a <CPU::detectFeatures()+0x73a>
c0018a85:	57                   	push   edi
c0018a86:	57                   	push   edi
c0018a87:	68 9b 93 02 c0       	push   0xc002939b
c0018a8c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018a90:	56                   	push   esi
c0018a91:	e8 94 7c fe ff       	call   c000072a <strcpy>
c0018a96:	5d                   	pop    ebp
c0018a97:	58                   	pop    eax
c0018a98:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a9e:	66 c1 e8 06          	shr    ax,0x6
c0018aa2:	0f b6 c0             	movzx  eax,al
c0018aa5:	50                   	push   eax
c0018aa6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018aac:	c1 e8 0e             	shr    eax,0xe
c0018aaf:	0f b6 c0             	movzx  eax,al
c0018ab2:	50                   	push   eax
c0018ab3:	e8 18 f0 ff ff       	call   c0017ad0 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018ab8:	5a                   	pop    edx
c0018ab9:	59                   	pop    ecx
c0018aba:	50                   	push   eax
c0018abb:	56                   	push   esi
c0018abc:	e8 20 7d fe ff       	call   c00007e1 <strcat>
c0018ac1:	5f                   	pop    edi
c0018ac2:	5d                   	pop    ebp
c0018ac3:	56                   	push   esi
c0018ac4:	53                   	push   ebx
c0018ac5:	e8 a4 b1 ff ff       	call   c0013c6e <Device::setName(char const*)>
c0018aca:	58                   	pop    eax
c0018acb:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018ad1:	5a                   	pop    edx
c0018ad2:	68 a0 93 02 c0       	push   0xc00293a0
c0018ad7:	50                   	push   eax
c0018ad8:	e8 9e 7c fe ff       	call   c000077b <strcmp>
c0018add:	83 c4 10             	add    esp,0x10
c0018ae0:	85 c0                	test   eax,eax
c0018ae2:	75 20                	jne    c0018b04 <CPU::detectFeatures()+0x704>
c0018ae4:	8b 15 c8 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002bac8
c0018aea:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018af0:	a8 01                	test   al,0x1
c0018af2:	74 10                	je     c0018b04 <CPU::detectFeatures()+0x704>
c0018af4:	83 e0 fe             	and    eax,0xfffffffe
c0018af7:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018afd:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018b04:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b0a:	c1 e8 0e             	shr    eax,0xe
c0018b0d:	3c 05                	cmp    al,0x5
c0018b0f:	0f 85 cc 02 00 00    	jne    c0018de1 <CPU::detectFeatures()+0x9e1>
c0018b15:	56                   	push   esi
c0018b16:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018b1c:	83 e0 0f             	and    eax,0xf
c0018b1f:	50                   	push   eax
c0018b20:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b26:	66 c1 e8 06          	shr    ax,0x6
c0018b2a:	0f b6 c0             	movzx  eax,al
c0018b2d:	50                   	push   eax
c0018b2e:	6a 05                	push   0x5
c0018b30:	e8 11 f4 ff ff       	call   c0017f46 <CPU::AMD_K6_writeback(int, int, int)>
c0018b35:	e9 1f 02 00 00       	jmp    c0018d59 <CPU::detectFeatures()+0x959>
c0018b3a:	8d 50 fd             	lea    edx,[eax-0x3]
c0018b3d:	83 fa 01             	cmp    edx,0x1
c0018b40:	76 09                	jbe    c0018b4b <CPU::detectFeatures()+0x74b>
c0018b42:	83 f8 06             	cmp    eax,0x6
c0018b45:	0f 85 91 01 00 00    	jne    c0018cdc <CPU::detectFeatures()+0x8dc>
c0018b4b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018b51:	c1 ea 0e             	shr    edx,0xe
c0018b54:	80 fa 05             	cmp    dl,0x5
c0018b57:	75 7b                	jne    c0018bd4 <CPU::detectFeatures()+0x7d4>
c0018b59:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018b5f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018b64:	66 81 fa 00 01       	cmp    dx,0x100
c0018b69:	75 0c                	jne    c0018b77 <CPU::detectFeatures()+0x777>
c0018b6b:	51                   	push   ecx
c0018b6c:	51                   	push   ecx
c0018b6d:	68 a7 93 02 c0       	push   0xc00293a7
c0018b72:	e9 dc 01 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018b77:	66 81 fa 00 02       	cmp    dx,0x200
c0018b7c:	75 0c                	jne    c0018b8a <CPU::detectFeatures()+0x78a>
c0018b7e:	52                   	push   edx
c0018b7f:	52                   	push   edx
c0018b80:	68 ba 93 02 c0       	push   0xc00293ba
c0018b85:	e9 c9 01 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018b8a:	66 81 fa 40 02       	cmp    dx,0x240
c0018b8f:	75 0c                	jne    c0018b9d <CPU::detectFeatures()+0x79d>
c0018b91:	50                   	push   eax
c0018b92:	50                   	push   eax
c0018b93:	68 cc 93 02 c0       	push   0xc00293cc
c0018b98:	e9 b6 01 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018b9d:	83 f8 06             	cmp    eax,0x6
c0018ba0:	75 0c                	jne    c0018bae <CPU::detectFeatures()+0x7ae>
c0018ba2:	50                   	push   eax
c0018ba3:	50                   	push   eax
c0018ba4:	68 de 93 02 c0       	push   0xc00293de
c0018ba9:	e9 a5 01 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018bae:	83 f8 04             	cmp    eax,0x4
c0018bb1:	75 0c                	jne    c0018bbf <CPU::detectFeatures()+0x7bf>
c0018bb3:	50                   	push   eax
c0018bb4:	50                   	push   eax
c0018bb5:	68 ea 93 02 c0       	push   0xc00293ea
c0018bba:	e9 94 01 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018bbf:	83 f8 03             	cmp    eax,0x3
c0018bc2:	0f 85 19 02 00 00    	jne    c0018de1 <CPU::detectFeatures()+0x9e1>
c0018bc8:	50                   	push   eax
c0018bc9:	50                   	push   eax
c0018bca:	68 f2 93 02 c0       	push   0xc00293f2
c0018bcf:	e9 7f 01 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018bd4:	80 fa 06             	cmp    dl,0x6
c0018bd7:	0f 85 db 00 00 00    	jne    c0018cb8 <CPU::detectFeatures()+0x8b8>
c0018bdd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018be3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018be8:	66 81 fa 80 01       	cmp    dx,0x180
c0018bed:	75 0c                	jne    c0018bfb <CPU::detectFeatures()+0x7fb>
c0018bef:	50                   	push   eax
c0018bf0:	50                   	push   eax
c0018bf1:	68 fd 93 02 c0       	push   0xc00293fd
c0018bf6:	e9 58 01 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018bfb:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018c01:	66 f7 c1 80 ff       	test   cx,0xff80
c0018c06:	75 0c                	jne    c0018c14 <CPU::detectFeatures()+0x814>
c0018c08:	50                   	push   eax
c0018c09:	50                   	push   eax
c0018c0a:	68 0d 94 02 c0       	push   0xc002940d
c0018c0f:	e9 3f 01 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018c14:	66 81 fa 40 02       	cmp    dx,0x240
c0018c19:	75 0c                	jne    c0018c27 <CPU::detectFeatures()+0x827>
c0018c1b:	55                   	push   ebp
c0018c1c:	55                   	push   ebp
c0018c1d:	68 14 94 02 c0       	push   0xc0029414
c0018c22:	e9 2c 01 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018c27:	66 81 fa 80 02       	cmp    dx,0x280
c0018c2c:	75 0c                	jne    c0018c3a <CPU::detectFeatures()+0x83a>
c0018c2e:	57                   	push   edi
c0018c2f:	57                   	push   edi
c0018c30:	68 1d 94 02 c0       	push   0xc002941d
c0018c35:	e9 19 01 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018c3a:	66 81 fa 40 03       	cmp    dx,0x340
c0018c3f:	74 ed                	je     c0018c2e <CPU::detectFeatures()+0x82e>
c0018c41:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018c46:	75 0c                	jne    c0018c54 <CPU::detectFeatures()+0x854>
c0018c48:	56                   	push   esi
c0018c49:	56                   	push   esi
c0018c4a:	68 24 94 02 c0       	push   0xc0029424
c0018c4f:	e9 ff 00 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018c54:	83 f8 06             	cmp    eax,0x6
c0018c57:	0f 84 45 ff ff ff    	je     c0018ba2 <CPU::detectFeatures()+0x7a2>
c0018c5d:	83 f8 04             	cmp    eax,0x4
c0018c60:	0f 84 4d ff ff ff    	je     c0018bb3 <CPU::detectFeatures()+0x7b3>
c0018c66:	83 f8 03             	cmp    eax,0x3
c0018c69:	0f 85 72 01 00 00    	jne    c0018de1 <CPU::detectFeatures()+0x9e1>
c0018c6f:	51                   	push   ecx
c0018c70:	51                   	push   ecx
c0018c71:	68 2d 94 02 c0       	push   0xc002942d
c0018c76:	53                   	push   ebx
c0018c77:	e8 f2 af ff ff       	call   c0013c6e <Device::setName(char const*)>
c0018c7c:	b1 c1                	mov    cl,0xc1
c0018c7e:	88 c8                	mov    al,cl
c0018c80:	e6 22                	out    0x22,al
c0018c82:	e4 23                	in     al,0x23
c0018c84:	88 c2                	mov    dl,al
c0018c86:	88 c8                	mov    al,cl
c0018c88:	e6 22                	out    0x22,al
c0018c8a:	88 d0                	mov    al,dl
c0018c8c:	83 c8 10             	or     eax,0x10
c0018c8f:	e6 23                	out    0x23,al
c0018c91:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018c98:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018c9b:	89 d0                	mov    eax,edx
c0018c9d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018ca3:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018ca7:	40                   	inc    eax
c0018ca8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018cae:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018cb3:	e9 a1 00 00 00       	jmp    c0018d59 <CPU::detectFeatures()+0x959>
c0018cb8:	83 f8 06             	cmp    eax,0x6
c0018cbb:	0f 84 e1 fe ff ff    	je     c0018ba2 <CPU::detectFeatures()+0x7a2>
c0018cc1:	83 f8 04             	cmp    eax,0x4
c0018cc4:	0f 84 e9 fe ff ff    	je     c0018bb3 <CPU::detectFeatures()+0x7b3>
c0018cca:	83 f8 03             	cmp    eax,0x3
c0018ccd:	0f 85 0e 01 00 00    	jne    c0018de1 <CPU::detectFeatures()+0x9e1>
c0018cd3:	52                   	push   edx
c0018cd4:	52                   	push   edx
c0018cd5:	68 38 94 02 c0       	push   0xc0029438
c0018cda:	eb 77                	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018cdc:	83 f8 07             	cmp    eax,0x7
c0018cdf:	75 09                	jne    c0018cea <CPU::detectFeatures()+0x8ea>
c0018ce1:	50                   	push   eax
c0018ce2:	50                   	push   eax
c0018ce3:	68 42 94 02 c0       	push   0xc0029442
c0018ce8:	eb 69                	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018cea:	83 f8 0a             	cmp    eax,0xa
c0018ced:	75 09                	jne    c0018cf8 <CPU::detectFeatures()+0x8f8>
c0018cef:	50                   	push   eax
c0018cf0:	50                   	push   eax
c0018cf1:	68 4d 94 02 c0       	push   0xc002944d
c0018cf6:	eb 5b                	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018cf8:	83 f8 0b             	cmp    eax,0xb
c0018cfb:	75 09                	jne    c0018d06 <CPU::detectFeatures()+0x906>
c0018cfd:	50                   	push   eax
c0018cfe:	50                   	push   eax
c0018cff:	68 55 94 02 c0       	push   0xc0029455
c0018d04:	eb 4d                	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018d06:	83 f8 08             	cmp    eax,0x8
c0018d09:	75 09                	jne    c0018d14 <CPU::detectFeatures()+0x914>
c0018d0b:	50                   	push   eax
c0018d0c:	50                   	push   eax
c0018d0d:	68 5e 94 02 c0       	push   0xc002945e
c0018d12:	eb 3f                	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018d14:	83 f8 09             	cmp    eax,0x9
c0018d17:	75 09                	jne    c0018d22 <CPU::detectFeatures()+0x922>
c0018d19:	50                   	push   eax
c0018d1a:	50                   	push   eax
c0018d1b:	68 66 94 02 c0       	push   0xc0029466
c0018d20:	eb 31                	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018d22:	83 f8 05             	cmp    eax,0x5
c0018d25:	75 09                	jne    c0018d30 <CPU::detectFeatures()+0x930>
c0018d27:	50                   	push   eax
c0018d28:	50                   	push   eax
c0018d29:	68 6e 94 02 c0       	push   0xc002946e
c0018d2e:	eb 23                	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018d30:	83 f8 0c             	cmp    eax,0xc
c0018d33:	75 09                	jne    c0018d3e <CPU::detectFeatures()+0x93e>
c0018d35:	55                   	push   ebp
c0018d36:	55                   	push   ebp
c0018d37:	68 7c 94 02 c0       	push   0xc002947c
c0018d3c:	eb 15                	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018d3e:	83 f8 0d             	cmp    eax,0xd
c0018d41:	75 09                	jne    c0018d4c <CPU::detectFeatures()+0x94c>
c0018d43:	57                   	push   edi
c0018d44:	57                   	push   edi
c0018d45:	68 87 94 02 c0       	push   0xc0029487
c0018d4a:	eb 07                	jmp    c0018d53 <CPU::detectFeatures()+0x953>
c0018d4c:	56                   	push   esi
c0018d4d:	56                   	push   esi
c0018d4e:	68 9b 94 02 c0       	push   0xc002949b
c0018d53:	53                   	push   ebx
c0018d54:	e8 15 af ff ff       	call   c0013c6e <Device::setName(char const*)>
c0018d59:	83 c4 10             	add    esp,0x10
c0018d5c:	e9 80 00 00 00       	jmp    c0018de1 <CPU::detectFeatures()+0x9e1>
c0018d61:	51                   	push   ecx
c0018d62:	51                   	push   ecx
c0018d63:	68 e7 92 02 c0       	push   0xc00292e7
c0018d68:	57                   	push   edi
c0018d69:	e8 bc 79 fe ff       	call   c000072a <strcpy>
c0018d6e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018d78:	e8 e6 74 fe ff       	call   c0000263 <is486>
c0018d7d:	83 c4 10             	add    esp,0x10
c0018d80:	85 c0                	test   eax,eax
c0018d82:	74 2b                	je     c0018daf <CPU::detectFeatures()+0x9af>
c0018d84:	52                   	push   edx
c0018d85:	52                   	push   edx
c0018d86:	68 a7 94 02 c0       	push   0xc00294a7
c0018d8b:	53                   	push   ebx
c0018d8c:	e8 dd ae ff ff       	call   c0013c6e <Device::setName(char const*)>
c0018d91:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018d98:	0f 20 c0             	mov    eax,cr0
c0018d9b:	83 e0 14             	and    eax,0x14
c0018d9e:	83 c4 10             	add    esp,0x10
c0018da1:	83 f8 04             	cmp    eax,0x4
c0018da4:	75 1f                	jne    c0018dc5 <CPU::detectFeatures()+0x9c5>
c0018da6:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018dad:	eb 32                	jmp    c0018de1 <CPU::detectFeatures()+0x9e1>
c0018daf:	50                   	push   eax
c0018db0:	50                   	push   eax
c0018db1:	68 b2 94 02 c0       	push   0xc00294b2
c0018db6:	53                   	push   ebx
c0018db7:	e8 b2 ae ff ff       	call   c0013c6e <Device::setName(char const*)>
c0018dbc:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018dc3:	eb d3                	jmp    c0018d98 <CPU::detectFeatures()+0x998>
c0018dc5:	e8 74 74 fe ff       	call   c000023e <hasLegacyFPU>
c0018dca:	83 e0 01             	and    eax,0x1
c0018dcd:	8d 14 00             	lea    edx,[eax+eax*1]
c0018dd0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018dd6:	83 e0 fd             	and    eax,0xfffffffd
c0018dd9:	09 d0                	or     eax,edx
c0018ddb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018de1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018de8:	83 c4 4c             	add    esp,0x4c
c0018deb:	5b                   	pop    ebx
c0018dec:	5e                   	pop    esi
c0018ded:	5f                   	pop    edi
c0018dee:	5d                   	pop    ebp
c0018def:	c3                   	ret    

c0018df0 <CPU::setupSMEP()>:
c0018df0:	0f 20 e0             	mov    eax,cr4
c0018df3:	0d 00 00 10 00       	or     eax,0x100000
c0018df8:	0f 22 e0             	mov    cr4,eax
c0018dfb:	c3                   	ret    

c0018dfc <CPU::setupUMIP()>:
c0018dfc:	0f 20 e0             	mov    eax,cr4
c0018dff:	80 cc 08             	or     ah,0x8
c0018e02:	0f 22 e0             	mov    cr4,eax
c0018e05:	c3                   	ret    

c0018e06 <CPU::setupTSC()>:
c0018e06:	0f 20 e0             	mov    eax,cr4
c0018e09:	83 c8 04             	or     eax,0x4
c0018e0c:	0f 22 e0             	mov    cr4,eax
c0018e0f:	c3                   	ret    

c0018e10 <CPU::setupLargePages()>:
c0018e10:	0f 20 e0             	mov    eax,cr4
c0018e13:	83 c8 10             	or     eax,0x10
c0018e16:	0f 22 e0             	mov    cr4,eax
c0018e19:	c3                   	ret    

c0018e1a <CPU::setupPAT()>:
c0018e1a:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0018e1f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018e26:	74 2c                	je     c0018e54 <CPU::setupPAT()+0x3a>
c0018e28:	53                   	push   ebx
c0018e29:	83 ec 10             	sub    esp,0x10
c0018e2c:	68 77 02 00 00       	push   0x277
c0018e31:	50                   	push   eax
c0018e32:	e8 41 5c ff ff       	call   c000ea78 <Computer::rdmsr(unsigned int)>
c0018e37:	83 e2 f8             	and    edx,0xfffffff8
c0018e3a:	83 ca 01             	or     edx,0x1
c0018e3d:	52                   	push   edx
c0018e3e:	50                   	push   eax
c0018e3f:	68 77 02 00 00       	push   0x277
c0018e44:	ff 35 c8 ba 02 c0    	push   DWORD PTR ds:0xc002bac8
c0018e4a:	e8 55 5c ff ff       	call   c000eaa4 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018e4f:	83 c4 28             	add    esp,0x28
c0018e52:	5b                   	pop    ebx
c0018e53:	c3                   	ret    
c0018e54:	c3                   	ret    
c0018e55:	90                   	nop

c0018e56 <CPU::setupMTRR()>:
c0018e56:	c3                   	ret    
c0018e57:	90                   	nop

c0018e58 <CPU::setupGlobalPages()>:
c0018e58:	0f 20 e0             	mov    eax,cr4
c0018e5b:	0c 80                	or     al,0x80
c0018e5d:	0f 22 e0             	mov    cr4,eax
c0018e60:	c3                   	ret    
c0018e61:	90                   	nop

c0018e62 <CPU::allowUsermodeDataAccess()>:
c0018e62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e66:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018e6d:	74 03                	je     c0018e72 <CPU::allowUsermodeDataAccess()+0x10>
c0018e6f:	0f 01 cb             	stac   
c0018e72:	c3                   	ret    
c0018e73:	90                   	nop

c0018e74 <CPU::prohibitUsermodeDataAccess()>:
c0018e74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e78:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018e7f:	74 03                	je     c0018e84 <CPU::prohibitUsermodeDataAccess()+0x10>
c0018e81:	0f 01 ca             	clac   
c0018e84:	c3                   	ret    
c0018e85:	90                   	nop

c0018e86 <CPU::setupSMAP()>:
c0018e86:	0f 20 e0             	mov    eax,cr4
c0018e89:	0d 00 00 20 00       	or     eax,0x200000
c0018e8e:	0f 22 e0             	mov    cr4,eax
c0018e91:	eb e1                	jmp    c0018e74 <CPU::prohibitUsermodeDataAccess()>
c0018e93:	90                   	nop

c0018e94 <CPU::setupFeatures()>:
c0018e94:	83 ec 0c             	sub    esp,0xc
c0018e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e9b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018ea2:	74 07                	je     c0018eab <CPU::setupFeatures()+0x17>
c0018ea4:	52                   	push   edx
c0018ea5:	e8 46 ff ff ff       	call   c0018df0 <CPU::setupSMEP()>
c0018eaa:	58                   	pop    eax
c0018eab:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018eb2:	74 07                	je     c0018ebb <CPU::setupFeatures()+0x27>
c0018eb4:	52                   	push   edx
c0018eb5:	e8 cc ff ff ff       	call   c0018e86 <CPU::setupSMAP()>
c0018eba:	58                   	pop    eax
c0018ebb:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0018ec2:	74 07                	je     c0018ecb <CPU::setupFeatures()+0x37>
c0018ec4:	52                   	push   edx
c0018ec5:	e8 32 ff ff ff       	call   c0018dfc <CPU::setupUMIP()>
c0018eca:	58                   	pop    eax
c0018ecb:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0018ed2:	74 07                	je     c0018edb <CPU::setupFeatures()+0x47>
c0018ed4:	52                   	push   edx
c0018ed5:	e8 2c ff ff ff       	call   c0018e06 <CPU::setupTSC()>
c0018eda:	58                   	pop    eax
c0018edb:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0018ee2:	74 07                	je     c0018eeb <CPU::setupFeatures()+0x57>
c0018ee4:	52                   	push   edx
c0018ee5:	e8 26 ff ff ff       	call   c0018e10 <CPU::setupLargePages()>
c0018eea:	59                   	pop    ecx
c0018eeb:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0018ef2:	74 07                	je     c0018efb <CPU::setupFeatures()+0x67>
c0018ef4:	52                   	push   edx
c0018ef5:	e8 5e ff ff ff       	call   c0018e58 <CPU::setupGlobalPages()>
c0018efa:	58                   	pop    eax
c0018efb:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0018f02:	74 0c                	je     c0018f10 <CPU::setupFeatures()+0x7c>
c0018f04:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018f08:	83 c4 0c             	add    esp,0xc
c0018f0b:	e9 0a ff ff ff       	jmp    c0018e1a <CPU::setupPAT()>
c0018f10:	83 c4 0c             	add    esp,0xc
c0018f13:	c3                   	ret    

c0018f14 <CPU::open(int, int, void*)>:
c0018f14:	57                   	push   edi
c0018f15:	56                   	push   esi
c0018f16:	53                   	push   ebx
c0018f17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018f1b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018f1f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018f25:	83 ec 0c             	sub    esp,0xc
c0018f28:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0018f2e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018f34:	50                   	push   eax
c0018f35:	e8 2a 5e ff ff       	call   c000ed64 <GDT::setup()>
c0018f3a:	83 c4 0c             	add    esp,0xc
c0018f3d:	6a 00                	push   0x0
c0018f3f:	68 ef be ad de       	push   0xdeadbeef
c0018f44:	57                   	push   edi
c0018f45:	e8 d4 80 ff ff       	call   c001101e <TSS::setup(unsigned long, unsigned long)>
c0018f4a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018f4d:	e8 ac 80 ff ff       	call   c0010ffe <TSS::flush()>
c0018f52:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0018f58:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f5b:	e8 60 60 ff ff       	call   c000efc0 <IDT::setup()>
c0018f60:	b8 00 04 00 00       	mov    eax,0x400
c0018f65:	0f 23 f8             	mov    db7,eax
c0018f68:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018f72:	e8 03 6b ff ff       	call   c000fa7a <Phys::allocatePage()>
c0018f77:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0018f7d:	89 30                	mov    DWORD PTR [eax],esi
c0018f7f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0018f85:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018f88:	58                   	pop    eax
c0018f89:	5a                   	pop    edx
c0018f8a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0018f90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018f94:	e8 b7 90 ff ff       	call   c0012050 <VAS::setCPUSpecific(unsigned long)>
c0018f99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f9c:	e8 5f f4 ff ff       	call   c0018400 <CPU::detectFeatures()>
c0018fa1:	e8 ac bf ff ff       	call   c0014f52 <setupInterruptController()>
c0018fa6:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0018fac:	a1 e0 ba 02 c0       	mov    eax,ds:0xc002bae0
c0018fb1:	83 e0 10             	and    eax,0x10
c0018fb4:	83 f8 01             	cmp    eax,0x1
c0018fb7:	19 c0                	sbb    eax,eax
c0018fb9:	83 e0 46             	and    eax,0x46
c0018fbc:	83 c0 1e             	add    eax,0x1e
c0018fbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0018fc2:	e8 43 d4 ff ff       	call   c001640a <setupTimer(int)>
c0018fc7:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0018fcd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fd0:	e8 bf fe ff ff       	call   c0018e94 <CPU::setupFeatures()>
c0018fd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fd8:	e8 a7 f1 ff ff       	call   c0018184 <CPU::displayFeatures()>
c0018fdd:	83 c4 10             	add    esp,0x10
c0018fe0:	31 c0                	xor    eax,eax
c0018fe2:	5b                   	pop    ebx
c0018fe3:	5e                   	pop    esi
c0018fe4:	5f                   	pop    edi
c0018fe5:	c3                   	ret    

c0018fe6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0018fe6:	57                   	push   edi
c0018fe7:	56                   	push   esi
c0018fe8:	53                   	push   ebx
c0018fe9:	51                   	push   ecx
c0018fea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018fee:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0018ff1:	0f 02 c0             	lar    eax,ax
c0018ff4:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0018ff7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018ffb:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0018ffe:	88 ca                	mov    dl,cl
c0019000:	c0 ea 06             	shr    dl,0x6
c0019003:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019007:	89 ca                	mov    edx,ecx
c0019009:	66 c1 ea 03          	shr    dx,0x3
c001900d:	83 e2 07             	and    edx,0x7
c0019010:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019015:	88 17                	mov    BYTE PTR [edi],dl
c0019017:	0f 84 a6 01 00 00    	je     c00191c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001901d:	83 e1 07             	and    ecx,0x7
c0019020:	80 f9 04             	cmp    cl,0x4
c0019023:	0f 84 98 00 00 00    	je     c00190c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019029:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001902e:	0f 95 c0             	setne  al
c0019031:	80 f9 05             	cmp    cl,0x5
c0019034:	0f 95 c2             	setne  dl
c0019037:	08 c2                	or     dl,al
c0019039:	74 79                	je     c00190b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001903b:	84 c9                	test   cl,cl
c001903d:	75 05                	jne    c0019044 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001903f:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019042:	eb 3c                	jmp    c0019080 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019044:	80 f9 01             	cmp    cl,0x1
c0019047:	75 05                	jne    c001904e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019049:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001904c:	eb 32                	jmp    c0019080 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001904e:	80 f9 02             	cmp    cl,0x2
c0019051:	75 05                	jne    c0019058 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019053:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019056:	eb 28                	jmp    c0019080 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019058:	31 c0                	xor    eax,eax
c001905a:	80 f9 03             	cmp    cl,0x3
c001905d:	75 05                	jne    c0019064 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001905f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019062:	eb 1c                	jmp    c0019080 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019064:	80 f9 05             	cmp    cl,0x5
c0019067:	75 05                	jne    c001906e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019069:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001906c:	eb 12                	jmp    c0019080 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001906e:	80 f9 06             	cmp    cl,0x6
c0019071:	75 05                	jne    c0019078 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019073:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019076:	eb 08                	jmp    c0019080 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019078:	80 f9 07             	cmp    cl,0x7
c001907b:	75 03                	jne    c0019080 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001907d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019080:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019085:	75 10                	jne    c0019097 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019087:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001908b:	b9 03 00 00 00       	mov    ecx,0x3
c0019090:	01 d0                	add    eax,edx
c0019092:	e9 37 01 00 00       	jmp    c00191ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019097:	b9 02 00 00 00       	mov    ecx,0x2
c001909c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00190a1:	0f 85 27 01 00 00    	jne    c00191ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00190a7:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00190aa:	b9 06 00 00 00       	mov    ecx,0x6
c00190af:	e9 1a 01 00 00       	jmp    c00191ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00190b4:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00190b7:	b9 06 00 00 00       	mov    ecx,0x6
c00190bc:	e9 0f 01 00 00       	jmp    c00191d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00190c1:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00190c4:	88 ca                	mov    dl,cl
c00190c6:	c0 ea 06             	shr    dl,0x6
c00190c9:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00190cd:	89 ca                	mov    edx,ecx
c00190cf:	66 c1 ea 03          	shr    dx,0x3
c00190d3:	83 e2 07             	and    edx,0x7
c00190d6:	80 e1 07             	and    cl,0x7
c00190d9:	75 05                	jne    c00190e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00190db:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00190de:	eb 4c                	jmp    c001912c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00190e0:	80 f9 01             	cmp    cl,0x1
c00190e3:	75 05                	jne    c00190ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00190e5:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00190e8:	eb 42                	jmp    c001912c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00190ea:	80 f9 02             	cmp    cl,0x2
c00190ed:	75 05                	jne    c00190f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00190ef:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00190f2:	eb 38                	jmp    c001912c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00190f4:	80 f9 03             	cmp    cl,0x3
c00190f7:	75 05                	jne    c00190fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00190f9:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00190fc:	eb 2e                	jmp    c001912c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00190fe:	80 f9 04             	cmp    cl,0x4
c0019101:	75 12                	jne    c0019115 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019103:	f6 c4 60             	test   ah,0x60
c0019106:	75 08                	jne    c0019110 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019108:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001910b:	8d 78 14             	lea    edi,[eax+0x14]
c001910e:	eb 1c                	jmp    c001912c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019110:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019113:	eb 17                	jmp    c001912c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019115:	80 f9 05             	cmp    cl,0x5
c0019118:	75 05                	jne    c001911f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001911a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001911d:	eb 0d                	jmp    c001912c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001911f:	80 f9 06             	cmp    cl,0x6
c0019122:	75 05                	jne    c0019129 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019124:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019127:	eb 03                	jmp    c001912c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019129:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001912c:	84 d2                	test   dl,dl
c001912e:	75 05                	jne    c0019135 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019130:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019133:	eb 3c                	jmp    c0019171 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019135:	80 fa 01             	cmp    dl,0x1
c0019138:	75 05                	jne    c001913f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001913a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001913d:	eb 32                	jmp    c0019171 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001913f:	80 fa 02             	cmp    dl,0x2
c0019142:	75 05                	jne    c0019149 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019144:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019147:	eb 28                	jmp    c0019171 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019149:	80 fa 03             	cmp    dl,0x3
c001914c:	75 05                	jne    c0019153 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001914e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019151:	eb 1e                	jmp    c0019171 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019153:	31 c0                	xor    eax,eax
c0019155:	80 fa 04             	cmp    dl,0x4
c0019158:	74 17                	je     c0019171 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001915a:	80 fa 05             	cmp    dl,0x5
c001915d:	75 05                	jne    c0019164 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001915f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019162:	eb 0d                	jmp    c0019171 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019164:	80 fa 06             	cmp    dl,0x6
c0019167:	75 05                	jne    c001916e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019169:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001916c:	eb 03                	jmp    c0019171 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001916e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019171:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019176:	0f 94 c2             	sete   dl
c0019179:	80 f9 05             	cmp    cl,0x5
c001917c:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019180:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019185:	d3 e0                	shl    eax,cl
c0019187:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001918b:	74 0a                	je     c0019197 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001918d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019190:	b9 07 00 00 00       	mov    ecx,0x7
c0019195:	eb 37                	jmp    c00191ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019197:	01 f8                	add    eax,edi
c0019199:	b9 03 00 00 00       	mov    ecx,0x3
c001919e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00191a3:	74 2b                	je     c00191d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191a5:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00191aa:	75 0d                	jne    c00191b9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00191ac:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00191b0:	01 c8                	add    eax,ecx
c00191b2:	b9 04 00 00 00       	mov    ecx,0x4
c00191b7:	eb 17                	jmp    c00191d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191b9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00191bc:	b9 07 00 00 00       	mov    ecx,0x7
c00191c1:	eb 0d                	jmp    c00191d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191c3:	b9 02 00 00 00       	mov    ecx,0x2
c00191c8:	b2 01                	mov    dl,0x1
c00191ca:	31 c0                	xor    eax,eax
c00191cc:	eb 02                	jmp    c00191d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191ce:	31 d2                	xor    edx,edx
c00191d0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00191d4:	89 0b                	mov    DWORD PTR [ebx],ecx
c00191d6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00191da:	88 11                	mov    BYTE PTR [ecx],dl
c00191dc:	5a                   	pop    edx
c00191dd:	5b                   	pop    ebx
c00191de:	5e                   	pop    esi
c00191df:	5f                   	pop    edi
c00191e0:	c3                   	ret    

c00191e1 <Krnl::panic(char const*)>:
c00191e1:	55                   	push   ebp
c00191e2:	89 e5                	mov    ebp,esp
c00191e4:	53                   	push   ebx
c00191e5:	50                   	push   eax
c00191e6:	a1 d4 c5 02 c0       	mov    eax,ds:0xc002c5d4
c00191eb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00191ee:	85 c0                	test   eax,eax
c00191f0:	74 02                	je     c00191f4 <Krnl::panic(char const*)+0x13>
c00191f2:	ff d0                	call   eax
c00191f4:	fa                   	cli    
c00191f5:	c6 05 d8 c5 02 c0 01 	mov    BYTE PTR ds:0xc002c5d8,0x1
c00191fc:	83 ec 08             	sub    esp,0x8
c00191ff:	c6 05 80 aa 02 c0 00 	mov    BYTE PTR ds:0xc002aa80,0x0
c0019206:	53                   	push   ebx
c0019207:	68 ec 94 02 c0       	push   0xc00294ec
c001920c:	e8 8c 94 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0019211:	58                   	pop    eax
c0019212:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0019217:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001921d:	e8 3d 76 ff ff       	call   c001085f <setActiveTerminal(VgaText*)>
c0019222:	83 c4 0c             	add    esp,0xc
c0019225:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c001922a:	6a 01                	push   0x1
c001922c:	6a 0f                	push   0xf
c001922e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019234:	e8 65 70 ff ff       	call   c001029e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019239:	5a                   	pop    edx
c001923a:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c001923f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019245:	e8 b6 78 ff ff       	call   c0010b00 <VgaText::clearScreen()>
c001924a:	59                   	pop    ecx
c001924b:	58                   	pop    eax
c001924c:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0019251:	68 05 95 02 c0       	push   0xc0029505
c0019256:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001925c:	e8 1d 7a ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c0019261:	58                   	pop    eax
c0019262:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0019267:	5a                   	pop    edx
c0019268:	68 ac 95 02 c0       	push   0xc00295ac
c001926d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019273:	e8 06 7a ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c0019278:	59                   	pop    ecx
c0019279:	58                   	pop    eax
c001927a:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c001927f:	68 21 95 02 c0       	push   0xc0029521
c0019284:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001928a:	e8 ef 79 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c001928f:	58                   	pop    eax
c0019290:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0019295:	5a                   	pop    edx
c0019296:	53                   	push   ebx
c0019297:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001929d:	e8 dc 79 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c00192a2:	59                   	pop    ecx
c00192a3:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00192a8:	5b                   	pop    ebx
c00192a9:	68 41 95 02 c0       	push   0xc0029541
c00192ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00192b4:	e8 c5 79 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c00192b9:	58                   	pop    eax
c00192ba:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00192bf:	5a                   	pop    edx
c00192c0:	68 e8 95 02 c0       	push   0xc00295e8
c00192c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00192cb:	e8 ae 79 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c00192d0:	59                   	pop    ecx
c00192d1:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00192d6:	5b                   	pop    ebx
c00192d7:	68 21 95 02 c0       	push   0xc0029521
c00192dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00192e2:	e8 97 79 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c00192e7:	58                   	pop    eax
c00192e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192ed:	5a                   	pop    edx
c00192ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00192f1:	83 c0 0c             	add    eax,0xc
c00192f4:	50                   	push   eax
c00192f5:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00192fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019300:	e8 79 79 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c0019305:	59                   	pop    ecx
c0019306:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c001930b:	5b                   	pop    ebx
c001930c:	68 40 95 02 c0       	push   0xc0029540
c0019311:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019317:	e8 62 79 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c001931c:	58                   	pop    eax
c001931d:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0019322:	5a                   	pop    edx
c0019323:	68 14 96 02 c0       	push   0xc0029614
c0019328:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001932e:	e8 4b 79 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c0019333:	59                   	pop    ecx
c0019334:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0019339:	5b                   	pop    ebx
c001933a:	68 54 96 02 c0       	push   0xc0029654
c001933f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019345:	e8 34 79 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c001934a:	58                   	pop    eax
c001934b:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0019350:	5a                   	pop    edx
c0019351:	68 2c 95 02 c0       	push   0xc002952c
c0019356:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001935c:	e8 1d 79 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c0019361:	59                   	pop    ecx
c0019362:	5b                   	pop    ebx
c0019363:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019366:	68 44 95 02 c0       	push   0xc0029544
c001936b:	e8 2d 93 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0019370:	58                   	pop    eax
c0019371:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019374:	5a                   	pop    edx
c0019375:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019378:	68 4d 95 02 c0       	push   0xc002954d
c001937d:	e8 1b 93 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0019382:	59                   	pop    ecx
c0019383:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019386:	5b                   	pop    ebx
c0019387:	8b 00                	mov    eax,DWORD PTR [eax]
c0019389:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001938c:	68 56 95 02 c0       	push   0xc0029556
c0019391:	e8 07 93 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0019396:	58                   	pop    eax
c0019397:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c001939c:	5a                   	pop    edx
c001939d:	68 98 96 02 c0       	push   0xc0029698
c00193a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00193a8:	e8 d1 78 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c00193ad:	59                   	pop    ecx
c00193ae:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00193b3:	5b                   	pop    ebx
c00193b4:	68 5f 95 02 c0       	push   0xc002955f
c00193b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00193bf:	e8 ba 78 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c00193c4:	0f 20 c0             	mov    eax,cr0
c00193c7:	5a                   	pop    edx
c00193c8:	59                   	pop    ecx
c00193c9:	50                   	push   eax
c00193ca:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00193cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00193d5:	e8 ca 78 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c00193da:	5b                   	pop    ebx
c00193db:	58                   	pop    eax
c00193dc:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00193e1:	68 69 95 02 c0       	push   0xc0029569
c00193e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00193ec:	e8 8d 78 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c00193f1:	0f 20 d0             	mov    eax,cr2
c00193f4:	5a                   	pop    edx
c00193f5:	59                   	pop    ecx
c00193f6:	50                   	push   eax
c00193f7:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00193fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019402:	e8 9d 78 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c0019407:	5b                   	pop    ebx
c0019408:	58                   	pop    eax
c0019409:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c001940e:	68 73 95 02 c0       	push   0xc0029573
c0019413:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019419:	e8 60 78 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c001941e:	0f 20 d8             	mov    eax,cr3
c0019421:	5a                   	pop    edx
c0019422:	59                   	pop    ecx
c0019423:	50                   	push   eax
c0019424:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0019429:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001942f:	e8 70 78 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c0019434:	5b                   	pop    ebx
c0019435:	58                   	pop    eax
c0019436:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c001943b:	68 86 95 02 c0       	push   0xc0029586
c0019440:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019446:	e8 33 78 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c001944b:	0f 20 e0             	mov    eax,cr4
c001944e:	5a                   	pop    edx
c001944f:	59                   	pop    ecx
c0019450:	50                   	push   eax
c0019451:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0019456:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001945c:	e8 43 78 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c0019461:	5b                   	pop    ebx
c0019462:	58                   	pop    eax
c0019463:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0019468:	68 90 95 02 c0       	push   0xc0029590
c001946d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019473:	e8 06 78 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c0019478:	5a                   	pop    edx
c0019479:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c001947e:	59                   	pop    ecx
c001947f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019485:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019488:	50                   	push   eax
c0019489:	e8 16 78 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c001948e:	5b                   	pop    ebx
c001948f:	58                   	pop    eax
c0019490:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0019495:	68 a7 95 02 c0       	push   0xc00295a7
c001949a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00194a0:	e8 d9 77 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c00194a5:	5a                   	pop    edx
c00194a6:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00194ab:	59                   	pop    ecx
c00194ac:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00194b2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00194b5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c00194b8:	50                   	push   eax
c00194b9:	e8 e6 77 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c00194be:	5b                   	pop    ebx
c00194bf:	58                   	pop    eax
c00194c0:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00194c5:	68 a7 95 02 c0       	push   0xc00295a7
c00194ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00194d0:	e8 a9 77 ff ff       	call   c0010c7e <VgaText::puts(char const*)>
c00194d5:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c00194da:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00194dd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00194e3:	8b 12                	mov    edx,DWORD PTR [edx]
c00194e5:	59                   	pop    ecx
c00194e6:	5b                   	pop    ebx
c00194e7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c00194ea:	50                   	push   eax
c00194eb:	e8 b4 77 ff ff       	call   c0010ca4 <VgaText::putx(unsigned int)>
c00194f0:	83 c4 10             	add    esp,0x10
c00194f3:	b2 fe                	mov    dl,0xfe
c00194f5:	e4 60                	in     al,0x60
c00194f7:	3c 1c                	cmp    al,0x1c
c00194f9:	74 04                	je     c00194ff <Krnl::panic(char const*)+0x31e>
c00194fb:	3c 5a                	cmp    al,0x5a
c00194fd:	75 f6                	jne    c00194f5 <Krnl::panic(char const*)+0x314>
c00194ff:	e4 64                	in     al,0x64
c0019501:	a8 02                	test   al,0x2
c0019503:	75 fa                	jne    c00194ff <Krnl::panic(char const*)+0x31e>
c0019505:	88 d0                	mov    al,dl
c0019507:	e6 64                	out    0x64,al
c0019509:	fa                   	cli    
c001950a:	f4                   	hlt    
c001950b:	eb e8                	jmp    c00194f5 <Krnl::panic(char const*)+0x314>

c001950d <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001950d:	55                   	push   ebp
c001950e:	57                   	push   edi
c001950f:	56                   	push   esi
c0019510:	53                   	push   ebx
c0019511:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019517:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001951e:	8a 1e                	mov    bl,BYTE PTR [esi]
c0019520:	8d 6e 01             	lea    ebp,[esi+0x1]
c0019523:	80 fb 40             	cmp    bl,0x40
c0019526:	75 1b                	jne    c0019543 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0019528:	8a 16                	mov    dl,BYTE PTR [esi]
c001952a:	84 d2                	test   dl,dl
c001952c:	0f 84 f1 00 00 00    	je     c0019623 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019532:	8d 46 01             	lea    eax,[esi+0x1]
c0019535:	80 fa 3a             	cmp    dl,0x3a
c0019538:	74 04                	je     c001953e <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001953a:	89 c6                	mov    esi,eax
c001953c:	eb ea                	jmp    c0019528 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001953e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019541:	89 c6                	mov    esi,eax
c0019543:	50                   	push   eax
c0019544:	6a 40                	push   0x40
c0019546:	6a 00                	push   0x0
c0019548:	8d 44 24 24          	lea    eax,[esp+0x24]
c001954c:	50                   	push   eax
c001954d:	e8 39 71 fe ff       	call   c000068b <memset>
c0019552:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0019559:	31 c0                	xor    eax,eax
c001955b:	83 c4 10             	add    esp,0x10
c001955e:	8a 0f                	mov    cl,BYTE PTR [edi]
c0019560:	84 c9                	test   cl,cl
c0019562:	0f 84 bb 00 00 00    	je     c0019623 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019568:	3d c7 00 00 00       	cmp    eax,0xc7
c001956d:	0f 8f b0 00 00 00    	jg     c0019623 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019573:	80 f9 0a             	cmp    cl,0xa
c0019576:	0f 85 98 00 00 00    	jne    c0019614 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001957c:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0019581:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0019585:	a8 df                	test   al,0xdf
c0019587:	0f 94 c1             	sete   cl
c001958a:	3c 23                	cmp    al,0x23
c001958c:	0f 94 c2             	sete   dl
c001958f:	08 d1                	or     cl,dl
c0019591:	75 4a                	jne    c00195dd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019593:	8d 50 f7             	lea    edx,[eax-0x9]
c0019596:	80 fa 01             	cmp    dl,0x1
c0019599:	76 42                	jbe    c00195dd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001959b:	3c 5b                	cmp    al,0x5b
c001959d:	75 42                	jne    c00195e1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001959f:	80 fb 40             	cmp    bl,0x40
c00195a2:	75 39                	jne    c00195dd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00195a4:	83 ec 0c             	sub    esp,0xc
c00195a7:	8d 54 24 65          	lea    edx,[esp+0x65]
c00195ab:	52                   	push   edx
c00195ac:	e8 f7 70 fe ff       	call   c00006a8 <strlen>
c00195b1:	83 c4 10             	add    esp,0x10
c00195b4:	83 f8 3f             	cmp    eax,0x3f
c00195b7:	77 6a                	ja     c0019623 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00195b9:	50                   	push   eax
c00195ba:	50                   	push   eax
c00195bb:	8d 54 24 61          	lea    edx,[esp+0x61]
c00195bf:	52                   	push   edx
c00195c0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00195c4:	52                   	push   edx
c00195c5:	e8 60 71 fe ff       	call   c000072a <strcpy>
c00195ca:	58                   	pop    eax
c00195cb:	8d 54 24 24          	lea    edx,[esp+0x24]
c00195cf:	52                   	push   edx
c00195d0:	e8 d3 70 fe ff       	call   c00006a8 <strlen>
c00195d5:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00195da:	83 c4 10             	add    esp,0x10
c00195dd:	31 d2                	xor    edx,edx
c00195df:	eb 3a                	jmp    c001961b <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00195e1:	80 fb 40             	cmp    bl,0x40
c00195e4:	74 06                	je     c00195ec <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00195e6:	8d 44 24 58          	lea    eax,[esp+0x58]
c00195ea:	eb 20                	jmp    c001960c <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00195ec:	50                   	push   eax
c00195ed:	50                   	push   eax
c00195ee:	55                   	push   ebp
c00195ef:	8d 44 24 24          	lea    eax,[esp+0x24]
c00195f3:	50                   	push   eax
c00195f4:	e8 82 71 fe ff       	call   c000077b <strcmp>
c00195f9:	83 c4 10             	add    esp,0x10
c00195fc:	85 c0                	test   eax,eax
c00195fe:	75 dd                	jne    c00195dd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019600:	eb e4                	jmp    c00195e6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0019602:	8d 50 01             	lea    edx,[eax+0x1]
c0019605:	80 f9 3d             	cmp    cl,0x3d
c0019608:	74 1d                	je     c0019627 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001960a:	89 d0                	mov    eax,edx
c001960c:	8a 08                	mov    cl,BYTE PTR [eax]
c001960e:	84 c9                	test   cl,cl
c0019610:	75 f0                	jne    c0019602 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0019612:	eb 0f                	jmp    c0019623 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019614:	8d 50 01             	lea    edx,[eax+0x1]
c0019617:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001961b:	47                   	inc    edi
c001961c:	89 d0                	mov    eax,edx
c001961e:	e9 3b ff ff ff       	jmp    c001955e <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0019623:	31 c0                	xor    eax,eax
c0019625:	eb 33                	jmp    c001965a <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0019627:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001962b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001962e:	50                   	push   eax
c001962f:	50                   	push   eax
c0019630:	8d 44 24 60          	lea    eax,[esp+0x60]
c0019634:	50                   	push   eax
c0019635:	56                   	push   esi
c0019636:	e8 40 71 fe ff       	call   c000077b <strcmp>
c001963b:	83 c4 10             	add    esp,0x10
c001963e:	85 c0                	test   eax,eax
c0019640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019644:	75 97                	jne    c00195dd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019646:	51                   	push   ecx
c0019647:	51                   	push   ecx
c0019648:	52                   	push   edx
c0019649:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0019650:	e8 d5 70 fe ff       	call   c000072a <strcpy>
c0019655:	83 c4 10             	add    esp,0x10
c0019658:	b0 01                	mov    al,0x1
c001965a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019660:	5b                   	pop    ebx
c0019661:	5e                   	pop    esi
c0019662:	5f                   	pop    edi
c0019663:	5d                   	pop    ebp
c0019664:	c3                   	ret    

c0019665 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0019665:	57                   	push   edi
c0019666:	56                   	push   esi
c0019667:	53                   	push   ebx
c0019668:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001966e:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0019675:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001967c:	53                   	push   ebx
c001967d:	e8 26 70 fe ff       	call   c00006a8 <strlen>
c0019682:	89 34 24             	mov    DWORD PTR [esp],esi
c0019685:	89 c7                	mov    edi,eax
c0019687:	e8 1c 70 fe ff       	call   c00006a8 <strlen>
c001968c:	83 c4 10             	add    esp,0x10
c001968f:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0019693:	3d ff 00 00 00       	cmp    eax,0xff
c0019698:	0f 87 d3 00 00 00    	ja     c0019771 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001969e:	57                   	push   edi
c001969f:	57                   	push   edi
c00196a0:	56                   	push   esi
c00196a1:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00196a5:	56                   	push   esi
c00196a6:	e8 7f 70 fe ff       	call   c000072a <strcpy>
c00196ab:	58                   	pop    eax
c00196ac:	5a                   	pop    edx
c00196ad:	68 69 9a 02 c0       	push   0xc0029a69
c00196b2:	56                   	push   esi
c00196b3:	e8 29 71 fe ff       	call   c00007e1 <strcat>
c00196b8:	59                   	pop    ecx
c00196b9:	5f                   	pop    edi
c00196ba:	53                   	push   ebx
c00196bb:	56                   	push   esi
c00196bc:	e8 20 71 fe ff       	call   c00007e1 <strcat>
c00196c1:	58                   	pop    eax
c00196c2:	5a                   	pop    edx
c00196c3:	68 be 96 02 c0       	push   0xc00296be
c00196c8:	56                   	push   esi
c00196c9:	e8 13 71 fe ff       	call   c00007e1 <strcat>
c00196ce:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00196d5:	e8 f6 5d ff ff       	call   c000f4d0 <malloc>
c00196da:	83 c4 0c             	add    esp,0xc
c00196dd:	89 c3                	mov    ebx,eax
c00196df:	ff 35 d4 cf 02 c0    	push   DWORD PTR ds:0xc002cfd4
c00196e5:	56                   	push   esi
c00196e6:	50                   	push   eax
c00196e7:	e8 e0 94 ff ff       	call   c0012bcc <File::File(char const*, Process*)>
c00196ec:	83 c4 10             	add    esp,0x10
c00196ef:	85 db                	test   ebx,ebx
c00196f1:	74 7e                	je     c0019771 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00196f3:	51                   	push   ecx
c00196f4:	51                   	push   ecx
c00196f5:	6a 01                	push   0x1
c00196f7:	53                   	push   ebx
c00196f8:	e8 33 95 ff ff       	call   c0012c30 <File::open(FileOpenMode)>
c00196fd:	83 c4 10             	add    esp,0x10
c0019700:	85 c0                	test   eax,eax
c0019702:	74 08                	je     c001970c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0019704:	83 ec 0c             	sub    esp,0xc
c0019707:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019709:	53                   	push   ebx
c001970a:	eb 5f                	jmp    c001976b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001970c:	52                   	push   edx
c001970d:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019711:	50                   	push   eax
c0019712:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019716:	50                   	push   eax
c0019717:	53                   	push   ebx
c0019718:	e8 bf 97 ff ff       	call   c0012edc <File::stat(unsigned long long*, bool*)>
c001971d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019721:	83 c4 10             	add    esp,0x10
c0019724:	89 c1                	mov    ecx,eax
c0019726:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001972a:	74 31                	je     c001975d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001972c:	83 ec 0c             	sub    esp,0xc
c001972f:	50                   	push   eax
c0019730:	e8 9b 5d ff ff       	call   c000f4d0 <malloc>
c0019735:	89 c6                	mov    esi,eax
c0019737:	58                   	pop    eax
c0019738:	8b 03                	mov    eax,DWORD PTR [ebx]
c001973a:	8d 54 24 20          	lea    edx,[esp+0x20]
c001973e:	52                   	push   edx
c001973f:	56                   	push   esi
c0019740:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019744:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019748:	53                   	push   ebx
c0019749:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001974c:	83 c4 20             	add    esp,0x20
c001974f:	85 c0                	test   eax,eax
c0019751:	75 0a                	jne    c001975d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0019753:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019757:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001975b:	74 18                	je     c0019775 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001975d:	83 ec 0c             	sub    esp,0xc
c0019760:	53                   	push   ebx
c0019761:	e8 28 95 ff ff       	call   c0012c8e <File::close()>
c0019766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019768:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001976b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001976e:	83 c4 10             	add    esp,0x10
c0019771:	31 c0                	xor    eax,eax
c0019773:	eb 3b                	jmp    c00197b0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0019775:	83 ec 0c             	sub    esp,0xc
c0019778:	53                   	push   ebx
c0019779:	e8 10 95 ff ff       	call   c0012c8e <File::close()>
c001977e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019780:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019783:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019786:	83 c4 0c             	add    esp,0xc
c0019789:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0019790:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0019797:	56                   	push   esi
c0019798:	e8 70 fd ff ff       	call   c001950d <Reg::findLineFromLoadedData(char*, char*, char*)>
c001979d:	89 34 24             	mov    DWORD PTR [esp],esi
c00197a0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00197a4:	e8 37 5d ff ff       	call   c000f4e0 <free>
c00197a9:	83 c4 10             	add    esp,0x10
c00197ac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00197b0:	81 c4 20 01 00 00    	add    esp,0x120
c00197b6:	5b                   	pop    ebx
c00197b7:	5e                   	pop    esi
c00197b8:	5f                   	pop    edi
c00197b9:	c3                   	ret    

c00197ba <Reg::getLine(char*, char*, char*)>:
c00197ba:	57                   	push   edi
c00197bb:	56                   	push   esi
c00197bc:	53                   	push   ebx
c00197bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00197c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00197c5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00197c9:	57                   	push   edi
c00197ca:	56                   	push   esi
c00197cb:	53                   	push   ebx
c00197cc:	68 c3 96 02 c0       	push   0xc00296c3
c00197d1:	e8 8f fe ff ff       	call   c0019665 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00197d6:	83 c4 10             	add    esp,0x10
c00197d9:	84 c0                	test   al,al
c00197db:	75 10                	jne    c00197ed <Reg::getLine(char*, char*, char*)+0x33>
c00197dd:	57                   	push   edi
c00197de:	56                   	push   esi
c00197df:	53                   	push   ebx
c00197e0:	68 e8 96 02 c0       	push   0xc00296e8
c00197e5:	e8 7b fe ff ff       	call   c0019665 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00197ea:	83 c4 10             	add    esp,0x10
c00197ed:	5b                   	pop    ebx
c00197ee:	5e                   	pop    esi
c00197ef:	5f                   	pop    edi
c00197f0:	c3                   	ret    

c00197f1 <Reg::readInt(char*, char*, int*)>:
c00197f1:	55                   	push   ebp
c00197f2:	57                   	push   edi
c00197f3:	56                   	push   esi
c00197f4:	53                   	push   ebx
c00197f5:	81 ec f0 00 00 00    	sub    esp,0xf0
c00197fb:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00197ff:	57                   	push   edi
c0019800:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019807:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001980e:	e8 a7 ff ff ff       	call   c00197ba <Reg::getLine(char*, char*, char*)>
c0019813:	83 c4 10             	add    esp,0x10
c0019816:	84 c0                	test   al,al
c0019818:	0f 84 b3 00 00 00    	je     c00198d1 <Reg::readInt(char*, char*, int*)+0xe0>
c001981e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0019822:	80 fa 2b             	cmp    dl,0x2b
c0019825:	74 0c                	je     c0019833 <Reg::readInt(char*, char*, int*)+0x42>
c0019827:	80 fa 2d             	cmp    dl,0x2d
c001982a:	75 0e                	jne    c001983a <Reg::readInt(char*, char*, int*)+0x49>
c001982c:	ba 01 00 00 00       	mov    edx,0x1
c0019831:	eb 0b                	jmp    c001983e <Reg::readInt(char*, char*, int*)+0x4d>
c0019833:	ba 01 00 00 00       	mov    edx,0x1
c0019838:	eb 02                	jmp    c001983c <Reg::readInt(char*, char*, int*)+0x4b>
c001983a:	31 d2                	xor    edx,edx
c001983c:	31 c0                	xor    eax,eax
c001983e:	be 0a 00 00 00       	mov    esi,0xa
c0019843:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0019848:	75 20                	jne    c001986a <Reg::readInt(char*, char*, int*)+0x79>
c001984a:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001984e:	80 f9 78             	cmp    cl,0x78
c0019851:	75 0a                	jne    c001985d <Reg::readInt(char*, char*, int*)+0x6c>
c0019853:	83 c2 02             	add    edx,0x2
c0019856:	be 10 00 00 00       	mov    esi,0x10
c001985b:	eb 0d                	jmp    c001986a <Reg::readInt(char*, char*, int*)+0x79>
c001985d:	80 f9 62             	cmp    cl,0x62
c0019860:	75 08                	jne    c001986a <Reg::readInt(char*, char*, int*)+0x79>
c0019862:	83 c2 02             	add    edx,0x2
c0019865:	be 02 00 00 00       	mov    esi,0x2
c001986a:	01 d7                	add    edi,edx
c001986c:	31 d2                	xor    edx,edx
c001986e:	8a 1f                	mov    bl,BYTE PTR [edi]
c0019870:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0019874:	80 fb 0d             	cmp    bl,0xd
c0019877:	0f 94 c3             	sete   bl
c001987a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001987f:	0f 94 c1             	sete   cl
c0019882:	08 cb                	or     bl,cl
c0019884:	75 3a                	jne    c00198c0 <Reg::readInt(char*, char*, int*)+0xcf>
c0019886:	0f af d6             	imul   edx,esi
c0019889:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001988e:	83 fe 10             	cmp    esi,0x10
c0019891:	75 26                	jne    c00198b9 <Reg::readInt(char*, char*, int*)+0xc8>
c0019893:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0019897:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001989a:	89 e9                	mov    ecx,ebp
c001989c:	80 f9 05             	cmp    cl,0x5
c001989f:	77 06                	ja     c00198a7 <Reg::readInt(char*, char*, int*)+0xb6>
c00198a1:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00198a5:	eb 16                	jmp    c00198bd <Reg::readInt(char*, char*, int*)+0xcc>
c00198a7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00198ab:	83 e9 61             	sub    ecx,0x61
c00198ae:	80 f9 05             	cmp    cl,0x5
c00198b1:	77 06                	ja     c00198b9 <Reg::readInt(char*, char*, int*)+0xc8>
c00198b3:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00198b7:	eb 04                	jmp    c00198bd <Reg::readInt(char*, char*, int*)+0xcc>
c00198b9:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00198bd:	47                   	inc    edi
c00198be:	eb ae                	jmp    c001986e <Reg::readInt(char*, char*, int*)+0x7d>
c00198c0:	84 c0                	test   al,al
c00198c2:	74 02                	je     c00198c6 <Reg::readInt(char*, char*, int*)+0xd5>
c00198c4:	f7 da                	neg    edx
c00198c6:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00198cd:	89 10                	mov    DWORD PTR [eax],edx
c00198cf:	88 d8                	mov    al,bl
c00198d1:	81 c4 ec 00 00 00    	add    esp,0xec
c00198d7:	5b                   	pop    ebx
c00198d8:	5e                   	pop    esi
c00198d9:	5f                   	pop    edi
c00198da:	5d                   	pop    ebp
c00198db:	c3                   	ret    

c00198dc <Reg::readString(char*, char*, char*, int)>:
c00198dc:	57                   	push   edi
c00198dd:	56                   	push   esi
c00198de:	53                   	push   ebx
c00198df:	81 ec d4 00 00 00    	sub    esp,0xd4
c00198e5:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00198ec:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00198f0:	57                   	push   edi
c00198f1:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00198f8:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00198ff:	e8 b6 fe ff ff       	call   c00197ba <Reg::getLine(char*, char*, char*)>
c0019904:	83 c4 10             	add    esp,0x10
c0019907:	89 c6                	mov    esi,eax
c0019909:	84 c0                	test   al,al
c001990b:	74 44                	je     c0019951 <Reg::readString(char*, char*, char*, int)+0x75>
c001990d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0019914:	31 c0                	xor    eax,eax
c0019916:	4a                   	dec    edx
c0019917:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001991a:	84 c9                	test   cl,cl
c001991c:	74 0f                	je     c001992d <Reg::readString(char*, char*, char*, int)+0x51>
c001991e:	39 c2                	cmp    edx,eax
c0019920:	7e 0b                	jle    c001992d <Reg::readString(char*, char*, char*, int)+0x51>
c0019922:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0019925:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001992a:	40                   	inc    eax
c001992b:	eb ea                	jmp    c0019917 <Reg::readString(char*, char*, char*, int)+0x3b>
c001992d:	83 ec 0c             	sub    esp,0xc
c0019930:	53                   	push   ebx
c0019931:	e8 72 6d fe ff       	call   c00006a8 <strlen>
c0019936:	83 c4 10             	add    esp,0x10
c0019939:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001993e:	75 11                	jne    c0019951 <Reg::readString(char*, char*, char*, int)+0x75>
c0019940:	83 ec 0c             	sub    esp,0xc
c0019943:	53                   	push   ebx
c0019944:	e8 5f 6d fe ff       	call   c00006a8 <strlen>
c0019949:	83 c4 10             	add    esp,0x10
c001994c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0019951:	81 c4 d0 00 00 00    	add    esp,0xd0
c0019957:	89 f0                	mov    eax,esi
c0019959:	5b                   	pop    ebx
c001995a:	5e                   	pop    esi
c001995b:	5f                   	pop    edi
c001995c:	c3                   	ret    

c001995d <Reg::readBool(char*, char*, bool*)>:
c001995d:	83 ec 20             	sub    esp,0x20
c0019960:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019964:	50                   	push   eax
c0019965:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019969:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001996d:	e8 7f fe ff ff       	call   c00197f1 <Reg::readInt(char*, char*, int*)>
c0019972:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019977:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001997b:	0f 95 02             	setne  BYTE PTR [edx]
c001997e:	83 c4 2c             	add    esp,0x2c
c0019981:	c3                   	ret    

c0019982 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0019982:	53                   	push   ebx
c0019983:	83 ec 1c             	sub    esp,0x1c
c0019986:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001998a:	8d 44 24 13          	lea    eax,[esp+0x13]
c001998e:	50                   	push   eax
c001998f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019993:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019997:	e8 c1 ff ff ff       	call   c001995d <Reg::readBool(char*, char*, bool*)>
c001999c:	83 c4 10             	add    esp,0x10
c001999f:	84 c0                	test   al,al
c00199a1:	74 04                	je     c00199a7 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00199a3:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00199a7:	88 d8                	mov    al,bl
c00199a9:	83 c4 18             	add    esp,0x18
c00199ac:	5b                   	pop    ebx
c00199ad:	c3                   	ret    

c00199ae <Reg::readIntWithDefault(char*, char*, int)>:
c00199ae:	53                   	push   ebx
c00199af:	83 ec 1c             	sub    esp,0x1c
c00199b2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00199b6:	8d 44 24 10          	lea    eax,[esp+0x10]
c00199ba:	50                   	push   eax
c00199bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199c3:	e8 29 fe ff ff       	call   c00197f1 <Reg::readInt(char*, char*, int*)>
c00199c8:	83 c4 10             	add    esp,0x10
c00199cb:	84 c0                	test   al,al
c00199cd:	74 04                	je     c00199d3 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00199cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00199d3:	89 d8                	mov    eax,ebx
c00199d5:	83 c4 18             	add    esp,0x18
c00199d8:	5b                   	pop    ebx
c00199d9:	c3                   	ret    

c00199da <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00199da:	57                   	push   edi
c00199db:	56                   	push   esi
c00199dc:	53                   	push   ebx
c00199dd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00199e1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00199e5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00199e9:	56                   	push   esi
c00199ea:	53                   	push   ebx
c00199eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199f3:	e8 e4 fe ff ff       	call   c00198dc <Reg::readString(char*, char*, char*, int)>
c00199f8:	83 c4 10             	add    esp,0x10
c00199fb:	84 c0                	test   al,al
c00199fd:	75 1b                	jne    c0019a1a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c00199ff:	50                   	push   eax
c0019a00:	56                   	push   esi
c0019a01:	4e                   	dec    esi
c0019a02:	6a 00                	push   0x0
c0019a04:	53                   	push   ebx
c0019a05:	e8 81 6c fe ff       	call   c000068b <memset>
c0019a0a:	83 c4 0c             	add    esp,0xc
c0019a0d:	56                   	push   esi
c0019a0e:	57                   	push   edi
c0019a0f:	53                   	push   ebx
c0019a10:	89 fb                	mov    ebx,edi
c0019a12:	e8 3e 6c fe ff       	call   c0000655 <memcpy>
c0019a17:	83 c4 10             	add    esp,0x10
c0019a1a:	89 d8                	mov    eax,ebx
c0019a1c:	5b                   	pop    ebx
c0019a1d:	5e                   	pop    esi
c0019a1e:	5f                   	pop    edi
c0019a1f:	c3                   	ret    

c0019a20 <Sys::exit(regs*)>:
c0019a20:	83 ec 18             	sub    esp,0x18
c0019a23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a27:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019a2a:	e8 15 32 00 00       	call   c001cc44 <terminateTask(int)>
c0019a2f:	83 c8 ff             	or     eax,0xffffffff
c0019a32:	83 c4 1c             	add    esp,0x1c
c0019a35:	89 c2                	mov    edx,eax
c0019a37:	c3                   	ret    

c0019a38 <Sys::getCwd(regs*)>:
c0019a38:	83 ec 10             	sub    esp,0x10
c0019a3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a3f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0019a42:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019a45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a4a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019a4d:	e8 eb 94 ff ff       	call   c0012f3d <getcwd(Process*, char*, int)>
c0019a52:	83 c4 1c             	add    esp,0x1c
c0019a55:	99                   	cdq    
c0019a56:	c3                   	ret    

c0019a57 <Sys::getPID(regs*)>:
c0019a57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a5c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019a5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a61:	99                   	cdq    
c0019a62:	c3                   	ret    

c0019a63 <Sys::loadDLL(regs*)>:
c0019a63:	56                   	push   esi
c0019a64:	53                   	push   ebx
c0019a65:	31 d2                	xor    edx,edx
c0019a67:	51                   	push   ecx
c0019a68:	b8 01 00 00 00       	mov    eax,0x1
c0019a6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a71:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0019a75:	0f 84 8c 00 00 00    	je     c0019b07 <Sys::loadDLL(regs*)+0xa4>
c0019a7b:	83 ec 0c             	sub    esp,0xc
c0019a7e:	68 14 01 00 00       	push   0x114
c0019a83:	e8 48 5a ff ff       	call   c000f4d0 <malloc>
c0019a88:	83 c4 0c             	add    esp,0xc
c0019a8b:	89 c3                	mov    ebx,eax
c0019a8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a92:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019a95:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019a98:	53                   	push   ebx
c0019a99:	e8 2e 91 ff ff       	call   c0012bcc <File::File(char const*, Process*)>
c0019a9e:	83 c4 10             	add    esp,0x10
c0019aa1:	31 d2                	xor    edx,edx
c0019aa3:	b8 02 00 00 00       	mov    eax,0x2
c0019aa8:	85 db                	test   ebx,ebx
c0019aaa:	74 5b                	je     c0019b07 <Sys::loadDLL(regs*)+0xa4>
c0019aac:	83 ec 0c             	sub    esp,0xc
c0019aaf:	53                   	push   ebx
c0019ab0:	e8 e9 93 ff ff       	call   c0012e9e <File::exists()>
c0019ab5:	83 c4 10             	add    esp,0x10
c0019ab8:	84 c0                	test   al,al
c0019aba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019abc:	75 11                	jne    c0019acf <Sys::loadDLL(regs*)+0x6c>
c0019abe:	83 ec 0c             	sub    esp,0xc
c0019ac1:	53                   	push   ebx
c0019ac2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ac5:	83 c4 10             	add    esp,0x10
c0019ac8:	b8 03 00 00 00       	mov    eax,0x3
c0019acd:	eb 36                	jmp    c0019b05 <Sys::loadDLL(regs*)+0xa2>
c0019acf:	83 ec 0c             	sub    esp,0xc
c0019ad2:	53                   	push   ebx
c0019ad3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ad6:	58                   	pop    eax
c0019ad7:	5a                   	pop    edx
c0019ad8:	6a 00                	push   0x0
c0019ada:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019add:	e8 09 21 00 00       	call   c001bbeb <Thr::loadDLL(char const*, bool)>
c0019ae2:	83 c4 10             	add    esp,0x10
c0019ae5:	89 c1                	mov    ecx,eax
c0019ae7:	31 d2                	xor    edx,edx
c0019ae9:	b8 04 00 00 00       	mov    eax,0x4
c0019aee:	85 c9                	test   ecx,ecx
c0019af0:	74 15                	je     c0019b07 <Sys::loadDLL(regs*)+0xa4>
c0019af2:	53                   	push   ebx
c0019af3:	53                   	push   ebx
c0019af4:	ff 35 c8 ba 02 c0    	push   DWORD PTR ds:0xc002bac8
c0019afa:	51                   	push   ecx
c0019afb:	e8 fa 22 00 00       	call   c001bdfa <Thr::executeDLL(unsigned long, void*)>
c0019b00:	83 c4 10             	add    esp,0x10
c0019b03:	31 c0                	xor    eax,eax
c0019b05:	31 d2                	xor    edx,edx
c0019b07:	59                   	pop    ecx
c0019b08:	5b                   	pop    ebx
c0019b09:	5e                   	pop    esi
c0019b0a:	c3                   	ret    

c0019b0b <Sys::read(regs*)>:
c0019b0b:	57                   	push   edi
c0019b0c:	56                   	push   esi
c0019b0d:	53                   	push   ebx
c0019b0e:	83 ec 10             	sub    esp,0x10
c0019b11:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019b15:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019b18:	83 f8 02             	cmp    eax,0x2
c0019b1b:	77 10                	ja     c0019b2d <Sys::read(regs*)+0x22>
c0019b1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019b25:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0019b2b:	eb 0e                	jmp    c0019b3b <Sys::read(regs*)+0x30>
c0019b2d:	83 ec 0c             	sub    esp,0xc
c0019b30:	50                   	push   eax
c0019b31:	e8 21 7a ff ff       	call   c0011557 <getFromFileDescriptor(int)>
c0019b36:	83 c4 10             	add    esp,0x10
c0019b39:	89 c1                	mov    ecx,eax
c0019b3b:	83 c8 ff             	or     eax,0xffffffff
c0019b3e:	85 c9                	test   ecx,ecx
c0019b40:	89 c2                	mov    edx,eax
c0019b42:	74 28                	je     c0019b6c <Sys::read(regs*)+0x61>
c0019b44:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019b4c:	31 ff                	xor    edi,edi
c0019b4e:	83 ec 0c             	sub    esp,0xc
c0019b51:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019b53:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019b57:	52                   	push   edx
c0019b58:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019b5b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0019b5e:	57                   	push   edi
c0019b5f:	56                   	push   esi
c0019b60:	51                   	push   ecx
c0019b61:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019b64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019b68:	83 c4 20             	add    esp,0x20
c0019b6b:	99                   	cdq    
c0019b6c:	83 c4 10             	add    esp,0x10
c0019b6f:	5b                   	pop    ebx
c0019b70:	5e                   	pop    esi
c0019b71:	5f                   	pop    edi
c0019b72:	c3                   	ret    

c0019b73 <Sys::sbrk(regs*)>:
c0019b73:	56                   	push   esi
c0019b74:	53                   	push   ebx
c0019b75:	50                   	push   eax
c0019b76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b7f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019b82:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0019b85:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0019b8b:	85 db                	test   ebx,ebx
c0019b8d:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0019b90:	74 02                	je     c0019b94 <Sys::sbrk(regs*)+0x21>
c0019b92:	79 06                	jns    c0019b9a <Sys::sbrk(regs*)+0x27>
c0019b94:	89 f0                	mov    eax,esi
c0019b96:	31 d2                	xor    edx,edx
c0019b98:	eb 2a                	jmp    c0019bc4 <Sys::sbrk(regs*)+0x51>
c0019b9a:	83 c8 ff             	or     eax,0xffffffff
c0019b9d:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0019ba3:	89 c2                	mov    edx,eax
c0019ba5:	77 1d                	ja     c0019bc4 <Sys::sbrk(regs*)+0x51>
c0019ba7:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0019bad:	50                   	push   eax
c0019bae:	c1 ea 0c             	shr    edx,0xc
c0019bb1:	68 07 04 00 00       	push   0x407
c0019bb6:	52                   	push   edx
c0019bb7:	51                   	push   ecx
c0019bb8:	e8 bb 82 ff ff       	call   c0011e78 <VAS::allocatePages(int, int)>
c0019bbd:	89 f0                	mov    eax,esi
c0019bbf:	31 d2                	xor    edx,edx
c0019bc1:	83 c4 10             	add    esp,0x10
c0019bc4:	59                   	pop    ecx
c0019bc5:	5b                   	pop    ebx
c0019bc6:	5e                   	pop    esi
c0019bc7:	c3                   	ret    

c0019bc8 <Sys::setCwd(regs*)>:
c0019bc8:	83 ec 14             	sub    esp,0x14
c0019bcb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019bcf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019bd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019bd7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019bda:	e8 88 93 ff ff       	call   c0012f67 <setcwd(Process*, char*)>
c0019bdf:	83 c4 1c             	add    esp,0x1c
c0019be2:	99                   	cdq    
c0019be3:	c3                   	ret    

c0019be4 <Sys::write(regs*)>:
c0019be4:	57                   	push   edi
c0019be5:	56                   	push   esi
c0019be6:	53                   	push   ebx
c0019be7:	83 ec 10             	sub    esp,0x10
c0019bea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019bee:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019bf1:	83 f8 02             	cmp    eax,0x2
c0019bf4:	77 10                	ja     c0019c06 <Sys::write(regs*)+0x22>
c0019bf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019bfb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019bfe:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0019c04:	eb 0e                	jmp    c0019c14 <Sys::write(regs*)+0x30>
c0019c06:	83 ec 0c             	sub    esp,0xc
c0019c09:	50                   	push   eax
c0019c0a:	e8 48 79 ff ff       	call   c0011557 <getFromFileDescriptor(int)>
c0019c0f:	83 c4 10             	add    esp,0x10
c0019c12:	89 c1                	mov    ecx,eax
c0019c14:	83 c8 ff             	or     eax,0xffffffff
c0019c17:	85 c9                	test   ecx,ecx
c0019c19:	89 c2                	mov    edx,eax
c0019c1b:	74 28                	je     c0019c45 <Sys::write(regs*)+0x61>
c0019c1d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019c25:	31 ff                	xor    edi,edi
c0019c27:	83 ec 0c             	sub    esp,0xc
c0019c2a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019c2c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019c30:	52                   	push   edx
c0019c31:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019c34:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0019c37:	57                   	push   edi
c0019c38:	56                   	push   esi
c0019c39:	51                   	push   ecx
c0019c3a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019c3d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019c41:	83 c4 20             	add    esp,0x20
c0019c44:	99                   	cdq    
c0019c45:	83 c4 10             	add    esp,0x10
c0019c48:	5b                   	pop    ebx
c0019c49:	5e                   	pop    esi
c0019c4a:	5f                   	pop    edi
c0019c4b:	c3                   	ret    

c0019c4c <Sys::yield(regs*)>:
c0019c4c:	57                   	push   edi
c0019c4d:	56                   	push   esi
c0019c4e:	53                   	push   ebx
c0019c4f:	e8 d3 25 00 00       	call   c001c227 <lockScheduler()>
c0019c54:	e8 09 29 00 00       	call   c001c562 <schedule()>
c0019c59:	e8 cb 25 00 00       	call   c001c229 <unlockScheduler()>
c0019c5e:	8b 35 30 c1 02 c0    	mov    esi,DWORD PTR ds:0xc002c130
c0019c64:	8b 3d 34 c1 02 c0    	mov    edi,DWORD PTR ds:0xc002c134
c0019c6a:	89 f0                	mov    eax,esi
c0019c6c:	89 fb                	mov    ebx,edi
c0019c6e:	89 f1                	mov    ecx,esi
c0019c70:	c1 e0 07             	shl    eax,0x7
c0019c73:	0f ac d9 17          	shrd   ecx,ebx,0x17
c0019c77:	25 80 30 0f 00       	and    eax,0xf3080
c0019c7c:	c1 eb 17             	shr    ebx,0x17
c0019c7f:	31 c8                	xor    eax,ecx
c0019c81:	89 da                	mov    edx,ebx
c0019c83:	5b                   	pop    ebx
c0019c84:	5e                   	pop    esi
c0019c85:	5f                   	pop    edi
c0019c86:	c3                   	ret    

c0019c87 <sysCallSeekDir(regs*)>:
c0019c87:	31 c0                	xor    eax,eax
c0019c89:	31 d2                	xor    edx,edx
c0019c8b:	c3                   	ret    

c0019c8c <sysCallTellDir(regs*)>:
c0019c8c:	31 c0                	xor    eax,eax
c0019c8e:	31 d2                	xor    edx,edx
c0019c90:	c3                   	ret    

c0019c91 <sysCallVerify(regs*)>:
c0019c91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c95:	31 d2                	xor    edx,edx
c0019c97:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019c9a:	c3                   	ret    

c0019c9b <sysCallGetArgc(regs*)>:
c0019c9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ca0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019ca3:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0019ca9:	99                   	cdq    
c0019caa:	c3                   	ret    

c0019cab <sysFormatDisk(regs*)>:
c0019cab:	56                   	push   esi
c0019cac:	53                   	push   ebx
c0019cad:	53                   	push   ebx
c0019cae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019cb2:	8b 1d 28 bc 02 c0    	mov    ebx,DWORD PTR ds:0xc002bc28
c0019cb8:	eb 25                	jmp    c0019cdf <sysFormatDisk(regs*)+0x34>
c0019cba:	83 ec 0c             	sub    esp,0xc
c0019cbd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019cc0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019cc2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0019cc5:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019cc8:	50                   	push   eax
c0019cc9:	ff 34 85 c0 c0 02 c0 	push   DWORD PTR [eax*4-0x3ffd3f40]
c0019cd0:	53                   	push   ebx
c0019cd1:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0019cd4:	83 c4 20             	add    esp,0x20
c0019cd7:	83 f8 08             	cmp    eax,0x8
c0019cda:	75 12                	jne    c0019cee <sysFormatDisk(regs*)+0x43>
c0019cdc:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0019cdf:	85 db                	test   ebx,ebx
c0019ce1:	75 d7                	jne    c0019cba <sysFormatDisk(regs*)+0xf>
c0019ce3:	59                   	pop    ecx
c0019ce4:	b8 03 00 00 00       	mov    eax,0x3
c0019ce9:	31 d2                	xor    edx,edx
c0019ceb:	5b                   	pop    ebx
c0019cec:	5e                   	pop    esi
c0019ced:	c3                   	ret    
c0019cee:	85 c0                	test   eax,eax
c0019cf0:	74 1b                	je     c0019d0d <sysFormatDisk(regs*)+0x62>
c0019cf2:	83 f8 09             	cmp    eax,0x9
c0019cf5:	74 0b                	je     c0019d02 <sysFormatDisk(regs*)+0x57>
c0019cf7:	59                   	pop    ecx
c0019cf8:	b8 02 00 00 00       	mov    eax,0x2
c0019cfd:	31 d2                	xor    edx,edx
c0019cff:	5b                   	pop    ebx
c0019d00:	5e                   	pop    esi
c0019d01:	c3                   	ret    
c0019d02:	59                   	pop    ecx
c0019d03:	b8 01 00 00 00       	mov    eax,0x1
c0019d08:	31 d2                	xor    edx,edx
c0019d0a:	5b                   	pop    ebx
c0019d0b:	5e                   	pop    esi
c0019d0c:	c3                   	ret    
c0019d0d:	59                   	pop    ecx
c0019d0e:	31 c0                	xor    eax,eax
c0019d10:	31 d2                	xor    edx,edx
c0019d12:	5b                   	pop    ebx
c0019d13:	5e                   	pop    esi
c0019d14:	c3                   	ret    

c0019d15 <sysSetDiskVolumeLabel(regs*)>:
c0019d15:	56                   	push   esi
c0019d16:	53                   	push   ebx
c0019d17:	53                   	push   ebx
c0019d18:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019d1c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0019d1f:	83 f8 19             	cmp    eax,0x19
c0019d22:	77 29                	ja     c0019d4d <sysSetDiskVolumeLabel(regs*)+0x38>
c0019d24:	8b 0c 85 c0 c0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3f40]
c0019d2b:	85 c9                	test   ecx,ecx
c0019d2d:	74 1e                	je     c0019d4d <sysSetDiskVolumeLabel(regs*)+0x38>
c0019d2f:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0019d32:	85 d2                	test   edx,edx
c0019d34:	74 17                	je     c0019d4d <sysSetDiskVolumeLabel(regs*)+0x38>
c0019d36:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0019d3c:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019d3e:	52                   	push   edx
c0019d3f:	50                   	push   eax
c0019d40:	51                   	push   ecx
c0019d41:	53                   	push   ebx
c0019d42:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0019d45:	83 c4 10             	add    esp,0x10
c0019d48:	99                   	cdq    
c0019d49:	59                   	pop    ecx
c0019d4a:	5b                   	pop    ebx
c0019d4b:	5e                   	pop    esi
c0019d4c:	c3                   	ret    
c0019d4d:	59                   	pop    ecx
c0019d4e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019d53:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019d58:	5b                   	pop    ebx
c0019d59:	5e                   	pop    esi
c0019d5a:	c3                   	ret    

c0019d5b <sysGetDiskVolumeLabel(regs*)>:
c0019d5b:	57                   	push   edi
c0019d5c:	56                   	push   esi
c0019d5d:	53                   	push   ebx
c0019d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d62:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019d65:	83 fa 19             	cmp    edx,0x19
c0019d68:	77 34                	ja     c0019d9e <sysGetDiskVolumeLabel(regs*)+0x43>
c0019d6a:	8b 0c 95 c0 c0 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd3f40]
c0019d71:	85 c9                	test   ecx,ecx
c0019d73:	74 29                	je     c0019d9e <sysGetDiskVolumeLabel(regs*)+0x43>
c0019d75:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019d78:	85 db                	test   ebx,ebx
c0019d7a:	74 22                	je     c0019d9e <sysGetDiskVolumeLabel(regs*)+0x43>
c0019d7c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0019d7f:	85 c0                	test   eax,eax
c0019d81:	74 1b                	je     c0019d9e <sysGetDiskVolumeLabel(regs*)+0x43>
c0019d83:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c0019d89:	83 ec 0c             	sub    esp,0xc
c0019d8c:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019d8e:	50                   	push   eax
c0019d8f:	53                   	push   ebx
c0019d90:	52                   	push   edx
c0019d91:	51                   	push   ecx
c0019d92:	56                   	push   esi
c0019d93:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0019d96:	83 c4 20             	add    esp,0x20
c0019d99:	99                   	cdq    
c0019d9a:	5b                   	pop    ebx
c0019d9b:	5e                   	pop    esi
c0019d9c:	5f                   	pop    edi
c0019d9d:	c3                   	ret    
c0019d9e:	5b                   	pop    ebx
c0019d9f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019da4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019da9:	5e                   	pop    esi
c0019daa:	5f                   	pop    edi
c0019dab:	c3                   	ret    

c0019dac <sysShutdown(regs*)>:
c0019dac:	83 ec 0c             	sub    esp,0xc
c0019daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019db3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019db6:	85 c0                	test   eax,eax
c0019db8:	74 18                	je     c0019dd2 <sysShutdown(regs*)+0x26>
c0019dba:	83 f8 01             	cmp    eax,0x1
c0019dbd:	74 38                	je     c0019df7 <sysShutdown(regs*)+0x4b>
c0019dbf:	83 f8 02             	cmp    eax,0x2
c0019dc2:	74 24                	je     c0019de8 <sysShutdown(regs*)+0x3c>
c0019dc4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019dc9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019dce:	83 c4 0c             	add    esp,0xc
c0019dd1:	c3                   	ret    
c0019dd2:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0019dd7:	8b 10                	mov    edx,DWORD PTR [eax]
c0019dd9:	6a 00                	push   0x0
c0019ddb:	6a 00                	push   0x0
c0019ddd:	6a 00                	push   0x0
c0019ddf:	50                   	push   eax
c0019de0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019de3:	83 c4 10             	add    esp,0x10
c0019de6:	eb dc                	jmp    c0019dc4 <sysShutdown(regs*)+0x18>
c0019de8:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0019ded:	8b 10                	mov    edx,DWORD PTR [eax]
c0019def:	6a 00                	push   0x0
c0019df1:	6a 00                	push   0x0
c0019df3:	6a 01                	push   0x1
c0019df5:	eb e8                	jmp    c0019ddf <sysShutdown(regs*)+0x33>
c0019df7:	a1 40 c1 02 c0       	mov    eax,ds:0xc002c140
c0019dfc:	85 c0                	test   eax,eax
c0019dfe:	74 02                	je     c0019e02 <sysShutdown(regs*)+0x56>
c0019e00:	ff d0                	call   eax
c0019e02:	31 c0                	xor    eax,eax
c0019e04:	31 d2                	xor    edx,edx
c0019e06:	83 c4 0c             	add    esp,0xc
c0019e09:	c3                   	ret    

c0019e0a <sysCallRealpath(regs*)>:
c0019e0a:	83 ec 0c             	sub    esp,0xc
c0019e0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e11:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0019e14:	85 d2                	test   edx,edx
c0019e16:	74 07                	je     c0019e1f <sysCallRealpath(regs*)+0x15>
c0019e18:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019e1b:	85 c0                	test   eax,eax
c0019e1d:	75 0b                	jne    c0019e2a <sysCallRealpath(regs*)+0x20>
c0019e1f:	b8 01 00 00 00       	mov    eax,0x1
c0019e24:	31 d2                	xor    edx,edx
c0019e26:	83 c4 0c             	add    esp,0xc
c0019e29:	c3                   	ret    
c0019e2a:	51                   	push   ecx
c0019e2b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019e31:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019e34:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0019e3a:	51                   	push   ecx
c0019e3b:	52                   	push   edx
c0019e3c:	50                   	push   eax
c0019e3d:	e8 e0 8b ff ff       	call   c0012a22 <standardiseFiles(char*, char const*, char const*)>
c0019e42:	83 c4 10             	add    esp,0x10
c0019e45:	31 c0                	xor    eax,eax
c0019e47:	31 d2                	xor    edx,edx
c0019e49:	83 c4 0c             	add    esp,0xc
c0019e4c:	c3                   	ret    

c0019e4d <sysCallReadDir(regs*)>:
c0019e4d:	53                   	push   ebx
c0019e4e:	83 ec 18             	sub    esp,0x18
c0019e51:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019e55:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019e58:	83 f8 02             	cmp    eax,0x2
c0019e5b:	76 53                	jbe    c0019eb0 <sysCallReadDir(regs*)+0x63>
c0019e5d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019e60:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0019e66:	77 4f                	ja     c0019eb7 <sysCallReadDir(regs*)+0x6a>
c0019e68:	83 ec 0c             	sub    esp,0xc
c0019e6b:	50                   	push   eax
c0019e6c:	e8 e6 76 ff ff       	call   c0011557 <getFromFileDescriptor(int)>
c0019e71:	83 c4 10             	add    esp,0x10
c0019e74:	85 c0                	test   eax,eax
c0019e76:	74 50                	je     c0019ec8 <sysCallReadDir(regs*)+0x7b>
c0019e78:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019e80:	83 ec 0c             	sub    esp,0xc
c0019e83:	8b 10                	mov    edx,DWORD PTR [eax]
c0019e85:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0019e89:	51                   	push   ecx
c0019e8a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019e8d:	6a 00                	push   0x0
c0019e8f:	68 10 01 00 00       	push   0x110
c0019e94:	50                   	push   eax
c0019e95:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019e98:	83 c4 20             	add    esp,0x20
c0019e9b:	85 c0                	test   eax,eax
c0019e9d:	74 38                	je     c0019ed7 <sysCallReadDir(regs*)+0x8a>
c0019e9f:	83 f8 07             	cmp    eax,0x7
c0019ea2:	74 0c                	je     c0019eb0 <sysCallReadDir(regs*)+0x63>
c0019ea4:	b8 02 00 00 00       	mov    eax,0x2
c0019ea9:	31 d2                	xor    edx,edx
c0019eab:	83 c4 18             	add    esp,0x18
c0019eae:	5b                   	pop    ebx
c0019eaf:	c3                   	ret    
c0019eb0:	b8 01 00 00 00       	mov    eax,0x1
c0019eb5:	eb f2                	jmp    c0019ea9 <sysCallReadDir(regs*)+0x5c>
c0019eb7:	83 ec 08             	sub    esp,0x8
c0019eba:	52                   	push   edx
c0019ebb:	68 04 97 02 c0       	push   0xc0029704
c0019ec0:	e8 d8 87 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0019ec5:	83 c4 10             	add    esp,0x10
c0019ec8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019ecd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019ed2:	83 c4 18             	add    esp,0x18
c0019ed5:	5b                   	pop    ebx
c0019ed6:	c3                   	ret    
c0019ed7:	31 c0                	xor    eax,eax
c0019ed9:	eb ce                	jmp    c0019ea9 <sysCallReadDir(regs*)+0x5c>

c0019edb <sysCallIsATTY(regs*)>:
c0019edb:	83 ec 0c             	sub    esp,0xc
c0019ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ee2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019ee5:	83 f8 02             	cmp    eax,0x2
c0019ee8:	76 07                	jbe    c0019ef1 <sysCallIsATTY(regs*)+0x16>
c0019eea:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019eef:	75 26                	jne    c0019f17 <sysCallIsATTY(regs*)+0x3c>
c0019ef1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ef6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019ef9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019eff:	85 c0                	test   eax,eax
c0019f01:	74 24                	je     c0019f27 <sysCallIsATTY(regs*)+0x4c>
c0019f03:	83 ec 0c             	sub    esp,0xc
c0019f06:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f08:	50                   	push   eax
c0019f09:	ff 12                	call   DWORD PTR [edx]
c0019f0b:	31 d2                	xor    edx,edx
c0019f0d:	0f b6 c0             	movzx  eax,al
c0019f10:	83 c4 10             	add    esp,0x10
c0019f13:	83 c4 0c             	add    esp,0xc
c0019f16:	c3                   	ret    
c0019f17:	83 ec 0c             	sub    esp,0xc
c0019f1a:	50                   	push   eax
c0019f1b:	e8 37 76 ff ff       	call   c0011557 <getFromFileDescriptor(int)>
c0019f20:	83 c4 10             	add    esp,0x10
c0019f23:	85 c0                	test   eax,eax
c0019f25:	75 dc                	jne    c0019f03 <sysCallIsATTY(regs*)+0x28>
c0019f27:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019f2c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019f31:	83 c4 0c             	add    esp,0xc
c0019f34:	c3                   	ret    

c0019f35 <sysCallSeek(regs*)>:
c0019f35:	53                   	push   ebx
c0019f36:	83 ec 08             	sub    esp,0x8
c0019f39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f3d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019f40:	83 f8 02             	cmp    eax,0x2
c0019f43:	76 4a                	jbe    c0019f8f <sysCallSeek(regs*)+0x5a>
c0019f45:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019f4a:	77 32                	ja     c0019f7e <sysCallSeek(regs*)+0x49>
c0019f4c:	83 ec 0c             	sub    esp,0xc
c0019f4f:	50                   	push   eax
c0019f50:	e8 02 76 ff ff       	call   c0011557 <getFromFileDescriptor(int)>
c0019f55:	83 c4 0c             	add    esp,0xc
c0019f58:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0019f5b:	31 db                	xor    ebx,ebx
c0019f5d:	53                   	push   ebx
c0019f5e:	51                   	push   ecx
c0019f5f:	50                   	push   eax
c0019f60:	e8 89 8d ff ff       	call   c0012cee <File::seek(unsigned long long)>
c0019f65:	83 c4 10             	add    esp,0x10
c0019f68:	85 c0                	test   eax,eax
c0019f6a:	0f 95 c0             	setne  al
c0019f6d:	31 d2                	xor    edx,edx
c0019f6f:	0f b6 c0             	movzx  eax,al
c0019f72:	f7 d8                	neg    eax
c0019f74:	83 d2 00             	adc    edx,0x0
c0019f77:	83 c4 08             	add    esp,0x8
c0019f7a:	f7 da                	neg    edx
c0019f7c:	5b                   	pop    ebx
c0019f7d:	c3                   	ret    
c0019f7e:	83 ec 08             	sub    esp,0x8
c0019f81:	50                   	push   eax
c0019f82:	68 c0 97 02 c0       	push   0xc00297c0
c0019f87:	e8 11 87 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0019f8c:	83 c4 10             	add    esp,0x10
c0019f8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019f94:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019f99:	83 c4 08             	add    esp,0x8
c0019f9c:	5b                   	pop    ebx
c0019f9d:	c3                   	ret    

c0019f9e <sysCallTell(regs*)>:
c0019f9e:	53                   	push   ebx
c0019f9f:	83 ec 08             	sub    esp,0x8
c0019fa2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019fa6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019fa9:	83 f8 02             	cmp    eax,0x2
c0019fac:	76 5e                	jbe    c001a00c <sysCallTell(regs*)+0x6e>
c0019fae:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019fb3:	77 2d                	ja     c0019fe2 <sysCallTell(regs*)+0x44>
c0019fb5:	83 ec 0c             	sub    esp,0xc
c0019fb8:	50                   	push   eax
c0019fb9:	e8 99 75 ff ff       	call   c0011557 <getFromFileDescriptor(int)>
c0019fbe:	5a                   	pop    edx
c0019fbf:	59                   	pop    ecx
c0019fc0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019fc3:	50                   	push   eax
c0019fc4:	e8 7b 8d ff ff       	call   c0012d44 <File::tell(unsigned long long*)>
c0019fc9:	83 c4 10             	add    esp,0x10
c0019fcc:	85 c0                	test   eax,eax
c0019fce:	0f 95 c0             	setne  al
c0019fd1:	31 d2                	xor    edx,edx
c0019fd3:	0f b6 c0             	movzx  eax,al
c0019fd6:	f7 d8                	neg    eax
c0019fd8:	83 d2 00             	adc    edx,0x0
c0019fdb:	83 c4 08             	add    esp,0x8
c0019fde:	f7 da                	neg    edx
c0019fe0:	5b                   	pop    ebx
c0019fe1:	c3                   	ret    
c0019fe2:	83 ec 08             	sub    esp,0x8
c0019fe5:	50                   	push   eax
c0019fe6:	68 da 97 02 c0       	push   0xc00297da
c0019feb:	e8 ad 86 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0019ff0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019ff3:	83 c4 10             	add    esp,0x10
c0019ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019ffc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a003:	31 d2                	xor    edx,edx
c001a005:	31 c0                	xor    eax,eax
c001a007:	83 c4 08             	add    esp,0x8
c001a00a:	5b                   	pop    ebx
c001a00b:	c3                   	ret    
c001a00c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a011:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a016:	83 c4 08             	add    esp,0x8
c001a019:	5b                   	pop    ebx
c001a01a:	c3                   	ret    

c001a01b <sysCallSize(regs*)>:
c001a01b:	53                   	push   ebx
c001a01c:	83 ec 18             	sub    esp,0x18
c001a01f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a023:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a026:	83 f8 02             	cmp    eax,0x2
c001a029:	76 64                	jbe    c001a08f <sysCallSize(regs*)+0x74>
c001a02b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a030:	77 33                	ja     c001a065 <sysCallSize(regs*)+0x4a>
c001a032:	83 ec 0c             	sub    esp,0xc
c001a035:	50                   	push   eax
c001a036:	e8 1c 75 ff ff       	call   c0011557 <getFromFileDescriptor(int)>
c001a03b:	83 c4 0c             	add    esp,0xc
c001a03e:	8d 54 24 13          	lea    edx,[esp+0x13]
c001a042:	52                   	push   edx
c001a043:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a046:	50                   	push   eax
c001a047:	e8 90 8e ff ff       	call   c0012edc <File::stat(unsigned long long*, bool*)>
c001a04c:	83 c4 10             	add    esp,0x10
c001a04f:	85 c0                	test   eax,eax
c001a051:	0f 95 c0             	setne  al
c001a054:	31 d2                	xor    edx,edx
c001a056:	0f b6 c0             	movzx  eax,al
c001a059:	f7 d8                	neg    eax
c001a05b:	83 d2 00             	adc    edx,0x0
c001a05e:	83 c4 18             	add    esp,0x18
c001a061:	f7 da                	neg    edx
c001a063:	5b                   	pop    ebx
c001a064:	c3                   	ret    
c001a065:	83 ec 08             	sub    esp,0x8
c001a068:	50                   	push   eax
c001a069:	68 f4 97 02 c0       	push   0xc00297f4
c001a06e:	e8 2a 86 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001a073:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a076:	83 c4 10             	add    esp,0x10
c001a079:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a07f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a086:	31 d2                	xor    edx,edx
c001a088:	31 c0                	xor    eax,eax
c001a08a:	83 c4 18             	add    esp,0x18
c001a08d:	5b                   	pop    ebx
c001a08e:	c3                   	ret    
c001a08f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a094:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a099:	83 c4 18             	add    esp,0x18
c001a09c:	5b                   	pop    ebx
c001a09d:	c3                   	ret    

c001a09e <sysCallSizeFromFilename(regs*)>:
c001a09e:	57                   	push   edi
c001a09f:	56                   	push   esi
c001a0a0:	53                   	push   ebx
c001a0a1:	83 ec 20             	sub    esp,0x20
c001a0a4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a0a8:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001a0ab:	83 fb 02             	cmp    ebx,0x2
c001a0ae:	0f 86 99 00 00 00    	jbe    c001a14d <sysCallSizeFromFilename(regs*)+0xaf>
c001a0b4:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001a0ba:	77 65                	ja     c001a121 <sysCallSizeFromFilename(regs*)+0x83>
c001a0bc:	83 ec 0c             	sub    esp,0xc
c001a0bf:	68 14 01 00 00       	push   0x114
c001a0c4:	e8 07 54 ff ff       	call   c000f4d0 <malloc>
c001a0c9:	83 c4 0c             	add    esp,0xc
c001a0cc:	89 c6                	mov    esi,eax
c001a0ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a0d3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a0d6:	53                   	push   ebx
c001a0d7:	56                   	push   esi
c001a0d8:	e8 ef 8a ff ff       	call   c0012bcc <File::File(char const*, Process*)>
c001a0dd:	83 c4 0c             	add    esp,0xc
c001a0e0:	8d 44 24 23          	lea    eax,[esp+0x23]
c001a0e4:	50                   	push   eax
c001a0e5:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001a0e8:	56                   	push   esi
c001a0e9:	e8 ee 8d ff ff       	call   c0012edc <File::stat(unsigned long long*, bool*)>
c001a0ee:	83 c4 10             	add    esp,0x10
c001a0f1:	85 f6                	test   esi,esi
c001a0f3:	74 14                	je     c001a109 <sysCallSizeFromFilename(regs*)+0x6b>
c001a0f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a0f9:	8b 16                	mov    edx,DWORD PTR [esi]
c001a0fb:	83 ec 0c             	sub    esp,0xc
c001a0fe:	56                   	push   esi
c001a0ff:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a102:	83 c4 10             	add    esp,0x10
c001a105:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a109:	85 c0                	test   eax,eax
c001a10b:	0f 95 c0             	setne  al
c001a10e:	31 d2                	xor    edx,edx
c001a110:	0f b6 c0             	movzx  eax,al
c001a113:	f7 d8                	neg    eax
c001a115:	83 d2 00             	adc    edx,0x0
c001a118:	83 c4 20             	add    esp,0x20
c001a11b:	f7 da                	neg    edx
c001a11d:	5b                   	pop    ebx
c001a11e:	5e                   	pop    esi
c001a11f:	5f                   	pop    edi
c001a120:	c3                   	ret    
c001a121:	83 ec 08             	sub    esp,0x8
c001a124:	53                   	push   ebx
c001a125:	68 f4 97 02 c0       	push   0xc00297f4
c001a12a:	e8 6e 85 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001a12f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001a132:	83 c4 10             	add    esp,0x10
c001a135:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a13b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a142:	31 d2                	xor    edx,edx
c001a144:	83 c4 20             	add    esp,0x20
c001a147:	31 c0                	xor    eax,eax
c001a149:	5b                   	pop    ebx
c001a14a:	5e                   	pop    esi
c001a14b:	5f                   	pop    edi
c001a14c:	c3                   	ret    
c001a14d:	83 c4 20             	add    esp,0x20
c001a150:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a155:	5b                   	pop    ebx
c001a156:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a15b:	5e                   	pop    esi
c001a15c:	5f                   	pop    edi
c001a15d:	c3                   	ret    

c001a15e <sysCallClose(regs*)>:
c001a15e:	53                   	push   ebx
c001a15f:	83 ec 08             	sub    esp,0x8
c001a162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a166:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a169:	83 f8 02             	cmp    eax,0x2
c001a16c:	76 50                	jbe    c001a1be <sysCallClose(regs*)+0x60>
c001a16e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a173:	74 58                	je     c001a1cd <sysCallClose(regs*)+0x6f>
c001a175:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a17a:	74 60                	je     c001a1dc <sysCallClose(regs*)+0x7e>
c001a17c:	77 2f                	ja     c001a1ad <sysCallClose(regs*)+0x4f>
c001a17e:	83 ec 0c             	sub    esp,0xc
c001a181:	50                   	push   eax
c001a182:	e8 d0 73 ff ff       	call   c0011557 <getFromFileDescriptor(int)>
c001a187:	89 c3                	mov    ebx,eax
c001a189:	89 04 24             	mov    DWORD PTR [esp],eax
c001a18c:	e8 fd 8a ff ff       	call   c0012c8e <File::close()>
c001a191:	83 c4 10             	add    esp,0x10
c001a194:	85 db                	test   ebx,ebx
c001a196:	74 0c                	je     c001a1a4 <sysCallClose(regs*)+0x46>
c001a198:	83 ec 0c             	sub    esp,0xc
c001a19b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a19d:	53                   	push   ebx
c001a19e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a1a1:	83 c4 10             	add    esp,0x10
c001a1a4:	31 c0                	xor    eax,eax
c001a1a6:	31 d2                	xor    edx,edx
c001a1a8:	83 c4 08             	add    esp,0x8
c001a1ab:	5b                   	pop    ebx
c001a1ac:	c3                   	ret    
c001a1ad:	83 ec 08             	sub    esp,0x8
c001a1b0:	50                   	push   eax
c001a1b1:	68 28 97 02 c0       	push   0xc0029728
c001a1b6:	e8 e2 84 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001a1bb:	83 c4 10             	add    esp,0x10
c001a1be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a1c3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a1c8:	83 c4 08             	add    esp,0x8
c001a1cb:	5b                   	pop    ebx
c001a1cc:	c3                   	ret    
c001a1cd:	83 ec 0c             	sub    esp,0xc
c001a1d0:	68 0f 98 02 c0       	push   0xc002980f
c001a1d5:	e8 c3 84 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001a1da:	eb c5                	jmp    c001a1a1 <sysCallClose(regs*)+0x43>
c001a1dc:	83 ec 0c             	sub    esp,0xc
c001a1df:	68 1d 98 02 c0       	push   0xc002981d
c001a1e4:	eb ef                	jmp    c001a1d5 <sysCallClose(regs*)+0x77>

c001a1e6 <sysCallOpenDir(regs*)>:
c001a1e6:	56                   	push   esi
c001a1e7:	53                   	push   ebx
c001a1e8:	53                   	push   ebx
c001a1e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a1ed:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001a1f0:	85 f6                	test   esi,esi
c001a1f2:	74 59                	je     c001a24d <sysCallOpenDir(regs*)+0x67>
c001a1f4:	83 ec 0c             	sub    esp,0xc
c001a1f7:	68 14 01 00 00       	push   0x114
c001a1fc:	e8 cf 52 ff ff       	call   c000f4d0 <malloc>
c001a201:	83 c4 0c             	add    esp,0xc
c001a204:	89 c6                	mov    esi,eax
c001a206:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a20b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a20e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a211:	56                   	push   esi
c001a212:	e8 8b 8e ff ff       	call   c00130a2 <Directory::Directory(char const*, Process*)>
c001a217:	83 c4 10             	add    esp,0x10
c001a21a:	85 f6                	test   esi,esi
c001a21c:	74 2f                	je     c001a24d <sysCallOpenDir(regs*)+0x67>
c001a21e:	83 ec 0c             	sub    esp,0xc
c001a221:	56                   	push   esi
c001a222:	e8 df 8e ff ff       	call   c0013106 <Directory::open()>
c001a227:	83 c4 10             	add    esp,0x10
c001a22a:	85 c0                	test   eax,eax
c001a22c:	75 1f                	jne    c001a24d <sysCallOpenDir(regs*)+0x67>
c001a22e:	83 ec 0c             	sub    esp,0xc
c001a231:	56                   	push   esi
c001a232:	e8 2b 70 ff ff       	call   c0011262 <UnixFile::getFileDescriptor()>
c001a237:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a23a:	83 c4 10             	add    esp,0x10
c001a23d:	89 02                	mov    DWORD PTR [edx],eax
c001a23f:	c1 f8 1f             	sar    eax,0x1f
c001a242:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a245:	31 c0                	xor    eax,eax
c001a247:	59                   	pop    ecx
c001a248:	31 d2                	xor    edx,edx
c001a24a:	5b                   	pop    ebx
c001a24b:	5e                   	pop    esi
c001a24c:	c3                   	ret    
c001a24d:	59                   	pop    ecx
c001a24e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a253:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a258:	5b                   	pop    ebx
c001a259:	5e                   	pop    esi
c001a25a:	c3                   	ret    

c001a25b <sysCallCloseDir(regs*)>:
c001a25b:	53                   	push   ebx
c001a25c:	83 ec 08             	sub    esp,0x8
c001a25f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a263:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a266:	83 f8 02             	cmp    eax,0x2
c001a269:	76 47                	jbe    c001a2b2 <sysCallCloseDir(regs*)+0x57>
c001a26b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a270:	77 2f                	ja     c001a2a1 <sysCallCloseDir(regs*)+0x46>
c001a272:	83 ec 0c             	sub    esp,0xc
c001a275:	50                   	push   eax
c001a276:	e8 dc 72 ff ff       	call   c0011557 <getFromFileDescriptor(int)>
c001a27b:	89 c3                	mov    ebx,eax
c001a27d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a280:	e8 dd 8e ff ff       	call   c0013162 <Directory::close()>
c001a285:	83 c4 10             	add    esp,0x10
c001a288:	85 db                	test   ebx,ebx
c001a28a:	74 0c                	je     c001a298 <sysCallCloseDir(regs*)+0x3d>
c001a28c:	83 ec 0c             	sub    esp,0xc
c001a28f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a291:	53                   	push   ebx
c001a292:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a295:	83 c4 10             	add    esp,0x10
c001a298:	31 c0                	xor    eax,eax
c001a29a:	31 d2                	xor    edx,edx
c001a29c:	83 c4 08             	add    esp,0x8
c001a29f:	5b                   	pop    ebx
c001a2a0:	c3                   	ret    
c001a2a1:	83 ec 08             	sub    esp,0x8
c001a2a4:	50                   	push   eax
c001a2a5:	68 50 97 02 c0       	push   0xc0029750
c001a2aa:	e8 ee 83 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001a2af:	83 c4 10             	add    esp,0x10
c001a2b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a2b7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a2bc:	83 c4 08             	add    esp,0x8
c001a2bf:	5b                   	pop    ebx
c001a2c0:	c3                   	ret    

c001a2c1 <sysCallMakeDir(regs*)>:
c001a2c1:	56                   	push   esi
c001a2c2:	53                   	push   ebx
c001a2c3:	83 ec 10             	sub    esp,0x10
c001a2c6:	68 14 01 00 00       	push   0x114
c001a2cb:	e8 00 52 ff ff       	call   c000f4d0 <malloc>
c001a2d0:	83 c4 0c             	add    esp,0xc
c001a2d3:	89 c3                	mov    ebx,eax
c001a2d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a2da:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a2dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a2e1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001a2e4:	53                   	push   ebx
c001a2e5:	e8 b8 8d ff ff       	call   c00130a2 <Directory::Directory(char const*, Process*)>
c001a2ea:	83 c4 10             	add    esp,0x10
c001a2ed:	85 db                	test   ebx,ebx
c001a2ef:	74 32                	je     c001a323 <sysCallMakeDir(regs*)+0x62>
c001a2f1:	83 ec 0c             	sub    esp,0xc
c001a2f4:	53                   	push   ebx
c001a2f5:	e8 ec 8f ff ff       	call   c00132e6 <Directory::create()>
c001a2fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a2fd:	89 c6                	mov    esi,eax
c001a2ff:	e8 5e 8e ff ff       	call   c0013162 <Directory::close()>
c001a304:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a306:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a309:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a30c:	83 c4 10             	add    esp,0x10
c001a30f:	31 c0                	xor    eax,eax
c001a311:	59                   	pop    ecx
c001a312:	85 f6                	test   esi,esi
c001a314:	5b                   	pop    ebx
c001a315:	0f 95 c0             	setne  al
c001a318:	5e                   	pop    esi
c001a319:	31 d2                	xor    edx,edx
c001a31b:	f7 d8                	neg    eax
c001a31d:	83 d2 00             	adc    edx,0x0
c001a320:	f7 da                	neg    edx
c001a322:	c3                   	ret    
c001a323:	59                   	pop    ecx
c001a324:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a329:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a32e:	5b                   	pop    ebx
c001a32f:	5e                   	pop    esi
c001a330:	c3                   	ret    

c001a331 <sysCallWait(regs*)>:
c001a331:	83 ec 10             	sub    esp,0x10
c001a334:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a338:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a33b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001a33e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a341:	e8 97 23 00 00       	call   c001c6dd <waitTask(int, int*, int)>
c001a346:	83 c4 1c             	add    esp,0x1c
c001a349:	99                   	cdq    
c001a34a:	c3                   	ret    

c001a34b <sysCallNotImpl(regs*)>:
c001a34b:	83 ec 18             	sub    esp,0x18
c001a34e:	68 2b 98 02 c0       	push   0xc002982b
c001a353:	e8 89 ee ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001a358:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a35d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a362:	83 c4 1c             	add    esp,0x1c
c001a365:	c3                   	ret    

c001a366 <sysPanic(regs*)>:
c001a366:	83 ec 18             	sub    esp,0x18
c001a369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a36d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001a370:	e8 6c ee ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001a375:	c7 04 24 45 98 02 c0 	mov    DWORD PTR [esp],0xc0029845
c001a37c:	e8 60 ee ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001a381:	b8 01 00 00 00       	mov    eax,0x1
c001a386:	31 d2                	xor    edx,edx
c001a388:	83 c4 1c             	add    esp,0x1c
c001a38b:	c3                   	ret    

c001a38c <sysCallRmdir(regs*)>:
c001a38c:	56                   	push   esi
c001a38d:	53                   	push   ebx
c001a38e:	83 ec 20             	sub    esp,0x20
c001a391:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a395:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001a398:	68 14 01 00 00       	push   0x114
c001a39d:	e8 2e 51 ff ff       	call   c000f4d0 <malloc>
c001a3a2:	83 c4 0c             	add    esp,0xc
c001a3a5:	89 c3                	mov    ebx,eax
c001a3a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a3ac:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a3af:	56                   	push   esi
c001a3b0:	53                   	push   ebx
c001a3b1:	e8 16 88 ff ff       	call   c0012bcc <File::File(char const*, Process*)>
c001a3b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3b9:	e8 ea 89 ff ff       	call   c0012da8 <File::unlink()>
c001a3be:	83 c4 10             	add    esp,0x10
c001a3c1:	85 db                	test   ebx,ebx
c001a3c3:	74 14                	je     c001a3d9 <sysCallRmdir(regs*)+0x4d>
c001a3c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a3c9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a3cb:	83 ec 0c             	sub    esp,0xc
c001a3ce:	53                   	push   ebx
c001a3cf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a3d2:	83 c4 10             	add    esp,0x10
c001a3d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a3d9:	85 c0                	test   eax,eax
c001a3db:	0f 95 c0             	setne  al
c001a3de:	31 d2                	xor    edx,edx
c001a3e0:	0f b6 c0             	movzx  eax,al
c001a3e3:	f7 d8                	neg    eax
c001a3e5:	83 d2 00             	adc    edx,0x0
c001a3e8:	83 c4 14             	add    esp,0x14
c001a3eb:	f7 da                	neg    edx
c001a3ed:	5b                   	pop    ebx
c001a3ee:	5e                   	pop    esi
c001a3ef:	c3                   	ret    

c001a3f0 <sysCallUnlink(regs*)>:
c001a3f0:	56                   	push   esi
c001a3f1:	53                   	push   ebx
c001a3f2:	83 ec 20             	sub    esp,0x20
c001a3f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a3f9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001a3fc:	68 14 01 00 00       	push   0x114
c001a401:	e8 ca 50 ff ff       	call   c000f4d0 <malloc>
c001a406:	83 c4 0c             	add    esp,0xc
c001a409:	89 c3                	mov    ebx,eax
c001a40b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a410:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a413:	56                   	push   esi
c001a414:	53                   	push   ebx
c001a415:	e8 b2 87 ff ff       	call   c0012bcc <File::File(char const*, Process*)>
c001a41a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a41d:	e8 86 89 ff ff       	call   c0012da8 <File::unlink()>
c001a422:	83 c4 10             	add    esp,0x10
c001a425:	85 db                	test   ebx,ebx
c001a427:	74 14                	je     c001a43d <sysCallUnlink(regs*)+0x4d>
c001a429:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a42d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a42f:	83 ec 0c             	sub    esp,0xc
c001a432:	53                   	push   ebx
c001a433:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a436:	83 c4 10             	add    esp,0x10
c001a439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a43d:	85 c0                	test   eax,eax
c001a43f:	0f 95 c0             	setne  al
c001a442:	31 d2                	xor    edx,edx
c001a444:	0f b6 c0             	movzx  eax,al
c001a447:	f7 d8                	neg    eax
c001a449:	83 d2 00             	adc    edx,0x0
c001a44c:	83 c4 14             	add    esp,0x14
c001a44f:	f7 da                	neg    edx
c001a451:	5b                   	pop    ebx
c001a452:	5e                   	pop    esi
c001a453:	c3                   	ret    

c001a454 <sysCallGetArgv(regs*)>:
c001a454:	83 ec 0c             	sub    esp,0xc
c001a457:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a45b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a45e:	85 c0                	test   eax,eax
c001a460:	78 2b                	js     c001a48d <sysCallGetArgv(regs*)+0x39>
c001a462:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a468:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a46b:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001a471:	7d 1a                	jge    c001a48d <sysCallGetArgv(regs*)+0x39>
c001a473:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001a47a:	85 c0                	test   eax,eax
c001a47c:	74 17                	je     c001a495 <sysCallGetArgv(regs*)+0x41>
c001a47e:	83 ec 08             	sub    esp,0x8
c001a481:	50                   	push   eax
c001a482:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001a485:	e8 a0 62 fe ff       	call   c000072a <strcpy>
c001a48a:	83 c4 10             	add    esp,0x10
c001a48d:	31 c0                	xor    eax,eax
c001a48f:	31 d2                	xor    edx,edx
c001a491:	83 c4 0c             	add    esp,0xc
c001a494:	c3                   	ret    
c001a495:	b8 01 00 00 00       	mov    eax,0x1
c001a49a:	31 d2                	xor    edx,edx
c001a49c:	83 c4 0c             	add    esp,0xc
c001a49f:	c3                   	ret    

c001a4a0 <sysCallTTYName(regs*)>:
c001a4a0:	56                   	push   esi
c001a4a1:	53                   	push   ebx
c001a4a2:	53                   	push   ebx
c001a4a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4a7:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a4aa:	85 c0                	test   eax,eax
c001a4ac:	74 5f                	je     c001a50d <sysCallTTYName(regs*)+0x6d>
c001a4ae:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a4b1:	83 f8 02             	cmp    eax,0x2
c001a4b4:	77 3e                	ja     c001a4f4 <sysCallTTYName(regs*)+0x54>
c001a4b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4bb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a4be:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001a4c4:	85 db                	test   ebx,ebx
c001a4c6:	74 45                	je     c001a50d <sysCallTTYName(regs*)+0x6d>
c001a4c8:	83 ec 0c             	sub    esp,0xc
c001a4cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a4cd:	53                   	push   ebx
c001a4ce:	ff 10                	call   DWORD PTR [eax]
c001a4d0:	83 c4 10             	add    esp,0x10
c001a4d3:	84 c0                	test   al,al
c001a4d5:	74 41                	je     c001a518 <sysCallTTYName(regs*)+0x78>
c001a4d7:	83 ec 08             	sub    esp,0x8
c001a4da:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001a4e0:	53                   	push   ebx
c001a4e1:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a4e4:	e8 41 62 fe ff       	call   c000072a <strcpy>
c001a4e9:	83 c4 10             	add    esp,0x10
c001a4ec:	31 c0                	xor    eax,eax
c001a4ee:	59                   	pop    ecx
c001a4ef:	31 d2                	xor    edx,edx
c001a4f1:	5b                   	pop    ebx
c001a4f2:	5e                   	pop    esi
c001a4f3:	c3                   	ret    
c001a4f4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a4f9:	74 bb                	je     c001a4b6 <sysCallTTYName(regs*)+0x16>
c001a4fb:	83 ec 0c             	sub    esp,0xc
c001a4fe:	50                   	push   eax
c001a4ff:	e8 53 70 ff ff       	call   c0011557 <getFromFileDescriptor(int)>
c001a504:	83 c4 10             	add    esp,0x10
c001a507:	89 c3                	mov    ebx,eax
c001a509:	85 db                	test   ebx,ebx
c001a50b:	75 bb                	jne    c001a4c8 <sysCallTTYName(regs*)+0x28>
c001a50d:	59                   	pop    ecx
c001a50e:	b8 01 00 00 00       	mov    eax,0x1
c001a513:	31 d2                	xor    edx,edx
c001a515:	5b                   	pop    ebx
c001a516:	5e                   	pop    esi
c001a517:	c3                   	ret    
c001a518:	59                   	pop    ecx
c001a519:	b8 02 00 00 00       	mov    eax,0x2
c001a51e:	31 d2                	xor    edx,edx
c001a520:	5b                   	pop    ebx
c001a521:	5e                   	pop    esi
c001a522:	c3                   	ret    

c001a523 <sysCallGetEnv(regs*)>:
c001a523:	83 ec 0c             	sub    esp,0xc
c001a526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a52a:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001a52d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a530:	85 c9                	test   ecx,ecx
c001a532:	75 22                	jne    c001a556 <sysCallGetEnv(regs*)+0x33>
c001a534:	85 d2                	test   edx,edx
c001a536:	74 08                	je     c001a540 <sysCallGetEnv(regs*)+0x1d>
c001a538:	31 c0                	xor    eax,eax
c001a53a:	31 d2                	xor    edx,edx
c001a53c:	83 c4 0c             	add    esp,0xc
c001a53f:	c3                   	ret    
c001a540:	83 ec 0c             	sub    esp,0xc
c001a543:	68 74 97 02 c0       	push   0xc0029774
c001a548:	e8 5b 61 fe ff       	call   c00006a8 <strlen>
c001a54d:	83 c4 10             	add    esp,0x10
c001a550:	31 d2                	xor    edx,edx
c001a552:	83 c4 0c             	add    esp,0xc
c001a555:	c3                   	ret    
c001a556:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a559:	85 d2                	test   edx,edx
c001a55b:	74 05                	je     c001a562 <sysCallGetEnv(regs*)+0x3f>
c001a55d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a560:	eb d6                	jmp    c001a538 <sysCallGetEnv(regs*)+0x15>
c001a562:	83 ec 08             	sub    esp,0x8
c001a565:	68 74 97 02 c0       	push   0xc0029774
c001a56a:	50                   	push   eax
c001a56b:	e8 ba 61 fe ff       	call   c000072a <strcpy>
c001a570:	83 c4 10             	add    esp,0x10
c001a573:	eb c3                	jmp    c001a538 <sysCallGetEnv(regs*)+0x15>

c001a575 <sysCallUSleep(regs*)>:
c001a575:	83 ec 14             	sub    esp,0x14
c001a578:	b8 e8 03 00 00       	mov    eax,0x3e8
c001a57d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a581:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001a588:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001a58b:	01 ca                	add    edx,ecx
c001a58d:	52                   	push   edx
c001a58e:	50                   	push   eax
c001a58f:	e8 e2 21 00 00       	call   c001c776 <nanoSleep(unsigned long long)>
c001a594:	31 c0                	xor    eax,eax
c001a596:	31 d2                	xor    edx,edx
c001a598:	83 c4 1c             	add    esp,0x1c
c001a59b:	c3                   	ret    

c001a59c <sysCallSpawn(regs*)>:
c001a59c:	56                   	push   esi
c001a59d:	53                   	push   ebx
c001a59e:	53                   	push   ebx
c001a59f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a5a3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001a5a6:	85 f6                	test   esi,esi
c001a5a8:	75 08                	jne    c001a5b2 <sysCallSpawn(regs*)+0x16>
c001a5aa:	59                   	pop    ecx
c001a5ab:	31 c0                	xor    eax,eax
c001a5ad:	31 d2                	xor    edx,edx
c001a5af:	5b                   	pop    ebx
c001a5b0:	5e                   	pop    esi
c001a5b1:	c3                   	ret    
c001a5b2:	83 ec 0c             	sub    esp,0xc
c001a5b5:	68 3b 07 00 00       	push   0x73b
c001a5ba:	e8 11 4f ff ff       	call   c000f4d0 <malloc>
c001a5bf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a5c2:	89 c6                	mov    esi,eax
c001a5c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5c9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a5cc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a5cf:	56                   	push   esi
c001a5d0:	e8 d9 18 00 00       	call   c001beae <Process::Process(char const*, Process*, char**)>
c001a5d5:	83 c4 20             	add    esp,0x20
c001a5d8:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c001a5df:	75 c9                	jne    c001a5aa <sysCallSpawn(regs*)+0xe>
c001a5e1:	83 ec 0c             	sub    esp,0xc
c001a5e4:	56                   	push   esi
c001a5e5:	e8 52 1e 00 00       	call   c001c43c <Process::createUserThread()>
c001a5ea:	8b 06                	mov    eax,DWORD PTR [esi]
c001a5ec:	83 c4 10             	add    esp,0x10
c001a5ef:	99                   	cdq    
c001a5f0:	59                   	pop    ecx
c001a5f1:	5b                   	pop    ebx
c001a5f2:	5e                   	pop    esi
c001a5f3:	c3                   	ret    

c001a5f4 <sysAppSettings(regs*)>:
c001a5f4:	53                   	push   ebx
c001a5f5:	83 ec 08             	sub    esp,0x8
c001a5f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5fc:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a5ff:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001a605:	25 e0 1f 00 00       	and    eax,0x1fe0
c001a60a:	66 3d c0 09          	cmp    ax,0x9c0
c001a60e:	75 2f                	jne    c001a63f <sysAppSettings(regs*)+0x4b>
c001a610:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001a616:	83 e0 1f             	and    eax,0x1f
c001a619:	3c 01                	cmp    al,0x1
c001a61b:	74 2e                	je     c001a64b <sysAppSettings(regs*)+0x57>
c001a61d:	3c 07                	cmp    al,0x7
c001a61f:	0f 84 bd 00 00 00    	je     c001a6e2 <sysAppSettings(regs*)+0xee>
c001a625:	84 c0                	test   al,al
c001a627:	0f 84 dc 00 00 00    	je     c001a709 <sysAppSettings(regs*)+0x115>
c001a62d:	3c 08                	cmp    al,0x8
c001a62f:	74 6d                	je     c001a69e <sysAppSettings(regs*)+0xaa>
c001a631:	0f b6 c0             	movzx  eax,al
c001a634:	83 c4 08             	add    esp,0x8
c001a637:	05 e8 03 00 00       	add    eax,0x3e8
c001a63c:	5b                   	pop    ebx
c001a63d:	99                   	cdq    
c001a63e:	c3                   	ret    
c001a63f:	b8 01 00 00 00       	mov    eax,0x1
c001a644:	31 d2                	xor    edx,edx
c001a646:	83 c4 08             	add    esp,0x8
c001a649:	5b                   	pop    ebx
c001a64a:	c3                   	ret    
c001a64b:	51                   	push   ecx
c001a64c:	68 00 01 00 00       	push   0x100
c001a651:	6a 00                	push   0x0
c001a653:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a658:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a65b:	83 c0 0c             	add    eax,0xc
c001a65e:	50                   	push   eax
c001a65f:	e8 27 60 fe ff       	call   c000068b <memset>
c001a664:	83 c4 0c             	add    esp,0xc
c001a667:	68 ff 00 00 00       	push   0xff
c001a66c:	53                   	push   ebx
c001a66d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a672:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a675:	83 c0 0c             	add    eax,0xc
c001a678:	50                   	push   eax
c001a679:	e8 d7 5f fe ff       	call   c0000655 <memcpy>
c001a67e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a683:	5b                   	pop    ebx
c001a684:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a687:	5a                   	pop    edx
c001a688:	8d 50 0c             	lea    edx,[eax+0xc]
c001a68b:	52                   	push   edx
c001a68c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a692:	e8 3b 60 ff ff       	call   c00106d2 <VgaText::setTitle(char*)>
c001a697:	83 c4 10             	add    esp,0x10
c001a69a:	31 c0                	xor    eax,eax
c001a69c:	eb a6                	jmp    c001a644 <sysAppSettings(regs*)+0x50>
c001a69e:	83 ec 08             	sub    esp,0x8
c001a6a1:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001a6a7:	83 e0 0f             	and    eax,0xf
c001a6aa:	50                   	push   eax
c001a6ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a6b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6b9:	e8 04 60 ff ff       	call   c00106c2 <VgaText::setTitleColour(VgaColour)>
c001a6be:	58                   	pop    eax
c001a6bf:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001a6c5:	5a                   	pop    edx
c001a6c6:	c1 e8 04             	shr    eax,0x4
c001a6c9:	83 e0 0f             	and    eax,0xf
c001a6cc:	50                   	push   eax
c001a6cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a6d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6db:	e8 d2 5f ff ff       	call   c00106b2 <VgaText::setTitleTextColour(VgaColour)>
c001a6e0:	eb b5                	jmp    c001a697 <sysAppSettings(regs*)+0xa3>
c001a6e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6e7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a6ea:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001a6f0:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001a6f6:	c0 e8 06             	shr    al,0x6
c001a6f9:	83 e0 01             	and    eax,0x1
c001a6fc:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001a702:	31 c0                	xor    eax,eax
c001a704:	e9 3b ff ff ff       	jmp    c001a644 <sysAppSettings(regs*)+0x50>
c001a709:	b8 02 00 00 00       	mov    eax,0x2
c001a70e:	e9 31 ff ff ff       	jmp    c001a644 <sysAppSettings(regs*)+0x50>

c001a713 <sysSetFatAttrib(regs*)>:
c001a713:	57                   	push   edi
c001a714:	56                   	push   esi
c001a715:	53                   	push   ebx
c001a716:	83 ec 1c             	sub    esp,0x1c
c001a719:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a71d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a720:	68 14 01 00 00       	push   0x114
c001a725:	e8 a6 4d ff ff       	call   c000f4d0 <malloc>
c001a72a:	83 c4 0c             	add    esp,0xc
c001a72d:	89 c3                	mov    ebx,eax
c001a72f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a734:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a737:	57                   	push   edi
c001a738:	53                   	push   ebx
c001a739:	e8 8e 84 ff ff       	call   c0012bcc <File::File(char const*, Process*)>
c001a73e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a741:	83 c4 0c             	add    esp,0xc
c001a744:	0f b6 d4             	movzx  edx,ah
c001a747:	0f b6 c0             	movzx  eax,al
c001a74a:	52                   	push   edx
c001a74b:	50                   	push   eax
c001a74c:	53                   	push   ebx
c001a74d:	e8 f0 86 ff ff       	call   c0012e42 <File::chfatattr(unsigned char, unsigned char)>
c001a752:	83 c4 10             	add    esp,0x10
c001a755:	85 db                	test   ebx,ebx
c001a757:	74 14                	je     c001a76d <sysSetFatAttrib(regs*)+0x5a>
c001a759:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a75d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a75f:	83 ec 0c             	sub    esp,0xc
c001a762:	53                   	push   ebx
c001a763:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a766:	83 c4 10             	add    esp,0x10
c001a769:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a76d:	85 c0                	test   eax,eax
c001a76f:	0f 95 c0             	setne  al
c001a772:	31 d2                	xor    edx,edx
c001a774:	0f b6 c0             	movzx  eax,al
c001a777:	f7 d8                	neg    eax
c001a779:	83 d2 00             	adc    edx,0x0
c001a77c:	83 c4 10             	add    esp,0x10
c001a77f:	f7 da                	neg    edx
c001a781:	5b                   	pop    ebx
c001a782:	5e                   	pop    esi
c001a783:	5f                   	pop    edi
c001a784:	c3                   	ret    

c001a785 <sysPipe(regs*)>:
c001a785:	57                   	push   edi
c001a786:	56                   	push   esi
c001a787:	53                   	push   ebx
c001a788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a78c:	83 ec 0c             	sub    esp,0xc
c001a78f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001a792:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001a795:	6a 20                	push   0x20
c001a797:	e8 34 4d ff ff       	call   c000f4d0 <malloc>
c001a79c:	89 c3                	mov    ebx,eax
c001a79e:	58                   	pop    eax
c001a79f:	5a                   	pop    edx
c001a7a0:	68 00 50 00 00       	push   0x5000
c001a7a5:	53                   	push   ebx
c001a7a6:	e8 65 58 ff ff       	call   c0010010 <Pipe::Pipe(int)>
c001a7ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7ae:	e8 af 6a ff ff       	call   c0011262 <UnixFile::getFileDescriptor()>
c001a7b3:	89 07                	mov    DWORD PTR [edi],eax
c001a7b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7b8:	e8 a5 6a ff ff       	call   c0011262 <UnixFile::getFileDescriptor()>
c001a7bd:	83 c4 10             	add    esp,0x10
c001a7c0:	89 06                	mov    DWORD PTR [esi],eax
c001a7c2:	31 d2                	xor    edx,edx
c001a7c4:	5b                   	pop    ebx
c001a7c5:	31 c0                	xor    eax,eax
c001a7c7:	5e                   	pop    esi
c001a7c8:	5f                   	pop    edi
c001a7c9:	c3                   	ret    

c001a7ca <sysGetUnixTime(regs*)>:
c001a7ca:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c001a7cf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a7d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a7d9:	e9 ca 8d ff ff       	jmp    c00135a8 <Clock::timeInSecondsLocal()>

c001a7de <string_ends_with(char const*, char const*)>:
c001a7de:	57                   	push   edi
c001a7df:	56                   	push   esi
c001a7e0:	53                   	push   ebx
c001a7e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a7e5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a7e9:	83 ec 0c             	sub    esp,0xc
c001a7ec:	53                   	push   ebx
c001a7ed:	e8 b6 5e fe ff       	call   c00006a8 <strlen>
c001a7f2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a7f5:	89 c6                	mov    esi,eax
c001a7f7:	e8 ac 5e fe ff       	call   c00006a8 <strlen>
c001a7fc:	83 c4 10             	add    esp,0x10
c001a7ff:	39 c6                	cmp    esi,eax
c001a801:	7d 06                	jge    c001a809 <string_ends_with(char const*, char const*)+0x2b>
c001a803:	5b                   	pop    ebx
c001a804:	31 c0                	xor    eax,eax
c001a806:	5e                   	pop    esi
c001a807:	5f                   	pop    edi
c001a808:	c3                   	ret    
c001a809:	83 ec 08             	sub    esp,0x8
c001a80c:	29 c6                	sub    esi,eax
c001a80e:	57                   	push   edi
c001a80f:	01 f3                	add    ebx,esi
c001a811:	53                   	push   ebx
c001a812:	e8 64 5f fe ff       	call   c000077b <strcmp>
c001a817:	83 c4 10             	add    esp,0x10
c001a81a:	85 c0                	test   eax,eax
c001a81c:	5b                   	pop    ebx
c001a81d:	0f 94 c0             	sete   al
c001a820:	5e                   	pop    esi
c001a821:	0f b6 c0             	movzx  eax,al
c001a824:	5f                   	pop    edi
c001a825:	c3                   	ret    

c001a826 <sysCallOpen(regs*)>:
c001a826:	56                   	push   esi
c001a827:	53                   	push   ebx
c001a828:	81 ec 04 01 00 00    	sub    esp,0x104
c001a82e:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001a835:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001a838:	85 c9                	test   ecx,ecx
c001a83a:	0f 84 b3 00 00 00    	je     c001a8f3 <sysCallOpen(regs*)+0xcd>
c001a840:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001a843:	85 c0                	test   eax,eax
c001a845:	0f 84 a8 00 00 00    	je     c001a8f3 <sysCallOpen(regs*)+0xcd>
c001a84b:	52                   	push   edx
c001a84c:	68 54 98 02 c0       	push   0xc0029854
c001a851:	50                   	push   eax
c001a852:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a856:	56                   	push   esi
c001a857:	e8 c6 81 ff ff       	call   c0012a22 <standardiseFiles(char*, char const*, char const*)>
c001a85c:	89 34 24             	mov    DWORD PTR [esp],esi
c001a85f:	e8 44 5e fe ff       	call   c00006a8 <strlen>
c001a864:	83 c4 10             	add    esp,0x10
c001a867:	48                   	dec    eax
c001a868:	74 1d                	je     c001a887 <sysCallOpen(regs*)+0x61>
c001a86a:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001a86d:	eb 0f                	jmp    c001a87e <sysCallOpen(regs*)+0x58>
c001a86f:	80 fa 3a             	cmp    dl,0x3a
c001a872:	74 0f                	je     c001a883 <sysCallOpen(regs*)+0x5d>
c001a874:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a878:	48                   	dec    eax
c001a879:	74 0c                	je     c001a887 <sysCallOpen(regs*)+0x61>
c001a87b:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001a87e:	80 fa 2e             	cmp    dl,0x2e
c001a881:	75 ec                	jne    c001a86f <sysCallOpen(regs*)+0x49>
c001a883:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001a887:	83 ec 08             	sub    esp,0x8
c001a88a:	68 58 98 02 c0       	push   0xc0029858
c001a88f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a892:	e8 47 ff ff ff       	call   c001a7de <string_ends_with(char const*, char const*)>
c001a897:	83 c4 10             	add    esp,0x10
c001a89a:	85 c0                	test   eax,eax
c001a89c:	75 17                	jne    c001a8b5 <sysCallOpen(regs*)+0x8f>
c001a89e:	83 ec 08             	sub    esp,0x8
c001a8a1:	68 79 98 02 c0       	push   0xc0029879
c001a8a6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a8a9:	e8 30 ff ff ff       	call   c001a7de <string_ends_with(char const*, char const*)>
c001a8ae:	83 c4 10             	add    esp,0x10
c001a8b1:	85 c0                	test   eax,eax
c001a8b3:	74 51                	je     c001a906 <sysCallOpen(regs*)+0xe0>
c001a8b5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a8b8:	83 ec 08             	sub    esp,0x8
c001a8bb:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001a8c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a8c8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a8cb:	ff 30                	push   DWORD PTR [eax]
c001a8cd:	68 5d 98 02 c0       	push   0xc002985d
c001a8d2:	e8 c6 7d ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001a8d7:	c7 04 24 6c 98 02 c0 	mov    DWORD PTR [esp],0xc002986c
c001a8de:	e8 ba 7d ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001a8e3:	83 c4 10             	add    esp,0x10
c001a8e6:	81 c4 04 01 00 00    	add    esp,0x104
c001a8ec:	31 c0                	xor    eax,eax
c001a8ee:	31 d2                	xor    edx,edx
c001a8f0:	5b                   	pop    ebx
c001a8f1:	5e                   	pop    esi
c001a8f2:	c3                   	ret    
c001a8f3:	81 c4 04 01 00 00    	add    esp,0x104
c001a8f9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a8fe:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a903:	5b                   	pop    ebx
c001a904:	5e                   	pop    esi
c001a905:	c3                   	ret    
c001a906:	83 ec 08             	sub    esp,0x8
c001a909:	68 59 98 02 c0       	push   0xc0029859
c001a90e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a911:	e8 65 5e fe ff       	call   c000077b <strcmp>
c001a916:	83 c4 10             	add    esp,0x10
c001a919:	85 c0                	test   eax,eax
c001a91b:	74 98                	je     c001a8b5 <sysCallOpen(regs*)+0x8f>
c001a91d:	83 ec 08             	sub    esp,0x8
c001a920:	68 58 98 02 c0       	push   0xc0029858
c001a925:	56                   	push   esi
c001a926:	e8 b3 fe ff ff       	call   c001a7de <string_ends_with(char const*, char const*)>
c001a92b:	83 c4 10             	add    esp,0x10
c001a92e:	85 c0                	test   eax,eax
c001a930:	75 83                	jne    c001a8b5 <sysCallOpen(regs*)+0x8f>
c001a932:	83 ec 08             	sub    esp,0x8
c001a935:	68 7e 98 02 c0       	push   0xc002987e
c001a93a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a93d:	e8 9c fe ff ff       	call   c001a7de <string_ends_with(char const*, char const*)>
c001a942:	83 c4 10             	add    esp,0x10
c001a945:	85 c0                	test   eax,eax
c001a947:	0f 85 d9 00 00 00    	jne    c001aa26 <sysCallOpen(regs*)+0x200>
c001a94d:	83 ec 08             	sub    esp,0x8
c001a950:	68 83 98 02 c0       	push   0xc0029883
c001a955:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a958:	e8 81 fe ff ff       	call   c001a7de <string_ends_with(char const*, char const*)>
c001a95d:	83 c4 10             	add    esp,0x10
c001a960:	85 c0                	test   eax,eax
c001a962:	0f 85 be 00 00 00    	jne    c001aa26 <sysCallOpen(regs*)+0x200>
c001a968:	83 ec 08             	sub    esp,0x8
c001a96b:	68 7f 98 02 c0       	push   0xc002987f
c001a970:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a973:	e8 03 5e fe ff       	call   c000077b <strcmp>
c001a978:	83 c4 10             	add    esp,0x10
c001a97b:	85 c0                	test   eax,eax
c001a97d:	0f 84 a3 00 00 00    	je     c001aa26 <sysCallOpen(regs*)+0x200>
c001a983:	83 ec 08             	sub    esp,0x8
c001a986:	68 7e 98 02 c0       	push   0xc002987e
c001a98b:	56                   	push   esi
c001a98c:	e8 4d fe ff ff       	call   c001a7de <string_ends_with(char const*, char const*)>
c001a991:	83 c4 10             	add    esp,0x10
c001a994:	85 c0                	test   eax,eax
c001a996:	0f 85 8a 00 00 00    	jne    c001aa26 <sysCallOpen(regs*)+0x200>
c001a99c:	83 ec 0c             	sub    esp,0xc
c001a99f:	68 14 01 00 00       	push   0x114
c001a9a4:	e8 27 4b ff ff       	call   c000f4d0 <malloc>
c001a9a9:	83 c4 0c             	add    esp,0xc
c001a9ac:	89 c6                	mov    esi,eax
c001a9ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9b3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a9b6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a9b9:	56                   	push   esi
c001a9ba:	e8 0d 82 ff ff       	call   c0012bcc <File::File(char const*, Process*)>
c001a9bf:	83 c4 10             	add    esp,0x10
c001a9c2:	85 f6                	test   esi,esi
c001a9c4:	0f 84 29 ff ff ff    	je     c001a8f3 <sysCallOpen(regs*)+0xcd>
c001a9ca:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001a9cd:	0f b6 c2             	movzx  eax,dl
c001a9d0:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001a9d3:	89 d0                	mov    eax,edx
c001a9d5:	83 e0 01             	and    eax,0x1
c001a9d8:	f6 c2 02             	test   dl,0x2
c001a9db:	74 03                	je     c001a9e0 <sysCallOpen(regs*)+0x1ba>
c001a9dd:	83 c8 02             	or     eax,0x2
c001a9e0:	f6 c2 04             	test   dl,0x4
c001a9e3:	74 03                	je     c001a9e8 <sysCallOpen(regs*)+0x1c2>
c001a9e5:	83 c8 04             	or     eax,0x4
c001a9e8:	f6 c2 08             	test   dl,0x8
c001a9eb:	74 03                	je     c001a9f0 <sysCallOpen(regs*)+0x1ca>
c001a9ed:	83 c8 0a             	or     eax,0xa
c001a9f0:	83 e2 10             	and    edx,0x10
c001a9f3:	74 03                	je     c001a9f8 <sysCallOpen(regs*)+0x1d2>
c001a9f5:	83 c8 12             	or     eax,0x12
c001a9f8:	83 ec 08             	sub    esp,0x8
c001a9fb:	50                   	push   eax
c001a9fc:	56                   	push   esi
c001a9fd:	e8 2e 82 ff ff       	call   c0012c30 <File::open(FileOpenMode)>
c001aa02:	83 c4 10             	add    esp,0x10
c001aa05:	85 c0                	test   eax,eax
c001aa07:	0f 85 e6 fe ff ff    	jne    c001a8f3 <sysCallOpen(regs*)+0xcd>
c001aa0d:	83 ec 0c             	sub    esp,0xc
c001aa10:	56                   	push   esi
c001aa11:	e8 4c 68 ff ff       	call   c0011262 <UnixFile::getFileDescriptor()>
c001aa16:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001aa19:	89 02                	mov    DWORD PTR [edx],eax
c001aa1b:	c1 f8 1f             	sar    eax,0x1f
c001aa1e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001aa21:	e9 bd fe ff ff       	jmp    c001a8e3 <sysCallOpen(regs*)+0xbd>
c001aa26:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aa29:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001aa2f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001aa36:	e9 ab fe ff ff       	jmp    c001a8e6 <sysCallOpen(regs*)+0xc0>

c001aa3b <setupSystemCalls()>:
c001aa3b:	c7 05 e0 c5 02 c0 4c 9c 01 c0 	mov    DWORD PTR ds:0xc002c5e0,0xc0019c4c
c001aa45:	c7 05 e4 c5 02 c0 20 9a 01 c0 	mov    DWORD PTR ds:0xc002c5e4,0xc0019a20
c001aa4f:	c7 05 e8 c5 02 c0 73 9b 01 c0 	mov    DWORD PTR ds:0xc002c5e8,0xc0019b73
c001aa59:	c7 05 ec c5 02 c0 e4 9b 01 c0 	mov    DWORD PTR ds:0xc002c5ec,0xc0019be4
c001aa63:	c7 05 f0 c5 02 c0 0b 9b 01 c0 	mov    DWORD PTR ds:0xc002c5f0,0xc0019b0b
c001aa6d:	c7 05 f4 c5 02 c0 57 9a 01 c0 	mov    DWORD PTR ds:0xc002c5f4,0xc0019a57
c001aa77:	c7 05 f8 c5 02 c0 38 9a 01 c0 	mov    DWORD PTR ds:0xc002c5f8,0xc0019a38
c001aa81:	c7 05 fc c5 02 c0 c8 9b 01 c0 	mov    DWORD PTR ds:0xc002c5fc,0xc0019bc8
c001aa8b:	c7 05 04 c6 02 c0 5e a1 01 c0 	mov    DWORD PTR ds:0xc002c604,0xc001a15e
c001aa95:	c7 05 00 c6 02 c0 26 a8 01 c0 	mov    DWORD PTR ds:0xc002c600,0xc001a826
c001aa9f:	c7 05 08 c6 02 c0 e6 a1 01 c0 	mov    DWORD PTR ds:0xc002c608,0xc001a1e6
c001aaa9:	c7 05 0c c6 02 c0 4d 9e 01 c0 	mov    DWORD PTR ds:0xc002c60c,0xc0019e4d
c001aab3:	c7 05 10 c6 02 c0 87 9c 01 c0 	mov    DWORD PTR ds:0xc002c610,0xc0019c87
c001aabd:	c7 05 14 c6 02 c0 8c 9c 01 c0 	mov    DWORD PTR ds:0xc002c614,0xc0019c8c
c001aac7:	c7 05 18 c6 02 c0 c1 a2 01 c0 	mov    DWORD PTR ds:0xc002c618,0xc001a2c1
c001aad1:	c7 05 1c c6 02 c0 5b a2 01 c0 	mov    DWORD PTR ds:0xc002c61c,0xc001a25b
c001aadb:	c7 05 20 c6 02 c0 35 9f 01 c0 	mov    DWORD PTR ds:0xc002c620,0xc0019f35
c001aae5:	c7 05 24 c6 02 c0 9e 9f 01 c0 	mov    DWORD PTR ds:0xc002c624,0xc0019f9e
c001aaef:	c7 05 28 c6 02 c0 1b a0 01 c0 	mov    DWORD PTR ds:0xc002c628,0xc001a01b
c001aaf9:	c7 05 2c c6 02 c0 91 9c 01 c0 	mov    DWORD PTR ds:0xc002c62c,0xc0019c91
c001ab03:	c7 05 30 c6 02 c0 31 a3 01 c0 	mov    DWORD PTR ds:0xc002c630,0xc001a331
c001ab0d:	c7 05 34 c6 02 c0 4b a3 01 c0 	mov    DWORD PTR ds:0xc002c634,0xc001a34b
c001ab17:	c7 05 38 c6 02 c0 4b a3 01 c0 	mov    DWORD PTR ds:0xc002c638,0xc001a34b
c001ab21:	c7 05 3c c6 02 c0 8c a3 01 c0 	mov    DWORD PTR ds:0xc002c63c,0xc001a38c
c001ab2b:	c7 05 40 c6 02 c0 f0 a3 01 c0 	mov    DWORD PTR ds:0xc002c640,0xc001a3f0
c001ab35:	c7 05 44 c6 02 c0 9b 9c 01 c0 	mov    DWORD PTR ds:0xc002c644,0xc0019c9b
c001ab3f:	c7 05 48 c6 02 c0 54 a4 01 c0 	mov    DWORD PTR ds:0xc002c648,0xc001a454
c001ab49:	c7 05 4c c6 02 c0 0a 9e 01 c0 	mov    DWORD PTR ds:0xc002c64c,0xc0019e0a
c001ab53:	c7 05 50 c6 02 c0 a0 a4 01 c0 	mov    DWORD PTR ds:0xc002c650,0xc001a4a0
c001ab5d:	c7 05 54 c6 02 c0 db 9e 01 c0 	mov    DWORD PTR ds:0xc002c654,0xc0019edb
c001ab67:	c7 05 58 c6 02 c0 75 a5 01 c0 	mov    DWORD PTR ds:0xc002c658,0xc001a575
c001ab71:	c7 05 5c c6 02 c0 9e a0 01 c0 	mov    DWORD PTR ds:0xc002c65c,0xc001a09e
c001ab7b:	c7 05 60 c6 02 c0 9c a5 01 c0 	mov    DWORD PTR ds:0xc002c660,0xc001a59c
c001ab85:	c7 05 64 c6 02 c0 23 a5 01 c0 	mov    DWORD PTR ds:0xc002c664,0xc001a523
c001ab8f:	c7 05 68 c6 02 c0 f4 a5 01 c0 	mov    DWORD PTR ds:0xc002c668,0xc001a5f4
c001ab99:	c7 05 6c c6 02 c0 ab 9c 01 c0 	mov    DWORD PTR ds:0xc002c66c,0xc0019cab
c001aba3:	c7 05 70 c6 02 c0 15 9d 01 c0 	mov    DWORD PTR ds:0xc002c670,0xc0019d15
c001abad:	c7 05 74 c6 02 c0 5b 9d 01 c0 	mov    DWORD PTR ds:0xc002c674,0xc0019d5b
c001abb7:	c7 05 78 c6 02 c0 13 a7 01 c0 	mov    DWORD PTR ds:0xc002c678,0xc001a713
c001abc1:	c7 05 7c c6 02 c0 66 a3 01 c0 	mov    DWORD PTR ds:0xc002c67c,0xc001a366
c001abcb:	c7 05 80 c6 02 c0 ac 9d 01 c0 	mov    DWORD PTR ds:0xc002c680,0xc0019dac
c001abd5:	c7 05 84 c6 02 c0 85 a7 01 c0 	mov    DWORD PTR ds:0xc002c684,0xc001a785
c001abdf:	c7 05 88 c6 02 c0 ca a7 01 c0 	mov    DWORD PTR ds:0xc002c688,0xc001a7ca
c001abe9:	c7 05 8c c6 02 c0 63 9a 01 c0 	mov    DWORD PTR ds:0xc002c68c,0xc0019a63
c001abf3:	c3                   	ret    

c001abf4 <systemCall(regs*, void*)>:
c001abf4:	53                   	push   ebx
c001abf5:	83 ec 08             	sub    esp,0x8
c001abf8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001abfc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001abff:	83 f8 7f             	cmp    eax,0x7f
c001ac02:	77 16                	ja     c001ac1a <systemCall(regs*, void*)+0x26>
c001ac04:	8b 14 85 e0 c5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3a20]
c001ac0b:	85 d2                	test   edx,edx
c001ac0d:	74 0b                	je     c001ac1a <systemCall(regs*, void*)+0x26>
c001ac0f:	83 ec 0c             	sub    esp,0xc
c001ac12:	53                   	push   ebx
c001ac13:	ff d2                	call   edx
c001ac15:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ac18:	eb 0d                	jmp    c001ac27 <systemCall(regs*, void*)+0x33>
c001ac1a:	52                   	push   edx
c001ac1b:	52                   	push   edx
c001ac1c:	50                   	push   eax
c001ac1d:	68 88 98 02 c0       	push   0xc0029888
c001ac22:	e8 76 7a ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001ac27:	83 c4 10             	add    esp,0x10
c001ac2a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ac2f:	31 d2                	xor    edx,edx
c001ac31:	83 c4 08             	add    esp,0x8
c001ac34:	5b                   	pop    ebx
c001ac35:	c3                   	ret    

c001ac36 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001ac36:	55                   	push   ebp
c001ac37:	89 e5                	mov    ebp,esp
c001ac39:	57                   	push   edi
c001ac3a:	56                   	push   esi
c001ac3b:	53                   	push   ebx
c001ac3c:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001ac42:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001ac45:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001ac48:	85 c0                	test   eax,eax
c001ac4a:	0f 95 c1             	setne  cl
c001ac4d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001ac51:	0f 94 c2             	sete   dl
c001ac54:	84 d1                	test   cl,dl
c001ac56:	74 26                	je     c001ac7e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001ac58:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001ac5f:	74 1d                	je     c001ac7e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001ac61:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ac64:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001ac6a:	89 d6                	mov    esi,edx
c001ac6c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001ac72:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001ac78:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001ac7b:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001ac7e:	83 ec 0c             	sub    esp,0xc
c001ac81:	05 ff 0f 00 00       	add    eax,0xfff
c001ac86:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001ac89:	6a 01                	push   0x1
c001ac8b:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001ac91:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001ac97:	e8 11 6a ff ff       	call   c00116ad <Virt::allocateKernelVirtualPages(int)>
c001ac9c:	83 c4 10             	add    esp,0x10
c001ac9f:	89 c6                	mov    esi,eax
c001aca1:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001aca7:	0f 86 21 01 00 00    	jbe    c001adce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001acad:	c1 eb 0c             	shr    ebx,0xc
c001acb0:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001acba:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001acc0:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001acc3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001acc6:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001accc:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001accf:	29 d8                	sub    eax,ebx
c001acd1:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001acd7:	0f 83 f4 00 00 00    	jae    c001add1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001acdd:	83 ec 0c             	sub    esp,0xc
c001ace0:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001ace6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001ace9:	3d 00 10 00 00       	cmp    eax,0x1000
c001acee:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001acf0:	52                   	push   edx
c001acf1:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001acf7:	52                   	push   edx
c001acf8:	76 05                	jbe    c001acff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001acfa:	b8 00 10 00 00       	mov    eax,0x1000
c001acff:	31 d2                	xor    edx,edx
c001ad01:	52                   	push   edx
c001ad02:	50                   	push   eax
c001ad03:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001ad06:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ad09:	83 c4 20             	add    esp,0x20
c001ad0c:	85 c0                	test   eax,eax
c001ad0e:	74 1f                	je     c001ad2f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001ad10:	51                   	push   ecx
c001ad11:	51                   	push   ecx
c001ad12:	50                   	push   eax
c001ad13:	68 9c 98 02 c0       	push   0xc002989c
c001ad18:	e8 80 79 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001ad1d:	89 34 24             	mov    DWORD PTR [esp],esi
c001ad20:	e8 ec 6c ff ff       	call   c0011a11 <Virt::freeKernelVirtualPages(unsigned long)>
c001ad25:	83 c4 10             	add    esp,0x10
c001ad28:	31 c0                	xor    eax,eax
c001ad2a:	e9 7c 01 00 00       	jmp    c001aeab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001ad2f:	e8 f3 14 00 00       	call   c001c227 <lockScheduler()>
c001ad34:	e8 41 4d ff ff       	call   c000fa7a <Phys::allocatePage()>
c001ad39:	6a 07                	push   0x7
c001ad3b:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001ad41:	56                   	push   esi
c001ad42:	50                   	push   eax
c001ad43:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ad49:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001ad4c:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001ad52:	e8 21 70 ff ff       	call   c0011d78 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ad57:	83 c4 0c             	add    esp,0xc
c001ad5a:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001ad60:	6a 00                	push   0x0
c001ad62:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ad68:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001ad6b:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001ad71:	e8 6c 6e ff ff       	call   c0011be2 <VAS::mapOtherVASIn(bool, VAS*)>
c001ad76:	58                   	pop    eax
c001ad77:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001ad7d:	5a                   	pop    edx
c001ad7e:	68 07 04 00 00       	push   0x407
c001ad83:	53                   	push   ebx
c001ad84:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ad8a:	50                   	push   eax
c001ad8b:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001ad91:	6a 00                	push   0x0
c001ad93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad98:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad9b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ada1:	e8 8c 73 ff ff       	call   c0012132 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ada6:	83 c4 1c             	add    esp,0x1c
c001ada9:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001adaf:	68 00 10 00 00       	push   0x1000
c001adb4:	50                   	push   eax
c001adb5:	56                   	push   esi
c001adb6:	e8 9a 58 fe ff       	call   c0000655 <memcpy>
c001adbb:	e8 69 14 00 00       	call   c001c229 <unlockScheduler()>
c001adc0:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001adc6:	83 c4 10             	add    esp,0x10
c001adc9:	e9 f5 fe ff ff       	jmp    c001acc3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001adce:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001add1:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001addb:	0f 86 bc 00 00 00    	jbe    c001ae9d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001ade1:	e8 41 14 00 00       	call   c001c227 <lockScheduler()>
c001ade6:	51                   	push   ecx
c001ade7:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001aded:	6a 00                	push   0x0
c001adef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001adf4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001adf7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001adfd:	e8 e0 6d ff ff       	call   c0011be2 <VAS::mapOtherVASIn(bool, VAS*)>
c001ae02:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001ae08:	83 c4 10             	add    esp,0x10
c001ae0b:	c1 e8 0c             	shr    eax,0xc
c001ae0e:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001ae18:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001ae1e:	e8 57 4c ff ff       	call   c000fa7a <Phys::allocatePage()>
c001ae23:	6a 07                	push   0x7
c001ae25:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001ae2b:	56                   	push   esi
c001ae2c:	50                   	push   eax
c001ae2d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ae33:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001ae36:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001ae3c:	e8 37 6f ff ff       	call   c0011d78 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ae41:	58                   	pop    eax
c001ae42:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001ae48:	5a                   	pop    edx
c001ae49:	68 07 04 00 00       	push   0x407
c001ae4e:	53                   	push   ebx
c001ae4f:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ae55:	50                   	push   eax
c001ae56:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001ae5c:	6a 00                	push   0x0
c001ae5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae63:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae66:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ae6c:	e8 c1 72 ff ff       	call   c0012132 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ae71:	83 c4 1c             	add    esp,0x1c
c001ae74:	68 00 10 00 00       	push   0x1000
c001ae79:	6a 00                	push   0x0
c001ae7b:	56                   	push   esi
c001ae7c:	e8 0a 58 fe ff       	call   c000068b <memset>
c001ae81:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001ae87:	83 c4 10             	add    esp,0x10
c001ae8a:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001ae90:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001ae96:	77 86                	ja     c001ae1e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001ae98:	e8 8c 13 00 00       	call   c001c229 <unlockScheduler()>
c001ae9d:	83 ec 0c             	sub    esp,0xc
c001aea0:	56                   	push   esi
c001aea1:	e8 6b 6b ff ff       	call   c0011a11 <Virt::freeKernelVirtualPages(unsigned long)>
c001aea6:	83 c4 10             	add    esp,0x10
c001aea9:	b0 01                	mov    al,0x1
c001aeab:	8d 65 f4             	lea    esp,[ebp-0xc]
c001aeae:	5b                   	pop    ebx
c001aeaf:	5e                   	pop    esi
c001aeb0:	5f                   	pop    edi
c001aeb1:	5d                   	pop    ebp
c001aeb2:	c3                   	ret    

c001aeb3 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001aeb3:	55                   	push   ebp
c001aeb4:	57                   	push   edi
c001aeb5:	56                   	push   esi
c001aeb6:	53                   	push   ebx
c001aeb7:	83 ec 48             	sub    esp,0x48
c001aeba:	68 14 01 00 00       	push   0x114
c001aebf:	e8 0c 46 ff ff       	call   c000f4d0 <malloc>
c001aec4:	83 c4 0c             	add    esp,0xc
c001aec7:	89 c6                	mov    esi,eax
c001aec9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001aecd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001aed1:	50                   	push   eax
c001aed2:	e8 f5 7c ff ff       	call   c0012bcc <File::File(char const*, Process*)>
c001aed7:	58                   	pop    eax
c001aed8:	5a                   	pop    edx
c001aed9:	6a 01                	push   0x1
c001aedb:	56                   	push   esi
c001aedc:	e8 4f 7d ff ff       	call   c0012c30 <File::open(FileOpenMode)>
c001aee1:	83 c4 10             	add    esp,0x10
c001aee4:	85 c0                	test   eax,eax
c001aee6:	0f 85 47 01 00 00    	jne    c001b033 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001aeec:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001aef4:	83 ec 0c             	sub    esp,0xc
c001aef7:	6a 34                	push   0x34
c001aef9:	e8 d2 45 ff ff       	call   c000f4d0 <malloc>
c001aefe:	89 c3                	mov    ebx,eax
c001af00:	58                   	pop    eax
c001af01:	8b 06                	mov    eax,DWORD PTR [esi]
c001af03:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001af07:	57                   	push   edi
c001af08:	53                   	push   ebx
c001af09:	6a 00                	push   0x0
c001af0b:	6a 34                	push   0x34
c001af0d:	56                   	push   esi
c001af0e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af11:	83 c4 20             	add    esp,0x20
c001af14:	85 c0                	test   eax,eax
c001af16:	0f 85 17 01 00 00    	jne    c001b033 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001af1c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001af22:	0f 85 0b 01 00 00    	jne    c001b033 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001af28:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001af2b:	85 c0                	test   eax,eax
c001af2d:	0f 84 00 01 00 00    	je     c001b033 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001af33:	31 d2                	xor    edx,edx
c001af35:	55                   	push   ebp
c001af36:	52                   	push   edx
c001af37:	50                   	push   eax
c001af38:	56                   	push   esi
c001af39:	e8 b0 7d ff ff       	call   c0012cee <File::seek(unsigned long long)>
c001af3e:	83 c4 10             	add    esp,0x10
c001af41:	85 c0                	test   eax,eax
c001af43:	0f 85 ea 00 00 00    	jne    c001b033 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001af49:	83 ec 0c             	sub    esp,0xc
c001af4c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001af4f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001af53:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001af57:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001af5b:	0f af c2             	imul   eax,edx
c001af5e:	50                   	push   eax
c001af5f:	e8 6c 45 ff ff       	call   c000f4d0 <malloc>
c001af64:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001af66:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001af6d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001af71:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001af75:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001af79:	0f af c2             	imul   eax,edx
c001af7c:	99                   	cdq    
c001af7d:	52                   	push   edx
c001af7e:	50                   	push   eax
c001af7f:	56                   	push   esi
c001af80:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af83:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001af86:	83 c4 20             	add    esp,0x20
c001af89:	85 c0                	test   eax,eax
c001af8b:	0f 84 a2 00 00 00    	je     c001b033 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001af91:	31 d2                	xor    edx,edx
c001af93:	51                   	push   ecx
c001af94:	52                   	push   edx
c001af95:	50                   	push   eax
c001af96:	56                   	push   esi
c001af97:	e8 52 7d ff ff       	call   c0012cee <File::seek(unsigned long long)>
c001af9c:	83 c4 10             	add    esp,0x10
c001af9f:	85 c0                	test   eax,eax
c001afa1:	0f 85 8c 00 00 00    	jne    c001b033 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001afa7:	83 ec 0c             	sub    esp,0xc
c001afaa:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001afae:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001afb2:	31 ed                	xor    ebp,ebp
c001afb4:	0f af c2             	imul   eax,edx
c001afb7:	50                   	push   eax
c001afb8:	e8 13 45 ff ff       	call   c000f4d0 <malloc>
c001afbd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001afbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001afc3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001afc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001afca:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001afce:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001afd2:	0f af c2             	imul   eax,edx
c001afd5:	99                   	cdq    
c001afd6:	52                   	push   edx
c001afd7:	50                   	push   eax
c001afd8:	56                   	push   esi
c001afd9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001afdc:	83 c4 20             	add    esp,0x20
c001afdf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001afe7:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001afeb:	0f 86 80 00 00 00    	jbe    c001b071 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001aff1:	0f b7 fd             	movzx  edi,bp
c001aff4:	c1 e7 05             	shl    edi,0x5
c001aff7:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001affb:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001affe:	75 6b                	jne    c001b06b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001b000:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001b003:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b007:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001b00a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b00e:	52                   	push   edx
c001b00f:	31 d2                	xor    edx,edx
c001b011:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001b014:	52                   	push   edx
c001b015:	50                   	push   eax
c001b016:	56                   	push   esi
c001b017:	e8 d2 7c ff ff       	call   c0012cee <File::seek(unsigned long long)>
c001b01c:	83 c4 10             	add    esp,0x10
c001b01f:	85 c0                	test   eax,eax
c001b021:	74 17                	je     c001b03a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001b023:	83 ec 0c             	sub    esp,0xc
c001b026:	68 c7 98 02 c0       	push   0xc00298c7
c001b02b:	e8 6d 76 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001b030:	83 c4 10             	add    esp,0x10
c001b033:	31 c0                	xor    eax,eax
c001b035:	e9 87 00 00 00       	jmp    c001b0c1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001b03a:	83 ec 0c             	sub    esp,0xc
c001b03d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001b040:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001b043:	50                   	push   eax
c001b044:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b048:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b04c:	56                   	push   esi
c001b04d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001b051:	e8 e0 fb ff ff       	call   c001ac36 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001b056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b05a:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001b05e:	83 c4 20             	add    esp,0x20
c001b061:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001b065:	73 04                	jae    c001b06b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001b067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b06b:	45                   	inc    ebp
c001b06c:	e9 76 ff ff ff       	jmp    c001afe7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001b071:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001b075:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b079:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b07d:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001b083:	83 ec 0c             	sub    esp,0xc
c001b086:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001b08c:	25 00 f0 ff ff       	and    eax,0xfffff000
c001b091:	05 00 10 00 00       	add    eax,0x1000
c001b096:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b099:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b09d:	e8 3e 44 ff ff       	call   c000f4e0 <free>
c001b0a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b0a5:	e8 36 44 ff ff       	call   c000f4e0 <free>
c001b0aa:	58                   	pop    eax
c001b0ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b0af:	e8 2c 44 ff ff       	call   c000f4e0 <free>
c001b0b4:	89 34 24             	mov    DWORD PTR [esp],esi
c001b0b7:	e8 d2 7b ff ff       	call   c0012c8e <File::close()>
c001b0bc:	83 c4 10             	add    esp,0x10
c001b0bf:	b0 01                	mov    al,0x1
c001b0c1:	83 c4 3c             	add    esp,0x3c
c001b0c4:	5b                   	pop    ebx
c001b0c5:	5e                   	pop    esi
c001b0c6:	5f                   	pop    edi
c001b0c7:	5d                   	pop    ebp
c001b0c8:	c3                   	ret    

c001b0c9 <Thr::runtimeReferenceHelper()>:
c001b0c9:	83 ec 18             	sub    esp,0x18
c001b0cc:	68 cf 98 02 c0       	push   0xc00298cf
c001b0d1:	e8 c7 75 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001b0d6:	fa                   	cli    
c001b0d7:	83 c4 10             	add    esp,0x10
c001b0da:	eb fe                	jmp    c001b0da <Thr::runtimeReferenceHelper()+0x11>

c001b0dc <Thr::getAddressOfKernelSymbol(char const*)>:
c001b0dc:	57                   	push   edi
c001b0dd:	56                   	push   esi
c001b0de:	53                   	push   ebx
c001b0df:	31 db                	xor    ebx,ebx
c001b0e1:	39 1d 80 cf 02 c0    	cmp    DWORD PTR ds:0xc002cf80,ebx
c001b0e7:	7e 3c                	jle    c001b125 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001b0e9:	8b 34 9d 00 cf 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd3100]
c001b0f0:	31 ff                	xor    edi,edi
c001b0f2:	39 3c 9d 00 ce 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3200],edi
c001b0f9:	7e 27                	jle    c001b122 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001b0fb:	50                   	push   eax
c001b0fc:	50                   	push   eax
c001b0fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b101:	8b 06                	mov    eax,DWORD PTR [esi]
c001b103:	03 04 9d 80 ce 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3180]
c001b10a:	50                   	push   eax
c001b10b:	e8 6b 56 fe ff       	call   c000077b <strcmp>
c001b110:	83 c4 10             	add    esp,0x10
c001b113:	85 c0                	test   eax,eax
c001b115:	75 05                	jne    c001b11c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001b117:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001b11a:	eb 0b                	jmp    c001b127 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001b11c:	83 c6 10             	add    esi,0x10
c001b11f:	47                   	inc    edi
c001b120:	eb d0                	jmp    c001b0f2 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001b122:	43                   	inc    ebx
c001b123:	eb bc                	jmp    c001b0e1 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001b125:	31 c0                	xor    eax,eax
c001b127:	5b                   	pop    ebx
c001b128:	5e                   	pop    esi
c001b129:	5f                   	pop    edi
c001b12a:	c3                   	ret    

c001b12b <Thr::loadKernelSymbolTable(char const*)>:
c001b12b:	55                   	push   ebp
c001b12c:	57                   	push   edi
c001b12d:	56                   	push   esi
c001b12e:	53                   	push   ebx
c001b12f:	83 ec 68             	sub    esp,0x68
c001b132:	8b 35 d4 cf 02 c0    	mov    esi,DWORD PTR ds:0xc002cfd4
c001b138:	68 14 01 00 00       	push   0x114
c001b13d:	e8 8e 43 ff ff       	call   c000f4d0 <malloc>
c001b142:	83 c4 0c             	add    esp,0xc
c001b145:	89 c3                	mov    ebx,eax
c001b147:	56                   	push   esi
c001b148:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001b14c:	50                   	push   eax
c001b14d:	e8 7a 7a ff ff       	call   c0012bcc <File::File(char const*, Process*)>
c001b152:	5e                   	pop    esi
c001b153:	5f                   	pop    edi
c001b154:	6a 01                	push   0x1
c001b156:	53                   	push   ebx
c001b157:	e8 d4 7a ff ff       	call   c0012c30 <File::open(FileOpenMode)>
c001b15c:	83 c4 10             	add    esp,0x10
c001b15f:	31 d2                	xor    edx,edx
c001b161:	85 c0                	test   eax,eax
c001b163:	0f 85 74 02 00 00    	jne    c001b3dd <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001b169:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001b171:	83 ec 0c             	sub    esp,0xc
c001b174:	6a 34                	push   0x34
c001b176:	e8 55 43 ff ff       	call   c000f4d0 <malloc>
c001b17b:	59                   	pop    ecx
c001b17c:	89 c7                	mov    edi,eax
c001b17e:	8d 74 24 34          	lea    esi,[esp+0x34]
c001b182:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b184:	56                   	push   esi
c001b185:	57                   	push   edi
c001b186:	6a 00                	push   0x0
c001b188:	6a 34                	push   0x34
c001b18a:	53                   	push   ebx
c001b18b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b18e:	83 c4 20             	add    esp,0x20
c001b191:	85 c0                	test   eax,eax
c001b193:	74 17                	je     c001b1ac <Thr::loadKernelSymbolTable(char const*)+0x81>
c001b195:	83 ec 0c             	sub    esp,0xc
c001b198:	68 f1 98 02 c0       	push   0xc00298f1
c001b19d:	e8 3f e0 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001b1a2:	83 c4 10             	add    esp,0x10
c001b1a5:	31 d2                	xor    edx,edx
c001b1a7:	e9 31 02 00 00       	jmp    c001b3dd <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001b1ac:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001b1b2:	75 e1                	jne    c001b195 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b1b4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001b1b7:	85 c0                	test   eax,eax
c001b1b9:	74 da                	je     c001b195 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b1bb:	52                   	push   edx
c001b1bc:	31 d2                	xor    edx,edx
c001b1be:	52                   	push   edx
c001b1bf:	50                   	push   eax
c001b1c0:	53                   	push   ebx
c001b1c1:	e8 28 7b ff ff       	call   c0012cee <File::seek(unsigned long long)>
c001b1c6:	83 c4 10             	add    esp,0x10
c001b1c9:	85 c0                	test   eax,eax
c001b1cb:	75 c8                	jne    c001b195 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b1cd:	83 ec 0c             	sub    esp,0xc
c001b1d0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b1d4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b1d8:	31 ed                	xor    ebp,ebp
c001b1da:	0f af c2             	imul   eax,edx
c001b1dd:	50                   	push   eax
c001b1de:	e8 ed 42 ff ff       	call   c000f4d0 <malloc>
c001b1e3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001b1e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b1e9:	89 34 24             	mov    DWORD PTR [esp],esi
c001b1ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b1f0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b1f4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b1f8:	0f af c2             	imul   eax,edx
c001b1fb:	99                   	cdq    
c001b1fc:	52                   	push   edx
c001b1fd:	50                   	push   eax
c001b1fe:	53                   	push   ebx
c001b1ff:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b202:	83 c4 20             	add    esp,0x20
c001b205:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001b20d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b215:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b21d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b225:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001b229:	0f 86 aa 00 00 00    	jbe    c001b2d9 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001b22f:	0f b7 f5             	movzx  esi,bp
c001b232:	6b f6 28             	imul   esi,esi,0x28
c001b235:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001b239:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b23c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b240:	50                   	push   eax
c001b241:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b245:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001b249:	8b 16                	mov    edx,DWORD PTR [esi]
c001b24b:	6b c0 28             	imul   eax,eax,0x28
c001b24e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001b252:	89 d0                	mov    eax,edx
c001b254:	31 d2                	xor    edx,edx
c001b256:	52                   	push   edx
c001b257:	50                   	push   eax
c001b258:	53                   	push   ebx
c001b259:	e8 90 7a ff ff       	call   c0012cee <File::seek(unsigned long long)>
c001b25e:	83 c4 0c             	add    esp,0xc
c001b261:	6a 20                	push   0x20
c001b263:	6a 00                	push   0x0
c001b265:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001b269:	52                   	push   edx
c001b26a:	e8 1c 54 fe ff       	call   c000068b <memset>
c001b26f:	58                   	pop    eax
c001b270:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b272:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001b276:	51                   	push   ecx
c001b277:	8d 54 24 40          	lea    edx,[esp+0x40]
c001b27b:	52                   	push   edx
c001b27c:	6a 00                	push   0x0
c001b27e:	6a 1f                	push   0x1f
c001b280:	53                   	push   ebx
c001b281:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b284:	83 c4 18             	add    esp,0x18
c001b287:	68 08 99 02 c0       	push   0xc0029908
c001b28c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001b290:	52                   	push   edx
c001b291:	e8 e5 54 fe ff       	call   c000077b <strcmp>
c001b296:	83 c4 10             	add    esp,0x10
c001b299:	85 c0                	test   eax,eax
c001b29b:	75 0f                	jne    c001b2ac <Thr::loadKernelSymbolTable(char const*)+0x181>
c001b29d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b2a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b2ac:	50                   	push   eax
c001b2ad:	50                   	push   eax
c001b2ae:	68 10 99 02 c0       	push   0xc0029910
c001b2b3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b2b7:	50                   	push   eax
c001b2b8:	e8 be 54 fe ff       	call   c000077b <strcmp>
c001b2bd:	83 c4 10             	add    esp,0x10
c001b2c0:	85 c0                	test   eax,eax
c001b2c2:	75 0f                	jne    c001b2d3 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001b2c4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b2c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b2cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b2d3:	45                   	inc    ebp
c001b2d4:	e9 4c ff ff ff       	jmp    c001b225 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001b2d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b2de:	75 10                	jne    c001b2f0 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001b2e0:	83 ec 0c             	sub    esp,0xc
c001b2e3:	68 18 99 02 c0       	push   0xc0029918
c001b2e8:	e8 f4 de ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001b2ed:	83 c4 10             	add    esp,0x10
c001b2f0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001b2f5:	75 10                	jne    c001b307 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001b2f7:	83 ec 0c             	sub    esp,0xc
c001b2fa:	68 18 99 02 c0       	push   0xc0029918
c001b2ff:	e8 dd de ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001b304:	83 c4 10             	add    esp,0x10
c001b307:	31 d2                	xor    edx,edx
c001b309:	50                   	push   eax
c001b30a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b30e:	52                   	push   edx
c001b30f:	50                   	push   eax
c001b310:	53                   	push   ebx
c001b311:	e8 d8 79 ff ff       	call   c0012cee <File::seek(unsigned long long)>
c001b316:	5a                   	pop    edx
c001b317:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b31b:	e8 b0 41 ff ff       	call   c000f4d0 <malloc>
c001b320:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b324:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b328:	31 c9                	xor    ecx,ecx
c001b32a:	5e                   	pop    esi
c001b32b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b32d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001b331:	55                   	push   ebp
c001b332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b336:	51                   	push   ecx
c001b337:	52                   	push   edx
c001b338:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b33c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001b340:	53                   	push   ebx
c001b341:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b344:	83 c4 14             	add    esp,0x14
c001b347:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b34b:	e8 80 41 ff ff       	call   c000f4d0 <malloc>
c001b350:	89 c6                	mov    esi,eax
c001b352:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b354:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b357:	56                   	push   esi
c001b358:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b35c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b360:	51                   	push   ecx
c001b361:	52                   	push   edx
c001b362:	53                   	push   ebx
c001b363:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b366:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b36a:	8b 15 80 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf80
c001b370:	83 c4 1c             	add    esp,0x1c
c001b373:	c1 e8 04             	shr    eax,0x4
c001b376:	89 04 95 00 ce 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3200],eax
c001b37d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b381:	31 d2                	xor    edx,edx
c001b383:	52                   	push   edx
c001b384:	50                   	push   eax
c001b385:	53                   	push   ebx
c001b386:	e8 63 79 ff ff       	call   c0012cee <File::seek(unsigned long long)>
c001b38b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001b38d:	31 d2                	xor    edx,edx
c001b38f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b392:	56                   	push   esi
c001b393:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b397:	52                   	push   edx
c001b398:	50                   	push   eax
c001b399:	53                   	push   ebx
c001b39a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b39d:	83 c4 14             	add    esp,0x14
c001b3a0:	53                   	push   ebx
c001b3a1:	e8 e8 78 ff ff       	call   c0012c8e <File::close()>
c001b3a6:	5d                   	pop    ebp
c001b3a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b3ab:	e8 30 41 ff ff       	call   c000f4e0 <free>
c001b3b0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b3b3:	e8 28 41 ff ff       	call   c000f4e0 <free>
c001b3b8:	a1 80 cf 02 c0       	mov    eax,ds:0xc002cf80
c001b3bd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b3c1:	8d 50 01             	lea    edx,[eax+0x1]
c001b3c4:	89 0c 85 00 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3100],ecx
c001b3cb:	89 15 80 cf 02 c0    	mov    DWORD PTR ds:0xc002cf80,edx
c001b3d1:	89 34 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],esi
c001b3d8:	83 c4 10             	add    esp,0x10
c001b3db:	b2 01                	mov    dl,0x1
c001b3dd:	83 c4 5c             	add    esp,0x5c
c001b3e0:	88 d0                	mov    al,dl
c001b3e2:	5b                   	pop    ebx
c001b3e3:	5e                   	pop    esi
c001b3e4:	5f                   	pop    edi
c001b3e5:	5d                   	pop    ebp
c001b3e6:	c3                   	ret    

c001b3e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001b3e7:	55                   	push   ebp
c001b3e8:	57                   	push   edi
c001b3e9:	56                   	push   esi
c001b3ea:	53                   	push   ebx
c001b3eb:	81 ec 68 03 00 00    	sub    esp,0x368
c001b3f1:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001b3f8:	8b 1d d4 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cfd4
c001b3fe:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b402:	68 14 01 00 00       	push   0x114
c001b407:	e8 c4 40 ff ff       	call   c000f4d0 <malloc>
c001b40c:	83 c4 0c             	add    esp,0xc
c001b40f:	89 c5                	mov    ebp,eax
c001b411:	53                   	push   ebx
c001b412:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001b419:	50                   	push   eax
c001b41a:	e8 ad 77 ff ff       	call   c0012bcc <File::File(char const*, Process*)>
c001b41f:	58                   	pop    eax
c001b420:	5a                   	pop    edx
c001b421:	6a 01                	push   0x1
c001b423:	55                   	push   ebp
c001b424:	e8 07 78 ff ff       	call   c0012c30 <File::open(FileOpenMode)>
c001b429:	83 c4 10             	add    esp,0x10
c001b42c:	85 c0                	test   eax,eax
c001b42e:	0f 85 f2 06 00 00    	jne    c001bb26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b434:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b43c:	83 ec 0c             	sub    esp,0xc
c001b43f:	6a 34                	push   0x34
c001b441:	e8 8a 40 ff ff       	call   c000f4d0 <malloc>
c001b446:	89 c7                	mov    edi,eax
c001b448:	58                   	pop    eax
c001b449:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b44c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001b450:	53                   	push   ebx
c001b451:	57                   	push   edi
c001b452:	6a 00                	push   0x0
c001b454:	6a 34                	push   0x34
c001b456:	55                   	push   ebp
c001b457:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b45a:	83 c4 20             	add    esp,0x20
c001b45d:	85 c0                	test   eax,eax
c001b45f:	0f 85 c1 06 00 00    	jne    c001bb26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b465:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001b46b:	0f 85 b5 06 00 00    	jne    c001bb26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b471:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001b474:	85 c0                	test   eax,eax
c001b476:	0f 84 aa 06 00 00    	je     c001bb26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b47c:	31 d2                	xor    edx,edx
c001b47e:	56                   	push   esi
c001b47f:	52                   	push   edx
c001b480:	50                   	push   eax
c001b481:	55                   	push   ebp
c001b482:	e8 67 78 ff ff       	call   c0012cee <File::seek(unsigned long long)>
c001b487:	83 c4 10             	add    esp,0x10
c001b48a:	85 c0                	test   eax,eax
c001b48c:	0f 85 94 06 00 00    	jne    c001bb26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b492:	83 ec 0c             	sub    esp,0xc
c001b495:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001b498:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b49c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001b4a0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b4a4:	0f af c2             	imul   eax,edx
c001b4a7:	50                   	push   eax
c001b4a8:	e8 23 40 ff ff       	call   c000f4d0 <malloc>
c001b4ad:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b4b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b4b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b4b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4bb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b4bf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b4c3:	0f af c2             	imul   eax,edx
c001b4c6:	99                   	cdq    
c001b4c7:	52                   	push   edx
c001b4c8:	50                   	push   eax
c001b4c9:	55                   	push   ebp
c001b4ca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b4cd:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001b4d0:	83 c4 20             	add    esp,0x20
c001b4d3:	85 c0                	test   eax,eax
c001b4d5:	0f 84 4b 06 00 00    	je     c001bb26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b4db:	31 d2                	xor    edx,edx
c001b4dd:	51                   	push   ecx
c001b4de:	52                   	push   edx
c001b4df:	50                   	push   eax
c001b4e0:	55                   	push   ebp
c001b4e1:	e8 08 78 ff ff       	call   c0012cee <File::seek(unsigned long long)>
c001b4e6:	83 c4 10             	add    esp,0x10
c001b4e9:	85 c0                	test   eax,eax
c001b4eb:	0f 85 35 06 00 00    	jne    c001bb26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b4f1:	83 ec 0c             	sub    esp,0xc
c001b4f4:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001b4f8:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001b4fc:	31 f6                	xor    esi,esi
c001b4fe:	0f af c2             	imul   eax,edx
c001b501:	50                   	push   eax
c001b502:	e8 c9 3f ff ff       	call   c000f4d0 <malloc>
c001b507:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b50a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b50e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b511:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b515:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001b519:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001b51d:	0f af c2             	imul   eax,edx
c001b520:	99                   	cdq    
c001b521:	52                   	push   edx
c001b522:	50                   	push   eax
c001b523:	55                   	push   ebp
c001b524:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b527:	83 c4 20             	add    esp,0x20
c001b52a:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001b52e:	0f 86 8a 00 00 00    	jbe    c001b5be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001b534:	0f b7 de             	movzx  ebx,si
c001b537:	c1 e3 05             	shl    ebx,0x5
c001b53a:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001b53e:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001b541:	75 75                	jne    c001b5b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001b543:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b546:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b54a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b54d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b551:	52                   	push   edx
c001b552:	31 d2                	xor    edx,edx
c001b554:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b557:	52                   	push   edx
c001b558:	50                   	push   eax
c001b559:	55                   	push   ebp
c001b55a:	e8 8f 77 ff ff       	call   c0012cee <File::seek(unsigned long long)>
c001b55f:	83 c4 10             	add    esp,0x10
c001b562:	85 c0                	test   eax,eax
c001b564:	0f 85 bc 05 00 00    	jne    c001bb26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b56a:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b571:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b574:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001b578:	31 d2                	xor    edx,edx
c001b57a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001b57e:	83 ec 0c             	sub    esp,0xc
c001b581:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b585:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b58c:	50                   	push   eax
c001b58d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b591:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b595:	52                   	push   edx
c001b596:	50                   	push   eax
c001b597:	55                   	push   ebp
c001b598:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b59b:	83 c4 1c             	add    esp,0x1c
c001b59e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b5a1:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001b5a4:	50                   	push   eax
c001b5a5:	6a 00                	push   0x0
c001b5a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5ab:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b5af:	50                   	push   eax
c001b5b0:	e8 d6 50 fe ff       	call   c000068b <memset>
c001b5b5:	83 c4 10             	add    esp,0x10
c001b5b8:	46                   	inc    esi
c001b5b9:	e9 6c ff ff ff       	jmp    c001b52a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001b5be:	31 db                	xor    ebx,ebx
c001b5c0:	50                   	push   eax
c001b5c1:	68 00 01 00 00       	push   0x100
c001b5c6:	6a 00                	push   0x0
c001b5c8:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b5cc:	50                   	push   eax
c001b5cd:	e8 b9 50 fe ff       	call   c000068b <memset>
c001b5d2:	83 c4 0c             	add    esp,0xc
c001b5d5:	68 00 01 00 00       	push   0x100
c001b5da:	6a 00                	push   0x0
c001b5dc:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001b5e3:	50                   	push   eax
c001b5e4:	e8 a2 50 fe ff       	call   c000068b <memset>
c001b5e9:	83 c4 10             	add    esp,0x10
c001b5ec:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b5f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001b5fc:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001b604:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b60c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b614:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001b618:	0f 86 30 01 00 00    	jbe    c001b74e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001b61e:	0f b7 f3             	movzx  esi,bx
c001b621:	6b f6 28             	imul   esi,esi,0x28
c001b624:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001b628:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b62b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b62f:	50                   	push   eax
c001b630:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b634:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001b638:	8b 06                	mov    eax,DWORD PTR [esi]
c001b63a:	6b d2 28             	imul   edx,edx,0x28
c001b63d:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001b641:	31 d2                	xor    edx,edx
c001b643:	52                   	push   edx
c001b644:	50                   	push   eax
c001b645:	55                   	push   ebp
c001b646:	e8 a3 76 ff ff       	call   c0012cee <File::seek(unsigned long long)>
c001b64b:	83 c4 0c             	add    esp,0xc
c001b64e:	6a 20                	push   0x20
c001b650:	6a 00                	push   0x0
c001b652:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001b659:	51                   	push   ecx
c001b65a:	e8 2c 50 fe ff       	call   c000068b <memset>
c001b65f:	58                   	pop    eax
c001b660:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b663:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b667:	52                   	push   edx
c001b668:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001b66f:	51                   	push   ecx
c001b670:	6a 00                	push   0x0
c001b672:	6a 1f                	push   0x1f
c001b674:	55                   	push   ebp
c001b675:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b678:	83 c4 1c             	add    esp,0x1c
c001b67b:	6a 09                	push   0x9
c001b67d:	68 32 99 02 c0       	push   0xc0029932
c001b682:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001b689:	51                   	push   ecx
c001b68a:	e8 63 4f fe ff       	call   c00005f2 <memcmp>
c001b68f:	83 c4 10             	add    esp,0x10
c001b692:	85 c0                	test   eax,eax
c001b694:	75 21                	jne    c001b6b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001b696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b69a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b69e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b6a2:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001b6a6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b6a9:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001b6b0:	89 c8                	mov    eax,ecx
c001b6b2:	40                   	inc    eax
c001b6b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b6b7:	50                   	push   eax
c001b6b8:	6a 09                	push   0x9
c001b6ba:	68 3c 99 02 c0       	push   0xc002993c
c001b6bf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b6c6:	50                   	push   eax
c001b6c7:	e8 26 4f fe ff       	call   c00005f2 <memcmp>
c001b6cc:	83 c4 10             	add    esp,0x10
c001b6cf:	85 c0                	test   eax,eax
c001b6d1:	75 21                	jne    c001b6f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001b6d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b6db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b6df:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001b6e3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b6e6:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001b6ed:	89 c8                	mov    eax,ecx
c001b6ef:	40                   	inc    eax
c001b6f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b6f4:	50                   	push   eax
c001b6f5:	50                   	push   eax
c001b6f6:	68 08 99 02 c0       	push   0xc0029908
c001b6fb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b702:	50                   	push   eax
c001b703:	e8 73 50 fe ff       	call   c000077b <strcmp>
c001b708:	83 c4 10             	add    esp,0x10
c001b70b:	85 c0                	test   eax,eax
c001b70d:	75 0f                	jne    c001b71e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001b70f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b712:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b716:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b71e:	50                   	push   eax
c001b71f:	50                   	push   eax
c001b720:	68 10 99 02 c0       	push   0xc0029910
c001b725:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b72c:	50                   	push   eax
c001b72d:	e8 49 50 fe ff       	call   c000077b <strcmp>
c001b732:	83 c4 10             	add    esp,0x10
c001b735:	85 c0                	test   eax,eax
c001b737:	75 0f                	jne    c001b748 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001b739:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b73c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b740:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b744:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b748:	43                   	inc    ebx
c001b749:	e9 c6 fe ff ff       	jmp    c001b614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001b74e:	31 d2                	xor    edx,edx
c001b750:	50                   	push   eax
c001b751:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b755:	52                   	push   edx
c001b756:	50                   	push   eax
c001b757:	55                   	push   ebp
c001b758:	e8 91 75 ff ff       	call   c0012cee <File::seek(unsigned long long)>
c001b75d:	5a                   	pop    edx
c001b75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b762:	e8 69 3d ff ff       	call   c000f4d0 <malloc>
c001b767:	31 d2                	xor    edx,edx
c001b769:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001b76d:	59                   	pop    ecx
c001b76e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b771:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001b775:	53                   	push   ebx
c001b776:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b77a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b77e:	52                   	push   edx
c001b77f:	50                   	push   eax
c001b780:	55                   	push   ebp
c001b781:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b784:	83 c4 14             	add    esp,0x14
c001b787:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b78b:	e8 40 3d ff ff       	call   c000f4d0 <malloc>
c001b790:	31 d2                	xor    edx,edx
c001b792:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b796:	83 c4 0c             	add    esp,0xc
c001b799:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b79d:	52                   	push   edx
c001b79e:	50                   	push   eax
c001b79f:	55                   	push   ebp
c001b7a0:	e8 49 75 ff ff       	call   c0012cee <File::seek(unsigned long long)>
c001b7a5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b7a8:	31 d2                	xor    edx,edx
c001b7aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b7b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b7b5:	52                   	push   edx
c001b7b6:	50                   	push   eax
c001b7b7:	55                   	push   ebp
c001b7b8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b7bb:	83 c4 20             	add    esp,0x20
c001b7be:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001b7c6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b7ca:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001b7ce:	0f 84 56 03 00 00    	je     c001bb2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001b7d4:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001b7db:	31 d2                	xor    edx,edx
c001b7dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b7e1:	c1 e8 03             	shr    eax,0x3
c001b7e4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001b7e8:	50                   	push   eax
c001b7e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b7ed:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001b7f1:	52                   	push   edx
c001b7f2:	50                   	push   eax
c001b7f3:	55                   	push   ebp
c001b7f4:	e8 f5 74 ff ff       	call   c0012cee <File::seek(unsigned long long)>
c001b7f9:	58                   	pop    eax
c001b7fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b7fe:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001b805:	e8 c6 3c ff ff       	call   c000f4d0 <malloc>
c001b80a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b80d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b811:	31 d2                	xor    edx,edx
c001b813:	58                   	pop    eax
c001b814:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b818:	50                   	push   eax
c001b819:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b81d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b821:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001b828:	52                   	push   edx
c001b829:	50                   	push   eax
c001b82a:	55                   	push   ebp
c001b82b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b82e:	83 c4 20             	add    esp,0x20
c001b831:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001b839:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001b83d:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001b841:	0f 8d c7 02 00 00    	jge    c001bb0e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001b847:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b84b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b84f:	31 db                	xor    ebx,ebx
c001b851:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001b854:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b858:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b85c:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001b860:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b864:	c1 e8 08             	shr    eax,0x8
c001b867:	89 c6                	mov    esi,eax
c001b869:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b86d:	c1 e6 04             	shl    esi,0x4
c001b870:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001b874:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001b877:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b87b:	85 c0                	test   eax,eax
c001b87d:	0f 85 17 01 00 00    	jne    c001b99a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b883:	83 ec 0c             	sub    esp,0xc
c001b886:	b3 01                	mov    bl,0x1
c001b888:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b88c:	03 06                	add    eax,DWORD PTR [esi]
c001b88e:	50                   	push   eax
c001b88f:	e8 48 f8 ff ff       	call   c001b0dc <Thr::getAddressOfKernelSymbol(char const*)>
c001b894:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b898:	83 c4 10             	add    esp,0x10
c001b89b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b8a0:	0f 85 f4 00 00 00    	jne    c001b99a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b8a6:	50                   	push   eax
c001b8a7:	50                   	push   eax
c001b8a8:	68 46 99 02 c0       	push   0xc0029946
c001b8ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b8b1:	03 06                	add    eax,DWORD PTR [esi]
c001b8b3:	50                   	push   eax
c001b8b4:	e8 c2 4e fe ff       	call   c000077b <strcmp>
c001b8b9:	83 c4 10             	add    esp,0x10
c001b8bc:	85 c0                	test   eax,eax
c001b8be:	75 0a                	jne    c001b8ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001b8c0:	b8 2c 47 02 c0       	mov    eax,0xc002472c
c001b8c5:	e9 ca 00 00 00       	jmp    c001b994 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b8ca:	50                   	push   eax
c001b8cb:	50                   	push   eax
c001b8cc:	68 50 99 02 c0       	push   0xc0029950
c001b8d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b8d5:	03 06                	add    eax,DWORD PTR [esi]
c001b8d7:	50                   	push   eax
c001b8d8:	e8 9e 4e fe ff       	call   c000077b <strcmp>
c001b8dd:	83 c4 10             	add    esp,0x10
c001b8e0:	85 c0                	test   eax,eax
c001b8e2:	75 0a                	jne    c001b8ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001b8e4:	b8 60 44 02 c0       	mov    eax,0xc0024460
c001b8e9:	e9 a6 00 00 00       	jmp    c001b994 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b8ee:	53                   	push   ebx
c001b8ef:	53                   	push   ebx
c001b8f0:	68 59 99 02 c0       	push   0xc0029959
c001b8f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b8f9:	03 06                	add    eax,DWORD PTR [esi]
c001b8fb:	50                   	push   eax
c001b8fc:	e8 7a 4e fe ff       	call   c000077b <strcmp>
c001b901:	83 c4 10             	add    esp,0x10
c001b904:	85 c0                	test   eax,eax
c001b906:	75 0a                	jne    c001b912 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001b908:	b8 2c 48 02 c0       	mov    eax,0xc002482c
c001b90d:	e9 82 00 00 00       	jmp    c001b994 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b912:	51                   	push   ecx
c001b913:	51                   	push   ecx
c001b914:	68 63 99 02 c0       	push   0xc0029963
c001b919:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b91d:	03 06                	add    eax,DWORD PTR [esi]
c001b91f:	50                   	push   eax
c001b920:	e8 56 4e fe ff       	call   c000077b <strcmp>
c001b925:	83 c4 10             	add    esp,0x10
c001b928:	85 c0                	test   eax,eax
c001b92a:	74 63                	je     c001b98f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001b92c:	50                   	push   eax
c001b92d:	50                   	push   eax
c001b92e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b932:	03 06                	add    eax,DWORD PTR [esi]
c001b934:	50                   	push   eax
c001b935:	68 6c 99 02 c0       	push   0xc002996c
c001b93a:	e8 5e 6d ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001b93f:	58                   	pop    eax
c001b940:	5a                   	pop    edx
c001b941:	68 86 99 02 c0       	push   0xc0029986
c001b946:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001b94d:	53                   	push   ebx
c001b94e:	e8 d7 4d fe ff       	call   c000072a <strcpy>
c001b953:	59                   	pop    ecx
c001b954:	58                   	pop    eax
c001b955:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b959:	03 06                	add    eax,DWORD PTR [esi]
c001b95b:	50                   	push   eax
c001b95c:	53                   	push   ebx
c001b95d:	e8 7f 4e fe ff       	call   c00007e1 <strcat>
c001b962:	58                   	pop    eax
c001b963:	5a                   	pop    edx
c001b964:	68 1c 9a 02 c0       	push   0xc0029a1c
c001b969:	53                   	push   ebx
c001b96a:	e8 72 4e fe ff       	call   c00007e1 <strcat>
c001b96f:	83 c4 10             	add    esp,0x10
c001b972:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b977:	0f 84 4b 01 00 00    	je     c001bac8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b97d:	83 ec 0c             	sub    esp,0xc
c001b980:	53                   	push   ebx
c001b981:	e8 5b d8 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001b986:	83 c4 10             	add    esp,0x10
c001b989:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001b98d:	eb 0b                	jmp    c001b99a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b98f:	b8 ac 45 02 c0       	mov    eax,0xc00245ac
c001b994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b998:	b3 01                	mov    bl,0x1
c001b99a:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001b99f:	0f 85 80 00 00 00    	jne    c001ba25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001b9a5:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001b9ac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b9b0:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001b9b4:	01 ce                	add    esi,ecx
c001b9b6:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b9be:	8b 06                	mov    eax,DWORD PTR [esi]
c001b9c0:	0f 94 c2             	sete   dl
c001b9c3:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b9cb:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001b9d0:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001b9d4:	84 db                	test   bl,bl
c001b9d6:	74 31                	je     c001ba09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001b9d8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b9dc:	01 c3                	add    ebx,eax
c001b9de:	84 d2                	test   dl,dl
c001b9e0:	75 0a                	jne    c001b9ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001b9e2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b9e6:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b9ea:	76 32                	jbe    c001ba1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b9ec:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b9f1:	0f 84 d1 00 00 00    	je     c001bac8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b9f7:	83 ec 0c             	sub    esp,0xc
c001b9fa:	68 9d 99 02 c0       	push   0xc002999d
c001b9ff:	e8 dd d7 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001ba04:	83 c4 10             	add    esp,0x10
c001ba07:	eb 15                	jmp    c001ba1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001ba09:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001ba0c:	84 d2                	test   dl,dl
c001ba0e:	75 0e                	jne    c001ba1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001ba10:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ba14:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001ba18:	77 04                	ja     c001ba1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001ba1a:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001ba1e:	89 1e                	mov    DWORD PTR [esi],ebx
c001ba20:	e9 e0 00 00 00       	jmp    c001bb05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001ba25:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001ba2a:	75 6e                	jne    c001ba9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001ba2c:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ba33:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001ba37:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001ba3b:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001ba43:	74 17                	je     c001ba5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001ba45:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001ba4d:	74 0d                	je     c001ba5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001ba4f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ba53:	83 e8 04             	sub    eax,0x4
c001ba56:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001ba5a:	76 17                	jbe    c001ba73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001ba5c:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001ba61:	74 65                	je     c001bac8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001ba63:	83 ec 0c             	sub    esp,0xc
c001ba66:	68 b9 99 02 c0       	push   0xc00299b9
c001ba6b:	e8 71 d7 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001ba70:	83 c4 10             	add    esp,0x10
c001ba73:	8b 16                	mov    edx,DWORD PTR [esi]
c001ba75:	84 db                	test   bl,bl
c001ba77:	74 13                	je     c001ba8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001ba79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ba7d:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001ba84:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001ba88:	01 d0                	add    eax,edx
c001ba8a:	eb 06                	jmp    c001ba92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001ba8c:	89 d0                	mov    eax,edx
c001ba8e:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001ba92:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ba96:	89 06                	mov    DWORD PTR [esi],eax
c001ba98:	eb 6b                	jmp    c001bb05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001ba9a:	50                   	push   eax
c001ba9b:	50                   	push   eax
c001ba9c:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001baa1:	50                   	push   eax
c001baa2:	68 d5 99 02 c0       	push   0xc00299d5
c001baa7:	e8 f1 6b ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001baac:	83 c4 10             	add    esp,0x10
c001baaf:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001bab4:	74 12                	je     c001bac8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001bab6:	83 ec 0c             	sub    esp,0xc
c001bab9:	68 e0 99 02 c0       	push   0xc00299e0
c001babe:	e8 1e d7 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001bac3:	83 c4 10             	add    esp,0x10
c001bac6:	eb 3d                	jmp    c001bb05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001bac8:	83 ec 0c             	sub    esp,0xc
c001bacb:	55                   	push   ebp
c001bacc:	e8 bd 71 ff ff       	call   c0012c8e <File::close()>
c001bad1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bad4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bad7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bada:	59                   	pop    ecx
c001badb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001badf:	e8 fc 39 ff ff       	call   c000f4e0 <free>
c001bae4:	5b                   	pop    ebx
c001bae5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bae9:	e8 f2 39 ff ff       	call   c000f4e0 <free>
c001baee:	89 3c 24             	mov    DWORD PTR [esp],edi
c001baf1:	e8 ea 39 ff ff       	call   c000f4e0 <free>
c001baf6:	5e                   	pop    esi
c001baf7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001bafb:	e8 e0 39 ff ff       	call   c000f4e0 <free>
c001bb00:	83 c4 10             	add    esp,0x10
c001bb03:	eb 21                	jmp    c001bb26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bb05:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001bb09:	e9 2b fd ff ff       	jmp    c001b839 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001bb0e:	83 ec 0c             	sub    esp,0xc
c001bb11:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bb15:	e8 c6 39 ff ff       	call   c000f4e0 <free>
c001bb1a:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001bb1e:	83 c4 10             	add    esp,0x10
c001bb21:	e9 a0 fc ff ff       	jmp    c001b7c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001bb26:	31 c0                	xor    eax,eax
c001bb28:	eb 33                	jmp    c001bb5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001bb2a:	83 ec 0c             	sub    esp,0xc
c001bb2d:	55                   	push   ebp
c001bb2e:	e8 5b 71 ff ff       	call   c0012c8e <File::close()>
c001bb33:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bb36:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bb39:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb3c:	58                   	pop    eax
c001bb3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb41:	e8 9a 39 ff ff       	call   c000f4e0 <free>
c001bb46:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bb49:	e8 92 39 ff ff       	call   c000f4e0 <free>
c001bb4e:	5a                   	pop    edx
c001bb4f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001bb53:	e8 88 39 ff ff       	call   c000f4e0 <free>
c001bb58:	83 c4 10             	add    esp,0x10
c001bb5b:	b0 01                	mov    al,0x1
c001bb5d:	81 c4 5c 03 00 00    	add    esp,0x35c
c001bb63:	5b                   	pop    ebx
c001bb64:	5e                   	pop    esi
c001bb65:	5f                   	pop    edi
c001bb66:	5d                   	pop    ebp
c001bb67:	c3                   	ret    

c001bb68 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001bb68:	56                   	push   esi
c001bb69:	31 d2                	xor    edx,edx
c001bb6b:	53                   	push   ebx
c001bb6c:	8b 1d e0 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c7e0
c001bb72:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bb76:	39 d3                	cmp    ebx,edx
c001bb78:	7e 1b                	jle    c001bb95 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001bb7a:	8b 04 95 00 ca 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3600]
c001bb81:	39 c8                	cmp    eax,ecx
c001bb83:	77 0d                	ja     c001bb92 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001bb85:	8b 34 95 00 c8 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd3800]
c001bb8c:	01 c6                	add    esi,eax
c001bb8e:	39 ce                	cmp    esi,ecx
c001bb90:	77 05                	ja     c001bb97 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001bb92:	42                   	inc    edx
c001bb93:	eb e1                	jmp    c001bb76 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001bb95:	31 c0                	xor    eax,eax
c001bb97:	5b                   	pop    ebx
c001bb98:	5e                   	pop    esi
c001bb99:	c3                   	ret    

c001bb9a <Thr::getDriverNameFromAddress(unsigned long)>:
c001bb9a:	53                   	push   ebx
c001bb9b:	31 c0                	xor    eax,eax
c001bb9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bba1:	8b 1d e0 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c7e0
c001bba7:	39 c3                	cmp    ebx,eax
c001bba9:	7e 22                	jle    c001bbcd <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001bbab:	8b 14 85 00 ca 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3600]
c001bbb2:	39 ca                	cmp    edx,ecx
c001bbb4:	77 14                	ja     c001bbca <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001bbb6:	03 14 85 00 c8 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd3800]
c001bbbd:	39 ca                	cmp    edx,ecx
c001bbbf:	76 09                	jbe    c001bbca <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001bbc1:	8b 04 85 00 cc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3400]
c001bbc8:	eb 05                	jmp    c001bbcf <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001bbca:	40                   	inc    eax
c001bbcb:	eb da                	jmp    c001bba7 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001bbcd:	31 c0                	xor    eax,eax
c001bbcf:	5b                   	pop    ebx
c001bbd0:	c3                   	ret    

c001bbd1 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001bbd1:	53                   	push   ebx
c001bbd2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001bbd6:	53                   	push   ebx
c001bbd7:	e8 8c ff ff ff       	call   c001bb68 <Thr::getDriverBaseFromAddress(unsigned long)>
c001bbdc:	5a                   	pop    edx
c001bbdd:	31 d2                	xor    edx,edx
c001bbdf:	85 c0                	test   eax,eax
c001bbe1:	74 04                	je     c001bbe7 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001bbe3:	89 da                	mov    edx,ebx
c001bbe5:	29 c2                	sub    edx,eax
c001bbe7:	89 d0                	mov    eax,edx
c001bbe9:	5b                   	pop    ebx
c001bbea:	c3                   	ret    

c001bbeb <Thr::loadDLL(char const*, bool)>:
c001bbeb:	55                   	push   ebp
c001bbec:	57                   	push   edi
c001bbed:	56                   	push   esi
c001bbee:	53                   	push   ebx
c001bbef:	81 ec 34 01 00 00    	sub    esp,0x134
c001bbf5:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001bbfc:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001bc03:	56                   	push   esi
c001bc04:	68 f8 99 02 c0       	push   0xc00299f8
c001bc09:	e8 8f 6a ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001bc0e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001bc15:	e8 b6 38 ff ff       	call   c000f4d0 <malloc>
c001bc1a:	83 c4 0c             	add    esp,0xc
c001bc1d:	89 c3                	mov    ebx,eax
c001bc1f:	ff 35 d4 cf 02 c0    	push   DWORD PTR ds:0xc002cfd4
c001bc25:	56                   	push   esi
c001bc26:	50                   	push   eax
c001bc27:	e8 a0 6f ff ff       	call   c0012bcc <File::File(char const*, Process*)>
c001bc2c:	83 c4 10             	add    esp,0x10
c001bc2f:	85 db                	test   ebx,ebx
c001bc31:	75 3c                	jne    c001bc6f <Thr::loadDLL(char const*, bool)+0x84>
c001bc33:	89 e8                	mov    eax,ebp
c001bc35:	84 c0                	test   al,al
c001bc37:	0f 84 b0 01 00 00    	je     c001bded <Thr::loadDLL(char const*, bool)+0x202>
c001bc3d:	50                   	push   eax
c001bc3e:	50                   	push   eax
c001bc3f:	68 09 9a 02 c0       	push   0xc0029a09
c001bc44:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001bc48:	57                   	push   edi
c001bc49:	e8 dc 4a fe ff       	call   c000072a <strcpy>
c001bc4e:	58                   	pop    eax
c001bc4f:	5a                   	pop    edx
c001bc50:	56                   	push   esi
c001bc51:	57                   	push   edi
c001bc52:	e8 8a 4b fe ff       	call   c00007e1 <strcat>
c001bc57:	59                   	pop    ecx
c001bc58:	58                   	pop    eax
c001bc59:	68 1c 9a 02 c0       	push   0xc0029a1c
c001bc5e:	57                   	push   edi
c001bc5f:	e8 7d 4b fe ff       	call   c00007e1 <strcat>
c001bc64:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bc67:	e8 75 d5 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001bc6c:	83 c4 10             	add    esp,0x10
c001bc6f:	50                   	push   eax
c001bc70:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001bc74:	50                   	push   eax
c001bc75:	8d 44 24 20          	lea    eax,[esp+0x20]
c001bc79:	50                   	push   eax
c001bc7a:	53                   	push   ebx
c001bc7b:	e8 5c 72 ff ff       	call   c0012edc <File::stat(unsigned long long*, bool*)>
c001bc80:	83 c4 10             	add    esp,0x10
c001bc83:	85 db                	test   ebx,ebx
c001bc85:	74 0c                	je     c001bc93 <Thr::loadDLL(char const*, bool)+0xa8>
c001bc87:	83 ec 0c             	sub    esp,0xc
c001bc8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc8c:	53                   	push   ebx
c001bc8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc90:	83 c4 10             	add    esp,0x10
c001bc93:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001bc98:	75 0a                	jne    c001bca4 <Thr::loadDLL(char const*, bool)+0xb9>
c001bc9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc9e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001bca2:	75 3c                	jne    c001bce0 <Thr::loadDLL(char const*, bool)+0xf5>
c001bca4:	89 e8                	mov    eax,ebp
c001bca6:	84 c0                	test   al,al
c001bca8:	0f 84 3d 01 00 00    	je     c001bdeb <Thr::loadDLL(char const*, bool)+0x200>
c001bcae:	50                   	push   eax
c001bcaf:	50                   	push   eax
c001bcb0:	68 09 9a 02 c0       	push   0xc0029a09
c001bcb5:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001bcb9:	53                   	push   ebx
c001bcba:	e8 6b 4a fe ff       	call   c000072a <strcpy>
c001bcbf:	58                   	pop    eax
c001bcc0:	5a                   	pop    edx
c001bcc1:	56                   	push   esi
c001bcc2:	53                   	push   ebx
c001bcc3:	e8 19 4b fe ff       	call   c00007e1 <strcat>
c001bcc8:	59                   	pop    ecx
c001bcc9:	5f                   	pop    edi
c001bcca:	68 1c 9a 02 c0       	push   0xc0029a1c
c001bccf:	53                   	push   ebx
c001bcd0:	e8 0c 4b fe ff       	call   c00007e1 <strcat>
c001bcd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcd8:	e8 04 d5 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001bcdd:	83 c4 10             	add    esp,0x10
c001bce0:	e8 58 5b ff ff       	call   c001183d <Virt::getAKernelVAS()>
c001bce5:	51                   	push   ecx
c001bce6:	6a 03                	push   0x3
c001bce8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001bcec:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001bcf0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001bcf6:	83 d3 00             	adc    ebx,0x0
c001bcf9:	89 ca                	mov    edx,ecx
c001bcfb:	89 d1                	mov    ecx,edx
c001bcfd:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001bd01:	51                   	push   ecx
c001bd02:	50                   	push   eax
c001bd03:	e8 70 61 ff ff       	call   c0011e78 <VAS::allocatePages(int, int)>
c001bd08:	89 34 24             	mov    DWORD PTR [esp],esi
c001bd0b:	89 c3                	mov    ebx,eax
c001bd0d:	e8 96 49 fe ff       	call   c00006a8 <strlen>
c001bd12:	8b 3d e0 c7 02 c0    	mov    edi,DWORD PTR ds:0xc002c7e0
c001bd18:	40                   	inc    eax
c001bd19:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd1c:	e8 af 37 ff ff       	call   c000f4d0 <malloc>
c001bd21:	89 04 bd 00 cc 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3400],eax
c001bd28:	5f                   	pop    edi
c001bd29:	58                   	pop    eax
c001bd2a:	a1 e0 c7 02 c0       	mov    eax,ds:0xc002c7e0
c001bd2f:	56                   	push   esi
c001bd30:	ff 34 85 00 cc 02 c0 	push   DWORD PTR [eax*4-0x3ffd3400]
c001bd37:	e8 ee 49 fe ff       	call   c000072a <strcpy>
c001bd3c:	a1 e0 c7 02 c0       	mov    eax,ds:0xc002c7e0
c001bd41:	8d 50 01             	lea    edx,[eax+0x1]
c001bd44:	89 1c 85 00 ca 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3600],ebx
c001bd4b:	89 15 e0 c7 02 c0    	mov    DWORD PTR ds:0xc002c7e0,edx
c001bd51:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bd55:	83 c4 0c             	add    esp,0xc
c001bd58:	89 14 85 00 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3800],edx
c001bd5f:	6a 01                	push   0x1
c001bd61:	53                   	push   ebx
c001bd62:	56                   	push   esi
c001bd63:	e8 7f f6 ff ff       	call   c001b3e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001bd68:	83 c4 10             	add    esp,0x10
c001bd6b:	89 c7                	mov    edi,eax
c001bd6d:	fe c8                	dec    al
c001bd6f:	74 16                	je     c001bd87 <Thr::loadDLL(char const*, bool)+0x19c>
c001bd71:	89 e8                	mov    eax,ebp
c001bd73:	84 c0                	test   al,al
c001bd75:	74 10                	je     c001bd87 <Thr::loadDLL(char const*, bool)+0x19c>
c001bd77:	83 ec 0c             	sub    esp,0xc
c001bd7a:	68 1e 9a 02 c0       	push   0xc0029a1e
c001bd7f:	e8 5d d4 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001bd84:	83 c4 10             	add    esp,0x10
c001bd87:	31 f6                	xor    esi,esi
c001bd89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd8d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bd91:	05 ff 0f 00 00       	add    eax,0xfff
c001bd96:	83 d2 00             	adc    edx,0x0
c001bd99:	0f ac d0 0c          	shrd   eax,edx,0xc
c001bd9d:	c1 ea 0c             	shr    edx,0xc
c001bda0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bda4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bda8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001bdac:	ba 00 00 00 00       	mov    edx,0x0
c001bdb1:	89 d0                	mov    eax,edx
c001bdb3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001bdb7:	73 2c                	jae    c001bde5 <Thr::loadDLL(char const*, bool)+0x1fa>
c001bdb9:	e8 7f 5a ff ff       	call   c001183d <Virt::getAKernelVAS()>
c001bdbe:	89 f5                	mov    ebp,esi
c001bdc0:	c1 e5 0c             	shl    ebp,0xc
c001bdc3:	52                   	push   edx
c001bdc4:	01 dd                	add    ebp,ebx
c001bdc6:	52                   	push   edx
c001bdc7:	55                   	push   ebp
c001bdc8:	50                   	push   eax
c001bdc9:	e8 24 5c ff ff       	call   c00119f2 <VAS::getPageTableEntry(unsigned long)>
c001bdce:	83 c4 10             	add    esp,0x10
c001bdd1:	f6 00 60             	test   BYTE PTR [eax],0x60
c001bdd4:	75 0c                	jne    c001bde2 <Thr::loadDLL(char const*, bool)+0x1f7>
c001bdd6:	83 ec 0c             	sub    esp,0xc
c001bdd9:	55                   	push   ebp
c001bdda:	e8 11 3c ff ff       	call   c000f9f0 <Phys::freePage(unsigned long)>
c001bddf:	83 c4 10             	add    esp,0x10
c001bde2:	46                   	inc    esi
c001bde3:	eb a4                	jmp    c001bd89 <Thr::loadDLL(char const*, bool)+0x19e>
c001bde5:	89 f8                	mov    eax,edi
c001bde7:	84 c0                	test   al,al
c001bde9:	75 02                	jne    c001bded <Thr::loadDLL(char const*, bool)+0x202>
c001bdeb:	31 db                	xor    ebx,ebx
c001bded:	81 c4 2c 01 00 00    	add    esp,0x12c
c001bdf3:	89 d8                	mov    eax,ebx
c001bdf5:	5b                   	pop    ebx
c001bdf6:	5e                   	pop    esi
c001bdf7:	5f                   	pop    edi
c001bdf8:	5d                   	pop    ebp
c001bdf9:	c3                   	ret    

c001bdfa <Thr::executeDLL(unsigned long, void*)>:
c001bdfa:	56                   	push   esi
c001bdfb:	53                   	push   ebx
c001bdfc:	51                   	push   ecx
c001bdfd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be01:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001be05:	85 db                	test   ebx,ebx
c001be07:	75 10                	jne    c001be19 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001be09:	83 ec 0c             	sub    esp,0xc
c001be0c:	68 3d 9a 02 c0       	push   0xc0029a3d
c001be11:	e8 cb d3 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001be16:	83 c4 10             	add    esp,0x10
c001be19:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001be1d:	89 d8                	mov    eax,ebx
c001be1f:	5a                   	pop    edx
c001be20:	5b                   	pop    ebx
c001be21:	5e                   	pop    esi
c001be22:	ff e0                	jmp    eax

c001be24 <changeTSS>:
c001be24:	83 ec 14             	sub    esp,0x14
c001be27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be2c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001be2f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001be34:	c1 e2 15             	shl    edx,0x15
c001be37:	29 d0                	sub    eax,edx
c001be39:	50                   	push   eax
c001be3a:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c001be3f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001be45:	05 7c 11 00 00       	add    eax,0x117c
c001be4a:	50                   	push   eax
c001be4b:	e8 9c 51 ff ff       	call   c0010fec <TSS::setESP(unsigned long)>
c001be50:	83 c4 1c             	add    esp,0x1c
c001be53:	c3                   	ret    

c001be54 <Process::addArgs(char**)>:
c001be54:	57                   	push   edi
c001be55:	56                   	push   esi
c001be56:	53                   	push   ebx
c001be57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001be5b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001be5f:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001be69:	85 ff                	test   edi,edi
c001be6b:	74 3d                	je     c001beaa <Process::addArgs(char**)+0x56>
c001be6d:	8b 07                	mov    eax,DWORD PTR [edi]
c001be6f:	85 c0                	test   eax,eax
c001be71:	74 37                	je     c001beaa <Process::addArgs(char**)+0x56>
c001be73:	31 db                	xor    ebx,ebx
c001be75:	83 ec 0c             	sub    esp,0xc
c001be78:	50                   	push   eax
c001be79:	e8 2a 48 fe ff       	call   c00006a8 <strlen>
c001be7e:	40                   	inc    eax
c001be7f:	89 04 24             	mov    DWORD PTR [esp],eax
c001be82:	e8 49 36 ff ff       	call   c000f4d0 <malloc>
c001be87:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001be8e:	5a                   	pop    edx
c001be8f:	59                   	pop    ecx
c001be90:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001be93:	43                   	inc    ebx
c001be94:	50                   	push   eax
c001be95:	e8 90 48 fe ff       	call   c000072a <strcpy>
c001be9a:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001bea0:	83 c4 10             	add    esp,0x10
c001bea3:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001bea6:	85 c0                	test   eax,eax
c001bea8:	75 cb                	jne    c001be75 <Process::addArgs(char**)+0x21>
c001beaa:	5b                   	pop    ebx
c001beab:	5e                   	pop    esi
c001beac:	5f                   	pop    edi
c001bead:	c3                   	ret    

c001beae <Process::Process(char const*, Process*, char**)>:
c001beae:	56                   	push   esi
c001beaf:	53                   	push   ebx
c001beb0:	83 ec 14             	sub    esp,0x14
c001beb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001beb7:	05 0c 02 00 00       	add    eax,0x20c
c001bebc:	bb 07 00 00 00       	mov    ebx,0x7
c001bec1:	89 c6                	mov    esi,eax
c001bec3:	85 db                	test   ebx,ebx
c001bec5:	78 12                	js     c001bed9 <Process::Process(char const*, Process*, char**)+0x2b>
c001bec7:	83 ec 0c             	sub    esp,0xc
c001beca:	56                   	push   esi
c001becb:	e8 12 ab 00 00       	call   c00269e2 <ThreadControlBlock::ThreadControlBlock()>
c001bed0:	83 c4 10             	add    esp,0x10
c001bed3:	83 c6 63             	add    esi,0x63
c001bed6:	4b                   	dec    ebx
c001bed7:	eb ea                	jmp    c001bec3 <Process::Process(char const*, Process*, char**)+0x15>
c001bed9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bedd:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001bee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bee8:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001bef1:	a1 64 b0 02 c0       	mov    eax,ds:0xc002b064
c001bef6:	8d 50 01             	lea    edx,[eax+0x1]
c001bef9:	89 15 64 b0 02 c0    	mov    DWORD PTR ds:0xc002b064,edx
c001beff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bf03:	89 02                	mov    DWORD PTR [edx],eax
c001bf05:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001bf0d:	83 ec 0c             	sub    esp,0xc
c001bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bf14:	e8 b7 35 ff ff       	call   c000f4d0 <malloc>
c001bf19:	83 c4 10             	add    esp,0x10
c001bf1c:	89 c3                	mov    ebx,eax
c001bf1e:	83 ec 08             	sub    esp,0x8
c001bf21:	6a 00                	push   0x0
c001bf23:	53                   	push   ebx
c001bf24:	e8 f7 62 ff ff       	call   c0012220 <VAS::VAS(bool)>
c001bf29:	83 c4 10             	add    esp,0x10
c001bf2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf30:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001bf36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf3a:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001bf44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf48:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bf4c:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001bf52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf56:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bf5c:	85 c0                	test   eax,eax
c001bf5e:	74 42                	je     c001bfa2 <Process::Process(char const*, Process*, char**)+0xf4>
c001bf60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf64:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bf6a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bf70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf74:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001bf7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf7e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bf84:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001bf8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf8e:	05 0c 01 00 00       	add    eax,0x10c
c001bf93:	83 ec 08             	sub    esp,0x8
c001bf96:	52                   	push   edx
c001bf97:	50                   	push   eax
c001bf98:	e8 8d 47 fe ff       	call   c000072a <strcpy>
c001bf9d:	83 c4 10             	add    esp,0x10
c001bfa0:	eb 63                	jmp    c001c005 <Process::Process(char const*, Process*, char**)+0x157>
c001bfa2:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001bfaa:	83 ec 0c             	sub    esp,0xc
c001bfad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bfb1:	e8 1a 35 ff ff       	call   c000f4d0 <malloc>
c001bfb6:	83 c4 10             	add    esp,0x10
c001bfb9:	89 c3                	mov    ebx,eax
c001bfbb:	83 ec 08             	sub    esp,0x8
c001bfbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfc2:	53                   	push   ebx
c001bfc3:	e8 22 4d ff ff       	call   c0010cea <VgaText::VgaText(char const*)>
c001bfc8:	83 c4 10             	add    esp,0x10
c001bfcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bfcf:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001bfd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bfd9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bfdf:	83 ec 0c             	sub    esp,0xc
c001bfe2:	50                   	push   eax
c001bfe3:	e8 03 41 ff ff       	call   c00100eb <addToTerminalCycle(VgaText*)>
c001bfe8:	83 c4 10             	add    esp,0x10
c001bfeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bfef:	05 0c 01 00 00       	add    eax,0x10c
c001bff4:	83 ec 08             	sub    esp,0x8
c001bff7:	68 67 9a 02 c0       	push   0xc0029a67
c001bffc:	50                   	push   eax
c001bffd:	e8 28 47 fe ff       	call   c000072a <strcpy>
c001c002:	83 c4 10             	add    esp,0x10
c001c005:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c009:	83 c0 0c             	add    eax,0xc
c001c00c:	83 ec 08             	sub    esp,0x8
c001c00f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c013:	50                   	push   eax
c001c014:	e8 11 47 fe ff       	call   c000072a <strcpy>
c001c019:	83 c4 10             	add    esp,0x10
c001c01c:	83 ec 08             	sub    esp,0x8
c001c01f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c023:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c027:	e8 28 fe ff ff       	call   c001be54 <Process::addArgs(char**)>
c001c02c:	83 c4 10             	add    esp,0x10
c001c02f:	83 ec 08             	sub    esp,0x8
c001c032:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c036:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c03a:	e8 74 ee ff ff       	call   c001aeb3 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001c03f:	83 c4 10             	add    esp,0x10
c001c042:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c046:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c04a:	83 f0 01             	xor    eax,0x1
c001c04d:	88 c2                	mov    dl,al
c001c04f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c053:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001c059:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001c05e:	83 ec 08             	sub    esp,0x8
c001c061:	50                   	push   eax
c001c062:	68 64 9b 02 c0       	push   0xc0029b64
c001c067:	e8 31 66 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001c06c:	83 c4 10             	add    esp,0x10
c001c06f:	90                   	nop
c001c070:	83 c4 14             	add    esp,0x14
c001c073:	5b                   	pop    ebx
c001c074:	5e                   	pop    esi
c001c075:	c3                   	ret    

c001c076 <Process::Process(bool, char const*, Process*, char**)>:
c001c076:	56                   	push   esi
c001c077:	53                   	push   ebx
c001c078:	83 ec 24             	sub    esp,0x24
c001c07b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c07f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c083:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c087:	05 0c 02 00 00       	add    eax,0x20c
c001c08c:	bb 07 00 00 00       	mov    ebx,0x7
c001c091:	89 c6                	mov    esi,eax
c001c093:	85 db                	test   ebx,ebx
c001c095:	78 12                	js     c001c0a9 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001c097:	83 ec 0c             	sub    esp,0xc
c001c09a:	56                   	push   esi
c001c09b:	e8 42 a9 00 00       	call   c00269e2 <ThreadControlBlock::ThreadControlBlock()>
c001c0a0:	83 c4 10             	add    esp,0x10
c001c0a3:	83 c6 63             	add    esi,0x63
c001c0a6:	4b                   	dec    ebx
c001c0a7:	eb ea                	jmp    c001c093 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001c0a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c0ad:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001c0b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c0b8:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001c0c1:	a1 64 b0 02 c0       	mov    eax,ds:0xc002b064
c001c0c6:	8d 50 01             	lea    edx,[eax+0x1]
c001c0c9:	89 15 64 b0 02 c0    	mov    DWORD PTR ds:0xc002b064,edx
c001c0cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c0d3:	89 02                	mov    DWORD PTR [edx],eax
c001c0d5:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001c0dd:	83 ec 0c             	sub    esp,0xc
c001c0e0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c0e4:	e8 e7 33 ff ff       	call   c000f4d0 <malloc>
c001c0e9:	83 c4 10             	add    esp,0x10
c001c0ec:	89 c3                	mov    ebx,eax
c001c0ee:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c0f3:	83 ec 08             	sub    esp,0x8
c001c0f6:	50                   	push   eax
c001c0f7:	53                   	push   ebx
c001c0f8:	e8 23 61 ff ff       	call   c0012220 <VAS::VAS(bool)>
c001c0fd:	83 c4 10             	add    esp,0x10
c001c100:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c104:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001c10a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c10e:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c11c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c120:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001c126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c12a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c130:	85 c0                	test   eax,eax
c001c132:	74 42                	je     c001c176 <Process::Process(bool, char const*, Process*, char**)+0x100>
c001c134:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c138:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c13e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c144:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c148:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001c14e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c152:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c158:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001c15e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c162:	05 0c 01 00 00       	add    eax,0x10c
c001c167:	83 ec 08             	sub    esp,0x8
c001c16a:	52                   	push   edx
c001c16b:	50                   	push   eax
c001c16c:	e8 b9 45 fe ff       	call   c000072a <strcpy>
c001c171:	83 c4 10             	add    esp,0x10
c001c174:	eb 63                	jmp    c001c1d9 <Process::Process(bool, char const*, Process*, char**)+0x163>
c001c176:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001c17e:	83 ec 0c             	sub    esp,0xc
c001c181:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c185:	e8 46 33 ff ff       	call   c000f4d0 <malloc>
c001c18a:	83 c4 10             	add    esp,0x10
c001c18d:	89 c3                	mov    ebx,eax
c001c18f:	83 ec 08             	sub    esp,0x8
c001c192:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c196:	53                   	push   ebx
c001c197:	e8 4e 4b ff ff       	call   c0010cea <VgaText::VgaText(char const*)>
c001c19c:	83 c4 10             	add    esp,0x10
c001c19f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c1a3:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001c1a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c1ad:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c1b3:	83 ec 0c             	sub    esp,0xc
c001c1b6:	50                   	push   eax
c001c1b7:	e8 2f 3f ff ff       	call   c00100eb <addToTerminalCycle(VgaText*)>
c001c1bc:	83 c4 10             	add    esp,0x10
c001c1bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c1c3:	05 0c 01 00 00       	add    eax,0x10c
c001c1c8:	83 ec 08             	sub    esp,0x8
c001c1cb:	68 67 9a 02 c0       	push   0xc0029a67
c001c1d0:	50                   	push   eax
c001c1d1:	e8 54 45 fe ff       	call   c000072a <strcpy>
c001c1d6:	83 c4 10             	add    esp,0x10
c001c1d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c1dd:	83 c0 0c             	add    eax,0xc
c001c1e0:	83 ec 08             	sub    esp,0x8
c001c1e3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c1e7:	50                   	push   eax
c001c1e8:	e8 3d 45 fe ff       	call   c000072a <strcpy>
c001c1ed:	83 c4 10             	add    esp,0x10
c001c1f0:	83 ec 08             	sub    esp,0x8
c001c1f3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c1f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c1fb:	e8 54 fc ff ff       	call   c001be54 <Process::addArgs(char**)>
c001c200:	83 c4 10             	add    esp,0x10
c001c203:	90                   	nop
c001c204:	83 c4 24             	add    esp,0x24
c001c207:	5b                   	pop    ebx
c001c208:	5e                   	pop    esi
c001c209:	c3                   	ret    

c001c20a <disableIRQs()>:
c001c20a:	fa                   	cli    
c001c20b:	ff 05 ac cf 02 c0    	inc    DWORD PTR ds:0xc002cfac
c001c211:	c3                   	ret    

c001c212 <getIRQNestingLevel()>:
c001c212:	a1 ac cf 02 c0       	mov    eax,ds:0xc002cfac
c001c217:	c3                   	ret    

c001c218 <enableIRQs()>:
c001c218:	a1 ac cf 02 c0       	mov    eax,ds:0xc002cfac
c001c21d:	48                   	dec    eax
c001c21e:	a3 ac cf 02 c0       	mov    ds:0xc002cfac,eax
c001c223:	75 01                	jne    c001c226 <enableIRQs()+0xe>
c001c225:	fb                   	sti    
c001c226:	c3                   	ret    

c001c227 <lockScheduler()>:
c001c227:	eb e1                	jmp    c001c20a <disableIRQs()>

c001c229 <unlockScheduler()>:
c001c229:	eb ed                	jmp    c001c218 <enableIRQs()>

c001c22b <userModeEntryPoint(void*)>:
c001c22b:	83 ec 0c             	sub    esp,0xc
c001c22e:	e8 f6 ff ff ff       	call   c001c229 <unlockScheduler()>
c001c233:	fb                   	sti    
c001c234:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c239:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c23c:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001c242:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c246:	83 c4 0c             	add    esp,0xc
c001c249:	e9 91 40 fe ff       	jmp    c00002df <goToUsermode>

c001c24e <lockStuff()>:
c001c24e:	e8 b7 ff ff ff       	call   c001c20a <disableIRQs()>
c001c253:	ff 05 a8 cf 02 c0    	inc    DWORD PTR ds:0xc002cfa8
c001c259:	c3                   	ret    

c001c25a <taskStartupFunction>:
c001c25a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c25f:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001c262:	c3                   	ret    

c001c263 <updateTimeUsed()>:
c001c263:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c001c268:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c26e:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001c275:	74 50                	je     c001c2c7 <updateTimeUsed()+0x64>
c001c277:	57                   	push   edi
c001c278:	56                   	push   esi
c001c279:	53                   	push   ebx
c001c27a:	0f 31                	rdtsc  
c001c27c:	89 c1                	mov    ecx,eax
c001c27e:	a3 e8 cf 02 c0       	mov    ds:0xc002cfe8,eax
c001c283:	2b 0d d8 cf 02 c0    	sub    ecx,DWORD PTR ds:0xc002cfd8
c001c289:	89 d3                	mov    ebx,edx
c001c28b:	89 0d e0 cf 02 c0    	mov    DWORD PTR ds:0xc002cfe0,ecx
c001c291:	1b 1d dc cf 02 c0    	sbb    ebx,DWORD PTR ds:0xc002cfdc
c001c297:	a3 d8 cf 02 c0       	mov    ds:0xc002cfd8,eax
c001c29c:	89 1d e4 cf 02 c0    	mov    DWORD PTR ds:0xc002cfe4,ebx
c001c2a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2a7:	89 15 ec cf 02 c0    	mov    DWORD PTR ds:0xc002cfec,edx
c001c2ad:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001c2b0:	89 15 dc cf 02 c0    	mov    DWORD PTR ds:0xc002cfdc,edx
c001c2b6:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001c2b9:	01 f1                	add    ecx,esi
c001c2bb:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001c2be:	11 fb                	adc    ebx,edi
c001c2c0:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001c2c3:	5b                   	pop    ebx
c001c2c4:	5e                   	pop    esi
c001c2c5:	5f                   	pop    edi
c001c2c6:	c3                   	ret    
c001c2c7:	c3                   	ret    

c001c2c8 <switchToThread(ThreadControlBlock*)>:
c001c2c8:	53                   	push   ebx
c001c2c9:	83 ec 08             	sub    esp,0x8
c001c2cc:	a1 a8 cf 02 c0       	mov    eax,ds:0xc002cfa8
c001c2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2d5:	85 c0                	test   eax,eax
c001c2d7:	75 30                	jne    c001c309 <switchToThread(ThreadControlBlock*)+0x41>
c001c2d9:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001c2dc:	3c ff                	cmp    al,0xff
c001c2de:	74 25                	je     c001c305 <switchToThread(ThreadControlBlock*)+0x3d>
c001c2e0:	0f b6 d0             	movzx  edx,al
c001c2e3:	b8 84 03 00 00       	mov    eax,0x384
c001c2e8:	29 d0                	sub    eax,edx
c001c2ea:	c1 e0 10             	shl    eax,0x10
c001c2ed:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001c2f0:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001c2f3:	e8 6b ff ff ff       	call   c001c263 <updateTimeUsed()>
c001c2f8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001c2fc:	83 c4 08             	add    esp,0x8
c001c2ff:	5b                   	pop    ebx
c001c300:	e9 12 40 fe ff       	jmp    c0000317 <switchToThreadASM>
c001c305:	31 c0                	xor    eax,eax
c001c307:	eb e7                	jmp    c001c2f0 <switchToThread(ThreadControlBlock*)+0x28>
c001c309:	c7 05 a4 cf 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002cfa4,0x1
c001c313:	83 c4 08             	add    esp,0x8
c001c316:	5b                   	pop    ebx
c001c317:	c3                   	ret    

c001c318 <Semaphore::Semaphore(int)>:
c001c318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c31c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c320:	89 10                	mov    DWORD PTR [eax],edx
c001c322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c326:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c32d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c331:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c33c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c343:	90                   	nop
c001c344:	c3                   	ret    
c001c345:	90                   	nop

c001c346 <Mutex::Mutex()>:
c001c346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c34a:	6a 01                	push   0x1
c001c34c:	50                   	push   eax
c001c34d:	e8 c6 ff ff ff       	call   c001c318 <Semaphore::Semaphore(int)>
c001c352:	83 c4 08             	add    esp,0x8
c001c355:	90                   	nop
c001c356:	c3                   	ret    
c001c357:	90                   	nop

c001c358 <Process::createThread(void (*)(void*), void*, int)>:
c001c358:	55                   	push   ebp
c001c359:	31 c9                	xor    ecx,ecx
c001c35b:	57                   	push   edi
c001c35c:	56                   	push   esi
c001c35d:	53                   	push   ebx
c001c35e:	83 ec 1c             	sub    esp,0x1c
c001c361:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c365:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001c36c:	89 f2                	mov    edx,esi
c001c36e:	0f b7 c2             	movzx  eax,dx
c001c371:	83 e2 01             	and    edx,0x1
c001c374:	74 14                	je     c001c38a <Process::createThread(void (*)(void*), void*, int)+0x32>
c001c376:	d1 f8                	sar    eax,1
c001c378:	41                   	inc    ecx
c001c379:	89 c2                	mov    edx,eax
c001c37b:	83 f9 10             	cmp    ecx,0x10
c001c37e:	75 ee                	jne    c001c36e <Process::createThread(void (*)(void*), void*, int)+0x16>
c001c380:	83 c4 1c             	add    esp,0x1c
c001c383:	31 c0                	xor    eax,eax
c001c385:	5b                   	pop    ebx
c001c386:	5e                   	pop    esi
c001c387:	5f                   	pop    edi
c001c388:	5d                   	pop    ebp
c001c389:	c3                   	ret    
c001c38a:	83 ec 08             	sub    esp,0x8
c001c38d:	b8 01 00 00 00       	mov    eax,0x1
c001c392:	d3 e0                	shl    eax,cl
c001c394:	09 c6                	or     esi,eax
c001c396:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001c39c:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001c3a3:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001c3a6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c3a9:	01 ce                	add    esi,ecx
c001c3ab:	89 f0                	mov    eax,esi
c001c3ad:	c1 e0 05             	shl    eax,0x5
c001c3b0:	01 c6                	add    esi,eax
c001c3b2:	8d 04 33             	lea    eax,[ebx+esi*1]
c001c3b5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001c3bb:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001c3c1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001c3c5:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001c3cb:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001c3d1:	89 ca                	mov    edx,ecx
c001c3d3:	f7 da                	neg    edx
c001c3d5:	c1 e2 15             	shl    edx,0x15
c001c3d8:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001c3de:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001c3e4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001c3e8:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001c3f2:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001c3f8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c3fc:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001c402:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001c40c:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001c416:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001c41d:	50                   	push   eax
c001c41e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c422:	68 c8 cf 02 c0       	push   0xc002cfc8
c001c427:	e8 44 a4 00 00       	call   c0026870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c42c:	83 c4 10             	add    esp,0x10
c001c42f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c433:	83 c4 1c             	add    esp,0x1c
c001c436:	5b                   	pop    ebx
c001c437:	5e                   	pop    esi
c001c438:	5f                   	pop    edi
c001c439:	5d                   	pop    ebp
c001c43a:	c3                   	ret    
c001c43b:	90                   	nop

c001c43c <Process::createUserThread()>:
c001c43c:	83 ec 0c             	sub    esp,0xc
c001c43f:	68 80 00 00 00       	push   0x80
c001c444:	6a 00                	push   0x0
c001c446:	68 2b c2 01 c0       	push   0xc001c22b
c001c44b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c44f:	e8 04 ff ff ff       	call   c001c358 <Process::createThread(void (*)(void*), void*, int)>
c001c454:	83 c4 1c             	add    esp,0x1c
c001c457:	c3                   	ret    

c001c458 <setupMultitasking(void (*)())>:
c001c458:	56                   	push   esi
c001c459:	53                   	push   ebx
c001c45a:	53                   	push   ebx
c001c45b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c45f:	eb 10                	jmp    c001c471 <setupMultitasking(void (*)())+0x19>
c001c461:	83 ec 0c             	sub    esp,0xc
c001c464:	68 c8 cf 02 c0       	push   0xc002cfc8
c001c469:	e8 54 a3 00 00       	call   c00267c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c46e:	83 c4 10             	add    esp,0x10
c001c471:	83 ec 0c             	sub    esp,0xc
c001c474:	68 c8 cf 02 c0       	push   0xc002cfc8
c001c479:	e8 28 a3 00 00       	call   c00267a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c47e:	83 c4 10             	add    esp,0x10
c001c481:	84 c0                	test   al,al
c001c483:	74 dc                	je     c001c461 <setupMultitasking(void (*)())+0x9>
c001c485:	83 ec 0c             	sub    esp,0xc
c001c488:	68 3b 07 00 00       	push   0x73b
c001c48d:	e8 3e 30 ff ff       	call   c000f4d0 <malloc>
c001c492:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001c499:	89 c3                	mov    ebx,eax
c001c49b:	6a 00                	push   0x0
c001c49d:	68 6b 9a 02 c0       	push   0xc0029a6b
c001c4a2:	6a 01                	push   0x1
c001c4a4:	50                   	push   eax
c001c4a5:	e8 cc fb ff ff       	call   c001c076 <Process::Process(bool, char const*, Process*, char**)>
c001c4aa:	83 c4 18             	add    esp,0x18
c001c4ad:	89 1d d4 cf 02 c0    	mov    DWORD PTR ds:0xc002cfd4,ebx
c001c4b3:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001c4b9:	68 8c 9b 02 c0       	push   0xc0029b8c
c001c4be:	e8 da 61 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001c4c3:	58                   	pop    eax
c001c4c4:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001c4ca:	e8 90 43 ff ff       	call   c001085f <setActiveTerminal(VgaText*)>
c001c4cf:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001c4d7:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001c4dd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c4e0:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001c4ea:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001c4f0:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001c4f6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001c500:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001c50a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001c514:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001c51a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001c520:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001c52a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001c530:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001c53a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001c540:	5a                   	pop    edx
c001c541:	59                   	pop    ecx
c001c542:	68 67 9a 02 c0       	push   0xc0029a67
c001c547:	50                   	push   eax
c001c548:	e8 dd 41 fe ff       	call   c000072a <strcpy>
c001c54d:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001c554:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001c558:	83 c4 14             	add    esp,0x14
c001c55b:	5b                   	pop    ebx
c001c55c:	5e                   	pop    esi
c001c55d:	e9 a7 3d fe ff       	jmp    c0000309 <switchToThreadASMFirstTime>

c001c562 <schedule()>:
c001c562:	a1 a8 cf 02 c0       	mov    eax,ds:0xc002cfa8
c001c567:	85 c0                	test   eax,eax
c001c569:	74 0b                	je     c001c576 <schedule()+0x14>
c001c56b:	c7 05 a4 cf 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002cfa4,0x1
c001c575:	c3                   	ret    
c001c576:	53                   	push   ebx
c001c577:	83 ec 14             	sub    esp,0x14
c001c57a:	68 c8 cf 02 c0       	push   0xc002cfc8
c001c57f:	e8 22 a2 00 00       	call   c00267a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c584:	83 c4 10             	add    esp,0x10
c001c587:	84 c0                	test   al,al
c001c589:	75 38                	jne    c001c5c3 <schedule()+0x61>
c001c58b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c590:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c593:	4a                   	dec    edx
c001c594:	74 32                	je     c001c5c8 <schedule()+0x66>
c001c596:	83 ec 0c             	sub    esp,0xc
c001c599:	68 c8 cf 02 c0       	push   0xc002cfc8
c001c59e:	e8 fb a1 00 00       	call   c002679e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c5a3:	c7 04 24 c8 cf 02 c0 	mov    DWORD PTR [esp],0xc002cfc8
c001c5aa:	89 c3                	mov    ebx,eax
c001c5ac:	e8 11 a2 00 00       	call   c00267c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c5b1:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001c5b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c5bb:	e8 08 fd ff ff       	call   c001c2c8 <switchToThread(ThreadControlBlock*)>
c001c5c0:	83 c4 10             	add    esp,0x10
c001c5c3:	83 c4 08             	add    esp,0x8
c001c5c6:	5b                   	pop    ebx
c001c5c7:	c3                   	ret    
c001c5c8:	83 ec 08             	sub    esp,0x8
c001c5cb:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001c5d2:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001c5d8:	68 c8 cf 02 c0       	push   0xc002cfc8
c001c5dd:	e8 8e a2 00 00       	call   c0026870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c5e2:	83 c4 10             	add    esp,0x10
c001c5e5:	eb af                	jmp    c001c596 <schedule()+0x34>

c001c5e7 <unlockStuff()>:
c001c5e7:	a1 a8 cf 02 c0       	mov    eax,ds:0xc002cfa8
c001c5ec:	48                   	dec    eax
c001c5ed:	a3 a8 cf 02 c0       	mov    ds:0xc002cfa8,eax
c001c5f2:	75 09                	jne    c001c5fd <unlockStuff()+0x16>
c001c5f4:	a1 a4 cf 02 c0       	mov    eax,ds:0xc002cfa4
c001c5f9:	85 c0                	test   eax,eax
c001c5fb:	75 05                	jne    c001c602 <unlockStuff()+0x1b>
c001c5fd:	e9 16 fc ff ff       	jmp    c001c218 <enableIRQs()>
c001c602:	83 ec 0c             	sub    esp,0xc
c001c605:	c7 05 a4 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cfa4,0x0
c001c60f:	e8 4e ff ff ff       	call   c001c562 <schedule()>
c001c614:	83 c4 0c             	add    esp,0xc
c001c617:	e9 fc fb ff ff       	jmp    c001c218 <enableIRQs()>

c001c61c <Semaphore::tryAcquire()>:
c001c61c:	83 ec 0c             	sub    esp,0xc
c001c61f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c623:	e8 26 fc ff ff       	call   c001c24e <lockStuff()>
c001c628:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c62b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001c62d:	7c 0b                	jl     c001c63a <Semaphore::tryAcquire()+0x1e>
c001c62f:	e8 b3 ff ff ff       	call   c001c5e7 <unlockStuff()>
c001c634:	31 c0                	xor    eax,eax
c001c636:	83 c4 0c             	add    esp,0xc
c001c639:	c3                   	ret    
c001c63a:	42                   	inc    edx
c001c63b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c63e:	e8 a4 ff ff ff       	call   c001c5e7 <unlockStuff()>
c001c643:	b0 01                	mov    al,0x1
c001c645:	83 c4 0c             	add    esp,0xc
c001c648:	c3                   	ret    
c001c649:	90                   	nop

c001c64a <Semaphore::assertLocked(char const*)>:
c001c64a:	83 ec 0c             	sub    esp,0xc
c001c64d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c651:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c655:	e8 f4 fb ff ff       	call   c001c24e <lockStuff()>
c001c65a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c65c:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001c65f:	7c 05                	jl     c001c666 <Semaphore::assertLocked(char const*)+0x1c>
c001c661:	83 c4 0c             	add    esp,0xc
c001c664:	eb 81                	jmp    c001c5e7 <unlockStuff()>
c001c666:	83 ec 0c             	sub    esp,0xc
c001c669:	52                   	push   edx
c001c66a:	e8 72 cb ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001c66f:	83 c4 10             	add    esp,0x10
c001c672:	83 c4 0c             	add    esp,0xc
c001c675:	e9 6d ff ff ff       	jmp    c001c5e7 <unlockStuff()>

c001c67a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001c67a:	83 ec 0c             	sub    esp,0xc
c001c67d:	e8 90 fb ff ff       	call   c001c212 <getIRQNestingLevel()>
c001c682:	83 ec 08             	sub    esp,0x8
c001c685:	50                   	push   eax
c001c686:	68 c0 9b 02 c0       	push   0xc0029bc0
c001c68b:	e8 0d 60 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001c690:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c694:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c699:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c69c:	e8 c1 fe ff ff       	call   c001c562 <schedule()>
c001c6a1:	e8 83 fb ff ff       	call   c001c229 <unlockScheduler()>
c001c6a6:	e8 67 fb ff ff       	call   c001c212 <getIRQNestingLevel()>
c001c6ab:	5a                   	pop    edx
c001c6ac:	59                   	pop    ecx
c001c6ad:	50                   	push   eax
c001c6ae:	68 f4 9b 02 c0       	push   0xc0029bf4
c001c6b3:	e8 e5 5f ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001c6b8:	83 c4 1c             	add    esp,0x1c
c001c6bb:	c3                   	ret    

c001c6bc <blockTask(TaskState)>:
c001c6bc:	83 ec 0c             	sub    esp,0xc
c001c6bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c6c3:	e8 5f fb ff ff       	call   c001c227 <lockScheduler()>
c001c6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6cd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c6d0:	e8 8d fe ff ff       	call   c001c562 <schedule()>
c001c6d5:	83 c4 0c             	add    esp,0xc
c001c6d8:	e9 4c fb ff ff       	jmp    c001c229 <unlockScheduler()>

c001c6dd <waitTask(int, int*, int)>:
c001c6dd:	83 ec 18             	sub    esp,0x18
c001c6e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c6e9:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001c6ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c6f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6f5:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001c6f8:	6a 07                	push   0x7
c001c6fa:	e8 bd ff ff ff       	call   c001c6bc <blockTask(TaskState)>
c001c6ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c704:	83 c4 10             	add    esp,0x10
c001c707:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001c70a:	85 d2                	test   edx,edx
c001c70c:	74 0a                	je     c001c718 <waitTask(int, int*, int)+0x3b>
c001c70e:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001c711:	89 02                	mov    DWORD PTR [edx],eax
c001c713:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c718:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001c71b:	83 c4 0c             	add    esp,0xc
c001c71e:	c3                   	ret    

c001c71f <nanoSleepUntil(unsigned long long)>:
c001c71f:	83 ec 0c             	sub    esp,0xc
c001c722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c726:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c72a:	3b 05 30 c1 02 c0    	cmp    eax,DWORD PTR ds:0xc002c130
c001c730:	89 d1                	mov    ecx,edx
c001c732:	1b 0d 34 c1 02 c0    	sbb    ecx,DWORD PTR ds:0xc002c134
c001c738:	73 04                	jae    c001c73e <nanoSleepUntil(unsigned long long)+0x1f>
c001c73a:	83 c4 0c             	add    esp,0xc
c001c73d:	c3                   	ret    
c001c73e:	e8 0b fb ff ff       	call   c001c24e <lockStuff()>
c001c743:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c749:	83 ec 08             	sub    esp,0x8
c001c74c:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001c74f:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001c752:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001c758:	68 bc cf 02 c0       	push   0xc002cfbc
c001c75d:	e8 0e a1 00 00       	call   c0026870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c762:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001c769:	e8 4e ff ff ff       	call   c001c6bc <blockTask(TaskState)>
c001c76e:	83 c4 1c             	add    esp,0x1c
c001c771:	e9 71 fe ff ff       	jmp    c001c5e7 <unlockStuff()>

c001c776 <nanoSleep(unsigned long long)>:
c001c776:	a1 30 c1 02 c0       	mov    eax,ds:0xc002c130
c001c77b:	8b 15 34 c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c134
c001c781:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001c785:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001c789:	eb 94                	jmp    c001c71f <nanoSleepUntil(unsigned long long)>

c001c78b <sleep(unsigned long long)>:
c001c78b:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001c793:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001c798:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001c79c:	01 ca                	add    edx,ecx
c001c79e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7a2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c7a6:	eb ce                	jmp    c001c776 <nanoSleep(unsigned long long)>

c001c7a8 <Semaphore::acquire()>:
c001c7a8:	83 ec 0c             	sub    esp,0xc
c001c7ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7af:	e8 9a fa ff ff       	call   c001c24e <lockStuff()>
c001c7b4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c7b7:	3b 10                	cmp    edx,DWORD PTR [eax]
c001c7b9:	7d 0c                	jge    c001c7c7 <Semaphore::acquire()+0x1f>
c001c7bb:	42                   	inc    edx
c001c7bc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c7bf:	83 c4 0c             	add    esp,0xc
c001c7c2:	e9 20 fe ff ff       	jmp    c001c5e7 <unlockStuff()>
c001c7c7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c7cd:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001c7d4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c7d7:	85 d2                	test   edx,edx
c001c7d9:	74 2a                	je     c001c805 <Semaphore::acquire()+0x5d>
c001c7db:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c7de:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c7e4:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001c7e7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c7ed:	83 ec 0c             	sub    esp,0xc
c001c7f0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c7f3:	6a 05                	push   0x5
c001c7f5:	e8 c2 fe ff ff       	call   c001c6bc <blockTask(TaskState)>
c001c7fa:	83 c4 10             	add    esp,0x10
c001c7fd:	83 c4 0c             	add    esp,0xc
c001c800:	e9 e2 fd ff ff       	jmp    c001c5e7 <unlockStuff()>
c001c805:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c80b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c80e:	eb d7                	jmp    c001c7e7 <Semaphore::acquire()+0x3f>

c001c810 <taskReturned>:
c001c810:	83 ec 18             	sub    esp,0x18
c001c813:	68 28 9c 02 c0       	push   0xc0029c28
c001c818:	e8 c4 c9 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001c81d:	83 c4 10             	add    esp,0x10
c001c820:	83 ec 0c             	sub    esp,0xc
c001c823:	6a 02                	push   0x2
c001c825:	e8 92 fe ff ff       	call   c001c6bc <blockTask(TaskState)>
c001c82a:	e8 f8 f9 ff ff       	call   c001c227 <lockScheduler()>
c001c82f:	e8 2e fd ff ff       	call   c001c562 <schedule()>
c001c834:	e8 f0 f9 ff ff       	call   c001c229 <unlockScheduler()>
c001c839:	83 c4 10             	add    esp,0x10
c001c83c:	eb e2                	jmp    c001c820 <taskReturned+0x10>

c001c83e <unblockTask(ThreadControlBlock*)>:
c001c83e:	53                   	push   ebx
c001c83f:	83 ec 08             	sub    esp,0x8
c001c842:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c846:	e8 dc f9 ff ff       	call   c001c227 <lockScheduler()>
c001c84b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c84e:	85 c0                	test   eax,eax
c001c850:	74 5c                	je     c001c8ae <unblockTask(ThreadControlBlock*)+0x70>
c001c852:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c855:	48                   	dec    eax
c001c856:	74 31                	je     c001c889 <unblockTask(ThreadControlBlock*)+0x4b>
c001c858:	83 ec 0c             	sub    esp,0xc
c001c85b:	68 c8 cf 02 c0       	push   0xc002cfc8
c001c860:	e8 39 9f 00 00       	call   c002679e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c865:	83 c4 10             	add    esp,0x10
c001c868:	85 c0                	test   eax,eax
c001c86a:	75 17                	jne    c001c883 <unblockTask(ThreadControlBlock*)+0x45>
c001c86c:	eb 65                	jmp    c001c8d3 <unblockTask(ThreadControlBlock*)+0x95>
c001c86e:	83 ec 08             	sub    esp,0x8
c001c871:	50                   	push   eax
c001c872:	68 c8 cf 02 c0       	push   0xc002cfc8
c001c877:	e8 fc a1 00 00       	call   c0026a78 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001c87c:	83 c4 10             	add    esp,0x10
c001c87f:	85 c0                	test   eax,eax
c001c881:	74 50                	je     c001c8d3 <unblockTask(ThreadControlBlock*)+0x95>
c001c883:	39 c3                	cmp    ebx,eax
c001c885:	75 e7                	jne    c001c86e <unblockTask(ThreadControlBlock*)+0x30>
c001c887:	eb 1c                	jmp    c001c8a5 <unblockTask(ThreadControlBlock*)+0x67>
c001c889:	83 ec 0c             	sub    esp,0xc
c001c88c:	68 18 9d 02 c0       	push   0xc0029d18
c001c891:	e8 07 5e ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001c896:	c7 04 24 a4 9c 02 c0 	mov    DWORD PTR [esp],0xc0029ca4
c001c89d:	e8 fb 5d ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001c8a2:	83 c4 10             	add    esp,0x10
c001c8a5:	83 c4 08             	add    esp,0x8
c001c8a8:	5b                   	pop    ebx
c001c8a9:	e9 7b f9 ff ff       	jmp    c001c229 <unlockScheduler()>
c001c8ae:	83 ec 0c             	sub    esp,0xc
c001c8b1:	68 5c 9c 02 c0       	push   0xc0029c5c
c001c8b6:	e8 e2 5d ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001c8bb:	c7 04 24 a4 9c 02 c0 	mov    DWORD PTR [esp],0xc0029ca4
c001c8c2:	e8 d6 5d ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001c8c7:	83 c4 10             	add    esp,0x10
c001c8ca:	83 c4 08             	add    esp,0x8
c001c8cd:	5b                   	pop    ebx
c001c8ce:	e9 56 f9 ff ff       	jmp    c001c229 <unlockScheduler()>
c001c8d3:	83 ec 08             	sub    esp,0x8
c001c8d6:	53                   	push   ebx
c001c8d7:	68 c8 cf 02 c0       	push   0xc002cfc8
c001c8dc:	e8 8f 9f 00 00       	call   c0026870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c8e1:	83 c4 10             	add    esp,0x10
c001c8e4:	83 c4 08             	add    esp,0x8
c001c8e7:	5b                   	pop    ebx
c001c8e8:	e9 3c f9 ff ff       	jmp    c001c229 <unlockScheduler()>

c001c8ed <cleanupTerminatedTask(ThreadControlBlock*)>:
c001c8ed:	55                   	push   ebp
c001c8ee:	57                   	push   edi
c001c8ef:	56                   	push   esi
c001c8f0:	53                   	push   ebx
c001c8f1:	83 ec 1c             	sub    esp,0x1c
c001c8f4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c8f8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c8fb:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001c901:	85 c9                	test   ecx,ecx
c001c903:	7e 20                	jle    c001c925 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001c905:	31 f6                	xor    esi,esi
c001c907:	83 ec 0c             	sub    esp,0xc
c001c90a:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001c911:	46                   	inc    esi
c001c912:	e8 c9 2b ff ff       	call   c000f4e0 <free>
c001c917:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c91a:	83 c4 10             	add    esp,0x10
c001c91d:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001c923:	7f e2                	jg     c001c907 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001c925:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c92f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001c934:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001c937:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c93a:	d3 c0                	rol    eax,cl
c001c93c:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001c943:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c946:	89 f7                	mov    edi,esi
c001c948:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001c950:	0f 85 4f 01 00 00    	jne    c001caa5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001c956:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c95c:	85 c0                	test   eax,eax
c001c95e:	0f 84 aa 00 00 00    	je     c001ca0e <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c964:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001c967:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c96b:	31 c9                	xor    ecx,ecx
c001c96d:	eb 10                	jmp    c001c97f <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001c96f:	41                   	inc    ecx
c001c970:	83 f9 10             	cmp    ecx,0x10
c001c973:	0f 84 95 00 00 00    	je     c001ca0e <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c979:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c97f:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001c986:	d3 fa                	sar    edx,cl
c001c988:	83 e2 01             	and    edx,0x1
c001c98b:	74 e2                	je     c001c96f <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c98d:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001c990:	01 ca                	add    edx,ecx
c001c992:	89 d5                	mov    ebp,edx
c001c994:	c1 e5 05             	shl    ebp,0x5
c001c997:	01 ea                	add    edx,ebp
c001c999:	01 d0                	add    eax,edx
c001c99b:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001c9a1:	83 fd 07             	cmp    ebp,0x7
c001c9a4:	75 c9                	jne    c001c96f <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c9a6:	05 40 02 00 00       	add    eax,0x240
c001c9ab:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001c9ae:	83 fd ff             	cmp    ebp,0xffffffff
c001c9b1:	0f 8c 08 01 00 00    	jl     c001cabf <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001c9b7:	0f 84 b9 01 00 00    	je     c001cb76 <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001c9bd:	85 ed                	test   ebp,ebp
c001c9bf:	0f 84 a0 01 00 00    	je     c001cb65 <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001c9c5:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001c9c7:	75 a6                	jne    c001c96f <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c9c9:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c9cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c9d3:	01 d0                	add    eax,edx
c001c9d5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001c9d9:	83 ec 0c             	sub    esp,0xc
c001c9dc:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001c9e2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c9e5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c9eb:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001c9f2:	50                   	push   eax
c001c9f3:	e8 46 fe ff ff       	call   c001c83e <unblockTask(ThreadControlBlock*)>
c001c9f8:	83 c4 10             	add    esp,0x10
c001c9fb:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c9fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca02:	89 f7                	mov    edi,esi
c001ca04:	41                   	inc    ecx
c001ca05:	83 f9 10             	cmp    ecx,0x10
c001ca08:	0f 85 6b ff ff ff    	jne    c001c979 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001ca0e:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001ca14:	85 c0                	test   eax,eax
c001ca16:	74 5d                	je     c001ca75 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001ca18:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001ca1e:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001ca24:	74 4f                	je     c001ca75 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001ca26:	83 ec 0c             	sub    esp,0xc
c001ca29:	68 c8 cf 02 c0       	push   0xc002cfc8
c001ca2e:	e8 6b 9d 00 00       	call   c002679e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ca33:	c7 04 24 c8 cf 02 c0 	mov    DWORD PTR [esp],0xc002cfc8
c001ca3a:	89 c7                	mov    edi,eax
c001ca3c:	e8 65 9d 00 00       	call   c00267a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ca41:	83 c4 10             	add    esp,0x10
c001ca44:	84 c0                	test   al,al
c001ca46:	0f 84 e4 00 00 00    	je     c001cb30 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ca4c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ca4f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ca55:	85 d2                	test   edx,edx
c001ca57:	74 0f                	je     c001ca68 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001ca59:	83 ec 0c             	sub    esp,0xc
c001ca5c:	8b 02                	mov    eax,DWORD PTR [edx]
c001ca5e:	52                   	push   edx
c001ca5f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ca62:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ca65:	83 c4 10             	add    esp,0x10
c001ca68:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001ca72:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001ca75:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001ca7b:	85 db                	test   ebx,ebx
c001ca7d:	74 16                	je     c001ca95 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001ca7f:	83 ec 0c             	sub    esp,0xc
c001ca82:	53                   	push   ebx
c001ca83:	e8 84 51 ff ff       	call   c0011c0c <VAS::~VAS()>
c001ca88:	58                   	pop    eax
c001ca89:	5a                   	pop    edx
c001ca8a:	6a 10                	push   0x10
c001ca8c:	53                   	push   ebx
c001ca8d:	e8 2b 5b ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c001ca92:	83 c4 10             	add    esp,0x10
c001ca95:	83 ec 0c             	sub    esp,0xc
c001ca98:	68 72 9a 02 c0       	push   0xc0029a72
c001ca9d:	e8 fb 5b ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001caa2:	83 c4 10             	add    esp,0x10
c001caa5:	83 ec 08             	sub    esp,0x8
c001caa8:	68 3b 07 00 00       	push   0x73b
c001caad:	68 80 9a 02 c0       	push   0xc0029a80
c001cab2:	e8 e6 5b ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001cab7:	83 c4 2c             	add    esp,0x2c
c001caba:	5b                   	pop    ebx
c001cabb:	5e                   	pop    esi
c001cabc:	5f                   	pop    edi
c001cabd:	5d                   	pop    ebp
c001cabe:	c3                   	ret    
c001cabf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cac3:	83 ec 0c             	sub    esp,0xc
c001cac6:	68 5c 9d 02 c0       	push   0xc0029d5c
c001cacb:	e8 11 c7 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001cad0:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001cad3:	83 c4 10             	add    esp,0x10
c001cad6:	89 f7                	mov    edi,esi
c001cad8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cadc:	e9 8e fe ff ff       	jmp    c001c96f <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001cae1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cae7:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001caed:	75 1c                	jne    c001cb0b <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001caef:	83 ec 0c             	sub    esp,0xc
c001caf2:	68 c4 9d 02 c0       	push   0xc0029dc4
c001caf7:	e8 a1 5b ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001cafc:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001cb03:	e8 b4 fb ff ff       	call   c001c6bc <blockTask(TaskState)>
c001cb08:	83 c4 10             	add    esp,0x10
c001cb0b:	83 ec 08             	sub    esp,0x8
c001cb0e:	56                   	push   esi
c001cb0f:	68 c8 cf 02 c0       	push   0xc002cfc8
c001cb14:	e8 57 9d 00 00       	call   c0026870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cb19:	c7 04 24 c8 cf 02 c0 	mov    DWORD PTR [esp],0xc002cfc8
c001cb20:	e8 79 9c 00 00       	call   c002679e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cb25:	83 c4 10             	add    esp,0x10
c001cb28:	39 f8                	cmp    eax,edi
c001cb2a:	0f 84 1c ff ff ff    	je     c001ca4c <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001cb30:	83 ec 0c             	sub    esp,0xc
c001cb33:	68 c8 cf 02 c0       	push   0xc002cfc8
c001cb38:	e8 61 9c 00 00       	call   c002679e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cb3d:	c7 04 24 c8 cf 02 c0 	mov    DWORD PTR [esp],0xc002cfc8
c001cb44:	89 c6                	mov    esi,eax
c001cb46:	e8 77 9c 00 00       	call   c00267c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cb4b:	83 c4 10             	add    esp,0x10
c001cb4e:	39 f3                	cmp    ebx,esi
c001cb50:	74 b9                	je     c001cb0b <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001cb52:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001cb55:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001cb58:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001cb5e:	75 ab                	jne    c001cb0b <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001cb60:	e9 7c ff ff ff       	jmp    c001cae1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001cb65:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cb69:	83 ec 0c             	sub    esp,0xc
c001cb6c:	68 90 9d 02 c0       	push   0xc0029d90
c001cb71:	e9 55 ff ff ff       	jmp    c001cacb <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001cb76:	8b 36                	mov    esi,DWORD PTR [esi]
c001cb78:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cb7c:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001cb7f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001cb82:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001cb88:	01 d7                	add    edi,edx
c001cb8a:	89 f8                	mov    eax,edi
c001cb8c:	e9 44 fe ff ff       	jmp    c001c9d5 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001cb91 <cleanerTaskFunction(void*)>:
c001cb91:	53                   	push   ebx
c001cb92:	83 ec 08             	sub    esp,0x8
c001cb95:	e8 8f f6 ff ff       	call   c001c229 <unlockScheduler()>
c001cb9a:	e8 88 f6 ff ff       	call   c001c227 <lockScheduler()>
c001cb9f:	80 3d 8c cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cf8c,0x0
c001cba6:	0f 85 8e 00 00 00    	jne    c001cc3a <cleanerTaskFunction(void*)+0xa9>
c001cbac:	83 ec 0c             	sub    esp,0xc
c001cbaf:	6a 02                	push   0x2
c001cbb1:	e8 c4 fa ff ff       	call   c001c67a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001cbb6:	83 c4 10             	add    esp,0x10
c001cbb9:	c6 05 8c cf 02 c0 00 	mov    BYTE PTR ds:0xc002cf8c,0x0
c001cbc0:	e8 89 f6 ff ff       	call   c001c24e <lockStuff()>
c001cbc5:	e8 5d f6 ff ff       	call   c001c227 <lockScheduler()>
c001cbca:	83 ec 0c             	sub    esp,0xc
c001cbcd:	68 b0 cf 02 c0       	push   0xc002cfb0
c001cbd2:	e8 cf 9b 00 00       	call   c00267a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cbd7:	83 c4 10             	add    esp,0x10
c001cbda:	84 c0                	test   al,al
c001cbdc:	75 40                	jne    c001cc1e <cleanerTaskFunction(void*)+0x8d>
c001cbde:	83 ec 0c             	sub    esp,0xc
c001cbe1:	68 b0 cf 02 c0       	push   0xc002cfb0
c001cbe6:	e8 b3 9b 00 00       	call   c002679e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cbeb:	c7 04 24 b0 cf 02 c0 	mov    DWORD PTR [esp],0xc002cfb0
c001cbf2:	89 c3                	mov    ebx,eax
c001cbf4:	e8 c9 9b 00 00       	call   c00267c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cbf9:	c7 04 24 96 9a 02 c0 	mov    DWORD PTR [esp],0xc0029a96
c001cc00:	e8 98 5a ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001cc05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc08:	e8 e0 fc ff ff       	call   c001c8ed <cleanupTerminatedTask(ThreadControlBlock*)>
c001cc0d:	c7 04 24 af 9a 02 c0 	mov    DWORD PTR [esp],0xc0029aaf
c001cc14:	e8 84 5a ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001cc19:	83 c4 10             	add    esp,0x10
c001cc1c:	eb ac                	jmp    c001cbca <cleanerTaskFunction(void*)+0x39>
c001cc1e:	e8 06 f6 ff ff       	call   c001c229 <unlockScheduler()>
c001cc23:	e8 bf f9 ff ff       	call   c001c5e7 <unlockStuff()>
c001cc28:	e8 fa f5 ff ff       	call   c001c227 <lockScheduler()>
c001cc2d:	80 3d 8c cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cf8c,0x0
c001cc34:	0f 84 72 ff ff ff    	je     c001cbac <cleanerTaskFunction(void*)+0x1b>
c001cc3a:	e8 ea f5 ff ff       	call   c001c229 <unlockScheduler()>
c001cc3f:	e9 75 ff ff ff       	jmp    c001cbb9 <cleanerTaskFunction(void*)+0x28>

c001cc44 <terminateTask(int)>:
c001cc44:	83 ec 14             	sub    esp,0x14
c001cc47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc4c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc4f:	83 c0 0c             	add    eax,0xc
c001cc52:	50                   	push   eax
c001cc53:	68 ec 9d 02 c0       	push   0xc0029dec
c001cc58:	e8 40 5a ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001cc5d:	e8 ec f5 ff ff       	call   c001c24e <lockStuff()>
c001cc62:	e8 c0 f5 ff ff       	call   c001c227 <lockScheduler()>
c001cc67:	c7 04 24 c2 9a 02 c0 	mov    DWORD PTR [esp],0xc0029ac2
c001cc6e:	e8 2a 5a ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001cc73:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cc77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc7c:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001cc7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc84:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001cc87:	5a                   	pop    edx
c001cc88:	59                   	pop    ecx
c001cc89:	50                   	push   eax
c001cc8a:	68 b0 cf 02 c0       	push   0xc002cfb0
c001cc8f:	e8 dc 9b 00 00       	call   c0026870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cc94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc99:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001cca0:	c7 04 24 dc 9a 02 c0 	mov    DWORD PTR [esp],0xc0029adc
c001cca7:	e8 f1 59 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001ccac:	83 c4 10             	add    esp,0x10
c001ccaf:	a1 88 cf 02 c0       	mov    eax,ds:0xc002cf88
c001ccb4:	85 c0                	test   eax,eax
c001ccb6:	74 5a                	je     c001cd12 <terminateTask(int)+0xce>
c001ccb8:	83 ec 0c             	sub    esp,0xc
c001ccbb:	68 f6 9a 02 c0       	push   0xc0029af6
c001ccc0:	e8 d8 59 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001ccc5:	58                   	pop    eax
c001ccc6:	c6 05 8c cf 02 c0 01 	mov    BYTE PTR ds:0xc002cf8c,0x1
c001cccd:	ff 35 88 cf 02 c0    	push   DWORD PTR ds:0xc002cf88
c001ccd3:	e8 66 fb ff ff       	call   c001c83e <unblockTask(ThreadControlBlock*)>
c001ccd8:	c7 04 24 10 9b 02 c0 	mov    DWORD PTR [esp],0xc0029b10
c001ccdf:	e8 b9 59 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001cce4:	83 c4 10             	add    esp,0x10
c001cce7:	e8 3d f5 ff ff       	call   c001c229 <unlockScheduler()>
c001ccec:	e8 f6 f8 ff ff       	call   c001c5e7 <unlockStuff()>
c001ccf1:	83 ec 0c             	sub    esp,0xc
c001ccf4:	68 48 9b 02 c0       	push   0xc0029b48
c001ccf9:	e8 9f 59 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001ccfe:	83 c4 10             	add    esp,0x10
c001cd01:	e8 21 f5 ff ff       	call   c001c227 <lockScheduler()>
c001cd06:	e8 57 f8 ff ff       	call   c001c562 <schedule()>
c001cd0b:	e8 19 f5 ff ff       	call   c001c229 <unlockScheduler()>
c001cd10:	eb ef                	jmp    c001cd01 <terminateTask(int)+0xbd>
c001cd12:	83 ec 0c             	sub    esp,0xc
c001cd15:	68 2a 9b 02 c0       	push   0xc0029b2a
c001cd1a:	e8 7e 59 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001cd1f:	83 c4 10             	add    esp,0x10
c001cd22:	eb c3                	jmp    c001cce7 <terminateTask(int)+0xa3>

c001cd24 <Thr::terminateFromIRQ(int)>:
c001cd24:	83 ec 18             	sub    esp,0x18
c001cd27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd2b:	e8 14 ff ff ff       	call   c001cc44 <terminateTask(int)>

c001cd30 <Semaphore::release()>:
c001cd30:	83 ec 0c             	sub    esp,0xc
c001cd33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd37:	e8 12 f5 ff ff       	call   c001c24e <lockStuff()>
c001cd3c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001cd3f:	85 d2                	test   edx,edx
c001cd41:	74 1a                	je     c001cd5d <Semaphore::release()+0x2d>
c001cd43:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001cd46:	83 ec 0c             	sub    esp,0xc
c001cd49:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001cd4c:	52                   	push   edx
c001cd4d:	e8 ec fa ff ff       	call   c001c83e <unblockTask(ThreadControlBlock*)>
c001cd52:	83 c4 10             	add    esp,0x10
c001cd55:	83 c4 0c             	add    esp,0xc
c001cd58:	e9 8a f8 ff ff       	jmp    c001c5e7 <unlockStuff()>
c001cd5d:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001cd60:	83 c4 0c             	add    esp,0xc
c001cd63:	e9 7f f8 ff ff       	jmp    c001c5e7 <unlockStuff()>

c001cd68 <__static_initialization_and_destruction_0(int, int)>:
c001cd68:	83 ec 0c             	sub    esp,0xc
c001cd6b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001cd70:	0f 85 88 00 00 00    	jne    c001cdfe <__static_initialization_and_destruction_0(int, int)+0x96>
c001cd76:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001cd7e:	75 7e                	jne    c001cdfe <__static_initialization_and_destruction_0(int, int)+0x96>
c001cd80:	83 ec 0c             	sub    esp,0xc
c001cd83:	68 c8 cf 02 c0       	push   0xc002cfc8
c001cd88:	e8 93 9c 00 00       	call   c0026a20 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001cd8d:	83 c4 10             	add    esp,0x10
c001cd90:	83 ec 04             	sub    esp,0x4
c001cd93:	68 70 aa 02 c0       	push   0xc002aa70
c001cd98:	68 c8 cf 02 c0       	push   0xc002cfc8
c001cd9d:	68 e0 69 02 c0       	push   0xc00269e0
c001cda2:	e8 90 57 ff ff       	call   c0012537 <__cxa_atexit>
c001cda7:	83 c4 10             	add    esp,0x10
c001cdaa:	83 ec 0c             	sub    esp,0xc
c001cdad:	68 bc cf 02 c0       	push   0xc002cfbc
c001cdb2:	e8 69 9c 00 00       	call   c0026a20 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001cdb7:	83 c4 10             	add    esp,0x10
c001cdba:	83 ec 04             	sub    esp,0x4
c001cdbd:	68 70 aa 02 c0       	push   0xc002aa70
c001cdc2:	68 bc cf 02 c0       	push   0xc002cfbc
c001cdc7:	68 e0 69 02 c0       	push   0xc00269e0
c001cdcc:	e8 66 57 ff ff       	call   c0012537 <__cxa_atexit>
c001cdd1:	83 c4 10             	add    esp,0x10
c001cdd4:	83 ec 0c             	sub    esp,0xc
c001cdd7:	68 b0 cf 02 c0       	push   0xc002cfb0
c001cddc:	e8 3f 9c 00 00       	call   c0026a20 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001cde1:	83 c4 10             	add    esp,0x10
c001cde4:	83 ec 04             	sub    esp,0x4
c001cde7:	68 70 aa 02 c0       	push   0xc002aa70
c001cdec:	68 b0 cf 02 c0       	push   0xc002cfb0
c001cdf1:	68 e0 69 02 c0       	push   0xc00269e0
c001cdf6:	e8 3c 57 ff ff       	call   c0012537 <__cxa_atexit>
c001cdfb:	83 c4 10             	add    esp,0x10
c001cdfe:	90                   	nop
c001cdff:	83 c4 0c             	add    esp,0xc
c001ce02:	c3                   	ret    

c001ce03 <_GLOBAL__sub_I_kernelProcess>:
c001ce03:	83 ec 0c             	sub    esp,0xc
c001ce06:	83 ec 08             	sub    esp,0x8
c001ce09:	68 ff ff 00 00       	push   0xffff
c001ce0e:	6a 01                	push   0x1
c001ce10:	e8 53 ff ff ff       	call   c001cd68 <__static_initialization_and_destruction_0(int, int)>
c001ce15:	83 c4 10             	add    esp,0x10
c001ce18:	83 c4 0c             	add    esp,0xc
c001ce1b:	c3                   	ret    

c001ce1c <Vm::inbv(unsigned short)>:
c001ce1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ce20:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ce25:	75 06                	jne    c001ce2d <Vm::inbv(unsigned short)+0x11>
c001ce27:	a0 0c d0 02 c0       	mov    al,ds:0xc002d00c
c001ce2c:	c3                   	ret    
c001ce2d:	ec                   	in     al,dx
c001ce2e:	c3                   	ret    

c001ce2f <Vm::outbv(unsigned short, unsigned char)>:
c001ce2f:	53                   	push   ebx
c001ce30:	83 ec 08             	sub    esp,0x8
c001ce33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ce37:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ce3b:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ce40:	75 38                	jne    c001ce7a <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ce42:	0f b6 c3             	movzx  eax,bl
c001ce45:	51                   	push   ecx
c001ce46:	51                   	push   ecx
c001ce47:	50                   	push   eax
c001ce48:	68 0b 9e 02 c0       	push   0xc0029e0b
c001ce4d:	e8 4b 58 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001ce52:	8b 15 0c d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d00c
c001ce58:	83 c4 10             	add    esp,0x10
c001ce5b:	8d 42 01             	lea    eax,[edx+0x1]
c001ce5e:	88 9a 20 d0 02 c0    	mov    BYTE PTR [edx-0x3ffd2fe0],bl
c001ce64:	a3 0c d0 02 c0       	mov    ds:0xc002d00c,eax
c001ce69:	83 f8 20             	cmp    eax,0x20
c001ce6c:	75 0f                	jne    c001ce7d <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ce6e:	c7 05 0c d0 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002d00c,0x1f
c001ce78:	eb 03                	jmp    c001ce7d <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ce7a:	88 d8                	mov    al,bl
c001ce7c:	ee                   	out    dx,al
c001ce7d:	83 c4 08             	add    esp,0x8
c001ce80:	5b                   	pop    ebx
c001ce81:	c3                   	ret    

c001ce82 <Vm::realToLinear(unsigned short, unsigned short)>:
c001ce82:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ce87:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ce8c:	c1 e0 04             	shl    eax,0x4
c001ce8f:	01 d0                	add    eax,edx
c001ce91:	c3                   	ret    

c001ce92 <Vm::getSegment(unsigned int)>:
c001ce92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce96:	c1 e8 10             	shr    eax,0x10
c001ce99:	c3                   	ret    

c001ce9a <Vm::getOffset(unsigned int)>:
c001ce9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce9e:	c3                   	ret    

c001ce9f <Vm::mainloop2()>:
c001ce9f:	83 ec 0c             	sub    esp,0xc
c001cea2:	e8 80 f3 ff ff       	call   c001c227 <lockScheduler()>
c001cea7:	83 ec 0c             	sub    esp,0xc
c001ceaa:	c6 05 05 d0 02 c0 01 	mov    BYTE PTR ds:0xc002d005,0x1
c001ceb1:	6a 02                	push   0x2
c001ceb3:	e8 c2 f7 ff ff       	call   c001c67a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ceb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cebd:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001cec1:	52                   	push   edx
c001cec2:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001cec6:	52                   	push   edx
c001cec7:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001cecb:	52                   	push   edx
c001cecc:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ced0:	50                   	push   eax
c001ced1:	e8 d9 33 fe ff       	call   c00002af <goToVM86>
c001ced6:	83 c4 2c             	add    esp,0x2c
c001ced9:	c3                   	ret    

c001ceda <Vm::mainVm8086Loop(void*)>:
c001ceda:	83 ec 0c             	sub    esp,0xc
c001cedd:	e8 47 f3 ff ff       	call   c001c229 <unlockScheduler()>
c001cee2:	83 c4 0c             	add    esp,0xc
c001cee5:	eb b8                	jmp    c001ce9f <Vm::mainloop2()>

c001cee7 <Vm::mainloop3(unsigned long)>:
c001cee7:	53                   	push   ebx
c001cee8:	83 ec 08             	sub    esp,0x8
c001ceeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ceef:	e8 33 f3 ff ff       	call   c001c227 <lockScheduler()>
c001cef4:	83 ec 0c             	sub    esp,0xc
c001cef7:	89 1d 00 d0 02 c0    	mov    DWORD PTR ds:0xc002d000,ebx
c001cefd:	6a 02                	push   0x2
c001ceff:	c6 05 04 d0 02 c0 01 	mov    BYTE PTR ds:0xc002d004,0x1
c001cf06:	e8 6f f7 ff ff       	call   c001c67a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001cf0b:	83 c4 18             	add    esp,0x18
c001cf0e:	5b                   	pop    ebx
c001cf0f:	eb 8e                	jmp    c001ce9f <Vm::mainloop2()>

c001cf11 <Vm::initialise8086()>:
c001cf11:	83 ec 0c             	sub    esp,0xc
c001cf14:	68 80 00 00 00       	push   0x80
c001cf19:	6a 00                	push   0x0
c001cf1b:	68 da ce 01 c0       	push   0xc001ceda
c001cf20:	ff 35 d4 cf 02 c0    	push   DWORD PTR ds:0xc002cfd4
c001cf26:	e8 2d f4 ff ff       	call   c001c358 <Process::createThread(void (*)(void*), void*, int)>
c001cf2b:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001cf32:	a3 08 d0 02 c0       	mov    ds:0xc002d008,eax
c001cf37:	68 00 01 00 00       	push   0x100
c001cf3c:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c001cf41:	6a 00                	push   0x0
c001cf43:	6a 00                	push   0x0
c001cf45:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf4b:	e8 1c 51 ff ff       	call   c001206c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001cf50:	83 c4 2c             	add    esp,0x2c
c001cf53:	c3                   	ret    

c001cf54 <Vm::finish8086()>:
c001cf54:	53                   	push   ebx
c001cf55:	83 ec 08             	sub    esp,0x8
c001cf58:	e8 ca f2 ff ff       	call   c001c227 <lockScheduler()>
c001cf5d:	80 3d 04 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d004,0x0
c001cf64:	75 0c                	jne    c001cf72 <Vm::finish8086()+0x1e>
c001cf66:	e8 f7 f5 ff ff       	call   c001c562 <schedule()>
c001cf6b:	e8 b9 f2 ff ff       	call   c001c229 <unlockScheduler()>
c001cf70:	eb e6                	jmp    c001cf58 <Vm::finish8086()+0x4>
c001cf72:	83 ec 0c             	sub    esp,0xc
c001cf75:	8b 1d 00 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d000
c001cf7b:	ff 35 08 d0 02 c0    	push   DWORD PTR ds:0xc002d008
c001cf81:	c6 05 04 d0 02 c0 00 	mov    BYTE PTR ds:0xc002d004,0x0
c001cf88:	e8 b1 f8 ff ff       	call   c001c83e <unblockTask(ThreadControlBlock*)>
c001cf8d:	e8 97 f2 ff ff       	call   c001c229 <unlockScheduler()>
c001cf92:	89 d8                	mov    eax,ebx
c001cf94:	83 c4 18             	add    esp,0x18
c001cf97:	5b                   	pop    ebx
c001cf98:	c3                   	ret    

c001cf99 <Vm::getOutput8086(unsigned char*)>:
c001cf99:	83 ec 10             	sub    esp,0x10
c001cf9c:	ff 35 0c d0 02 c0    	push   DWORD PTR ds:0xc002d00c
c001cfa2:	68 20 d0 02 c0       	push   0xc002d020
c001cfa7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfab:	e8 a5 36 fe ff       	call   c0000655 <memcpy>
c001cfb0:	a1 0c d0 02 c0       	mov    eax,ds:0xc002d00c
c001cfb5:	c7 05 0c d0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d00c,0x0
c001cfbf:	83 c4 1c             	add    esp,0x1c
c001cfc2:	c3                   	ret    

c001cfc3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001cfc3:	55                   	push   ebp
c001cfc4:	57                   	push   edi
c001cfc5:	56                   	push   esi
c001cfc6:	53                   	push   ebx
c001cfc7:	83 ec 2c             	sub    esp,0x2c
c001cfca:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cfce:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001cfd2:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001cfd6:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001cfda:	e8 48 f2 ff ff       	call   c001c227 <lockScheduler()>
c001cfdf:	a0 05 d0 02 c0       	mov    al,ds:0xc002d005
c001cfe4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cfe8:	84 c0                	test   al,al
c001cfea:	75 0c                	jne    c001cff8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001cfec:	e8 71 f5 ff ff       	call   c001c562 <schedule()>
c001cff1:	e8 33 f2 ff ff       	call   c001c229 <unlockScheduler()>
c001cff6:	eb e2                	jmp    c001cfda <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001cff8:	a1 08 d0 02 c0       	mov    eax,ds:0xc002d008
c001cffd:	c7 05 0c d0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d00c,0x0
c001d007:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001d00b:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001d00f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001d013:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001d017:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001d01b:	50                   	push   eax
c001d01c:	6a 20                	push   0x20
c001d01e:	6a 00                	push   0x0
c001d020:	68 20 d0 02 c0       	push   0xc002d020
c001d025:	e8 61 36 fe ff       	call   c000068b <memset>
c001d02a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d031:	e8 9a 24 ff ff       	call   c000f4d0 <malloc>
c001d036:	83 c4 0c             	add    esp,0xc
c001d039:	89 c7                	mov    edi,eax
c001d03b:	ff 35 d4 cf 02 c0    	push   DWORD PTR ds:0xc002cfd4
c001d041:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d045:	50                   	push   eax
c001d046:	e8 81 5b ff ff       	call   c0012bcc <File::File(char const*, Process*)>
c001d04b:	83 c4 10             	add    esp,0x10
c001d04e:	85 ff                	test   edi,edi
c001d050:	75 0a                	jne    c001d05c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001d052:	83 ec 0c             	sub    esp,0xc
c001d055:	68 27 9e 02 c0       	push   0xc0029e27
c001d05a:	eb 27                	jmp    c001d083 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001d05c:	50                   	push   eax
c001d05d:	8d 44 24 17          	lea    eax,[esp+0x17]
c001d061:	50                   	push   eax
c001d062:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d066:	50                   	push   eax
c001d067:	57                   	push   edi
c001d068:	e8 6f 5e ff ff       	call   c0012edc <File::stat(unsigned long long*, bool*)>
c001d06d:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001d072:	83 c4 10             	add    esp,0x10
c001d075:	89 e8                	mov    eax,ebp
c001d077:	84 c0                	test   al,al
c001d079:	74 19                	je     c001d094 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001d07b:	83 ec 0c             	sub    esp,0xc
c001d07e:	68 3b 9e 02 c0       	push   0xc0029e3b
c001d083:	e8 59 c1 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001d088:	31 ed                	xor    ebp,ebp
c001d08a:	e8 9a f1 ff ff       	call   c001c229 <unlockScheduler()>
c001d08f:	83 c4 10             	add    esp,0x10
c001d092:	eb 75                	jmp    c001d109 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001d094:	50                   	push   eax
c001d095:	50                   	push   eax
c001d096:	6a 01                	push   0x1
c001d098:	57                   	push   edi
c001d099:	e8 92 5b ff ff       	call   c0012c30 <File::open(FileOpenMode)>
c001d09e:	83 c4 10             	add    esp,0x10
c001d0a1:	85 c0                	test   eax,eax
c001d0a3:	74 17                	je     c001d0bc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001d0a5:	83 ec 0c             	sub    esp,0xc
c001d0a8:	68 54 9e 02 c0       	push   0xc0029e54
c001d0ad:	e8 2f c1 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001d0b2:	e8 72 f1 ff ff       	call   c001c229 <unlockScheduler()>
c001d0b7:	83 c4 10             	add    esp,0x10
c001d0ba:	eb 4d                	jmp    c001d109 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001d0bc:	0f b7 f6             	movzx  esi,si
c001d0bf:	50                   	push   eax
c001d0c0:	0f b7 db             	movzx  ebx,bx
c001d0c3:	50                   	push   eax
c001d0c4:	56                   	push   esi
c001d0c5:	53                   	push   ebx
c001d0c6:	e8 b7 fd ff ff       	call   c001ce82 <Vm::realToLinear(unsigned short, unsigned short)>
c001d0cb:	5a                   	pop    edx
c001d0cc:	8b 17                	mov    edx,DWORD PTR [edi]
c001d0ce:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001d0d2:	51                   	push   ecx
c001d0d3:	50                   	push   eax
c001d0d4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d0d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d0dc:	57                   	push   edi
c001d0dd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d0e0:	83 c4 14             	add    esp,0x14
c001d0e3:	57                   	push   edi
c001d0e4:	e8 a5 5b ff ff       	call   c0012c8e <File::close()>
c001d0e9:	c6 05 05 d0 02 c0 00 	mov    BYTE PTR ds:0xc002d005,0x0
c001d0f0:	e8 34 f1 ff ff       	call   c001c229 <unlockScheduler()>
c001d0f5:	59                   	pop    ecx
c001d0f6:	ff 35 08 d0 02 c0    	push   DWORD PTR ds:0xc002d008
c001d0fc:	e8 3d f7 ff ff       	call   c001c83e <unblockTask(ThreadControlBlock*)>
c001d101:	83 c4 10             	add    esp,0x10
c001d104:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001d109:	83 c4 2c             	add    esp,0x2c
c001d10c:	89 e8                	mov    eax,ebp
c001d10e:	5b                   	pop    ebx
c001d10f:	5e                   	pop    esi
c001d110:	5f                   	pop    edi
c001d111:	5d                   	pop    ebp
c001d112:	c3                   	ret    

c001d113 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001d113:	57                   	push   edi
c001d114:	56                   	push   esi
c001d115:	53                   	push   ebx
c001d116:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d11a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d11e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d122:	83 e8 06             	sub    eax,0x6
c001d125:	0f b7 c0             	movzx  eax,ax
c001d128:	50                   	push   eax
c001d129:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001d12e:	50                   	push   eax
c001d12f:	e8 4e fd ff ff       	call   c001ce82 <Vm::realToLinear(unsigned short, unsigned short)>
c001d134:	5a                   	pop    edx
c001d135:	5e                   	pop    esi
c001d136:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001d139:	8d 56 fa             	lea    edx,[esi-0x6]
c001d13c:	81 e2 ff ff 00 00    	and    edx,0xffff
c001d142:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001d145:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001d148:	83 c2 02             	add    edx,0x2
c001d14b:	66 89 10             	mov    WORD PTR [eax],dx
c001d14e:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001d151:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001d155:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001d158:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001d15c:	89 d6                	mov    esi,edx
c001d15e:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001d164:	66 81 e6 ff fd       	and    si,0xfdff
c001d169:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001d16d:	74 07                	je     c001d176 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001d16f:	89 d6                	mov    esi,edx
c001d171:	66 81 ce 00 02       	or     si,0x200
c001d176:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001d17a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d17f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001d183:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001d18b:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001d18e:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001d196:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d199:	5b                   	pop    ebx
c001d19a:	5e                   	pop    esi
c001d19b:	5f                   	pop    edi
c001d19c:	c3                   	ret    

c001d19d <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001d19d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d1a2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d1a7:	c1 e0 04             	shl    eax,0x4
c001d1aa:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001d1ad:	c3                   	ret    

c001d1ae <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001d1ae:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d1b3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d1b8:	c1 e0 04             	shl    eax,0x4
c001d1bb:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001d1bf:	c3                   	ret    

c001d1c0 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001d1c0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d1c5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d1ca:	c1 e0 04             	shl    eax,0x4
c001d1cd:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001d1d0:	c3                   	ret    

c001d1d1 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001d1d1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d1d6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d1db:	c1 e0 04             	shl    eax,0x4
c001d1de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1e2:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001d1e5:	c3                   	ret    

c001d1e6 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001d1e6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d1eb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d1f0:	c1 e0 04             	shl    eax,0x4
c001d1f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1f7:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001d1fb:	c3                   	ret    

c001d1fc <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001d1fc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d201:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d206:	c1 e0 04             	shl    eax,0x4
c001d209:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d20d:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001d210:	c3                   	ret    

c001d211 <Vm::faultHandler(regs*)>:
c001d211:	55                   	push   ebp
c001d212:	57                   	push   edi
c001d213:	56                   	push   esi
c001d214:	53                   	push   ebx
c001d215:	83 ec 1c             	sub    esp,0x1c
c001d218:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d21c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001d21f:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001d223:	0f b7 f8             	movzx  edi,ax
c001d226:	52                   	push   edx
c001d227:	0f b7 c0             	movzx  eax,ax
c001d22a:	50                   	push   eax
c001d22b:	e8 52 fc ff ff       	call   c001ce82 <Vm::realToLinear(unsigned short, unsigned short)>
c001d230:	5a                   	pop    edx
c001d231:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001d234:	59                   	pop    ecx
c001d235:	89 c6                	mov    esi,eax
c001d237:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d23a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d23e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d243:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d247:	0f b7 c5             	movzx  eax,bp
c001d24a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d24e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001d252:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d256:	e8 27 fc ff ff       	call   c001ce82 <Vm::realToLinear(unsigned short, unsigned short)>
c001d25b:	5a                   	pop    edx
c001d25c:	59                   	pop    ecx
c001d25d:	b1 06                	mov    cl,0x6
c001d25f:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001d264:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001d269:	0f b6 16             	movzx  edx,BYTE PTR [esi]
c001d26c:	80 fa 9d             	cmp    dl,0x9d
c001d26f:	0f 84 1d 02 00 00    	je     c001d492 <Vm::faultHandler(regs*)+0x281>
c001d275:	0f 87 8e 00 00 00    	ja     c001d309 <Vm::faultHandler(regs*)+0xf8>
c001d27b:	80 fa 66             	cmp    dl,0x66
c001d27e:	0f 84 89 01 00 00    	je     c001d40d <Vm::faultHandler(regs*)+0x1fc>
c001d284:	77 44                	ja     c001d2ca <Vm::faultHandler(regs*)+0xb9>
c001d286:	80 fa 36             	cmp    dl,0x36
c001d289:	0f 84 74 01 00 00    	je     c001d403 <Vm::faultHandler(regs*)+0x1f2>
c001d28f:	77 1a                	ja     c001d2ab <Vm::faultHandler(regs*)+0x9a>
c001d291:	80 fa 26             	cmp    dl,0x26
c001d294:	0f 84 4b 01 00 00    	je     c001d3e5 <Vm::faultHandler(regs*)+0x1d4>
c001d29a:	80 fa 2e             	cmp    dl,0x2e
c001d29d:	0f 85 e4 05 00 00    	jne    c001d887 <Vm::faultHandler(regs*)+0x676>
c001d2a3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d2a6:	31 c9                	xor    ecx,ecx
c001d2a8:	46                   	inc    esi
c001d2a9:	eb be                	jmp    c001d269 <Vm::faultHandler(regs*)+0x58>
c001d2ab:	80 fa 64             	cmp    dl,0x64
c001d2ae:	0f 84 3b 01 00 00    	je     c001d3ef <Vm::faultHandler(regs*)+0x1de>
c001d2b4:	0f 87 3f 01 00 00    	ja     c001d3f9 <Vm::faultHandler(regs*)+0x1e8>
c001d2ba:	80 fa 3e             	cmp    dl,0x3e
c001d2bd:	0f 85 c4 05 00 00    	jne    c001d887 <Vm::faultHandler(regs*)+0x676>
c001d2c3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d2c6:	b1 01                	mov    cl,0x1
c001d2c8:	eb de                	jmp    c001d2a8 <Vm::faultHandler(regs*)+0x97>
c001d2ca:	80 fa 6d             	cmp    dl,0x6d
c001d2cd:	0f 84 e0 02 00 00    	je     c001d5b3 <Vm::faultHandler(regs*)+0x3a2>
c001d2d3:	77 17                	ja     c001d2ec <Vm::faultHandler(regs*)+0xdb>
c001d2d5:	80 fa 67             	cmp    dl,0x67
c001d2d8:	0f 84 3c 01 00 00    	je     c001d41a <Vm::faultHandler(regs*)+0x209>
c001d2de:	80 fa 6c             	cmp    dl,0x6c
c001d2e1:	0f 84 5d 02 00 00    	je     c001d544 <Vm::faultHandler(regs*)+0x333>
c001d2e7:	e9 9b 05 00 00       	jmp    c001d887 <Vm::faultHandler(regs*)+0x676>
c001d2ec:	80 fa 6f             	cmp    dl,0x6f
c001d2ef:	0f 84 f9 03 00 00    	je     c001d6ee <Vm::faultHandler(regs*)+0x4dd>
c001d2f5:	0f 82 5e 03 00 00    	jb     c001d659 <Vm::faultHandler(regs*)+0x448>
c001d2fb:	80 fa 9c             	cmp    dl,0x9c
c001d2fe:	0f 84 23 01 00 00    	je     c001d427 <Vm::faultHandler(regs*)+0x216>
c001d304:	e9 7e 05 00 00       	jmp    c001d887 <Vm::faultHandler(regs*)+0x676>
c001d309:	80 fa ec             	cmp    dl,0xec
c001d30c:	0f 84 19 05 00 00    	je     c001d82b <Vm::faultHandler(regs*)+0x61a>
c001d312:	77 7b                	ja     c001d38f <Vm::faultHandler(regs*)+0x17e>
c001d314:	80 fa e4             	cmp    dl,0xe4
c001d317:	0f 84 98 04 00 00    	je     c001d7b5 <Vm::faultHandler(regs*)+0x5a4>
c001d31d:	77 53                	ja     c001d372 <Vm::faultHandler(regs*)+0x161>
c001d31f:	80 fa cd             	cmp    dl,0xcd
c001d322:	0f 84 cd 01 00 00    	je     c001d4f5 <Vm::faultHandler(regs*)+0x2e4>
c001d328:	80 fa cf             	cmp    dl,0xcf
c001d32b:	0f 85 56 05 00 00    	jne    c001d887 <Vm::faultHandler(regs*)+0x676>
c001d331:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001d334:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001d337:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001d33b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001d33e:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001d342:	81 ca 00 02 02 00    	or     edx,0x20200
c001d348:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001d34b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001d34f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d355:	66 c1 e8 09          	shr    ax,0x9
c001d359:	83 e0 01             	and    eax,0x1
c001d35c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d35f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d362:	83 c0 06             	add    eax,0x6
c001d365:	25 ff ff 00 00       	and    eax,0xffff
c001d36a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001d36d:	e9 11 05 00 00       	jmp    c001d883 <Vm::faultHandler(regs*)+0x672>
c001d372:	80 fa e6             	cmp    dl,0xe6
c001d375:	0f 84 84 04 00 00    	je     c001d7ff <Vm::faultHandler(regs*)+0x5ee>
c001d37b:	0f 82 50 04 00 00    	jb     c001d7d1 <Vm::faultHandler(regs*)+0x5c0>
c001d381:	80 fa e7             	cmp    dl,0xe7
c001d384:	0f 84 8c 04 00 00    	je     c001d816 <Vm::faultHandler(regs*)+0x605>
c001d38a:	e9 f8 04 00 00       	jmp    c001d887 <Vm::faultHandler(regs*)+0x676>
c001d38f:	80 fa ef             	cmp    dl,0xef
c001d392:	0f 84 d6 04 00 00    	je     c001d86e <Vm::faultHandler(regs*)+0x65d>
c001d398:	77 28                	ja     c001d3c2 <Vm::faultHandler(regs*)+0x1b1>
c001d39a:	80 fa ed             	cmp    dl,0xed
c001d39d:	0f 84 a4 04 00 00    	je     c001d847 <Vm::faultHandler(regs*)+0x636>
c001d3a3:	80 fa ee             	cmp    dl,0xee
c001d3a6:	0f 85 db 04 00 00    	jne    c001d887 <Vm::faultHandler(regs*)+0x676>
c001d3ac:	50                   	push   eax
c001d3ad:	50                   	push   eax
c001d3ae:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001d3b2:	50                   	push   eax
c001d3b3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d3b7:	50                   	push   eax
c001d3b8:	e8 72 fa ff ff       	call   c001ce2f <Vm::outbv(unsigned short, unsigned char)>
c001d3bd:	e9 a4 04 00 00       	jmp    c001d866 <Vm::faultHandler(regs*)+0x655>
c001d3c2:	80 fa fa             	cmp    dl,0xfa
c001d3c5:	0f 84 5d 01 00 00    	je     c001d528 <Vm::faultHandler(regs*)+0x317>
c001d3cb:	80 fa fb             	cmp    dl,0xfb
c001d3ce:	0f 84 62 01 00 00    	je     c001d536 <Vm::faultHandler(regs*)+0x325>
c001d3d4:	80 fa f3             	cmp    dl,0xf3
c001d3d7:	0f 85 aa 04 00 00    	jne    c001d887 <Vm::faultHandler(regs*)+0x676>
c001d3dd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d3e0:	e9 c3 fe ff ff       	jmp    c001d2a8 <Vm::faultHandler(regs*)+0x97>
c001d3e5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d3e8:	b1 02                	mov    cl,0x2
c001d3ea:	e9 b9 fe ff ff       	jmp    c001d2a8 <Vm::faultHandler(regs*)+0x97>
c001d3ef:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d3f2:	b1 03                	mov    cl,0x3
c001d3f4:	e9 af fe ff ff       	jmp    c001d2a8 <Vm::faultHandler(regs*)+0x97>
c001d3f9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d3fc:	b1 04                	mov    cl,0x4
c001d3fe:	e9 a5 fe ff ff       	jmp    c001d2a8 <Vm::faultHandler(regs*)+0x97>
c001d403:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d406:	b1 05                	mov    cl,0x5
c001d408:	e9 9b fe ff ff       	jmp    c001d2a8 <Vm::faultHandler(regs*)+0x97>
c001d40d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d410:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001d415:	e9 8e fe ff ff       	jmp    c001d2a8 <Vm::faultHandler(regs*)+0x97>
c001d41a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d41d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001d422:	e9 81 fe ff ff       	jmp    c001d2a8 <Vm::faultHandler(regs*)+0x97>
c001d427:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d42a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d42e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d433:	74 30                	je     c001d465 <Vm::faultHandler(regs*)+0x254>
c001d435:	83 e9 04             	sub    ecx,0x4
c001d438:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001d43e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001d444:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001d447:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001d44a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d450:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001d454:	0f 84 26 04 00 00    	je     c001d880 <Vm::faultHandler(regs*)+0x66f>
c001d45a:	80 ce 02             	or     dh,0x2
c001d45d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001d460:	e9 1b 04 00 00       	jmp    c001d880 <Vm::faultHandler(regs*)+0x66f>
c001d465:	83 e9 02             	sub    ecx,0x2
c001d468:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001d46e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001d471:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001d475:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d47b:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001d47f:	74 05                	je     c001d486 <Vm::faultHandler(regs*)+0x275>
c001d481:	80 ce 02             	or     dh,0x2
c001d484:	eb 03                	jmp    c001d489 <Vm::faultHandler(regs*)+0x278>
c001d486:	80 e6 fd             	and    dh,0xfd
c001d489:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001d48d:	e9 ee 03 00 00       	jmp    c001d880 <Vm::faultHandler(regs*)+0x66f>
c001d492:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d497:	74 2a                	je     c001d4c3 <Vm::faultHandler(regs*)+0x2b2>
c001d499:	8b 10                	mov    edx,DWORD PTR [eax]
c001d49b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001d4a1:	81 ca 00 02 02 00    	or     edx,0x20200
c001d4a7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001d4aa:	8b 00                	mov    eax,DWORD PTR [eax]
c001d4ac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d4b2:	c1 e8 09             	shr    eax,0x9
c001d4b5:	83 e0 01             	and    eax,0x1
c001d4b8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d4bb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d4be:	83 c0 04             	add    eax,0x4
c001d4c1:	eb 25                	jmp    c001d4e8 <Vm::faultHandler(regs*)+0x2d7>
c001d4c3:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001d4c6:	81 ca 00 02 02 00    	or     edx,0x20200
c001d4cc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001d4cf:	66 8b 00             	mov    ax,WORD PTR [eax]
c001d4d2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d4d8:	66 c1 e8 09          	shr    ax,0x9
c001d4dc:	83 e0 01             	and    eax,0x1
c001d4df:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d4e2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d4e5:	83 c0 02             	add    eax,0x2
c001d4e8:	25 ff ff 00 00       	and    eax,0xffff
c001d4ed:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001d4f0:	e9 8b 03 00 00       	jmp    c001d880 <Vm::faultHandler(regs*)+0x66f>
c001d4f5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c001d4f9:	3c ee                	cmp    al,0xee
c001d4fb:	75 10                	jne    c001d50d <Vm::faultHandler(regs*)+0x2fc>
c001d4fd:	83 ec 0c             	sub    esp,0xc
c001d500:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001d503:	e8 df f9 ff ff       	call   c001cee7 <Vm::mainloop3(unsigned long)>
c001d508:	e9 5c 03 00 00       	jmp    c001d869 <Vm::faultHandler(regs*)+0x658>
c001d50d:	83 ec 0c             	sub    esp,0xc
c001d510:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d518:	56                   	push   esi
c001d519:	50                   	push   eax
c001d51a:	53                   	push   ebx
c001d51b:	e8 f3 fb ff ff       	call   c001d113 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001d520:	83 c4 20             	add    esp,0x20
c001d523:	e9 5b 03 00 00       	jmp    c001d883 <Vm::faultHandler(regs*)+0x672>
c001d528:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d52d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001d531:	e9 4a 03 00 00       	jmp    c001d880 <Vm::faultHandler(regs*)+0x66f>
c001d536:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d53b:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001d53f:	e9 3c 03 00 00       	jmp    c001d880 <Vm::faultHandler(regs*)+0x66f>
c001d544:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001d547:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d54c:	74 2b                	je     c001d579 <Vm::faultHandler(regs*)+0x368>
c001d54e:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001d555:	76 22                	jbe    c001d579 <Vm::faultHandler(regs*)+0x368>
c001d557:	0f b6 46 05          	movzx  eax,BYTE PTR [esi+0x5]
c001d55b:	50                   	push   eax
c001d55c:	0f b6 46 04          	movzx  eax,BYTE PTR [esi+0x4]
c001d560:	50                   	push   eax
c001d561:	0f b6 46 03          	movzx  eax,BYTE PTR [esi+0x3]
c001d565:	50                   	push   eax
c001d566:	0f b6 46 02          	movzx  eax,BYTE PTR [esi+0x2]
c001d56a:	50                   	push   eax
c001d56b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c001d56f:	50                   	push   eax
c001d570:	6a 6c                	push   0x6c
c001d572:	6a 6c                	push   0x6c
c001d574:	e9 ca 01 00 00       	jmp    c001d743 <Vm::faultHandler(regs*)+0x532>
c001d579:	83 ec 0c             	sub    esp,0xc
c001d57c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d580:	50                   	push   eax
c001d581:	e8 96 f8 ff ff       	call   c001ce1c <Vm::inbv(unsigned short)>
c001d586:	83 c4 0c             	add    esp,0xc
c001d589:	0f b6 c0             	movzx  eax,al
c001d58c:	0f b7 c9             	movzx  ecx,cx
c001d58f:	50                   	push   eax
c001d590:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001d594:	50                   	push   eax
c001d595:	51                   	push   ecx
c001d596:	e8 36 fc ff ff       	call   c001d1d1 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001d59b:	83 c4 10             	add    esp,0x10
c001d59e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d5a1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d5a5:	74 03                	je     c001d5aa <Vm::faultHandler(regs*)+0x399>
c001d5a7:	48                   	dec    eax
c001d5a8:	eb 01                	jmp    c001d5ab <Vm::faultHandler(regs*)+0x39a>
c001d5aa:	40                   	inc    eax
c001d5ab:	0f b7 c0             	movzx  eax,ax
c001d5ae:	e9 9e 00 00 00       	jmp    c001d651 <Vm::faultHandler(regs*)+0x440>
c001d5b3:	83 ec 0c             	sub    esp,0xc
c001d5b6:	68 9a 9e 02 c0       	push   0xc0029e9a
c001d5bb:	e8 dd 50 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001d5c0:	83 c4 10             	add    esp,0x10
c001d5c3:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001d5c6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d5cb:	74 2c                	je     c001d5f9 <Vm::faultHandler(regs*)+0x3e8>
c001d5cd:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001d5d4:	76 23                	jbe    c001d5f9 <Vm::faultHandler(regs*)+0x3e8>
c001d5d6:	0f b6 56 05          	movzx  edx,BYTE PTR [esi+0x5]
c001d5da:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c001d5dd:	52                   	push   edx
c001d5de:	0f b6 56 04          	movzx  edx,BYTE PTR [esi+0x4]
c001d5e2:	52                   	push   edx
c001d5e3:	0f b6 56 03          	movzx  edx,BYTE PTR [esi+0x3]
c001d5e7:	52                   	push   edx
c001d5e8:	0f b6 56 02          	movzx  edx,BYTE PTR [esi+0x2]
c001d5ec:	52                   	push   edx
c001d5ed:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001d5f1:	52                   	push   edx
c001d5f2:	50                   	push   eax
c001d5f3:	50                   	push   eax
c001d5f4:	e9 4a 01 00 00       	jmp    c001d743 <Vm::faultHandler(regs*)+0x532>
c001d5f9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001d5fc:	0f b7 73 10          	movzx  esi,WORD PTR [ebx+0x10]
c001d600:	0f b7 c9             	movzx  ecx,cx
c001d603:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d608:	74 20                	je     c001d62a <Vm::faultHandler(regs*)+0x419>
c001d60a:	ed                   	in     eax,dx
c001d60b:	55                   	push   ebp
c001d60c:	50                   	push   eax
c001d60d:	56                   	push   esi
c001d60e:	51                   	push   ecx
c001d60f:	e8 e8 fb ff ff       	call   c001d1fc <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001d614:	83 c4 10             	add    esp,0x10
c001d617:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d61a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d61e:	74 05                	je     c001d625 <Vm::faultHandler(regs*)+0x414>
c001d620:	83 e8 04             	sub    eax,0x4
c001d623:	eb 27                	jmp    c001d64c <Vm::faultHandler(regs*)+0x43b>
c001d625:	83 c0 04             	add    eax,0x4
c001d628:	eb 22                	jmp    c001d64c <Vm::faultHandler(regs*)+0x43b>
c001d62a:	66 ed                	in     ax,dx
c001d62c:	0f b7 c0             	movzx  eax,ax
c001d62f:	57                   	push   edi
c001d630:	50                   	push   eax
c001d631:	56                   	push   esi
c001d632:	51                   	push   ecx
c001d633:	e8 ae fb ff ff       	call   c001d1e6 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001d638:	83 c4 10             	add    esp,0x10
c001d63b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d63e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d642:	74 05                	je     c001d649 <Vm::faultHandler(regs*)+0x438>
c001d644:	83 e8 02             	sub    eax,0x2
c001d647:	eb 03                	jmp    c001d64c <Vm::faultHandler(regs*)+0x43b>
c001d649:	83 c0 02             	add    eax,0x2
c001d64c:	25 ff ff 00 00       	and    eax,0xffff
c001d651:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001d654:	e9 27 02 00 00       	jmp    c001d880 <Vm::faultHandler(regs*)+0x66f>
c001d659:	8d 41 ff             	lea    eax,[ecx-0x1]
c001d65c:	3c 05                	cmp    al,0x5
c001d65e:	77 24                	ja     c001d684 <Vm::faultHandler(regs*)+0x473>
c001d660:	0f b6 c0             	movzx  eax,al
c001d663:	ff 24 85 d0 9e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6130]
c001d66a:	0f b7 fd             	movzx  edi,bp
c001d66d:	eb 15                	jmp    c001d684 <Vm::faultHandler(regs*)+0x473>
c001d66f:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001d673:	eb 0f                	jmp    c001d684 <Vm::faultHandler(regs*)+0x473>
c001d675:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001d679:	eb 09                	jmp    c001d684 <Vm::faultHandler(regs*)+0x473>
c001d67b:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001d67f:	eb 03                	jmp    c001d684 <Vm::faultHandler(regs*)+0x473>
c001d681:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001d684:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d687:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d68c:	74 29                	je     c001d6b7 <Vm::faultHandler(regs*)+0x4a6>
c001d68e:	3d ff ff 00 00       	cmp    eax,0xffff
c001d693:	76 22                	jbe    c001d6b7 <Vm::faultHandler(regs*)+0x4a6>
c001d695:	0f b6 46 05          	movzx  eax,BYTE PTR [esi+0x5]
c001d699:	50                   	push   eax
c001d69a:	0f b6 46 04          	movzx  eax,BYTE PTR [esi+0x4]
c001d69e:	50                   	push   eax
c001d69f:	0f b6 46 03          	movzx  eax,BYTE PTR [esi+0x3]
c001d6a3:	50                   	push   eax
c001d6a4:	0f b6 46 02          	movzx  eax,BYTE PTR [esi+0x2]
c001d6a8:	50                   	push   eax
c001d6a9:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c001d6ad:	50                   	push   eax
c001d6ae:	6a 6e                	push   0x6e
c001d6b0:	6a 6e                	push   0x6e
c001d6b2:	e9 8c 00 00 00       	jmp    c001d743 <Vm::faultHandler(regs*)+0x532>
c001d6b7:	0f b7 c0             	movzx  eax,ax
c001d6ba:	52                   	push   edx
c001d6bb:	52                   	push   edx
c001d6bc:	50                   	push   eax
c001d6bd:	57                   	push   edi
c001d6be:	e8 da fa ff ff       	call   c001d19d <Vm::readByteFromReal(unsigned short, unsigned short)>
c001d6c3:	59                   	pop    ecx
c001d6c4:	0f b6 c0             	movzx  eax,al
c001d6c7:	5e                   	pop    esi
c001d6c8:	50                   	push   eax
c001d6c9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d6cd:	50                   	push   eax
c001d6ce:	e8 5c f7 ff ff       	call   c001ce2f <Vm::outbv(unsigned short, unsigned char)>
c001d6d3:	83 c4 10             	add    esp,0x10
c001d6d6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d6d9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d6dd:	74 03                	je     c001d6e2 <Vm::faultHandler(regs*)+0x4d1>
c001d6df:	48                   	dec    eax
c001d6e0:	eb 01                	jmp    c001d6e3 <Vm::faultHandler(regs*)+0x4d2>
c001d6e2:	40                   	inc    eax
c001d6e3:	0f b7 c0             	movzx  eax,ax
c001d6e6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d6e9:	e9 92 01 00 00       	jmp    c001d880 <Vm::faultHandler(regs*)+0x66f>
c001d6ee:	8d 41 ff             	lea    eax,[ecx-0x1]
c001d6f1:	3c 05                	cmp    al,0x5
c001d6f3:	77 1f                	ja     c001d714 <Vm::faultHandler(regs*)+0x503>
c001d6f5:	0f b6 c0             	movzx  eax,al
c001d6f8:	ff 24 85 e8 9e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6118]
c001d6ff:	89 ef                	mov    edi,ebp
c001d701:	eb 11                	jmp    c001d714 <Vm::faultHandler(regs*)+0x503>
c001d703:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001d706:	eb 0c                	jmp    c001d714 <Vm::faultHandler(regs*)+0x503>
c001d708:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001d70b:	eb 07                	jmp    c001d714 <Vm::faultHandler(regs*)+0x503>
c001d70d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001d710:	eb 02                	jmp    c001d714 <Vm::faultHandler(regs*)+0x503>
c001d712:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001d714:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001d717:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d71c:	74 37                	je     c001d755 <Vm::faultHandler(regs*)+0x544>
c001d71e:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001d724:	76 2f                	jbe    c001d755 <Vm::faultHandler(regs*)+0x544>
c001d726:	0f b6 46 05          	movzx  eax,BYTE PTR [esi+0x5]
c001d72a:	50                   	push   eax
c001d72b:	0f b6 46 04          	movzx  eax,BYTE PTR [esi+0x4]
c001d72f:	50                   	push   eax
c001d730:	0f b6 46 03          	movzx  eax,BYTE PTR [esi+0x3]
c001d734:	50                   	push   eax
c001d735:	0f b6 46 02          	movzx  eax,BYTE PTR [esi+0x2]
c001d739:	50                   	push   eax
c001d73a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c001d73e:	50                   	push   eax
c001d73f:	6a 6f                	push   0x6f
c001d741:	6a 6f                	push   0x6f
c001d743:	68 6d 9e 02 c0       	push   0xc0029e6d
c001d748:	e8 50 4f ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001d74d:	83 c4 20             	add    esp,0x20
c001d750:	e9 86 01 00 00       	jmp    c001d8db <Vm::faultHandler(regs*)+0x6ca>
c001d755:	0f b7 d7             	movzx  edx,di
c001d758:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d75b:	0f b7 c1             	movzx  eax,cx
c001d75e:	81 e6 00 04 00 00    	and    esi,0x400
c001d764:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001d767:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d76c:	74 1d                	je     c001d78b <Vm::faultHandler(regs*)+0x57a>
c001d76e:	55                   	push   ebp
c001d76f:	55                   	push   ebp
c001d770:	50                   	push   eax
c001d771:	52                   	push   edx
c001d772:	e8 49 fa ff ff       	call   c001d1c0 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001d777:	83 c4 10             	add    esp,0x10
c001d77a:	89 fa                	mov    edx,edi
c001d77c:	ef                   	out    dx,eax
c001d77d:	85 f6                	test   esi,esi
c001d77f:	74 05                	je     c001d786 <Vm::faultHandler(regs*)+0x575>
c001d781:	83 e9 04             	sub    ecx,0x4
c001d784:	eb 21                	jmp    c001d7a7 <Vm::faultHandler(regs*)+0x596>
c001d786:	83 c1 04             	add    ecx,0x4
c001d789:	eb 1c                	jmp    c001d7a7 <Vm::faultHandler(regs*)+0x596>
c001d78b:	55                   	push   ebp
c001d78c:	55                   	push   ebp
c001d78d:	50                   	push   eax
c001d78e:	52                   	push   edx
c001d78f:	e8 1a fa ff ff       	call   c001d1ae <Vm::readWordFromReal(unsigned short, unsigned short)>
c001d794:	83 c4 10             	add    esp,0x10
c001d797:	89 fa                	mov    edx,edi
c001d799:	66 ef                	out    dx,ax
c001d79b:	85 f6                	test   esi,esi
c001d79d:	74 05                	je     c001d7a4 <Vm::faultHandler(regs*)+0x593>
c001d79f:	83 e9 02             	sub    ecx,0x2
c001d7a2:	eb 03                	jmp    c001d7a7 <Vm::faultHandler(regs*)+0x596>
c001d7a4:	83 c1 02             	add    ecx,0x2
c001d7a7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001d7ad:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001d7b0:	e9 cb 00 00 00       	jmp    c001d880 <Vm::faultHandler(regs*)+0x66f>
c001d7b5:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001d7bc:	83 ec 0c             	sub    esp,0xc
c001d7bf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c001d7c3:	50                   	push   eax
c001d7c4:	e8 53 f6 ff ff       	call   c001ce1c <Vm::inbv(unsigned short)>
c001d7c9:	0f b6 c0             	movzx  eax,al
c001d7cc:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001d7cf:	eb 3f                	jmp    c001d810 <Vm::faultHandler(regs*)+0x5ff>
c001d7d1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d7d6:	74 07                	je     c001d7df <Vm::faultHandler(regs*)+0x5ce>
c001d7d8:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001d7dc:	ed                   	in     eax,dx
c001d7dd:	eb 14                	jmp    c001d7f3 <Vm::faultHandler(regs*)+0x5e2>
c001d7df:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001d7e2:	66 31 c9             	xor    cx,cx
c001d7e5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c001d7e8:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001d7ec:	66 ed                	in     ax,dx
c001d7ee:	0f b7 c0             	movzx  eax,ax
c001d7f1:	09 c8                	or     eax,ecx
c001d7f3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001d7f6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d7fa:	e9 84 00 00 00       	jmp    c001d883 <Vm::faultHandler(regs*)+0x672>
c001d7ff:	52                   	push   edx
c001d800:	52                   	push   edx
c001d801:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001d805:	50                   	push   eax
c001d806:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c001d80a:	50                   	push   eax
c001d80b:	e8 1f f6 ff ff       	call   c001ce2f <Vm::outbv(unsigned short, unsigned char)>
c001d810:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d814:	eb 53                	jmp    c001d869 <Vm::faultHandler(regs*)+0x658>
c001d816:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001d819:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001d81d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d822:	74 03                	je     c001d827 <Vm::faultHandler(regs*)+0x616>
c001d824:	ef                   	out    dx,eax
c001d825:	eb cf                	jmp    c001d7f6 <Vm::faultHandler(regs*)+0x5e5>
c001d827:	66 ef                	out    dx,ax
c001d829:	eb cb                	jmp    c001d7f6 <Vm::faultHandler(regs*)+0x5e5>
c001d82b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001d832:	83 ec 0c             	sub    esp,0xc
c001d835:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d839:	50                   	push   eax
c001d83a:	e8 dd f5 ff ff       	call   c001ce1c <Vm::inbv(unsigned short)>
c001d83f:	0f b6 c0             	movzx  eax,al
c001d842:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001d845:	eb 1f                	jmp    c001d866 <Vm::faultHandler(regs*)+0x655>
c001d847:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001d84a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d84f:	74 03                	je     c001d854 <Vm::faultHandler(regs*)+0x643>
c001d851:	ed                   	in     eax,dx
c001d852:	eb 0d                	jmp    c001d861 <Vm::faultHandler(regs*)+0x650>
c001d854:	66 ed                	in     ax,dx
c001d856:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001d859:	0f b7 c0             	movzx  eax,ax
c001d85c:	66 31 d2             	xor    dx,dx
c001d85f:	09 d0                	or     eax,edx
c001d861:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001d864:	eb 1a                	jmp    c001d880 <Vm::faultHandler(regs*)+0x66f>
c001d866:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d869:	83 c4 10             	add    esp,0x10
c001d86c:	eb 15                	jmp    c001d883 <Vm::faultHandler(regs*)+0x672>
c001d86e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001d871:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001d874:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d879:	74 03                	je     c001d87e <Vm::faultHandler(regs*)+0x66d>
c001d87b:	ef                   	out    dx,eax
c001d87c:	eb 02                	jmp    c001d880 <Vm::faultHandler(regs*)+0x66f>
c001d87e:	66 ef                	out    dx,ax
c001d880:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d883:	b0 01                	mov    al,0x1
c001d885:	eb 56                	jmp    c001d8dd <Vm::faultHandler(regs*)+0x6cc>
c001d887:	0f b6 46 05          	movzx  eax,BYTE PTR [esi+0x5]
c001d88b:	50                   	push   eax
c001d88c:	0f b6 46 04          	movzx  eax,BYTE PTR [esi+0x4]
c001d890:	50                   	push   eax
c001d891:	0f b6 46 03          	movzx  eax,BYTE PTR [esi+0x3]
c001d895:	50                   	push   eax
c001d896:	0f b6 46 02          	movzx  eax,BYTE PTR [esi+0x2]
c001d89a:	50                   	push   eax
c001d89b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c001d89f:	50                   	push   eax
c001d8a0:	52                   	push   edx
c001d8a1:	52                   	push   edx
c001d8a2:	68 a0 9e 02 c0       	push   0xc0029ea0
c001d8a7:	e8 f1 4d ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001d8ac:	83 c4 20             	add    esp,0x20
c001d8af:	83 ec 0c             	sub    esp,0xc
c001d8b2:	6a 60                	push   0x60
c001d8b4:	e8 63 f5 ff ff       	call   c001ce1c <Vm::inbv(unsigned short)>
c001d8b9:	83 c4 10             	add    esp,0x10
c001d8bc:	3c 1c                	cmp    al,0x1c
c001d8be:	74 04                	je     c001d8c4 <Vm::faultHandler(regs*)+0x6b3>
c001d8c0:	3c 5a                	cmp    al,0x5a
c001d8c2:	75 eb                	jne    c001d8af <Vm::faultHandler(regs*)+0x69e>
c001d8c4:	3c 1c                	cmp    al,0x1c
c001d8c6:	74 04                	je     c001d8cc <Vm::faultHandler(regs*)+0x6bb>
c001d8c8:	3c 5a                	cmp    al,0x5a
c001d8ca:	75 0f                	jne    c001d8db <Vm::faultHandler(regs*)+0x6ca>
c001d8cc:	83 ec 0c             	sub    esp,0xc
c001d8cf:	6a 60                	push   0x60
c001d8d1:	e8 46 f5 ff ff       	call   c001ce1c <Vm::inbv(unsigned short)>
c001d8d6:	83 c4 10             	add    esp,0x10
c001d8d9:	eb e9                	jmp    c001d8c4 <Vm::faultHandler(regs*)+0x6b3>
c001d8db:	31 c0                	xor    eax,eax
c001d8dd:	83 c4 1c             	add    esp,0x1c
c001d8e0:	5b                   	pop    ebx
c001d8e1:	5e                   	pop    esi
c001d8e2:	5f                   	pop    edi
c001d8e3:	5d                   	pop    ebp
c001d8e4:	c3                   	ret    

c001d8e5 <Vm::fpuInternalTo32(unsigned long long)>:
c001d8e5:	57                   	push   edi
c001d8e6:	56                   	push   esi
c001d8e7:	53                   	push   ebx
c001d8e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8f0:	89 d6                	mov    esi,edx
c001d8f2:	89 d7                	mov    edi,edx
c001d8f4:	89 c1                	mov    ecx,eax
c001d8f6:	c1 ef 14             	shr    edi,0x14
c001d8f9:	89 d3                	mov    ebx,edx
c001d8fb:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001d901:	31 d2                	xor    edx,edx
c001d903:	89 f8                	mov    eax,edi
c001d905:	81 e6 00 00 00 80    	and    esi,0x80000000
c001d90b:	bf ff 00 00 00       	mov    edi,0xff
c001d910:	05 80 fc ff ff       	add    eax,0xfffffc80
c001d915:	83 d2 ff             	adc    edx,0xffffffff
c001d918:	39 c7                	cmp    edi,eax
c001d91a:	bf 00 00 00 00       	mov    edi,0x0
c001d91f:	19 d7                	sbb    edi,edx
c001d921:	72 15                	jb     c001d938 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001d923:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001d927:	c1 e0 17             	shl    eax,0x17
c001d92a:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001d930:	09 f1                	or     ecx,esi
c001d932:	09 c1                	or     ecx,eax
c001d934:	89 cf                	mov    edi,ecx
c001d936:	eb 02                	jmp    c001d93a <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001d938:	31 ff                	xor    edi,edi
c001d93a:	89 f8                	mov    eax,edi
c001d93c:	5b                   	pop    ebx
c001d93d:	5e                   	pop    esi
c001d93e:	5f                   	pop    edi
c001d93f:	c3                   	ret    

c001d940 <Vm::fpuInternalTo64(unsigned long long)>:
c001d940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d944:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d948:	c3                   	ret    

c001d949 <Vm::fpu32ToInternal(unsigned int)>:
c001d949:	57                   	push   edi
c001d94a:	31 ff                	xor    edi,edi
c001d94c:	56                   	push   esi
c001d94d:	53                   	push   ebx
c001d94e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d952:	89 cb                	mov    ebx,ecx
c001d954:	89 ce                	mov    esi,ecx
c001d956:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001d95c:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001d962:	c1 e9 17             	shr    ecx,0x17
c001d965:	89 f0                	mov    eax,esi
c001d967:	0f b6 d1             	movzx  edx,cl
c001d96a:	81 c2 80 03 00 00    	add    edx,0x380
c001d970:	89 d1                	mov    ecx,edx
c001d972:	89 fa                	mov    edx,edi
c001d974:	c1 e1 14             	shl    ecx,0x14
c001d977:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001d97b:	c1 e0 1d             	shl    eax,0x1d
c001d97e:	89 d7                	mov    edi,edx
c001d980:	89 c6                	mov    esi,eax
c001d982:	89 ca                	mov    edx,ecx
c001d984:	89 f0                	mov    eax,esi
c001d986:	09 fa                	or     edx,edi
c001d988:	09 da                	or     edx,ebx
c001d98a:	5b                   	pop    ebx
c001d98b:	5e                   	pop    esi
c001d98c:	5f                   	pop    edi
c001d98d:	c3                   	ret    

c001d98e <Vm::fpu64ToInternal(unsigned long long)>:
c001d98e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d992:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d996:	c3                   	ret    

c001d997 <Vm::fpuFloatToLong(unsigned long long)>:
c001d997:	57                   	push   edi
c001d998:	31 c0                	xor    eax,eax
c001d99a:	56                   	push   esi
c001d99b:	31 d2                	xor    edx,edx
c001d99d:	53                   	push   ebx
c001d99e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d9a2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d9a6:	89 d9                	mov    ecx,ebx
c001d9a8:	c1 e9 14             	shr    ecx,0x14
c001d9ab:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001d9b1:	89 cf                	mov    edi,ecx
c001d9b3:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001d9b9:	78 33                	js     c001d9ee <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001d9bb:	89 d9                	mov    ecx,ebx
c001d9bd:	89 f0                	mov    eax,esi
c001d9bf:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001d9c5:	81 c9 00 00 10 00    	or     ecx,0x100000
c001d9cb:	89 ca                	mov    edx,ecx
c001d9cd:	b9 34 00 00 00       	mov    ecx,0x34
c001d9d2:	29 f9                	sub    ecx,edi
c001d9d4:	0f ad d0             	shrd   eax,edx,cl
c001d9d7:	d3 fa                	sar    edx,cl
c001d9d9:	f6 c1 20             	test   cl,0x20
c001d9dc:	74 05                	je     c001d9e3 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001d9de:	89 d0                	mov    eax,edx
c001d9e0:	c1 fa 1f             	sar    edx,0x1f
c001d9e3:	85 db                	test   ebx,ebx
c001d9e5:	79 07                	jns    c001d9ee <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001d9e7:	f7 d8                	neg    eax
c001d9e9:	83 d2 00             	adc    edx,0x0
c001d9ec:	f7 da                	neg    edx
c001d9ee:	5b                   	pop    ebx
c001d9ef:	5e                   	pop    esi
c001d9f0:	5f                   	pop    edi
c001d9f1:	c3                   	ret    

c001d9f2 <Vm::fpuULongToFloat(unsigned long long)>:
c001d9f2:	57                   	push   edi
c001d9f3:	31 c9                	xor    ecx,ecx
c001d9f5:	56                   	push   esi
c001d9f6:	53                   	push   ebx
c001d9f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d9fb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d9ff:	0f ba e7 14          	bt     edi,0x14
c001da03:	72 07                	jb     c001da0c <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001da05:	01 f6                	add    esi,esi
c001da07:	11 ff                	adc    edi,edi
c001da09:	41                   	inc    ecx
c001da0a:	eb f3                	jmp    c001d9ff <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001da0c:	89 fa                	mov    edx,edi
c001da0e:	89 f0                	mov    eax,esi
c001da10:	bb 33 04 00 00       	mov    ebx,0x433
c001da15:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001da1b:	29 cb                	sub    ebx,ecx
c001da1d:	89 d9                	mov    ecx,ebx
c001da1f:	5b                   	pop    ebx
c001da20:	c1 e1 14             	shl    ecx,0x14
c001da23:	5e                   	pop    esi
c001da24:	09 ca                	or     edx,ecx
c001da26:	5f                   	pop    edi
c001da27:	c3                   	ret    

c001da28 <Vm::fpuLongToFloat(long long)>:
c001da28:	56                   	push   esi
c001da29:	31 c0                	xor    eax,eax
c001da2b:	53                   	push   ebx
c001da2c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001da30:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da34:	39 c8                	cmp    eax,ecx
c001da36:	19 d8                	sbb    eax,ebx
c001da38:	7d 04                	jge    c001da3e <Vm::fpuLongToFloat(long long)+0x16>
c001da3a:	31 f6                	xor    esi,esi
c001da3c:	eb 0c                	jmp    c001da4a <Vm::fpuLongToFloat(long long)+0x22>
c001da3e:	f7 d9                	neg    ecx
c001da40:	be 01 00 00 00       	mov    esi,0x1
c001da45:	83 d3 00             	adc    ebx,0x0
c001da48:	f7 db                	neg    ebx
c001da4a:	31 c0                	xor    eax,eax
c001da4c:	0f ba e3 14          	bt     ebx,0x14
c001da50:	72 07                	jb     c001da59 <Vm::fpuLongToFloat(long long)+0x31>
c001da52:	01 c9                	add    ecx,ecx
c001da54:	11 db                	adc    ebx,ebx
c001da56:	40                   	inc    eax
c001da57:	eb f3                	jmp    c001da4c <Vm::fpuLongToFloat(long long)+0x24>
c001da59:	ba 33 04 00 00       	mov    edx,0x433
c001da5e:	29 c2                	sub    edx,eax
c001da60:	89 c8                	mov    eax,ecx
c001da62:	c1 e2 14             	shl    edx,0x14
c001da65:	89 d9                	mov    ecx,ebx
c001da67:	89 f3                	mov    ebx,esi
c001da69:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001da6f:	09 ca                	or     edx,ecx
c001da71:	84 db                	test   bl,bl
c001da73:	74 06                	je     c001da7b <Vm::fpuLongToFloat(long long)+0x53>
c001da75:	81 ca 00 00 00 80    	or     edx,0x80000000
c001da7b:	5b                   	pop    ebx
c001da7c:	5e                   	pop    esi
c001da7d:	c3                   	ret    

c001da7e <Vm::fpuGet0()>:
c001da7e:	31 c0                	xor    eax,eax
c001da80:	31 d2                	xor    edx,edx
c001da82:	c3                   	ret    

c001da83 <Vm::fpuGet1()>:
c001da83:	b8 01 00 00 00       	mov    eax,0x1
c001da88:	31 d2                	xor    edx,edx
c001da8a:	c3                   	ret    

c001da8b <Vm::fpuGetPi()>:
c001da8b:	b8 03 00 00 00       	mov    eax,0x3
c001da90:	31 d2                	xor    edx,edx
c001da92:	c3                   	ret    

c001da93 <Vm::fpuGetLog2E()>:
c001da93:	83 ec 18             	sub    esp,0x18
c001da96:	68 00 9f 02 c0       	push   0xc0029f00
c001da9b:	e8 41 b7 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001daa0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001daa5:	31 d2                	xor    edx,edx
c001daa7:	83 c4 1c             	add    esp,0x1c
c001daaa:	c3                   	ret    

c001daab <Vm::fpuGetLogE2()>:
c001daab:	83 ec 18             	sub    esp,0x18
c001daae:	68 0c 9f 02 c0       	push   0xc0029f0c
c001dab3:	e8 29 b7 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001dab8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001dabd:	31 d2                	xor    edx,edx
c001dabf:	83 c4 1c             	add    esp,0x1c
c001dac2:	c3                   	ret    

c001dac3 <Vm::fpuGetLog210()>:
c001dac3:	83 ec 18             	sub    esp,0x18
c001dac6:	68 18 9f 02 c0       	push   0xc0029f18
c001dacb:	e8 11 b7 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001dad0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001dad5:	31 d2                	xor    edx,edx
c001dad7:	83 c4 1c             	add    esp,0x1c
c001dada:	c3                   	ret    

c001dadb <Vm::fpuGetLog102()>:
c001dadb:	83 ec 18             	sub    esp,0x18
c001dade:	68 25 9f 02 c0       	push   0xc0029f25
c001dae3:	e8 f9 b6 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001dae8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001daed:	31 d2                	xor    edx,edx
c001daef:	83 c4 1c             	add    esp,0x1c
c001daf2:	c3                   	ret    

c001daf3 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001daf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001daf7:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001dafb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001daff:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001db03:	0f 92 c0             	setb   al
c001db06:	c3                   	ret    

c001db07 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001db07:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001db0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db0f:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001db13:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001db17:	09 c2                	or     edx,eax
c001db19:	0f 94 c0             	sete   al
c001db1c:	c3                   	ret    

c001db1d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001db1d:	57                   	push   edi
c001db1e:	56                   	push   esi
c001db1f:	53                   	push   ebx
c001db20:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db24:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001db28:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001db2c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001db30:	57                   	push   edi
c001db31:	56                   	push   esi
c001db32:	53                   	push   ebx
c001db33:	51                   	push   ecx
c001db34:	e8 ce ff ff ff       	call   c001db07 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001db39:	83 c4 10             	add    esp,0x10
c001db3c:	88 c2                	mov    dl,al
c001db3e:	31 c0                	xor    eax,eax
c001db40:	84 d2                	test   dl,dl
c001db42:	75 0c                	jne    c001db50 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001db44:	57                   	push   edi
c001db45:	56                   	push   esi
c001db46:	53                   	push   ebx
c001db47:	51                   	push   ecx
c001db48:	e8 a6 ff ff ff       	call   c001daf3 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001db4d:	83 c4 10             	add    esp,0x10
c001db50:	83 e0 01             	and    eax,0x1
c001db53:	5b                   	pop    ebx
c001db54:	88 c1                	mov    cl,al
c001db56:	83 e2 01             	and    edx,0x1
c001db59:	a0 41 d0 02 c0       	mov    al,ds:0xc002d041
c001db5e:	c1 e2 06             	shl    edx,0x6
c001db61:	83 e0 ba             	and    eax,0xffffffba
c001db64:	5e                   	pop    esi
c001db65:	09 c8                	or     eax,ecx
c001db67:	5f                   	pop    edi
c001db68:	09 d0                	or     eax,edx
c001db6a:	a2 41 d0 02 c0       	mov    ds:0xc002d041,al
c001db6f:	c3                   	ret    

c001db70 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001db70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db78:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001db7c:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001db80:	c3                   	ret    

c001db81 <Vm::fpuAbs(unsigned long long)>:
c001db81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db89:	c3                   	ret    

c001db8a <Vm::fpuChs(unsigned long long)>:
c001db8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db92:	f7 d8                	neg    eax
c001db94:	83 d2 00             	adc    edx,0x0
c001db97:	f7 da                	neg    edx
c001db99:	c3                   	ret    

c001db9a <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001db9a:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001db9e:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001dba3:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001dba7:	eb c7                	jmp    c001db70 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001dba9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001dba9:	53                   	push   ebx
c001dbaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dbae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dbb2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dbb6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001dbba:	0f af ca             	imul   ecx,edx
c001dbbd:	0f af d8             	imul   ebx,eax
c001dbc0:	f7 e2                	mul    edx
c001dbc2:	01 d9                	add    ecx,ebx
c001dbc4:	5b                   	pop    ebx
c001dbc5:	01 ca                	add    edx,ecx
c001dbc7:	c3                   	ret    

c001dbc8 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001dbc8:	83 ec 0c             	sub    esp,0xc
c001dbcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dbcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dbd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dbd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dbdb:	e8 4c 6b 00 00       	call   c002472c <__udivdi3>
c001dbe0:	83 c4 1c             	add    esp,0x1c
c001dbe3:	c3                   	ret    

c001dbe4 <Vm::fpuSquare(unsigned long long)>:
c001dbe4:	50                   	push   eax
c001dbe5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dbe9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dbed:	52                   	push   edx
c001dbee:	50                   	push   eax
c001dbef:	52                   	push   edx
c001dbf0:	50                   	push   eax
c001dbf1:	e8 b3 ff ff ff       	call   c001dba9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001dbf6:	83 c4 14             	add    esp,0x14
c001dbf9:	c3                   	ret    

c001dbfa <Vm::fpuGetReg(int)>:
c001dbfa:	83 ec 0c             	sub    esp,0xc
c001dbfd:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001dc02:	76 10                	jbe    c001dc14 <Vm::fpuGetReg(int)+0x1a>
c001dc04:	83 ec 0c             	sub    esp,0xc
c001dc07:	68 32 9f 02 c0       	push   0xc0029f32
c001dc0c:	e8 d0 b5 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001dc11:	83 c4 10             	add    esp,0x10
c001dc14:	a0 41 d0 02 c0       	mov    al,ds:0xc002d041
c001dc19:	b9 08 00 00 00       	mov    ecx,0x8
c001dc1e:	c0 e8 03             	shr    al,0x3
c001dc21:	83 e0 07             	and    eax,0x7
c001dc24:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dc28:	99                   	cdq    
c001dc29:	f7 f9                	idiv   ecx
c001dc2b:	8b 04 d5 44 d0 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd2fbc]
c001dc32:	8b 14 d5 48 d0 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd2fb8]
c001dc39:	83 c4 0c             	add    esp,0xc
c001dc3c:	c3                   	ret    

c001dc3d <Vm::fpuSetReg(int, unsigned long long)>:
c001dc3d:	57                   	push   edi
c001dc3e:	56                   	push   esi
c001dc3f:	52                   	push   edx
c001dc40:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dc44:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001dc48:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001dc4d:	76 10                	jbe    c001dc5f <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001dc4f:	83 ec 0c             	sub    esp,0xc
c001dc52:	68 45 9f 02 c0       	push   0xc0029f45
c001dc57:	e8 85 b5 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001dc5c:	83 c4 10             	add    esp,0x10
c001dc5f:	a0 41 d0 02 c0       	mov    al,ds:0xc002d041
c001dc64:	b9 08 00 00 00       	mov    ecx,0x8
c001dc69:	c0 e8 03             	shr    al,0x3
c001dc6c:	83 e0 07             	and    eax,0x7
c001dc6f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dc73:	99                   	cdq    
c001dc74:	f7 f9                	idiv   ecx
c001dc76:	89 34 d5 44 d0 02 c0 	mov    DWORD PTR [edx*8-0x3ffd2fbc],esi
c001dc7d:	89 3c d5 48 d0 02 c0 	mov    DWORD PTR [edx*8-0x3ffd2fb8],edi
c001dc84:	58                   	pop    eax
c001dc85:	5e                   	pop    esi
c001dc86:	5f                   	pop    edi
c001dc87:	c3                   	ret    

c001dc88 <Vm::fpuPush(unsigned long long)>:
c001dc88:	a0 41 d0 02 c0       	mov    al,ds:0xc002d041
c001dc8d:	c0 e8 03             	shr    al,0x3
c001dc90:	83 e0 07             	and    eax,0x7
c001dc93:	83 c0 07             	add    eax,0x7
c001dc96:	88 c2                	mov    dl,al
c001dc98:	83 e0 07             	and    eax,0x7
c001dc9b:	83 e2 07             	and    edx,0x7
c001dc9e:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001dca5:	8a 15 41 d0 02 c0    	mov    dl,BYTE PTR ds:0xc002d041
c001dcab:	83 e2 c7             	and    edx,0xffffffc7
c001dcae:	09 ca                	or     edx,ecx
c001dcb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dcb4:	88 15 41 d0 02 c0    	mov    BYTE PTR ds:0xc002d041,dl
c001dcba:	89 0c c5 48 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2fb8],ecx
c001dcc1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dcc5:	89 14 c5 44 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2fbc],edx
c001dccc:	a1 84 d0 02 c0       	mov    eax,ds:0xc002d084
c001dcd1:	83 f8 08             	cmp    eax,0x8
c001dcd4:	75 08                	jne    c001dcde <Vm::fpuPush(unsigned long long)+0x56>
c001dcd6:	80 0d 40 d0 02 c0 40 	or     BYTE PTR ds:0xc002d040,0x40
c001dcdd:	c3                   	ret    
c001dcde:	40                   	inc    eax
c001dcdf:	a3 84 d0 02 c0       	mov    ds:0xc002d084,eax
c001dce4:	c3                   	ret    

c001dce5 <Vm::fpuPop()>:
c001dce5:	8a 0d 41 d0 02 c0    	mov    cl,BYTE PTR ds:0xc002d041
c001dceb:	53                   	push   ebx
c001dcec:	c0 e9 03             	shr    cl,0x3
c001dcef:	8a 1d 41 d0 02 c0    	mov    bl,BYTE PTR ds:0xc002d041
c001dcf5:	83 e1 07             	and    ecx,0x7
c001dcf8:	83 e3 c7             	and    ebx,0xffffffc7
c001dcfb:	8b 04 cd 44 d0 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd2fbc]
c001dd02:	8b 14 cd 48 d0 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd2fb8]
c001dd09:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001dd10:	83 e1 38             	and    ecx,0x38
c001dd13:	09 d9                	or     ecx,ebx
c001dd15:	88 0d 41 d0 02 c0    	mov    BYTE PTR ds:0xc002d041,cl
c001dd1b:	8b 0d 84 d0 02 c0    	mov    ecx,DWORD PTR ds:0xc002d084
c001dd21:	85 c9                	test   ecx,ecx
c001dd23:	74 09                	je     c001dd2e <Vm::fpuPop()+0x49>
c001dd25:	49                   	dec    ecx
c001dd26:	89 0d 84 d0 02 c0    	mov    DWORD PTR ds:0xc002d084,ecx
c001dd2c:	eb 07                	jmp    c001dd35 <Vm::fpuPop()+0x50>
c001dd2e:	80 0d 40 d0 02 c0 40 	or     BYTE PTR ds:0xc002d040,0x40
c001dd35:	5b                   	pop    ebx
c001dd36:	c3                   	ret    

c001dd37 <Vm::x87Handler(regs*)>:
c001dd37:	55                   	push   ebp
c001dd38:	57                   	push   edi
c001dd39:	56                   	push   esi
c001dd3a:	53                   	push   ebx
c001dd3b:	83 ec 1c             	sub    esp,0x1c
c001dd3e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dd42:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001dd47:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001dd4a:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001dd52:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001dd56:	50                   	push   eax
c001dd57:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001dd5b:	50                   	push   eax
c001dd5c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001dd60:	50                   	push   eax
c001dd61:	53                   	push   ebx
c001dd62:	e8 7f b2 ff ff       	call   c0018fe6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001dd67:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001dd6a:	83 c4 10             	add    esp,0x10
c001dd6d:	89 c6                	mov    esi,eax
c001dd6f:	80 fa d9             	cmp    dl,0xd9
c001dd72:	0f 85 52 01 00 00    	jne    c001deca <Vm::x87Handler(regs*)+0x193>
c001dd78:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd7c:	8d 50 20             	lea    edx,[eax+0x20]
c001dd7f:	80 fa 0e             	cmp    dl,0xe
c001dd82:	0f 87 86 00 00 00    	ja     c001de0e <Vm::x87Handler(regs*)+0xd7>
c001dd88:	0f b6 d2             	movzx  edx,dl
c001dd8b:	ff 24 95 58 9f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd60a8]
c001dd92:	e8 e7 fc ff ff       	call   c001da7e <Vm::fpuGet0()>
c001dd97:	eb 05                	jmp    c001dd9e <Vm::x87Handler(regs*)+0x67>
c001dd99:	e8 e5 fc ff ff       	call   c001da83 <Vm::fpuGet1()>
c001dd9e:	57                   	push   edi
c001dd9f:	57                   	push   edi
c001dda0:	52                   	push   edx
c001dda1:	50                   	push   eax
c001dda2:	e8 e1 fe ff ff       	call   c001dc88 <Vm::fpuPush(unsigned long long)>
c001dda7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ddab:	83 c4 10             	add    esp,0x10
c001ddae:	b0 01                	mov    al,0x1
c001ddb0:	e9 e3 09 00 00       	jmp    c001e798 <Vm::x87Handler(regs*)+0xa61>
c001ddb5:	83 ec 0c             	sub    esp,0xc
c001ddb8:	6a 00                	push   0x0
c001ddba:	e8 3b fe ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001ddbf:	59                   	pop    ecx
c001ddc0:	5e                   	pop    esi
c001ddc1:	52                   	push   edx
c001ddc2:	50                   	push   eax
c001ddc3:	e8 c2 fd ff ff       	call   c001db8a <Vm::fpuChs(unsigned long long)>
c001ddc8:	eb 13                	jmp    c001dddd <Vm::x87Handler(regs*)+0xa6>
c001ddca:	83 ec 0c             	sub    esp,0xc
c001ddcd:	6a 00                	push   0x0
c001ddcf:	e8 26 fe ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001ddd4:	5f                   	pop    edi
c001ddd5:	5d                   	pop    ebp
c001ddd6:	52                   	push   edx
c001ddd7:	50                   	push   eax
c001ddd8:	e8 a4 fd ff ff       	call   c001db81 <Vm::fpuAbs(unsigned long long)>
c001dddd:	83 c4 0c             	add    esp,0xc
c001dde0:	52                   	push   edx
c001dde1:	50                   	push   eax
c001dde2:	6a 00                	push   0x0
c001dde4:	e8 54 fe ff ff       	call   c001dc3d <Vm::fpuSetReg(int, unsigned long long)>
c001dde9:	eb bc                	jmp    c001dda7 <Vm::x87Handler(regs*)+0x70>
c001ddeb:	e8 d3 fc ff ff       	call   c001dac3 <Vm::fpuGetLog210()>
c001ddf0:	eb ac                	jmp    c001dd9e <Vm::x87Handler(regs*)+0x67>
c001ddf2:	e8 9c fc ff ff       	call   c001da93 <Vm::fpuGetLog2E()>
c001ddf7:	eb a5                	jmp    c001dd9e <Vm::x87Handler(regs*)+0x67>
c001ddf9:	e8 8d fc ff ff       	call   c001da8b <Vm::fpuGetPi()>
c001ddfe:	eb 9e                	jmp    c001dd9e <Vm::x87Handler(regs*)+0x67>
c001de00:	e8 d6 fc ff ff       	call   c001dadb <Vm::fpuGetLog102()>
c001de05:	eb 97                	jmp    c001dd9e <Vm::x87Handler(regs*)+0x67>
c001de07:	e8 9f fc ff ff       	call   c001daab <Vm::fpuGetLogE2()>
c001de0c:	eb 90                	jmp    c001dd9e <Vm::x87Handler(regs*)+0x67>
c001de0e:	8d 50 40             	lea    edx,[eax+0x40]
c001de11:	80 fa 07             	cmp    dl,0x7
c001de14:	77 15                	ja     c001de2b <Vm::x87Handler(regs*)+0xf4>
c001de16:	83 ec 0c             	sub    esp,0xc
c001de19:	2d c0 00 00 00       	sub    eax,0xc0
c001de1e:	50                   	push   eax
c001de1f:	e8 d6 fd ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001de24:	59                   	pop    ecx
c001de25:	5e                   	pop    esi
c001de26:	e9 75 ff ff ff       	jmp    c001dda0 <Vm::x87Handler(regs*)+0x69>
c001de2b:	8d 50 38             	lea    edx,[eax+0x38]
c001de2e:	80 fa 07             	cmp    dl,0x7
c001de31:	77 3c                	ja     c001de6f <Vm::x87Handler(regs*)+0x138>
c001de33:	83 ec 0c             	sub    esp,0xc
c001de36:	2d c8 00 00 00       	sub    eax,0xc8
c001de3b:	50                   	push   eax
c001de3c:	e8 b9 fd ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001de41:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001de48:	89 c6                	mov    esi,eax
c001de4a:	89 d7                	mov    edi,edx
c001de4c:	e8 a9 fd ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001de51:	83 c4 0c             	add    esp,0xc
c001de54:	52                   	push   edx
c001de55:	50                   	push   eax
c001de56:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001de5a:	2d c8 00 00 00       	sub    eax,0xc8
c001de5f:	50                   	push   eax
c001de60:	e8 d8 fd ff ff       	call   c001dc3d <Vm::fpuSetReg(int, unsigned long long)>
c001de65:	83 c4 0c             	add    esp,0xc
c001de68:	57                   	push   edi
c001de69:	56                   	push   esi
c001de6a:	e9 73 ff ff ff       	jmp    c001dde2 <Vm::x87Handler(regs*)+0xab>
c001de6f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001de73:	84 d2                	test   dl,dl
c001de75:	75 0f                	jne    c001de86 <Vm::x87Handler(regs*)+0x14f>
c001de77:	83 ec 0c             	sub    esp,0xc
c001de7a:	ff 36                	push   DWORD PTR [esi]
c001de7c:	e8 c8 fa ff ff       	call   c001d949 <Vm::fpu32ToInternal(unsigned int)>
c001de81:	e9 bf 00 00 00       	jmp    c001df45 <Vm::x87Handler(regs*)+0x20e>
c001de86:	80 fa 03             	cmp    dl,0x3
c001de89:	75 13                	jne    c001de9e <Vm::x87Handler(regs*)+0x167>
c001de8b:	e8 55 fe ff ff       	call   c001dce5 <Vm::fpuPop()>
c001de90:	55                   	push   ebp
c001de91:	55                   	push   ebp
c001de92:	52                   	push   edx
c001de93:	50                   	push   eax
c001de94:	e8 4c fa ff ff       	call   c001d8e5 <Vm::fpuInternalTo32(unsigned long long)>
c001de99:	e9 88 00 00 00       	jmp    c001df26 <Vm::x87Handler(regs*)+0x1ef>
c001de9e:	80 fa 05             	cmp    dl,0x5
c001dea1:	75 0e                	jne    c001deb1 <Vm::x87Handler(regs*)+0x17a>
c001dea3:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dea6:	66 a3 42 d0 02 c0    	mov    ds:0xc002d042,ax
c001deac:	e9 df 00 00 00       	jmp    c001df90 <Vm::x87Handler(regs*)+0x259>
c001deb1:	31 c0                	xor    eax,eax
c001deb3:	80 fa 07             	cmp    dl,0x7
c001deb6:	0f 85 dc 08 00 00    	jne    c001e798 <Vm::x87Handler(regs*)+0xa61>
c001debc:	66 a1 42 d0 02 c0    	mov    ax,ds:0xc002d042
c001dec2:	66 89 06             	mov    WORD PTR [esi],ax
c001dec5:	e9 c6 00 00 00       	jmp    c001df90 <Vm::x87Handler(regs*)+0x259>
c001deca:	80 fa d8             	cmp    dl,0xd8
c001decd:	0f 84 c9 00 00 00    	je     c001df9c <Vm::x87Handler(regs*)+0x265>
c001ded3:	80 fa dc             	cmp    dl,0xdc
c001ded6:	0f 84 0d 02 00 00    	je     c001e0e9 <Vm::x87Handler(regs*)+0x3b2>
c001dedc:	80 fa de             	cmp    dl,0xde
c001dedf:	0f 84 cd 02 00 00    	je     c001e1b2 <Vm::x87Handler(regs*)+0x47b>
c001dee5:	80 fa dd             	cmp    dl,0xdd
c001dee8:	0f 84 5f 04 00 00    	je     c001e34d <Vm::x87Handler(regs*)+0x616>
c001deee:	80 fa da             	cmp    dl,0xda
c001def1:	0f 84 24 05 00 00    	je     c001e41b <Vm::x87Handler(regs*)+0x6e4>
c001def7:	80 fa df             	cmp    dl,0xdf
c001defa:	0f 84 68 05 00 00    	je     c001e468 <Vm::x87Handler(regs*)+0x731>
c001df00:	31 c0                	xor    eax,eax
c001df02:	80 fa db             	cmp    dl,0xdb
c001df05:	0f 85 8d 08 00 00    	jne    c001e798 <Vm::x87Handler(regs*)+0xa61>
c001df0b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001df0f:	80 fa 03             	cmp    dl,0x3
c001df12:	0f 85 70 06 00 00    	jne    c001e588 <Vm::x87Handler(regs*)+0x851>
c001df18:	e8 c8 fd ff ff       	call   c001dce5 <Vm::fpuPop()>
c001df1d:	55                   	push   ebp
c001df1e:	55                   	push   ebp
c001df1f:	52                   	push   edx
c001df20:	50                   	push   eax
c001df21:	e8 71 fa ff ff       	call   c001d997 <Vm::fpuFloatToLong(unsigned long long)>
c001df26:	83 c4 10             	add    esp,0x10
c001df29:	89 06                	mov    DWORD PTR [esi],eax
c001df2b:	eb 63                	jmp    c001df90 <Vm::x87Handler(regs*)+0x259>
c001df2d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001df31:	84 d2                	test   dl,dl
c001df33:	0f 85 e6 05 00 00    	jne    c001e51f <Vm::x87Handler(regs*)+0x7e8>
c001df39:	57                   	push   edi
c001df3a:	57                   	push   edi
c001df3b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001df3e:	ff 36                	push   DWORD PTR [esi]
c001df40:	e8 49 fa ff ff       	call   c001d98e <Vm::fpu64ToInternal(unsigned long long)>
c001df45:	5e                   	pop    esi
c001df46:	5f                   	pop    edi
c001df47:	52                   	push   edx
c001df48:	50                   	push   eax
c001df49:	e8 3a fd ff ff       	call   c001dc88 <Vm::fpuPush(unsigned long long)>
c001df4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001df52:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001df55:	e9 51 fe ff ff       	jmp    c001ddab <Vm::x87Handler(regs*)+0x74>
c001df5a:	80 fa 03             	cmp    dl,0x3
c001df5d:	0f 85 d7 06 00 00    	jne    c001e63a <Vm::x87Handler(regs*)+0x903>
c001df63:	57                   	push   edi
c001df64:	57                   	push   edi
c001df65:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001df68:	ff 36                	push   DWORD PTR [esi]
c001df6a:	e8 1f fa ff ff       	call   c001d98e <Vm::fpu64ToInternal(unsigned long long)>
c001df6f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001df76:	89 c6                	mov    esi,eax
c001df78:	89 d7                	mov    edi,edx
c001df7a:	e8 7b fc ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001df7f:	57                   	push   edi
c001df80:	56                   	push   esi
c001df81:	52                   	push   edx
c001df82:	50                   	push   eax
c001df83:	e8 95 fb ff ff       	call   c001db1d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001df88:	83 c4 20             	add    esp,0x20
c001df8b:	e8 55 fd ff ff       	call   c001dce5 <Vm::fpuPop()>
c001df90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df94:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001df97:	e9 12 fe ff ff       	jmp    c001ddae <Vm::x87Handler(regs*)+0x77>
c001df9c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dfa0:	8d 50 40             	lea    edx,[eax+0x40]
c001dfa3:	80 fa 07             	cmp    dl,0x7
c001dfa6:	77 29                	ja     c001dfd1 <Vm::x87Handler(regs*)+0x29a>
c001dfa8:	83 ec 0c             	sub    esp,0xc
c001dfab:	2d c0 00 00 00       	sub    eax,0xc0
c001dfb0:	50                   	push   eax
c001dfb1:	e8 44 fc ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001dfb6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dfbd:	89 c6                	mov    esi,eax
c001dfbf:	89 d7                	mov    edi,edx
c001dfc1:	e8 34 fc ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001dfc6:	57                   	push   edi
c001dfc7:	56                   	push   esi
c001dfc8:	52                   	push   edx
c001dfc9:	50                   	push   eax
c001dfca:	e8 a1 fb ff ff       	call   c001db70 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001dfcf:	eb 2f                	jmp    c001e000 <Vm::x87Handler(regs*)+0x2c9>
c001dfd1:	8d 50 38             	lea    edx,[eax+0x38]
c001dfd4:	80 fa 07             	cmp    dl,0x7
c001dfd7:	77 2f                	ja     c001e008 <Vm::x87Handler(regs*)+0x2d1>
c001dfd9:	83 ec 0c             	sub    esp,0xc
c001dfdc:	2d c8 00 00 00       	sub    eax,0xc8
c001dfe1:	50                   	push   eax
c001dfe2:	e8 13 fc ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001dfe7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dfee:	89 c6                	mov    esi,eax
c001dff0:	89 d7                	mov    edi,edx
c001dff2:	e8 03 fc ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001dff7:	57                   	push   edi
c001dff8:	56                   	push   esi
c001dff9:	52                   	push   edx
c001dffa:	50                   	push   eax
c001dffb:	e8 a9 fb ff ff       	call   c001dba9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e000:	83 c4 1c             	add    esp,0x1c
c001e003:	e9 d8 fd ff ff       	jmp    c001dde0 <Vm::x87Handler(regs*)+0xa9>
c001e008:	8d 50 30             	lea    edx,[eax+0x30]
c001e00b:	80 fa 07             	cmp    dl,0x7
c001e00e:	77 0d                	ja     c001e01d <Vm::x87Handler(regs*)+0x2e6>
c001e010:	83 ec 0c             	sub    esp,0xc
c001e013:	2d d0 00 00 00       	sub    eax,0xd0
c001e018:	e9 99 03 00 00       	jmp    c001e3b6 <Vm::x87Handler(regs*)+0x67f>
c001e01d:	8d 50 28             	lea    edx,[eax+0x28]
c001e020:	80 fa 07             	cmp    dl,0x7
c001e023:	77 0d                	ja     c001e032 <Vm::x87Handler(regs*)+0x2fb>
c001e025:	83 ec 0c             	sub    esp,0xc
c001e028:	2d d8 00 00 00       	sub    eax,0xd8
c001e02d:	e9 c0 03 00 00       	jmp    c001e3f2 <Vm::x87Handler(regs*)+0x6bb>
c001e032:	8d 50 20             	lea    edx,[eax+0x20]
c001e035:	80 fa 07             	cmp    dl,0x7
c001e038:	77 1b                	ja     c001e055 <Vm::x87Handler(regs*)+0x31e>
c001e03a:	83 ec 0c             	sub    esp,0xc
c001e03d:	2d e0 00 00 00       	sub    eax,0xe0
c001e042:	50                   	push   eax
c001e043:	e8 b2 fb ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e048:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e04f:	89 c6                	mov    esi,eax
c001e051:	89 d7                	mov    edi,edx
c001e053:	eb 22                	jmp    c001e077 <Vm::x87Handler(regs*)+0x340>
c001e055:	8d 50 18             	lea    edx,[eax+0x18]
c001e058:	80 fa 07             	cmp    dl,0x7
c001e05b:	77 2d                	ja     c001e08a <Vm::x87Handler(regs*)+0x353>
c001e05d:	83 ec 0c             	sub    esp,0xc
c001e060:	6a 00                	push   0x0
c001e062:	e8 93 fb ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e067:	89 c6                	mov    esi,eax
c001e069:	89 d7                	mov    edi,edx
c001e06b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e06f:	2d e8 00 00 00       	sub    eax,0xe8
c001e074:	89 04 24             	mov    DWORD PTR [esp],eax
c001e077:	e8 7e fb ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e07c:	57                   	push   edi
c001e07d:	56                   	push   esi
c001e07e:	52                   	push   edx
c001e07f:	50                   	push   eax
c001e080:	e8 15 fb ff ff       	call   c001db9a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e085:	e9 76 ff ff ff       	jmp    c001e000 <Vm::x87Handler(regs*)+0x2c9>
c001e08a:	8d 50 10             	lea    edx,[eax+0x10]
c001e08d:	80 fa 07             	cmp    dl,0x7
c001e090:	77 1b                	ja     c001e0ad <Vm::x87Handler(regs*)+0x376>
c001e092:	83 ec 0c             	sub    esp,0xc
c001e095:	2d f0 00 00 00       	sub    eax,0xf0
c001e09a:	50                   	push   eax
c001e09b:	e8 5a fb ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e0a0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e0a7:	89 c6                	mov    esi,eax
c001e0a9:	89 d7                	mov    edi,edx
c001e0ab:	eb 22                	jmp    c001e0cf <Vm::x87Handler(regs*)+0x398>
c001e0ad:	3c f7                	cmp    al,0xf7
c001e0af:	0f 86 d1 03 00 00    	jbe    c001e486 <Vm::x87Handler(regs*)+0x74f>
c001e0b5:	83 ec 0c             	sub    esp,0xc
c001e0b8:	6a 00                	push   0x0
c001e0ba:	e8 3b fb ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e0bf:	89 c6                	mov    esi,eax
c001e0c1:	89 d7                	mov    edi,edx
c001e0c3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e0c7:	2d f8 00 00 00       	sub    eax,0xf8
c001e0cc:	89 04 24             	mov    DWORD PTR [esp],eax
c001e0cf:	e8 26 fb ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e0d4:	57                   	push   edi
c001e0d5:	56                   	push   esi
c001e0d6:	52                   	push   edx
c001e0d7:	50                   	push   eax
c001e0d8:	e8 eb fa ff ff       	call   c001dbc8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e0dd:	83 c4 1c             	add    esp,0x1c
c001e0e0:	52                   	push   edx
c001e0e1:	50                   	push   eax
c001e0e2:	6a 00                	push   0x0
c001e0e4:	e9 51 02 00 00       	jmp    c001e33a <Vm::x87Handler(regs*)+0x603>
c001e0e9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e0ed:	8d 50 40             	lea    edx,[eax+0x40]
c001e0f0:	80 fa 07             	cmp    dl,0x7
c001e0f3:	77 37                	ja     c001e12c <Vm::x87Handler(regs*)+0x3f5>
c001e0f5:	83 ec 0c             	sub    esp,0xc
c001e0f8:	2d c0 00 00 00       	sub    eax,0xc0
c001e0fd:	50                   	push   eax
c001e0fe:	e8 f7 fa ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e103:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e10a:	89 c6                	mov    esi,eax
c001e10c:	89 d7                	mov    edi,edx
c001e10e:	e8 e7 fa ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e113:	57                   	push   edi
c001e114:	56                   	push   esi
c001e115:	52                   	push   edx
c001e116:	50                   	push   eax
c001e117:	e8 54 fa ff ff       	call   c001db70 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001e11c:	83 c4 1c             	add    esp,0x1c
c001e11f:	52                   	push   edx
c001e120:	50                   	push   eax
c001e121:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e125:	2d c0 00 00 00       	sub    eax,0xc0
c001e12a:	eb 3d                	jmp    c001e169 <Vm::x87Handler(regs*)+0x432>
c001e12c:	8d 50 38             	lea    edx,[eax+0x38]
c001e12f:	80 fa 07             	cmp    dl,0x7
c001e132:	77 3b                	ja     c001e16f <Vm::x87Handler(regs*)+0x438>
c001e134:	83 ec 0c             	sub    esp,0xc
c001e137:	2d c8 00 00 00       	sub    eax,0xc8
c001e13c:	50                   	push   eax
c001e13d:	e8 b8 fa ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e142:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e149:	89 c6                	mov    esi,eax
c001e14b:	89 d7                	mov    edi,edx
c001e14d:	e8 a8 fa ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e152:	57                   	push   edi
c001e153:	56                   	push   esi
c001e154:	52                   	push   edx
c001e155:	50                   	push   eax
c001e156:	e8 4e fa ff ff       	call   c001dba9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e15b:	83 c4 1c             	add    esp,0x1c
c001e15e:	52                   	push   edx
c001e15f:	50                   	push   eax
c001e160:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e164:	2d c8 00 00 00       	sub    eax,0xc8
c001e169:	50                   	push   eax
c001e16a:	e9 75 fc ff ff       	jmp    c001dde4 <Vm::x87Handler(regs*)+0xad>
c001e16f:	83 c0 18             	add    eax,0x18
c001e172:	3c 07                	cmp    al,0x7
c001e174:	0f 87 3b 04 00 00    	ja     c001e5b5 <Vm::x87Handler(regs*)+0x87e>
c001e17a:	83 ec 0c             	sub    esp,0xc
c001e17d:	6a 00                	push   0x0
c001e17f:	e8 76 fa ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e184:	89 c6                	mov    esi,eax
c001e186:	89 d7                	mov    edi,edx
c001e188:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e18c:	2d e8 00 00 00       	sub    eax,0xe8
c001e191:	89 04 24             	mov    DWORD PTR [esp],eax
c001e194:	e8 61 fa ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e199:	57                   	push   edi
c001e19a:	56                   	push   esi
c001e19b:	52                   	push   edx
c001e19c:	50                   	push   eax
c001e19d:	e8 f8 f9 ff ff       	call   c001db9a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e1a2:	83 c4 1c             	add    esp,0x1c
c001e1a5:	52                   	push   edx
c001e1a6:	50                   	push   eax
c001e1a7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e1ab:	2d e8 00 00 00       	sub    eax,0xe8
c001e1b0:	eb b7                	jmp    c001e169 <Vm::x87Handler(regs*)+0x432>
c001e1b2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e1b6:	8d 50 40             	lea    edx,[eax+0x40]
c001e1b9:	80 fa 07             	cmp    dl,0x7
c001e1bc:	77 3a                	ja     c001e1f8 <Vm::x87Handler(regs*)+0x4c1>
c001e1be:	83 ec 0c             	sub    esp,0xc
c001e1c1:	2d c0 00 00 00       	sub    eax,0xc0
c001e1c6:	50                   	push   eax
c001e1c7:	e8 2e fa ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e1cc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e1d3:	89 c6                	mov    esi,eax
c001e1d5:	89 d7                	mov    edi,edx
c001e1d7:	e8 1e fa ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e1dc:	57                   	push   edi
c001e1dd:	56                   	push   esi
c001e1de:	52                   	push   edx
c001e1df:	50                   	push   eax
c001e1e0:	e8 8b f9 ff ff       	call   c001db70 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001e1e5:	83 c4 1c             	add    esp,0x1c
c001e1e8:	52                   	push   edx
c001e1e9:	50                   	push   eax
c001e1ea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e1ee:	2d c0 00 00 00       	sub    eax,0xc0
c001e1f3:	e9 9e 01 00 00       	jmp    c001e396 <Vm::x87Handler(regs*)+0x65f>
c001e1f8:	8d 50 20             	lea    edx,[eax+0x20]
c001e1fb:	80 fa 07             	cmp    dl,0x7
c001e1fe:	77 3a                	ja     c001e23a <Vm::x87Handler(regs*)+0x503>
c001e200:	83 ec 0c             	sub    esp,0xc
c001e203:	2d e0 00 00 00       	sub    eax,0xe0
c001e208:	50                   	push   eax
c001e209:	e8 ec f9 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e20e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e215:	89 c6                	mov    esi,eax
c001e217:	89 d7                	mov    edi,edx
c001e219:	e8 dc f9 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e21e:	57                   	push   edi
c001e21f:	56                   	push   esi
c001e220:	52                   	push   edx
c001e221:	50                   	push   eax
c001e222:	e8 73 f9 ff ff       	call   c001db9a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e227:	83 c4 1c             	add    esp,0x1c
c001e22a:	52                   	push   edx
c001e22b:	50                   	push   eax
c001e22c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e230:	2d e0 00 00 00       	sub    eax,0xe0
c001e235:	e9 5c 01 00 00       	jmp    c001e396 <Vm::x87Handler(regs*)+0x65f>
c001e23a:	8d 50 18             	lea    edx,[eax+0x18]
c001e23d:	80 fa 07             	cmp    dl,0x7
c001e240:	77 3b                	ja     c001e27d <Vm::x87Handler(regs*)+0x546>
c001e242:	83 ec 0c             	sub    esp,0xc
c001e245:	6a 00                	push   0x0
c001e247:	e8 ae f9 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e24c:	89 c6                	mov    esi,eax
c001e24e:	89 d7                	mov    edi,edx
c001e250:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e254:	2d e8 00 00 00       	sub    eax,0xe8
c001e259:	89 04 24             	mov    DWORD PTR [esp],eax
c001e25c:	e8 99 f9 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e261:	57                   	push   edi
c001e262:	56                   	push   esi
c001e263:	52                   	push   edx
c001e264:	50                   	push   eax
c001e265:	e8 30 f9 ff ff       	call   c001db9a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e26a:	83 c4 1c             	add    esp,0x1c
c001e26d:	52                   	push   edx
c001e26e:	50                   	push   eax
c001e26f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e273:	2d e8 00 00 00       	sub    eax,0xe8
c001e278:	e9 19 01 00 00       	jmp    c001e396 <Vm::x87Handler(regs*)+0x65f>
c001e27d:	8d 50 38             	lea    edx,[eax+0x38]
c001e280:	80 fa 07             	cmp    dl,0x7
c001e283:	77 37                	ja     c001e2bc <Vm::x87Handler(regs*)+0x585>
c001e285:	83 ec 0c             	sub    esp,0xc
c001e288:	2d c8 00 00 00       	sub    eax,0xc8
c001e28d:	50                   	push   eax
c001e28e:	e8 67 f9 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e293:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e29a:	89 c6                	mov    esi,eax
c001e29c:	89 d7                	mov    edi,edx
c001e29e:	e8 57 f9 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e2a3:	57                   	push   edi
c001e2a4:	56                   	push   esi
c001e2a5:	52                   	push   edx
c001e2a6:	50                   	push   eax
c001e2a7:	e8 fd f8 ff ff       	call   c001dba9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e2ac:	83 c4 1c             	add    esp,0x1c
c001e2af:	52                   	push   edx
c001e2b0:	50                   	push   eax
c001e2b1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e2b5:	2d c8 00 00 00       	sub    eax,0xc8
c001e2ba:	eb 7d                	jmp    c001e339 <Vm::x87Handler(regs*)+0x602>
c001e2bc:	3c f7                	cmp    al,0xf7
c001e2be:	76 38                	jbe    c001e2f8 <Vm::x87Handler(regs*)+0x5c1>
c001e2c0:	83 ec 0c             	sub    esp,0xc
c001e2c3:	6a 00                	push   0x0
c001e2c5:	e8 30 f9 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e2ca:	89 c6                	mov    esi,eax
c001e2cc:	89 d7                	mov    edi,edx
c001e2ce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e2d2:	2d f8 00 00 00       	sub    eax,0xf8
c001e2d7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e2da:	e8 1b f9 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e2df:	57                   	push   edi
c001e2e0:	56                   	push   esi
c001e2e1:	52                   	push   edx
c001e2e2:	50                   	push   eax
c001e2e3:	e8 e0 f8 ff ff       	call   c001dbc8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e2e8:	83 c4 1c             	add    esp,0x1c
c001e2eb:	52                   	push   edx
c001e2ec:	50                   	push   eax
c001e2ed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e2f1:	2d f8 00 00 00       	sub    eax,0xf8
c001e2f6:	eb 41                	jmp    c001e339 <Vm::x87Handler(regs*)+0x602>
c001e2f8:	8d 50 10             	lea    edx,[eax+0x10]
c001e2fb:	80 fa 07             	cmp    dl,0x7
c001e2fe:	0f 87 5a 01 00 00    	ja     c001e45e <Vm::x87Handler(regs*)+0x727>
c001e304:	83 ec 0c             	sub    esp,0xc
c001e307:	2d f0 00 00 00       	sub    eax,0xf0
c001e30c:	50                   	push   eax
c001e30d:	e8 e8 f8 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e312:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e319:	89 c6                	mov    esi,eax
c001e31b:	89 d7                	mov    edi,edx
c001e31d:	e8 d8 f8 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e322:	57                   	push   edi
c001e323:	56                   	push   esi
c001e324:	52                   	push   edx
c001e325:	50                   	push   eax
c001e326:	e8 9d f8 ff ff       	call   c001dbc8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e32b:	83 c4 1c             	add    esp,0x1c
c001e32e:	52                   	push   edx
c001e32f:	50                   	push   eax
c001e330:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e334:	2d f0 00 00 00       	sub    eax,0xf0
c001e339:	50                   	push   eax
c001e33a:	e8 fe f8 ff ff       	call   c001dc3d <Vm::fpuSetReg(int, unsigned long long)>
c001e33f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e343:	e8 9d f9 ff ff       	call   c001dce5 <Vm::fpuPop()>
c001e348:	e9 5e fa ff ff       	jmp    c001ddab <Vm::x87Handler(regs*)+0x74>
c001e34d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e351:	8d 50 30             	lea    edx,[eax+0x30]
c001e354:	80 fa 07             	cmp    dl,0x7
c001e357:	77 1d                	ja     c001e376 <Vm::x87Handler(regs*)+0x63f>
c001e359:	83 ec 0c             	sub    esp,0xc
c001e35c:	6a 00                	push   0x0
c001e35e:	e8 97 f8 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e363:	83 c4 0c             	add    esp,0xc
c001e366:	52                   	push   edx
c001e367:	50                   	push   eax
c001e368:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e36c:	2d d0 00 00 00       	sub    eax,0xd0
c001e371:	e9 f3 fd ff ff       	jmp    c001e169 <Vm::x87Handler(regs*)+0x432>
c001e376:	8d 50 28             	lea    edx,[eax+0x28]
c001e379:	80 fa 07             	cmp    dl,0x7
c001e37c:	77 28                	ja     c001e3a6 <Vm::x87Handler(regs*)+0x66f>
c001e37e:	83 ec 0c             	sub    esp,0xc
c001e381:	6a 00                	push   0x0
c001e383:	e8 72 f8 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e388:	83 c4 0c             	add    esp,0xc
c001e38b:	52                   	push   edx
c001e38c:	50                   	push   eax
c001e38d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e391:	2d d8 00 00 00       	sub    eax,0xd8
c001e396:	50                   	push   eax
c001e397:	e8 a1 f8 ff ff       	call   c001dc3d <Vm::fpuSetReg(int, unsigned long long)>
c001e39c:	e8 44 f9 ff ff       	call   c001dce5 <Vm::fpuPop()>
c001e3a1:	e9 01 fa ff ff       	jmp    c001dda7 <Vm::x87Handler(regs*)+0x70>
c001e3a6:	8d 50 20             	lea    edx,[eax+0x20]
c001e3a9:	80 fa 07             	cmp    dl,0x7
c001e3ac:	77 30                	ja     c001e3de <Vm::x87Handler(regs*)+0x6a7>
c001e3ae:	83 ec 0c             	sub    esp,0xc
c001e3b1:	2d e0 00 00 00       	sub    eax,0xe0
c001e3b6:	50                   	push   eax
c001e3b7:	e8 3e f8 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e3bc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e3c3:	89 c6                	mov    esi,eax
c001e3c5:	89 d7                	mov    edi,edx
c001e3c7:	e8 2e f8 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e3cc:	57                   	push   edi
c001e3cd:	56                   	push   esi
c001e3ce:	52                   	push   edx
c001e3cf:	50                   	push   eax
c001e3d0:	e8 48 f7 ff ff       	call   c001db1d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e3d5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e3d9:	e9 54 02 00 00       	jmp    c001e632 <Vm::x87Handler(regs*)+0x8fb>
c001e3de:	8d 50 18             	lea    edx,[eax+0x18]
c001e3e1:	80 fa 07             	cmp    dl,0x7
c001e3e4:	0f 87 43 fb ff ff    	ja     c001df2d <Vm::x87Handler(regs*)+0x1f6>
c001e3ea:	83 ec 0c             	sub    esp,0xc
c001e3ed:	2d e8 00 00 00       	sub    eax,0xe8
c001e3f2:	50                   	push   eax
c001e3f3:	e8 02 f8 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e3f8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e3ff:	89 c6                	mov    esi,eax
c001e401:	89 d7                	mov    edi,edx
c001e403:	e8 f2 f7 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e408:	57                   	push   edi
c001e409:	56                   	push   esi
c001e40a:	52                   	push   edx
c001e40b:	50                   	push   eax
c001e40c:	e8 0c f7 ff ff       	call   c001db1d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e411:	83 c4 20             	add    esp,0x20
c001e414:	e8 cc f8 ff ff       	call   c001dce5 <Vm::fpuPop()>
c001e419:	eb 62                	jmp    c001e47d <Vm::x87Handler(regs*)+0x746>
c001e41b:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001e41f:	0f 85 0f 01 00 00    	jne    c001e534 <Vm::x87Handler(regs*)+0x7fd>
c001e425:	83 ec 0c             	sub    esp,0xc
c001e428:	6a 01                	push   0x1
c001e42a:	e8 cb f7 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e42f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e436:	89 c6                	mov    esi,eax
c001e438:	89 d7                	mov    edi,edx
c001e43a:	e8 bb f7 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e43f:	57                   	push   edi
c001e440:	56                   	push   esi
c001e441:	52                   	push   edx
c001e442:	50                   	push   eax
c001e443:	e8 d5 f6 ff ff       	call   c001db1d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e448:	83 c4 20             	add    esp,0x20
c001e44b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e44f:	e8 91 f8 ff ff       	call   c001dce5 <Vm::fpuPop()>
c001e454:	e8 8c f8 ff ff       	call   c001dce5 <Vm::fpuPop()>
c001e459:	e9 50 f9 ff ff       	jmp    c001ddae <Vm::x87Handler(regs*)+0x77>
c001e45e:	3c d9                	cmp    al,0xd9
c001e460:	0f 85 b5 02 00 00    	jne    c001e71b <Vm::x87Handler(regs*)+0x9e4>
c001e466:	eb bd                	jmp    c001e425 <Vm::x87Handler(regs*)+0x6ee>
c001e468:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001e46c:	0f 85 ea 02 00 00    	jne    c001e75c <Vm::x87Handler(regs*)+0xa25>
c001e472:	0f b7 05 40 d0 02 c0 	movzx  eax,WORD PTR ds:0xc002d040
c001e479:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001e47d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e481:	e9 28 f9 ff ff       	jmp    c001ddae <Vm::x87Handler(regs*)+0x77>
c001e486:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e48a:	84 d2                	test   dl,dl
c001e48c:	75 0f                	jne    c001e49d <Vm::x87Handler(regs*)+0x766>
c001e48e:	83 ec 0c             	sub    esp,0xc
c001e491:	ff 36                	push   DWORD PTR [esi]
c001e493:	e8 b1 f4 ff ff       	call   c001d949 <Vm::fpu32ToInternal(unsigned int)>
c001e498:	e9 2c 01 00 00       	jmp    c001e5c9 <Vm::x87Handler(regs*)+0x892>
c001e49d:	80 fa 01             	cmp    dl,0x1
c001e4a0:	75 0f                	jne    c001e4b1 <Vm::x87Handler(regs*)+0x77a>
c001e4a2:	83 ec 0c             	sub    esp,0xc
c001e4a5:	ff 36                	push   DWORD PTR [esi]
c001e4a7:	e8 9d f4 ff ff       	call   c001d949 <Vm::fpu32ToInternal(unsigned int)>
c001e4ac:	e9 81 02 00 00       	jmp    c001e732 <Vm::x87Handler(regs*)+0x9fb>
c001e4b1:	80 fa 04             	cmp    dl,0x4
c001e4b4:	75 0f                	jne    c001e4c5 <Vm::x87Handler(regs*)+0x78e>
c001e4b6:	83 ec 0c             	sub    esp,0xc
c001e4b9:	ff 36                	push   DWORD PTR [esi]
c001e4bb:	e8 89 f4 ff ff       	call   c001d949 <Vm::fpu32ToInternal(unsigned int)>
c001e4c0:	e9 86 01 00 00       	jmp    c001e64b <Vm::x87Handler(regs*)+0x914>
c001e4c5:	80 fa 05             	cmp    dl,0x5
c001e4c8:	75 1b                	jne    c001e4e5 <Vm::x87Handler(regs*)+0x7ae>
c001e4ca:	83 ec 0c             	sub    esp,0xc
c001e4cd:	6a 00                	push   0x0
c001e4cf:	e8 26 f7 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e4d4:	89 c7                	mov    edi,eax
c001e4d6:	89 d5                	mov    ebp,edx
c001e4d8:	58                   	pop    eax
c001e4d9:	ff 36                	push   DWORD PTR [esi]
c001e4db:	e8 69 f4 ff ff       	call   c001d949 <Vm::fpu32ToInternal(unsigned int)>
c001e4e0:	e9 a3 01 00 00       	jmp    c001e688 <Vm::x87Handler(regs*)+0x951>
c001e4e5:	80 fa 06             	cmp    dl,0x6
c001e4e8:	75 0f                	jne    c001e4f9 <Vm::x87Handler(regs*)+0x7c2>
c001e4ea:	83 ec 0c             	sub    esp,0xc
c001e4ed:	ff 36                	push   DWORD PTR [esi]
c001e4ef:	e8 55 f4 ff ff       	call   c001d949 <Vm::fpu32ToInternal(unsigned int)>
c001e4f4:	e9 ae 01 00 00       	jmp    c001e6a7 <Vm::x87Handler(regs*)+0x970>
c001e4f9:	31 c0                	xor    eax,eax
c001e4fb:	80 fa 07             	cmp    dl,0x7
c001e4fe:	0f 85 94 02 00 00    	jne    c001e798 <Vm::x87Handler(regs*)+0xa61>
c001e504:	83 ec 0c             	sub    esp,0xc
c001e507:	6a 00                	push   0x0
c001e509:	e8 ec f6 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e50e:	89 c7                	mov    edi,eax
c001e510:	89 d5                	mov    ebp,edx
c001e512:	58                   	pop    eax
c001e513:	ff 36                	push   DWORD PTR [esi]
c001e515:	e8 2f f4 ff ff       	call   c001d949 <Vm::fpu32ToInternal(unsigned int)>
c001e51a:	e9 cb 01 00 00       	jmp    c001e6ea <Vm::x87Handler(regs*)+0x9b3>
c001e51f:	80 fa 03             	cmp    dl,0x3
c001e522:	0f 85 d3 01 00 00    	jne    c001e6fb <Vm::x87Handler(regs*)+0x9c4>
c001e528:	e8 b8 f7 ff ff       	call   c001dce5 <Vm::fpuPop()>
c001e52d:	51                   	push   ecx
c001e52e:	51                   	push   ecx
c001e52f:	e9 de 01 00 00       	jmp    c001e712 <Vm::x87Handler(regs*)+0x9db>
c001e534:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e538:	80 fa 01             	cmp    dl,0x1
c001e53b:	75 09                	jne    c001e546 <Vm::x87Handler(regs*)+0x80f>
c001e53d:	57                   	push   edi
c001e53e:	57                   	push   edi
c001e53f:	8b 06                	mov    eax,DWORD PTR [esi]
c001e541:	e9 e3 01 00 00       	jmp    c001e729 <Vm::x87Handler(regs*)+0x9f2>
c001e546:	80 fa 04             	cmp    dl,0x4
c001e549:	75 12                	jne    c001e55d <Vm::x87Handler(regs*)+0x826>
c001e54b:	31 d2                	xor    edx,edx
c001e54d:	51                   	push   ecx
c001e54e:	51                   	push   ecx
c001e54f:	8b 06                	mov    eax,DWORD PTR [esi]
c001e551:	52                   	push   edx
c001e552:	50                   	push   eax
c001e553:	e8 d0 f4 ff ff       	call   c001da28 <Vm::fpuLongToFloat(long long)>
c001e558:	e9 ee 00 00 00       	jmp    c001e64b <Vm::x87Handler(regs*)+0x914>
c001e55d:	31 c0                	xor    eax,eax
c001e55f:	80 fa 07             	cmp    dl,0x7
c001e562:	0f 85 30 02 00 00    	jne    c001e798 <Vm::x87Handler(regs*)+0xa61>
c001e568:	83 ec 0c             	sub    esp,0xc
c001e56b:	6a 00                	push   0x0
c001e56d:	e8 88 f6 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e572:	89 c7                	mov    edi,eax
c001e574:	89 d5                	mov    ebp,edx
c001e576:	58                   	pop    eax
c001e577:	8b 06                	mov    eax,DWORD PTR [esi]
c001e579:	5a                   	pop    edx
c001e57a:	31 d2                	xor    edx,edx
c001e57c:	52                   	push   edx
c001e57d:	50                   	push   eax
c001e57e:	e8 a5 f4 ff ff       	call   c001da28 <Vm::fpuLongToFloat(long long)>
c001e583:	e9 62 01 00 00       	jmp    c001e6ea <Vm::x87Handler(regs*)+0x9b3>
c001e588:	84 d2                	test   dl,dl
c001e58a:	75 0d                	jne    c001e599 <Vm::x87Handler(regs*)+0x862>
c001e58c:	31 d2                	xor    edx,edx
c001e58e:	55                   	push   ebp
c001e58f:	55                   	push   ebp
c001e590:	8b 06                	mov    eax,DWORD PTR [esi]
c001e592:	52                   	push   edx
c001e593:	50                   	push   eax
c001e594:	e9 d3 01 00 00       	jmp    c001e76c <Vm::x87Handler(regs*)+0xa35>
c001e599:	31 c0                	xor    eax,eax
c001e59b:	80 fa 02             	cmp    dl,0x2
c001e59e:	0f 85 f4 01 00 00    	jne    c001e798 <Vm::x87Handler(regs*)+0xa61>
c001e5a4:	83 ec 0c             	sub    esp,0xc
c001e5a7:	6a 00                	push   0x0
c001e5a9:	e8 4c f6 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e5ae:	59                   	pop    ecx
c001e5af:	5f                   	pop    edi
c001e5b0:	e9 6a f9 ff ff       	jmp    c001df1f <Vm::x87Handler(regs*)+0x1e8>
c001e5b5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e5b9:	84 d2                	test   dl,dl
c001e5bb:	75 2a                	jne    c001e5e7 <Vm::x87Handler(regs*)+0x8b0>
c001e5bd:	50                   	push   eax
c001e5be:	50                   	push   eax
c001e5bf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e5c2:	ff 36                	push   DWORD PTR [esi]
c001e5c4:	e8 c5 f3 ff ff       	call   c001d98e <Vm::fpu64ToInternal(unsigned long long)>
c001e5c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e5d0:	89 c6                	mov    esi,eax
c001e5d2:	89 d7                	mov    edi,edx
c001e5d4:	e8 21 f6 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e5d9:	57                   	push   edi
c001e5da:	56                   	push   esi
c001e5db:	52                   	push   edx
c001e5dc:	50                   	push   eax
c001e5dd:	e8 8e f5 ff ff       	call   c001db70 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001e5e2:	e9 64 01 00 00       	jmp    c001e74b <Vm::x87Handler(regs*)+0xa14>
c001e5e7:	80 fa 01             	cmp    dl,0x1
c001e5ea:	75 11                	jne    c001e5fd <Vm::x87Handler(regs*)+0x8c6>
c001e5ec:	50                   	push   eax
c001e5ed:	50                   	push   eax
c001e5ee:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e5f1:	ff 36                	push   DWORD PTR [esi]
c001e5f3:	e8 96 f3 ff ff       	call   c001d98e <Vm::fpu64ToInternal(unsigned long long)>
c001e5f8:	e9 35 01 00 00       	jmp    c001e732 <Vm::x87Handler(regs*)+0x9fb>
c001e5fd:	80 fa 02             	cmp    dl,0x2
c001e600:	0f 85 54 f9 ff ff    	jne    c001df5a <Vm::x87Handler(regs*)+0x223>
c001e606:	55                   	push   ebp
c001e607:	55                   	push   ebp
c001e608:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e60b:	ff 36                	push   DWORD PTR [esi]
c001e60d:	e8 7c f3 ff ff       	call   c001d98e <Vm::fpu64ToInternal(unsigned long long)>
c001e612:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e619:	89 c6                	mov    esi,eax
c001e61b:	89 d7                	mov    edi,edx
c001e61d:	e8 d8 f5 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e622:	57                   	push   edi
c001e623:	56                   	push   esi
c001e624:	52                   	push   edx
c001e625:	50                   	push   eax
c001e626:	e8 f2 f4 ff ff       	call   c001db1d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e62b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e62f:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001e632:	83 c4 20             	add    esp,0x20
c001e635:	e9 74 f7 ff ff       	jmp    c001ddae <Vm::x87Handler(regs*)+0x77>
c001e63a:	80 fa 04             	cmp    dl,0x4
c001e63d:	75 2a                	jne    c001e669 <Vm::x87Handler(regs*)+0x932>
c001e63f:	51                   	push   ecx
c001e640:	51                   	push   ecx
c001e641:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e644:	ff 36                	push   DWORD PTR [esi]
c001e646:	e8 43 f3 ff ff       	call   c001d98e <Vm::fpu64ToInternal(unsigned long long)>
c001e64b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e652:	89 c6                	mov    esi,eax
c001e654:	89 d7                	mov    edi,edx
c001e656:	e8 9f f5 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e65b:	57                   	push   edi
c001e65c:	56                   	push   esi
c001e65d:	52                   	push   edx
c001e65e:	50                   	push   eax
c001e65f:	e8 36 f5 ff ff       	call   c001db9a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e664:	e9 e2 00 00 00       	jmp    c001e74b <Vm::x87Handler(regs*)+0xa14>
c001e669:	80 fa 05             	cmp    dl,0x5
c001e66c:	75 28                	jne    c001e696 <Vm::x87Handler(regs*)+0x95f>
c001e66e:	83 ec 0c             	sub    esp,0xc
c001e671:	6a 00                	push   0x0
c001e673:	e8 82 f5 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e678:	89 c7                	mov    edi,eax
c001e67a:	89 d5                	mov    ebp,edx
c001e67c:	58                   	pop    eax
c001e67d:	5a                   	pop    edx
c001e67e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e681:	ff 36                	push   DWORD PTR [esi]
c001e683:	e8 06 f3 ff ff       	call   c001d98e <Vm::fpu64ToInternal(unsigned long long)>
c001e688:	83 c4 10             	add    esp,0x10
c001e68b:	55                   	push   ebp
c001e68c:	57                   	push   edi
c001e68d:	52                   	push   edx
c001e68e:	50                   	push   eax
c001e68f:	e8 06 f5 ff ff       	call   c001db9a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e694:	eb 60                	jmp    c001e6f6 <Vm::x87Handler(regs*)+0x9bf>
c001e696:	80 fa 06             	cmp    dl,0x6
c001e699:	75 2a                	jne    c001e6c5 <Vm::x87Handler(regs*)+0x98e>
c001e69b:	51                   	push   ecx
c001e69c:	51                   	push   ecx
c001e69d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e6a0:	ff 36                	push   DWORD PTR [esi]
c001e6a2:	e8 e7 f2 ff ff       	call   c001d98e <Vm::fpu64ToInternal(unsigned long long)>
c001e6a7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e6ae:	89 c6                	mov    esi,eax
c001e6b0:	89 d7                	mov    edi,edx
c001e6b2:	e8 43 f5 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e6b7:	57                   	push   edi
c001e6b8:	56                   	push   esi
c001e6b9:	52                   	push   edx
c001e6ba:	50                   	push   eax
c001e6bb:	e8 08 f5 ff ff       	call   c001dbc8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e6c0:	e9 86 00 00 00       	jmp    c001e74b <Vm::x87Handler(regs*)+0xa14>
c001e6c5:	31 c0                	xor    eax,eax
c001e6c7:	80 fa 07             	cmp    dl,0x7
c001e6ca:	0f 85 c8 00 00 00    	jne    c001e798 <Vm::x87Handler(regs*)+0xa61>
c001e6d0:	83 ec 0c             	sub    esp,0xc
c001e6d3:	6a 00                	push   0x0
c001e6d5:	e8 20 f5 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e6da:	89 c7                	mov    edi,eax
c001e6dc:	89 d5                	mov    ebp,edx
c001e6de:	58                   	pop    eax
c001e6df:	5a                   	pop    edx
c001e6e0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e6e3:	ff 36                	push   DWORD PTR [esi]
c001e6e5:	e8 a4 f2 ff ff       	call   c001d98e <Vm::fpu64ToInternal(unsigned long long)>
c001e6ea:	83 c4 10             	add    esp,0x10
c001e6ed:	55                   	push   ebp
c001e6ee:	57                   	push   edi
c001e6ef:	52                   	push   edx
c001e6f0:	50                   	push   eax
c001e6f1:	e8 d2 f4 ff ff       	call   c001dbc8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e6f6:	83 c4 0c             	add    esp,0xc
c001e6f9:	eb 53                	jmp    c001e74e <Vm::x87Handler(regs*)+0xa17>
c001e6fb:	31 c0                	xor    eax,eax
c001e6fd:	80 fa 02             	cmp    dl,0x2
c001e700:	0f 85 92 00 00 00    	jne    c001e798 <Vm::x87Handler(regs*)+0xa61>
c001e706:	83 ec 0c             	sub    esp,0xc
c001e709:	6a 00                	push   0x0
c001e70b:	e8 ea f4 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e710:	59                   	pop    ecx
c001e711:	5f                   	pop    edi
c001e712:	52                   	push   edx
c001e713:	50                   	push   eax
c001e714:	e8 27 f2 ff ff       	call   c001d940 <Vm::fpuInternalTo64(unsigned long long)>
c001e719:	eb 70                	jmp    c001e78b <Vm::x87Handler(regs*)+0xa54>
c001e71b:	31 c0                	xor    eax,eax
c001e71d:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001e722:	75 74                	jne    c001e798 <Vm::x87Handler(regs*)+0xa61>
c001e724:	50                   	push   eax
c001e725:	50                   	push   eax
c001e726:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e729:	31 d2                	xor    edx,edx
c001e72b:	52                   	push   edx
c001e72c:	50                   	push   eax
c001e72d:	e8 f6 f2 ff ff       	call   c001da28 <Vm::fpuLongToFloat(long long)>
c001e732:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e739:	89 c6                	mov    esi,eax
c001e73b:	89 d7                	mov    edi,edx
c001e73d:	e8 b8 f4 ff ff       	call   c001dbfa <Vm::fpuGetReg(int)>
c001e742:	57                   	push   edi
c001e743:	56                   	push   esi
c001e744:	52                   	push   edx
c001e745:	50                   	push   eax
c001e746:	e8 5e f4 ff ff       	call   c001dba9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e74b:	83 c4 1c             	add    esp,0x1c
c001e74e:	52                   	push   edx
c001e74f:	50                   	push   eax
c001e750:	6a 00                	push   0x0
c001e752:	e8 e6 f4 ff ff       	call   c001dc3d <Vm::fpuSetReg(int, unsigned long long)>
c001e757:	e9 f2 f7 ff ff       	jmp    c001df4e <Vm::x87Handler(regs*)+0x217>
c001e75c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e760:	80 fa 05             	cmp    dl,0x5
c001e763:	75 11                	jne    c001e776 <Vm::x87Handler(regs*)+0xa3f>
c001e765:	55                   	push   ebp
c001e766:	55                   	push   ebp
c001e767:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e76a:	ff 36                	push   DWORD PTR [esi]
c001e76c:	e8 81 f2 ff ff       	call   c001d9f2 <Vm::fpuULongToFloat(unsigned long long)>
c001e771:	e9 cf f7 ff ff       	jmp    c001df45 <Vm::x87Handler(regs*)+0x20e>
c001e776:	31 c0                	xor    eax,eax
c001e778:	80 fa 07             	cmp    dl,0x7
c001e77b:	75 1b                	jne    c001e798 <Vm::x87Handler(regs*)+0xa61>
c001e77d:	e8 63 f5 ff ff       	call   c001dce5 <Vm::fpuPop()>
c001e782:	51                   	push   ecx
c001e783:	51                   	push   ecx
c001e784:	52                   	push   edx
c001e785:	50                   	push   eax
c001e786:	e8 0c f2 ff ff       	call   c001d997 <Vm::fpuFloatToLong(unsigned long long)>
c001e78b:	83 c4 10             	add    esp,0x10
c001e78e:	89 06                	mov    DWORD PTR [esi],eax
c001e790:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001e793:	e9 f8 f7 ff ff       	jmp    c001df90 <Vm::x87Handler(regs*)+0x259>
c001e798:	83 c4 1c             	add    esp,0x1c
c001e79b:	5b                   	pop    ebx
c001e79c:	5e                   	pop    esi
c001e79d:	5f                   	pop    edi
c001e79e:	5d                   	pop    ebp
c001e79f:	c3                   	ret    

c001e7a0 <__static_initialization_and_destruction_0(int, int)>:
c001e7a0:	83 ec 0c             	sub    esp,0xc
c001e7a3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e7a8:	75 1a                	jne    c001e7c4 <__static_initialization_and_destruction_0(int, int)+0x24>
c001e7aa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e7b2:	75 10                	jne    c001e7c4 <__static_initialization_and_destruction_0(int, int)+0x24>
c001e7b4:	83 ec 0c             	sub    esp,0xc
c001e7b7:	68 40 d0 02 c0       	push   0xc002d040
c001e7bc:	e8 bf 82 00 00       	call   c0026a80 <Vm::_FPUState::_FPUState()>
c001e7c1:	83 c4 10             	add    esp,0x10
c001e7c4:	90                   	nop
c001e7c5:	83 c4 0c             	add    esp,0xc
c001e7c8:	c3                   	ret    

c001e7c9 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001e7c9:	83 ec 0c             	sub    esp,0xc
c001e7cc:	83 ec 08             	sub    esp,0x8
c001e7cf:	68 ff ff 00 00       	push   0xffff
c001e7d4:	6a 01                	push   0x1
c001e7d6:	e8 c5 ff ff ff       	call   c001e7a0 <__static_initialization_and_destruction_0(int, int)>
c001e7db:	83 c4 10             	add    esp,0x10
c001e7de:	83 c4 0c             	add    esp,0xc
c001e7e1:	c3                   	ret    

c001e7e2 <FAT::getName()>:
c001e7e2:	b8 94 9f 02 c0       	mov    eax,0xc0029f94
c001e7e7:	c3                   	ret    

c001e7e8 <FAT::tell(void*, unsigned long long*)>:
c001e7e8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e7ed:	75 06                	jne    c001e7f5 <FAT::tell(void*, unsigned long long*)+0xd>
c001e7ef:	b8 04 00 00 00       	mov    eax,0x4
c001e7f4:	c3                   	ret    
c001e7f5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e7fa:	75 06                	jne    c001e802 <FAT::tell(void*, unsigned long long*)+0x1a>
c001e7fc:	b8 04 00 00 00       	mov    eax,0x4
c001e801:	c3                   	ret    
c001e802:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e806:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001e809:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001e80c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e810:	89 01                	mov    DWORD PTR [ecx],eax
c001e812:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e815:	b8 00 00 00 00       	mov    eax,0x0
c001e81a:	c3                   	ret    
c001e81b:	90                   	nop

c001e81c <FAT::stat(void*, unsigned long long*)>:
c001e81c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e821:	75 06                	jne    c001e829 <FAT::stat(void*, unsigned long long*)+0xd>
c001e823:	b8 04 00 00 00       	mov    eax,0x4
c001e828:	c3                   	ret    
c001e829:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e82e:	75 06                	jne    c001e836 <FAT::stat(void*, unsigned long long*)+0x1a>
c001e830:	b8 04 00 00 00       	mov    eax,0x4
c001e835:	c3                   	ret    
c001e836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e83a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001e83d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e840:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e844:	89 01                	mov    DWORD PTR [ecx],eax
c001e846:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e849:	b8 00 00 00 00       	mov    eax,0x0
c001e84e:	c3                   	ret    
c001e84f:	90                   	nop

c001e850 <FAT::~FAT()>:
c001e850:	83 ec 0c             	sub    esp,0xc
c001e853:	ba 18 a0 02 c0       	mov    edx,0xc002a018
c001e858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e85c:	89 10                	mov    DWORD PTR [eax],edx
c001e85e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e862:	83 ec 0c             	sub    esp,0xc
c001e865:	50                   	push   eax
c001e866:	e8 5b 41 ff ff       	call   c00129c6 <Filesystem::~Filesystem()>
c001e86b:	83 c4 10             	add    esp,0x10
c001e86e:	90                   	nop
c001e86f:	83 c4 0c             	add    esp,0xc
c001e872:	c3                   	ret    
c001e873:	90                   	nop

c001e874 <FAT::~FAT()>:
c001e874:	83 ec 0c             	sub    esp,0xc
c001e877:	83 ec 0c             	sub    esp,0xc
c001e87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e87e:	e8 cd ff ff ff       	call   c001e850 <FAT::~FAT()>
c001e883:	83 c4 10             	add    esp,0x10
c001e886:	83 ec 08             	sub    esp,0x8
c001e889:	6a 08                	push   0x8
c001e88b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e88f:	e8 29 3d ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c001e894:	83 c4 10             	add    esp,0x10
c001e897:	83 c4 0c             	add    esp,0xc
c001e89a:	c3                   	ret    
c001e89b:	90                   	nop

c001e89c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001e89c:	83 ec 1c             	sub    esp,0x1c
c001e89f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001e8a6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001e8ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e8af:	8b 04 85 c0 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2f40]
c001e8b6:	83 f8 ff             	cmp    eax,0xffffffff
c001e8b9:	75 34                	jne    c001e8ef <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001e8bb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e8bf:	88 c2                	mov    dl,al
c001e8c1:	a1 a0 d0 02 c0       	mov    eax,ds:0xc002d0a0
c001e8c6:	01 d0                	add    eax,edx
c001e8c8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e8cc:	8b 15 a0 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0a0
c001e8d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e8d6:	89 14 85 c0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f40],edx
c001e8dd:	a1 a0 d0 02 c0       	mov    eax,ds:0xc002d0a0
c001e8e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e8e6:	89 14 85 40 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2ec0],edx
c001e8ed:	eb 17                	jmp    c001e906 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001e8ef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e8f3:	88 c2                	mov    dl,al
c001e8f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e8f9:	8b 04 85 c0 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2f40]
c001e900:	01 d0                	add    eax,edx
c001e902:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e906:	83 ec 04             	sub    esp,0x4
c001e909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e911:	8d 44 24 15          	lea    eax,[esp+0x15]
c001e915:	50                   	push   eax
c001e916:	e8 cd 81 fe ff       	call   c0006ae8 <f_getlabel>
c001e91b:	83 c4 10             	add    esp,0x10
c001e91e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e922:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e927:	75 07                	jne    c001e930 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001e929:	b8 00 00 00 00       	mov    eax,0x0
c001e92e:	eb 05                	jmp    c001e935 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001e930:	b8 01 00 00 00       	mov    eax,0x1
c001e935:	83 c4 1c             	add    esp,0x1c
c001e938:	c3                   	ret    
c001e939:	90                   	nop

c001e93a <FAT::setlabel(LogicalDisk*, int, char*)>:
c001e93a:	57                   	push   edi
c001e93b:	83 ec 58             	sub    esp,0x58
c001e93e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001e946:	8d 54 24 10          	lea    edx,[esp+0x10]
c001e94a:	b9 0f 00 00 00       	mov    ecx,0xf
c001e94f:	b8 00 00 00 00       	mov    eax,0x0
c001e954:	fc                   	cld    
c001e955:	89 d7                	mov    edi,edx
c001e957:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e959:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e95d:	8b 04 85 c0 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2f40]
c001e964:	83 f8 ff             	cmp    eax,0xffffffff
c001e967:	75 34                	jne    c001e99d <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001e969:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e96d:	88 c2                	mov    dl,al
c001e96f:	a1 a0 d0 02 c0       	mov    eax,ds:0xc002d0a0
c001e974:	01 d0                	add    eax,edx
c001e976:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e97a:	8b 15 a0 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0a0
c001e980:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e984:	89 14 85 c0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f40],edx
c001e98b:	a1 a0 d0 02 c0       	mov    eax,ds:0xc002d0a0
c001e990:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001e994:	89 14 85 40 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2ec0],edx
c001e99b:	eb 17                	jmp    c001e9b4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001e99d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e9a1:	88 c2                	mov    dl,al
c001e9a3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e9a7:	8b 04 85 c0 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2f40]
c001e9ae:	01 d0                	add    eax,edx
c001e9b0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e9b4:	83 ec 08             	sub    esp,0x8
c001e9b7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001e9bb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e9bf:	50                   	push   eax
c001e9c0:	e8 1c 1e fe ff       	call   c00007e1 <strcat>
c001e9c5:	83 c4 10             	add    esp,0x10
c001e9c8:	83 ec 0c             	sub    esp,0xc
c001e9cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e9cf:	50                   	push   eax
c001e9d0:	e8 01 83 fe ff       	call   c0006cd6 <f_setlabel>
c001e9d5:	83 c4 10             	add    esp,0x10
c001e9d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e9dc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001e9e1:	75 07                	jne    c001e9ea <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001e9e3:	b8 00 00 00 00       	mov    eax,0x0
c001e9e8:	eb 05                	jmp    c001e9ef <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001e9ea:	b8 01 00 00 00       	mov    eax,0x1
c001e9ef:	83 c4 58             	add    esp,0x58
c001e9f2:	5f                   	pop    edi
c001e9f3:	c3                   	ret    

c001e9f4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001e9f4:	83 ec 2c             	sub    esp,0x2c
c001e9f7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001e9ff:	83 ec 08             	sub    esp,0x8
c001ea02:	68 b8 9f 02 c0       	push   0xc0029fb8
c001ea07:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ea0b:	e8 6b 1d fe ff       	call   c000077b <strcmp>
c001ea10:	83 c4 10             	add    esp,0x10
c001ea13:	85 c0                	test   eax,eax
c001ea15:	0f 94 c0             	sete   al
c001ea18:	84 c0                	test   al,al
c001ea1a:	74 0d                	je     c001ea29 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001ea1c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ea24:	e9 a6 00 00 00       	jmp    c001eacf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ea29:	83 ec 08             	sub    esp,0x8
c001ea2c:	68 aa 9f 02 c0       	push   0xc0029faa
c001ea31:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ea35:	e8 41 1d fe ff       	call   c000077b <strcmp>
c001ea3a:	83 c4 10             	add    esp,0x10
c001ea3d:	85 c0                	test   eax,eax
c001ea3f:	0f 94 c0             	sete   al
c001ea42:	84 c0                	test   al,al
c001ea44:	74 0a                	je     c001ea50 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001ea46:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ea4e:	eb 7f                	jmp    c001eacf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ea50:	83 ec 08             	sub    esp,0x8
c001ea53:	68 b0 9f 02 c0       	push   0xc0029fb0
c001ea58:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ea5c:	e8 1a 1d fe ff       	call   c000077b <strcmp>
c001ea61:	83 c4 10             	add    esp,0x10
c001ea64:	85 c0                	test   eax,eax
c001ea66:	0f 94 c0             	sete   al
c001ea69:	84 c0                	test   al,al
c001ea6b:	74 0a                	je     c001ea77 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001ea6d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ea75:	eb 58                	jmp    c001eacf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ea77:	83 ec 08             	sub    esp,0x8
c001ea7a:	68 8c 71 02 c0       	push   0xc002718c
c001ea7f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ea83:	e8 f3 1c fe ff       	call   c000077b <strcmp>
c001ea88:	83 c4 10             	add    esp,0x10
c001ea8b:	85 c0                	test   eax,eax
c001ea8d:	0f 94 c0             	sete   al
c001ea90:	84 c0                	test   al,al
c001ea92:	74 0a                	je     c001ea9e <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001ea94:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001ea9c:	eb 31                	jmp    c001eacf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ea9e:	83 ec 08             	sub    esp,0x8
c001eaa1:	68 b6 9f 02 c0       	push   0xc0029fb6
c001eaa6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eaaa:	e8 cc 1c fe ff       	call   c000077b <strcmp>
c001eaaf:	83 c4 10             	add    esp,0x10
c001eab2:	85 c0                	test   eax,eax
c001eab4:	0f 94 c0             	sete   al
c001eab7:	84 c0                	test   al,al
c001eab9:	74 0a                	je     c001eac5 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001eabb:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001eac3:	eb 0a                	jmp    c001eacf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001eac5:	b8 08 00 00 00       	mov    eax,0x8
c001eaca:	e9 04 01 00 00       	jmp    c001ebd3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001eacf:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001ead6:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001eadb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eadf:	8b 04 85 c0 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2f40]
c001eae6:	83 f8 ff             	cmp    eax,0xffffffff
c001eae9:	75 34                	jne    c001eb1f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001eaeb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001eaef:	88 c2                	mov    dl,al
c001eaf1:	a1 a0 d0 02 c0       	mov    eax,ds:0xc002d0a0
c001eaf6:	01 d0                	add    eax,edx
c001eaf8:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001eafc:	8b 15 a0 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0a0
c001eb02:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eb06:	89 14 85 c0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f40],edx
c001eb0d:	a1 a0 d0 02 c0       	mov    eax,ds:0xc002d0a0
c001eb12:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001eb16:	89 14 85 40 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2ec0],edx
c001eb1d:	eb 17                	jmp    c001eb36 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001eb1f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001eb23:	88 c2                	mov    dl,al
c001eb25:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eb29:	8b 04 85 c0 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2f40]
c001eb30:	01 d0                	add    eax,edx
c001eb32:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001eb36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb3a:	88 04 24             	mov    BYTE PTR [esp],al
c001eb3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001eb41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eb45:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001eb4d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001eb52:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001eb5a:	83 ec 0c             	sub    esp,0xc
c001eb5d:	68 00 20 00 00       	push   0x2000
c001eb62:	e8 69 09 ff ff       	call   c000f4d0 <malloc>
c001eb67:	83 c4 10             	add    esp,0x10
c001eb6a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001eb6e:	68 00 20 00 00       	push   0x2000
c001eb73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb77:	8d 44 24 08          	lea    eax,[esp+0x8]
c001eb7b:	50                   	push   eax
c001eb7c:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001eb80:	50                   	push   eax
c001eb81:	e8 9b 85 fe ff       	call   c0007121 <f_mkfs>
c001eb86:	83 c4 10             	add    esp,0x10
c001eb89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001eb8d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eb92:	75 07                	jne    c001eb9b <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001eb94:	b8 00 00 00 00       	mov    eax,0x0
c001eb99:	eb 38                	jmp    c001ebd3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001eb9b:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001eba0:	75 17                	jne    c001ebb9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001eba2:	83 ec 0c             	sub    esp,0xc
c001eba5:	68 e8 9f 02 c0       	push   0xc0029fe8
c001ebaa:	e8 ee 3a ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001ebaf:	83 c4 10             	add    esp,0x10
c001ebb2:	b8 09 00 00 00       	mov    eax,0x9
c001ebb7:	eb 1a                	jmp    c001ebd3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001ebb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ebbd:	83 ec 08             	sub    esp,0x8
c001ebc0:	50                   	push   eax
c001ebc1:	68 bc 9f 02 c0       	push   0xc0029fbc
c001ebc6:	e8 d2 3a ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001ebcb:	83 c4 10             	add    esp,0x10
c001ebce:	b8 01 00 00 00       	mov    eax,0x1
c001ebd3:	83 c4 2c             	add    esp,0x2c
c001ebd6:	c3                   	ret    
c001ebd7:	90                   	nop

c001ebd8 <FAT::tryMount(LogicalDisk*, int)>:
c001ebd8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001ebde:	a1 a0 d0 02 c0       	mov    eax,ds:0xc002d0a0
c001ebe3:	83 f8 14             	cmp    eax,0x14
c001ebe6:	75 17                	jne    c001ebff <FAT::tryMount(LogicalDisk*, int)+0x27>
c001ebe8:	83 ec 0c             	sub    esp,0xc
c001ebeb:	68 ce 9f 02 c0       	push   0xc0029fce
c001ebf0:	e8 ec a5 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c001ebf5:	83 c4 10             	add    esp,0x10
c001ebf8:	b0 00                	mov    al,0x0
c001ebfa:	e9 d7 01 00 00       	jmp    c001edd6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001ebff:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001ec06:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ec0c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec12:	3d 00 02 00 00       	cmp    eax,0x200
c001ec17:	74 07                	je     c001ec20 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001ec19:	b0 00                	mov    al,0x0
c001ec1b:	e9 b6 01 00 00       	jmp    c001edd6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001ec20:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001ec28:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001ec2f:	8b 04 85 c0 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2f40]
c001ec36:	83 f8 ff             	cmp    eax,0xffffffff
c001ec39:	74 07                	je     c001ec42 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001ec3b:	b0 01                	mov    al,0x1
c001ec3d:	e9 94 01 00 00       	jmp    c001edd6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001ec42:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001ec4c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001ec54:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001ec5b:	88 c2                	mov    dl,al
c001ec5d:	a1 a0 d0 02 c0       	mov    eax,ds:0xc002d0a0
c001ec62:	01 d0                	add    eax,edx
c001ec64:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001ec6b:	8b 15 a0 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0a0
c001ec71:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001ec78:	89 14 85 c0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f40],edx
c001ec7f:	a1 a0 d0 02 c0       	mov    eax,ds:0xc002d0a0
c001ec84:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001ec8b:	89 14 85 40 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2ec0],edx
c001ec92:	83 ec 0c             	sub    esp,0xc
c001ec95:	68 54 02 00 00       	push   0x254
c001ec9a:	e8 31 08 ff ff       	call   c000f4d0 <malloc>
c001ec9f:	83 c4 10             	add    esp,0x10
c001eca2:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001eca9:	83 ec 04             	sub    esp,0x4
c001ecac:	6a 00                	push   0x0
c001ecae:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001ecb5:	50                   	push   eax
c001ecb6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001ecbd:	e8 1d 60 fe ff       	call   c0004cdf <f_mount>
c001ecc2:	83 c4 10             	add    esp,0x10
c001ecc5:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001eccc:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001ecd4:	74 19                	je     c001ecef <FAT::tryMount(LogicalDisk*, int)+0x117>
c001ecd6:	83 ec 0c             	sub    esp,0xc
c001ecd9:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001ece0:	e8 0b 08 ff ff       	call   c000f4f0 <rfree>
c001ece5:	83 c4 10             	add    esp,0x10
c001ece8:	b0 00                	mov    al,0x0
c001ecea:	e9 e7 00 00 00       	jmp    c001edd6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001ecef:	83 ec 04             	sub    esp,0x4
c001ecf2:	68 00 01 00 00       	push   0x100
c001ecf7:	6a 00                	push   0x0
c001ecf9:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001ed00:	50                   	push   eax
c001ed01:	e8 85 19 fe ff       	call   c000068b <memset>
c001ed06:	83 c4 10             	add    esp,0x10
c001ed09:	83 ec 08             	sub    esp,0x8
c001ed0c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001ed13:	50                   	push   eax
c001ed14:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001ed1b:	50                   	push   eax
c001ed1c:	e8 c0 1a fe ff       	call   c00007e1 <strcat>
c001ed21:	83 c4 10             	add    esp,0x10
c001ed24:	83 ec 08             	sub    esp,0x8
c001ed27:	68 dc 9f 02 c0       	push   0xc0029fdc
c001ed2c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001ed33:	50                   	push   eax
c001ed34:	e8 a8 1a fe ff       	call   c00007e1 <strcat>
c001ed39:	83 c4 10             	add    esp,0x10
c001ed3c:	83 ec 04             	sub    esp,0x4
c001ed3f:	6a 01                	push   0x1
c001ed41:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001ed48:	50                   	push   eax
c001ed49:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed4d:	50                   	push   eax
c001ed4e:	e8 ee 5f fe ff       	call   c0004d41 <f_open>
c001ed53:	83 c4 10             	add    esp,0x10
c001ed56:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001ed5d:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001ed64:	85 c0                	test   eax,eax
c001ed66:	74 0a                	je     c001ed72 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001ed68:	78 2d                	js     c001ed97 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001ed6a:	83 e8 04             	sub    eax,0x4
c001ed6d:	83 f8 01             	cmp    eax,0x1
c001ed70:	77 25                	ja     c001ed97 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001ed72:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001ed7a:	83 ec 0c             	sub    esp,0xc
c001ed7d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed81:	50                   	push   eax
c001ed82:	e8 0c 6b fe ff       	call   c0005893 <f_close>
c001ed87:	83 c4 10             	add    esp,0x10
c001ed8a:	90                   	nop
c001ed8b:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001ed93:	74 3a                	je     c001edcf <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001ed95:	eb 2d                	jmp    c001edc4 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001ed97:	83 ec 0c             	sub    esp,0xc
c001ed9a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001eda1:	e8 4a 07 ff ff       	call   c000f4f0 <rfree>
c001eda6:	83 c4 10             	add    esp,0x10
c001eda9:	83 ec 04             	sub    esp,0x4
c001edac:	6a 00                	push   0x0
c001edae:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001edb5:	50                   	push   eax
c001edb6:	6a 00                	push   0x0
c001edb8:	e8 22 5f fe ff       	call   c0004cdf <f_mount>
c001edbd:	83 c4 10             	add    esp,0x10
c001edc0:	b0 00                	mov    al,0x0
c001edc2:	eb 12                	jmp    c001edd6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001edc4:	a1 a0 d0 02 c0       	mov    eax,ds:0xc002d0a0
c001edc9:	40                   	inc    eax
c001edca:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001edcf:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001edd6:	81 c4 6c 03 00 00    	add    esp,0x36c
c001eddc:	c3                   	ret    
c001eddd:	90                   	nop

c001edde <FAT::readDir(void*, unsigned long, void*, int*)>:
c001edde:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001ede4:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001edec:	74 0a                	je     c001edf8 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001edee:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001edf6:	75 0a                	jne    c001ee02 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001edf8:	b8 04 00 00 00       	mov    eax,0x4
c001edfd:	e9 db 00 00 00       	jmp    c001eedd <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001ee02:	83 ec 08             	sub    esp,0x8
c001ee05:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ee0c:	50                   	push   eax
c001ee0d:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001ee14:	e8 84 70 fe ff       	call   c0005e9d <f_readdir>
c001ee19:	83 c4 10             	add    esp,0x10
c001ee1c:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001ee23:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001ee29:	83 ec 0c             	sub    esp,0xc
c001ee2c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ee33:	83 c0 1a             	add    eax,0x1a
c001ee36:	50                   	push   eax
c001ee37:	e8 6c 18 fe ff       	call   c00006a8 <strlen>
c001ee3c:	83 c4 10             	add    esp,0x10
c001ee3f:	ba 00 00 00 00       	mov    edx,0x0
c001ee44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ee48:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ee4c:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001ee53:	0f b6 c0             	movzx  eax,al
c001ee56:	83 e0 10             	and    eax,0x10
c001ee59:	74 07                	je     c001ee62 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001ee5b:	b8 02 00 00 00       	mov    eax,0x2
c001ee60:	eb 05                	jmp    c001ee67 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001ee62:	b8 01 00 00 00       	mov    eax,0x1
c001ee67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee6b:	83 ec 08             	sub    esp,0x8
c001ee6e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ee75:	83 c0 1a             	add    eax,0x1a
c001ee78:	50                   	push   eax
c001ee79:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee7d:	83 c0 10             	add    eax,0x10
c001ee80:	50                   	push   eax
c001ee81:	e8 a4 18 fe ff       	call   c000072a <strcpy>
c001ee86:	83 c4 10             	add    esp,0x10
c001ee89:	83 ec 04             	sub    esp,0x4
c001ee8c:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001ee93:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ee97:	50                   	push   eax
c001ee98:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001ee9f:	e8 b1 17 fe ff       	call   c0000655 <memcpy>
c001eea4:	83 c4 10             	add    esp,0x10
c001eea7:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001eeae:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001eeb4:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001eebb:	84 c0                	test   al,al
c001eebd:	75 07                	jne    c001eec6 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001eebf:	b8 07 00 00 00       	mov    eax,0x7
c001eec4:	eb 17                	jmp    c001eedd <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001eec6:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001eecd:	85 c0                	test   eax,eax
c001eecf:	75 07                	jne    c001eed8 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001eed1:	b8 00 00 00 00       	mov    eax,0x0
c001eed6:	eb 05                	jmp    c001eedd <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001eed8:	b8 01 00 00 00       	mov    eax,0x1
c001eedd:	81 c4 3c 02 00 00    	add    esp,0x23c
c001eee3:	c3                   	ret    

c001eee4 <FAT::read(void*, unsigned long, void*, int*)>:
c001eee4:	83 ec 1c             	sub    esp,0x1c
c001eee7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001eeec:	74 07                	je     c001eef5 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001eeee:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001eef3:	75 07                	jne    c001eefc <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001eef5:	b8 04 00 00 00       	mov    eax,0x4
c001eefa:	eb 3d                	jmp    c001ef39 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001eefc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ef00:	50                   	push   eax
c001ef01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ef05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ef09:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ef0d:	e8 6b 62 fe ff       	call   c000517d <f_read>
c001ef12:	83 c4 10             	add    esp,0x10
c001ef15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef1d:	89 c2                	mov    edx,eax
c001ef1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ef23:	89 10                	mov    DWORD PTR [eax],edx
c001ef25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef29:	85 c0                	test   eax,eax
c001ef2b:	75 07                	jne    c001ef34 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001ef2d:	b8 00 00 00 00       	mov    eax,0x0
c001ef32:	eb 05                	jmp    c001ef39 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001ef34:	b8 01 00 00 00       	mov    eax,0x1
c001ef39:	83 c4 1c             	add    esp,0x1c
c001ef3c:	c3                   	ret    
c001ef3d:	90                   	nop

c001ef3e <FAT::write(void*, unsigned long, void*, int*)>:
c001ef3e:	83 ec 1c             	sub    esp,0x1c
c001ef41:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ef46:	74 07                	je     c001ef4f <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001ef48:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ef4d:	75 07                	jne    c001ef56 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001ef4f:	b8 04 00 00 00       	mov    eax,0x4
c001ef54:	eb 3d                	jmp    c001ef93 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001ef56:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ef5a:	50                   	push   eax
c001ef5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ef5f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ef63:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ef67:	e8 91 64 fe ff       	call   c00053fd <f_write>
c001ef6c:	83 c4 10             	add    esp,0x10
c001ef6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef77:	89 c2                	mov    edx,eax
c001ef79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ef7d:	89 10                	mov    DWORD PTR [eax],edx
c001ef7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef83:	85 c0                	test   eax,eax
c001ef85:	75 07                	jne    c001ef8e <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001ef87:	b8 00 00 00 00       	mov    eax,0x0
c001ef8c:	eb 05                	jmp    c001ef93 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001ef8e:	b8 01 00 00 00       	mov    eax,0x1
c001ef93:	83 c4 1c             	add    esp,0x1c
c001ef96:	c3                   	ret    
c001ef97:	90                   	nop

c001ef98 <FAT::close(void*)>:
c001ef98:	83 ec 1c             	sub    esp,0x1c
c001ef9b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001efa0:	75 07                	jne    c001efa9 <FAT::close(void*)+0x11>
c001efa2:	b8 04 00 00 00       	mov    eax,0x4
c001efa7:	eb 36                	jmp    c001efdf <FAT::close(void*)+0x47>
c001efa9:	83 ec 0c             	sub    esp,0xc
c001efac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001efb0:	e8 de 68 fe ff       	call   c0005893 <f_close>
c001efb5:	83 c4 10             	add    esp,0x10
c001efb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efbc:	83 ec 0c             	sub    esp,0xc
c001efbf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001efc3:	e8 18 05 ff ff       	call   c000f4e0 <free>
c001efc8:	83 c4 10             	add    esp,0x10
c001efcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efcf:	85 c0                	test   eax,eax
c001efd1:	75 07                	jne    c001efda <FAT::close(void*)+0x42>
c001efd3:	b8 00 00 00 00       	mov    eax,0x0
c001efd8:	eb 05                	jmp    c001efdf <FAT::close(void*)+0x47>
c001efda:	b8 01 00 00 00       	mov    eax,0x1
c001efdf:	83 c4 1c             	add    esp,0x1c
c001efe2:	c3                   	ret    
c001efe3:	90                   	nop

c001efe4 <FAT::closeDir(void*)>:
c001efe4:	83 ec 1c             	sub    esp,0x1c
c001efe7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001efec:	75 07                	jne    c001eff5 <FAT::closeDir(void*)+0x11>
c001efee:	b8 04 00 00 00       	mov    eax,0x4
c001eff3:	eb 36                	jmp    c001f02b <FAT::closeDir(void*)+0x47>
c001eff5:	83 ec 0c             	sub    esp,0xc
c001eff8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001effc:	e8 7a 6e fe ff       	call   c0005e7b <f_closedir>
c001f001:	83 c4 10             	add    esp,0x10
c001f004:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f008:	83 ec 0c             	sub    esp,0xc
c001f00b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f00f:	e8 cc 04 ff ff       	call   c000f4e0 <free>
c001f014:	83 c4 10             	add    esp,0x10
c001f017:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f01b:	85 c0                	test   eax,eax
c001f01d:	75 07                	jne    c001f026 <FAT::closeDir(void*)+0x42>
c001f01f:	b8 00 00 00 00       	mov    eax,0x0
c001f024:	eb 05                	jmp    c001f02b <FAT::closeDir(void*)+0x47>
c001f026:	b8 01 00 00 00       	mov    eax,0x1
c001f02b:	83 c4 1c             	add    esp,0x1c
c001f02e:	c3                   	ret    
c001f02f:	90                   	nop

c001f030 <FAT::seek(void*, unsigned long long)>:
c001f030:	83 ec 2c             	sub    esp,0x2c
c001f033:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f037:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f03b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f03f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f043:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001f048:	75 07                	jne    c001f051 <FAT::seek(void*, unsigned long long)+0x21>
c001f04a:	b8 04 00 00 00       	mov    eax,0x4
c001f04f:	eb 2f                	jmp    c001f080 <FAT::seek(void*, unsigned long long)+0x50>
c001f051:	83 ec 04             	sub    esp,0x4
c001f054:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f058:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f05c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001f060:	e8 5d 68 fe ff       	call   c00058c2 <f_lseek>
c001f065:	83 c4 10             	add    esp,0x10
c001f068:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f06c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f070:	85 c0                	test   eax,eax
c001f072:	75 07                	jne    c001f07b <FAT::seek(void*, unsigned long long)+0x4b>
c001f074:	b8 00 00 00 00       	mov    eax,0x0
c001f079:	eb 05                	jmp    c001f080 <FAT::seek(void*, unsigned long long)+0x50>
c001f07b:	b8 01 00 00 00       	mov    eax,0x1
c001f080:	83 c4 2c             	add    esp,0x2c
c001f083:	c3                   	ret    

c001f084 <fatWrapperReadDisk>:
c001f084:	83 ec 1c             	sub    esp,0x1c
c001f087:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f08b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f08f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f093:	89 04 24             	mov    DWORD PTR [esp],eax
c001f096:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f09a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f09e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f0a3:	8b 04 85 c0 c0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3f40]
c001f0aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f0ae:	83 ec 0c             	sub    esp,0xc
c001f0b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f0b5:	52                   	push   edx
c001f0b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f0ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f0be:	50                   	push   eax
c001f0bf:	e8 66 6c ff ff       	call   c0015d2a <LogicalDisk::read(unsigned long long, int, void*)>
c001f0c4:	83 c4 20             	add    esp,0x20
c001f0c7:	83 c4 1c             	add    esp,0x1c
c001f0ca:	c3                   	ret    

c001f0cb <fatWrapperWriteDisk>:
c001f0cb:	83 ec 1c             	sub    esp,0x1c
c001f0ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f0d2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f0d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f0da:	89 04 24             	mov    DWORD PTR [esp],eax
c001f0dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f0e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f0e5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f0ea:	8b 04 85 c0 c0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3f40]
c001f0f1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f0f5:	83 ec 0c             	sub    esp,0xc
c001f0f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f0fc:	52                   	push   edx
c001f0fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f101:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f105:	50                   	push   eax
c001f106:	e8 8b 6c ff ff       	call   c0015d96 <LogicalDisk::write(unsigned long long, int, void*)>
c001f10b:	83 c4 20             	add    esp,0x20
c001f10e:	83 c4 1c             	add    esp,0x1c
c001f111:	c3                   	ret    

c001f112 <fatWrapperIoctl>:
c001f112:	53                   	push   ebx
c001f113:	83 ec 28             	sub    esp,0x28
c001f116:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f11a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f11e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001f122:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f126:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001f12b:	75 31                	jne    c001f15e <fatWrapperIoctl+0x4c>
c001f12d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f131:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f135:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f13a:	8b 04 85 c0 c0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3f40]
c001f141:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f147:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f14d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f151:	66 89 02             	mov    WORD PTR [edx],ax
c001f154:	b8 00 00 00 00       	mov    eax,0x0
c001f159:	e9 b2 00 00 00       	jmp    c001f210 <fatWrapperIoctl+0xfe>
c001f15e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001f163:	75 6a                	jne    c001f1cf <fatWrapperIoctl+0xbd>
c001f165:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f169:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f16d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f172:	8b 04 85 c0 c0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3f40]
c001f179:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f17f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001f185:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001f18b:	89 c8                	mov    eax,ecx
c001f18d:	89 da                	mov    edx,ebx
c001f18f:	0f a4 c2 0a          	shld   edx,eax,0xa
c001f193:	c1 e0 0a             	shl    eax,0xa
c001f196:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001f19b:	8b 0c 8d c0 c0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3f40]
c001f1a2:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001f1a8:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001f1ae:	89 cb                	mov    ebx,ecx
c001f1b0:	c1 fb 1f             	sar    ebx,0x1f
c001f1b3:	53                   	push   ebx
c001f1b4:	51                   	push   ecx
c001f1b5:	52                   	push   edx
c001f1b6:	50                   	push   eax
c001f1b7:	e8 70 55 00 00       	call   c002472c <__udivdi3>
c001f1bc:	83 c4 10             	add    esp,0x10
c001f1bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001f1c3:	89 01                	mov    DWORD PTR [ecx],eax
c001f1c5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f1c8:	b8 00 00 00 00       	mov    eax,0x0
c001f1cd:	eb 41                	jmp    c001f210 <fatWrapperIoctl+0xfe>
c001f1cf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001f1d4:	75 07                	jne    c001f1dd <fatWrapperIoctl+0xcb>
c001f1d6:	b8 00 00 00 00       	mov    eax,0x0
c001f1db:	eb 33                	jmp    c001f210 <fatWrapperIoctl+0xfe>
c001f1dd:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001f1e2:	75 19                	jne    c001f1fd <fatWrapperIoctl+0xeb>
c001f1e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f1e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f1ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f1f0:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001f1f6:	b8 00 00 00 00       	mov    eax,0x0
c001f1fb:	eb 13                	jmp    c001f210 <fatWrapperIoctl+0xfe>
c001f1fd:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001f202:	75 07                	jne    c001f20b <fatWrapperIoctl+0xf9>
c001f204:	b8 00 00 00 00       	mov    eax,0x0
c001f209:	eb 05                	jmp    c001f210 <fatWrapperIoctl+0xfe>
c001f20b:	b8 04 00 00 00       	mov    eax,0x4
c001f210:	83 c4 28             	add    esp,0x28
c001f213:	5b                   	pop    ebx
c001f214:	c3                   	ret    
c001f215:	90                   	nop

c001f216 <FAT::FAT()>:
c001f216:	83 ec 1c             	sub    esp,0x1c
c001f219:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f21d:	83 ec 0c             	sub    esp,0xc
c001f220:	50                   	push   eax
c001f221:	e8 7c 37 ff ff       	call   c00129a2 <Filesystem::Filesystem()>
c001f226:	83 c4 10             	add    esp,0x10
c001f229:	ba 18 a0 02 c0       	mov    edx,0xc002a018
c001f22e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f232:	89 10                	mov    DWORD PTR [eax],edx
c001f234:	c7 05 a0 d0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d0a0,0x0
c001f23e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001f246:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001f24b:	7f 15                	jg     c001f262 <FAT::FAT()+0x4c>
c001f24d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f251:	c7 04 85 c0 d0 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd2f40],0xffffffff
c001f25c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001f260:	eb e4                	jmp    c001f246 <FAT::FAT()+0x30>
c001f262:	90                   	nop
c001f263:	83 c4 1c             	add    esp,0x1c
c001f266:	c3                   	ret    
c001f267:	90                   	nop

c001f268 <FAT::fixFilepath(char*)>:
c001f268:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f26c:	8a 00                	mov    al,BYTE PTR [eax]
c001f26e:	3c 40                	cmp    al,0x40
c001f270:	7e 2c                	jle    c001f29e <FAT::fixFilepath(char*)+0x36>
c001f272:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f276:	8a 00                	mov    al,BYTE PTR [eax]
c001f278:	83 e8 41             	sub    eax,0x41
c001f27b:	88 c2                	mov    dl,al
c001f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f281:	88 10                	mov    BYTE PTR [eax],dl
c001f283:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f287:	8a 00                	mov    al,BYTE PTR [eax]
c001f289:	0f be c0             	movsx  eax,al
c001f28c:	8b 04 85 c0 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2f40]
c001f293:	83 c0 30             	add    eax,0x30
c001f296:	88 c2                	mov    dl,al
c001f298:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f29c:	88 10                	mov    BYTE PTR [eax],dl
c001f29e:	90                   	nop
c001f29f:	c3                   	ret    

c001f2a0 <FAT::open(char const*, void**, FileOpenMode)>:
c001f2a0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f2a6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f2ae:	74 0a                	je     c001f2ba <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001f2b0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001f2b8:	75 0a                	jne    c001f2c4 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001f2ba:	b8 04 00 00 00       	mov    eax,0x4
c001f2bf:	e9 fd 00 00 00       	jmp    c001f3c1 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001f2c4:	83 ec 08             	sub    esp,0x8
c001f2c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f2ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f2d2:	50                   	push   eax
c001f2d3:	e8 52 14 fe ff       	call   c000072a <strcpy>
c001f2d8:	83 c4 10             	add    esp,0x10
c001f2db:	83 ec 08             	sub    esp,0x8
c001f2de:	8d 44 24 10          	lea    eax,[esp+0x10]
c001f2e2:	50                   	push   eax
c001f2e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f2ea:	e8 79 ff ff ff       	call   c001f268 <FAT::fixFilepath(char*)>
c001f2ef:	83 c4 10             	add    esp,0x10
c001f2f2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001f2fa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f301:	83 e0 01             	and    eax,0x1
c001f304:	74 08                	je     c001f30e <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001f306:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001f30e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f315:	83 e0 04             	and    eax,0x4
c001f318:	74 10                	je     c001f32a <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001f31a:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001f322:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001f32a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f331:	83 e0 02             	and    eax,0x2
c001f334:	74 08                	je     c001f33e <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001f336:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001f33e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f345:	83 e0 08             	and    eax,0x8
c001f348:	74 08                	je     c001f352 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001f34a:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001f352:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f359:	83 e0 10             	and    eax,0x10
c001f35c:	74 08                	je     c001f366 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001f35e:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001f366:	83 ec 0c             	sub    esp,0xc
c001f369:	68 50 02 00 00       	push   0x250
c001f36e:	e8 5d 01 ff ff       	call   c000f4d0 <malloc>
c001f373:	83 c4 10             	add    esp,0x10
c001f376:	89 c2                	mov    edx,eax
c001f378:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f37f:	89 10                	mov    DWORD PTR [eax],edx
c001f381:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001f389:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f390:	8b 00                	mov    eax,DWORD PTR [eax]
c001f392:	83 ec 04             	sub    esp,0x4
c001f395:	52                   	push   edx
c001f396:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f39a:	52                   	push   edx
c001f39b:	50                   	push   eax
c001f39c:	e8 a0 59 fe ff       	call   c0004d41 <f_open>
c001f3a1:	83 c4 10             	add    esp,0x10
c001f3a4:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001f3ab:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001f3b3:	74 07                	je     c001f3bc <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001f3b5:	b8 01 00 00 00       	mov    eax,0x1
c001f3ba:	eb 05                	jmp    c001f3c1 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001f3bc:	b8 00 00 00 00       	mov    eax,0x0
c001f3c1:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f3c7:	c3                   	ret    

c001f3c8 <FAT::openDir(char const*, void**)>:
c001f3c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f3ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f3d6:	74 0a                	je     c001f3e2 <FAT::openDir(char const*, void**)+0x1a>
c001f3d8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001f3e0:	75 07                	jne    c001f3e9 <FAT::openDir(char const*, void**)+0x21>
c001f3e2:	b8 04 00 00 00       	mov    eax,0x4
c001f3e7:	eb 7d                	jmp    c001f466 <FAT::openDir(char const*, void**)+0x9e>
c001f3e9:	83 ec 08             	sub    esp,0x8
c001f3ec:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f3f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f3f7:	50                   	push   eax
c001f3f8:	e8 2d 13 fe ff       	call   c000072a <strcpy>
c001f3fd:	83 c4 10             	add    esp,0x10
c001f400:	83 ec 08             	sub    esp,0x8
c001f403:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f407:	50                   	push   eax
c001f408:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f40f:	e8 54 fe ff ff       	call   c001f268 <FAT::fixFilepath(char*)>
c001f414:	83 c4 10             	add    esp,0x10
c001f417:	83 ec 0c             	sub    esp,0xc
c001f41a:	6a 4c                	push   0x4c
c001f41c:	e8 af 00 ff ff       	call   c000f4d0 <malloc>
c001f421:	83 c4 10             	add    esp,0x10
c001f424:	89 c2                	mov    edx,eax
c001f426:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f42d:	89 10                	mov    DWORD PTR [eax],edx
c001f42f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f436:	8b 00                	mov    eax,DWORD PTR [eax]
c001f438:	83 ec 08             	sub    esp,0x8
c001f43b:	8d 54 24 14          	lea    edx,[esp+0x14]
c001f43f:	52                   	push   edx
c001f440:	50                   	push   eax
c001f441:	e8 33 69 fe ff       	call   c0005d79 <f_opendir>
c001f446:	83 c4 10             	add    esp,0x10
c001f449:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f450:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001f458:	74 07                	je     c001f461 <FAT::openDir(char const*, void**)+0x99>
c001f45a:	b8 01 00 00 00       	mov    eax,0x1
c001f45f:	eb 05                	jmp    c001f466 <FAT::openDir(char const*, void**)+0x9e>
c001f461:	b8 00 00 00 00       	mov    eax,0x0
c001f466:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f46c:	c3                   	ret    
c001f46d:	90                   	nop

c001f46e <FAT::stat(char const*, unsigned long long*, bool*)>:
c001f46e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001f474:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001f47c:	75 0a                	jne    c001f488 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001f47e:	b8 04 00 00 00       	mov    eax,0x4
c001f483:	e9 c9 00 00 00       	jmp    c001f551 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f488:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001f490:	75 0a                	jne    c001f49c <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001f492:	b8 04 00 00 00       	mov    eax,0x4
c001f497:	e9 b5 00 00 00       	jmp    c001f551 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f49c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001f4a4:	75 0a                	jne    c001f4b0 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001f4a6:	b8 04 00 00 00       	mov    eax,0x4
c001f4ab:	e9 a1 00 00 00       	jmp    c001f551 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f4b0:	83 ec 08             	sub    esp,0x8
c001f4b3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f4ba:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001f4c1:	50                   	push   eax
c001f4c2:	e8 63 12 fe ff       	call   c000072a <strcpy>
c001f4c7:	83 c4 10             	add    esp,0x10
c001f4ca:	83 ec 08             	sub    esp,0x8
c001f4cd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001f4d4:	50                   	push   eax
c001f4d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f4dc:	e8 87 fd ff ff       	call   c001f268 <FAT::fixFilepath(char*)>
c001f4e1:	83 c4 10             	add    esp,0x10
c001f4e4:	83 ec 08             	sub    esp,0x8
c001f4e7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f4eb:	50                   	push   eax
c001f4ec:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001f4f3:	50                   	push   eax
c001f4f4:	e8 3f 6a fe ff       	call   c0005f38 <f_stat>
c001f4f9:	83 c4 10             	add    esp,0x10
c001f4fc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001f503:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001f50a:	85 c0                	test   eax,eax
c001f50c:	74 07                	je     c001f515 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001f50e:	83 f8 04             	cmp    eax,0x4
c001f511:	74 32                	je     c001f545 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001f513:	eb 37                	jmp    c001f54c <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001f515:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f519:	0f b6 c0             	movzx  eax,al
c001f51c:	83 e0 10             	and    eax,0x10
c001f51f:	0f 95 c2             	setne  dl
c001f522:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001f529:	88 10                	mov    BYTE PTR [eax],dl
c001f52b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f52e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f532:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001f539:	89 01                	mov    DWORD PTR [ecx],eax
c001f53b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f53e:	b8 00 00 00 00       	mov    eax,0x0
c001f543:	eb 0c                	jmp    c001f551 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f545:	b8 02 00 00 00       	mov    eax,0x2
c001f54a:	eb 05                	jmp    c001f551 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f54c:	b8 01 00 00 00       	mov    eax,0x1
c001f551:	81 c4 2c 02 00 00    	add    esp,0x22c
c001f557:	c3                   	ret    

c001f558 <FAT::unlink(char const*)>:
c001f558:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f55e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f566:	75 07                	jne    c001f56f <FAT::unlink(char const*)+0x17>
c001f568:	b8 04 00 00 00       	mov    eax,0x4
c001f56d:	eb 5c                	jmp    c001f5cb <FAT::unlink(char const*)+0x73>
c001f56f:	83 ec 08             	sub    esp,0x8
c001f572:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f579:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f57d:	50                   	push   eax
c001f57e:	e8 a7 11 fe ff       	call   c000072a <strcpy>
c001f583:	83 c4 10             	add    esp,0x10
c001f586:	83 ec 08             	sub    esp,0x8
c001f589:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f58d:	50                   	push   eax
c001f58e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f595:	e8 ce fc ff ff       	call   c001f268 <FAT::fixFilepath(char*)>
c001f59a:	83 c4 10             	add    esp,0x10
c001f59d:	83 ec 0c             	sub    esp,0xc
c001f5a0:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f5a4:	50                   	push   eax
c001f5a5:	e8 e0 6c fe ff       	call   c000628a <f_unlink>
c001f5aa:	83 c4 10             	add    esp,0x10
c001f5ad:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f5b4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001f5bb:	85 c0                	test   eax,eax
c001f5bd:	75 07                	jne    c001f5c6 <FAT::unlink(char const*)+0x6e>
c001f5bf:	b8 00 00 00 00       	mov    eax,0x0
c001f5c4:	eb 05                	jmp    c001f5cb <FAT::unlink(char const*)+0x73>
c001f5c6:	b8 01 00 00 00       	mov    eax,0x1
c001f5cb:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f5d1:	c3                   	ret    

c001f5d2 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001f5d2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001f5d8:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001f5df:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001f5e6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001f5ea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f5ee:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001f5f6:	75 0a                	jne    c001f602 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001f5f8:	b8 04 00 00 00       	mov    eax,0x4
c001f5fd:	e9 1c 01 00 00       	jmp    c001f71e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001f602:	83 ec 08             	sub    esp,0x8
c001f605:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001f60c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f610:	50                   	push   eax
c001f611:	e8 14 11 fe ff       	call   c000072a <strcpy>
c001f616:	83 c4 10             	add    esp,0x10
c001f619:	83 ec 08             	sub    esp,0x8
c001f61c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f620:	50                   	push   eax
c001f621:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001f628:	e8 3b fc ff ff       	call   c001f268 <FAT::fixFilepath(char*)>
c001f62d:	83 c4 10             	add    esp,0x10
c001f630:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001f638:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001f640:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f645:	83 e0 01             	and    eax,0x1
c001f648:	74 08                	je     c001f652 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001f64a:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001f652:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f657:	83 e0 02             	and    eax,0x2
c001f65a:	74 08                	je     c001f664 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001f65c:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001f664:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f669:	83 e0 04             	and    eax,0x4
c001f66c:	74 08                	je     c001f676 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001f66e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001f676:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f67b:	83 e0 08             	and    eax,0x8
c001f67e:	74 08                	je     c001f688 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001f680:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001f688:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f68d:	83 e0 01             	and    eax,0x1
c001f690:	74 08                	je     c001f69a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001f692:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001f69a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f69f:	83 e0 02             	and    eax,0x2
c001f6a2:	74 08                	je     c001f6ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001f6a4:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001f6ac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f6b1:	83 e0 04             	and    eax,0x4
c001f6b4:	74 08                	je     c001f6be <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001f6b6:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001f6be:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f6c3:	83 e0 08             	and    eax,0x8
c001f6c6:	74 08                	je     c001f6d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001f6c8:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001f6d0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001f6d7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001f6de:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001f6e6:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001f6ee:	83 ec 04             	sub    esp,0x4
c001f6f1:	52                   	push   edx
c001f6f2:	50                   	push   eax
c001f6f3:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f6f7:	50                   	push   eax
c001f6f8:	e8 2f 72 fe ff       	call   c000692c <f_chmod>
c001f6fd:	83 c4 10             	add    esp,0x10
c001f700:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001f707:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001f70e:	85 c0                	test   eax,eax
c001f710:	75 07                	jne    c001f719 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001f712:	b8 00 00 00 00       	mov    eax,0x0
c001f717:	eb 05                	jmp    c001f71e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001f719:	b8 01 00 00 00       	mov    eax,0x1
c001f71e:	81 c4 2c 01 00 00    	add    esp,0x12c
c001f724:	c3                   	ret    
c001f725:	90                   	nop

c001f726 <FAT::rename(char const*, char const*)>:
c001f726:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f72c:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001f734:	74 0a                	je     c001f740 <FAT::rename(char const*, char const*)+0x1a>
c001f736:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001f73e:	75 0a                	jne    c001f74a <FAT::rename(char const*, char const*)+0x24>
c001f740:	b8 04 00 00 00       	mov    eax,0x4
c001f745:	e9 98 00 00 00       	jmp    c001f7e2 <FAT::rename(char const*, char const*)+0xbc>
c001f74a:	83 ec 08             	sub    esp,0x8
c001f74d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f754:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f75b:	50                   	push   eax
c001f75c:	e8 c9 0f fe ff       	call   c000072a <strcpy>
c001f761:	83 c4 10             	add    esp,0x10
c001f764:	83 ec 08             	sub    esp,0x8
c001f767:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001f76e:	50                   	push   eax
c001f76f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f776:	e8 ed fa ff ff       	call   c001f268 <FAT::fixFilepath(char*)>
c001f77b:	83 c4 10             	add    esp,0x10
c001f77e:	83 ec 08             	sub    esp,0x8
c001f781:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001f788:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f78c:	50                   	push   eax
c001f78d:	e8 98 0f fe ff       	call   c000072a <strcpy>
c001f792:	83 c4 10             	add    esp,0x10
c001f795:	83 ec 08             	sub    esp,0x8
c001f798:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f79c:	50                   	push   eax
c001f79d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f7a4:	e8 bf fa ff ff       	call   c001f268 <FAT::fixFilepath(char*)>
c001f7a9:	83 c4 10             	add    esp,0x10
c001f7ac:	83 ec 08             	sub    esp,0x8
c001f7af:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f7b3:	50                   	push   eax
c001f7b4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f7bb:	50                   	push   eax
c001f7bc:	e8 78 6e fe ff       	call   c0006639 <f_rename>
c001f7c1:	83 c4 10             	add    esp,0x10
c001f7c4:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001f7cb:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001f7d2:	85 c0                	test   eax,eax
c001f7d4:	75 07                	jne    c001f7dd <FAT::rename(char const*, char const*)+0xb7>
c001f7d6:	b8 00 00 00 00       	mov    eax,0x0
c001f7db:	eb 05                	jmp    c001f7e2 <FAT::rename(char const*, char const*)+0xbc>
c001f7dd:	b8 01 00 00 00       	mov    eax,0x1
c001f7e2:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f7e8:	c3                   	ret    
c001f7e9:	90                   	nop

c001f7ea <FAT::mkdir(char const*)>:
c001f7ea:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f7f0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f7f8:	75 07                	jne    c001f801 <FAT::mkdir(char const*)+0x17>
c001f7fa:	b8 04 00 00 00       	mov    eax,0x4
c001f7ff:	eb 5c                	jmp    c001f85d <FAT::mkdir(char const*)+0x73>
c001f801:	83 ec 08             	sub    esp,0x8
c001f804:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f80b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f80f:	50                   	push   eax
c001f810:	e8 15 0f fe ff       	call   c000072a <strcpy>
c001f815:	83 c4 10             	add    esp,0x10
c001f818:	83 ec 08             	sub    esp,0x8
c001f81b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f81f:	50                   	push   eax
c001f820:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f827:	e8 3c fa ff ff       	call   c001f268 <FAT::fixFilepath(char*)>
c001f82c:	83 c4 10             	add    esp,0x10
c001f82f:	83 ec 0c             	sub    esp,0xc
c001f832:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f836:	50                   	push   eax
c001f837:	e8 d1 6b fe ff       	call   c000640d <f_mkdir>
c001f83c:	83 c4 10             	add    esp,0x10
c001f83f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f846:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001f84d:	85 c0                	test   eax,eax
c001f84f:	75 07                	jne    c001f858 <FAT::mkdir(char const*)+0x6e>
c001f851:	b8 00 00 00 00       	mov    eax,0x0
c001f856:	eb 05                	jmp    c001f85d <FAT::mkdir(char const*)+0x73>
c001f858:	b8 01 00 00 00       	mov    eax,0x1
c001f85d:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f863:	c3                   	ret    

c001f864 <FAT::exists(char const*)>:
c001f864:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001f86a:	83 ec 08             	sub    esp,0x8
c001f86d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f874:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f878:	50                   	push   eax
c001f879:	e8 ac 0e fe ff       	call   c000072a <strcpy>
c001f87e:	83 c4 10             	add    esp,0x10
c001f881:	83 ec 08             	sub    esp,0x8
c001f884:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f888:	50                   	push   eax
c001f889:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f890:	e8 d3 f9 ff ff       	call   c001f268 <FAT::fixFilepath(char*)>
c001f895:	83 c4 10             	add    esp,0x10
c001f898:	83 ec 08             	sub    esp,0x8
c001f89b:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001f8a2:	50                   	push   eax
c001f8a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f8a7:	50                   	push   eax
c001f8a8:	e8 8b 66 fe ff       	call   c0005f38 <f_stat>
c001f8ad:	83 c4 10             	add    esp,0x10
c001f8b0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001f8b7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001f8be:	85 c0                	test   eax,eax
c001f8c0:	75 04                	jne    c001f8c6 <FAT::exists(char const*)+0x62>
c001f8c2:	b0 01                	mov    al,0x1
c001f8c4:	eb 02                	jmp    c001f8c8 <FAT::exists(char const*)+0x64>
c001f8c6:	b0 00                	mov    al,0x0
c001f8c8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001f8ce:	c3                   	ret    
c001f8cf:	90                   	nop

c001f8d0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001f8d0:	b8 08 00 00 00       	mov    eax,0x8
c001f8d5:	c3                   	ret    

c001f8d6 <ISO9660::seek(void*, unsigned long long)>:
c001f8d6:	53                   	push   ebx
c001f8d7:	b8 04 00 00 00       	mov    eax,0x4
c001f8dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f8e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f8e8:	85 d2                	test   edx,edx
c001f8ea:	74 17                	je     c001f903 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001f8ec:	89 c8                	mov    eax,ecx
c001f8ee:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001f8f1:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001f8f4:	b8 01 00 00 00       	mov    eax,0x1
c001f8f9:	73 08                	jae    c001f903 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001f8fb:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001f8fe:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001f901:	31 c0                	xor    eax,eax
c001f903:	5b                   	pop    ebx
c001f904:	c3                   	ret    
c001f905:	90                   	nop

c001f906 <ISO9660::tell(void*, unsigned long long*)>:
c001f906:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f90a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f90e:	85 d2                	test   edx,edx
c001f910:	74 12                	je     c001f924 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001f912:	85 c0                	test   eax,eax
c001f914:	74 0e                	je     c001f924 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001f916:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001f919:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001f91c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001f91f:	89 10                	mov    DWORD PTR [eax],edx
c001f921:	31 c0                	xor    eax,eax
c001f923:	c3                   	ret    
c001f924:	b8 04 00 00 00       	mov    eax,0x4
c001f929:	c3                   	ret    

c001f92a <ISO9660::getName()>:
c001f92a:	b8 74 a0 02 c0       	mov    eax,0xc002a074
c001f92f:	c3                   	ret    

c001f930 <ISO9660::stat(void*, unsigned long long*)>:
c001f930:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f934:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f938:	85 d2                	test   edx,edx
c001f93a:	74 12                	je     c001f94e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001f93c:	85 c0                	test   eax,eax
c001f93e:	74 0e                	je     c001f94e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001f940:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001f943:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001f946:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001f949:	89 10                	mov    DWORD PTR [eax],edx
c001f94b:	31 c0                	xor    eax,eax
c001f94d:	c3                   	ret    
c001f94e:	b8 04 00 00 00       	mov    eax,0x4
c001f953:	c3                   	ret    

c001f954 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001f954:	b8 01 00 00 00       	mov    eax,0x1
c001f959:	c3                   	ret    

c001f95a <ISO9660::unlink(char const*)>:
c001f95a:	b8 01 00 00 00       	mov    eax,0x1
c001f95f:	c3                   	ret    

c001f960 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001f960:	b8 01 00 00 00       	mov    eax,0x1
c001f965:	c3                   	ret    

c001f966 <ISO9660::rename(char const*, char const*)>:
c001f966:	b8 01 00 00 00       	mov    eax,0x1
c001f96b:	c3                   	ret    

c001f96c <ISO9660::mkdir(char const*)>:
c001f96c:	b8 01 00 00 00       	mov    eax,0x1
c001f971:	c3                   	ret    

c001f972 <ISO9660::close(void*)>:
c001f972:	83 ec 0c             	sub    esp,0xc
c001f975:	b8 04 00 00 00       	mov    eax,0x4
c001f97a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f97e:	85 d2                	test   edx,edx
c001f980:	74 0e                	je     c001f990 <ISO9660::close(void*)+0x1e>
c001f982:	83 ec 0c             	sub    esp,0xc
c001f985:	52                   	push   edx
c001f986:	e8 55 fb fe ff       	call   c000f4e0 <free>
c001f98b:	83 c4 10             	add    esp,0x10
c001f98e:	31 c0                	xor    eax,eax
c001f990:	83 c4 0c             	add    esp,0xc
c001f993:	c3                   	ret    

c001f994 <ISO9660::closeDir(void*)>:
c001f994:	83 ec 0c             	sub    esp,0xc
c001f997:	b8 04 00 00 00       	mov    eax,0x4
c001f99c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9a0:	85 d2                	test   edx,edx
c001f9a2:	74 0e                	je     c001f9b2 <ISO9660::closeDir(void*)+0x1e>
c001f9a4:	83 ec 0c             	sub    esp,0xc
c001f9a7:	52                   	push   edx
c001f9a8:	e8 33 fb fe ff       	call   c000f4e0 <free>
c001f9ad:	83 c4 10             	add    esp,0x10
c001f9b0:	31 c0                	xor    eax,eax
c001f9b2:	83 c4 0c             	add    esp,0xc
c001f9b5:	c3                   	ret    

c001f9b6 <ISO9660::~ISO9660()>:
c001f9b6:	83 ec 0c             	sub    esp,0xc
c001f9b9:	ba c8 a0 02 c0       	mov    edx,0xc002a0c8
c001f9be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c2:	89 10                	mov    DWORD PTR [eax],edx
c001f9c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c8:	83 ec 0c             	sub    esp,0xc
c001f9cb:	50                   	push   eax
c001f9cc:	e8 f5 2f ff ff       	call   c00129c6 <Filesystem::~Filesystem()>
c001f9d1:	83 c4 10             	add    esp,0x10
c001f9d4:	90                   	nop
c001f9d5:	83 c4 0c             	add    esp,0xc
c001f9d8:	c3                   	ret    
c001f9d9:	90                   	nop

c001f9da <ISO9660::~ISO9660()>:
c001f9da:	83 ec 0c             	sub    esp,0xc
c001f9dd:	83 ec 0c             	sub    esp,0xc
c001f9e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9e4:	e8 cd ff ff ff       	call   c001f9b6 <ISO9660::~ISO9660()>
c001f9e9:	83 c4 10             	add    esp,0x10
c001f9ec:	83 ec 08             	sub    esp,0x8
c001f9ef:	6a 08                	push   0x8
c001f9f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9f5:	e8 c3 2b ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c001f9fa:	83 c4 10             	add    esp,0x10
c001f9fd:	83 c4 0c             	add    esp,0xc
c001fa00:	c3                   	ret    

c001fa01 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001fa01:	55                   	push   ebp
c001fa02:	31 c9                	xor    ecx,ecx
c001fa04:	57                   	push   edi
c001fa05:	56                   	push   esi
c001fa06:	53                   	push   ebx
c001fa07:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001fa0b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001fa0f:	89 eb                	mov    ebx,ebp
c001fa11:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001fa15:	39 ce                	cmp    esi,ecx
c001fa17:	7e 17                	jle    c001fa30 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001fa19:	31 d2                	xor    edx,edx
c001fa1b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001fa1f:	7d 13                	jge    c001fa34 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001fa21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fa25:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001fa28:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001fa2b:	75 0d                	jne    c001fa3a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001fa2d:	42                   	inc    edx
c001fa2e:	eb eb                	jmp    c001fa1b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001fa30:	31 c0                	xor    eax,eax
c001fa32:	eb 0a                	jmp    c001fa3e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001fa34:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001fa38:	eb 04                	jmp    c001fa3e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001fa3a:	41                   	inc    ecx
c001fa3b:	43                   	inc    ebx
c001fa3c:	eb d7                	jmp    c001fa15 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001fa3e:	5b                   	pop    ebx
c001fa3f:	5e                   	pop    esi
c001fa40:	5f                   	pop    edi
c001fa41:	5d                   	pop    ebp
c001fa42:	c3                   	ret    

c001fa43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001fa43:	56                   	push   esi
c001fa44:	53                   	push   ebx
c001fa45:	52                   	push   edx
c001fa46:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fa4a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fa4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fa52:	39 0d a0 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1a0,ecx
c001fa58:	75 08                	jne    c001fa62 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001fa5a:	38 05 68 b0 02 c0    	cmp    BYTE PTR ds:0xc002b068,al
c001fa60:	74 2b                	je     c001fa8d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001fa62:	83 ec 0c             	sub    esp,0xc
c001fa65:	a2 68 b0 02 c0       	mov    ds:0xc002b068,al
c001fa6a:	68 c0 d1 02 c0       	push   0xc002d1c0
c001fa6f:	0f be c0             	movsx  eax,al
c001fa72:	6a 01                	push   0x1
c001fa74:	89 0d a0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1a0,ecx
c001fa7a:	31 db                	xor    ebx,ebx
c001fa7c:	53                   	push   ebx
c001fa7d:	51                   	push   ecx
c001fa7e:	ff 34 85 bc bf 02 c0 	push   DWORD PTR [eax*4-0x3ffd4044]
c001fa85:	e8 a0 62 ff ff       	call   c0015d2a <LogicalDisk::read(unsigned long long, int, void*)>
c001fa8a:	83 c4 20             	add    esp,0x20
c001fa8d:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001fa95:	c7 44 24 14 c0 d1 02 c0 	mov    DWORD PTR [esp+0x14],0xc002d1c0
c001fa9d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001faa1:	58                   	pop    eax
c001faa2:	5b                   	pop    ebx
c001faa3:	5e                   	pop    esi
c001faa4:	e9 ac 0b fe ff       	jmp    c0000655 <memcpy>
c001faa9:	90                   	nop

c001faaa <ISO9660::tryMount(LogicalDisk*, int)>:
c001faaa:	81 ec 10 08 00 00    	sub    esp,0x810
c001fab0:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001fab7:	83 c0 41             	add    eax,0x41
c001faba:	0f be c0             	movsx  eax,al
c001fabd:	50                   	push   eax
c001fabe:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fac2:	50                   	push   eax
c001fac3:	6a 10                	push   0x10
c001fac5:	e8 79 ff ff ff       	call   c001fa43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001faca:	83 c4 10             	add    esp,0x10
c001facd:	31 c0                	xor    eax,eax
c001facf:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001fad4:	75 1d                	jne    c001faf3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001fad6:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001fadb:	75 16                	jne    c001faf3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001fadd:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001fae2:	75 0f                	jne    c001faf3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001fae4:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001fae9:	75 08                	jne    c001faf3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001faeb:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001faf0:	0f 94 c0             	sete   al
c001faf3:	81 c4 0c 08 00 00    	add    esp,0x80c
c001faf9:	c3                   	ret    

c001fafa <ISO9660::read(void*, unsigned long, void*, int*)>:
c001fafa:	55                   	push   ebp
c001fafb:	57                   	push   edi
c001fafc:	56                   	push   esi
c001fafd:	53                   	push   ebx
c001fafe:	81 ec 34 08 00 00    	sub    esp,0x834
c001fb04:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001fb0b:	55                   	push   ebp
c001fb0c:	68 8f a0 02 c0       	push   0xc002a08f
c001fb11:	e8 87 2b ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c001fb16:	83 c4 10             	add    esp,0x10
c001fb19:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001fb21:	0f 84 06 02 00 00    	je     c001fd2d <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001fb27:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001fb2f:	0f 84 f8 01 00 00    	je     c001fd2d <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001fb35:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001fb3c:	b8 01 00 00 00       	mov    eax,0x1
c001fb41:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001fb45:	0f 85 e7 01 00 00    	jne    c001fd32 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001fb4b:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001fb4e:	31 d2                	xor    edx,edx
c001fb50:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001fb53:	89 e9                	mov    ecx,ebp
c001fb55:	89 d3                	mov    ebx,edx
c001fb57:	01 f1                	add    ecx,esi
c001fb59:	11 fb                	adc    ebx,edi
c001fb5b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001fb5f:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001fb63:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001fb6a:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001fb6d:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001fb70:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fb74:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001fb78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fb7c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fb80:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001fb84:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001fb88:	72 19                	jb     c001fba3 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001fb8a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001fb8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb96:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001fb99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fb9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fba1:	eb 13                	jmp    c001fbb6 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001fba3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fbab:	29 f0                	sub    eax,esi
c001fbad:	19 fa                	sbb    edx,edi
c001fbaf:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001fbb6:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001fbbd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001fbc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbc2:	53                   	push   ebx
c001fbc3:	0f a4 c2 0b          	shld   edx,eax,0xb
c001fbc7:	c1 e0 0b             	shl    eax,0xb
c001fbca:	01 c6                	add    esi,eax
c001fbcc:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001fbd3:	11 d7                	adc    edi,edx
c001fbd5:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001fbd9:	89 fa                	mov    edx,edi
c001fbdb:	50                   	push   eax
c001fbdc:	8d 44 24 28          	lea    eax,[esp+0x28]
c001fbe0:	50                   	push   eax
c001fbe1:	89 f0                	mov    eax,esi
c001fbe3:	0f ac d0 0b          	shrd   eax,edx,0xb
c001fbe7:	50                   	push   eax
c001fbe8:	e8 56 fe ff ff       	call   c001fa43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fbed:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001fbf4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fbf8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fbfb:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001fbff:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001fc05:	83 c4 10             	add    esp,0x10
c001fc08:	b8 00 08 00 00       	mov    eax,0x800
c001fc0d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001fc11:	29 d0                	sub    eax,edx
c001fc13:	39 c1                	cmp    ecx,eax
c001fc15:	83 db 00             	sbb    ebx,0x0
c001fc18:	7d 19                	jge    c001fc33 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001fc1a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001fc1f:	75 16                	jne    c001fc37 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001fc21:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001fc28:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc2e:	e9 f6 00 00 00       	jmp    c001fd29 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001fc33:	89 c5                	mov    ebp,eax
c001fc35:	eb 03                	jmp    c001fc3a <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001fc37:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001fc3a:	51                   	push   ecx
c001fc3b:	55                   	push   ebp
c001fc3c:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001fc40:	50                   	push   eax
c001fc41:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001fc48:	e8 08 0a fe ff       	call   c0000655 <memcpy>
c001fc4d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fc51:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fc55:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001fc5c:	01 e8                	add    eax,ebp
c001fc5e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fc62:	89 e8                	mov    eax,ebp
c001fc64:	99                   	cdq    
c001fc65:	01 ee                	add    esi,ebp
c001fc67:	11 d7                	adc    edi,edx
c001fc69:	29 e9                	sub    ecx,ebp
c001fc6b:	19 d3                	sbb    ebx,edx
c001fc6d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001fc71:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001fc75:	83 c4 10             	add    esp,0x10
c001fc78:	b8 ff 07 00 00       	mov    eax,0x7ff
c001fc7d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001fc80:	b8 00 00 00 00       	mov    eax,0x0
c001fc85:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001fc89:	7d 3f                	jge    c001fcca <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001fc8b:	52                   	push   edx
c001fc8c:	89 fa                	mov    edx,edi
c001fc8e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001fc95:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001fc99:	50                   	push   eax
c001fc9a:	89 f0                	mov    eax,esi
c001fc9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fca0:	0f ac d0 0b          	shrd   eax,edx,0xb
c001fca4:	50                   	push   eax
c001fca5:	e8 99 fd ff ff       	call   c001fa43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fcaa:	81 c6 00 08 00 00    	add    esi,0x800
c001fcb0:	83 d7 00             	adc    edi,0x0
c001fcb3:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001fcbb:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001fcc3:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001fcc8:	eb ab                	jmp    c001fc75 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001fcca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcce:	0b 04 24             	or     eax,DWORD PTR [esp]
c001fcd1:	74 34                	je     c001fd07 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001fcd3:	89 fa                	mov    edx,edi
c001fcd5:	50                   	push   eax
c001fcd6:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001fcdd:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001fce1:	50                   	push   eax
c001fce2:	89 f0                	mov    eax,esi
c001fce4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001fce8:	0f ac d0 0b          	shrd   eax,edx,0xb
c001fcec:	55                   	push   ebp
c001fced:	50                   	push   eax
c001fcee:	e8 50 fd ff ff       	call   c001fa43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fcf3:	83 c4 0c             	add    esp,0xc
c001fcf6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001fcfa:	55                   	push   ebp
c001fcfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcff:	e8 51 09 fe ff       	call   c0000655 <memcpy>
c001fd04:	83 c4 10             	add    esp,0x10
c001fd07:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001fd0e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fd12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd16:	89 38                	mov    DWORD PTR [eax],edi
c001fd18:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001fd1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd23:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001fd26:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001fd29:	31 c0                	xor    eax,eax
c001fd2b:	eb 05                	jmp    c001fd32 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001fd2d:	b8 04 00 00 00       	mov    eax,0x4
c001fd32:	81 c4 2c 08 00 00    	add    esp,0x82c
c001fd38:	5b                   	pop    ebx
c001fd39:	5e                   	pop    esi
c001fd3a:	5f                   	pop    edi
c001fd3b:	5d                   	pop    ebp
c001fd3c:	c3                   	ret    
c001fd3d:	90                   	nop

c001fd3e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001fd3e:	55                   	push   ebp
c001fd3f:	57                   	push   edi
c001fd40:	56                   	push   esi
c001fd41:	53                   	push   ebx
c001fd42:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001fd48:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001fd4f:	85 f6                	test   esi,esi
c001fd51:	0f 84 64 02 00 00    	je     c001ffbb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001fd57:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001fd5f:	0f 84 56 02 00 00    	je     c001ffbb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001fd65:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001fd68:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001fd6b:	75 0a                	jne    c001fd77 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001fd6d:	b8 07 00 00 00       	mov    eax,0x7
c001fd72:	e9 49 02 00 00       	jmp    c001ffc0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001fd77:	50                   	push   eax
c001fd78:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001fd7c:	50                   	push   eax
c001fd7d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001fd84:	53                   	push   ebx
c001fd85:	8b 06                	mov    eax,DWORD PTR [esi]
c001fd87:	c1 e0 0b             	shl    eax,0xb
c001fd8a:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001fd8d:	c1 e8 0b             	shr    eax,0xb
c001fd90:	50                   	push   eax
c001fd91:	e8 ad fc ff ff       	call   c001fa43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fd96:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001fd99:	83 c4 10             	add    esp,0x10
c001fd9c:	89 c1                	mov    ecx,eax
c001fd9e:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001fda1:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001fda7:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001fdaa:	84 db                	test   bl,bl
c001fdac:	0f 85 90 00 00 00    	jne    c001fe42 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001fdb2:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001fdb8:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fdbe:	29 c7                	sub    edi,eax
c001fdc0:	89 fb                	mov    ebx,edi
c001fdc2:	c1 fb 1f             	sar    ebx,0x1f
c001fdc5:	01 f8                	add    eax,edi
c001fdc7:	11 da                	adc    edx,ebx
c001fdc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fdcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fdd1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001fdd4:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001fdd7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001fdda:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001fddd:	89 04 24             	mov    DWORD PTR [esp],eax
c001fde0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001fde4:	89 d8                	mov    eax,ebx
c001fde6:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001fde9:	ba 00 00 00 00       	mov    edx,0x0
c001fdee:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001fdf2:	b8 00 00 00 00       	mov    eax,0x0
c001fdf7:	73 0b                	jae    c001fe04 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001fdf9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001fdfc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fe00:	29 f8                	sub    eax,edi
c001fe02:	19 da                	sbb    edx,ebx
c001fe04:	89 d3                	mov    ebx,edx
c001fe06:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001fe09:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001fe0c:	09 c3                	or     ebx,eax
c001fe0e:	0f 84 59 ff ff ff    	je     c001fd6d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001fe14:	55                   	push   ebp
c001fe15:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001fe19:	50                   	push   eax
c001fe1a:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001fe21:	53                   	push   ebx
c001fe22:	8b 06                	mov    eax,DWORD PTR [esi]
c001fe24:	c1 e0 0b             	shl    eax,0xb
c001fe27:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001fe2b:	c1 e8 0b             	shr    eax,0xb
c001fe2e:	50                   	push   eax
c001fe2f:	e8 0f fc ff ff       	call   c001fa43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fe34:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001fe37:	83 c4 10             	add    esp,0x10
c001fe3a:	25 ff 07 00 00       	and    eax,0x7ff
c001fe3f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001fe42:	57                   	push   edi
c001fe43:	6a 28                	push   0x28
c001fe45:	6a 00                	push   0x0
c001fe47:	8d 44 24 24          	lea    eax,[esp+0x24]
c001fe4b:	50                   	push   eax
c001fe4c:	e8 3a 08 fe ff       	call   c000068b <memset>
c001fe51:	31 d2                	xor    edx,edx
c001fe53:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001fe56:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fe5c:	89 f8                	mov    eax,edi
c001fe5e:	83 c0 21             	add    eax,0x21
c001fe61:	83 d2 00             	adc    edx,0x0
c001fe64:	89 c7                	mov    edi,eax
c001fe66:	89 d5                	mov    ebp,edx
c001fe68:	83 c4 10             	add    esp,0x10
c001fe6b:	31 c9                	xor    ecx,ecx
c001fe6d:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001fe74:	83 f9 28             	cmp    ecx,0x28
c001fe77:	88 04 24             	mov    BYTE PTR [esp],al
c001fe7a:	0f 94 c2             	sete   dl
c001fe7d:	88 d0                	mov    al,dl
c001fe7f:	ba ff 07 00 00       	mov    edx,0x7ff
c001fe84:	39 fa                	cmp    edx,edi
c001fe86:	ba 00 00 00 00       	mov    edx,0x0
c001fe8b:	19 ea                	sbb    edx,ebp
c001fe8d:	0f 92 c2             	setb   dl
c001fe90:	09 c2                	or     edx,eax
c001fe92:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001fe96:	0f 94 c0             	sete   al
c001fe99:	08 d0                	or     al,dl
c001fe9b:	75 16                	jne    c001feb3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001fe9d:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001fea1:	74 10                	je     c001feb3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001fea3:	8a 04 24             	mov    al,BYTE PTR [esp]
c001fea6:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001feaa:	41                   	inc    ecx
c001feab:	83 c7 01             	add    edi,0x1
c001feae:	83 d5 00             	adc    ebp,0x0
c001feb1:	eb ba                	jmp    c001fe6d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001feb3:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001feba:	83 ec 0c             	sub    esp,0xc
c001febd:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001fec1:	57                   	push   edi
c001fec2:	e8 e1 07 fe ff       	call   c00006a8 <strlen>
c001fec7:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001fecf:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001fed3:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001feda:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001fedd:	5a                   	pop    edx
c001fede:	25 ff 07 00 00       	and    eax,0x7ff
c001fee3:	01 c8                	add    eax,ecx
c001fee5:	59                   	pop    ecx
c001fee6:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001feec:	83 e0 02             	and    eax,0x2
c001feef:	3c 01                	cmp    al,0x1
c001fef1:	19 c0                	sbb    eax,eax
c001fef3:	83 c0 02             	add    eax,0x2
c001fef6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001fefa:	57                   	push   edi
c001fefb:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001feff:	50                   	push   eax
c001ff00:	e8 25 08 fe ff       	call   c000072a <strcpy>
c001ff05:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001ff09:	83 c4 10             	add    esp,0x10
c001ff0c:	84 c0                	test   al,al
c001ff0e:	75 21                	jne    c001ff31 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001ff10:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001ff18:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ff20:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001ff28:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001ff2f:	eb 28                	jmp    c001ff59 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001ff31:	fe c8                	dec    al
c001ff33:	75 24                	jne    c001ff59 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001ff35:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001ff3d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ff45:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001ff4d:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001ff54:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001ff59:	0f b6 fb             	movzx  edi,bl
c001ff5c:	31 db                	xor    ebx,ebx
c001ff5e:	50                   	push   eax
c001ff5f:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001ff66:	8d 44 24 48          	lea    eax,[esp+0x48]
c001ff6a:	50                   	push   eax
c001ff6b:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001ff72:	e8 de 06 fe ff       	call   c0000655 <memcpy>
c001ff77:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001ff7e:	89 f9                	mov    ecx,edi
c001ff80:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ff86:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001ff89:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001ff8c:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001ff8f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ff92:	83 c4 10             	add    esp,0x10
c001ff95:	39 c7                	cmp    edi,eax
c001ff97:	89 df                	mov    edi,ebx
c001ff99:	19 d7                	sbb    edi,edx
c001ff9b:	72 10                	jb     c001ffad <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001ff9d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001ffa4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001ffab:	eb 0a                	jmp    c001ffb7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001ffad:	29 c8                	sub    eax,ecx
c001ffaf:	19 da                	sbb    edx,ebx
c001ffb1:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001ffb4:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001ffb7:	31 c0                	xor    eax,eax
c001ffb9:	eb 05                	jmp    c001ffc0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001ffbb:	b8 04 00 00 00       	mov    eax,0x4
c001ffc0:	81 c4 5c 09 00 00    	add    esp,0x95c
c001ffc6:	5b                   	pop    ebx
c001ffc7:	5e                   	pop    esi
c001ffc8:	5f                   	pop    edi
c001ffc9:	5d                   	pop    ebp
c001ffca:	c3                   	ret    

c001ffcb <readRoot(unsigned int*, unsigned int*, char)>:
c001ffcb:	81 ec 40 08 00 00    	sub    esp,0x840
c001ffd1:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001ffd9:	50                   	push   eax
c001ffda:	8d 44 24 38          	lea    eax,[esp+0x38]
c001ffde:	50                   	push   eax
c001ffdf:	6a 10                	push   0x10
c001ffe1:	e8 5d fa ff ff       	call   c001fa43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ffe6:	83 c4 0c             	add    esp,0xc
c001ffe9:	6a 22                	push   0x22
c001ffeb:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001fff2:	50                   	push   eax
c001fff3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001fff7:	50                   	push   eax
c001fff8:	e8 58 06 fe ff       	call   c0000655 <memcpy>
c001fffd:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020004:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020008:	89 10                	mov    DWORD PTR [eax],edx
c002000a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020011:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020015:	89 10                	mov    DWORD PTR [eax],edx
c0020017:	b0 01                	mov    al,0x1
c0020019:	81 c4 4c 08 00 00    	add    esp,0x84c
c002001f:	c3                   	ret    

c0020020 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0020020:	55                   	push   ebp
c0020021:	57                   	push   edi
c0020022:	56                   	push   esi
c0020023:	53                   	push   ebx
c0020024:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002002a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0020031:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0020038:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002003c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0020040:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0020044:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020048:	75 03                	jne    c002004d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002004a:	83 c3 02             	add    ebx,0x2
c002004d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0020050:	75 03                	jne    c0020055 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0020052:	43                   	inc    ebx
c0020053:	eb f8                	jmp    c002004d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020055:	51                   	push   ecx
c0020056:	68 00 01 00 00       	push   0x100
c002005b:	6a 00                	push   0x0
c002005d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020061:	50                   	push   eax
c0020062:	e8 24 06 fe ff       	call   c000068b <memset>
c0020067:	83 c4 10             	add    esp,0x10
c002006a:	31 d2                	xor    edx,edx
c002006c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002006f:	84 c0                	test   al,al
c0020071:	74 21                	je     c0020094 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0020073:	3c 2f                	cmp    al,0x2f
c0020075:	75 0b                	jne    c0020082 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0020077:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c002007b:	bd 01 00 00 00       	mov    ebp,0x1
c0020080:	eb 14                	jmp    c0020096 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0020082:	8d 48 9f             	lea    ecx,[eax-0x61]
c0020085:	80 f9 19             	cmp    cl,0x19
c0020088:	77 03                	ja     c002008d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c002008a:	83 e8 20             	sub    eax,0x20
c002008d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0020091:	42                   	inc    edx
c0020092:	eb d8                	jmp    c002006c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0020094:	31 ed                	xor    ebp,ebp
c0020096:	83 ec 0c             	sub    esp,0xc
c0020099:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00200a0:	e8 2b f4 fe ff       	call   c000f4d0 <malloc>
c00200a5:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00200ac:	89 c6                	mov    esi,eax
c00200ae:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00200b4:	c1 ef 0b             	shr    edi,0xb
c00200b7:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00200be:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00200c2:	83 c4 10             	add    esp,0x10
c00200c5:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00200ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00200ce:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00200d5:	74 28                	je     c00200ff <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00200d7:	52                   	push   edx
c00200d8:	57                   	push   edi
c00200d9:	50                   	push   eax
c00200da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00200de:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00200e5:	e8 59 f9 ff ff       	call   c001fa43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00200ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00200ee:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00200f5:	05 00 08 00 00       	add    eax,0x800
c00200fa:	83 c4 10             	add    esp,0x10
c00200fd:	eb cb                	jmp    c00200ca <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00200ff:	83 ec 0c             	sub    esp,0xc
c0020102:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0020106:	57                   	push   edi
c0020107:	e8 9c 05 fe ff       	call   c00006a8 <strlen>
c002010c:	50                   	push   eax
c002010d:	57                   	push   edi
c002010e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0020115:	56                   	push   esi
c0020116:	e8 e6 f8 ff ff       	call   c001fa01 <__memmem(unsigned char*, int, unsigned char*, int)>
c002011b:	83 c4 20             	add    esp,0x20
c002011e:	85 c0                	test   eax,eax
c0020120:	75 13                	jne    c0020135 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0020122:	83 ec 0c             	sub    esp,0xc
c0020125:	56                   	push   esi
c0020126:	e8 b5 f3 fe ff       	call   c000f4e0 <free>
c002012b:	83 c4 10             	add    esp,0x10
c002012e:	31 c0                	xor    eax,eax
c0020130:	e9 b3 00 00 00       	jmp    c00201e8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020135:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0020139:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c002013d:	c1 e7 08             	shl    edi,0x8
c0020140:	c1 e2 10             	shl    edx,0x10
c0020143:	09 d7                	or     edi,edx
c0020145:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0020149:	09 d7                	or     edi,edx
c002014b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002014f:	c1 e2 18             	shl    edx,0x18
c0020152:	09 d7                	or     edi,edx
c0020154:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0020158:	89 d1                	mov    ecx,edx
c002015a:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002015e:	c1 e1 08             	shl    ecx,0x8
c0020161:	c1 e2 10             	shl    edx,0x10
c0020164:	09 ca                	or     edx,ecx
c0020166:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c002016a:	09 ca                	or     edx,ecx
c002016c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0020170:	c1 e1 18             	shl    ecx,0x18
c0020173:	09 ca                	or     edx,ecx
c0020175:	89 e9                	mov    ecx,ebp
c0020177:	84 c9                	test   cl,cl
c0020179:	74 3c                	je     c00201b7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c002017b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002017f:	83 ec 0c             	sub    esp,0xc
c0020182:	56                   	push   esi
c0020183:	e8 58 f3 fe ff       	call   c000f4e0 <free>
c0020188:	83 c4 0c             	add    esp,0xc
c002018b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020192:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0020197:	50                   	push   eax
c0020198:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002019f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00201a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00201aa:	52                   	push   edx
c00201ab:	57                   	push   edi
c00201ac:	53                   	push   ebx
c00201ad:	e8 6e fe ff ff       	call   c0020020 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00201b2:	83 c4 20             	add    esp,0x20
c00201b5:	eb 31                	jmp    c00201e8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00201b7:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00201ba:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00201c1:	d0 e8                	shr    al,1
c00201c3:	89 3b                	mov    DWORD PTR [ebx],edi
c00201c5:	83 e0 01             	and    eax,0x1
c00201c8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00201cf:	83 ec 0c             	sub    esp,0xc
c00201d2:	89 13                	mov    DWORD PTR [ebx],edx
c00201d4:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00201db:	89 03                	mov    DWORD PTR [ebx],eax
c00201dd:	56                   	push   esi
c00201de:	e8 fd f2 fe ff       	call   c000f4e0 <free>
c00201e3:	83 c4 10             	add    esp,0x10
c00201e6:	b0 01                	mov    al,0x1
c00201e8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00201ee:	5b                   	pop    ebx
c00201ef:	5e                   	pop    esi
c00201f0:	5f                   	pop    edi
c00201f1:	5d                   	pop    ebp
c00201f2:	c3                   	ret    

c00201f3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00201f3:	55                   	push   ebp
c00201f4:	57                   	push   edi
c00201f5:	56                   	push   esi
c00201f6:	53                   	push   ebx
c00201f7:	83 ec 20             	sub    esp,0x20
c00201fa:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00201fe:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020202:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020206:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002020e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020216:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c002021b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0020221:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0020227:	57                   	push   edi
c0020228:	8d 44 24 14          	lea    eax,[esp+0x14]
c002022c:	50                   	push   eax
c002022d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020231:	50                   	push   eax
c0020232:	e8 94 fd ff ff       	call   c001ffcb <readRoot(unsigned int*, unsigned int*, char)>
c0020237:	5a                   	pop    edx
c0020238:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002023c:	e8 67 04 fe ff       	call   c00006a8 <strlen>
c0020241:	83 c4 10             	add    esp,0x10
c0020244:	83 f8 03             	cmp    eax,0x3
c0020247:	77 17                	ja     c0020260 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020249:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002024d:	89 03                	mov    DWORD PTR [ebx],eax
c002024f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020253:	89 06                	mov    DWORD PTR [esi],eax
c0020255:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002025c:	b0 01                	mov    al,0x1
c002025e:	eb 19                	jmp    c0020279 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0020260:	50                   	push   eax
c0020261:	55                   	push   ebp
c0020262:	57                   	push   edi
c0020263:	56                   	push   esi
c0020264:	53                   	push   ebx
c0020265:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020269:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002026d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020271:	e8 aa fd ff ff       	call   c0020020 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020276:	83 c4 20             	add    esp,0x20
c0020279:	83 c4 1c             	add    esp,0x1c
c002027c:	5b                   	pop    ebx
c002027d:	5e                   	pop    esi
c002027e:	5f                   	pop    edi
c002027f:	5d                   	pop    ebp
c0020280:	c3                   	ret    
c0020281:	90                   	nop

c0020282 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0020282:	57                   	push   edi
c0020283:	56                   	push   esi
c0020284:	53                   	push   ebx
c0020285:	83 ec 10             	sub    esp,0x10
c0020288:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002028c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020290:	85 ff                	test   edi,edi
c0020292:	74 7b                	je     c002030f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020294:	85 f6                	test   esi,esi
c0020296:	74 77                	je     c002030f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020298:	83 ec 0c             	sub    esp,0xc
c002029b:	6a 1c                	push   0x1c
c002029d:	e8 2e f2 fe ff       	call   c000f4d0 <malloc>
c00202a2:	89 07                	mov    DWORD PTR [edi],eax
c00202a4:	89 c3                	mov    ebx,eax
c00202a6:	58                   	pop    eax
c00202a7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00202ab:	50                   	push   eax
c00202ac:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00202af:	50                   	push   eax
c00202b0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00202b4:	50                   	push   eax
c00202b5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00202b9:	50                   	push   eax
c00202ba:	56                   	push   esi
c00202bb:	e8 33 ff ff ff       	call   c00201f3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00202c0:	83 c4 20             	add    esp,0x20
c00202c3:	84 c0                	test   al,al
c00202c5:	74 07                	je     c00202ce <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c00202c7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00202cc:	74 0b                	je     c00202d9 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c00202ce:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00202d2:	b8 01 00 00 00       	mov    eax,0x1
c00202d7:	eb 3b                	jmp    c0020314 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c00202d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00202dd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00202e1:	89 03                	mov    DWORD PTR [ebx],eax
c00202e3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00202ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00202ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00202f5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00202fc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00202ff:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0020306:	8a 06                	mov    al,BYTE PTR [esi]
c0020308:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002030b:	31 c0                	xor    eax,eax
c002030d:	eb 05                	jmp    c0020314 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c002030f:	b8 04 00 00 00       	mov    eax,0x4
c0020314:	83 c4 10             	add    esp,0x10
c0020317:	5b                   	pop    ebx
c0020318:	5e                   	pop    esi
c0020319:	5f                   	pop    edi
c002031a:	c3                   	ret    
c002031b:	90                   	nop

c002031c <ISO9660::exists(char const*)>:
c002031c:	83 ec 28             	sub    esp,0x28
c002031f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020323:	8d 54 24 18          	lea    edx,[esp+0x18]
c0020327:	52                   	push   edx
c0020328:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002032b:	52                   	push   edx
c002032c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020330:	52                   	push   edx
c0020331:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020335:	52                   	push   edx
c0020336:	50                   	push   eax
c0020337:	e8 b7 fe ff ff       	call   c00201f3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002033c:	83 c4 3c             	add    esp,0x3c
c002033f:	c3                   	ret    

c0020340 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0020340:	56                   	push   esi
c0020341:	53                   	push   ebx
c0020342:	83 ec 14             	sub    esp,0x14
c0020345:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0020349:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002034d:	85 db                	test   ebx,ebx
c002034f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020353:	0f 94 c2             	sete   dl
c0020356:	85 f6                	test   esi,esi
c0020358:	0f 94 c0             	sete   al
c002035b:	08 c2                	or     dl,al
c002035d:	75 68                	jne    c00203c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002035f:	85 c9                	test   ecx,ecx
c0020361:	74 64                	je     c00203c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0020363:	83 ec 0c             	sub    esp,0xc
c0020366:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0020369:	8d 44 24 18          	lea    eax,[esp+0x18]
c002036d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020373:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002037a:	50                   	push   eax
c002037b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002037e:	50                   	push   eax
c002037f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020383:	50                   	push   eax
c0020384:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020388:	50                   	push   eax
c0020389:	51                   	push   ecx
c002038a:	e8 64 fe ff ff       	call   c00201f3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002038f:	83 c4 20             	add    esp,0x20
c0020392:	ba 01 00 00 00       	mov    edx,0x1
c0020397:	84 c0                	test   al,al
c0020399:	74 31                	je     c00203cc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002039b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002039f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00203a6:	89 03                	mov    DWORD PTR [ebx],eax
c00203a8:	ba 00 00 00 00       	mov    edx,0x0
c00203ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00203b1:	85 c0                	test   eax,eax
c00203b3:	0f 95 06             	setne  BYTE PTR [esi]
c00203b6:	74 14                	je     c00203cc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00203b8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00203be:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00203c5:	eb 05                	jmp    c00203cc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00203c7:	ba 04 00 00 00       	mov    edx,0x4
c00203cc:	83 c4 14             	add    esp,0x14
c00203cf:	89 d0                	mov    eax,edx
c00203d1:	5b                   	pop    ebx
c00203d2:	5e                   	pop    esi
c00203d3:	c3                   	ret    

c00203d4 <ISO9660::openDir(char const*, void**)>:
c00203d4:	57                   	push   edi
c00203d5:	56                   	push   esi
c00203d6:	53                   	push   ebx
c00203d7:	83 ec 10             	sub    esp,0x10
c00203da:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00203de:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00203e2:	85 ff                	test   edi,edi
c00203e4:	0f 84 95 00 00 00    	je     c002047f <ISO9660::openDir(char const*, void**)+0xab>
c00203ea:	85 f6                	test   esi,esi
c00203ec:	0f 84 8d 00 00 00    	je     c002047f <ISO9660::openDir(char const*, void**)+0xab>
c00203f2:	83 ec 0c             	sub    esp,0xc
c00203f5:	6a 1c                	push   0x1c
c00203f7:	e8 d4 f0 fe ff       	call   c000f4d0 <malloc>
c00203fc:	89 07                	mov    DWORD PTR [edi],eax
c00203fe:	89 c3                	mov    ebx,eax
c0020400:	59                   	pop    ecx
c0020401:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020405:	50                   	push   eax
c0020406:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0020409:	50                   	push   eax
c002040a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002040e:	50                   	push   eax
c002040f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020413:	50                   	push   eax
c0020414:	56                   	push   esi
c0020415:	e8 d9 fd ff ff       	call   c00201f3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002041a:	83 c4 20             	add    esp,0x20
c002041d:	84 c0                	test   al,al
c002041f:	74 07                	je     c0020428 <ISO9660::openDir(char const*, void**)+0x54>
c0020421:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020426:	75 21                	jne    c0020449 <ISO9660::openDir(char const*, void**)+0x75>
c0020428:	0f b6 c0             	movzx  eax,al
c002042b:	52                   	push   edx
c002042c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020430:	50                   	push   eax
c0020431:	68 a2 a0 02 c0       	push   0xc002a0a2
c0020436:	e8 62 22 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c002043b:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002043f:	83 c4 10             	add    esp,0x10
c0020442:	b8 01 00 00 00       	mov    eax,0x1
c0020447:	eb 3b                	jmp    c0020484 <ISO9660::openDir(char const*, void**)+0xb0>
c0020449:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002044d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0020451:	89 03                	mov    DWORD PTR [ebx],eax
c0020453:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002045a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002045e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0020465:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002046c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002046f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0020476:	8a 06                	mov    al,BYTE PTR [esi]
c0020478:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002047b:	31 c0                	xor    eax,eax
c002047d:	eb 05                	jmp    c0020484 <ISO9660::openDir(char const*, void**)+0xb0>
c002047f:	b8 04 00 00 00       	mov    eax,0x4
c0020484:	83 c4 10             	add    esp,0x10
c0020487:	5b                   	pop    ebx
c0020488:	5e                   	pop    esi
c0020489:	5f                   	pop    edi
c002048a:	c3                   	ret    
c002048b:	90                   	nop

c002048c <ISO9660::ISO9660()>:
c002048c:	83 ec 0c             	sub    esp,0xc
c002048f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020493:	83 ec 0c             	sub    esp,0xc
c0020496:	50                   	push   eax
c0020497:	e8 06 25 ff ff       	call   c00129a2 <Filesystem::Filesystem()>
c002049c:	83 c4 10             	add    esp,0x10
c002049f:	ba c8 a0 02 c0       	mov    edx,0xc002a0c8
c00204a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204a8:	89 10                	mov    DWORD PTR [eax],edx
c00204aa:	90                   	nop
c00204ab:	83 c4 0c             	add    esp,0xc
c00204ae:	c3                   	ret    
c00204af:	90                   	nop

c00204b0 <SoundChannel::~SoundChannel()>:
c00204b0:	83 ec 0c             	sub    esp,0xc
c00204b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204b7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00204ba:	83 ec 0c             	sub    esp,0xc
c00204bd:	50                   	push   eax
c00204be:	e8 1d f0 fe ff       	call   c000f4e0 <free>
c00204c3:	83 c4 10             	add    esp,0x10
c00204c6:	90                   	nop
c00204c7:	83 c4 0c             	add    esp,0xc
c00204ca:	c3                   	ret    
c00204cb:	90                   	nop

c00204cc <SoundChannel::setSpeed(float)>:
c00204cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00204d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00204d4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00204d7:	c3                   	ret    

c00204d8 <SoundChannel::getSpeed()>:
c00204d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00204dc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00204df:	c3                   	ret    

c00204e0 <SoundChannel::setVolume(int)>:
c00204e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00204e4:	83 f8 64             	cmp    eax,0x64
c00204e7:	7e 05                	jle    c00204ee <SoundChannel::setVolume(int)+0xe>
c00204e9:	b8 64 00 00 00       	mov    eax,0x64
c00204ee:	85 c0                	test   eax,eax
c00204f0:	79 02                	jns    c00204f4 <SoundChannel::setVolume(int)+0x14>
c00204f2:	31 c0                	xor    eax,eax
c00204f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00204f8:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00204fb:	c3                   	ret    

c00204fc <SoundChannel::getVolume()>:
c00204fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020500:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0020503:	c3                   	ret    

c0020504 <SoundChannel::pause()>:
c0020504:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020508:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c002050c:	c3                   	ret    
c002050d:	90                   	nop

c002050e <SoundChannel::SoundChannel(int, int, int, int)>:
c002050e:	83 ec 1c             	sub    esp,0x1c
c0020511:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020515:	e8 ea ff ff ff       	call   c0020504 <SoundChannel::pause()>
c002051a:	83 c4 04             	add    esp,0x4
c002051d:	6a 50                	push   0x50
c002051f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020523:	e8 b8 ff ff ff       	call   c00204e0 <SoundChannel::setVolume(int)>
c0020528:	83 c4 08             	add    esp,0x8
c002052b:	a1 40 a1 02 c0       	mov    eax,ds:0xc002a140
c0020530:	50                   	push   eax
c0020531:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020535:	e8 92 ff ff ff       	call   c00204cc <SoundChannel::setSpeed(float)>
c002053a:	83 c4 08             	add    esp,0x8
c002053d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020541:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020545:	89 10                	mov    DWORD PTR [eax],edx
c0020547:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002054b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002054f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020556:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002055a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002055d:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0020562:	75 23                	jne    c0020587 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0020564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020568:	8b 10                	mov    edx,DWORD PTR [eax]
c002056a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002056e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020571:	0f af c2             	imul   eax,edx
c0020574:	85 c0                	test   eax,eax
c0020576:	79 03                	jns    c002057b <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0020578:	83 c0 03             	add    eax,0x3
c002057b:	c1 f8 02             	sar    eax,0x2
c002057e:	05 a0 0f 00 00       	add    eax,0xfa0
c0020583:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0020587:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002058b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002058f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0020592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020596:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002059d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00205a1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00205a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00205ac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00205af:	c1 e0 02             	shl    eax,0x2
c00205b2:	83 ec 0c             	sub    esp,0xc
c00205b5:	50                   	push   eax
c00205b6:	e8 15 ef fe ff       	call   c000f4d0 <malloc>
c00205bb:	83 c4 10             	add    esp,0x10
c00205be:	89 c2                	mov    edx,eax
c00205c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00205c4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00205c7:	83 ec 04             	sub    esp,0x4
c00205ca:	8d 44 24 08          	lea    eax,[esp+0x8]
c00205ce:	50                   	push   eax
c00205cf:	6a 01                	push   0x1
c00205d1:	6a 04                	push   0x4
c00205d3:	e8 77 83 fe ff       	call   c000894f <src_new>
c00205d8:	83 c4 10             	add    esp,0x10
c00205db:	89 c2                	mov    edx,eax
c00205dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00205e1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00205e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00205e8:	85 c0                	test   eax,eax
c00205ea:	74 10                	je     c00205fc <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00205ec:	83 ec 0c             	sub    esp,0xc
c00205ef:	68 24 a1 02 c0       	push   0xc002a124
c00205f4:	e8 e8 8b ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c00205f9:	83 c4 10             	add    esp,0x10
c00205fc:	a0 c0 dd 02 c0       	mov    al,ds:0xc002ddc0
c0020601:	83 f0 01             	xor    eax,0x1
c0020604:	84 c0                	test   al,al
c0020606:	74 57                	je     c002065f <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0020608:	a1 44 a1 02 c0       	mov    eax,ds:0xc002a144
c002060d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020611:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020619:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0020621:	7f 35                	jg     c0020658 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0020623:	83 ec 0c             	sub    esp,0xc
c0020626:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002062a:	e8 28 4a 00 00       	call   c0025057 <__floatsisf>
c002062f:	83 c4 10             	add    esp,0x10
c0020632:	8b 15 44 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a144
c0020638:	83 ec 08             	sub    esp,0x8
c002063b:	52                   	push   edx
c002063c:	50                   	push   eax
c002063d:	e8 27 46 00 00       	call   c0024c69 <__mulsf3>
c0020642:	83 c4 10             	add    esp,0x10
c0020645:	89 c2                	mov    edx,eax
c0020647:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002064b:	89 14 85 c0 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2640],edx
c0020652:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020656:	eb c1                	jmp    c0020619 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0020658:	c6 05 c0 dd 02 c0 01 	mov    BYTE PTR ds:0xc002ddc0,0x1
c002065f:	90                   	nop
c0020660:	83 c4 1c             	add    esp,0x1c
c0020663:	c3                   	ret    

c0020664 <SoundChannel::play()>:
c0020664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020668:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c002066c:	c3                   	ret    
c002066d:	90                   	nop

c002066e <SoundChannel::paused()>:
c002066e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020672:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0020675:	c3                   	ret    

c0020676 <SoundChannel::getSampleRate()>:
c0020676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002067a:	8b 00                	mov    eax,DWORD PTR [eax]
c002067c:	c3                   	ret    
c002067d:	90                   	nop

c002067e <SoundChannel::getBits()>:
c002067e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020682:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020685:	c3                   	ret    

c0020686 <SoundChannel::getBufferUsed()>:
c0020686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002068a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002068d:	c3                   	ret    

c002068e <SoundChannel::getBufferSize()>:
c002068e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020692:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0020695:	c3                   	ret    

c0020696 <SoundChannel::unbuffer(float*, int, int)>:
c0020696:	56                   	push   esi
c0020697:	53                   	push   ebx
c0020698:	83 ec 40             	sub    esp,0x40
c002069b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002069f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00206a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00206a6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00206a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00206ad:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00206b1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00206b5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00206b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00206bd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00206c1:	e8 91 49 00 00       	call   c0025057 <__floatsisf>
c00206c6:	5a                   	pop    edx
c00206c7:	89 c6                	mov    esi,eax
c00206c9:	ff 33                	push   DWORD PTR [ebx]
c00206cb:	e8 87 49 00 00       	call   c0025057 <__floatsisf>
c00206d0:	59                   	pop    ecx
c00206d1:	5a                   	pop    edx
c00206d2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00206d5:	50                   	push   eax
c00206d6:	e8 8e 45 00 00       	call   c0024c69 <__mulsf3>
c00206db:	59                   	pop    ecx
c00206dc:	5a                   	pop    edx
c00206dd:	50                   	push   eax
c00206de:	56                   	push   esi
c00206df:	e8 48 47 00 00       	call   c0024e2c <__divsf3>
c00206e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00206e7:	e8 3b 5c 00 00       	call   c0026327 <__extendsfdf2>
c00206ec:	59                   	pop    ecx
c00206ed:	5e                   	pop    esi
c00206ee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00206f2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00206f6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00206fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020702:	50                   	push   eax
c0020703:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0020706:	e8 39 7e fe ff       	call   c0008544 <src_process>
c002070b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002070f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0020712:	83 c4 0c             	add    esp,0xc
c0020715:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0020718:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002071b:	29 d0                	sub    eax,edx
c002071d:	c1 e0 02             	shl    eax,0x2
c0020720:	50                   	push   eax
c0020721:	8d 04 91             	lea    eax,[ecx+edx*4]
c0020724:	50                   	push   eax
c0020725:	51                   	push   ecx
c0020726:	e8 f2 fe fd ff       	call   c000061d <memmove>
c002072b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002072f:	83 c4 44             	add    esp,0x44
c0020732:	5b                   	pop    ebx
c0020733:	5e                   	pop    esi
c0020734:	c3                   	ret    
c0020735:	90                   	nop

c0020736 <SoundChannel::buffer8(unsigned char*, int)>:
c0020736:	55                   	push   ebp
c0020737:	57                   	push   edi
c0020738:	56                   	push   esi
c0020739:	53                   	push   ebx
c002073a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002073e:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0020742:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0020745:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020749:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002074c:	74 7a                	je     c00207c8 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002074e:	85 ff                	test   edi,edi
c0020750:	7e 76                	jle    c00207c8 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0020752:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0020756:	8d 70 01             	lea    esi,[eax+0x1]
c0020759:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002075c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002075f:	8b 1c 9d c0 d9 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2640]
c0020766:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0020769:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002076c:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002076f:	74 5e                	je     c00207cf <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0020771:	83 ff 01             	cmp    edi,0x1
c0020774:	74 4b                	je     c00207c1 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0020776:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002077a:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002077d:	8d 70 01             	lea    esi,[eax+0x1]
c0020780:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0020783:	8b 1c 9d c0 d9 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2640]
c002078a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002078d:	b8 02 00 00 00       	mov    eax,0x2
c0020792:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0020795:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0020798:	75 23                	jne    c00207bd <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002079a:	eb 27                	jmp    c00207c3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002079c:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00207a1:	8d 71 01             	lea    esi,[ecx+0x1]
c00207a4:	40                   	inc    eax
c00207a5:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00207a8:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00207ab:	8b 1c 9d c0 d9 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2640]
c00207b2:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00207b5:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00207b8:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00207bb:	74 06                	je     c00207c3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00207bd:	39 c7                	cmp    edi,eax
c00207bf:	75 db                	jne    c002079c <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00207c1:	89 f8                	mov    eax,edi
c00207c3:	5b                   	pop    ebx
c00207c4:	5e                   	pop    esi
c00207c5:	5f                   	pop    edi
c00207c6:	5d                   	pop    ebp
c00207c7:	c3                   	ret    
c00207c8:	5b                   	pop    ebx
c00207c9:	31 c0                	xor    eax,eax
c00207cb:	5e                   	pop    esi
c00207cc:	5f                   	pop    edi
c00207cd:	5d                   	pop    ebp
c00207ce:	c3                   	ret    
c00207cf:	b8 01 00 00 00       	mov    eax,0x1
c00207d4:	eb ed                	jmp    c00207c3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00207d6 <SoundDevice::SoundDevice(char const*)>:
c00207d6:	83 ec 1c             	sub    esp,0x1c
c00207d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207dd:	83 ec 08             	sub    esp,0x8
c00207e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00207e4:	50                   	push   eax
c00207e5:	e8 92 34 ff ff       	call   c0013c7c <Device::Device(char const*)>
c00207ea:	83 c4 10             	add    esp,0x10
c00207ed:	ba 50 a1 02 c0       	mov    edx,0xc002a150
c00207f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207f6:	89 10                	mov    DWORD PTR [eax],edx
c00207f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207fc:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0020806:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002080a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0020814:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002081c:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0020821:	7f 19                	jg     c002083c <SoundDevice::SoundDevice(char const*)+0x66>
c0020823:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020827:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002082b:	83 c2 54             	add    edx,0x54
c002082e:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0020836:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002083a:	eb e0                	jmp    c002081c <SoundDevice::SoundDevice(char const*)+0x46>
c002083c:	90                   	nop
c002083d:	83 c4 1c             	add    esp,0x1c
c0020840:	c3                   	ret    
c0020841:	90                   	nop

c0020842 <SoundDevice::~SoundDevice()>:
c0020842:	53                   	push   ebx
c0020843:	83 ec 18             	sub    esp,0x18
c0020846:	ba 50 a1 02 c0       	mov    edx,0xc002a150
c002084b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002084f:	89 10                	mov    DWORD PTR [eax],edx
c0020851:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020859:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002085e:	7f 46                	jg     c00208a6 <SoundDevice::~SoundDevice()+0x64>
c0020860:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020864:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020868:	83 c2 54             	add    edx,0x54
c002086b:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c002086f:	85 c0                	test   eax,eax
c0020871:	74 2d                	je     c00208a0 <SoundDevice::~SoundDevice()+0x5e>
c0020873:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020877:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002087b:	83 c2 54             	add    edx,0x54
c002087e:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0020882:	85 db                	test   ebx,ebx
c0020884:	74 1a                	je     c00208a0 <SoundDevice::~SoundDevice()+0x5e>
c0020886:	83 ec 0c             	sub    esp,0xc
c0020889:	53                   	push   ebx
c002088a:	e8 21 fc ff ff       	call   c00204b0 <SoundChannel::~SoundChannel()>
c002088f:	83 c4 10             	add    esp,0x10
c0020892:	83 ec 08             	sub    esp,0x8
c0020895:	6a 2c                	push   0x2c
c0020897:	53                   	push   ebx
c0020898:	e8 20 1d ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c002089d:	83 c4 10             	add    esp,0x10
c00208a0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00208a4:	eb b3                	jmp    c0020859 <SoundDevice::~SoundDevice()+0x17>
c00208a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208aa:	83 ec 0c             	sub    esp,0xc
c00208ad:	50                   	push   eax
c00208ae:	e8 ab 30 ff ff       	call   c001395e <Device::~Device()>
c00208b3:	83 c4 10             	add    esp,0x10
c00208b6:	90                   	nop
c00208b7:	83 c4 18             	add    esp,0x18
c00208ba:	5b                   	pop    ebx
c00208bb:	c3                   	ret    

c00208bc <SoundDevice::~SoundDevice()>:
c00208bc:	83 ec 0c             	sub    esp,0xc
c00208bf:	83 ec 0c             	sub    esp,0xc
c00208c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208c6:	e8 77 ff ff ff       	call   c0020842 <SoundDevice::~SoundDevice()>
c00208cb:	83 c4 10             	add    esp,0x10
c00208ce:	83 ec 08             	sub    esp,0x8
c00208d1:	68 e4 01 00 00       	push   0x1e4
c00208d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208da:	e8 de 1c ff ff       	call   c00125bd <operator delete(void*, unsigned long)>
c00208df:	83 c4 10             	add    esp,0x10
c00208e2:	83 c4 0c             	add    esp,0xc
c00208e5:	c3                   	ret    

c00208e6 <SoundDevice::getFreeChannelNum()>:
c00208e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00208ea:	31 c0                	xor    eax,eax
c00208ec:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00208f4:	74 09                	je     c00208ff <SoundDevice::getFreeChannelNum()+0x19>
c00208f6:	40                   	inc    eax
c00208f7:	83 f8 20             	cmp    eax,0x20
c00208fa:	75 f0                	jne    c00208ec <SoundDevice::getFreeChannelNum()+0x6>
c00208fc:	83 c8 ff             	or     eax,0xffffffff
c00208ff:	c3                   	ret    

c0020900 <SoundDevice::addChannel(SoundChannel*)>:
c0020900:	56                   	push   esi
c0020901:	53                   	push   ebx
c0020902:	51                   	push   ecx
c0020903:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020907:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002090b:	53                   	push   ebx
c002090c:	e8 d5 ff ff ff       	call   c00208e6 <SoundDevice::getFreeChannelNum()>
c0020911:	5a                   	pop    edx
c0020912:	83 f8 ff             	cmp    eax,0xffffffff
c0020915:	74 51                	je     c0020968 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0020917:	85 f6                	test   esi,esi
c0020919:	74 4d                	je     c0020968 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002091b:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0020922:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0020929:	75 30                	jne    c002095b <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002092b:	83 ec 0c             	sub    esp,0xc
c002092e:	56                   	push   esi
c002092f:	e8 42 fd ff ff       	call   c0020676 <SoundChannel::getSampleRate()>
c0020934:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002093a:	89 34 24             	mov    DWORD PTR [esp],esi
c002093d:	e8 3c fd ff ff       	call   c002067e <SoundChannel::getBits()>
c0020942:	83 c4 0c             	add    esp,0xc
c0020945:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002094b:	8b 13                	mov    edx,DWORD PTR [ebx]
c002094d:	50                   	push   eax
c002094e:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0020954:	53                   	push   ebx
c0020955:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0020958:	83 c4 10             	add    esp,0x10
c002095b:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0020961:	b8 01 00 00 00       	mov    eax,0x1
c0020966:	eb 03                	jmp    c002096b <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0020968:	83 c8 ff             	or     eax,0xffffffff
c002096b:	5a                   	pop    edx
c002096c:	5b                   	pop    ebx
c002096d:	5e                   	pop    esi
c002096e:	c3                   	ret    
c002096f:	90                   	nop

c0020970 <SoundDevice::removeChannel(int)>:
c0020970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020978:	83 fa 1f             	cmp    edx,0x1f
c002097b:	77 23                	ja     c00209a0 <SoundDevice::removeChannel(int)+0x30>
c002097d:	8d 14 90             	lea    edx,[eax+edx*4]
c0020980:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0020987:	74 17                	je     c00209a0 <SoundDevice::removeChannel(int)+0x30>
c0020989:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0020993:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0020999:	75 05                	jne    c00209a0 <SoundDevice::removeChannel(int)+0x30>
c002099b:	8b 00                	mov    eax,DWORD PTR [eax]
c002099d:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00209a0:	c3                   	ret    
c00209a1:	90                   	nop

c00209a2 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00209a2:	57                   	push   edi
c00209a3:	56                   	push   esi
c00209a4:	53                   	push   ebx
c00209a5:	31 db                	xor    ebx,ebx
c00209a7:	83 ec 10             	sub    esp,0x10
c00209aa:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00209ae:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00209b2:	0f 8d cb 00 00 00    	jge    c0020a83 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00209b8:	83 ec 0c             	sub    esp,0xc
c00209bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00209bf:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00209c2:	e8 60 59 00 00       	call   c0026327 <__extendsfdf2>
c00209c7:	83 c4 10             	add    esp,0x10
c00209ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00209ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00209d2:	68 00 00 f0 3f       	push   0x3ff00000
c00209d7:	6a 00                	push   0x0
c00209d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00209dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00209e1:	e8 cd 48 00 00       	call   c00252b3 <__adddf3>
c00209e6:	83 c4 10             	add    esp,0x10
c00209e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00209ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00209f1:	68 00 00 e0 3f       	push   0x3fe00000
c00209f6:	6a 00                	push   0x0
c00209f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00209fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020a00:	e8 2b 4f 00 00       	call   c0025930 <__muldf3>
c0020a05:	83 c4 10             	add    esp,0x10
c0020a08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020a0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020a10:	68 00 00 60 40       	push   0x40600000
c0020a15:	6a 00                	push   0x0
c0020a17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020a1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020a1f:	e8 0c 4f 00 00       	call   c0025930 <__muldf3>
c0020a24:	59                   	pop    ecx
c0020a25:	5f                   	pop    edi
c0020a26:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020a2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0020a2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020a32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020a36:	e8 c8 57 00 00       	call   c0026203 <__truncdfsf2>
c0020a3b:	5a                   	pop    edx
c0020a3c:	89 c7                	mov    edi,eax
c0020a3e:	59                   	pop    ecx
c0020a3f:	68 00 00 fe 42       	push   0x42fe0000
c0020a44:	50                   	push   eax
c0020a45:	e8 63 48 00 00       	call   c00252ad <__gesf2>
c0020a4a:	83 c4 10             	add    esp,0x10
c0020a4d:	85 c0                	test   eax,eax
c0020a4f:	78 06                	js     c0020a57 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0020a51:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0020a55:	eb 26                	jmp    c0020a7d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0020a57:	50                   	push   eax
c0020a58:	50                   	push   eax
c0020a59:	6a 00                	push   0x0
c0020a5b:	57                   	push   edi
c0020a5c:	e8 50 48 00 00       	call   c00252b1 <__lesf2>
c0020a61:	83 c4 10             	add    esp,0x10
c0020a64:	85 c0                	test   eax,eax
c0020a66:	7f 06                	jg     c0020a6e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0020a68:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0020a6c:	eb 0f                	jmp    c0020a7d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0020a6e:	83 ec 0c             	sub    esp,0xc
c0020a71:	57                   	push   edi
c0020a72:	e8 45 59 00 00       	call   c00263bc <lrintf>
c0020a77:	83 c4 10             	add    esp,0x10
c0020a7a:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0020a7d:	43                   	inc    ebx
c0020a7e:	e9 2b ff ff ff       	jmp    c00209ae <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0020a83:	83 c4 10             	add    esp,0x10
c0020a86:	5b                   	pop    ebx
c0020a87:	5e                   	pop    esi
c0020a88:	5f                   	pop    edi
c0020a89:	c3                   	ret    

c0020a8a <SoundDevice::getAudio(int, float*, float*)>:
c0020a8a:	55                   	push   ebp
c0020a8b:	57                   	push   edi
c0020a8c:	56                   	push   esi
c0020a8d:	53                   	push   ebx
c0020a8e:	31 db                	xor    ebx,ebx
c0020a90:	83 ec 20             	sub    esp,0x20
c0020a93:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020a97:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020a9b:	c1 e0 02             	shl    eax,0x2
c0020a9e:	50                   	push   eax
c0020a9f:	6a 00                	push   0x0
c0020aa1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020aa5:	e8 e1 fb fd ff       	call   c000068b <memset>
c0020aaa:	83 c4 10             	add    esp,0x10
c0020aad:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0020ab1:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0020ab8:	85 c0                	test   eax,eax
c0020aba:	0f 84 d7 00 00 00    	je     c0020b97 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020ac0:	83 ec 0c             	sub    esp,0xc
c0020ac3:	50                   	push   eax
c0020ac4:	e8 a5 fb ff ff       	call   c002066e <SoundChannel::paused()>
c0020ac9:	83 c4 10             	add    esp,0x10
c0020acc:	84 c0                	test   al,al
c0020ace:	0f 85 c3 00 00 00    	jne    c0020b97 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020ad4:	83 ec 0c             	sub    esp,0xc
c0020ad7:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020ade:	e8 19 fa ff ff       	call   c00204fc <SoundChannel::getVolume()>
c0020ae3:	83 c4 10             	add    esp,0x10
c0020ae6:	85 c0                	test   eax,eax
c0020ae8:	0f 84 a9 00 00 00    	je     c0020b97 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020aee:	83 ec 0c             	sub    esp,0xc
c0020af1:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020af8:	e8 ff f9 ff ff       	call   c00204fc <SoundChannel::getVolume()>
c0020afd:	83 ec 0c             	sub    esp,0xc
c0020b00:	50                   	push   eax
c0020b01:	e8 51 45 00 00       	call   c0025057 <__floatsisf>
c0020b06:	59                   	pop    ecx
c0020b07:	5d                   	pop    ebp
c0020b08:	31 ed                	xor    ebp,ebp
c0020b0a:	68 00 00 c8 42       	push   0x42c80000
c0020b0f:	50                   	push   eax
c0020b10:	e8 17 43 00 00       	call   c0024e2c <__divsf3>
c0020b15:	83 c4 10             	add    esp,0x10
c0020b18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020b1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0020b20:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0020b26:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0020b2a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020b31:	e8 60 fb ff ff       	call   c0020696 <SoundChannel::unbuffer(float*, int, int)>
c0020b36:	83 c4 20             	add    esp,0x20
c0020b39:	89 c1                	mov    ecx,eax
c0020b3b:	39 cd                	cmp    ebp,ecx
c0020b3d:	7d 52                	jge    c0020b91 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0020b3f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020b43:	50                   	push   eax
c0020b44:	50                   	push   eax
c0020b45:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020b49:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020b4c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020b50:	e8 14 41 00 00       	call   c0024c69 <__mulsf3>
c0020b55:	5a                   	pop    edx
c0020b56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020b5a:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0020b60:	e8 f2 44 00 00       	call   c0025057 <__floatsisf>
c0020b65:	59                   	pop    ecx
c0020b66:	5a                   	pop    edx
c0020b67:	50                   	push   eax
c0020b68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020b6c:	e8 bb 42 00 00       	call   c0024e2c <__divsf3>
c0020b71:	59                   	pop    ecx
c0020b72:	5a                   	pop    edx
c0020b73:	50                   	push   eax
c0020b74:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020b78:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020b7b:	e8 c6 3d 00 00       	call   c0024946 <__addsf3>
c0020b80:	83 c4 10             	add    esp,0x10
c0020b83:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020b87:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020b8b:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0020b8e:	45                   	inc    ebp
c0020b8f:	eb aa                	jmp    c0020b3b <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0020b91:	39 cf                	cmp    edi,ecx
c0020b93:	7e 02                	jle    c0020b97 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020b95:	89 cf                	mov    edi,ecx
c0020b97:	43                   	inc    ebx
c0020b98:	83 fb 20             	cmp    ebx,0x20
c0020b9b:	0f 85 10 ff ff ff    	jne    c0020ab1 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0020ba1:	83 c4 1c             	add    esp,0x1c
c0020ba4:	89 f8                	mov    eax,edi
c0020ba6:	5b                   	pop    ebx
c0020ba7:	5e                   	pop    esi
c0020ba8:	5f                   	pop    edi
c0020ba9:	5d                   	pop    ebp
c0020baa:	c3                   	ret    
c0020bab:	90                   	nop

c0020bac <PCI::open(int, int, void*)>:
c0020bac:	83 ec 18             	sub    esp,0x18
c0020baf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020bb3:	8b 10                	mov    edx,DWORD PTR [eax]
c0020bb5:	50                   	push   eax
c0020bb6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0020bb9:	31 c0                	xor    eax,eax
c0020bbb:	83 c4 1c             	add    esp,0x1c
c0020bbe:	c3                   	ret    
c0020bbf:	90                   	nop

c0020bc0 <PCI::close(int, int, void*)>:
c0020bc0:	31 c0                	xor    eax,eax
c0020bc2:	c3                   	ret    
c0020bc3:	90                   	nop

c0020bc4 <PCI::PCI()>:
c0020bc4:	83 ec 0c             	sub    esp,0xc
c0020bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bcb:	83 ec 08             	sub    esp,0x8
c0020bce:	68 80 a1 02 c0       	push   0xc002a180
c0020bd3:	50                   	push   eax
c0020bd4:	e8 5f 27 ff ff       	call   c0013338 <Bus::Bus(char const*)>
c0020bd9:	83 c4 10             	add    esp,0x10
c0020bdc:	ba ec a1 02 c0       	mov    edx,0xc002a1ec
c0020be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020be5:	89 10                	mov    DWORD PTR [eax],edx
c0020be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020beb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020bf1:	0f b6 d0             	movzx  edx,al
c0020bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bf8:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0020bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c03:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020c09:	0f b6 d0             	movzx  edx,al
c0020c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c10:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0020c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c19:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020c1f:	8d 50 01             	lea    edx,[eax+0x1]
c0020c22:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020c26:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020c2c:	0f b6 d0             	movzx  edx,al
c0020c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c33:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020c37:	83 c9 c0             	or     ecx,0xffffffc0
c0020c3a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020c3e:	90                   	nop
c0020c3f:	83 c4 0c             	add    esp,0xc
c0020c42:	c3                   	ret    
c0020c43:	90                   	nop

c0020c44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020c44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020c48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c4d:	89 ca                	mov    edx,ecx
c0020c4f:	c1 e0 10             	shl    eax,0x10
c0020c52:	81 e2 fc 00 00 00    	and    edx,0xfc
c0020c58:	09 d0                	or     eax,edx
c0020c5a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0020c5f:	c1 e2 08             	shl    edx,0x8
c0020c62:	09 d0                	or     eax,edx
c0020c64:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0020c69:	c1 e2 0b             	shl    edx,0xb
c0020c6c:	09 d0                	or     eax,edx
c0020c6e:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020c73:	0d 00 00 00 80       	or     eax,0x80000000
c0020c78:	ef                   	out    dx,eax
c0020c79:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020c7e:	ed                   	in     eax,dx
c0020c7f:	83 e1 02             	and    ecx,0x2
c0020c82:	0f b6 c9             	movzx  ecx,cl
c0020c85:	c1 e1 03             	shl    ecx,0x3
c0020c88:	d3 e8                	shr    eax,cl
c0020c8a:	c3                   	ret    
c0020c8b:	90                   	nop

c0020c8c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0020c8c:	6a 00                	push   0x0
c0020c8e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020c93:	50                   	push   eax
c0020c94:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020c99:	50                   	push   eax
c0020c9a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020c9f:	50                   	push   eax
c0020ca0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020ca4:	e8 9b ff ff ff       	call   c0020c44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020ca9:	83 c4 14             	add    esp,0x14
c0020cac:	c3                   	ret    
c0020cad:	90                   	nop

c0020cae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0020cae:	6a 0e                	push   0xe
c0020cb0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020cb5:	50                   	push   eax
c0020cb6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020cbb:	50                   	push   eax
c0020cbc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020cc1:	50                   	push   eax
c0020cc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020cc6:	e8 79 ff ff ff       	call   c0020c44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020ccb:	83 c4 14             	add    esp,0x14
c0020cce:	0f b6 c0             	movzx  eax,al
c0020cd1:	c3                   	ret    

c0020cd2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0020cd2:	55                   	push   ebp
c0020cd3:	57                   	push   edi
c0020cd4:	56                   	push   esi
c0020cd5:	53                   	push   ebx
c0020cd6:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0020cdb:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0020ce0:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0020ce5:	6a 0a                	push   0xa
c0020ce7:	56                   	push   esi
c0020ce8:	55                   	push   ebp
c0020ce9:	57                   	push   edi
c0020cea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020cee:	e8 51 ff ff ff       	call   c0020c44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020cf3:	6a 0a                	push   0xa
c0020cf5:	89 c3                	mov    ebx,eax
c0020cf7:	56                   	push   esi
c0020cf8:	0f b6 db             	movzx  ebx,bl
c0020cfb:	55                   	push   ebp
c0020cfc:	57                   	push   edi
c0020cfd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020d01:	e8 3e ff ff ff       	call   c0020c44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020d06:	83 c4 28             	add    esp,0x28
c0020d09:	25 00 ff 00 00       	and    eax,0xff00
c0020d0e:	09 d8                	or     eax,ebx
c0020d10:	5b                   	pop    ebx
c0020d11:	5e                   	pop    esi
c0020d12:	5f                   	pop    edi
c0020d13:	5d                   	pop    ebp
c0020d14:	c3                   	ret    
c0020d15:	90                   	nop

c0020d16 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0020d16:	6a 08                	push   0x8
c0020d18:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020d1d:	50                   	push   eax
c0020d1e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020d23:	50                   	push   eax
c0020d24:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020d29:	50                   	push   eax
c0020d2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020d2e:	e8 11 ff ff ff       	call   c0020c44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020d33:	83 c4 14             	add    esp,0x14
c0020d36:	0f b6 c4             	movzx  eax,ah
c0020d39:	c3                   	ret    

c0020d3a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0020d3a:	6a 08                	push   0x8
c0020d3c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020d41:	50                   	push   eax
c0020d42:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020d47:	50                   	push   eax
c0020d48:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020d4d:	50                   	push   eax
c0020d4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020d52:	e8 ed fe ff ff       	call   c0020c44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020d57:	83 c4 14             	add    esp,0x14
c0020d5a:	c3                   	ret    
c0020d5b:	90                   	nop

c0020d5c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0020d5c:	6a 3c                	push   0x3c
c0020d5e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020d63:	50                   	push   eax
c0020d64:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020d69:	50                   	push   eax
c0020d6a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020d6f:	50                   	push   eax
c0020d70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020d74:	e8 cb fe ff ff       	call   c0020c44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020d79:	83 c4 14             	add    esp,0x14
c0020d7c:	c3                   	ret    
c0020d7d:	90                   	nop

c0020d7e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0020d7e:	6a 18                	push   0x18
c0020d80:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020d85:	50                   	push   eax
c0020d86:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020d8b:	50                   	push   eax
c0020d8c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020d91:	50                   	push   eax
c0020d92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020d96:	e8 a9 fe ff ff       	call   c0020c44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020d9b:	83 c4 14             	add    esp,0x14
c0020d9e:	0f b6 c4             	movzx  eax,ah
c0020da1:	c3                   	ret    

c0020da2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020da2:	55                   	push   ebp
c0020da3:	57                   	push   edi
c0020da4:	56                   	push   esi
c0020da5:	53                   	push   ebx
c0020da6:	50                   	push   eax
c0020da7:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020dab:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0020db0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0020db5:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0020dba:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0020dc1:	8d 43 12             	lea    eax,[ebx+0x12]
c0020dc4:	83 c3 10             	add    ebx,0x10
c0020dc7:	0f b6 c0             	movzx  eax,al
c0020dca:	0f b6 db             	movzx  ebx,bl
c0020dcd:	50                   	push   eax
c0020dce:	51                   	push   ecx
c0020dcf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020dd3:	57                   	push   edi
c0020dd4:	55                   	push   ebp
c0020dd5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020dd9:	e8 66 fe ff ff       	call   c0020c44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020dde:	53                   	push   ebx
c0020ddf:	89 c6                	mov    esi,eax
c0020de1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020de5:	c1 e6 10             	shl    esi,0x10
c0020de8:	51                   	push   ecx
c0020de9:	57                   	push   edi
c0020dea:	55                   	push   ebp
c0020deb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020def:	e8 50 fe ff ff       	call   c0020c44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020df4:	83 c4 2c             	add    esp,0x2c
c0020df7:	0f b7 c0             	movzx  eax,ax
c0020dfa:	5b                   	pop    ebx
c0020dfb:	09 f0                	or     eax,esi
c0020dfd:	5e                   	pop    esi
c0020dfe:	5f                   	pop    edi
c0020dff:	5d                   	pop    ebp
c0020e00:	c3                   	ret    
c0020e01:	90                   	nop

c0020e02 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0020e02:	53                   	push   ebx
c0020e03:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020e08:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020e0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020e11:	c1 e1 10             	shl    ecx,0x10
c0020e14:	25 fc 00 00 00       	and    eax,0xfc
c0020e19:	09 c1                	or     ecx,eax
c0020e1b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020e20:	c1 e0 08             	shl    eax,0x8
c0020e23:	09 c1                	or     ecx,eax
c0020e25:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0020e2a:	c1 e0 0b             	shl    eax,0xb
c0020e2d:	09 c1                	or     ecx,eax
c0020e2f:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0020e35:	89 c8                	mov    eax,ecx
c0020e37:	ef                   	out    dx,eax
c0020e38:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020e3d:	ed                   	in     eax,dx
c0020e3e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0020e43:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0020e48:	74 0a                	je     c0020e54 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0020e4a:	0f b7 d8             	movzx  ebx,ax
c0020e4d:	89 d0                	mov    eax,edx
c0020e4f:	c1 e0 10             	shl    eax,0x10
c0020e52:	eb 05                	jmp    c0020e59 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0020e54:	66 31 c0             	xor    ax,ax
c0020e57:	89 d3                	mov    ebx,edx
c0020e59:	09 c3                	or     ebx,eax
c0020e5b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020e60:	89 c8                	mov    eax,ecx
c0020e62:	ef                   	out    dx,eax
c0020e63:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020e68:	89 d8                	mov    eax,ebx
c0020e6a:	ef                   	out    dx,eax
c0020e6b:	5b                   	pop    ebx
c0020e6c:	c3                   	ret    
c0020e6d:	90                   	nop

c0020e6e <PCI::checkBus(unsigned char)>:
c0020e6e:	56                   	push   esi
c0020e6f:	53                   	push   ebx
c0020e70:	31 db                	xor    ebx,ebx
c0020e72:	51                   	push   ecx
c0020e73:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0020e78:	52                   	push   edx
c0020e79:	53                   	push   ebx
c0020e7a:	43                   	inc    ebx
c0020e7b:	56                   	push   esi
c0020e7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e80:	e8 2b 03 00 00       	call   c00211b0 <PCI::checkDevice(unsigned char, unsigned char)>
c0020e85:	83 c4 10             	add    esp,0x10
c0020e88:	83 fb 20             	cmp    ebx,0x20
c0020e8b:	75 eb                	jne    c0020e78 <PCI::checkBus(unsigned char)+0xa>
c0020e8d:	58                   	pop    eax
c0020e8e:	5b                   	pop    ebx
c0020e8f:	5e                   	pop    esi
c0020e90:	c3                   	ret    
c0020e91:	90                   	nop

c0020e92 <PCI::foundDevice(PCIDeviceInfo)>:
c0020e92:	55                   	push   ebp
c0020e93:	57                   	push   edi
c0020e94:	56                   	push   esi
c0020e95:	53                   	push   ebx
c0020e96:	83 ec 1c             	sub    esp,0x1c
c0020e99:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020e9d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0020ea3:	0f 84 52 01 00 00    	je     c0020ffb <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0020ea9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0020ead:	66 81 f9 06 04       	cmp    cx,0x406
c0020eb2:	75 2c                	jne    c0020ee0 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0020eb4:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0020eb9:	50                   	push   eax
c0020eba:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0020ebf:	50                   	push   eax
c0020ec0:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0020ec5:	50                   	push   eax
c0020ec6:	56                   	push   esi
c0020ec7:	e8 b2 fe ff ff       	call   c0020d7e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0020ecc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0020ed0:	0f b6 c0             	movzx  eax,al
c0020ed3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0020ed7:	83 c4 2c             	add    esp,0x2c
c0020eda:	5b                   	pop    ebx
c0020edb:	5e                   	pop    esi
c0020edc:	5f                   	pop    edi
c0020edd:	5d                   	pop    ebp
c0020ede:	eb 8e                	jmp    c0020e6e <PCI::checkBus(unsigned char)>
c0020ee0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020ee4:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0020eea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020eee:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0020ef2:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0020ef6:	88 d3                	mov    bl,dl
c0020ef8:	85 c0                	test   eax,eax
c0020efa:	74 33                	je     c0020f2f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0020efc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0020eff:	85 d2                	test   edx,edx
c0020f01:	74 28                	je     c0020f2b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020f03:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0020f09:	31 ef                	xor    edi,ebp
c0020f0b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0020f11:	75 18                	jne    c0020f2b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020f13:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020f17:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0020f1d:	75 0c                	jne    c0020f2b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020f1f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0020f25:	0f 84 d0 00 00 00    	je     c0020ffb <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0020f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f2d:	eb c9                	jmp    c0020ef8 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0020f2f:	66 81 f9 01 06       	cmp    cx,0x601
c0020f34:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0020f38:	75 19                	jne    c0020f53 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0020f3a:	83 ec 0c             	sub    esp,0xc
c0020f3d:	68 64 01 00 00       	push   0x164
c0020f42:	e8 89 e5 fe ff       	call   c000f4d0 <malloc>
c0020f47:	89 c5                	mov    ebp,eax
c0020f49:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f4c:	e8 95 0f 00 00       	call   c0021ee6 <SATABus::SATABus()>
c0020f51:	eb 1e                	jmp    c0020f71 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0020f53:	66 81 f9 01 01       	cmp    cx,0x101
c0020f58:	75 60                	jne    c0020fba <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0020f5a:	83 ec 0c             	sub    esp,0xc
c0020f5d:	68 70 02 00 00       	push   0x270
c0020f62:	e8 69 e5 fe ff       	call   c000f4d0 <malloc>
c0020f67:	89 c5                	mov    ebp,eax
c0020f69:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f6c:	e8 03 03 00 00       	call   c0021274 <IDE::IDE()>
c0020f71:	58                   	pop    eax
c0020f72:	5a                   	pop    edx
c0020f73:	55                   	push   ebp
c0020f74:	56                   	push   esi
c0020f75:	e8 12 2b ff ff       	call   c0013a8c <Device::addChild(Device*)>
c0020f7a:	83 ec 1c             	sub    esp,0x1c
c0020f7d:	b9 09 00 00 00       	mov    ecx,0x9
c0020f82:	fc                   	cld    
c0020f83:	89 e7                	mov    edi,esp
c0020f85:	89 de                	mov    esi,ebx
c0020f87:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020f89:	55                   	push   ebp
c0020f8a:	e8 07 2a ff ff       	call   c0013996 <Device::preOpenPCI(PCIDeviceInfo)>
c0020f8f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020f92:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0020f96:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0020f9e:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0020fa6:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0020fae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020fb1:	83 c4 4c             	add    esp,0x4c
c0020fb4:	5b                   	pop    ebx
c0020fb5:	5e                   	pop    esi
c0020fb6:	5f                   	pop    edi
c0020fb7:	5d                   	pop    ebp
c0020fb8:	ff e0                	jmp    eax
c0020fba:	83 ec 0c             	sub    esp,0xc
c0020fbd:	68 58 01 00 00       	push   0x158
c0020fc2:	e8 09 e5 fe ff       	call   c000f4d0 <malloc>
c0020fc7:	89 c5                	mov    ebp,eax
c0020fc9:	58                   	pop    eax
c0020fca:	5a                   	pop    edx
c0020fcb:	68 88 a1 02 c0       	push   0xc002a188
c0020fd0:	55                   	push   ebp
c0020fd1:	e8 ac 2d ff ff       	call   c0013d82 <DriverlessDevice::DriverlessDevice(char const*)>
c0020fd6:	59                   	pop    ecx
c0020fd7:	5f                   	pop    edi
c0020fd8:	55                   	push   ebp
c0020fd9:	56                   	push   esi
c0020fda:	e8 ad 2a ff ff       	call   c0013a8c <Device::addChild(Device*)>
c0020fdf:	b9 09 00 00 00       	mov    ecx,0x9
c0020fe4:	fc                   	cld    
c0020fe5:	89 df                	mov    edi,ebx
c0020fe7:	89 de                	mov    esi,ebx
c0020fe9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020feb:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0020fef:	83 c4 2c             	add    esp,0x2c
c0020ff2:	5b                   	pop    ebx
c0020ff3:	5e                   	pop    esi
c0020ff4:	5f                   	pop    edi
c0020ff5:	5d                   	pop    ebp
c0020ff6:	e9 9b 29 ff ff       	jmp    c0013996 <Device::preOpenPCI(PCIDeviceInfo)>
c0020ffb:	83 c4 1c             	add    esp,0x1c
c0020ffe:	5b                   	pop    ebx
c0020fff:	5e                   	pop    esi
c0021000:	5f                   	pop    edi
c0021001:	5d                   	pop    ebp
c0021002:	c3                   	ret    
c0021003:	90                   	nop

c0021004 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0021004:	55                   	push   ebp
c0021005:	57                   	push   edi
c0021006:	56                   	push   esi
c0021007:	53                   	push   ebx
c0021008:	83 ec 5c             	sub    esp,0x5c
c002100b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c002100f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021013:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0021017:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c002101c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021020:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0021024:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0021029:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002102d:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0021032:	6a 0c                	push   0xc
c0021034:	55                   	push   ebp
c0021035:	53                   	push   ebx
c0021036:	57                   	push   edi
c0021037:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c002103e:	e8 01 fc ff ff       	call   c0020c44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021043:	55                   	push   ebp
c0021044:	53                   	push   ebx
c0021045:	57                   	push   edi
c0021046:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002104d:	e8 80 fc ff ff       	call   c0020cd2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0021052:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0021057:	83 c4 24             	add    esp,0x24
c002105a:	55                   	push   ebp
c002105b:	53                   	push   ebx
c002105c:	57                   	push   edi
c002105d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021061:	e8 f6 fc ff ff       	call   c0020d5c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0021066:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002106a:	6a 3c                	push   0x3c
c002106c:	55                   	push   ebp
c002106d:	53                   	push   ebx
c002106e:	57                   	push   edi
c002106f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021076:	e8 c9 fb ff ff       	call   c0020c44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002107b:	0f b6 c4             	movzx  eax,ah
c002107e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021082:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0021086:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c002108a:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c002108f:	83 c4 24             	add    esp,0x24
c0021092:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021098:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c002109f:	74 6c                	je     c002110d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00210a1:	31 f6                	xor    esi,esi
c00210a3:	8b 15 c8 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002bac8
c00210a9:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00210af:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c00210b5:	7e 56                	jle    c002110d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00210b7:	8d 14 f2             	lea    edx,[edx+esi*8]
c00210ba:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00210c1:	39 cb                	cmp    ebx,ecx
c00210c3:	75 45                	jne    c002110a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00210c5:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00210cc:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00210d0:	75 38                	jne    c002110a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00210d2:	83 ec 0c             	sub    esp,0xc
c00210d5:	68 a2 a1 02 c0       	push   0xc002a1a2
c00210da:	e8 be 15 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00210df:	8b 15 c8 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002bac8
c00210e5:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00210eb:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00210f3:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00210f7:	52                   	push   edx
c00210f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00210fc:	53                   	push   ebx
c00210fd:	68 c7 a1 02 c0       	push   0xc002a1c7
c0021102:	e8 96 15 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0021107:	83 c4 20             	add    esp,0x20
c002110a:	46                   	inc    esi
c002110b:	eb 96                	jmp    c00210a3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c002110d:	31 d2                	xor    edx,edx
c002110f:	83 ec 0c             	sub    esp,0xc
c0021112:	55                   	push   ebp
c0021113:	53                   	push   ebx
c0021114:	57                   	push   edi
c0021115:	52                   	push   edx
c0021116:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002111a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021121:	e8 7c fc ff ff       	call   c0020da2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021126:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c002112a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002112e:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0021132:	42                   	inc    edx
c0021133:	83 c4 20             	add    esp,0x20
c0021136:	83 fa 06             	cmp    edx,0x6
c0021139:	75 d4                	jne    c002110f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c002113b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002113f:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0021143:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0021147:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c002114b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002114f:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0021153:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0021158:	86 e0                	xchg   al,ah
c002115a:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c002115f:	55                   	push   ebp
c0021160:	53                   	push   ebx
c0021161:	57                   	push   edi
c0021162:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021166:	e8 ab fb ff ff       	call   c0020d16 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002116b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002116f:	55                   	push   ebp
c0021170:	53                   	push   ebx
c0021171:	57                   	push   edi
c0021172:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021179:	e8 0e fb ff ff       	call   c0020c8c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002117e:	83 ec 0c             	sub    esp,0xc
c0021181:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0021186:	b9 09 00 00 00       	mov    ecx,0x9
c002118b:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c002118f:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0021193:	fc                   	cld    
c0021194:	89 e7                	mov    edi,esp
c0021196:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021198:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002119f:	e8 ee fc ff ff       	call   c0020e92 <PCI::foundDevice(PCIDeviceInfo)>
c00211a4:	81 c4 8c 00 00 00    	add    esp,0x8c
c00211aa:	5b                   	pop    ebx
c00211ab:	5e                   	pop    esi
c00211ac:	5f                   	pop    edi
c00211ad:	5d                   	pop    ebp
c00211ae:	c3                   	ret    
c00211af:	90                   	nop

c00211b0 <PCI::checkDevice(unsigned char, unsigned char)>:
c00211b0:	55                   	push   ebp
c00211b1:	57                   	push   edi
c00211b2:	56                   	push   esi
c00211b3:	53                   	push   ebx
c00211b4:	83 ec 0c             	sub    esp,0xc
c00211b7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00211bb:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00211c0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00211c5:	6a 00                	push   0x0
c00211c7:	56                   	push   esi
c00211c8:	57                   	push   edi
c00211c9:	55                   	push   ebp
c00211ca:	e8 bd fa ff ff       	call   c0020c8c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00211cf:	6a 00                	push   0x0
c00211d1:	56                   	push   esi
c00211d2:	57                   	push   edi
c00211d3:	55                   	push   ebp
c00211d4:	e8 2b fe ff ff       	call   c0021004 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00211d9:	83 c4 20             	add    esp,0x20
c00211dc:	6a 00                	push   0x0
c00211de:	56                   	push   esi
c00211df:	57                   	push   edi
c00211e0:	55                   	push   ebp
c00211e1:	e8 c8 fa ff ff       	call   c0020cae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00211e6:	83 c4 10             	add    esp,0x10
c00211e9:	84 c0                	test   al,al
c00211eb:	79 27                	jns    c0021214 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00211ed:	bb 01 00 00 00       	mov    ebx,0x1
c00211f2:	53                   	push   ebx
c00211f3:	56                   	push   esi
c00211f4:	57                   	push   edi
c00211f5:	55                   	push   ebp
c00211f6:	e8 91 fa ff ff       	call   c0020c8c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00211fb:	83 c4 10             	add    esp,0x10
c00211fe:	66 40                	inc    ax
c0021200:	74 0c                	je     c002120e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0021202:	53                   	push   ebx
c0021203:	56                   	push   esi
c0021204:	57                   	push   edi
c0021205:	55                   	push   ebp
c0021206:	e8 f9 fd ff ff       	call   c0021004 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002120b:	83 c4 10             	add    esp,0x10
c002120e:	43                   	inc    ebx
c002120f:	83 fb 08             	cmp    ebx,0x8
c0021212:	75 de                	jne    c00211f2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0021214:	83 c4 0c             	add    esp,0xc
c0021217:	5b                   	pop    ebx
c0021218:	5e                   	pop    esi
c0021219:	5f                   	pop    edi
c002121a:	5d                   	pop    ebp
c002121b:	c3                   	ret    

c002121c <PCI::detect()>:
c002121c:	56                   	push   esi
c002121d:	53                   	push   ebx
c002121e:	53                   	push   ebx
c002121f:	31 db                	xor    ebx,ebx
c0021221:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021225:	6a 00                	push   0x0
c0021227:	6a 00                	push   0x0
c0021229:	6a 00                	push   0x0
c002122b:	56                   	push   esi
c002122c:	e8 7d fa ff ff       	call   c0020cae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021231:	83 c4 10             	add    esp,0x10
c0021234:	a8 80                	test   al,0x80
c0021236:	75 21                	jne    c0021259 <PCI::detect()+0x3d>
c0021238:	51                   	push   ecx
c0021239:	51                   	push   ecx
c002123a:	6a 00                	push   0x0
c002123c:	56                   	push   esi
c002123d:	e8 2c fc ff ff       	call   c0020e6e <PCI::checkBus(unsigned char)>
c0021242:	83 c4 10             	add    esp,0x10
c0021245:	eb 24                	jmp    c002126b <PCI::detect()+0x4f>
c0021247:	52                   	push   edx
c0021248:	52                   	push   edx
c0021249:	53                   	push   ebx
c002124a:	43                   	inc    ebx
c002124b:	56                   	push   esi
c002124c:	e8 1d fc ff ff       	call   c0020e6e <PCI::checkBus(unsigned char)>
c0021251:	83 c4 10             	add    esp,0x10
c0021254:	83 fb 08             	cmp    ebx,0x8
c0021257:	74 12                	je     c002126b <PCI::detect()+0x4f>
c0021259:	53                   	push   ebx
c002125a:	6a 00                	push   0x0
c002125c:	6a 00                	push   0x0
c002125e:	56                   	push   esi
c002125f:	e8 28 fa ff ff       	call   c0020c8c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021264:	83 c4 10             	add    esp,0x10
c0021267:	66 40                	inc    ax
c0021269:	74 dc                	je     c0021247 <PCI::detect()+0x2b>
c002126b:	58                   	pop    eax
c002126c:	5b                   	pop    ebx
c002126d:	5e                   	pop    esi
c002126e:	c3                   	ret    
c002126f:	90                   	nop

c0021270 <IDE::close(int, int, void*)>:
c0021270:	83 c8 ff             	or     eax,0xffffffff
c0021273:	c3                   	ret    

c0021274 <IDE::IDE()>:
c0021274:	83 ec 0c             	sub    esp,0xc
c0021277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002127b:	83 ec 08             	sub    esp,0x8
c002127e:	68 10 a2 02 c0       	push   0xc002a210
c0021283:	50                   	push   eax
c0021284:	e8 8f 2b ff ff       	call   c0013e18 <HardDiskController::HardDiskController(char const*)>
c0021289:	83 c4 10             	add    esp,0x10
c002128c:	ba 50 a4 02 c0       	mov    edx,0xc002a450
c0021291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021295:	89 10                	mov    DWORD PTR [eax],edx
c0021297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002129b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00212a2:	90                   	nop
c00212a3:	83 c4 0c             	add    esp,0xc
c00212a6:	c3                   	ret    
c00212a7:	90                   	nop

c00212a8 <IDE::prepareInterrupt(unsigned char)>:
c00212a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00212ad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00212b1:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00212b9:	c3                   	ret    

c00212ba <selectDrive(unsigned char, unsigned char)>:
c00212ba:	c3                   	ret    
c00212bb:	90                   	nop

c00212bc <IDE::getBase(unsigned char)>:
c00212bc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00212c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212c5:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00212cd:	c3                   	ret    

c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00212ce:	55                   	push   ebp
c00212cf:	57                   	push   edi
c00212d0:	56                   	push   esi
c00212d1:	53                   	push   ebx
c00212d2:	83 ec 1c             	sub    esp,0x1c
c00212d5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00212d9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00212dd:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00212e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00212e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00212e8:	80 f9 03             	cmp    cl,0x3
c00212eb:	77 51                	ja     c002133e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00212ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00212f1:	0f b6 f2             	movzx  esi,dl
c00212f4:	0f b6 db             	movzx  ebx,bl
c00212f7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00212fa:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00212fe:	83 ca 80             	or     edx,0xffffff80
c0021301:	0f b6 d2             	movzx  edx,dl
c0021304:	52                   	push   edx
c0021305:	6a 0c                	push   0xc
c0021307:	56                   	push   esi
c0021308:	57                   	push   edi
c0021309:	e8 c0 ff ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002130e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0021313:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021317:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002131b:	ee                   	out    dx,al
c002131c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0021321:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0021325:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0021329:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002132d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0021335:	83 c4 2c             	add    esp,0x2c
c0021338:	5b                   	pop    ebx
c0021339:	5e                   	pop    esi
c002133a:	5f                   	pop    edi
c002133b:	5d                   	pop    ebp
c002133c:	eb 90                	jmp    c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002133e:	80 fb 07             	cmp    bl,0x7
c0021341:	77 12                	ja     c0021355 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0021343:	0f b6 d2             	movzx  edx,dl
c0021346:	0f b6 db             	movzx  ebx,bl
c0021349:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0021351:	89 da                	mov    edx,ebx
c0021353:	eb 2f                	jmp    c0021384 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0021355:	80 fb 0d             	cmp    bl,0xd
c0021358:	77 13                	ja     c002136d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002135a:	0f b6 d2             	movzx  edx,dl
c002135d:	0f b6 db             	movzx  ebx,bl
c0021360:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0021367:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002136b:	eb 17                	jmp    c0021384 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002136d:	80 fb 15             	cmp    bl,0x15
c0021370:	77 13                	ja     c0021385 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0021372:	0f b6 d2             	movzx  edx,dl
c0021375:	0f b6 db             	movzx  ebx,bl
c0021378:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0021380:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0021384:	ee                   	out    dx,al
c0021385:	83 c4 1c             	add    esp,0x1c
c0021388:	5b                   	pop    ebx
c0021389:	5e                   	pop    esi
c002138a:	5f                   	pop    edi
c002138b:	5d                   	pop    ebp
c002138c:	c3                   	ret    
c002138d:	90                   	nop

c002138e <IDE::read(unsigned char, unsigned char)>:
c002138e:	55                   	push   ebp
c002138f:	57                   	push   edi
c0021390:	56                   	push   esi
c0021391:	53                   	push   ebx
c0021392:	83 ec 1c             	sub    esp,0x1c
c0021395:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021399:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002139d:	8d 43 f8             	lea    eax,[ebx-0x8]
c00213a0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00213a4:	3c 03                	cmp    al,0x3
c00213a6:	77 43                	ja     c00213eb <IDE::read(unsigned char, unsigned char)+0x5d>
c00213a8:	0f b6 f2             	movzx  esi,dl
c00213ab:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00213ae:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00213b2:	83 c8 80             	or     eax,0xffffff80
c00213b5:	0f b6 c0             	movzx  eax,al
c00213b8:	50                   	push   eax
c00213b9:	6a 0c                	push   0xc
c00213bb:	56                   	push   esi
c00213bc:	57                   	push   edi
c00213bd:	e8 0c ff ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00213c2:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00213c7:	0f b6 c3             	movzx  eax,bl
c00213ca:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00213ce:	ec                   	in     al,dx
c00213cf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00213d3:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00213d8:	52                   	push   edx
c00213d9:	6a 0c                	push   0xc
c00213db:	56                   	push   esi
c00213dc:	57                   	push   edi
c00213dd:	e8 ec fe ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00213e2:	83 c4 20             	add    esp,0x20
c00213e5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00213e9:	eb 49                	jmp    c0021434 <IDE::read(unsigned char, unsigned char)+0xa6>
c00213eb:	80 fb 07             	cmp    bl,0x7
c00213ee:	77 12                	ja     c0021402 <IDE::read(unsigned char, unsigned char)+0x74>
c00213f0:	0f b6 d2             	movzx  edx,dl
c00213f3:	0f b6 c3             	movzx  eax,bl
c00213f6:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00213fe:	89 c2                	mov    edx,eax
c0021400:	eb 31                	jmp    c0021433 <IDE::read(unsigned char, unsigned char)+0xa5>
c0021402:	80 fb 0d             	cmp    bl,0xd
c0021405:	77 13                	ja     c002141a <IDE::read(unsigned char, unsigned char)+0x8c>
c0021407:	0f b6 d2             	movzx  edx,dl
c002140a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0021411:	0f b6 d3             	movzx  edx,bl
c0021414:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0021418:	eb 19                	jmp    c0021433 <IDE::read(unsigned char, unsigned char)+0xa5>
c002141a:	31 c0                	xor    eax,eax
c002141c:	80 fb 15             	cmp    bl,0x15
c002141f:	77 13                	ja     c0021434 <IDE::read(unsigned char, unsigned char)+0xa6>
c0021421:	0f b6 d2             	movzx  edx,dl
c0021424:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002142c:	0f b6 d3             	movzx  edx,bl
c002142f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0021433:	ec                   	in     al,dx
c0021434:	83 c4 1c             	add    esp,0x1c
c0021437:	5b                   	pop    ebx
c0021438:	5e                   	pop    esi
c0021439:	5f                   	pop    edi
c002143a:	5d                   	pop    ebp
c002143b:	c3                   	ret    

c002143c <IDE::waitInterrupt(unsigned char)>:
c002143c:	55                   	push   ebp
c002143d:	57                   	push   edi
c002143e:	56                   	push   esi
c002143f:	53                   	push   ebx
c0021440:	31 db                	xor    ebx,ebx
c0021442:	83 ec 0c             	sub    esp,0xc
c0021445:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021449:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002144e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0021456:	89 e8                	mov    eax,ebp
c0021458:	84 c0                	test   al,al
c002145a:	75 34                	jne    c0021490 <IDE::waitInterrupt(unsigned char)+0x54>
c002145c:	52                   	push   edx
c002145d:	6a 0c                	push   0xc
c002145f:	56                   	push   esi
c0021460:	57                   	push   edi
c0021461:	e8 28 ff ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0021466:	83 c4 10             	add    esp,0x10
c0021469:	a8 01                	test   al,0x1
c002146b:	75 2b                	jne    c0021498 <IDE::waitInterrupt(unsigned char)+0x5c>
c002146d:	f6 c3 04             	test   bl,0x4
c0021470:	75 16                	jne    c0021488 <IDE::waitInterrupt(unsigned char)+0x4c>
c0021472:	83 fb 32             	cmp    ebx,0x32
c0021475:	7e 11                	jle    c0021488 <IDE::waitInterrupt(unsigned char)+0x4c>
c0021477:	50                   	push   eax
c0021478:	50                   	push   eax
c0021479:	6a 00                	push   0x0
c002147b:	68 80 96 98 00       	push   0x989680
c0021480:	e8 f1 b2 ff ff       	call   c001c776 <nanoSleep(unsigned long long)>
c0021485:	83 c4 10             	add    esp,0x10
c0021488:	83 fb 3c             	cmp    ebx,0x3c
c002148b:	74 0b                	je     c0021498 <IDE::waitInterrupt(unsigned char)+0x5c>
c002148d:	43                   	inc    ebx
c002148e:	eb be                	jmp    c002144e <IDE::waitInterrupt(unsigned char)+0x12>
c0021490:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0021498:	83 c4 0c             	add    esp,0xc
c002149b:	89 e8                	mov    eax,ebp
c002149d:	5b                   	pop    ebx
c002149e:	5e                   	pop    esi
c002149f:	5f                   	pop    edi
c00214a0:	5d                   	pop    ebp
c00214a1:	c3                   	ret    

c00214a2 <ideChannel0IRQHandler(regs*, void*)>:
c00214a2:	83 ec 10             	sub    esp,0x10
c00214a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00214a9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00214b0:	6a 07                	push   0x7
c00214b2:	6a 00                	push   0x0
c00214b4:	50                   	push   eax
c00214b5:	e8 d4 fe ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c00214ba:	83 c4 1c             	add    esp,0x1c
c00214bd:	c3                   	ret    

c00214be <ideChannel1IRQHandler(regs*, void*)>:
c00214be:	83 ec 10             	sub    esp,0x10
c00214c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00214c5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00214cc:	6a 07                	push   0x7
c00214ce:	6a 01                	push   0x1
c00214d0:	50                   	push   eax
c00214d1:	e8 b8 fe ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c00214d6:	83 c4 1c             	add    esp,0x1c
c00214d9:	c3                   	ret    

c00214da <IDE::enableIRQs(unsigned char, bool)>:
c00214da:	57                   	push   edi
c00214db:	56                   	push   esi
c00214dc:	be 04 00 00 00       	mov    esi,0x4
c00214e1:	53                   	push   ebx
c00214e2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00214e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00214eb:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00214f0:	0f 94 c0             	sete   al
c00214f3:	d1 e0                	shl    eax,1
c00214f5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00214fc:	0f b6 c0             	movzx  eax,al
c00214ff:	50                   	push   eax
c0021500:	6a 0c                	push   0xc
c0021502:	57                   	push   edi
c0021503:	53                   	push   ebx
c0021504:	e8 c5 fd ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021509:	83 c4 10             	add    esp,0x10
c002150c:	50                   	push   eax
c002150d:	6a 0c                	push   0xc
c002150f:	57                   	push   edi
c0021510:	53                   	push   ebx
c0021511:	e8 78 fe ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0021516:	83 c4 10             	add    esp,0x10
c0021519:	4e                   	dec    esi
c002151a:	75 f0                	jne    c002150c <IDE::enableIRQs(unsigned char, bool)+0x32>
c002151c:	5b                   	pop    ebx
c002151d:	5e                   	pop    esi
c002151e:	5f                   	pop    edi
c002151f:	c3                   	ret    

c0021520 <IDE::open(int, int, void*)>:
c0021520:	55                   	push   ebp
c0021521:	57                   	push   edi
c0021522:	56                   	push   esi
c0021523:	53                   	push   ebx
c0021524:	83 ec 1c             	sub    esp,0x1c
c0021527:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002152b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0021534:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002153d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0021544:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002154b:	0f 85 b0 02 00 00    	jne    c0021801 <IDE::open(int, int, void*)+0x2e1>
c0021551:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0021557:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002155b:	83 e0 7f             	and    eax,0x7f
c002155e:	3c 05                	cmp    al,0x5
c0021560:	74 04                	je     c0021566 <IDE::open(int, int, void*)+0x46>
c0021562:	3c 0f                	cmp    al,0xf
c0021564:	75 32                	jne    c0021598 <IDE::open(int, int, void*)+0x78>
c0021566:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002156c:	83 e0 fc             	and    eax,0xfffffffc
c002156f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0021576:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002157c:	83 e0 fc             	and    eax,0xfffffffc
c002157f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0021586:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002158c:	83 e0 fc             	and    eax,0xfffffffc
c002158f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0021596:	eb 14                	jmp    c00215ac <IDE::open(int, int, void*)+0x8c>
c0021598:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00215a2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00215ac:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00215b3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00215ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00215be:	89 c6                	mov    esi,eax
c00215c0:	bf f8 0c 00 00       	mov    edi,0xcf8
c00215c5:	c1 e6 10             	shl    esi,0x10
c00215c8:	89 e8                	mov    eax,ebp
c00215ca:	89 fa                	mov    edx,edi
c00215cc:	c1 e0 0b             	shl    eax,0xb
c00215cf:	09 f0                	or     eax,esi
c00215d1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00215d8:	c1 e6 08             	shl    esi,0x8
c00215db:	09 c6                	or     esi,eax
c00215dd:	89 f0                	mov    eax,esi
c00215df:	0d 08 00 00 80       	or     eax,0x80000008
c00215e4:	ef                   	out    dx,eax
c00215e5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00215ea:	89 ca                	mov    edx,ecx
c00215ec:	ed                   	in     eax,dx
c00215ed:	c1 e8 10             	shr    eax,0x10
c00215f0:	3d ff ff 00 00       	cmp    eax,0xffff
c00215f5:	0f 84 f5 00 00 00    	je     c00216f0 <IDE::open(int, int, void*)+0x1d0>
c00215fb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0021601:	89 fa                	mov    edx,edi
c0021603:	89 f0                	mov    eax,esi
c0021605:	ef                   	out    dx,eax
c0021606:	b0 fe                	mov    al,0xfe
c0021608:	89 ca                	mov    edx,ecx
c002160a:	ee                   	out    dx,al
c002160b:	89 f0                	mov    eax,esi
c002160d:	89 fa                	mov    edx,edi
c002160f:	ef                   	out    dx,eax
c0021610:	89 ca                	mov    edx,ecx
c0021612:	ed                   	in     eax,dx
c0021613:	3c fe                	cmp    al,0xfe
c0021615:	0f 85 a9 00 00 00    	jne    c00216c4 <IDE::open(int, int, void*)+0x1a4>
c002161b:	8b 15 c8 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002bac8
c0021621:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0021628:	74 33                	je     c002165d <IDE::open(int, int, void*)+0x13d>
c002162a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0021630:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0021634:	40                   	inc    eax
c0021635:	83 ec 0c             	sub    esp,0xc
c0021638:	0f b6 c0             	movzx  eax,al
c002163b:	50                   	push   eax
c002163c:	55                   	push   ebp
c002163d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021641:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0021647:	51                   	push   ecx
c0021648:	e8 5d 60 ff ff       	call   c00176aa <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002164d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0021652:	83 c4 1c             	add    esp,0x1c
c0021655:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002165b:	eb 0a                	jmp    c0021667 <IDE::open(int, int, void*)+0x147>
c002165d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0021667:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002166e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0021675:	c1 e1 10             	shl    ecx,0x10
c0021678:	c1 e0 08             	shl    eax,0x8
c002167b:	bf f8 0c 00 00       	mov    edi,0xcf8
c0021680:	09 c1                	or     ecx,eax
c0021682:	89 fa                	mov    edx,edi
c0021684:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002168b:	c1 e0 0b             	shl    eax,0xb
c002168e:	09 c1                	or     ecx,eax
c0021690:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0021696:	89 c8                	mov    eax,ecx
c0021698:	ef                   	out    dx,eax
c0021699:	be fc 0c 00 00       	mov    esi,0xcfc
c002169e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00216a4:	89 f2                	mov    edx,esi
c00216a6:	ee                   	out    dx,al
c00216a7:	89 c8                	mov    eax,ecx
c00216a9:	89 fa                	mov    edx,edi
c00216ab:	ef                   	out    dx,eax
c00216ac:	89 f2                	mov    edx,esi
c00216ae:	ed                   	in     eax,dx
c00216af:	0f b6 c0             	movzx  eax,al
c00216b2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00216b8:	74 46                	je     c0021700 <IDE::open(int, int, void*)+0x1e0>
c00216ba:	83 ec 0c             	sub    esp,0xc
c00216bd:	68 28 a2 02 c0       	push   0xc002a228
c00216c2:	eb 34                	jmp    c00216f8 <IDE::open(int, int, void*)+0x1d8>
c00216c4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00216cd:	75 17                	jne    c00216e6 <IDE::open(int, int, void*)+0x1c6>
c00216cf:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00216d4:	74 07                	je     c00216dd <IDE::open(int, int, void*)+0x1bd>
c00216d6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00216db:	75 09                	jne    c00216e6 <IDE::open(int, int, void*)+0x1c6>
c00216dd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00216e4:	eb 1a                	jmp    c0021700 <IDE::open(int, int, void*)+0x1e0>
c00216e6:	83 ec 0c             	sub    esp,0xc
c00216e9:	68 30 a2 02 c0       	push   0xc002a230
c00216ee:	eb 08                	jmp    c00216f8 <IDE::open(int, int, void*)+0x1d8>
c00216f0:	83 ec 0c             	sub    esp,0xc
c00216f3:	68 61 a2 02 c0       	push   0xc002a261
c00216f8:	e8 e4 7a ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c00216fd:	83 c4 10             	add    esp,0x10
c0021700:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0021707:	79 1a                	jns    c0021723 <IDE::open(int, int, void*)+0x203>
c0021709:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002170f:	83 e0 fc             	and    eax,0xfffffffc
c0021712:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0021719:	83 c0 08             	add    eax,0x8
c002171c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0021723:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0021729:	89 c2                	mov    edx,eax
c002172b:	83 e2 0f             	and    edx,0xf
c002172e:	66 83 fa 08          	cmp    dx,0x8
c0021732:	75 0a                	jne    c002173e <IDE::open(int, int, void*)+0x21e>
c0021734:	83 e8 02             	sub    eax,0x2
c0021737:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002173e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0021744:	89 c2                	mov    edx,eax
c0021746:	83 e2 0f             	and    edx,0xf
c0021749:	66 83 fa 08          	cmp    dx,0x8
c002174d:	75 0a                	jne    c0021759 <IDE::open(int, int, void*)+0x239>
c002174f:	83 e8 02             	sub    eax,0x2
c0021752:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0021759:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0021760:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0021767:	89 d0                	mov    eax,edx
c0021769:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002176c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0021770:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0021774:	8d 4a 01             	lea    ecx,[edx+0x1]
c0021777:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002177c:	0f b6 c9             	movzx  ecx,cl
c002177f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0021786:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0021789:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002178d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0021791:	8d 50 02             	lea    edx,[eax+0x2]
c0021794:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0021799:	0f b6 d2             	movzx  edx,dl
c002179c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00217a2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00217a5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00217a9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00217ad:	8d 48 03             	lea    ecx,[eax+0x3]
c00217b0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00217b5:	0f b6 c9             	movzx  ecx,cl
c00217b8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00217be:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00217c1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00217c5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00217c9:	8d 50 04             	lea    edx,[eax+0x4]
c00217cc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00217d2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00217d7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00217de:	66 85 f6             	test   si,si
c00217e1:	74 3e                	je     c0021821 <IDE::open(int, int, void*)+0x301>
c00217e3:	0f b6 d2             	movzx  edx,dl
c00217e6:	83 c0 05             	add    eax,0x5
c00217e9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00217ec:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00217f0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00217f4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00217fa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00217ff:	eb 20                	jmp    c0021821 <IDE::open(int, int, void*)+0x301>
c0021801:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002180b:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0021815:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002181c:	e9 02 ff ff ff       	jmp    c0021723 <IDE::open(int, int, void*)+0x203>
c0021821:	52                   	push   edx
c0021822:	52                   	push   edx
c0021823:	6a 00                	push   0x0
c0021825:	53                   	push   ebx
c0021826:	e8 7d fa ff ff       	call   c00212a8 <IDE::prepareInterrupt(unsigned char)>
c002182b:	59                   	pop    ecx
c002182c:	5e                   	pop    esi
c002182d:	6a 01                	push   0x1
c002182f:	53                   	push   ebx
c0021830:	e8 73 fa ff ff       	call   c00212a8 <IDE::prepareInterrupt(unsigned char)>
c0021835:	83 c4 0c             	add    esp,0xc
c0021838:	6a 00                	push   0x0
c002183a:	6a 00                	push   0x0
c002183c:	53                   	push   ebx
c002183d:	e8 98 fc ff ff       	call   c00214da <IDE::enableIRQs(unsigned char, bool)>
c0021842:	83 c4 0c             	add    esp,0xc
c0021845:	6a 00                	push   0x0
c0021847:	6a 01                	push   0x1
c0021849:	53                   	push   ebx
c002184a:	e8 8b fc ff ff       	call   c00214da <IDE::enableIRQs(unsigned char, bool)>
c002184f:	83 c4 10             	add    esp,0x10
c0021852:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0021859:	74 40                	je     c002189b <IDE::open(int, int, void*)+0x37b>
c002185b:	83 ec 0c             	sub    esp,0xc
c002185e:	68 8b a2 02 c0       	push   0xc002a28b
c0021863:	e8 35 0e ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0021868:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002186b:	6a 01                	push   0x1
c002186d:	68 a2 14 02 c0       	push   0xc00214a2
c0021872:	6a 0e                	push   0xe
c0021874:	53                   	push   ebx
c0021875:	e8 96 21 ff ff       	call   c0013a10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002187a:	83 c4 14             	add    esp,0x14
c002187d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0021883:	53                   	push   ebx
c0021884:	6a 01                	push   0x1
c0021886:	68 be 14 02 c0       	push   0xc00214be
c002188b:	6a 0f                	push   0xf
c002188d:	53                   	push   ebx
c002188e:	e8 7d 21 ff ff       	call   c0013a10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021893:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0021899:	eb 4a                	jmp    c00218e5 <IDE::open(int, int, void*)+0x3c5>
c002189b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00218a5:	50                   	push   eax
c00218a6:	6a 0f                	push   0xf
c00218a8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00218ae:	68 a7 a2 02 c0       	push   0xc002a2a7
c00218b3:	e8 e5 0d ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00218b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00218bb:	6a 00                	push   0x0
c00218bd:	68 a2 14 02 c0       	push   0xc00214a2
c00218c2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00218c8:	53                   	push   ebx
c00218c9:	e8 42 21 ff ff       	call   c0013a10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00218ce:	83 c4 14             	add    esp,0x14
c00218d1:	53                   	push   ebx
c00218d2:	6a 00                	push   0x0
c00218d4:	68 be 14 02 c0       	push   0xc00214be
c00218d9:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00218df:	53                   	push   ebx
c00218e0:	e8 2b 21 ff ff       	call   c0013a10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00218e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00218e7:	83 c4 20             	add    esp,0x20
c00218ea:	83 ec 0c             	sub    esp,0xc
c00218ed:	53                   	push   ebx
c00218ee:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00218f1:	83 c4 0c             	add    esp,0xc
c00218f4:	6a 07                	push   0x7
c00218f6:	6a 00                	push   0x0
c00218f8:	53                   	push   ebx
c00218f9:	e8 90 fa ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c00218fe:	83 c4 0c             	add    esp,0xc
c0021901:	6a 07                	push   0x7
c0021903:	6a 01                	push   0x1
c0021905:	53                   	push   ebx
c0021906:	e8 83 fa ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c002190b:	83 c4 0c             	add    esp,0xc
c002190e:	6a 01                	push   0x1
c0021910:	6a 00                	push   0x0
c0021912:	53                   	push   ebx
c0021913:	e8 c2 fb ff ff       	call   c00214da <IDE::enableIRQs(unsigned char, bool)>
c0021918:	83 c4 0c             	add    esp,0xc
c002191b:	6a 01                	push   0x1
c002191d:	6a 01                	push   0x1
c002191f:	53                   	push   ebx
c0021920:	e8 b5 fb ff ff       	call   c00214da <IDE::enableIRQs(unsigned char, bool)>
c0021925:	83 c4 2c             	add    esp,0x2c
c0021928:	31 c0                	xor    eax,eax
c002192a:	5b                   	pop    ebx
c002192b:	5e                   	pop    esi
c002192c:	5f                   	pop    edi
c002192d:	5d                   	pop    ebp
c002192e:	c3                   	ret    
c002192f:	90                   	nop

c0021930 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0021930:	55                   	push   ebp
c0021931:	57                   	push   edi
c0021932:	56                   	push   esi
c0021933:	53                   	push   ebx
c0021934:	83 ec 1c             	sub    esp,0x1c
c0021937:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002193b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002193f:	8d 50 f8             	lea    edx,[eax-0x8]
c0021942:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021946:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002194a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002194e:	80 fa 03             	cmp    dl,0x3
c0021951:	77 5d                	ja     c00219b0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0021953:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021957:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002195b:	0f b6 db             	movzx  ebx,bl
c002195e:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0021961:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0021965:	83 ca 80             	or     edx,0xffffff80
c0021968:	0f b6 d2             	movzx  edx,dl
c002196b:	52                   	push   edx
c002196c:	6a 0c                	push   0xc
c002196e:	53                   	push   ebx
c002196f:	56                   	push   esi
c0021970:	e8 59 f9 ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021975:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002197a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002197e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021982:	0f b6 c0             	movzx  eax,al
c0021985:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0021989:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002198b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0021990:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0021994:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021998:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002199c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00219a4:	83 c4 2c             	add    esp,0x2c
c00219a7:	5b                   	pop    ebx
c00219a8:	5e                   	pop    esi
c00219a9:	5f                   	pop    edi
c00219aa:	5d                   	pop    ebp
c00219ab:	e9 1e f9 ff ff       	jmp    c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219b0:	3c 07                	cmp    al,0x7
c00219b2:	77 10                	ja     c00219c4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00219b4:	0f b6 db             	movzx  ebx,bl
c00219b7:	0f b6 d0             	movzx  edx,al
c00219ba:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00219c2:	eb 2d                	jmp    c00219f1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00219c4:	3c 0d                	cmp    al,0xd
c00219c6:	77 13                	ja     c00219db <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00219c8:	0f b6 db             	movzx  ebx,bl
c00219cb:	0f b6 c0             	movzx  eax,al
c00219ce:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00219d5:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00219d9:	eb 16                	jmp    c00219f1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00219db:	3c 15                	cmp    al,0x15
c00219dd:	77 14                	ja     c00219f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00219df:	0f b6 db             	movzx  ebx,bl
c00219e2:	0f b6 c0             	movzx  eax,al
c00219e5:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00219ed:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00219f1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00219f3:	83 c4 1c             	add    esp,0x1c
c00219f6:	5b                   	pop    ebx
c00219f7:	5e                   	pop    esi
c00219f8:	5f                   	pop    edi
c00219f9:	5d                   	pop    ebp
c00219fa:	c3                   	ret    
c00219fb:	90                   	nop

c00219fc <IDE::detect()>:
c00219fc:	55                   	push   ebp
c00219fd:	57                   	push   edi
c00219fe:	56                   	push   esi
c00219ff:	53                   	push   ebx
c0021a00:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021a06:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0021a0d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0021a14:	0f 85 be 02 00 00    	jne    c0021cd8 <IDE::detect()+0x2dc>
c0021a1a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0021a21:	31 f6                	xor    esi,esi
c0021a23:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0021a2b:	31 ed                	xor    ebp,ebp
c0021a2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a31:	c1 e0 06             	shl    eax,0x6
c0021a34:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0021a3c:	89 e8                	mov    eax,ebp
c0021a3e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021a42:	c1 e0 04             	shl    eax,0x4
c0021a45:	83 c8 a0             	or     eax,0xffffffa0
c0021a48:	0f b6 c0             	movzx  eax,al
c0021a4b:	50                   	push   eax
c0021a4c:	6a 06                	push   0x6
c0021a4e:	56                   	push   esi
c0021a4f:	53                   	push   ebx
c0021a50:	e8 79 f8 ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021a55:	83 c4 0c             	add    esp,0xc
c0021a58:	6a 0c                	push   0xc
c0021a5a:	56                   	push   esi
c0021a5b:	53                   	push   ebx
c0021a5c:	e8 2d f9 ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0021a61:	83 c4 0c             	add    esp,0xc
c0021a64:	6a 0c                	push   0xc
c0021a66:	56                   	push   esi
c0021a67:	53                   	push   ebx
c0021a68:	e8 21 f9 ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0021a6d:	83 c4 0c             	add    esp,0xc
c0021a70:	6a 0c                	push   0xc
c0021a72:	56                   	push   esi
c0021a73:	53                   	push   ebx
c0021a74:	e8 15 f9 ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0021a79:	83 c4 0c             	add    esp,0xc
c0021a7c:	6a 0c                	push   0xc
c0021a7e:	56                   	push   esi
c0021a7f:	53                   	push   ebx
c0021a80:	e8 09 f9 ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0021a85:	68 ec 00 00 00       	push   0xec
c0021a8a:	6a 07                	push   0x7
c0021a8c:	56                   	push   esi
c0021a8d:	53                   	push   ebx
c0021a8e:	e8 3b f8 ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021a93:	83 c4 1c             	add    esp,0x1c
c0021a96:	6a 0c                	push   0xc
c0021a98:	56                   	push   esi
c0021a99:	53                   	push   ebx
c0021a9a:	e8 ef f8 ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0021a9f:	83 c4 0c             	add    esp,0xc
c0021aa2:	6a 0c                	push   0xc
c0021aa4:	56                   	push   esi
c0021aa5:	53                   	push   ebx
c0021aa6:	e8 e3 f8 ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0021aab:	83 c4 0c             	add    esp,0xc
c0021aae:	6a 0c                	push   0xc
c0021ab0:	56                   	push   esi
c0021ab1:	53                   	push   ebx
c0021ab2:	e8 d7 f8 ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0021ab7:	83 c4 0c             	add    esp,0xc
c0021aba:	6a 0c                	push   0xc
c0021abc:	56                   	push   esi
c0021abd:	53                   	push   ebx
c0021abe:	e8 cb f8 ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0021ac3:	83 c4 0c             	add    esp,0xc
c0021ac6:	6a 0c                	push   0xc
c0021ac8:	56                   	push   esi
c0021ac9:	53                   	push   ebx
c0021aca:	e8 bf f8 ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0021acf:	83 c4 10             	add    esp,0x10
c0021ad2:	84 c0                	test   al,al
c0021ad4:	0f 84 8b 01 00 00    	je     c0021c65 <IDE::detect()+0x269>
c0021ada:	31 ff                	xor    edi,edi
c0021adc:	50                   	push   eax
c0021add:	6a 0c                	push   0xc
c0021adf:	56                   	push   esi
c0021ae0:	53                   	push   ebx
c0021ae1:	e8 a8 f8 ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0021ae6:	83 c4 10             	add    esp,0x10
c0021ae9:	a8 01                	test   al,0x1
c0021aeb:	0f 85 8e 01 00 00    	jne    c0021c7f <IDE::detect()+0x283>
c0021af1:	84 c0                	test   al,al
c0021af3:	78 04                	js     c0021af9 <IDE::detect()+0xfd>
c0021af5:	a8 08                	test   al,0x8
c0021af7:	75 27                	jne    c0021b20 <IDE::detect()+0x124>
c0021af9:	47                   	inc    edi
c0021afa:	81 ff 17 01 00 00    	cmp    edi,0x117
c0021b00:	7e da                	jle    c0021adc <IDE::detect()+0xe0>
c0021b02:	50                   	push   eax
c0021b03:	50                   	push   eax
c0021b04:	6a 00                	push   0x0
c0021b06:	68 40 4b 4c 00       	push   0x4c4b40
c0021b0b:	e8 66 ac ff ff       	call   c001c776 <nanoSleep(unsigned long long)>
c0021b10:	83 c4 10             	add    esp,0x10
c0021b13:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0021b19:	75 c1                	jne    c0021adc <IDE::detect()+0xe0>
c0021b1b:	e9 5f 01 00 00       	jmp    c0021c7f <IDE::detect()+0x283>
c0021b20:	31 c9                	xor    ecx,ecx
c0021b22:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0021b26:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0021b2a:	83 ec 0c             	sub    esp,0xc
c0021b2d:	68 80 00 00 00       	push   0x80
c0021b32:	57                   	push   edi
c0021b33:	6a 00                	push   0x0
c0021b35:	56                   	push   esi
c0021b36:	53                   	push   ebx
c0021b37:	e8 f4 fd ff ff       	call   c0021930 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0021b3c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0021b41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0021b45:	89 d1                	mov    ecx,edx
c0021b47:	c1 e0 06             	shl    eax,0x6
c0021b4a:	01 d8                	add    eax,ebx
c0021b4c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0021b53:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0021b5a:	89 f2                	mov    edx,esi
c0021b5c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0021b62:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0021b66:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0021b6c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021b70:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0021b77:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0021b7f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0021b86:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0021b8e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0021b94:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0021b9b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0021ba1:	8d 54 24 58          	lea    edx,[esp+0x58]
c0021ba5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021ba9:	83 c4 20             	add    esp,0x20
c0021bac:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0021baf:	83 c0 02             	add    eax,0x2
c0021bb2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0021bb8:	83 c7 02             	add    edi,0x2
c0021bbb:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0021bbe:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0021bc4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0021bc8:	75 e2                	jne    c0021bac <IDE::detect()+0x1b0>
c0021bca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bce:	c1 e0 06             	shl    eax,0x6
c0021bd1:	01 d8                	add    eax,ebx
c0021bd3:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0021bd9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0021be0:	66 c1 ea 09          	shr    dx,0x9
c0021be4:	83 e2 01             	and    edx,0x1
c0021be7:	84 c9                	test   cl,cl
c0021be9:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0021bef:	75 2f                	jne    c0021c20 <IDE::detect()+0x224>
c0021bf1:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0021bf7:	85 c0                	test   eax,eax
c0021bf9:	74 66                	je     c0021c61 <IDE::detect()+0x265>
c0021bfb:	50                   	push   eax
c0021bfc:	55                   	push   ebp
c0021bfd:	56                   	push   esi
c0021bfe:	68 c3 a2 02 c0       	push   0xc002a2c3
c0021c03:	e8 95 0a ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0021c08:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0021c0f:	e8 bc d8 fe ff       	call   c000f4d0 <malloc>
c0021c14:	89 c7                	mov    edi,eax
c0021c16:	89 04 24             	mov    DWORD PTR [esp],eax
c0021c19:	e8 62 06 00 00       	call   c0022280 <ATA::ATA()>
c0021c1e:	eb 28                	jmp    c0021c48 <IDE::detect()+0x24c>
c0021c20:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0021c26:	55                   	push   ebp
c0021c27:	56                   	push   esi
c0021c28:	68 f2 a2 02 c0       	push   0xc002a2f2
c0021c2d:	e8 6b 0a ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0021c32:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0021c39:	e8 92 d8 fe ff       	call   c000f4d0 <malloc>
c0021c3e:	89 c7                	mov    edi,eax
c0021c40:	89 04 24             	mov    DWORD PTR [esp],eax
c0021c43:	e8 68 0c 00 00       	call   c00228b0 <ATAPI::ATAPI()>
c0021c48:	5a                   	pop    edx
c0021c49:	59                   	pop    ecx
c0021c4a:	57                   	push   edi
c0021c4b:	53                   	push   ebx
c0021c4c:	e8 3b 1e ff ff       	call   c0013a8c <Device::addChild(Device*)>
c0021c51:	8b 07                	mov    eax,DWORD PTR [edi]
c0021c53:	53                   	push   ebx
c0021c54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021c58:	6a 00                	push   0x0
c0021c5a:	57                   	push   edi
c0021c5b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021c5e:	83 c4 20             	add    esp,0x20
c0021c61:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0021c65:	4d                   	dec    ebp
c0021c66:	74 0a                	je     c0021c72 <IDE::detect()+0x276>
c0021c68:	bd 01 00 00 00       	mov    ebp,0x1
c0021c6d:	e9 bb fd ff ff       	jmp    c0021a2d <IDE::detect()+0x31>
c0021c72:	4e                   	dec    esi
c0021c73:	74 63                	je     c0021cd8 <IDE::detect()+0x2dc>
c0021c75:	be 01 00 00 00       	mov    esi,0x1
c0021c7a:	e9 ac fd ff ff       	jmp    c0021a2b <IDE::detect()+0x2f>
c0021c7f:	50                   	push   eax
c0021c80:	6a 04                	push   0x4
c0021c82:	56                   	push   esi
c0021c83:	53                   	push   ebx
c0021c84:	e8 05 f7 ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0021c89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0021c8d:	83 c4 0c             	add    esp,0xc
c0021c90:	6a 05                	push   0x5
c0021c92:	56                   	push   esi
c0021c93:	53                   	push   ebx
c0021c94:	e8 f5 f6 ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0021c99:	83 c4 10             	add    esp,0x10
c0021c9c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0021ca0:	80 fa 14             	cmp    dl,0x14
c0021ca3:	75 04                	jne    c0021ca9 <IDE::detect()+0x2ad>
c0021ca5:	3c eb                	cmp    al,0xeb
c0021ca7:	eb 07                	jmp    c0021cb0 <IDE::detect()+0x2b4>
c0021ca9:	3c 96                	cmp    al,0x96
c0021cab:	75 b8                	jne    c0021c65 <IDE::detect()+0x269>
c0021cad:	80 fa 69             	cmp    dl,0x69
c0021cb0:	75 b3                	jne    c0021c65 <IDE::detect()+0x269>
c0021cb2:	68 a1 00 00 00       	push   0xa1
c0021cb7:	6a 07                	push   0x7
c0021cb9:	56                   	push   esi
c0021cba:	53                   	push   ebx
c0021cbb:	e8 0e f6 ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021cc0:	5f                   	pop    edi
c0021cc1:	58                   	pop    eax
c0021cc2:	6a 00                	push   0x0
c0021cc4:	68 40 42 0f 00       	push   0xf4240
c0021cc9:	e8 a8 aa ff ff       	call   c001c776 <nanoSleep(unsigned long long)>
c0021cce:	83 c4 10             	add    esp,0x10
c0021cd1:	b1 01                	mov    cl,0x1
c0021cd3:	e9 4a fe ff ff       	jmp    c0021b22 <IDE::detect()+0x126>
c0021cd8:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021cde:	5b                   	pop    ebx
c0021cdf:	5e                   	pop    esi
c0021ce0:	5f                   	pop    edi
c0021ce1:	5d                   	pop    ebp
c0021ce2:	c3                   	ret    
c0021ce3:	90                   	nop

c0021ce4 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0021ce4:	55                   	push   ebp
c0021ce5:	57                   	push   edi
c0021ce6:	56                   	push   esi
c0021ce7:	53                   	push   ebx
c0021ce8:	83 ec 1c             	sub    esp,0x1c
c0021ceb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021cef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021cf3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021cf7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021cfb:	88 c3                	mov    bl,al
c0021cfd:	84 c0                	test   al,al
c0021cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021d03:	0f 84 67 01 00 00    	je     c0021e70 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0021d09:	83 ec 0c             	sub    esp,0xc
c0021d0c:	68 23 a3 02 c0       	push   0xc002a323
c0021d11:	e8 87 09 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0021d16:	83 c4 10             	add    esp,0x10
c0021d19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d1d:	3c 01                	cmp    al,0x1
c0021d1f:	75 17                	jne    c0021d38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0021d21:	83 ec 0c             	sub    esp,0xc
c0021d24:	b3 13                	mov    bl,0x13
c0021d26:	68 2f a3 02 c0       	push   0xc002a32f
c0021d2b:	e8 6d 09 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0021d30:	83 c4 10             	add    esp,0x10
c0021d33:	e9 25 01 00 00       	jmp    c0021e5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021d38:	3c 02                	cmp    al,0x2
c0021d3a:	0f 85 ef 00 00 00    	jne    c0021e2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0021d40:	d1 e6                	shl    esi,1
c0021d42:	09 ee                	or     esi,ebp
c0021d44:	52                   	push   edx
c0021d45:	89 f0                	mov    eax,esi
c0021d47:	6a 01                	push   0x1
c0021d49:	0f b6 f0             	movzx  esi,al
c0021d4c:	c1 e6 06             	shl    esi,0x6
c0021d4f:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0021d57:	50                   	push   eax
c0021d58:	57                   	push   edi
c0021d59:	e8 30 f6 ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0021d5e:	83 c4 10             	add    esp,0x10
c0021d61:	89 c6                	mov    esi,eax
c0021d63:	a8 01                	test   al,0x1
c0021d65:	74 12                	je     c0021d79 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0021d67:	83 ec 0c             	sub    esp,0xc
c0021d6a:	b3 07                	mov    bl,0x7
c0021d6c:	68 44 a3 02 c0       	push   0xc002a344
c0021d71:	e8 27 09 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0021d76:	83 c4 10             	add    esp,0x10
c0021d79:	f7 c6 02 00 00 00    	test   esi,0x2
c0021d7f:	74 12                	je     c0021d93 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0021d81:	83 ec 0c             	sub    esp,0xc
c0021d84:	b3 03                	mov    bl,0x3
c0021d86:	68 62 a3 02 c0       	push   0xc002a362
c0021d8b:	e8 0d 09 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0021d90:	83 c4 10             	add    esp,0x10
c0021d93:	f7 c6 04 00 00 00    	test   esi,0x4
c0021d99:	74 12                	je     c0021dad <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0021d9b:	83 ec 0c             	sub    esp,0xc
c0021d9e:	b3 14                	mov    bl,0x14
c0021da0:	68 82 a3 02 c0       	push   0xc002a382
c0021da5:	e8 f3 08 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0021daa:	83 c4 10             	add    esp,0x10
c0021dad:	f7 c6 08 00 00 00    	test   esi,0x8
c0021db3:	74 12                	je     c0021dc7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0021db5:	83 ec 0c             	sub    esp,0xc
c0021db8:	b3 03                	mov    bl,0x3
c0021dba:	68 62 a3 02 c0       	push   0xc002a362
c0021dbf:	e8 d9 08 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0021dc4:	83 c4 10             	add    esp,0x10
c0021dc7:	f7 c6 10 00 00 00    	test   esi,0x10
c0021dcd:	74 12                	je     c0021de1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0021dcf:	83 ec 0c             	sub    esp,0xc
c0021dd2:	b3 15                	mov    bl,0x15
c0021dd4:	68 9a a3 02 c0       	push   0xc002a39a
c0021dd9:	e8 bf 08 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0021dde:	83 c4 10             	add    esp,0x10
c0021de1:	f7 c6 20 00 00 00    	test   esi,0x20
c0021de7:	74 12                	je     c0021dfb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0021de9:	83 ec 0c             	sub    esp,0xc
c0021dec:	b3 03                	mov    bl,0x3
c0021dee:	68 62 a3 02 c0       	push   0xc002a362
c0021df3:	e8 a5 08 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0021df8:	83 c4 10             	add    esp,0x10
c0021dfb:	f7 c6 40 00 00 00    	test   esi,0x40
c0021e01:	74 12                	je     c0021e15 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0021e03:	83 ec 0c             	sub    esp,0xc
c0021e06:	b3 16                	mov    bl,0x16
c0021e08:	68 b4 a3 02 c0       	push   0xc002a3b4
c0021e0d:	e8 8b 08 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0021e12:	83 c4 10             	add    esp,0x10
c0021e15:	89 f0                	mov    eax,esi
c0021e17:	84 c0                	test   al,al
c0021e19:	79 42                	jns    c0021e5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021e1b:	83 ec 0c             	sub    esp,0xc
c0021e1e:	b3 0d                	mov    bl,0xd
c0021e20:	68 d5 a3 02 c0       	push   0xc002a3d5
c0021e25:	e8 73 08 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0021e2a:	83 c4 10             	add    esp,0x10
c0021e2d:	eb 2e                	jmp    c0021e5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021e2f:	3c 03                	cmp    al,0x3
c0021e31:	75 14                	jne    c0021e47 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0021e33:	83 ec 0c             	sub    esp,0xc
c0021e36:	b3 17                	mov    bl,0x17
c0021e38:	68 e9 a3 02 c0       	push   0xc002a3e9
c0021e3d:	e8 5b 08 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0021e42:	83 c4 10             	add    esp,0x10
c0021e45:	eb 16                	jmp    c0021e5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021e47:	3c 04                	cmp    al,0x4
c0021e49:	75 12                	jne    c0021e5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021e4b:	83 ec 0c             	sub    esp,0xc
c0021e4e:	b3 08                	mov    bl,0x8
c0021e50:	68 ff a3 02 c0       	push   0xc002a3ff
c0021e55:	e8 43 08 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0021e5a:	83 c4 10             	add    esp,0x10
c0021e5d:	50                   	push   eax
c0021e5e:	50                   	push   eax
c0021e5f:	0f b6 c3             	movzx  eax,bl
c0021e62:	50                   	push   eax
c0021e63:	68 17 a4 02 c0       	push   0xc002a417
c0021e68:	e8 30 08 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0021e6d:	83 c4 10             	add    esp,0x10
c0021e70:	83 c4 1c             	add    esp,0x1c
c0021e73:	88 d8                	mov    al,bl
c0021e75:	5b                   	pop    ebx
c0021e76:	5e                   	pop    esi
c0021e77:	5f                   	pop    edi
c0021e78:	5d                   	pop    ebp
c0021e79:	c3                   	ret    

c0021e7a <IDE::polling(unsigned char, unsigned int)>:
c0021e7a:	57                   	push   edi
c0021e7b:	56                   	push   esi
c0021e7c:	53                   	push   ebx
c0021e7d:	bb 04 00 00 00       	mov    ebx,0x4
c0021e82:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0021e86:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021e8b:	52                   	push   edx
c0021e8c:	6a 0c                	push   0xc
c0021e8e:	56                   	push   esi
c0021e8f:	57                   	push   edi
c0021e90:	e8 f9 f4 ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0021e95:	83 c4 10             	add    esp,0x10
c0021e98:	4b                   	dec    ebx
c0021e99:	75 f0                	jne    c0021e8b <IDE::polling(unsigned char, unsigned int)+0x11>
c0021e9b:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021ea0:	50                   	push   eax
c0021ea1:	6a 0c                	push   0xc
c0021ea3:	56                   	push   esi
c0021ea4:	57                   	push   edi
c0021ea5:	e8 e4 f4 ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0021eaa:	83 c4 10             	add    esp,0x10
c0021ead:	a8 01                	test   al,0x1
c0021eaf:	74 12                	je     c0021ec3 <IDE::polling(unsigned char, unsigned int)+0x49>
c0021eb1:	83 ec 0c             	sub    esp,0xc
c0021eb4:	68 31 a4 02 c0       	push   0xc002a431
c0021eb9:	e8 df 07 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0021ebe:	83 c4 10             	add    esp,0x10
c0021ec1:	eb 17                	jmp    c0021eda <IDE::polling(unsigned char, unsigned int)+0x60>
c0021ec3:	a8 20                	test   al,0x20
c0021ec5:	75 0f                	jne    c0021ed6 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0021ec7:	4b                   	dec    ebx
c0021ec8:	74 10                	je     c0021eda <IDE::polling(unsigned char, unsigned int)+0x60>
c0021eca:	84 c0                	test   al,al
c0021ecc:	78 d2                	js     c0021ea0 <IDE::polling(unsigned char, unsigned int)+0x26>
c0021ece:	a8 08                	test   al,0x8
c0021ed0:	74 ce                	je     c0021ea0 <IDE::polling(unsigned char, unsigned int)+0x26>
c0021ed2:	31 c0                	xor    eax,eax
c0021ed4:	eb 06                	jmp    c0021edc <IDE::polling(unsigned char, unsigned int)+0x62>
c0021ed6:	b0 01                	mov    al,0x1
c0021ed8:	eb 02                	jmp    c0021edc <IDE::polling(unsigned char, unsigned int)+0x62>
c0021eda:	b0 02                	mov    al,0x2
c0021edc:	5b                   	pop    ebx
c0021edd:	5e                   	pop    esi
c0021ede:	5f                   	pop    edi
c0021edf:	c3                   	ret    

c0021ee0 <SATABus::close(int, int, void*)>:
c0021ee0:	31 c0                	xor    eax,eax
c0021ee2:	c3                   	ret    
c0021ee3:	90                   	nop

c0021ee4 <SATABus::detect()>:
c0021ee4:	c3                   	ret    
c0021ee5:	90                   	nop

c0021ee6 <SATABus::SATABus()>:
c0021ee6:	83 ec 0c             	sub    esp,0xc
c0021ee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eed:	83 ec 08             	sub    esp,0x8
c0021ef0:	68 74 a4 02 c0       	push   0xc002a474
c0021ef5:	50                   	push   eax
c0021ef6:	e8 1d 1f ff ff       	call   c0013e18 <HardDiskController::HardDiskController(char const*)>
c0021efb:	83 c4 10             	add    esp,0x10
c0021efe:	ba 30 a5 02 c0       	mov    edx,0xc002a530
c0021f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f07:	89 10                	mov    DWORD PTR [eax],edx
c0021f09:	83 ec 0c             	sub    esp,0xc
c0021f0c:	6a 50                	push   0x50
c0021f0e:	e8 2f dc fe ff       	call   c000fb42 <Phys::allocateContiguousPages(int)>
c0021f13:	83 c4 10             	add    esp,0x10
c0021f16:	89 c2                	mov    edx,eax
c0021f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f1c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021f22:	83 ec 0c             	sub    esp,0xc
c0021f25:	6a 50                	push   0x50
c0021f27:	e8 81 f7 fe ff       	call   c00116ad <Virt::allocateKernelVirtualPages(int)>
c0021f2c:	83 c4 10             	add    esp,0x10
c0021f2f:	89 c2                	mov    edx,eax
c0021f31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f35:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021f3b:	e8 fd f8 fe ff       	call   c001183d <Virt::getAKernelVAS()>
c0021f40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021f44:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0021f4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021f4e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021f54:	83 ec 0c             	sub    esp,0xc
c0021f57:	6a 03                	push   0x3
c0021f59:	6a 50                	push   0x50
c0021f5b:	51                   	push   ecx
c0021f5c:	52                   	push   edx
c0021f5d:	50                   	push   eax
c0021f5e:	e8 09 01 ff ff       	call   c001206c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0021f63:	83 c4 20             	add    esp,0x20
c0021f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f6a:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0021f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f74:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021f7a:	83 ec 04             	sub    esp,0x4
c0021f7d:	52                   	push   edx
c0021f7e:	50                   	push   eax
c0021f7f:	68 98 a4 02 c0       	push   0xc002a498
c0021f84:	e8 14 07 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0021f89:	83 c4 10             	add    esp,0x10
c0021f8c:	90                   	nop
c0021f8d:	83 c4 0c             	add    esp,0xc
c0021f90:	c3                   	ret    
c0021f91:	90                   	nop

c0021f92 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0021f92:	83 ec 0c             	sub    esp,0xc
c0021f95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021f99:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0021f9c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021f9f:	09 c2                	or     edx,eax
c0021fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fa5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021fab:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021fad:	31 c0                	xor    eax,eax
c0021faf:	c1 e9 08             	shr    ecx,0x8
c0021fb2:	83 e1 0f             	and    ecx,0xf
c0021fb5:	39 c8                	cmp    eax,ecx
c0021fb7:	74 0a                	je     c0021fc3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0021fb9:	f6 c2 01             	test   dl,0x1
c0021fbc:	74 18                	je     c0021fd6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0021fbe:	d1 ea                	shr    edx,1
c0021fc0:	40                   	inc    eax
c0021fc1:	eb f2                	jmp    c0021fb5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0021fc3:	83 ec 0c             	sub    esp,0xc
c0021fc6:	68 bc a4 02 c0       	push   0xc002a4bc
c0021fcb:	e8 11 72 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c0021fd0:	83 c4 10             	add    esp,0x10
c0021fd3:	83 c8 ff             	or     eax,0xffffffff
c0021fd6:	83 c4 0c             	add    esp,0xc
c0021fd9:	c3                   	ret    

c0021fda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0021fda:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021fde:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0021fe1:	89 c2                	mov    edx,eax
c0021fe3:	c1 ea 08             	shr    edx,0x8
c0021fe6:	83 e2 0f             	and    edx,0xf
c0021fe9:	fe ca                	dec    dl
c0021feb:	75 31                	jne    c002201e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0021fed:	83 e0 0f             	and    eax,0xf
c0021ff0:	3c 03                	cmp    al,0x3
c0021ff2:	75 2a                	jne    c002201e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0021ff4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0021ff7:	b8 02 00 00 00       	mov    eax,0x2
c0021ffc:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0022002:	74 1c                	je     c0022020 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022004:	b8 04 00 00 00       	mov    eax,0x4
c0022009:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002200f:	74 0f                	je     c0022020 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022011:	31 c0                	xor    eax,eax
c0022013:	83 fa 03             	cmp    edx,0x3
c0022016:	0f 94 c0             	sete   al
c0022019:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002201d:	c3                   	ret    
c002201e:	31 c0                	xor    eax,eax
c0022020:	c3                   	ret    
c0022021:	90                   	nop

c0022022 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0022022:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022026:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022029:	0f ba e2 0f          	bt     edx,0xf
c002202d:	72 f7                	jb     c0022026 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002202f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022032:	83 ca 10             	or     edx,0x10
c0022035:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022038:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002203b:	83 ca 01             	or     edx,0x1
c002203e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022041:	c3                   	ret    

c0022042 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0022042:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022046:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022049:	83 e2 fe             	and    edx,0xfffffffe
c002204c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002204f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022052:	83 e2 ef             	and    edx,0xffffffef
c0022055:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022058:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002205b:	0f ba e2 0e          	bt     edx,0xe
c002205f:	72 f7                	jb     c0022058 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022061:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022064:	0f ba e2 0f          	bt     edx,0xf
c0022068:	72 ee                	jb     c0022058 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002206a:	c3                   	ret    
c002206b:	90                   	nop

c002206c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002206c:	55                   	push   ebp
c002206d:	57                   	push   edi
c002206e:	56                   	push   esi
c002206f:	53                   	push   ebx
c0022070:	83 ec 1c             	sub    esp,0x1c
c0022073:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022077:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002207b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002207f:	53                   	push   ebx
c0022080:	89 fd                	mov    ebp,edi
c0022082:	56                   	push   esi
c0022083:	c1 e5 0a             	shl    ebp,0xa
c0022086:	e8 b7 ff ff ff       	call   c0022042 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002208b:	83 ec 0c             	sub    esp,0xc
c002208e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0022094:	01 e8                	add    eax,ebp
c0022096:	89 03                	mov    DWORD PTR [ebx],eax
c0022098:	8b 03                	mov    eax,DWORD PTR [ebx]
c002209a:	68 00 04 00 00       	push   0x400
c002209f:	6a 00                	push   0x0
c00220a1:	50                   	push   eax
c00220a2:	e8 e4 e5 fd ff       	call   c000068b <memset>
c00220a7:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00220ad:	89 fa                	mov    edx,edi
c00220af:	01 e8                	add    eax,ebp
c00220b1:	c1 e7 0d             	shl    edi,0xd
c00220b4:	89 03                	mov    DWORD PTR [ebx],eax
c00220b6:	c1 e2 08             	shl    edx,0x8
c00220b9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220c0:	81 c2 00 80 00 00    	add    edx,0x8000
c00220c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00220ca:	89 d0                	mov    eax,edx
c00220cc:	83 c4 1c             	add    esp,0x1c
c00220cf:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00220d5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00220d8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00220db:	68 00 01 00 00       	push   0x100
c00220e0:	6a 00                	push   0x0
c00220e2:	50                   	push   eax
c00220e3:	e8 a3 e5 fd ff       	call   c000068b <memset>
c00220e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00220ec:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00220f2:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00220f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00220fc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00220ff:	83 c4 10             	add    esp,0x10
c0022102:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022109:	31 ff                	xor    edi,edi
c002210b:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0022111:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0022117:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002211b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022121:	83 c5 20             	add    ebp,0x20
c0022124:	01 f8                	add    eax,edi
c0022126:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022129:	52                   	push   edx
c002212a:	68 00 01 00 00       	push   0x100
c002212f:	6a 00                	push   0x0
c0022131:	50                   	push   eax
c0022132:	e8 54 e5 fd ff       	call   c000068b <memset>
c0022137:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002213b:	83 c4 10             	add    esp,0x10
c002213e:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0022144:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002214b:	01 f8                	add    eax,edi
c002214d:	81 c7 00 01 00 00    	add    edi,0x100
c0022153:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022156:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002215c:	75 b3                	jne    c0022111 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c002215e:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0022162:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0022166:	83 c4 1c             	add    esp,0x1c
c0022169:	5b                   	pop    ebx
c002216a:	5e                   	pop    esi
c002216b:	5f                   	pop    edi
c002216c:	5d                   	pop    ebp
c002216d:	e9 b0 fe ff ff       	jmp    c0022022 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0022172 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0022172:	55                   	push   ebp
c0022173:	57                   	push   edi
c0022174:	56                   	push   esi
c0022175:	53                   	push   ebx
c0022176:	31 db                	xor    ebx,ebx
c0022178:	83 ec 0c             	sub    esp,0xc
c002217b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002217f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022183:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0022186:	f7 c7 01 00 00 00    	test   edi,0x1
c002218c:	0f 84 94 00 00 00    	je     c0022226 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022192:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022196:	89 d8                	mov    eax,ebx
c0022198:	c1 e0 07             	shl    eax,0x7
c002219b:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c00221a2:	55                   	push   ebp
c00221a3:	56                   	push   esi
c00221a4:	e8 31 fe ff ff       	call   c0021fda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00221a9:	59                   	pop    ecx
c00221aa:	83 f8 01             	cmp    eax,0x1
c00221ad:	5a                   	pop    edx
c00221ae:	75 47                	jne    c00221f7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c00221b0:	51                   	push   ecx
c00221b1:	51                   	push   ecx
c00221b2:	53                   	push   ebx
c00221b3:	68 e1 a4 02 c0       	push   0xc002a4e1
c00221b8:	e8 e0 04 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00221bd:	83 c4 0c             	add    esp,0xc
c00221c0:	53                   	push   ebx
c00221c1:	55                   	push   ebp
c00221c2:	56                   	push   esi
c00221c3:	e8 a4 fe ff ff       	call   c002206c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00221c8:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00221cf:	e8 fc d2 fe ff       	call   c000f4d0 <malloc>
c00221d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00221d7:	89 c5                	mov    ebp,eax
c00221d9:	e8 de 0c 00 00       	call   c0022ebc <SATA::SATA()>
c00221de:	58                   	pop    eax
c00221df:	5a                   	pop    edx
c00221e0:	55                   	push   ebp
c00221e1:	56                   	push   esi
c00221e2:	e8 a5 18 ff ff       	call   c0013a8c <Device::addChild(Device*)>
c00221e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00221ea:	56                   	push   esi
c00221eb:	6a 00                	push   0x0
c00221ed:	53                   	push   ebx
c00221ee:	55                   	push   ebp
c00221ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00221f2:	83 c4 20             	add    esp,0x20
c00221f5:	eb 2f                	jmp    c0022226 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c00221f7:	83 f8 04             	cmp    eax,0x4
c00221fa:	75 1a                	jne    c0022216 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c00221fc:	52                   	push   edx
c00221fd:	52                   	push   edx
c00221fe:	53                   	push   ebx
c00221ff:	68 f8 a4 02 c0       	push   0xc002a4f8
c0022204:	e8 94 04 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0022209:	83 c4 0c             	add    esp,0xc
c002220c:	53                   	push   ebx
c002220d:	55                   	push   ebp
c002220e:	56                   	push   esi
c002220f:	e8 58 fe ff ff       	call   c002206c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022214:	eb 0d                	jmp    c0022223 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c0022216:	50                   	push   eax
c0022217:	50                   	push   eax
c0022218:	53                   	push   ebx
c0022219:	68 11 a5 02 c0       	push   0xc002a511
c002221e:	e8 7a 04 ff ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0022223:	83 c4 10             	add    esp,0x10
c0022226:	d1 ef                	shr    edi,1
c0022228:	43                   	inc    ebx
c0022229:	83 fb 20             	cmp    ebx,0x20
c002222c:	0f 85 54 ff ff ff    	jne    c0022186 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0022232:	83 c4 0c             	add    esp,0xc
c0022235:	5b                   	pop    ebx
c0022236:	5e                   	pop    esi
c0022237:	5f                   	pop    edi
c0022238:	5d                   	pop    ebp
c0022239:	c3                   	ret    

c002223a <SATABus::open(int, int, void*)>:
c002223a:	83 ec 14             	sub    esp,0x14
c002223d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022241:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0022247:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002224d:	52                   	push   edx
c002224e:	50                   	push   eax
c002224f:	e8 1e ff ff ff       	call   c0022172 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0022254:	31 c0                	xor    eax,eax
c0022256:	83 c4 1c             	add    esp,0x1c
c0022259:	c3                   	ret    

c002225a <ATA::close(int, int, void*)>:
c002225a:	83 ec 0c             	sub    esp,0xc
c002225d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022261:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022267:	85 c0                	test   eax,eax
c0022269:	74 0c                	je     c0022277 <ATA::close(int, int, void*)+0x1d>
c002226b:	83 ec 0c             	sub    esp,0xc
c002226e:	8b 10                	mov    edx,DWORD PTR [eax]
c0022270:	50                   	push   eax
c0022271:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022274:	83 c4 10             	add    esp,0x10
c0022277:	31 c0                	xor    eax,eax
c0022279:	83 c4 0c             	add    esp,0xc
c002227c:	c3                   	ret    
c002227d:	90                   	nop

c002227e <ATA::powerSaving(PowerSavingLevel)>:
c002227e:	c3                   	ret    
c002227f:	90                   	nop

c0022280 <ATA::ATA()>:
c0022280:	83 ec 0c             	sub    esp,0xc
c0022283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022287:	83 ec 04             	sub    esp,0x4
c002228a:	68 00 02 00 00       	push   0x200
c002228f:	68 24 a6 02 c0       	push   0xc002a624
c0022294:	50                   	push   eax
c0022295:	e8 02 1c ff ff       	call   c0013e9c <PhysicalDisk::PhysicalDisk(char const*, int)>
c002229a:	83 c4 10             	add    esp,0x10
c002229d:	ba 70 a5 02 c0       	mov    edx,0xc002a570
c00222a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a6:	89 10                	mov    DWORD PTR [eax],edx
c00222a8:	90                   	nop
c00222a9:	83 c4 0c             	add    esp,0xc
c00222ac:	c3                   	ret    
c00222ad:	90                   	nop

c00222ae <ATA::flush(bool)>:
c00222ae:	53                   	push   ebx
c00222af:	83 ec 08             	sub    esp,0x8
c00222b2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00222b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00222bb:	19 c0                	sbb    eax,eax
c00222bd:	83 e0 fd             	and    eax,0xfffffffd
c00222c0:	05 ea 00 00 00       	add    eax,0xea
c00222c5:	50                   	push   eax
c00222c6:	6a 07                	push   0x7
c00222c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00222cf:	50                   	push   eax
c00222d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00222d6:	e8 f3 ef ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00222db:	83 c4 0c             	add    esp,0xc
c00222de:	6a 00                	push   0x0
c00222e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00222e7:	50                   	push   eax
c00222e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00222ee:	e8 87 fb ff ff       	call   c0021e7a <IDE::polling(unsigned char, unsigned int)>
c00222f3:	83 c4 18             	add    esp,0x18
c00222f6:	5b                   	pop    ebx
c00222f7:	c3                   	ret    

c00222f8 <ATA::readyForCommand()>:
c00222f8:	56                   	push   esi
c00222f9:	53                   	push   ebx
c00222fa:	31 db                	xor    ebx,ebx
c00222fc:	50                   	push   eax
c00222fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022301:	50                   	push   eax
c0022302:	6a 0c                	push   0xc
c0022304:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002230b:	50                   	push   eax
c002230c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022312:	e8 77 f0 ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0022317:	83 c4 10             	add    esp,0x10
c002231a:	a8 88                	test   al,0x88
c002231c:	74 23                	je     c0022341 <ATA::readyForCommand()+0x49>
c002231e:	43                   	inc    ebx
c002231f:	83 fb 63             	cmp    ebx,0x63
c0022322:	7e dd                	jle    c0022301 <ATA::readyForCommand()+0x9>
c0022324:	51                   	push   ecx
c0022325:	51                   	push   ecx
c0022326:	6a 00                	push   0x0
c0022328:	68 40 42 0f 00       	push   0xf4240
c002232d:	e8 44 a4 ff ff       	call   c001c776 <nanoSleep(unsigned long long)>
c0022332:	83 c4 10             	add    esp,0x10
c0022335:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002233b:	75 c4                	jne    c0022301 <ATA::readyForCommand()+0x9>
c002233d:	31 c0                	xor    eax,eax
c002233f:	eb 02                	jmp    c0022343 <ATA::readyForCommand()+0x4b>
c0022341:	b0 01                	mov    al,0x1
c0022343:	5a                   	pop    edx
c0022344:	5b                   	pop    ebx
c0022345:	5e                   	pop    esi
c0022346:	c3                   	ret    
c0022347:	90                   	nop

c0022348 <ATA::access(unsigned long long, int, void*, bool)>:
c0022348:	55                   	push   ebp
c0022349:	57                   	push   edi
c002234a:	56                   	push   esi
c002234b:	53                   	push   ebx
c002234c:	83 ec 2c             	sub    esp,0x2c
c002234f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0022353:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022357:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002235b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002235f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0022363:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022367:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002236b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0022371:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022375:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002237b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002237f:	c1 e0 06             	shl    eax,0x6
c0022382:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002238a:	74 5d                	je     c00223e9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002238c:	89 fa                	mov    edx,edi
c002238e:	89 f0                	mov    eax,esi
c0022390:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0022394:	c1 ea 1c             	shr    edx,0x1c
c0022397:	89 d1                	mov    ecx,edx
c0022399:	09 c1                	or     ecx,eax
c002239b:	74 25                	je     c00223c2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002239d:	31 ed                	xor    ebp,ebp
c002239f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00223a6:	89 fa                	mov    edx,edi
c00223a8:	89 f0                	mov    eax,esi
c00223aa:	0f ad d0             	shrd   eax,edx,cl
c00223ad:	d3 ea                	shr    edx,cl
c00223af:	f6 c1 20             	test   cl,0x20
c00223b2:	74 02                	je     c00223b6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00223b4:	89 d0                	mov    eax,edx
c00223b6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00223ba:	45                   	inc    ebp
c00223bb:	83 fd 06             	cmp    ebp,0x6
c00223be:	75 df                	jne    c002239f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00223c0:	eb 76                	jmp    c0022438 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00223c2:	89 f0                	mov    eax,esi
c00223c4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00223c9:	89 fa                	mov    edx,edi
c00223cb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00223d2:	0f ac d0 10          	shrd   eax,edx,0x10
c00223d6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00223db:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00223df:	c1 ee 18             	shr    esi,0x18
c00223e2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00223e7:	eb 56                	jmp    c002243f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00223e9:	6a 00                	push   0x0
c00223eb:	6a 3f                	push   0x3f
c00223ed:	57                   	push   edi
c00223ee:	56                   	push   esi
c00223ef:	e8 38 24 00 00       	call   c002482c <__umoddi3>
c00223f4:	83 c4 10             	add    esp,0x10
c00223f7:	40                   	inc    eax
c00223f8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00223fc:	6a 00                	push   0x0
c00223fe:	68 f0 03 00 00       	push   0x3f0
c0022403:	57                   	push   edi
c0022404:	56                   	push   esi
c0022405:	e8 22 23 00 00       	call   c002472c <__udivdi3>
c002240a:	83 c4 10             	add    esp,0x10
c002240d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0022412:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0022419:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002241e:	6a 00                	push   0x0
c0022420:	6a 3f                	push   0x3f
c0022422:	57                   	push   edi
c0022423:	56                   	push   esi
c0022424:	e8 03 23 00 00       	call   c002472c <__udivdi3>
c0022429:	83 c4 10             	add    esp,0x10
c002242c:	89 c6                	mov    esi,eax
c002242e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0022433:	83 e6 0f             	and    esi,0xf
c0022436:	eb 07                	jmp    c002243f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0022438:	31 f6                	xor    esi,esi
c002243a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002243f:	bf 01 00 00 00       	mov    edi,0x1
c0022444:	50                   	push   eax
c0022445:	6a 00                	push   0x0
c0022447:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002244e:	50                   	push   eax
c002244f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022453:	e8 82 f0 ff ff       	call   c00214da <IDE::enableIRQs(unsigned char, bool)>
c0022458:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002245b:	e8 98 fe ff ff       	call   c00222f8 <ATA::readyForCommand()>
c0022460:	83 c4 10             	add    esp,0x10
c0022463:	84 c0                	test   al,al
c0022465:	0f 84 50 02 00 00    	je     c00226bb <ATA::access(unsigned long long, int, void*, bool)+0x373>
c002246b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0022471:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0022477:	c1 e0 04             	shl    eax,0x4
c002247a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0022481:	09 c6                	or     esi,eax
c0022483:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0022488:	75 05                	jne    c002248f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002248a:	83 ce a0             	or     esi,0xffffffa0
c002248d:	eb 03                	jmp    c0022492 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002248f:	83 ce e0             	or     esi,0xffffffe0
c0022492:	89 f0                	mov    eax,esi
c0022494:	0f b6 f0             	movzx  esi,al
c0022497:	56                   	push   esi
c0022498:	6a 06                	push   0x6
c002249a:	51                   	push   ecx
c002249b:	52                   	push   edx
c002249c:	e8 2d ee ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00224a1:	83 c4 10             	add    esp,0x10
c00224a4:	6a 00                	push   0x0
c00224a6:	6a 01                	push   0x1
c00224a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00224af:	50                   	push   eax
c00224b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00224b6:	e8 13 ee ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00224bb:	83 c4 10             	add    esp,0x10
c00224be:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00224c3:	75 6e                	jne    c0022533 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00224c5:	6a 00                	push   0x0
c00224c7:	6a 08                	push   0x8
c00224c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00224d0:	50                   	push   eax
c00224d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00224d7:	e8 f2 ed ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00224dc:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00224e1:	50                   	push   eax
c00224e2:	6a 09                	push   0x9
c00224e4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00224eb:	50                   	push   eax
c00224ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00224f2:	e8 d7 ed ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00224f7:	83 c4 20             	add    esp,0x20
c00224fa:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00224ff:	50                   	push   eax
c0022500:	6a 0a                	push   0xa
c0022502:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022509:	50                   	push   eax
c002250a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022510:	e8 b9 ed ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022515:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002251a:	50                   	push   eax
c002251b:	6a 0b                	push   0xb
c002251d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022524:	50                   	push   eax
c0022525:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002252b:	e8 9e ed ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022530:	83 c4 20             	add    esp,0x20
c0022533:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0022538:	50                   	push   eax
c0022539:	6a 02                	push   0x2
c002253b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022542:	50                   	push   eax
c0022543:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022549:	e8 80 ed ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002254e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0022553:	50                   	push   eax
c0022554:	6a 03                	push   0x3
c0022556:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002255d:	50                   	push   eax
c002255e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022564:	e8 65 ed ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022569:	83 c4 20             	add    esp,0x20
c002256c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0022571:	50                   	push   eax
c0022572:	6a 04                	push   0x4
c0022574:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002257b:	50                   	push   eax
c002257c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022582:	e8 47 ed ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022587:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002258c:	50                   	push   eax
c002258d:	6a 05                	push   0x5
c002258f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022596:	50                   	push   eax
c0022597:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002259d:	e8 2c ed ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00225a2:	83 c4 20             	add    esp,0x20
c00225a5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00225aa:	0f 94 c0             	sete   al
c00225ad:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00225b2:	74 09                	je     c00225bd <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00225b4:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00225bb:	eb 07                	jmp    c00225c4 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00225bd:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00225c4:	0f b6 c0             	movzx  eax,al
c00225c7:	50                   	push   eax
c00225c8:	6a 07                	push   0x7
c00225ca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00225d1:	50                   	push   eax
c00225d2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00225d8:	e8 f1 ec ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00225dd:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00225e1:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00225e5:	83 c4 10             	add    esp,0x10
c00225e8:	85 f6                	test   esi,esi
c00225ea:	0f 84 ac 00 00 00    	je     c002269c <ATA::access(unsigned long long, int, void*, bool)+0x354>
c00225f0:	50                   	push   eax
c00225f1:	6a 01                	push   0x1
c00225f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00225fa:	50                   	push   eax
c00225fb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022601:	e8 74 f8 ff ff       	call   c0021e7a <IDE::polling(unsigned char, unsigned int)>
c0022606:	83 c4 10             	add    esp,0x10
c0022609:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002260f:	84 c0                	test   al,al
c0022611:	74 20                	je     c0022633 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c0022613:	0f b6 f8             	movzx  edi,al
c0022616:	0f b6 d2             	movzx  edx,dl
c0022619:	57                   	push   edi
c002261a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0022621:	50                   	push   eax
c0022622:	52                   	push   edx
c0022623:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022629:	e8 b6 f6 ff ff       	call   c0021ce4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002262e:	e9 85 00 00 00       	jmp    c00226b8 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c0022633:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022638:	74 41                	je     c002267b <ATA::access(unsigned long long, int, void*, bool)+0x333>
c002263a:	31 c9                	xor    ecx,ecx
c002263c:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c0022640:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022644:	50                   	push   eax
c0022645:	50                   	push   eax
c0022646:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002264d:	50                   	push   eax
c002264e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022654:	e8 63 ec ff ff       	call   c00212bc <IDE::getBase(unsigned char)>
c0022659:	89 c2                	mov    edx,eax
c002265b:	89 e8                	mov    eax,ebp
c002265d:	66 ef                	out    dx,ax
c002265f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022663:	83 c4 10             	add    esp,0x10
c0022666:	41                   	inc    ecx
c0022667:	81 f9 00 01 00 00    	cmp    ecx,0x100
c002266d:	75 cd                	jne    c002263c <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c002266f:	4e                   	dec    esi
c0022670:	81 c7 00 02 00 00    	add    edi,0x200
c0022676:	e9 6d ff ff ff       	jmp    c00225e8 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c002267b:	0f b6 d2             	movzx  edx,dl
c002267e:	51                   	push   ecx
c002267f:	51                   	push   ecx
c0022680:	52                   	push   edx
c0022681:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022687:	e8 30 ec ff ff       	call   c00212bc <IDE::getBase(unsigned char)>
c002268c:	b9 00 01 00 00       	mov    ecx,0x100
c0022691:	89 c2                	mov    edx,eax
c0022693:	fc                   	cld    
c0022694:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0022697:	83 c4 10             	add    esp,0x10
c002269a:	eb d3                	jmp    c002266f <ATA::access(unsigned long long, int, void*, bool)+0x327>
c002269c:	31 ff                	xor    edi,edi
c002269e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00226a3:	74 16                	je     c00226bb <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00226a5:	50                   	push   eax
c00226a6:	50                   	push   eax
c00226a7:	31 c0                	xor    eax,eax
c00226a9:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00226ae:	0f 94 c0             	sete   al
c00226b1:	50                   	push   eax
c00226b2:	53                   	push   ebx
c00226b3:	e8 f6 fb ff ff       	call   c00222ae <ATA::flush(bool)>
c00226b8:	83 c4 10             	add    esp,0x10
c00226bb:	83 c4 2c             	add    esp,0x2c
c00226be:	89 f8                	mov    eax,edi
c00226c0:	5b                   	pop    ebx
c00226c1:	5e                   	pop    esi
c00226c2:	5f                   	pop    edi
c00226c3:	5d                   	pop    ebp
c00226c4:	c3                   	ret    
c00226c5:	90                   	nop

c00226c6 <ATA::read(unsigned long long, int, void*)>:
c00226c6:	57                   	push   edi
c00226c7:	b8 04 00 00 00       	mov    eax,0x4
c00226cc:	56                   	push   esi
c00226cd:	53                   	push   ebx
c00226ce:	83 ec 10             	sub    esp,0x10
c00226d1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00226d5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00226d9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00226dc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00226e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00226e4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00226ea:	77 3b                	ja     c0022727 <ATA::read(unsigned long long, int, void*)+0x61>
c00226ec:	b8 06 00 00 00       	mov    eax,0x6
c00226f1:	85 d2                	test   edx,edx
c00226f3:	74 32                	je     c0022727 <ATA::read(unsigned long long, int, void*)+0x61>
c00226f5:	50                   	push   eax
c00226f6:	50                   	push   eax
c00226f7:	6a 00                	push   0x0
c00226f9:	52                   	push   edx
c00226fa:	53                   	push   ebx
c00226fb:	57                   	push   edi
c00226fc:	56                   	push   esi
c00226fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022701:	e8 42 fc ff ff       	call   c0022348 <ATA::access(unsigned long long, int, void*, bool)>
c0022706:	83 c4 20             	add    esp,0x20
c0022709:	85 c0                	test   eax,eax
c002270b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002270f:	75 11                	jne    c0022722 <ATA::read(unsigned long long, int, void*)+0x5c>
c0022711:	01 1d c8 dd 02 c0    	add    DWORD PTR ds:0xc002ddc8,ebx
c0022717:	e8 ea dd fe ff       	call   c0010506 <VgaText::updateDiskUsage()>
c002271c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022720:	eb 05                	jmp    c0022727 <ATA::read(unsigned long long, int, void*)+0x61>
c0022722:	b8 01 00 00 00       	mov    eax,0x1
c0022727:	83 c4 10             	add    esp,0x10
c002272a:	5b                   	pop    ebx
c002272b:	5e                   	pop    esi
c002272c:	5f                   	pop    edi
c002272d:	c3                   	ret    

c002272e <ATA::write(unsigned long long, int, void*)>:
c002272e:	57                   	push   edi
c002272f:	b8 04 00 00 00       	mov    eax,0x4
c0022734:	56                   	push   esi
c0022735:	53                   	push   ebx
c0022736:	83 ec 10             	sub    esp,0x10
c0022739:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002273d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022741:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0022744:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022748:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002274c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0022752:	77 3b                	ja     c002278f <ATA::write(unsigned long long, int, void*)+0x61>
c0022754:	b8 06 00 00 00       	mov    eax,0x6
c0022759:	85 d2                	test   edx,edx
c002275b:	74 32                	je     c002278f <ATA::write(unsigned long long, int, void*)+0x61>
c002275d:	50                   	push   eax
c002275e:	50                   	push   eax
c002275f:	6a 01                	push   0x1
c0022761:	52                   	push   edx
c0022762:	53                   	push   ebx
c0022763:	57                   	push   edi
c0022764:	56                   	push   esi
c0022765:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022769:	e8 da fb ff ff       	call   c0022348 <ATA::access(unsigned long long, int, void*, bool)>
c002276e:	83 c4 20             	add    esp,0x20
c0022771:	85 c0                	test   eax,eax
c0022773:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022777:	75 11                	jne    c002278a <ATA::write(unsigned long long, int, void*)+0x5c>
c0022779:	01 1d c4 dd 02 c0    	add    DWORD PTR ds:0xc002ddc4,ebx
c002277f:	e8 82 dd fe ff       	call   c0010506 <VgaText::updateDiskUsage()>
c0022784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022788:	eb 05                	jmp    c002278f <ATA::write(unsigned long long, int, void*)+0x61>
c002278a:	b8 01 00 00 00       	mov    eax,0x1
c002278f:	83 c4 10             	add    esp,0x10
c0022792:	5b                   	pop    ebx
c0022793:	5e                   	pop    esi
c0022794:	5f                   	pop    edi
c0022795:	c3                   	ret    

c0022796 <ATA::detectCHS()>:
c0022796:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002279a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00227a0:	c1 e0 06             	shl    eax,0x6
c00227a3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00227a9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00227b3:	c7 44 24 04 54 a5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a554
c00227bb:	e9 21 6a ff ff       	jmp    c00191e1 <Krnl::panic(char const*)>

c00227c0 <ATA::open(int, int, void*)>:
c00227c0:	53                   	push   ebx
c00227c1:	83 ec 08             	sub    esp,0x8
c00227c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00227c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00227cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00227d0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00227d6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00227dc:	c1 e0 06             	shl    eax,0x6
c00227df:	01 d0                	add    eax,edx
c00227e1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00227e8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00227ee:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00227f5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00227ff:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0022805:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002280c:	75 0c                	jne    c002281a <ATA::open(int, int, void*)+0x5a>
c002280e:	83 ec 0c             	sub    esp,0xc
c0022811:	53                   	push   ebx
c0022812:	e8 7f ff ff ff       	call   c0022796 <ATA::detectCHS()>
c0022817:	83 c4 10             	add    esp,0x10
c002281a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0022820:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0022826:	c1 e0 06             	shl    eax,0x6
c0022829:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0022830:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002283a:	d1 e8                	shr    eax,1
c002283c:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0022842:	6a 04                	push   0x4
c0022844:	6a 0c                	push   0xc
c0022846:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002284d:	50                   	push   eax
c002284e:	52                   	push   edx
c002284f:	e8 7a ea ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022854:	90                   	nop
c0022855:	90                   	nop
c0022856:	6a 00                	push   0x0
c0022858:	6a 0c                	push   0xc
c002285a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022861:	50                   	push   eax
c0022862:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022868:	e8 61 ea ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002286d:	83 c4 14             	add    esp,0x14
c0022870:	53                   	push   ebx
c0022871:	e8 8e 16 ff ff       	call   c0013f04 <PhysicalDisk::startCache()>
c0022876:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022879:	e8 b0 36 ff ff       	call   c0015f2e <createPartitionsForDisk(PhysicalDisk*)>
c002287e:	31 c0                	xor    eax,eax
c0022880:	83 c4 18             	add    esp,0x18
c0022883:	5b                   	pop    ebx
c0022884:	c3                   	ret    
c0022885:	90                   	nop

c0022886 <ATAPI::write(unsigned long long, int, void*)>:
c0022886:	b8 03 00 00 00       	mov    eax,0x3
c002288b:	c3                   	ret    

c002288c <ATAPI::close(int, int, void*)>:
c002288c:	83 ec 0c             	sub    esp,0xc
c002288f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022893:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022899:	85 c0                	test   eax,eax
c002289b:	74 0c                	je     c00228a9 <ATAPI::close(int, int, void*)+0x1d>
c002289d:	83 ec 0c             	sub    esp,0xc
c00228a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00228a2:	50                   	push   eax
c00228a3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00228a6:	83 c4 10             	add    esp,0x10
c00228a9:	31 c0                	xor    eax,eax
c00228ab:	83 c4 0c             	add    esp,0xc
c00228ae:	c3                   	ret    
c00228af:	90                   	nop

c00228b0 <ATAPI::ATAPI()>:
c00228b0:	83 ec 0c             	sub    esp,0xc
c00228b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228b7:	83 ec 04             	sub    esp,0x4
c00228ba:	68 00 08 00 00       	push   0x800
c00228bf:	68 9c a5 02 c0       	push   0xc002a59c
c00228c4:	50                   	push   eax
c00228c5:	e8 d2 15 ff ff       	call   c0013e9c <PhysicalDisk::PhysicalDisk(char const*, int)>
c00228ca:	83 c4 10             	add    esp,0x10
c00228cd:	ba dc a5 02 c0       	mov    edx,0xc002a5dc
c00228d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d6:	89 10                	mov    DWORD PTR [eax],edx
c00228d8:	90                   	nop
c00228d9:	83 c4 0c             	add    esp,0xc
c00228dc:	c3                   	ret    
c00228dd:	90                   	nop

c00228de <ATAPI::readyForCommand()>:
c00228de:	56                   	push   esi
c00228df:	53                   	push   ebx
c00228e0:	31 db                	xor    ebx,ebx
c00228e2:	50                   	push   eax
c00228e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00228e7:	50                   	push   eax
c00228e8:	6a 0c                	push   0xc
c00228ea:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00228f1:	50                   	push   eax
c00228f2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00228f8:	e8 91 ea ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c00228fd:	83 c4 10             	add    esp,0x10
c0022900:	a8 88                	test   al,0x88
c0022902:	74 23                	je     c0022927 <ATAPI::readyForCommand()+0x49>
c0022904:	43                   	inc    ebx
c0022905:	83 fb 63             	cmp    ebx,0x63
c0022908:	7e dd                	jle    c00228e7 <ATAPI::readyForCommand()+0x9>
c002290a:	51                   	push   ecx
c002290b:	51                   	push   ecx
c002290c:	6a 00                	push   0x0
c002290e:	68 40 42 0f 00       	push   0xf4240
c0022913:	e8 5e 9e ff ff       	call   c001c776 <nanoSleep(unsigned long long)>
c0022918:	83 c4 10             	add    esp,0x10
c002291b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0022921:	75 c4                	jne    c00228e7 <ATAPI::readyForCommand()+0x9>
c0022923:	31 c0                	xor    eax,eax
c0022925:	eb 02                	jmp    c0022929 <ATAPI::readyForCommand()+0x4b>
c0022927:	b0 01                	mov    al,0x1
c0022929:	5a                   	pop    edx
c002292a:	5b                   	pop    ebx
c002292b:	5e                   	pop    esi
c002292c:	c3                   	ret    
c002292d:	90                   	nop

c002292e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002292e:	55                   	push   ebp
c002292f:	57                   	push   edi
c0022930:	56                   	push   esi
c0022931:	53                   	push   ebx
c0022932:	83 ec 20             	sub    esp,0x20
c0022935:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022939:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002293d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022941:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022945:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022949:	6a 01                	push   0x1
c002294b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022952:	50                   	push   eax
c0022953:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022959:	e8 7c eb ff ff       	call   c00214da <IDE::enableIRQs(unsigned char, bool)>
c002295e:	5e                   	pop    esi
c002295f:	58                   	pop    eax
c0022960:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022967:	50                   	push   eax
c0022968:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002296e:	e8 35 e9 ff ff       	call   c00212a8 <IDE::prepareInterrupt(unsigned char)>
c0022973:	89 3c 24             	mov    DWORD PTR [esp],edi
c0022976:	e8 63 ff ff ff       	call   c00228de <ATAPI::readyForCommand()>
c002297b:	83 c4 10             	add    esp,0x10
c002297e:	84 c0                	test   al,al
c0022980:	75 0a                	jne    c002298c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0022982:	bb 01 00 00 00       	mov    ebx,0x1
c0022987:	e9 57 02 00 00       	jmp    c0022be3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002298c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0022992:	c1 e0 04             	shl    eax,0x4
c0022995:	0f b6 c0             	movzx  eax,al
c0022998:	50                   	push   eax
c0022999:	6a 06                	push   0x6
c002299b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00229a2:	50                   	push   eax
c00229a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00229a9:	e8 20 e9 ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00229ae:	6a 00                	push   0x0
c00229b0:	6a 01                	push   0x1
c00229b2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00229b9:	50                   	push   eax
c00229ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00229c0:	e8 09 e9 ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00229c5:	83 c4 20             	add    esp,0x20
c00229c8:	0f b6 c3             	movzx  eax,bl
c00229cb:	0f b6 df             	movzx  ebx,bh
c00229ce:	50                   	push   eax
c00229cf:	6a 04                	push   0x4
c00229d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00229d8:	50                   	push   eax
c00229d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00229df:	e8 ea e8 ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00229e4:	53                   	push   ebx
c00229e5:	6a 05                	push   0x5
c00229e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00229ee:	50                   	push   eax
c00229ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00229f5:	e8 d4 e8 ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00229fa:	83 c4 20             	add    esp,0x20
c00229fd:	68 a0 00 00 00       	push   0xa0
c0022a02:	6a 07                	push   0x7
c0022a04:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022a0b:	50                   	push   eax
c0022a0c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022a12:	e8 b7 e8 ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a17:	83 c4 0c             	add    esp,0xc
c0022a1a:	6a 01                	push   0x1
c0022a1c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022a23:	50                   	push   eax
c0022a24:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022a2a:	e8 4b f4 ff ff       	call   c0021e7a <IDE::polling(unsigned char, unsigned int)>
c0022a2f:	83 c4 10             	add    esp,0x10
c0022a32:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0022a38:	84 c0                	test   al,al
c0022a3a:	74 23                	je     c0022a5f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0022a3c:	0f b6 d8             	movzx  ebx,al
c0022a3f:	0f b6 d2             	movzx  edx,dl
c0022a42:	53                   	push   ebx
c0022a43:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0022a4a:	50                   	push   eax
c0022a4b:	52                   	push   edx
c0022a4c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022a52:	e8 8d f2 ff ff       	call   c0021ce4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0022a57:	83 c4 10             	add    esp,0x10
c0022a5a:	e9 84 01 00 00       	jmp    c0022be3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0022a5f:	0f b6 d2             	movzx  edx,dl
c0022a62:	53                   	push   ebx
c0022a63:	53                   	push   ebx
c0022a64:	52                   	push   edx
c0022a65:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022a6b:	e8 4c e8 ff ff       	call   c00212bc <IDE::getBase(unsigned char)>
c0022a70:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0022a74:	b9 06 00 00 00       	mov    ecx,0x6
c0022a79:	89 c2                	mov    edx,eax
c0022a7b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0022a7e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022a82:	83 c4 10             	add    esp,0x10
c0022a85:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0022a8b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022a92:	85 db                	test   ebx,ebx
c0022a94:	0f 84 ec 00 00 00    	je     c0022b86 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0022a9a:	51                   	push   ecx
c0022a9b:	51                   	push   ecx
c0022a9c:	52                   	push   edx
c0022a9d:	50                   	push   eax
c0022a9e:	e8 99 e9 ff ff       	call   c002143c <IDE::waitInterrupt(unsigned char)>
c0022aa3:	83 c4 10             	add    esp,0x10
c0022aa6:	84 c0                	test   al,al
c0022aa8:	0f 84 d4 fe ff ff    	je     c0022982 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0022aae:	56                   	push   esi
c0022aaf:	56                   	push   esi
c0022ab0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022ab7:	50                   	push   eax
c0022ab8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022abe:	e8 e5 e7 ff ff       	call   c00212a8 <IDE::prepareInterrupt(unsigned char)>
c0022ac3:	83 c4 0c             	add    esp,0xc
c0022ac6:	6a 04                	push   0x4
c0022ac8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022acf:	50                   	push   eax
c0022ad0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022ad6:	e8 b3 e8 ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0022adb:	83 c4 0c             	add    esp,0xc
c0022ade:	89 c6                	mov    esi,eax
c0022ae0:	6a 05                	push   0x5
c0022ae2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022ae9:	50                   	push   eax
c0022aea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022af0:	e8 99 e8 ff ff       	call   c002138e <IDE::read(unsigned char, unsigned char)>
c0022af5:	89 f1                	mov    ecx,esi
c0022af7:	0f b6 c0             	movzx  eax,al
c0022afa:	0f b6 f1             	movzx  esi,cl
c0022afd:	c1 e0 08             	shl    eax,0x8
c0022b00:	09 c6                	or     esi,eax
c0022b02:	d1 fe                	sar    esi,1
c0022b04:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0022b08:	83 c4 10             	add    esp,0x10
c0022b0b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0022b10:	74 41                	je     c0022b53 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0022b12:	31 c9                	xor    ecx,ecx
c0022b14:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0022b1a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022b21:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0022b25:	75 0a                	jne    c0022b31 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0022b27:	01 c9                	add    ecx,ecx
c0022b29:	01 cd                	add    ebp,ecx
c0022b2b:	4b                   	dec    ebx
c0022b2c:	e9 54 ff ff ff       	jmp    c0022a85 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0022b31:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0022b36:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022b3a:	51                   	push   ecx
c0022b3b:	51                   	push   ecx
c0022b3c:	52                   	push   edx
c0022b3d:	50                   	push   eax
c0022b3e:	e8 79 e7 ff ff       	call   c00212bc <IDE::getBase(unsigned char)>
c0022b43:	89 c2                	mov    edx,eax
c0022b45:	89 f0                	mov    eax,esi
c0022b47:	66 ef                	out    dx,ax
c0022b49:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022b4d:	83 c4 10             	add    esp,0x10
c0022b50:	41                   	inc    ecx
c0022b51:	eb c1                	jmp    c0022b14 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0022b53:	31 f6                	xor    esi,esi
c0022b55:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0022b5b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022b62:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0022b66:	75 06                	jne    c0022b6e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0022b68:	01 f6                	add    esi,esi
c0022b6a:	01 f5                	add    ebp,esi
c0022b6c:	eb bd                	jmp    c0022b2b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0022b6e:	51                   	push   ecx
c0022b6f:	51                   	push   ecx
c0022b70:	52                   	push   edx
c0022b71:	50                   	push   eax
c0022b72:	e8 45 e7 ff ff       	call   c00212bc <IDE::getBase(unsigned char)>
c0022b77:	89 c2                	mov    edx,eax
c0022b79:	66 ed                	in     ax,dx
c0022b7b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0022b80:	83 c4 10             	add    esp,0x10
c0022b83:	46                   	inc    esi
c0022b84:	eb cf                	jmp    c0022b55 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0022b86:	51                   	push   ecx
c0022b87:	51                   	push   ecx
c0022b88:	52                   	push   edx
c0022b89:	50                   	push   eax
c0022b8a:	e8 ad e8 ff ff       	call   c002143c <IDE::waitInterrupt(unsigned char)>
c0022b8f:	83 c4 10             	add    esp,0x10
c0022b92:	84 c0                	test   al,al
c0022b94:	0f 84 e8 fd ff ff    	je     c0022982 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0022b9a:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022b9f:	52                   	push   edx
c0022ba0:	52                   	push   edx
c0022ba1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022ba8:	50                   	push   eax
c0022ba9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022baf:	e8 f4 e6 ff ff       	call   c00212a8 <IDE::prepareInterrupt(unsigned char)>
c0022bb4:	83 c4 10             	add    esp,0x10
c0022bb7:	50                   	push   eax
c0022bb8:	50                   	push   eax
c0022bb9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022bc0:	50                   	push   eax
c0022bc1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022bc7:	e8 f0 e6 ff ff       	call   c00212bc <IDE::getBase(unsigned char)>
c0022bcc:	8d 50 07             	lea    edx,[eax+0x7]
c0022bcf:	ec                   	in     al,dx
c0022bd0:	83 c4 10             	add    esp,0x10
c0022bd3:	a8 88                	test   al,0x88
c0022bd5:	74 0a                	je     c0022be1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0022bd7:	4b                   	dec    ebx
c0022bd8:	75 dd                	jne    c0022bb7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0022bda:	bb 02 00 00 00       	mov    ebx,0x2
c0022bdf:	eb 02                	jmp    c0022be3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0022be1:	31 db                	xor    ebx,ebx
c0022be3:	83 c4 1c             	add    esp,0x1c
c0022be6:	89 d8                	mov    eax,ebx
c0022be8:	5b                   	pop    ebx
c0022be9:	5e                   	pop    esi
c0022bea:	5f                   	pop    edi
c0022beb:	5d                   	pop    ebp
c0022bec:	c3                   	ret    
c0022bed:	90                   	nop

c0022bee <ATAPI::diskRemoved()>:
c0022bee:	83 ec 18             	sub    esp,0x18
c0022bf1:	68 a7 a5 02 c0       	push   0xc002a5a7
c0022bf6:	e8 a2 fa fe ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0022bfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bff:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0022c06:	83 c4 1c             	add    esp,0x1c
c0022c09:	c3                   	ret    

c0022c0a <ATAPI::eject()>:
c0022c0a:	57                   	push   edi
c0022c0b:	b9 03 00 00 00       	mov    ecx,0x3
c0022c10:	53                   	push   ebx
c0022c11:	83 ec 14             	sub    esp,0x14
c0022c14:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022c18:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022c1c:	fc                   	cld    
c0022c1d:	31 c0                	xor    eax,eax
c0022c1f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0022c21:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0022c26:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0022c2b:	50                   	push   eax
c0022c2c:	50                   	push   eax
c0022c2d:	6a 00                	push   0x0
c0022c2f:	6a 00                	push   0x0
c0022c31:	6a 00                	push   0x0
c0022c33:	6a 02                	push   0x2
c0022c35:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022c39:	50                   	push   eax
c0022c3a:	53                   	push   ebx
c0022c3b:	e8 ee fc ff ff       	call   c002292e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022c40:	83 c4 14             	add    esp,0x14
c0022c43:	53                   	push   ebx
c0022c44:	e8 a5 ff ff ff       	call   c0022bee <ATAPI::diskRemoved()>
c0022c49:	83 c4 24             	add    esp,0x24
c0022c4c:	5b                   	pop    ebx
c0022c4d:	5f                   	pop    edi
c0022c4e:	c3                   	ret    
c0022c4f:	90                   	nop

c0022c50 <ATAPI::diskInserted()>:
c0022c50:	53                   	push   ebx
c0022c51:	83 ec 14             	sub    esp,0x14
c0022c54:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022c58:	68 bd a5 02 c0       	push   0xc002a5bd
c0022c5d:	e8 3b fa fe ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0022c62:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0022c69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022c6c:	e8 93 12 ff ff       	call   c0013f04 <PhysicalDisk::startCache()>
c0022c71:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0022c75:	83 c4 18             	add    esp,0x18
c0022c78:	5b                   	pop    ebx
c0022c79:	e9 b0 32 ff ff       	jmp    c0015f2e <createPartitionsForDisk(PhysicalDisk*)>

c0022c7e <ATAPI::detectMedia()>:
c0022c7e:	56                   	push   esi
c0022c7f:	53                   	push   ebx
c0022c80:	83 ec 28             	sub    esp,0x28
c0022c83:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022c87:	6a 0c                	push   0xc
c0022c89:	6a 00                	push   0x0
c0022c8b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0022c8f:	56                   	push   esi
c0022c90:	e8 f6 d9 fd ff       	call   c000068b <memset>
c0022c95:	58                   	pop    eax
c0022c96:	5a                   	pop    edx
c0022c97:	6a 00                	push   0x0
c0022c99:	6a 00                	push   0x0
c0022c9b:	6a 00                	push   0x0
c0022c9d:	6a 00                	push   0x0
c0022c9f:	56                   	push   esi
c0022ca0:	53                   	push   ebx
c0022ca1:	e8 88 fc ff ff       	call   c002292e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022ca6:	83 c4 1c             	add    esp,0x1c
c0022ca9:	6a 0c                	push   0xc
c0022cab:	6a 00                	push   0x0
c0022cad:	56                   	push   esi
c0022cae:	e8 d8 d9 fd ff       	call   c000068b <memset>
c0022cb3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0022cb8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0022cbd:	59                   	pop    ecx
c0022cbe:	58                   	pop    eax
c0022cbf:	6a 01                	push   0x1
c0022cc1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0022cc5:	50                   	push   eax
c0022cc6:	6a 00                	push   0x0
c0022cc8:	6a 12                	push   0x12
c0022cca:	56                   	push   esi
c0022ccb:	53                   	push   ebx
c0022ccc:	e8 5d fc ff ff       	call   c002292e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022cd1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0022cd5:	83 c4 20             	add    esp,0x20
c0022cd8:	83 e0 7f             	and    eax,0x7f
c0022cdb:	3c 70                	cmp    al,0x70
c0022cdd:	74 15                	je     c0022cf4 <ATAPI::detectMedia()+0x76>
c0022cdf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022ce6:	75 0c                	jne    c0022cf4 <ATAPI::detectMedia()+0x76>
c0022ce8:	83 ec 0c             	sub    esp,0xc
c0022ceb:	53                   	push   ebx
c0022cec:	e8 5f ff ff ff       	call   c0022c50 <ATAPI::diskInserted()>
c0022cf1:	83 c4 10             	add    esp,0x10
c0022cf4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022cf8:	83 e0 0f             	and    eax,0xf
c0022cfb:	3c 02                	cmp    al,0x2
c0022cfd:	75 1b                	jne    c0022d1a <ATAPI::detectMedia()+0x9c>
c0022cff:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0022d04:	75 2d                	jne    c0022d33 <ATAPI::detectMedia()+0xb5>
c0022d06:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022d0d:	74 24                	je     c0022d33 <ATAPI::detectMedia()+0xb5>
c0022d0f:	83 ec 0c             	sub    esp,0xc
c0022d12:	53                   	push   ebx
c0022d13:	e8 d6 fe ff ff       	call   c0022bee <ATAPI::diskRemoved()>
c0022d18:	eb 16                	jmp    c0022d30 <ATAPI::detectMedia()+0xb2>
c0022d1a:	84 c0                	test   al,al
c0022d1c:	75 15                	jne    c0022d33 <ATAPI::detectMedia()+0xb5>
c0022d1e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022d25:	75 0c                	jne    c0022d33 <ATAPI::detectMedia()+0xb5>
c0022d27:	83 ec 0c             	sub    esp,0xc
c0022d2a:	53                   	push   ebx
c0022d2b:	e8 20 ff ff ff       	call   c0022c50 <ATAPI::diskInserted()>
c0022d30:	83 c4 10             	add    esp,0x10
c0022d33:	83 c4 24             	add    esp,0x24
c0022d36:	5b                   	pop    ebx
c0022d37:	5e                   	pop    esi
c0022d38:	c3                   	ret    
c0022d39:	90                   	nop

c0022d3a <ATAPI::open(int, int, void*)>:
c0022d3a:	53                   	push   ebx
c0022d3b:	83 ec 08             	sub    esp,0x8
c0022d3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022d42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022d46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022d4a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0022d50:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0022d56:	c1 e0 06             	shl    eax,0x6
c0022d59:	01 d0                	add    eax,edx
c0022d5b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0022d62:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0022d68:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0022d6f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0022d79:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0022d7f:	6a 04                	push   0x4
c0022d81:	6a 0c                	push   0xc
c0022d83:	51                   	push   ecx
c0022d84:	52                   	push   edx
c0022d85:	e8 44 e5 ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d8a:	90                   	nop
c0022d8b:	90                   	nop
c0022d8c:	6a 00                	push   0x0
c0022d8e:	6a 0c                	push   0xc
c0022d90:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022d97:	50                   	push   eax
c0022d98:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022d9e:	e8 2b e5 ff ff       	call   c00212ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022da3:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0022daa:	83 c4 14             	add    esp,0x14
c0022dad:	53                   	push   ebx
c0022dae:	e8 cb fe ff ff       	call   c0022c7e <ATAPI::detectMedia()>
c0022db3:	31 c0                	xor    eax,eax
c0022db5:	83 c4 18             	add    esp,0x18
c0022db8:	5b                   	pop    ebx
c0022db9:	c3                   	ret    

c0022dba <ATAPI::read(unsigned long long, int, void*)>:
c0022dba:	55                   	push   ebp
c0022dbb:	57                   	push   edi
c0022dbc:	56                   	push   esi
c0022dbd:	53                   	push   ebx
c0022dbe:	83 ec 1c             	sub    esp,0x1c
c0022dc1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022dc5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022dc9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0022dcd:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0022dd4:	74 41                	je     c0022e17 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0022dd6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022dda:	b9 03 00 00 00       	mov    ecx,0x3
c0022ddf:	fc                   	cld    
c0022de0:	31 c0                	xor    eax,eax
c0022de2:	86 fb                	xchg   bl,bh
c0022de4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0022de6:	c1 c3 10             	rol    ebx,0x10
c0022de9:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0022dee:	89 e8                	mov    eax,ebp
c0022df0:	86 fb                	xchg   bl,bh
c0022df2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022df6:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0022dfa:	50                   	push   eax
c0022dfb:	50                   	push   eax
c0022dfc:	55                   	push   ebp
c0022dfd:	c1 e5 0b             	shl    ebp,0xb
c0022e00:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022e04:	6a 00                	push   0x0
c0022e06:	55                   	push   ebp
c0022e07:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022e0b:	50                   	push   eax
c0022e0c:	56                   	push   esi
c0022e0d:	e8 1c fb ff ff       	call   c002292e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022e12:	83 c4 20             	add    esp,0x20
c0022e15:	eb 1a                	jmp    c0022e31 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0022e17:	83 ec 0c             	sub    esp,0xc
c0022e1a:	56                   	push   esi
c0022e1b:	e8 5e fe ff ff       	call   c0022c7e <ATAPI::detectMedia()>
c0022e20:	83 c4 10             	add    esp,0x10
c0022e23:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0022e2a:	75 aa                	jne    c0022dd6 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0022e2c:	b8 02 00 00 00       	mov    eax,0x2
c0022e31:	83 c4 1c             	add    esp,0x1c
c0022e34:	5b                   	pop    ebx
c0022e35:	5e                   	pop    esi
c0022e36:	5f                   	pop    edi
c0022e37:	5d                   	pop    ebp
c0022e38:	c3                   	ret    
c0022e39:	90                   	nop

c0022e3a <SATA::close(int, int, void*)>:
c0022e3a:	83 ec 0c             	sub    esp,0xc
c0022e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e41:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022e47:	85 c0                	test   eax,eax
c0022e49:	74 0c                	je     c0022e57 <SATA::close(int, int, void*)+0x1d>
c0022e4b:	83 ec 0c             	sub    esp,0xc
c0022e4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0022e50:	50                   	push   eax
c0022e51:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022e54:	83 c4 10             	add    esp,0x10
c0022e57:	31 c0                	xor    eax,eax
c0022e59:	83 c4 0c             	add    esp,0xc
c0022e5c:	c3                   	ret    
c0022e5d:	90                   	nop

c0022e5e <SATA::powerSaving(PowerSavingLevel)>:
c0022e5e:	c3                   	ret    
c0022e5f:	90                   	nop

c0022e60 <SATA::open(int, int, void*)>:
c0022e60:	53                   	push   ebx
c0022e61:	83 ec 14             	sub    esp,0x14
c0022e64:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022e68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0022e6c:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0022e76:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0022e7c:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0022e86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e8a:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0022e94:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0022e9a:	68 08 a6 02 c0       	push   0xc002a608
c0022e9f:	e8 f9 f7 fe ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0022ea4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022ea7:	e8 58 10 ff ff       	call   c0013f04 <PhysicalDisk::startCache()>
c0022eac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022eaf:	e8 7a 30 ff ff       	call   c0015f2e <createPartitionsForDisk(PhysicalDisk*)>
c0022eb4:	31 c0                	xor    eax,eax
c0022eb6:	83 c4 18             	add    esp,0x18
c0022eb9:	5b                   	pop    ebx
c0022eba:	c3                   	ret    
c0022ebb:	90                   	nop

c0022ebc <SATA::SATA()>:
c0022ebc:	83 ec 0c             	sub    esp,0xc
c0022ebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ec3:	83 ec 04             	sub    esp,0x4
c0022ec6:	68 00 02 00 00       	push   0x200
c0022ecb:	68 23 a6 02 c0       	push   0xc002a623
c0022ed0:	50                   	push   eax
c0022ed1:	e8 c6 0f ff ff       	call   c0013e9c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022ed6:	83 c4 10             	add    esp,0x10
c0022ed9:	ba 00 a7 02 c0       	mov    edx,0xc002a700
c0022ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ee2:	89 10                	mov    DWORD PTR [eax],edx
c0022ee4:	90                   	nop
c0022ee5:	83 c4 0c             	add    esp,0xc
c0022ee8:	c3                   	ret    
c0022ee9:	90                   	nop

c0022eea <SATA::access(unsigned long long, int, void*, bool)>:
c0022eea:	55                   	push   ebp
c0022eeb:	57                   	push   edi
c0022eec:	56                   	push   esi
c0022eed:	53                   	push   ebx
c0022eee:	81 ec 2c 04 00 00    	sub    esp,0x42c
c0022ef4:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0022efb:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c0022f02:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c0022f09:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c0022f10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022f14:	83 ff 08             	cmp    edi,0x8
c0022f17:	7e 10                	jle    c0022f29 <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c0022f19:	83 ec 0c             	sub    esp,0xc
c0022f1c:	68 33 a6 02 c0       	push   0xc002a633
c0022f21:	e8 bb 62 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c0022f26:	83 c4 10             	add    esp,0x10
c0022f29:	51                   	push   ecx
c0022f2a:	68 00 02 00 00       	push   0x200
c0022f2f:	68 ee 00 00 00       	push   0xee
c0022f34:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0022f38:	55                   	push   ebp
c0022f39:	e8 4d d7 fd ff       	call   c000068b <memset>
c0022f3e:	83 c4 0c             	add    esp,0xc
c0022f41:	68 00 02 00 00       	push   0x200
c0022f46:	68 ee 00 00 00       	push   0xee
c0022f4b:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c0022f52:	50                   	push   eax
c0022f53:	e8 33 d7 fd ff       	call   c000068b <memset>
c0022f58:	55                   	push   ebp
c0022f59:	57                   	push   edi
c0022f5a:	56                   	push   esi
c0022f5b:	68 65 a6 02 c0       	push   0xc002a665
c0022f60:	e8 38 f7 fe ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0022f65:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0022f6b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022f71:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022f75:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0022f7b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022f7f:	c1 e0 07             	shl    eax,0x7
c0022f82:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c0022f86:	83 c4 18             	add    esp,0x18
c0022f89:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0022f93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022f97:	8d 50 02             	lea    edx,[eax+0x2]
c0022f9a:	c1 e2 07             	shl    edx,0x7
c0022f9d:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c0022fa1:	52                   	push   edx
c0022fa2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022fa6:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0022fac:	e8 e1 ef ff ff       	call   c0021f92 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0022fb1:	89 c1                	mov    ecx,eax
c0022fb3:	58                   	pop    eax
c0022fb4:	5a                   	pop    edx
c0022fb5:	51                   	push   ecx
c0022fb6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0022fba:	68 9a a6 02 c0       	push   0xc002a69a
c0022fbf:	e8 d9 f6 fe ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0022fc4:	83 c4 10             	add    esp,0x10
c0022fc7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022fcb:	83 f9 ff             	cmp    ecx,0xffffffff
c0022fce:	0f 84 9a 01 00 00    	je     c002316e <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0022fd4:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0022fda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022fde:	8b 12                	mov    edx,DWORD PTR [edx]
c0022fe0:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c0022fe6:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c0022fec:	89 c8                	mov    eax,ecx
c0022fee:	c1 e0 05             	shl    eax,0x5
c0022ff1:	01 c2                	add    edx,eax
c0022ff3:	8a 02                	mov    al,BYTE PTR [edx]
c0022ff5:	83 e0 a0             	and    eax,0xffffffa0
c0022ff8:	83 c8 05             	or     eax,0x5
c0022ffb:	88 02                	mov    BYTE PTR [edx],al
c0022ffd:	8d 47 ff             	lea    eax,[edi-0x1]
c0023000:	c1 f8 04             	sar    eax,0x4
c0023003:	40                   	inc    eax
c0023004:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0023008:	0f b7 c0             	movzx  eax,ax
c002300b:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c0023011:	83 c0 08             	add    eax,0x8
c0023014:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c002301a:	c1 e0 04             	shl    eax,0x4
c002301d:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c0023023:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c0023026:	01 cb                	add    ebx,ecx
c0023028:	52                   	push   edx
c0023029:	50                   	push   eax
c002302a:	6a 00                	push   0x0
c002302c:	53                   	push   ebx
c002302d:	e8 59 d6 fd ff       	call   c000068b <memset>
c0023032:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0023038:	83 c4 10             	add    esp,0x10
c002303b:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c0023041:	25 00 00 c0 7f       	and    eax,0x7fc00000
c0023046:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c002304d:	0d ff 01 00 80       	or     eax,0x800001ff
c0023052:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023056:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002305c:	b8 01 00 00 00       	mov    eax,0x1
c0023061:	89 c2                	mov    edx,eax
c0023063:	c1 e2 04             	shl    edx,0x4
c0023066:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c002306d:	8d 50 08             	lea    edx,[eax+0x8]
c0023070:	40                   	inc    eax
c0023071:	c1 e2 04             	shl    edx,0x4
c0023074:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c002307c:	83 f8 10             	cmp    eax,0x10
c002307f:	75 e0                	jne    c0023061 <SATA::access(unsigned long long, int, void*, bool)+0x177>
c0023081:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0023084:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c0023088:	66 25 00 7f          	and    ax,0x7f00
c002308c:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c0023090:	66 0d 27 80          	or     ax,0x8027
c0023094:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0023098:	66 89 03             	mov    WORD PTR [ebx],ax
c002309b:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c002309f:	89 f0                	mov    eax,esi
c00230a1:	31 d2                	xor    edx,edx
c00230a3:	c1 e8 10             	shr    eax,0x10
c00230a6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00230a9:	89 f0                	mov    eax,esi
c00230ab:	c1 e8 18             	shr    eax,0x18
c00230ae:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00230b1:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c00230b5:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00230b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00230bc:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00230bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230c3:	c1 e0 07             	shl    eax,0x7
c00230c6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00230ca:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c00230d0:	80 e3 88             	and    bl,0x88
c00230d3:	74 0b                	je     c00230e0 <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c00230d5:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c00230db:	74 0b                	je     c00230e8 <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c00230dd:	42                   	inc    edx
c00230de:	eb ea                	jmp    c00230ca <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c00230e0:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c00230e6:	75 0a                	jne    c00230f2 <SATA::access(unsigned long long, int, void*, bool)+0x208>
c00230e8:	83 ec 0c             	sub    esp,0xc
c00230eb:	68 a3 a6 02 c0       	push   0xc002a6a3
c00230f0:	eb 60                	jmp    c0023152 <SATA::access(unsigned long long, int, void*, bool)+0x268>
c00230f2:	be 01 00 00 00       	mov    esi,0x1
c00230f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00230fb:	d3 e6                	shl    esi,cl
c00230fd:	c1 e3 07             	shl    ebx,0x7
c0023100:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0023106:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c002310a:	83 ec 0c             	sub    esp,0xc
c002310d:	68 b1 a6 02 c0       	push   0xc002a6b1
c0023112:	e8 86 f5 fe ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0023117:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c002311d:	83 c4 10             	add    esp,0x10
c0023120:	85 c6                	test   esi,eax
c0023122:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0023128:	74 1a                	je     c0023144 <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c002312a:	0f ba e0 1e          	bt     eax,0x1e
c002312e:	73 da                	jae    c002310a <SATA::access(unsigned long long, int, void*, bool)+0x220>
c0023130:	83 ec 0c             	sub    esp,0xc
c0023133:	68 be a6 02 c0       	push   0xc002a6be
c0023138:	e8 a4 60 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c002313d:	83 c4 10             	add    esp,0x10
c0023140:	31 c0                	xor    eax,eax
c0023142:	eb 2f                	jmp    c0023173 <SATA::access(unsigned long long, int, void*, bool)+0x289>
c0023144:	0f ba e0 1e          	bt     eax,0x1e
c0023148:	73 12                	jae    c002315c <SATA::access(unsigned long long, int, void*, bool)+0x272>
c002314a:	83 ec 0c             	sub    esp,0xc
c002314d:	68 be a6 02 c0       	push   0xc002a6be
c0023152:	e8 8a 60 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c0023157:	83 c4 10             	add    esp,0x10
c002315a:	eb 12                	jmp    c002316e <SATA::access(unsigned long long, int, void*, bool)+0x284>
c002315c:	83 ec 0c             	sub    esp,0xc
c002315f:	68 cf a6 02 c0       	push   0xc002a6cf
c0023164:	e8 78 60 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c0023169:	83 c4 10             	add    esp,0x10
c002316c:	eb fe                	jmp    c002316c <SATA::access(unsigned long long, int, void*, bool)+0x282>
c002316e:	b8 01 00 00 00       	mov    eax,0x1
c0023173:	81 c4 2c 04 00 00    	add    esp,0x42c
c0023179:	5b                   	pop    ebx
c002317a:	5e                   	pop    esi
c002317b:	5f                   	pop    edi
c002317c:	5d                   	pop    ebp
c002317d:	c3                   	ret    

c002317e <SATA::read(unsigned long long, int, void*)>:
c002317e:	57                   	push   edi
c002317f:	b8 04 00 00 00       	mov    eax,0x4
c0023184:	56                   	push   esi
c0023185:	53                   	push   ebx
c0023186:	83 ec 10             	sub    esp,0x10
c0023189:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002318d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023191:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023194:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023198:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002319c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00231a2:	77 3b                	ja     c00231df <SATA::read(unsigned long long, int, void*)+0x61>
c00231a4:	b8 06 00 00 00       	mov    eax,0x6
c00231a9:	85 d2                	test   edx,edx
c00231ab:	74 32                	je     c00231df <SATA::read(unsigned long long, int, void*)+0x61>
c00231ad:	50                   	push   eax
c00231ae:	50                   	push   eax
c00231af:	6a 00                	push   0x0
c00231b1:	52                   	push   edx
c00231b2:	53                   	push   ebx
c00231b3:	57                   	push   edi
c00231b4:	56                   	push   esi
c00231b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00231b9:	e8 2c fd ff ff       	call   c0022eea <SATA::access(unsigned long long, int, void*, bool)>
c00231be:	83 c4 20             	add    esp,0x20
c00231c1:	85 c0                	test   eax,eax
c00231c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00231c7:	75 11                	jne    c00231da <SATA::read(unsigned long long, int, void*)+0x5c>
c00231c9:	01 1d c8 dd 02 c0    	add    DWORD PTR ds:0xc002ddc8,ebx
c00231cf:	e8 32 d3 fe ff       	call   c0010506 <VgaText::updateDiskUsage()>
c00231d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00231d8:	eb 05                	jmp    c00231df <SATA::read(unsigned long long, int, void*)+0x61>
c00231da:	b8 01 00 00 00       	mov    eax,0x1
c00231df:	83 c4 10             	add    esp,0x10
c00231e2:	5b                   	pop    ebx
c00231e3:	5e                   	pop    esi
c00231e4:	5f                   	pop    edi
c00231e5:	c3                   	ret    

c00231e6 <SATA::write(unsigned long long, int, void*)>:
c00231e6:	57                   	push   edi
c00231e7:	b8 04 00 00 00       	mov    eax,0x4
c00231ec:	56                   	push   esi
c00231ed:	53                   	push   ebx
c00231ee:	83 ec 10             	sub    esp,0x10
c00231f1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00231f5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00231f9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00231fc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023200:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023204:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002320a:	77 3b                	ja     c0023247 <SATA::write(unsigned long long, int, void*)+0x61>
c002320c:	b8 06 00 00 00       	mov    eax,0x6
c0023211:	85 d2                	test   edx,edx
c0023213:	74 32                	je     c0023247 <SATA::write(unsigned long long, int, void*)+0x61>
c0023215:	50                   	push   eax
c0023216:	50                   	push   eax
c0023217:	6a 01                	push   0x1
c0023219:	52                   	push   edx
c002321a:	53                   	push   ebx
c002321b:	57                   	push   edi
c002321c:	56                   	push   esi
c002321d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023221:	e8 c4 fc ff ff       	call   c0022eea <SATA::access(unsigned long long, int, void*, bool)>
c0023226:	83 c4 20             	add    esp,0x20
c0023229:	85 c0                	test   eax,eax
c002322b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002322f:	75 11                	jne    c0023242 <SATA::write(unsigned long long, int, void*)+0x5c>
c0023231:	01 1d c4 dd 02 c0    	add    DWORD PTR ds:0xc002ddc4,ebx
c0023237:	e8 ca d2 fe ff       	call   c0010506 <VgaText::updateDiskUsage()>
c002323c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023240:	eb 05                	jmp    c0023247 <SATA::write(unsigned long long, int, void*)+0x61>
c0023242:	b8 01 00 00 00       	mov    eax,0x1
c0023247:	83 c4 10             	add    esp,0x10
c002324a:	5b                   	pop    ebx
c002324b:	5e                   	pop    esi
c002324c:	5f                   	pop    edi
c002324d:	c3                   	ret    

c002324e <AVX::open(int, int, void*)>:
c002324e:	83 ec 0c             	sub    esp,0xc
c0023251:	e8 42 11 00 00       	call   c0024398 <avxInit>
c0023256:	b8 00 00 00 00       	mov    eax,0x0
c002325b:	83 c4 0c             	add    esp,0xc
c002325e:	c3                   	ret    
c002325f:	90                   	nop

c0023260 <AVX::close(int, int, void*)>:
c0023260:	83 ec 0c             	sub    esp,0xc
c0023263:	e8 31 11 00 00       	call   c0024399 <avxClose>
c0023268:	b8 00 00 00 00       	mov    eax,0x0
c002326d:	83 c4 0c             	add    esp,0xc
c0023270:	c3                   	ret    
c0023271:	90                   	nop

c0023272 <AVX::available()>:
c0023272:	83 ec 0c             	sub    esp,0xc
c0023275:	e8 16 11 00 00       	call   c0024390 <avxDetect>
c002327a:	85 c0                	test   eax,eax
c002327c:	0f 95 c0             	setne  al
c002327f:	83 c4 0c             	add    esp,0xc
c0023282:	c3                   	ret    
c0023283:	90                   	nop

c0023284 <AVX::save(void*)>:
c0023284:	83 ec 0c             	sub    esp,0xc
c0023287:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002328b:	83 ec 0c             	sub    esp,0xc
c002328e:	50                   	push   eax
c002328f:	e8 02 11 00 00       	call   c0024396 <avxSave>
c0023294:	83 c4 10             	add    esp,0x10
c0023297:	90                   	nop
c0023298:	83 c4 0c             	add    esp,0xc
c002329b:	c3                   	ret    

c002329c <AVX::load(void*)>:
c002329c:	83 ec 0c             	sub    esp,0xc
c002329f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00232a3:	83 ec 0c             	sub    esp,0xc
c00232a6:	50                   	push   eax
c00232a7:	e8 eb 10 00 00       	call   c0024397 <avxLoad>
c00232ac:	83 c4 10             	add    esp,0x10
c00232af:	90                   	nop
c00232b0:	83 c4 0c             	add    esp,0xc
c00232b3:	c3                   	ret    

c00232b4 <AVX::AVX()>:
c00232b4:	83 ec 0c             	sub    esp,0xc
c00232b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232bb:	83 ec 08             	sub    esp,0x8
c00232be:	68 2c a7 02 c0       	push   0xc002a72c
c00232c3:	50                   	push   eax
c00232c4:	e8 b1 0c ff ff       	call   c0013f7a <FPU::FPU(char const*)>
c00232c9:	83 c4 10             	add    esp,0x10
c00232cc:	ba 3c a7 02 c0       	mov    edx,0xc002a73c
c00232d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232d5:	89 10                	mov    DWORD PTR [eax],edx
c00232d7:	90                   	nop
c00232d8:	83 c4 0c             	add    esp,0xc
c00232db:	c3                   	ret    

c00232dc <MMX::available()>:
c00232dc:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c00232e1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00232e7:	83 e0 20             	and    eax,0x20
c00232ea:	84 c0                	test   al,al
c00232ec:	0f 95 c0             	setne  al
c00232ef:	c3                   	ret    

c00232f0 <MMX::open(int, int, void*)>:
c00232f0:	83 ec 0c             	sub    esp,0xc
c00232f3:	e8 24 11 00 00       	call   c002441c <x87Init>
c00232f8:	b8 00 00 00 00       	mov    eax,0x0
c00232fd:	83 c4 0c             	add    esp,0xc
c0023300:	c3                   	ret    
c0023301:	90                   	nop

c0023302 <MMX::close(int, int, void*)>:
c0023302:	83 ec 0c             	sub    esp,0xc
c0023305:	e8 2c 11 00 00       	call   c0024436 <x87Close>
c002330a:	b8 00 00 00 00       	mov    eax,0x0
c002330f:	83 c4 0c             	add    esp,0xc
c0023312:	c3                   	ret    
c0023313:	90                   	nop

c0023314 <MMX::save(void*)>:
c0023314:	83 ec 0c             	sub    esp,0xc
c0023317:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002331b:	83 ec 0c             	sub    esp,0xc
c002331e:	50                   	push   eax
c002331f:	e8 ed 10 00 00       	call   c0024411 <x87Save>
c0023324:	83 c4 10             	add    esp,0x10
c0023327:	90                   	nop
c0023328:	83 c4 0c             	add    esp,0xc
c002332b:	c3                   	ret    

c002332c <MMX::load(void*)>:
c002332c:	83 ec 0c             	sub    esp,0xc
c002332f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023333:	83 ec 0c             	sub    esp,0xc
c0023336:	50                   	push   eax
c0023337:	e8 db 10 00 00       	call   c0024417 <x87Load>
c002333c:	83 c4 10             	add    esp,0x10
c002333f:	90                   	nop
c0023340:	83 c4 0c             	add    esp,0xc
c0023343:	c3                   	ret    

c0023344 <MMX::MMX()>:
c0023344:	83 ec 0c             	sub    esp,0xc
c0023347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002334b:	83 ec 08             	sub    esp,0x8
c002334e:	68 6c a7 02 c0       	push   0xc002a76c
c0023353:	50                   	push   eax
c0023354:	e8 21 0c ff ff       	call   c0013f7a <FPU::FPU(char const*)>
c0023359:	83 c4 10             	add    esp,0x10
c002335c:	ba 7c a7 02 c0       	mov    edx,0xc002a77c
c0023361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023365:	89 10                	mov    DWORD PTR [eax],edx
c0023367:	90                   	nop
c0023368:	83 c4 0c             	add    esp,0xc
c002336b:	c3                   	ret    

c002336c <SSE::open(int, int, void*)>:
c002336c:	83 ec 0c             	sub    esp,0xc
c002336f:	e8 60 10 00 00       	call   c00243d4 <sseInit>
c0023374:	b8 00 00 00 00       	mov    eax,0x0
c0023379:	83 c4 0c             	add    esp,0xc
c002337c:	c3                   	ret    
c002337d:	90                   	nop

c002337e <SSE::close(int, int, void*)>:
c002337e:	83 ec 0c             	sub    esp,0xc
c0023381:	e8 5e 10 00 00       	call   c00243e4 <sseClose>
c0023386:	b8 00 00 00 00       	mov    eax,0x0
c002338b:	83 c4 0c             	add    esp,0xc
c002338e:	c3                   	ret    
c002338f:	90                   	nop

c0023390 <SSE::available()>:
c0023390:	83 ec 1c             	sub    esp,0x1c
c0023393:	e8 18 10 00 00       	call   c00243b0 <absolutelyNoChanceInHell>
c0023398:	85 c0                	test   eax,eax
c002339a:	0f 95 c0             	setne  al
c002339d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00233a1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00233a5:	83 c4 1c             	add    esp,0x1c
c00233a8:	c3                   	ret    
c00233a9:	90                   	nop

c00233aa <SSE::save(void*)>:
c00233aa:	83 ec 0c             	sub    esp,0xc
c00233ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00233b1:	83 ec 0c             	sub    esp,0xc
c00233b4:	50                   	push   eax
c00233b5:	e8 0e 10 00 00       	call   c00243c8 <sseSave>
c00233ba:	83 c4 10             	add    esp,0x10
c00233bd:	90                   	nop
c00233be:	83 c4 0c             	add    esp,0xc
c00233c1:	c3                   	ret    

c00233c2 <SSE::load(void*)>:
c00233c2:	83 ec 0c             	sub    esp,0xc
c00233c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00233c9:	83 ec 0c             	sub    esp,0xc
c00233cc:	50                   	push   eax
c00233cd:	e8 fc 0f 00 00       	call   c00243ce <sseLoad>
c00233d2:	83 c4 10             	add    esp,0x10
c00233d5:	90                   	nop
c00233d6:	83 c4 0c             	add    esp,0xc
c00233d9:	c3                   	ret    

c00233da <SSE::SSE()>:
c00233da:	83 ec 0c             	sub    esp,0xc
c00233dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233e1:	83 ec 08             	sub    esp,0x8
c00233e4:	68 ac a7 02 c0       	push   0xc002a7ac
c00233e9:	50                   	push   eax
c00233ea:	e8 8b 0b ff ff       	call   c0013f7a <FPU::FPU(char const*)>
c00233ef:	83 c4 10             	add    esp,0x10
c00233f2:	ba bc a7 02 c0       	mov    edx,0xc002a7bc
c00233f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233fb:	89 10                	mov    DWORD PTR [eax],edx
c00233fd:	90                   	nop
c00233fe:	83 c4 0c             	add    esp,0xc
c0023401:	c3                   	ret    

c0023402 <x87::open(int, int, void*)>:
c0023402:	83 ec 0c             	sub    esp,0xc
c0023405:	e8 12 10 00 00       	call   c002441c <x87Init>
c002340a:	b8 00 00 00 00       	mov    eax,0x0
c002340f:	83 c4 0c             	add    esp,0xc
c0023412:	c3                   	ret    
c0023413:	90                   	nop

c0023414 <x87::close(int, int, void*)>:
c0023414:	83 ec 0c             	sub    esp,0xc
c0023417:	e8 1a 10 00 00       	call   c0024436 <x87Close>
c002341c:	b8 00 00 00 00       	mov    eax,0x0
c0023421:	83 c4 0c             	add    esp,0xc
c0023424:	c3                   	ret    
c0023425:	90                   	nop

c0023426 <x87::available()>:
c0023426:	83 ec 0c             	sub    esp,0xc
c0023429:	e8 c8 0f 00 00       	call   c00243f6 <x87Detect>
c002342e:	85 c0                	test   eax,eax
c0023430:	0f 95 c0             	setne  al
c0023433:	83 c4 0c             	add    esp,0xc
c0023436:	c3                   	ret    
c0023437:	90                   	nop

c0023438 <x87::save(void*)>:
c0023438:	83 ec 0c             	sub    esp,0xc
c002343b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002343f:	83 ec 0c             	sub    esp,0xc
c0023442:	50                   	push   eax
c0023443:	e8 c9 0f 00 00       	call   c0024411 <x87Save>
c0023448:	83 c4 10             	add    esp,0x10
c002344b:	90                   	nop
c002344c:	83 c4 0c             	add    esp,0xc
c002344f:	c3                   	ret    

c0023450 <x87::load(void*)>:
c0023450:	83 ec 0c             	sub    esp,0xc
c0023453:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023457:	83 ec 0c             	sub    esp,0xc
c002345a:	50                   	push   eax
c002345b:	e8 b7 0f 00 00       	call   c0024417 <x87Load>
c0023460:	83 c4 10             	add    esp,0x10
c0023463:	90                   	nop
c0023464:	83 c4 0c             	add    esp,0xc
c0023467:	c3                   	ret    

c0023468 <x87::x87()>:
c0023468:	83 ec 0c             	sub    esp,0xc
c002346b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002346f:	83 ec 08             	sub    esp,0x8
c0023472:	68 ec a7 02 c0       	push   0xc002a7ec
c0023477:	50                   	push   eax
c0023478:	e8 fd 0a ff ff       	call   c0013f7a <FPU::FPU(char const*)>
c002347d:	83 c4 10             	add    esp,0x10
c0023480:	ba fc a7 02 c0       	mov    edx,0xc002a7fc
c0023485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023489:	89 10                	mov    DWORD PTR [eax],edx
c002348b:	90                   	nop
c002348c:	83 c4 0c             	add    esp,0xc
c002348f:	c3                   	ret    

c0023490 <APIC::disable()>:
c0023490:	90                   	nop
c0023491:	c3                   	ret    

c0023492 <APIC::close(int, int, void*)>:
c0023492:	55                   	push   ebp
c0023493:	89 e5                	mov    ebp,esp
c0023495:	83 ec 08             	sub    esp,0x8
c0023498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002349b:	8b 00                	mov    eax,DWORD PTR [eax]
c002349d:	83 c0 3c             	add    eax,0x3c
c00234a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00234a2:	83 ec 0c             	sub    esp,0xc
c00234a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00234a8:	ff d0                	call   eax
c00234aa:	83 c4 10             	add    esp,0x10
c00234ad:	b8 00 00 00 00       	mov    eax,0x0
c00234b2:	c9                   	leave  
c00234b3:	c3                   	ret    

c00234b4 <IOAPIC::close(int, int, void*)>:
c00234b4:	b8 00 00 00 00       	mov    eax,0x0
c00234b9:	c3                   	ret    

c00234ba <APIC::io_wait()>:
c00234ba:	eb 00                	jmp    c00234bc <APIC::io_wait()+0x2>
c00234bc:	eb 00                	jmp    c00234be <APIC::io_wait()+0x4>
c00234be:	90                   	nop
c00234bf:	c3                   	ret    

c00234c0 <APIC::getBase()>:
c00234c0:	55                   	push   ebp
c00234c1:	89 e5                	mov    ebp,esp
c00234c3:	83 ec 18             	sub    esp,0x18
c00234c6:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c00234cb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00234d1:	83 e0 08             	and    eax,0x8
c00234d4:	84 c0                	test   al,al
c00234d6:	75 07                	jne    c00234df <APIC::getBase()+0x1f>
c00234d8:	b8 00 00 00 00       	mov    eax,0x0
c00234dd:	eb 21                	jmp    c0023500 <APIC::getBase()+0x40>
c00234df:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c00234e4:	83 ec 08             	sub    esp,0x8
c00234e7:	6a 1b                	push   0x1b
c00234e9:	50                   	push   eax
c00234ea:	e8 89 b5 fe ff       	call   c000ea78 <Computer::rdmsr(unsigned int)>
c00234ef:	83 c4 10             	add    esp,0x10
c00234f2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00234f5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00234f8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00234fb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023500:	c9                   	leave  
c0023501:	c3                   	ret    

c0023502 <APIC::eoi(unsigned char)>:
c0023502:	55                   	push   ebp
c0023503:	89 e5                	mov    ebp,esp
c0023505:	83 ec 28             	sub    esp,0x28
c0023508:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002350b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002350e:	83 ec 0c             	sub    esp,0xc
c0023511:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023514:	e8 a7 ff ff ff       	call   c00234c0 <APIC::getBase()>
c0023519:	83 c4 10             	add    esp,0x10
c002351c:	05 b0 00 00 00       	add    eax,0xb0
c0023521:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0023524:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0023527:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002352d:	90                   	nop
c002352e:	c9                   	leave  
c002352f:	c3                   	ret    

c0023530 <APIC::open(int, int, void*)>:
c0023530:	55                   	push   ebp
c0023531:	89 e5                	mov    ebp,esp
c0023533:	57                   	push   edi
c0023534:	56                   	push   esi
c0023535:	53                   	push   ebx
c0023536:	83 ec 2c             	sub    esp,0x2c
c0023539:	83 ec 0c             	sub    esp,0xc
c002353c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002353f:	e8 7c ff ff ff       	call   c00234c0 <APIC::getBase()>
c0023544:	83 c4 10             	add    esp,0x10
c0023547:	89 c2                	mov    edx,eax
c0023549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002354c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0023552:	0f b6 f8             	movzx  edi,al
c0023555:	89 d0                	mov    eax,edx
c0023557:	ba 00 00 00 00       	mov    edx,0x0
c002355c:	89 c1                	mov    ecx,eax
c002355e:	80 e5 ff             	and    ch,0xff
c0023561:	89 cb                	mov    ebx,ecx
c0023563:	0f b6 f2             	movzx  esi,dl
c0023566:	89 d8                	mov    eax,ebx
c0023568:	89 f2                	mov    edx,esi
c002356a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002356d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0023570:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0023574:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0023578:	83 e0 00             	and    eax,0x0
c002357b:	09 d0                	or     eax,edx
c002357d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0023581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023584:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002358a:	8d 50 01             	lea    edx,[eax+0x1]
c002358d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0023590:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0023596:	0f b6 d0             	movzx  edx,al
c0023599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002359c:	83 c2 08             	add    edx,0x8
c002359f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00235a3:	0f b6 c9             	movzx  ecx,cl
c00235a6:	81 c9 00 00 01 00    	or     ecx,0x10000
c00235ac:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00235b0:	83 ec 0c             	sub    esp,0xc
c00235b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00235b6:	e8 05 ff ff ff       	call   c00234c0 <APIC::getBase()>
c00235bb:	83 c4 10             	add    esp,0x10
c00235be:	05 f0 00 00 00       	add    eax,0xf0
c00235c3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00235c6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00235c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00235cb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00235ce:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00235d5:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00235dc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00235df:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00235e2:	89 10                	mov    DWORD PTR [eax],edx
c00235e4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00235eb:	a1 70 c3 02 c0       	mov    eax,ds:0xc002c370
c00235f0:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00235f3:	7d 7c                	jge    c0023671 <APIC::open(int, int, void*)+0x141>
c00235f5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00235f8:	8b 04 85 80 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3c80]
c00235ff:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0023602:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023605:	8b 04 85 80 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3c80]
c002360c:	c1 e8 08             	shr    eax,0x8
c002360f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0023613:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023616:	8b 04 85 80 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3c80]
c002361d:	c1 e8 18             	shr    eax,0x18
c0023620:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0023623:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0023627:	75 40                	jne    c0023669 <APIC::open(int, int, void*)+0x139>
c0023629:	83 ec 0c             	sub    esp,0xc
c002362c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002362f:	e8 8c fe ff ff       	call   c00234c0 <APIC::getBase()>
c0023634:	83 c4 10             	add    esp,0x10
c0023637:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002363b:	75 07                	jne    c0023644 <APIC::open(int, int, void*)+0x114>
c002363d:	ba 60 03 00 00       	mov    edx,0x360
c0023642:	eb 05                	jmp    c0023649 <APIC::open(int, int, void*)+0x119>
c0023644:	ba 50 03 00 00       	mov    edx,0x350
c0023649:	01 d0                	add    eax,edx
c002364b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002364e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0023651:	8b 00                	mov    eax,DWORD PTR [eax]
c0023653:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0023656:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002365d:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0023661:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0023664:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0023667:	89 10                	mov    DWORD PTR [eax],edx
c0023669:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002366c:	e9 7a ff ff ff       	jmp    c00235eb <APIC::open(int, int, void*)+0xbb>
c0023671:	b8 00 00 00 00       	mov    eax,0x0
c0023676:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023679:	5b                   	pop    ebx
c002367a:	5e                   	pop    esi
c002367b:	5f                   	pop    edi
c002367c:	5d                   	pop    ebp
c002367d:	c3                   	ret    

c002367e <IOAPIC::IOAPIC()>:
c002367e:	83 ec 0c             	sub    esp,0xc
c0023681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023685:	83 ec 08             	sub    esp,0x8
c0023688:	68 2c a8 02 c0       	push   0xc002a82c
c002368d:	50                   	push   eax
c002368e:	e8 e9 05 ff ff       	call   c0013c7c <Device::Device(char const*)>
c0023693:	83 c4 10             	add    esp,0x10
c0023696:	ba 54 a9 02 c0       	mov    edx,0xc002a954
c002369b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002369f:	89 10                	mov    DWORD PTR [eax],edx
c00236a1:	90                   	nop
c00236a2:	83 c4 0c             	add    esp,0xc
c00236a5:	c3                   	ret    

c00236a6 <APIC::APIC()>:
c00236a6:	53                   	push   ebx
c00236a7:	83 ec 18             	sub    esp,0x18
c00236aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00236ae:	83 ec 08             	sub    esp,0x8
c00236b1:	68 34 a8 02 c0       	push   0xc002a834
c00236b6:	50                   	push   eax
c00236b7:	e8 18 0d ff ff       	call   c00143d4 <InterruptController::InterruptController(char const*)>
c00236bc:	83 c4 10             	add    esp,0x10
c00236bf:	ba 0c a9 02 c0       	mov    edx,0xc002a90c
c00236c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00236c8:	89 10                	mov    DWORD PTR [eax],edx
c00236ca:	a0 20 de 02 c0       	mov    al,ds:0xc002de20
c00236cf:	83 f0 01             	xor    eax,0x1
c00236d2:	84 c0                	test   al,al
c00236d4:	0f 84 a1 00 00 00    	je     c002377b <APIC::APIC()+0xd5>
c00236da:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00236df:	a0 20 c4 02 c0       	mov    al,ds:0xc002c420
c00236e4:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00236e8:	0f 83 86 00 00 00    	jae    c0023774 <APIC::APIC()+0xce>
c00236ee:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00236f6:	83 ec 0c             	sub    esp,0xc
c00236f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00236fd:	e8 ce bd fe ff       	call   c000f4d0 <malloc>
c0023702:	83 c4 10             	add    esp,0x10
c0023705:	89 c3                	mov    ebx,eax
c0023707:	83 ec 0c             	sub    esp,0xc
c002370a:	53                   	push   ebx
c002370b:	e8 6e ff ff ff       	call   c002367e <IOAPIC::IOAPIC()>
c0023710:	83 c4 10             	add    esp,0x10
c0023713:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0023717:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002371c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023720:	89 14 85 00 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2200],edx
c0023727:	a1 e0 dd 02 c0       	mov    eax,ds:0xc002dde0
c002372c:	40                   	inc    eax
c002372d:	a3 e0 dd 02 c0       	mov    ds:0xc002dde0,eax
c0023732:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0023737:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002373d:	83 ec 08             	sub    esp,0x8
c0023740:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0023744:	50                   	push   eax
c0023745:	e8 42 03 ff ff       	call   c0013a8c <Device::addChild(Device*)>
c002374a:	83 c4 10             	add    esp,0x10
c002374d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023751:	8b 00                	mov    eax,DWORD PTR [eax]
c0023753:	83 c0 08             	add    eax,0x8
c0023756:	8b 00                	mov    eax,DWORD PTR [eax]
c0023758:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002375d:	6a 00                	push   0x0
c002375f:	6a 00                	push   0x0
c0023761:	52                   	push   edx
c0023762:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023766:	ff d0                	call   eax
c0023768:	83 c4 10             	add    esp,0x10
c002376b:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002376f:	e9 6b ff ff ff       	jmp    c00236df <APIC::APIC()+0x39>
c0023774:	c6 05 20 de 02 c0 01 	mov    BYTE PTR ds:0xc002de20,0x1
c002377b:	90                   	nop
c002377c:	83 c4 18             	add    esp,0x18
c002377f:	5b                   	pop    ebx
c0023780:	c3                   	ret    
c0023781:	90                   	nop

c0023782 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0023782:	55                   	push   ebp
c0023783:	89 e5                	mov    ebp,esp
c0023785:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023788:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002378e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0023791:	72 1d                	jb     c00237b0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0023793:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023796:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002379c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002379f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00237a5:	01 d0                	add    eax,edx
c00237a7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00237aa:	73 04                	jae    c00237b0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00237ac:	b0 01                	mov    al,0x1
c00237ae:	eb 02                	jmp    c00237b2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00237b0:	b0 00                	mov    al,0x0
c00237b2:	5d                   	pop    ebp
c00237b3:	c3                   	ret    

c00237b4 <IOAPIC::read(int)>:
c00237b4:	55                   	push   ebp
c00237b5:	89 e5                	mov    ebp,esp
c00237b7:	83 ec 10             	sub    esp,0x10
c00237ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00237bd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00237c3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00237c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00237c9:	0f b6 d0             	movzx  edx,al
c00237cc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00237cf:	89 10                	mov    DWORD PTR [eax],edx
c00237d1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00237d4:	83 c0 10             	add    eax,0x10
c00237d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00237d9:	c9                   	leave  
c00237da:	c3                   	ret    
c00237db:	90                   	nop

c00237dc <IOAPIC::open(int, int, void*)>:
c00237dc:	55                   	push   ebp
c00237dd:	89 e5                	mov    ebp,esp
c00237df:	57                   	push   edi
c00237e0:	56                   	push   esi
c00237e1:	53                   	push   ebx
c00237e2:	83 ec 0c             	sub    esp,0xc
c00237e5:	83 ec 0c             	sub    esp,0xc
c00237e8:	68 5f a8 02 c0       	push   0xc002a85f
c00237ed:	e8 ab ee fe ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c00237f2:	83 c4 10             	add    esp,0x10
c00237f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00237f8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00237fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023804:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002380a:	8b 14 85 60 c4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ba0]
c0023811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023814:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002381a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002381d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023823:	8b 14 85 e0 c4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3b20]
c002382a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002382d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023833:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023836:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002383c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002383f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0023845:	0f b6 f8             	movzx  edi,al
c0023848:	89 d0                	mov    eax,edx
c002384a:	ba 00 00 00 00       	mov    edx,0x0
c002384f:	89 c1                	mov    ecx,eax
c0023851:	80 e5 ff             	and    ch,0xff
c0023854:	89 cb                	mov    ebx,ecx
c0023856:	0f b6 f2             	movzx  esi,dl
c0023859:	89 d8                	mov    eax,ebx
c002385b:	89 f2                	mov    edx,esi
c002385d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0023860:	8d 5f 08             	lea    ebx,[edi+0x8]
c0023863:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0023867:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002386b:	83 e0 00             	and    eax,0x0
c002386e:	09 d0                	or     eax,edx
c0023870:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0023874:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023877:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002387d:	8d 50 01             	lea    edx,[eax+0x1]
c0023880:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0023883:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0023889:	0f b6 d0             	movzx  edx,al
c002388c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002388f:	83 c2 08             	add    edx,0x8
c0023892:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0023896:	0f b6 c9             	movzx  ecx,cl
c0023899:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002389f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00238a3:	83 ec 08             	sub    esp,0x8
c00238a6:	6a 01                	push   0x1
c00238a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00238ab:	e8 04 ff ff ff       	call   c00237b4 <IOAPIC::read(int)>
c00238b0:	83 c4 10             	add    esp,0x10
c00238b3:	c1 f8 10             	sar    eax,0x10
c00238b6:	0f b6 c0             	movzx  eax,al
c00238b9:	8d 50 01             	lea    edx,[eax+0x1]
c00238bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00238bf:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00238c5:	b8 00 00 00 00       	mov    eax,0x0
c00238ca:	8d 65 f4             	lea    esp,[ebp-0xc]
c00238cd:	5b                   	pop    ebx
c00238ce:	5e                   	pop    esi
c00238cf:	5f                   	pop    edi
c00238d0:	5d                   	pop    ebp
c00238d1:	c3                   	ret    

c00238d2 <IOAPIC::write(int, int)>:
c00238d2:	55                   	push   ebp
c00238d3:	89 e5                	mov    ebp,esp
c00238d5:	83 ec 10             	sub    esp,0x10
c00238d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00238db:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00238e1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00238e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00238e7:	0f b6 d0             	movzx  edx,al
c00238ea:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00238ed:	89 10                	mov    DWORD PTR [eax],edx
c00238ef:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00238f2:	8d 50 10             	lea    edx,[eax+0x10]
c00238f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00238f8:	89 02                	mov    DWORD PTR [edx],eax
c00238fa:	90                   	nop
c00238fb:	c9                   	leave  
c00238fc:	c3                   	ret    
c00238fd:	90                   	nop

c00238fe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00238fe:	55                   	push   ebp
c00238ff:	89 e5                	mov    ebp,esp
c0023901:	53                   	push   ebx
c0023902:	83 ec 2c             	sub    esp,0x2c
c0023905:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023908:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002390b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002390e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0023911:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0023914:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0023917:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002391a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002391d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023920:	88 d8                	mov    al,bl
c0023922:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0023925:	88 c8                	mov    al,cl
c0023927:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002392a:	88 d0                	mov    al,dl
c002392c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002392f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023933:	83 c0 08             	add    eax,0x8
c0023936:	01 c0                	add    eax,eax
c0023938:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002393b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002393f:	83 c0 08             	add    eax,0x8
c0023942:	01 c0                	add    eax,eax
c0023944:	40                   	inc    eax
c0023945:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0023948:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002394b:	50                   	push   eax
c002394c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002394f:	e8 60 fe ff ff       	call   c00237b4 <IOAPIC::read(int)>
c0023954:	83 c4 08             	add    esp,0x8
c0023957:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002395a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0023961:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0023964:	c1 e0 18             	shl    eax,0x18
c0023967:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002396a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002396d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0023970:	52                   	push   edx
c0023971:	50                   	push   eax
c0023972:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023975:	e8 58 ff ff ff       	call   c00238d2 <IOAPIC::write(int, int)>
c002397a:	83 c4 0c             	add    esp,0xc
c002397d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023980:	50                   	push   eax
c0023981:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023984:	e8 2b fe ff ff       	call   c00237b4 <IOAPIC::read(int)>
c0023989:	83 c4 08             	add    esp,0x8
c002398c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002398f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0023996:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002399d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00239a4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00239a8:	74 09                	je     c00239b3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00239aa:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00239b1:	eb 07                	jmp    c00239ba <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00239b3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00239ba:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00239be:	74 09                	je     c00239c9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00239c0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00239c7:	eb 07                	jmp    c00239d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00239c9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00239d0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00239d7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00239db:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00239de:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00239e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00239e4:	52                   	push   edx
c00239e5:	50                   	push   eax
c00239e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00239e9:	e8 e4 fe ff ff       	call   c00238d2 <IOAPIC::write(int, int)>
c00239ee:	83 c4 0c             	add    esp,0xc
c00239f1:	90                   	nop
c00239f2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00239f5:	c9                   	leave  
c00239f6:	c3                   	ret    
c00239f7:	90                   	nop

c00239f8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00239f8:	55                   	push   ebp
c00239f9:	89 e5                	mov    ebp,esp
c00239fb:	57                   	push   edi
c00239fc:	56                   	push   esi
c00239fd:	53                   	push   ebx
c00239fe:	83 ec 2c             	sub    esp,0x2c
c0023a01:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023a04:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0023a07:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0023a0b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0023a0f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0023a13:	74 5a                	je     c0023a6f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0023a15:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0023a19:	7f 44                	jg     c0023a5f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0023a1b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023a1e:	05 a0 ad 02 c0       	add    eax,0xc002ada0
c0023a23:	8a 00                	mov    al,BYTE PTR [eax]
c0023a25:	0f b6 c0             	movzx  eax,al
c0023a28:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0023a2b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023a2e:	66 8b 84 00 00 c4 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd3c00]
c0023a36:	0f b7 c0             	movzx  eax,ax
c0023a39:	83 e0 02             	and    eax,0x2
c0023a3c:	85 c0                	test   eax,eax
c0023a3e:	74 04                	je     c0023a44 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0023a40:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0023a44:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023a47:	66 8b 84 00 00 c4 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd3c00]
c0023a4f:	0f b7 c0             	movzx  eax,ax
c0023a52:	83 e0 08             	and    eax,0x8
c0023a55:	85 c0                	test   eax,eax
c0023a57:	74 16                	je     c0023a6f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0023a59:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0023a5d:	eb 10                	jmp    c0023a6f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0023a5f:	83 ec 0c             	sub    esp,0xc
c0023a62:	68 70 a8 02 c0       	push   0xc002a870
c0023a67:	e8 75 57 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c0023a6c:	83 c4 10             	add    esp,0x10
c0023a6f:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0023a73:	a1 e0 dd 02 c0       	mov    eax,ds:0xc002dde0
c0023a78:	83 ec 08             	sub    esp,0x8
c0023a7b:	50                   	push   eax
c0023a7c:	68 a8 a8 02 c0       	push   0xc002a8a8
c0023a81:	e8 17 ec fe ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0023a86:	83 c4 10             	add    esp,0x10
c0023a89:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0023a90:	a1 e0 dd 02 c0       	mov    eax,ds:0xc002dde0
c0023a95:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0023a98:	7d 67                	jge    c0023b01 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0023a9a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0023a9d:	8b 04 85 00 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2200]
c0023aa4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0023aa7:	83 ec 08             	sub    esp,0x8
c0023aaa:	52                   	push   edx
c0023aab:	50                   	push   eax
c0023aac:	e8 d1 fc ff ff       	call   c0023782 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0023ab1:	83 c4 10             	add    esp,0x10
c0023ab4:	84 c0                	test   al,al
c0023ab6:	74 44                	je     c0023afc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0023ab8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0023abb:	8b 1c 85 00 de 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd2200]
c0023ac2:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0023ac6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0023ac9:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0023acd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023ad0:	83 c0 20             	add    eax,0x20
c0023ad3:	0f b6 f0             	movzx  esi,al
c0023ad6:	b8 00 00 00 00       	mov    eax,0x0
c0023adb:	99                   	cdq    
c0023adc:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0023adf:	0f b6 c9             	movzx  ecx,cl
c0023ae2:	83 ec 04             	sub    esp,0x4
c0023ae5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0023ae8:	57                   	push   edi
c0023ae9:	56                   	push   esi
c0023aea:	52                   	push   edx
c0023aeb:	50                   	push   eax
c0023aec:	51                   	push   ecx
c0023aed:	53                   	push   ebx
c0023aee:	e8 0b fe ff ff       	call   c00238fe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0023af3:	83 c4 20             	add    esp,0x20
c0023af6:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0023afa:	eb 05                	jmp    c0023b01 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0023afc:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0023aff:	eb 8f                	jmp    c0023a90 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0023b01:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0023b04:	83 f0 01             	xor    eax,0x1
c0023b07:	84 c0                	test   al,al
c0023b09:	74 10                	je     c0023b1b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0023b0b:	83 ec 0c             	sub    esp,0xc
c0023b0e:	68 bf a8 02 c0       	push   0xc002a8bf
c0023b13:	e8 c9 56 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c0023b18:	83 c4 10             	add    esp,0x10
c0023b1b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0023b1f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0023b26:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0023b2a:	7f 65                	jg     c0023b91 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0023b2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023b2f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0023b32:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0023b39:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0023b3c:	01 ca                	add    edx,ecx
c0023b3e:	83 c2 54             	add    edx,0x54
c0023b41:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0023b45:	85 c0                	test   eax,eax
c0023b47:	75 43                	jne    c0023b8c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0023b49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023b4c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0023b4f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0023b56:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0023b59:	01 ca                	add    edx,ecx
c0023b5b:	8d 4a 54             	lea    ecx,[edx+0x54]
c0023b5e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0023b61:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0023b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023b68:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0023b6b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0023b72:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0023b75:	01 ca                	add    edx,ecx
c0023b77:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0023b7d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0023b80:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0023b84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023b87:	83 e8 20             	sub    eax,0x20
c0023b8a:	eb 1a                	jmp    c0023ba6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0023b8c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0023b8f:	eb 95                	jmp    c0023b26 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0023b91:	83 ec 0c             	sub    esp,0xc
c0023b94:	68 cc a8 02 c0       	push   0xc002a8cc
c0023b99:	e8 43 56 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c0023b9e:	83 c4 10             	add    esp,0x10
c0023ba1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0023ba6:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023ba9:	5b                   	pop    ebx
c0023baa:	5e                   	pop    esi
c0023bab:	5f                   	pop    edi
c0023bac:	5d                   	pop    ebp
c0023bad:	c3                   	ret    

c0023bae <PIC::disable()>:
c0023bae:	55                   	push   ebp
c0023baf:	89 e5                	mov    ebp,esp
c0023bb1:	83 ec 10             	sub    esp,0x10
c0023bb4:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0023bba:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0023bbe:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0023bc1:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0023bc5:	ee                   	out    dx,al
c0023bc6:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0023bcc:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0023bd0:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0023bd3:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0023bd7:	ee                   	out    dx,al
c0023bd8:	90                   	nop
c0023bd9:	c9                   	leave  
c0023bda:	c3                   	ret    
c0023bdb:	90                   	nop

c0023bdc <PIC::close(int, int, void*)>:
c0023bdc:	55                   	push   ebp
c0023bdd:	89 e5                	mov    ebp,esp
c0023bdf:	83 ec 08             	sub    esp,0x8
c0023be2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023be5:	8b 00                	mov    eax,DWORD PTR [eax]
c0023be7:	83 c0 3c             	add    eax,0x3c
c0023bea:	8b 00                	mov    eax,DWORD PTR [eax]
c0023bec:	83 ec 0c             	sub    esp,0xc
c0023bef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023bf2:	ff d0                	call   eax
c0023bf4:	83 c4 10             	add    esp,0x10
c0023bf7:	b8 00 00 00 00       	mov    eax,0x0
c0023bfc:	c9                   	leave  
c0023bfd:	c3                   	ret    

c0023bfe <PIC::PIC()>:
c0023bfe:	83 ec 0c             	sub    esp,0xc
c0023c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c05:	83 ec 08             	sub    esp,0x8
c0023c08:	68 78 a9 02 c0       	push   0xc002a978
c0023c0d:	50                   	push   eax
c0023c0e:	e8 c1 07 ff ff       	call   c00143d4 <InterruptController::InterruptController(char const*)>
c0023c13:	83 c4 10             	add    esp,0x10
c0023c16:	ba a4 a9 02 c0       	mov    edx,0xc002a9a4
c0023c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c1f:	89 10                	mov    DWORD PTR [eax],edx
c0023c21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c25:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023c2b:	0f b6 d0             	movzx  edx,al
c0023c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c32:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0023c39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c3d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023c43:	0f b6 d0             	movzx  edx,al
c0023c46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c4a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0023c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c53:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023c59:	8d 50 01             	lea    edx,[eax+0x1]
c0023c5c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023c60:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023c66:	0f b6 d0             	movzx  edx,al
c0023c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c6d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023c71:	83 e1 3f             	and    ecx,0x3f
c0023c74:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c7c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023c82:	0f b6 d0             	movzx  edx,al
c0023c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c89:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0023c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c94:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023c9a:	0f b6 d0             	movzx  edx,al
c0023c9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ca1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0023ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023caa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023cb0:	8d 50 01             	lea    edx,[eax+0x1]
c0023cb3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023cb7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023cbd:	0f b6 d0             	movzx  edx,al
c0023cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cc4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023cc8:	83 e1 3f             	and    ecx,0x3f
c0023ccb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023ccf:	90                   	nop
c0023cd0:	83 c4 0c             	add    esp,0xc
c0023cd3:	c3                   	ret    

c0023cd4 <PIC::ioWait()>:
c0023cd4:	eb 00                	jmp    c0023cd6 <PIC::ioWait()+0x2>
c0023cd6:	eb 00                	jmp    c0023cd8 <PIC::ioWait()+0x4>
c0023cd8:	90                   	nop
c0023cd9:	c3                   	ret    

c0023cda <PIC::getIRQReg(int)>:
c0023cda:	55                   	push   ebp
c0023cdb:	89 e5                	mov    ebp,esp
c0023cdd:	83 ec 10             	sub    esp,0x10
c0023ce0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023ce3:	0f b6 c0             	movzx  eax,al
c0023ce6:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0023cec:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0023cef:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0023cf2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0023cf6:	ee                   	out    dx,al
c0023cf7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023cfa:	0f b6 c0             	movzx  eax,al
c0023cfd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0023d03:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0023d06:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0023d09:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0023d0d:	ee                   	out    dx,al
c0023d0e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0023d14:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0023d18:	89 c2                	mov    edx,eax
c0023d1a:	ec                   	in     al,dx
c0023d1b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0023d1e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0023d21:	0f b6 c0             	movzx  eax,al
c0023d24:	c1 e0 08             	shl    eax,0x8
c0023d27:	89 c1                	mov    ecx,eax
c0023d29:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0023d2f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0023d33:	89 c2                	mov    edx,eax
c0023d35:	ec                   	in     al,dx
c0023d36:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0023d39:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0023d3c:	0f b6 c0             	movzx  eax,al
c0023d3f:	09 c8                	or     eax,ecx
c0023d41:	c9                   	leave  
c0023d42:	c3                   	ret    
c0023d43:	90                   	nop

c0023d44 <PIC::eoi(unsigned char)>:
c0023d44:	55                   	push   ebp
c0023d45:	89 e5                	mov    ebp,esp
c0023d47:	83 ec 14             	sub    esp,0x14
c0023d4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023d4d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0023d50:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0023d54:	75 1e                	jne    c0023d74 <PIC::eoi(unsigned char)+0x30>
c0023d56:	6a 0b                	push   0xb
c0023d58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023d5b:	e8 7a ff ff ff       	call   c0023cda <PIC::getIRQReg(int)>
c0023d60:	83 c4 08             	add    esp,0x8
c0023d63:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0023d67:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0023d6b:	25 80 00 00 00       	and    eax,0x80
c0023d70:	85 c0                	test   eax,eax
c0023d72:	74 5f                	je     c0023dd3 <PIC::eoi(unsigned char)+0x8f>
c0023d74:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0023d78:	75 2d                	jne    c0023da7 <PIC::eoi(unsigned char)+0x63>
c0023d7a:	6a 0b                	push   0xb
c0023d7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023d7f:	e8 56 ff ff ff       	call   c0023cda <PIC::getIRQReg(int)>
c0023d84:	83 c4 08             	add    esp,0x8
c0023d87:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0023d8b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0023d8e:	66 85 c0             	test   ax,ax
c0023d91:	78 14                	js     c0023da7 <PIC::eoi(unsigned char)+0x63>
c0023d93:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0023d99:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0023d9d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0023da0:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0023da4:	ee                   	out    dx,al
c0023da5:	eb 2d                	jmp    c0023dd4 <PIC::eoi(unsigned char)+0x90>
c0023da7:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0023dab:	76 12                	jbe    c0023dbf <PIC::eoi(unsigned char)+0x7b>
c0023dad:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0023db3:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0023db7:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0023dba:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0023dbe:	ee                   	out    dx,al
c0023dbf:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0023dc5:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0023dc9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0023dcc:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0023dd0:	ee                   	out    dx,al
c0023dd1:	eb 01                	jmp    c0023dd4 <PIC::eoi(unsigned char)+0x90>
c0023dd3:	90                   	nop
c0023dd4:	c9                   	leave  
c0023dd5:	c3                   	ret    

c0023dd6 <PIC::remap()>:
c0023dd6:	55                   	push   ebp
c0023dd7:	89 e5                	mov    ebp,esp
c0023dd9:	83 ec 48             	sub    esp,0x48
c0023ddc:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0023de3:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0023dea:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0023df0:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0023df3:	89 c2                	mov    edx,eax
c0023df5:	ec                   	in     al,dx
c0023df6:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0023df9:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0023dfc:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0023dff:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0023e05:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0023e08:	89 c2                	mov    edx,eax
c0023e0a:	ec                   	in     al,dx
c0023e0b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0023e0e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0023e11:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0023e14:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0023e1a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0023e1e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0023e21:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0023e24:	ee                   	out    dx,al
c0023e25:	83 ec 0c             	sub    esp,0xc
c0023e28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023e2b:	e8 a4 fe ff ff       	call   c0023cd4 <PIC::ioWait()>
c0023e30:	83 c4 10             	add    esp,0x10
c0023e33:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0023e39:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0023e3d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0023e40:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0023e43:	ee                   	out    dx,al
c0023e44:	83 ec 0c             	sub    esp,0xc
c0023e47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023e4a:	e8 85 fe ff ff       	call   c0023cd4 <PIC::ioWait()>
c0023e4f:	83 c4 10             	add    esp,0x10
c0023e52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0023e55:	0f b6 c0             	movzx  eax,al
c0023e58:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0023e5e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0023e61:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0023e64:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0023e67:	ee                   	out    dx,al
c0023e68:	83 ec 0c             	sub    esp,0xc
c0023e6b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023e6e:	e8 61 fe ff ff       	call   c0023cd4 <PIC::ioWait()>
c0023e73:	83 c4 10             	add    esp,0x10
c0023e76:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023e79:	0f b6 c0             	movzx  eax,al
c0023e7c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0023e82:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0023e85:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0023e88:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0023e8b:	ee                   	out    dx,al
c0023e8c:	83 ec 0c             	sub    esp,0xc
c0023e8f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023e92:	e8 3d fe ff ff       	call   c0023cd4 <PIC::ioWait()>
c0023e97:	83 c4 10             	add    esp,0x10
c0023e9a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0023ea0:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0023ea4:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0023ea7:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0023eaa:	ee                   	out    dx,al
c0023eab:	83 ec 0c             	sub    esp,0xc
c0023eae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023eb1:	e8 1e fe ff ff       	call   c0023cd4 <PIC::ioWait()>
c0023eb6:	83 c4 10             	add    esp,0x10
c0023eb9:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0023ebf:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0023ec3:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0023ec6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0023ec9:	ee                   	out    dx,al
c0023eca:	83 ec 0c             	sub    esp,0xc
c0023ecd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023ed0:	e8 ff fd ff ff       	call   c0023cd4 <PIC::ioWait()>
c0023ed5:	83 c4 10             	add    esp,0x10
c0023ed8:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0023ede:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0023ee2:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0023ee5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0023ee8:	ee                   	out    dx,al
c0023ee9:	83 ec 0c             	sub    esp,0xc
c0023eec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023eef:	e8 e0 fd ff ff       	call   c0023cd4 <PIC::ioWait()>
c0023ef4:	83 c4 10             	add    esp,0x10
c0023ef7:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0023efd:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0023f01:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0023f04:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023f07:	ee                   	out    dx,al
c0023f08:	83 ec 0c             	sub    esp,0xc
c0023f0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023f0e:	e8 c1 fd ff ff       	call   c0023cd4 <PIC::ioWait()>
c0023f13:	83 c4 10             	add    esp,0x10
c0023f16:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0023f1a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0023f20:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0023f23:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0023f26:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0023f29:	ee                   	out    dx,al
c0023f2a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0023f2e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0023f34:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0023f37:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0023f3a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0023f3d:	ee                   	out    dx,al
c0023f3e:	90                   	nop
c0023f3f:	c9                   	leave  
c0023f40:	c3                   	ret    
c0023f41:	90                   	nop

c0023f42 <PIC::open(int, int, void*)>:
c0023f42:	55                   	push   ebp
c0023f43:	89 e5                	mov    ebp,esp
c0023f45:	83 ec 18             	sub    esp,0x18
c0023f48:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0023f4e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0023f52:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0023f55:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0023f59:	ee                   	out    dx,al
c0023f5a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0023f60:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0023f64:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0023f67:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0023f6b:	ee                   	out    dx,al
c0023f6c:	83 ec 0c             	sub    esp,0xc
c0023f6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023f72:	e8 5f fe ff ff       	call   c0023dd6 <PIC::remap()>
c0023f77:	83 c4 10             	add    esp,0x10
c0023f7a:	b8 00 00 00 00       	mov    eax,0x0
c0023f7f:	c9                   	leave  
c0023f80:	c3                   	ret    
c0023f81:	90                   	nop

c0023f82 <APICTimer::close(int, int, void*)>:
c0023f82:	b8 00 00 00 00       	mov    eax,0x0
c0023f87:	c3                   	ret    

c0023f88 <apicTimerHandler(regs*, void*)>:
c0023f88:	83 ec 0c             	sub    esp,0xc
c0023f8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0023f91:	99                   	cdq    
c0023f92:	52                   	push   edx
c0023f93:	50                   	push   eax
c0023f94:	6a 00                	push   0x0
c0023f96:	68 00 ca 9a 3b       	push   0x3b9aca00
c0023f9b:	e8 8c 07 00 00       	call   c002472c <__udivdi3>
c0023fa0:	83 c4 10             	add    esp,0x10
c0023fa3:	83 ec 08             	sub    esp,0x8
c0023fa6:	52                   	push   edx
c0023fa7:	50                   	push   eax
c0023fa8:	e8 26 23 ff ff       	call   c00162d3 <timerHandler(unsigned long long)>
c0023fad:	83 c4 10             	add    esp,0x10
c0023fb0:	90                   	nop
c0023fb1:	83 c4 0c             	add    esp,0xc
c0023fb4:	c3                   	ret    
c0023fb5:	90                   	nop

c0023fb6 <APICTimer::write(int)>:
c0023fb6:	53                   	push   ebx
c0023fb7:	83 ec 28             	sub    esp,0x28
c0023fba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023fbe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023fc2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023fc8:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c0023fcd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023fd3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0023fd9:	83 ec 0c             	sub    esp,0xc
c0023fdc:	50                   	push   eax
c0023fdd:	e8 de f4 ff ff       	call   c00234c0 <APIC::getBase()>
c0023fe2:	83 c4 10             	add    esp,0x10
c0023fe5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023fe9:	a1 30 c1 02 c0       	mov    eax,ds:0xc002c130
c0023fee:	8b 15 34 c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c134
c0023ff4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023ff8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023ffc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024000:	05 e0 03 00 00       	add    eax,0x3e0
c0024005:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002400b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002400f:	05 80 03 00 00       	add    eax,0x380
c0024014:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002401a:	fb                   	sti    
c002401b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002401f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024023:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0024028:	83 d2 00             	adc    edx,0x0
c002402b:	89 c1                	mov    ecx,eax
c002402d:	89 d3                	mov    ebx,edx
c002402f:	a1 30 c1 02 c0       	mov    eax,ds:0xc002c130
c0024034:	8b 15 34 c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c134
c002403a:	39 c8                	cmp    eax,ecx
c002403c:	89 d0                	mov    eax,edx
c002403e:	19 d8                	sbb    eax,ebx
c0024040:	73 02                	jae    c0024044 <APICTimer::write(int)+0x8e>
c0024042:	eb d7                	jmp    c002401b <APICTimer::write(int)+0x65>
c0024044:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024048:	05 20 03 00 00       	add    eax,0x320
c002404d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0024053:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024057:	05 90 03 00 00       	add    eax,0x390
c002405c:	8b 00                	mov    eax,DWORD PTR [eax]
c002405e:	f7 d0                	not    eax
c0024060:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024064:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024068:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002406c:	ba 00 00 00 00       	mov    edx,0x0
c0024071:	f7 f3                	div    ebx
c0024073:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024077:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002407b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024081:	0d 00 00 02 00       	or     eax,0x20000
c0024086:	89 c2                	mov    edx,eax
c0024088:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002408c:	05 20 03 00 00       	add    eax,0x320
c0024091:	89 10                	mov    DWORD PTR [eax],edx
c0024093:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024097:	05 e0 03 00 00       	add    eax,0x3e0
c002409c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00240a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00240a6:	05 80 03 00 00       	add    eax,0x380
c00240ab:	89 c2                	mov    edx,eax
c00240ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00240b1:	89 02                	mov    DWORD PTR [edx],eax
c00240b3:	90                   	nop
c00240b4:	83 c4 28             	add    esp,0x28
c00240b7:	5b                   	pop    ebx
c00240b8:	c3                   	ret    
c00240b9:	90                   	nop

c00240ba <APICTimer::open(int, int, void*)>:
c00240ba:	57                   	push   edi
c00240bb:	56                   	push   esi
c00240bc:	53                   	push   ebx
c00240bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00240c3:	83 c0 24             	add    eax,0x24
c00240c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00240c8:	83 ec 08             	sub    esp,0x8
c00240cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00240cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00240d3:	ff d0                	call   eax
c00240d5:	83 c4 10             	add    esp,0x10
c00240d8:	a1 c8 ba 02 c0       	mov    eax,ds:0xc002bac8
c00240dd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00240e3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00240e9:	83 ec 0c             	sub    esp,0xc
c00240ec:	50                   	push   eax
c00240ed:	e8 ce f3 ff ff       	call   c00234c0 <APIC::getBase()>
c00240f2:	83 c4 10             	add    esp,0x10
c00240f5:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00240fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240ff:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024105:	0f b6 f8             	movzx  edi,al
c0024108:	89 d0                	mov    eax,edx
c002410a:	ba 00 00 00 00       	mov    edx,0x0
c002410f:	89 c1                	mov    ecx,eax
c0024111:	80 e5 ff             	and    ch,0xff
c0024114:	89 cb                	mov    ebx,ecx
c0024116:	0f b6 f2             	movzx  esi,dl
c0024119:	89 d8                	mov    eax,ebx
c002411b:	89 f2                	mov    edx,esi
c002411d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024121:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024124:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024128:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002412c:	83 e0 00             	and    eax,0x0
c002412f:	09 d0                	or     eax,edx
c0024131:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024139:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002413f:	8d 50 01             	lea    edx,[eax+0x1]
c0024142:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024146:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002414c:	0f b6 d0             	movzx  edx,al
c002414f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024153:	83 c2 08             	add    edx,0x8
c0024156:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002415a:	0f b6 c9             	movzx  ecx,cl
c002415d:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024163:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002416b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002416f:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024179:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002417d:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0024183:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024187:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002418d:	83 ec 0c             	sub    esp,0xc
c0024190:	51                   	push   ecx
c0024191:	6a 01                	push   0x1
c0024193:	68 88 3f 02 c0       	push   0xc0023f88
c0024198:	52                   	push   edx
c0024199:	50                   	push   eax
c002419a:	e8 71 f8 fe ff       	call   c0013a10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002419f:	83 c4 20             	add    esp,0x20
c00241a2:	89 c2                	mov    edx,eax
c00241a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241a8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00241ae:	b8 00 00 00 00       	mov    eax,0x0
c00241b3:	5b                   	pop    ebx
c00241b4:	5e                   	pop    esi
c00241b5:	5f                   	pop    edi
c00241b6:	c3                   	ret    
c00241b7:	90                   	nop

c00241b8 <APICTimer::APICTimer()>:
c00241b8:	83 ec 0c             	sub    esp,0xc
c00241bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241bf:	83 ec 08             	sub    esp,0x8
c00241c2:	68 e4 a9 02 c0       	push   0xc002a9e4
c00241c7:	50                   	push   eax
c00241c8:	e8 77 20 ff ff       	call   c0016244 <Timer::Timer(char const*)>
c00241cd:	83 c4 10             	add    esp,0x10
c00241d0:	ba f8 a9 02 c0       	mov    edx,0xc002a9f8
c00241d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241d9:	89 10                	mov    DWORD PTR [eax],edx
c00241db:	90                   	nop
c00241dc:	83 c4 0c             	add    esp,0xc
c00241df:	c3                   	ret    

c00241e0 <PIT::write(int)>:
c00241e0:	83 ec 10             	sub    esp,0x10
c00241e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00241e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00241eb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00241f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00241f5:	a3 24 de 02 c0       	mov    ds:0xc002de24,eax
c00241fa:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00241ff:	99                   	cdq    
c0024200:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0024204:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024208:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002420f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0024214:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0024218:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002421d:	ee                   	out    dx,al
c002421e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024222:	0f b6 c0             	movzx  eax,al
c0024225:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002422c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0024230:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0024234:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0024239:	ee                   	out    dx,al
c002423a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002423e:	c1 f8 08             	sar    eax,0x8
c0024241:	0f b6 c0             	movzx  eax,al
c0024244:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002424b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002424f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0024253:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0024258:	ee                   	out    dx,al
c0024259:	90                   	nop
c002425a:	83 c4 10             	add    esp,0x10
c002425d:	c3                   	ret    

c002425e <pitHandler(regs*, void*)>:
c002425e:	83 ec 0c             	sub    esp,0xc
c0024261:	a1 24 de 02 c0       	mov    eax,ds:0xc002de24
c0024266:	99                   	cdq    
c0024267:	52                   	push   edx
c0024268:	50                   	push   eax
c0024269:	6a 00                	push   0x0
c002426b:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024270:	e8 b7 04 00 00       	call   c002472c <__udivdi3>
c0024275:	83 c4 10             	add    esp,0x10
c0024278:	83 ec 08             	sub    esp,0x8
c002427b:	52                   	push   edx
c002427c:	50                   	push   eax
c002427d:	e8 51 20 ff ff       	call   c00162d3 <timerHandler(unsigned long long)>
c0024282:	83 c4 10             	add    esp,0x10
c0024285:	90                   	nop
c0024286:	83 c4 0c             	add    esp,0xc
c0024289:	c3                   	ret    

c002428a <PIT::open(int, int, void*)>:
c002428a:	83 ec 0c             	sub    esp,0xc
c002428d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024291:	8b 00                	mov    eax,DWORD PTR [eax]
c0024293:	83 c0 24             	add    eax,0x24
c0024296:	8b 00                	mov    eax,DWORD PTR [eax]
c0024298:	83 ec 08             	sub    esp,0x8
c002429b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002429f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00242a3:	ff d0                	call   eax
c00242a5:	83 c4 10             	add    esp,0x10
c00242a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242ac:	83 ec 0c             	sub    esp,0xc
c00242af:	6a 00                	push   0x0
c00242b1:	6a 01                	push   0x1
c00242b3:	68 5e 42 02 c0       	push   0xc002425e
c00242b8:	6a 00                	push   0x0
c00242ba:	50                   	push   eax
c00242bb:	e8 50 f7 fe ff       	call   c0013a10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00242c0:	83 c4 20             	add    esp,0x20
c00242c3:	89 c2                	mov    edx,eax
c00242c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242c9:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00242cf:	b8 00 00 00 00       	mov    eax,0x0
c00242d4:	83 c4 0c             	add    esp,0xc
c00242d7:	c3                   	ret    

c00242d8 <PIT::close(int, int, void*)>:
c00242d8:	83 ec 0c             	sub    esp,0xc
c00242db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242df:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00242e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242ed:	6a 01                	push   0x1
c00242ef:	68 5e 42 02 c0       	push   0xc002425e
c00242f4:	6a 00                	push   0x0
c00242f6:	50                   	push   eax
c00242f7:	e8 52 f7 fe ff       	call   c0013a4e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00242fc:	83 c4 10             	add    esp,0x10
c00242ff:	b8 00 00 00 00       	mov    eax,0x0
c0024304:	83 c4 0c             	add    esp,0xc
c0024307:	c3                   	ret    

c0024308 <PIT::PIT()>:
c0024308:	83 ec 0c             	sub    esp,0xc
c002430b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002430f:	83 ec 08             	sub    esp,0x8
c0024312:	68 20 aa 02 c0       	push   0xc002aa20
c0024317:	50                   	push   eax
c0024318:	e8 27 1f ff ff       	call   c0016244 <Timer::Timer(char const*)>
c002431d:	83 c4 10             	add    esp,0x10
c0024320:	ba 48 aa 02 c0       	mov    edx,0xc002aa48
c0024325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024329:	89 10                	mov    DWORD PTR [eax],edx
c002432b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002432f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024335:	0f b6 d0             	movzx  edx,al
c0024338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002433c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0024343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024347:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002434d:	0f b6 d0             	movzx  edx,al
c0024350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024354:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0024359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002435d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024363:	8d 50 01             	lea    edx,[eax+0x1]
c0024366:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002436a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024370:	0f b6 d0             	movzx  edx,al
c0024373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024377:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002437b:	83 e1 3f             	and    ecx,0x3f
c002437e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024382:	90                   	nop
c0024383:	83 c4 0c             	add    esp,0xc
c0024386:	c3                   	ret    
c0024387:	66 90                	xchg   ax,ax
c0024389:	66 90                	xchg   ax,ax
c002438b:	66 90                	xchg   ax,ax
c002438d:	66 90                	xchg   ax,ax
c002438f:	90                   	nop

c0024390 <avxDetect>:
c0024390:	b8 00 00 00 00       	mov    eax,0x0
c0024395:	c3                   	ret    

c0024396 <avxSave>:
c0024396:	c3                   	ret    

c0024397 <avxLoad>:
c0024397:	c3                   	ret    

c0024398 <avxInit>:
c0024398:	c3                   	ret    

c0024399 <avxClose>:
c0024399:	c3                   	ret    

c002439a <wouldSheSayYes>:
c002439a:	c3                   	ret    
c002439b:	49                   	dec    ecx
c002439c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00243a0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00243a4:	75 20                	jne    c00243c6 <sseDetect.noSSE+0x1>
c00243a6:	4e                   	dec    esi
c00243a7:	79 61                	jns    c002440a <x87Detect+0x14>
c00243a9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00243ae:	66 90                	xchg   ax,ax

c00243b0 <absolutelyNoChanceInHell>:
c00243b0:	b8 01 00 00 00       	mov    eax,0x1
c00243b5:	0f a2                	cpuid  
c00243b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00243bd:	74 06                	je     c00243c5 <sseDetect.noSSE>
c00243bf:	b8 01 00 00 00       	mov    eax,0x1
c00243c4:	c3                   	ret    

c00243c5 <sseDetect.noSSE>:
c00243c5:	31 c0                	xor    eax,eax
c00243c7:	c3                   	ret    

c00243c8 <sseSave>:
c00243c8:	0f ae 44 24 08       	fxsave [esp+0x8]
c00243cd:	c3                   	ret    

c00243ce <sseLoad>:
c00243ce:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00243d3:	c3                   	ret    

c00243d4 <sseInit>:
c00243d4:	e8 43 00 00 00       	call   c002441c <x87Init>
c00243d9:	0f 20 e0             	mov    eax,cr4
c00243dc:	66 0d 00 06          	or     ax,0x600
c00243e0:	0f 22 e0             	mov    cr4,eax
c00243e3:	c3                   	ret    

c00243e4 <sseClose>:
c00243e4:	c3                   	ret    
c00243e5:	66 90                	xchg   ax,ax
c00243e7:	66 90                	xchg   ax,ax
c00243e9:	66 90                	xchg   ax,ax
c00243eb:	66 90                	xchg   ax,ax
c00243ed:	66 90                	xchg   ax,ax
c00243ef:	90                   	nop

c00243f0 <value_37F>:
c00243f0:	7f 03                	jg     c00243f5 <value_37A+0x1>

c00243f2 <value_37E>:
c00243f2:	7e 03                	jle    c00243f7 <x87Detect+0x1>

c00243f4 <value_37A>:
c00243f4:	7a 03                	jp     c00243f9 <x87Detect+0x3>

c00243f6 <x87Detect>:
c00243f6:	b8 01 00 00 00       	mov    eax,0x1
c00243fb:	0f a2                	cpuid  
c00243fd:	f7 c2 01 00 00 00    	test   edx,0x1
c0024403:	74 06                	je     c002440b <x87Detect.nox87>
c0024405:	b8 01 00 00 00       	mov    eax,0x1
c002440a:	c3                   	ret    

c002440b <x87Detect.nox87>:
c002440b:	b8 00 00 00 00       	mov    eax,0x0
c0024410:	c3                   	ret    

c0024411 <x87Save>:
c0024411:	9b dd 74 24 08       	fsave  [esp+0x8]
c0024416:	c3                   	ret    

c0024417 <x87Load>:
c0024417:	dd 64 24 08          	frstor [esp+0x8]
c002441b:	c3                   	ret    

c002441c <x87Init>:
c002441c:	9b db e3             	finit  
c002441f:	0f 20 c0             	mov    eax,cr0
c0024422:	66 25 fb ff          	and    ax,0xfffb
c0024426:	66 0d 22 00          	or     ax,0x22
c002442a:	0f 22 c0             	mov    cr0,eax
c002442d:	0f 06                	clts   
c002442f:	d9 2d f4 43 02 c0    	fldcw  WORD PTR ds:0xc00243f4
c0024435:	c3                   	ret    

c0024436 <x87Close>:
c0024436:	c3                   	ret    
c0024437:	90                   	nop

c0024438 <__do_global_ctors_aux>:
c0024438:	a1 2c 6f 02 c0       	mov    eax,ds:0xc0026f2c
c002443d:	83 f8 ff             	cmp    eax,0xffffffff
c0024440:	74 1a                	je     c002445c <__do_global_ctors_aux+0x24>
c0024442:	55                   	push   ebp
c0024443:	89 e5                	mov    ebp,esp
c0024445:	53                   	push   ebx
c0024446:	52                   	push   edx
c0024447:	bb 2c 6f 02 c0       	mov    ebx,0xc0026f2c
c002444c:	ff d0                	call   eax
c002444e:	83 eb 04             	sub    ebx,0x4
c0024451:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024453:	83 f8 ff             	cmp    eax,0xffffffff
c0024456:	75 f4                	jne    c002444c <__do_global_ctors_aux+0x14>
c0024458:	58                   	pop    eax
c0024459:	5b                   	pop    ebx
c002445a:	5d                   	pop    ebp
c002445b:	c3                   	ret    
c002445c:	c3                   	ret    
c002445d:	66 90                	xchg   ax,ax
c002445f:	90                   	nop

c0024460 <__divdi3>:
c0024460:	55                   	push   ebp
c0024461:	57                   	push   edi
c0024462:	56                   	push   esi
c0024463:	53                   	push   ebx
c0024464:	83 ec 1c             	sub    esp,0x1c
c0024467:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002446b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002446f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0024472:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0024476:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002447a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002447e:	85 db                	test   ebx,ebx
c0024480:	0f 88 8e 00 00 00    	js     c0024514 <__divdi3+0xb4>
c0024486:	89 dd                	mov    ebp,ebx
c0024488:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0024490:	89 d3                	mov    ebx,edx
c0024492:	85 d2                	test   edx,edx
c0024494:	79 0d                	jns    c00244a3 <__divdi3+0x43>
c0024496:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002449a:	f7 d8                	neg    eax
c002449c:	83 d2 00             	adc    edx,0x0
c002449f:	f7 da                	neg    edx
c00244a1:	89 d3                	mov    ebx,edx
c00244a3:	89 c7                	mov    edi,eax
c00244a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00244a8:	85 db                	test   ebx,ebx
c00244aa:	75 48                	jne    c00244f4 <__divdi3+0x94>
c00244ac:	39 ef                	cmp    edi,ebp
c00244ae:	76 24                	jbe    c00244d4 <__divdi3+0x74>
c00244b0:	89 ea                	mov    edx,ebp
c00244b2:	f7 f7                	div    edi
c00244b4:	89 c1                	mov    ecx,eax
c00244b6:	31 f6                	xor    esi,esi
c00244b8:	89 c8                	mov    eax,ecx
c00244ba:	89 f2                	mov    edx,esi
c00244bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00244c0:	85 c9                	test   ecx,ecx
c00244c2:	74 07                	je     c00244cb <__divdi3+0x6b>
c00244c4:	f7 d8                	neg    eax
c00244c6:	83 d2 00             	adc    edx,0x0
c00244c9:	f7 da                	neg    edx
c00244cb:	83 c4 1c             	add    esp,0x1c
c00244ce:	5b                   	pop    ebx
c00244cf:	5e                   	pop    esi
c00244d0:	5f                   	pop    edi
c00244d1:	5d                   	pop    ebp
c00244d2:	c3                   	ret    
c00244d3:	90                   	nop
c00244d4:	85 ff                	test   edi,edi
c00244d6:	75 0b                	jne    c00244e3 <__divdi3+0x83>
c00244d8:	b8 01 00 00 00       	mov    eax,0x1
c00244dd:	31 d2                	xor    edx,edx
c00244df:	f7 f3                	div    ebx
c00244e1:	89 c7                	mov    edi,eax
c00244e3:	31 d2                	xor    edx,edx
c00244e5:	89 e8                	mov    eax,ebp
c00244e7:	f7 f7                	div    edi
c00244e9:	89 c6                	mov    esi,eax
c00244eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00244ee:	f7 f7                	div    edi
c00244f0:	89 c1                	mov    ecx,eax
c00244f2:	eb c4                	jmp    c00244b8 <__divdi3+0x58>
c00244f4:	39 eb                	cmp    ebx,ebp
c00244f6:	77 3c                	ja     c0024534 <__divdi3+0xd4>
c00244f8:	0f bd f3             	bsr    esi,ebx
c00244fb:	83 f6 1f             	xor    esi,0x1f
c00244fe:	75 40                	jne    c0024540 <__divdi3+0xe0>
c0024500:	39 eb                	cmp    ebx,ebp
c0024502:	72 09                	jb     c002450d <__divdi3+0xad>
c0024504:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0024507:	0f 87 97 00 00 00    	ja     c00245a4 <__divdi3+0x144>
c002450d:	b9 01 00 00 00       	mov    ecx,0x1
c0024512:	eb a4                	jmp    c00244b8 <__divdi3+0x58>
c0024514:	f7 d9                	neg    ecx
c0024516:	83 d3 00             	adc    ebx,0x0
c0024519:	f7 db                	neg    ebx
c002451b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002451e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0024522:	89 dd                	mov    ebp,ebx
c0024524:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002452c:	e9 5f ff ff ff       	jmp    c0024490 <__divdi3+0x30>
c0024531:	8d 76 00             	lea    esi,[esi+0x0]
c0024534:	31 f6                	xor    esi,esi
c0024536:	31 c9                	xor    ecx,ecx
c0024538:	e9 7b ff ff ff       	jmp    c00244b8 <__divdi3+0x58>
c002453d:	8d 76 00             	lea    esi,[esi+0x0]
c0024540:	b8 20 00 00 00       	mov    eax,0x20
c0024545:	29 f0                	sub    eax,esi
c0024547:	89 f1                	mov    ecx,esi
c0024549:	d3 e3                	shl    ebx,cl
c002454b:	89 fa                	mov    edx,edi
c002454d:	88 c1                	mov    cl,al
c002454f:	d3 ea                	shr    edx,cl
c0024551:	09 da                	or     edx,ebx
c0024553:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024557:	89 f1                	mov    ecx,esi
c0024559:	d3 e7                	shl    edi,cl
c002455b:	89 eb                	mov    ebx,ebp
c002455d:	88 c1                	mov    cl,al
c002455f:	d3 eb                	shr    ebx,cl
c0024561:	89 f1                	mov    ecx,esi
c0024563:	d3 e5                	shl    ebp,cl
c0024565:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0024568:	88 c1                	mov    cl,al
c002456a:	d3 ea                	shr    edx,cl
c002456c:	09 d5                	or     ebp,edx
c002456e:	89 e8                	mov    eax,ebp
c0024570:	89 da                	mov    edx,ebx
c0024572:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0024576:	89 d3                	mov    ebx,edx
c0024578:	89 c5                	mov    ebp,eax
c002457a:	f7 e7                	mul    edi
c002457c:	39 d3                	cmp    ebx,edx
c002457e:	72 18                	jb     c0024598 <__divdi3+0x138>
c0024580:	74 0a                	je     c002458c <__divdi3+0x12c>
c0024582:	89 e9                	mov    ecx,ebp
c0024584:	31 f6                	xor    esi,esi
c0024586:	e9 2d ff ff ff       	jmp    c00244b8 <__divdi3+0x58>
c002458b:	90                   	nop
c002458c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002458f:	89 f1                	mov    ecx,esi
c0024591:	d3 e7                	shl    edi,cl
c0024593:	39 c7                	cmp    edi,eax
c0024595:	73 eb                	jae    c0024582 <__divdi3+0x122>
c0024597:	90                   	nop
c0024598:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002459b:	31 f6                	xor    esi,esi
c002459d:	e9 16 ff ff ff       	jmp    c00244b8 <__divdi3+0x58>
c00245a2:	66 90                	xchg   ax,ax
c00245a4:	31 c9                	xor    ecx,ecx
c00245a6:	e9 0d ff ff ff       	jmp    c00244b8 <__divdi3+0x58>
c00245ab:	90                   	nop

c00245ac <__moddi3>:
c00245ac:	55                   	push   ebp
c00245ad:	57                   	push   edi
c00245ae:	56                   	push   esi
c00245af:	53                   	push   ebx
c00245b0:	83 ec 2c             	sub    esp,0x2c
c00245b3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00245b7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00245bb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00245bf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00245c3:	85 db                	test   ebx,ebx
c00245c5:	0f 88 85 00 00 00    	js     c0024650 <__moddi3+0xa4>
c00245cb:	89 de                	mov    esi,ebx
c00245cd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00245d5:	89 d7                	mov    edi,edx
c00245d7:	85 d2                	test   edx,edx
c00245d9:	79 09                	jns    c00245e4 <__moddi3+0x38>
c00245db:	f7 d8                	neg    eax
c00245dd:	83 d2 00             	adc    edx,0x0
c00245e0:	f7 da                	neg    edx
c00245e2:	89 d7                	mov    edi,edx
c00245e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00245e8:	89 cd                	mov    ebp,ecx
c00245ea:	85 ff                	test   edi,edi
c00245ec:	75 52                	jne    c0024640 <__moddi3+0x94>
c00245ee:	89 c3                	mov    ebx,eax
c00245f0:	39 f0                	cmp    eax,esi
c00245f2:	76 24                	jbe    c0024618 <__moddi3+0x6c>
c00245f4:	89 c8                	mov    eax,ecx
c00245f6:	89 f2                	mov    edx,esi
c00245f8:	f7 f3                	div    ebx
c00245fa:	89 d6                	mov    esi,edx
c00245fc:	89 f0                	mov    eax,esi
c00245fe:	31 d2                	xor    edx,edx
c0024600:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024604:	85 c9                	test   ecx,ecx
c0024606:	74 07                	je     c002460f <__moddi3+0x63>
c0024608:	f7 d8                	neg    eax
c002460a:	83 d2 00             	adc    edx,0x0
c002460d:	f7 da                	neg    edx
c002460f:	83 c4 2c             	add    esp,0x2c
c0024612:	5b                   	pop    ebx
c0024613:	5e                   	pop    esi
c0024614:	5f                   	pop    edi
c0024615:	5d                   	pop    ebp
c0024616:	c3                   	ret    
c0024617:	90                   	nop
c0024618:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002461c:	85 db                	test   ebx,ebx
c002461e:	75 0d                	jne    c002462d <__moddi3+0x81>
c0024620:	b8 01 00 00 00       	mov    eax,0x1
c0024625:	31 d2                	xor    edx,edx
c0024627:	f7 f7                	div    edi
c0024629:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002462d:	89 f0                	mov    eax,esi
c002462f:	31 d2                	xor    edx,edx
c0024631:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0024635:	f7 f7                	div    edi
c0024637:	89 e8                	mov    eax,ebp
c0024639:	f7 f7                	div    edi
c002463b:	89 d6                	mov    esi,edx
c002463d:	eb bd                	jmp    c00245fc <__moddi3+0x50>
c002463f:	90                   	nop
c0024640:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0024644:	39 f7                	cmp    edi,esi
c0024646:	76 20                	jbe    c0024668 <__moddi3+0xbc>
c0024648:	89 c8                	mov    eax,ecx
c002464a:	89 f2                	mov    edx,esi
c002464c:	eb b2                	jmp    c0024600 <__moddi3+0x54>
c002464e:	66 90                	xchg   ax,ax
c0024650:	f7 d9                	neg    ecx
c0024652:	83 d3 00             	adc    ebx,0x0
c0024655:	f7 db                	neg    ebx
c0024657:	89 de                	mov    esi,ebx
c0024659:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0024661:	e9 6f ff ff ff       	jmp    c00245d5 <__moddi3+0x29>
c0024666:	66 90                	xchg   ax,ax
c0024668:	0f bd c7             	bsr    eax,edi
c002466b:	83 f0 1f             	xor    eax,0x1f
c002466e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024672:	75 24                	jne    c0024698 <__moddi3+0xec>
c0024674:	39 f7                	cmp    edi,esi
c0024676:	72 06                	jb     c002467e <__moddi3+0xd2>
c0024678:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002467c:	77 0c                	ja     c002468a <__moddi3+0xde>
c002467e:	89 e9                	mov    ecx,ebp
c0024680:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0024684:	19 fe                	sbb    esi,edi
c0024686:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002468a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002468e:	89 f2                	mov    edx,esi
c0024690:	e9 6b ff ff ff       	jmp    c0024600 <__moddi3+0x54>
c0024695:	8d 76 00             	lea    esi,[esi+0x0]
c0024698:	b8 20 00 00 00       	mov    eax,0x20
c002469d:	89 c2                	mov    edx,eax
c002469f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00246a3:	29 da                	sub    edx,ebx
c00246a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00246a9:	88 d9                	mov    cl,bl
c00246ab:	d3 e7                	shl    edi,cl
c00246ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00246b1:	88 d1                	mov    cl,dl
c00246b3:	d3 e8                	shr    eax,cl
c00246b5:	09 c7                	or     edi,eax
c00246b7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00246bb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00246bf:	89 d8                	mov    eax,ebx
c00246c1:	88 d9                	mov    cl,bl
c00246c3:	d3 e7                	shl    edi,cl
c00246c5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00246c9:	89 f3                	mov    ebx,esi
c00246cb:	88 d1                	mov    cl,dl
c00246cd:	d3 eb                	shr    ebx,cl
c00246cf:	89 c7                	mov    edi,eax
c00246d1:	88 c1                	mov    cl,al
c00246d3:	d3 e6                	shl    esi,cl
c00246d5:	89 e8                	mov    eax,ebp
c00246d7:	88 d1                	mov    cl,dl
c00246d9:	d3 e8                	shr    eax,cl
c00246db:	09 f0                	or     eax,esi
c00246dd:	89 f9                	mov    ecx,edi
c00246df:	d3 e5                	shl    ebp,cl
c00246e1:	89 da                	mov    edx,ebx
c00246e3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00246e7:	89 d3                	mov    ebx,edx
c00246e9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00246ed:	89 c6                	mov    esi,eax
c00246ef:	89 d1                	mov    ecx,edx
c00246f1:	39 d3                	cmp    ebx,edx
c00246f3:	72 27                	jb     c002471c <__moddi3+0x170>
c00246f5:	74 21                	je     c0024718 <__moddi3+0x16c>
c00246f7:	29 f5                	sub    ebp,esi
c00246f9:	19 cb                	sbb    ebx,ecx
c00246fb:	89 de                	mov    esi,ebx
c00246fd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0024701:	d3 e6                	shl    esi,cl
c0024703:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0024707:	89 f9                	mov    ecx,edi
c0024709:	d3 ed                	shr    ebp,cl
c002470b:	09 ee                	or     esi,ebp
c002470d:	89 f0                	mov    eax,esi
c002470f:	d3 eb                	shr    ebx,cl
c0024711:	89 da                	mov    edx,ebx
c0024713:	e9 e8 fe ff ff       	jmp    c0024600 <__moddi3+0x54>
c0024718:	39 c5                	cmp    ebp,eax
c002471a:	73 db                	jae    c00246f7 <__moddi3+0x14b>
c002471c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0024720:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0024724:	89 d1                	mov    ecx,edx
c0024726:	89 c6                	mov    esi,eax
c0024728:	eb cd                	jmp    c00246f7 <__moddi3+0x14b>
c002472a:	66 90                	xchg   ax,ax

c002472c <__udivdi3>:
c002472c:	55                   	push   ebp
c002472d:	57                   	push   edi
c002472e:	56                   	push   esi
c002472f:	53                   	push   ebx
c0024730:	83 ec 1c             	sub    esp,0x1c
c0024733:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024737:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002473b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002473f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024743:	85 d2                	test   edx,edx
c0024745:	75 41                	jne    c0024788 <__udivdi3+0x5c>
c0024747:	39 f7                	cmp    edi,esi
c0024749:	76 15                	jbe    c0024760 <__udivdi3+0x34>
c002474b:	89 e8                	mov    eax,ebp
c002474d:	89 f2                	mov    edx,esi
c002474f:	f7 f7                	div    edi
c0024751:	31 db                	xor    ebx,ebx
c0024753:	89 da                	mov    edx,ebx
c0024755:	83 c4 1c             	add    esp,0x1c
c0024758:	5b                   	pop    ebx
c0024759:	5e                   	pop    esi
c002475a:	5f                   	pop    edi
c002475b:	5d                   	pop    ebp
c002475c:	c3                   	ret    
c002475d:	8d 76 00             	lea    esi,[esi+0x0]
c0024760:	89 f9                	mov    ecx,edi
c0024762:	85 ff                	test   edi,edi
c0024764:	75 0b                	jne    c0024771 <__udivdi3+0x45>
c0024766:	b8 01 00 00 00       	mov    eax,0x1
c002476b:	31 d2                	xor    edx,edx
c002476d:	f7 f7                	div    edi
c002476f:	89 c1                	mov    ecx,eax
c0024771:	31 d2                	xor    edx,edx
c0024773:	89 f0                	mov    eax,esi
c0024775:	f7 f1                	div    ecx
c0024777:	89 c3                	mov    ebx,eax
c0024779:	89 e8                	mov    eax,ebp
c002477b:	f7 f1                	div    ecx
c002477d:	89 da                	mov    edx,ebx
c002477f:	83 c4 1c             	add    esp,0x1c
c0024782:	5b                   	pop    ebx
c0024783:	5e                   	pop    esi
c0024784:	5f                   	pop    edi
c0024785:	5d                   	pop    ebp
c0024786:	c3                   	ret    
c0024787:	90                   	nop
c0024788:	39 f2                	cmp    edx,esi
c002478a:	77 1c                	ja     c00247a8 <__udivdi3+0x7c>
c002478c:	0f bd da             	bsr    ebx,edx
c002478f:	83 f3 1f             	xor    ebx,0x1f
c0024792:	75 24                	jne    c00247b8 <__udivdi3+0x8c>
c0024794:	39 f2                	cmp    edx,esi
c0024796:	72 08                	jb     c00247a0 <__udivdi3+0x74>
c0024798:	39 ef                	cmp    edi,ebp
c002479a:	0f 87 84 00 00 00    	ja     c0024824 <__udivdi3+0xf8>
c00247a0:	b8 01 00 00 00       	mov    eax,0x1
c00247a5:	eb ac                	jmp    c0024753 <__udivdi3+0x27>
c00247a7:	90                   	nop
c00247a8:	31 db                	xor    ebx,ebx
c00247aa:	31 c0                	xor    eax,eax
c00247ac:	89 da                	mov    edx,ebx
c00247ae:	83 c4 1c             	add    esp,0x1c
c00247b1:	5b                   	pop    ebx
c00247b2:	5e                   	pop    esi
c00247b3:	5f                   	pop    edi
c00247b4:	5d                   	pop    ebp
c00247b5:	c3                   	ret    
c00247b6:	66 90                	xchg   ax,ax
c00247b8:	b8 20 00 00 00       	mov    eax,0x20
c00247bd:	29 d8                	sub    eax,ebx
c00247bf:	88 d9                	mov    cl,bl
c00247c1:	d3 e2                	shl    edx,cl
c00247c3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00247c7:	89 fa                	mov    edx,edi
c00247c9:	88 c1                	mov    cl,al
c00247cb:	d3 ea                	shr    edx,cl
c00247cd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00247d1:	09 d1                	or     ecx,edx
c00247d3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00247d7:	88 d9                	mov    cl,bl
c00247d9:	d3 e7                	shl    edi,cl
c00247db:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00247df:	89 f7                	mov    edi,esi
c00247e1:	88 c1                	mov    cl,al
c00247e3:	d3 ef                	shr    edi,cl
c00247e5:	88 d9                	mov    cl,bl
c00247e7:	d3 e6                	shl    esi,cl
c00247e9:	89 ea                	mov    edx,ebp
c00247eb:	88 c1                	mov    cl,al
c00247ed:	d3 ea                	shr    edx,cl
c00247ef:	09 d6                	or     esi,edx
c00247f1:	89 f0                	mov    eax,esi
c00247f3:	89 fa                	mov    edx,edi
c00247f5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00247f9:	89 d7                	mov    edi,edx
c00247fb:	89 c6                	mov    esi,eax
c00247fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0024801:	39 d7                	cmp    edi,edx
c0024803:	72 13                	jb     c0024818 <__udivdi3+0xec>
c0024805:	74 09                	je     c0024810 <__udivdi3+0xe4>
c0024807:	89 f0                	mov    eax,esi
c0024809:	31 db                	xor    ebx,ebx
c002480b:	e9 43 ff ff ff       	jmp    c0024753 <__udivdi3+0x27>
c0024810:	88 d9                	mov    cl,bl
c0024812:	d3 e5                	shl    ebp,cl
c0024814:	39 c5                	cmp    ebp,eax
c0024816:	73 ef                	jae    c0024807 <__udivdi3+0xdb>
c0024818:	8d 46 ff             	lea    eax,[esi-0x1]
c002481b:	31 db                	xor    ebx,ebx
c002481d:	e9 31 ff ff ff       	jmp    c0024753 <__udivdi3+0x27>
c0024822:	66 90                	xchg   ax,ax
c0024824:	31 c0                	xor    eax,eax
c0024826:	e9 28 ff ff ff       	jmp    c0024753 <__udivdi3+0x27>
c002482b:	90                   	nop

c002482c <__umoddi3>:
c002482c:	55                   	push   ebp
c002482d:	57                   	push   edi
c002482e:	56                   	push   esi
c002482f:	53                   	push   ebx
c0024830:	83 ec 1c             	sub    esp,0x1c
c0024833:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024837:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002483b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002483f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024843:	89 da                	mov    edx,ebx
c0024845:	85 c0                	test   eax,eax
c0024847:	75 37                	jne    c0024880 <__umoddi3+0x54>
c0024849:	39 df                	cmp    edi,ebx
c002484b:	76 13                	jbe    c0024860 <__umoddi3+0x34>
c002484d:	89 f0                	mov    eax,esi
c002484f:	f7 f7                	div    edi
c0024851:	89 d0                	mov    eax,edx
c0024853:	31 d2                	xor    edx,edx
c0024855:	83 c4 1c             	add    esp,0x1c
c0024858:	5b                   	pop    ebx
c0024859:	5e                   	pop    esi
c002485a:	5f                   	pop    edi
c002485b:	5d                   	pop    ebp
c002485c:	c3                   	ret    
c002485d:	8d 76 00             	lea    esi,[esi+0x0]
c0024860:	89 fd                	mov    ebp,edi
c0024862:	85 ff                	test   edi,edi
c0024864:	75 0b                	jne    c0024871 <__umoddi3+0x45>
c0024866:	b8 01 00 00 00       	mov    eax,0x1
c002486b:	31 d2                	xor    edx,edx
c002486d:	f7 f7                	div    edi
c002486f:	89 c5                	mov    ebp,eax
c0024871:	89 d8                	mov    eax,ebx
c0024873:	31 d2                	xor    edx,edx
c0024875:	f7 f5                	div    ebp
c0024877:	89 f0                	mov    eax,esi
c0024879:	f7 f5                	div    ebp
c002487b:	89 d0                	mov    eax,edx
c002487d:	eb d4                	jmp    c0024853 <__umoddi3+0x27>
c002487f:	90                   	nop
c0024880:	89 f1                	mov    ecx,esi
c0024882:	39 d8                	cmp    eax,ebx
c0024884:	76 0a                	jbe    c0024890 <__umoddi3+0x64>
c0024886:	89 f0                	mov    eax,esi
c0024888:	83 c4 1c             	add    esp,0x1c
c002488b:	5b                   	pop    ebx
c002488c:	5e                   	pop    esi
c002488d:	5f                   	pop    edi
c002488e:	5d                   	pop    ebp
c002488f:	c3                   	ret    
c0024890:	0f bd e8             	bsr    ebp,eax
c0024893:	83 f5 1f             	xor    ebp,0x1f
c0024896:	75 1c                	jne    c00248b4 <__umoddi3+0x88>
c0024898:	39 d8                	cmp    eax,ebx
c002489a:	72 04                	jb     c00248a0 <__umoddi3+0x74>
c002489c:	39 f7                	cmp    edi,esi
c002489e:	77 08                	ja     c00248a8 <__umoddi3+0x7c>
c00248a0:	89 da                	mov    edx,ebx
c00248a2:	29 fe                	sub    esi,edi
c00248a4:	19 c2                	sbb    edx,eax
c00248a6:	89 f1                	mov    ecx,esi
c00248a8:	89 c8                	mov    eax,ecx
c00248aa:	83 c4 1c             	add    esp,0x1c
c00248ad:	5b                   	pop    ebx
c00248ae:	5e                   	pop    esi
c00248af:	5f                   	pop    edi
c00248b0:	5d                   	pop    ebp
c00248b1:	c3                   	ret    
c00248b2:	66 90                	xchg   ax,ax
c00248b4:	ba 20 00 00 00       	mov    edx,0x20
c00248b9:	29 ea                	sub    edx,ebp
c00248bb:	89 e9                	mov    ecx,ebp
c00248bd:	d3 e0                	shl    eax,cl
c00248bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00248c3:	89 f8                	mov    eax,edi
c00248c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00248c9:	88 d1                	mov    cl,dl
c00248cb:	d3 e8                	shr    eax,cl
c00248cd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00248d1:	09 c1                	or     ecx,eax
c00248d3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00248d7:	89 e9                	mov    ecx,ebp
c00248d9:	d3 e7                	shl    edi,cl
c00248db:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00248df:	89 d8                	mov    eax,ebx
c00248e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00248e5:	88 d1                	mov    cl,dl
c00248e7:	d3 e8                	shr    eax,cl
c00248e9:	89 c7                	mov    edi,eax
c00248eb:	89 e9                	mov    ecx,ebp
c00248ed:	d3 e3                	shl    ebx,cl
c00248ef:	89 f0                	mov    eax,esi
c00248f1:	88 d1                	mov    cl,dl
c00248f3:	d3 e8                	shr    eax,cl
c00248f5:	09 d8                	or     eax,ebx
c00248f7:	89 e9                	mov    ecx,ebp
c00248f9:	d3 e6                	shl    esi,cl
c00248fb:	89 f3                	mov    ebx,esi
c00248fd:	89 fa                	mov    edx,edi
c00248ff:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0024903:	89 d1                	mov    ecx,edx
c0024905:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0024909:	89 c6                	mov    esi,eax
c002490b:	89 d7                	mov    edi,edx
c002490d:	39 d1                	cmp    ecx,edx
c002490f:	72 27                	jb     c0024938 <__umoddi3+0x10c>
c0024911:	74 21                	je     c0024934 <__umoddi3+0x108>
c0024913:	89 ca                	mov    edx,ecx
c0024915:	29 f3                	sub    ebx,esi
c0024917:	19 fa                	sbb    edx,edi
c0024919:	89 d0                	mov    eax,edx
c002491b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002491f:	d3 e0                	shl    eax,cl
c0024921:	89 e9                	mov    ecx,ebp
c0024923:	d3 eb                	shr    ebx,cl
c0024925:	09 d8                	or     eax,ebx
c0024927:	d3 ea                	shr    edx,cl
c0024929:	83 c4 1c             	add    esp,0x1c
c002492c:	5b                   	pop    ebx
c002492d:	5e                   	pop    esi
c002492e:	5f                   	pop    edi
c002492f:	5d                   	pop    ebp
c0024930:	c3                   	ret    
c0024931:	8d 76 00             	lea    esi,[esi+0x0]
c0024934:	39 c3                	cmp    ebx,eax
c0024936:	73 db                	jae    c0024913 <__umoddi3+0xe7>
c0024938:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002493c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0024940:	89 d7                	mov    edi,edx
c0024942:	89 c6                	mov    esi,eax
c0024944:	eb cd                	jmp    c0024913 <__umoddi3+0xe7>

c0024946 <__addsf3>:
c0024946:	55                   	push   ebp
c0024947:	89 e5                	mov    ebp,esp
c0024949:	57                   	push   edi
c002494a:	56                   	push   esi
c002494b:	53                   	push   ebx
c002494c:	83 ec 08             	sub    esp,0x8
c002494f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024952:	89 fa                	mov    edx,edi
c0024954:	89 f8                	mov    eax,edi
c0024956:	c1 f8 17             	sar    eax,0x17
c0024959:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002495c:	c1 e2 08             	shl    edx,0x8
c002495f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0024965:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0024968:	89 de                	mov    esi,ebx
c002496a:	c1 fe 17             	sar    esi,0x17
c002496d:	c1 e3 08             	shl    ebx,0x8
c0024970:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0024976:	31 f0                	xor    eax,esi
c0024978:	0f 88 3b 01 00 00    	js     c0024ab9 <__addsf3+0x173>
c002497e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0024981:	29 f1                	sub    ecx,esi
c0024983:	85 c9                	test   ecx,ecx
c0024985:	7e 54                	jle    c00249db <__addsf3+0x95>
c0024987:	89 f0                	mov    eax,esi
c0024989:	84 c0                	test   al,al
c002498b:	75 10                	jne    c002499d <__addsf3+0x57>
c002498d:	85 db                	test   ebx,ebx
c002498f:	0f 84 aa 02 00 00    	je     c0024c3f <__addsf3+0x2f9>
c0024995:	49                   	dec    ecx
c0024996:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0024999:	74 38                	je     c00249d3 <__addsf3+0x8d>
c002499b:	eb 13                	jmp    c00249b0 <__addsf3+0x6a>
c002499d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00249a0:	f7 d0                	not    eax
c00249a2:	84 c0                	test   al,al
c00249a4:	0f 84 95 02 00 00    	je     c0024c3f <__addsf3+0x2f9>
c00249aa:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00249b0:	83 f9 1f             	cmp    ecx,0x1f
c00249b3:	0f 8f 86 02 00 00    	jg     c0024c3f <__addsf3+0x2f9>
c00249b9:	89 de                	mov    esi,ebx
c00249bb:	d3 ee                	shr    esi,cl
c00249bd:	b8 20 00 00 00       	mov    eax,0x20
c00249c2:	29 c8                	sub    eax,ecx
c00249c4:	89 c1                	mov    ecx,eax
c00249c6:	d3 e3                	shl    ebx,cl
c00249c8:	31 c0                	xor    eax,eax
c00249ca:	85 db                	test   ebx,ebx
c00249cc:	0f 95 c0             	setne  al
c00249cf:	09 f0                	or     eax,esi
c00249d1:	01 d0                	add    eax,edx
c00249d3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00249d6:	e9 b6 00 00 00       	jmp    c0024a91 <__addsf3+0x14b>
c00249db:	74 5c                	je     c0024a39 <__addsf3+0xf3>
c00249dd:	89 f1                	mov    ecx,esi
c00249df:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00249e2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00249e5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00249e9:	75 14                	jne    c00249ff <__addsf3+0xb9>
c00249eb:	85 d2                	test   edx,edx
c00249ed:	0f 84 4c 02 00 00    	je     c0024c3f <__addsf3+0x2f9>
c00249f3:	49                   	dec    ecx
c00249f4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00249f7:	0f 84 94 00 00 00    	je     c0024a91 <__addsf3+0x14b>
c00249fd:	eb 12                	jmp    c0024a11 <__addsf3+0xcb>
c00249ff:	89 f0                	mov    eax,esi
c0024a01:	f7 d0                	not    eax
c0024a03:	84 c0                	test   al,al
c0024a05:	0f 84 34 02 00 00    	je     c0024c3f <__addsf3+0x2f9>
c0024a0b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024a11:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0024a14:	83 f9 1f             	cmp    ecx,0x1f
c0024a17:	0f 8f 22 02 00 00    	jg     c0024c3f <__addsf3+0x2f9>
c0024a1d:	89 d7                	mov    edi,edx
c0024a1f:	d3 ef                	shr    edi,cl
c0024a21:	b8 20 00 00 00       	mov    eax,0x20
c0024a26:	29 c8                	sub    eax,ecx
c0024a28:	89 c1                	mov    ecx,eax
c0024a2a:	d3 e2                	shl    edx,cl
c0024a2c:	31 c0                	xor    eax,eax
c0024a2e:	85 d2                	test   edx,edx
c0024a30:	0f 95 c0             	setne  al
c0024a33:	09 f8                	or     eax,edi
c0024a35:	01 d8                	add    eax,ebx
c0024a37:	eb 58                	jmp    c0024a91 <__addsf3+0x14b>
c0024a39:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024a3c:	8d 70 01             	lea    esi,[eax+0x1]
c0024a3f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0024a45:	75 32                	jne    c0024a79 <__addsf3+0x133>
c0024a47:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0024a4b:	75 1f                	jne    c0024a6c <__addsf3+0x126>
c0024a4d:	85 d2                	test   edx,edx
c0024a4f:	0f 84 e0 01 00 00    	je     c0024c35 <__addsf3+0x2ef>
c0024a55:	85 db                	test   ebx,ebx
c0024a57:	0f 84 e2 01 00 00    	je     c0024c3f <__addsf3+0x2f9>
c0024a5d:	89 d0                	mov    eax,edx
c0024a5f:	01 d8                	add    eax,ebx
c0024a61:	0f 89 a9 01 00 00    	jns    c0024c10 <__addsf3+0x2ca>
c0024a67:	e9 9d 01 00 00       	jmp    c0024c09 <__addsf3+0x2c3>
c0024a6c:	85 d2                	test   edx,edx
c0024a6e:	0f 85 cb 01 00 00    	jne    c0024c3f <__addsf3+0x2f9>
c0024a74:	e9 bc 01 00 00       	jmp    c0024c35 <__addsf3+0x2ef>
c0024a79:	31 c0                	xor    eax,eax
c0024a7b:	89 f1                	mov    ecx,esi
c0024a7d:	f7 d1                	not    ecx
c0024a7f:	84 c9                	test   cl,cl
c0024a81:	0f 84 90 01 00 00    	je     c0024c17 <__addsf3+0x2d1>
c0024a87:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0024a8a:	d1 e8                	shr    eax,1
c0024a8c:	e9 86 01 00 00       	jmp    c0024c17 <__addsf3+0x2d1>
c0024a91:	85 c0                	test   eax,eax
c0024a93:	0f 89 7e 01 00 00    	jns    c0024c17 <__addsf3+0x2d1>
c0024a99:	46                   	inc    esi
c0024a9a:	89 f2                	mov    edx,esi
c0024a9c:	f7 d2                	not    edx
c0024a9e:	84 d2                	test   dl,dl
c0024aa0:	0f 84 6f 01 00 00    	je     c0024c15 <__addsf3+0x2cf>
c0024aa6:	89 c2                	mov    edx,eax
c0024aa8:	83 e2 01             	and    edx,0x1
c0024aab:	d1 e8                	shr    eax,1
c0024aad:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0024ab2:	09 d0                	or     eax,edx
c0024ab4:	e9 5e 01 00 00       	jmp    c0024c17 <__addsf3+0x2d1>
c0024ab9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0024abd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024ac0:	89 f0                	mov    eax,esi
c0024ac2:	0f b6 c0             	movzx  eax,al
c0024ac5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024ac8:	29 c1                	sub    ecx,eax
c0024aca:	85 c9                	test   ecx,ecx
c0024acc:	7e 55                	jle    c0024b23 <__addsf3+0x1dd>
c0024ace:	85 c0                	test   eax,eax
c0024ad0:	75 11                	jne    c0024ae3 <__addsf3+0x19d>
c0024ad2:	85 db                	test   ebx,ebx
c0024ad4:	0f 84 65 01 00 00    	je     c0024c3f <__addsf3+0x2f9>
c0024ada:	49                   	dec    ecx
c0024adb:	75 19                	jne    c0024af6 <__addsf3+0x1b0>
c0024add:	89 d0                	mov    eax,edx
c0024adf:	29 d8                	sub    eax,ebx
c0024ae1:	eb 38                	jmp    c0024b1b <__addsf3+0x1d5>
c0024ae3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024ae6:	f7 d0                	not    eax
c0024ae8:	84 c0                	test   al,al
c0024aea:	0f 84 4f 01 00 00    	je     c0024c3f <__addsf3+0x2f9>
c0024af0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0024af6:	83 f9 1f             	cmp    ecx,0x1f
c0024af9:	0f 8f 40 01 00 00    	jg     c0024c3f <__addsf3+0x2f9>
c0024aff:	89 de                	mov    esi,ebx
c0024b01:	d3 ee                	shr    esi,cl
c0024b03:	b8 20 00 00 00       	mov    eax,0x20
c0024b08:	29 c8                	sub    eax,ecx
c0024b0a:	89 c1                	mov    ecx,eax
c0024b0c:	d3 e3                	shl    ebx,cl
c0024b0e:	31 c0                	xor    eax,eax
c0024b10:	85 db                	test   ebx,ebx
c0024b12:	0f 95 c0             	setne  al
c0024b15:	09 f0                	or     eax,esi
c0024b17:	29 c2                	sub    edx,eax
c0024b19:	89 d0                	mov    eax,edx
c0024b1b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0024b1e:	e9 af 00 00 00       	jmp    c0024bd2 <__addsf3+0x28c>
c0024b23:	74 5c                	je     c0024b81 <__addsf3+0x23b>
c0024b25:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0024b28:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0024b2b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0024b2f:	75 14                	jne    c0024b45 <__addsf3+0x1ff>
c0024b31:	85 d2                	test   edx,edx
c0024b33:	0f 84 06 01 00 00    	je     c0024c3f <__addsf3+0x2f9>
c0024b39:	48                   	dec    eax
c0024b3a:	75 1b                	jne    c0024b57 <__addsf3+0x211>
c0024b3c:	89 d8                	mov    eax,ebx
c0024b3e:	29 d0                	sub    eax,edx
c0024b40:	e9 8d 00 00 00       	jmp    c0024bd2 <__addsf3+0x28c>
c0024b45:	89 f1                	mov    ecx,esi
c0024b47:	f7 d1                	not    ecx
c0024b49:	84 c9                	test   cl,cl
c0024b4b:	0f 84 ee 00 00 00    	je     c0024c3f <__addsf3+0x2f9>
c0024b51:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024b57:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0024b5a:	83 f8 1f             	cmp    eax,0x1f
c0024b5d:	0f 8f dc 00 00 00    	jg     c0024c3f <__addsf3+0x2f9>
c0024b63:	89 d7                	mov    edi,edx
c0024b65:	88 c1                	mov    cl,al
c0024b67:	d3 ef                	shr    edi,cl
c0024b69:	b9 20 00 00 00       	mov    ecx,0x20
c0024b6e:	29 c1                	sub    ecx,eax
c0024b70:	d3 e2                	shl    edx,cl
c0024b72:	31 c0                	xor    eax,eax
c0024b74:	85 d2                	test   edx,edx
c0024b76:	0f 95 c0             	setne  al
c0024b79:	09 f8                	or     eax,edi
c0024b7b:	29 c3                	sub    ebx,eax
c0024b7d:	89 d8                	mov    eax,ebx
c0024b7f:	eb 51                	jmp    c0024bd2 <__addsf3+0x28c>
c0024b81:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024b84:	40                   	inc    eax
c0024b85:	a8 fe                	test   al,0xfe
c0024b87:	75 3d                	jne    c0024bc6 <__addsf3+0x280>
c0024b89:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0024b8d:	0f 85 a7 00 00 00    	jne    c0024c3a <__addsf3+0x2f4>
c0024b93:	85 d2                	test   edx,edx
c0024b95:	75 12                	jne    c0024ba9 <__addsf3+0x263>
c0024b97:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0024b9a:	85 db                	test   ebx,ebx
c0024b9c:	0f 85 9d 00 00 00    	jne    c0024c3f <__addsf3+0x2f9>
c0024ba2:	31 ff                	xor    edi,edi
c0024ba4:	e9 96 00 00 00       	jmp    c0024c3f <__addsf3+0x2f9>
c0024ba9:	85 db                	test   ebx,ebx
c0024bab:	0f 84 8e 00 00 00    	je     c0024c3f <__addsf3+0x2f9>
c0024bb1:	89 d0                	mov    eax,edx
c0024bb3:	29 d8                	sub    eax,ebx
c0024bb5:	79 06                	jns    c0024bbd <__addsf3+0x277>
c0024bb7:	89 d8                	mov    eax,ebx
c0024bb9:	29 d0                	sub    eax,edx
c0024bbb:	eb 5a                	jmp    c0024c17 <__addsf3+0x2d1>
c0024bbd:	bf 00 00 00 00       	mov    edi,0x0
c0024bc2:	74 7b                	je     c0024c3f <__addsf3+0x2f9>
c0024bc4:	eb 4a                	jmp    c0024c10 <__addsf3+0x2ca>
c0024bc6:	89 d0                	mov    eax,edx
c0024bc8:	29 d8                	sub    eax,ebx
c0024bca:	79 12                	jns    c0024bde <__addsf3+0x298>
c0024bcc:	89 d8                	mov    eax,ebx
c0024bce:	29 d0                	sub    eax,edx
c0024bd0:	eb 09                	jmp    c0024bdb <__addsf3+0x295>
c0024bd2:	85 c0                	test   eax,eax
c0024bd4:	79 41                	jns    c0024c17 <__addsf3+0x2d1>
c0024bd6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024bdb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0024bde:	31 f6                	xor    esi,esi
c0024be0:	85 c0                	test   eax,eax
c0024be2:	74 33                	je     c0024c17 <__addsf3+0x2d1>
c0024be4:	0f bd c8             	bsr    ecx,eax
c0024be7:	83 f1 1f             	xor    ecx,0x1f
c0024bea:	d3 e0                	shl    eax,cl
c0024bec:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0024bf0:	39 ca                	cmp    edx,ecx
c0024bf2:	7f 10                	jg     c0024c04 <__addsf3+0x2be>
c0024bf4:	29 d1                	sub    ecx,edx
c0024bf6:	41                   	inc    ecx
c0024bf7:	d3 e8                	shr    eax,cl
c0024bf9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0024bfc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0024c02:	eb 13                	jmp    c0024c17 <__addsf3+0x2d1>
c0024c04:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0024c07:	29 ce                	sub    esi,ecx
c0024c09:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024c0e:	eb 07                	jmp    c0024c17 <__addsf3+0x2d1>
c0024c10:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0024c13:	eb 02                	jmp    c0024c17 <__addsf3+0x2d1>
c0024c15:	31 c0                	xor    eax,eax
c0024c17:	89 c2                	mov    edx,eax
c0024c19:	c1 ea 08             	shr    edx,0x8
c0024c1c:	a8 7f                	test   al,0x7f
c0024c1e:	0f 95 c1             	setne  cl
c0024c21:	09 d1                	or     ecx,edx
c0024c23:	83 e1 01             	and    ecx,0x1
c0024c26:	c1 e8 07             	shr    eax,0x7
c0024c29:	21 c8                	and    eax,ecx
c0024c2b:	c1 e6 17             	shl    esi,0x17
c0024c2e:	09 d6                	or     esi,edx
c0024c30:	8d 3c 30             	lea    edi,[eax+esi*1]
c0024c33:	eb 0a                	jmp    c0024c3f <__addsf3+0x2f9>
c0024c35:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0024c38:	eb 05                	jmp    c0024c3f <__addsf3+0x2f9>
c0024c3a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0024c3f:	89 f8                	mov    eax,edi
c0024c41:	5a                   	pop    edx
c0024c42:	59                   	pop    ecx
c0024c43:	5b                   	pop    ebx
c0024c44:	5e                   	pop    esi
c0024c45:	5f                   	pop    edi
c0024c46:	5d                   	pop    ebp
c0024c47:	c3                   	ret    

c0024c48 <__subsf3>:
c0024c48:	55                   	push   ebp
c0024c49:	89 e5                	mov    ebp,esp
c0024c4b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024c4e:	05 00 00 00 80       	add    eax,0x80000000
c0024c53:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0024c56:	5d                   	pop    ebp
c0024c57:	e9 ea fc ff ff       	jmp    c0024946 <__addsf3>

c0024c5c <__negsf2>:
c0024c5c:	55                   	push   ebp
c0024c5d:	89 e5                	mov    ebp,esp
c0024c5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024c62:	05 00 00 00 80       	add    eax,0x80000000
c0024c67:	5d                   	pop    ebp
c0024c68:	c3                   	ret    

c0024c69 <__mulsf3>:
c0024c69:	55                   	push   ebp
c0024c6a:	89 e5                	mov    ebp,esp
c0024c6c:	57                   	push   edi
c0024c6d:	56                   	push   esi
c0024c6e:	53                   	push   ebx
c0024c6f:	83 ec 1c             	sub    esp,0x1c
c0024c72:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0024c75:	89 f0                	mov    eax,esi
c0024c77:	89 f1                	mov    ecx,esi
c0024c79:	c1 f9 17             	sar    ecx,0x17
c0024c7c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0024c7f:	c1 e0 08             	shl    eax,0x8
c0024c82:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0024c87:	89 c1                	mov    ecx,eax
c0024c89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024c8c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024c8f:	89 c7                	mov    edi,eax
c0024c91:	c1 ff 17             	sar    edi,0x17
c0024c94:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0024c98:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024c9b:	89 f8                	mov    eax,edi
c0024c9d:	0f b6 c0             	movzx  eax,al
c0024ca0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024ca3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0024ca7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024caa:	42                   	inc    edx
c0024cab:	80 e2 fe             	and    dl,0xfe
c0024cae:	75 7b                	jne    c0024d2b <__mulsf3+0xc2>
c0024cb0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0024cb4:	74 54                	je     c0024d0a <__mulsf3+0xa1>
c0024cb6:	85 c9                	test   ecx,ecx
c0024cb8:	0f 85 64 01 00 00    	jne    c0024e22 <__mulsf3+0x1b9>
c0024cbe:	8d 57 01             	lea    edx,[edi+0x1]
c0024cc1:	80 e2 fe             	and    dl,0xfe
c0024cc4:	75 1f                	jne    c0024ce5 <__mulsf3+0x7c>
c0024cc6:	85 c0                	test   eax,eax
c0024cc8:	b8 00 00 00 00       	mov    eax,0x0
c0024ccd:	74 29                	je     c0024cf8 <__mulsf3+0x8f>
c0024ccf:	53                   	push   ebx
c0024cd0:	53                   	push   ebx
c0024cd1:	50                   	push   eax
c0024cd2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024cd5:	e8 96 05 00 00       	call   c0025270 <__nesf2>
c0024cda:	83 c4 10             	add    esp,0x10
c0024cdd:	85 c0                	test   eax,eax
c0024cdf:	0f 85 3a 01 00 00    	jne    c0024e1f <__mulsf3+0x1b6>
c0024ce5:	85 ff                	test   edi,edi
c0024ce7:	0f 89 35 01 00 00    	jns    c0024e22 <__mulsf3+0x1b9>
c0024ced:	81 c6 00 00 00 80    	add    esi,0x80000000
c0024cf3:	e9 2a 01 00 00       	jmp    c0024e22 <__mulsf3+0x1b9>
c0024cf8:	51                   	push   ecx
c0024cf9:	51                   	push   ecx
c0024cfa:	50                   	push   eax
c0024cfb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024cfe:	e8 6d 05 00 00       	call   c0025270 <__nesf2>
c0024d03:	83 c4 10             	add    esp,0x10
c0024d06:	85 c0                	test   eax,eax
c0024d08:	eb 15                	jmp    c0024d1f <__mulsf3+0xb6>
c0024d0a:	85 c9                	test   ecx,ecx
c0024d0c:	74 0b                	je     c0024d19 <__mulsf3+0xb0>
c0024d0e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0024d11:	01 c9                	add    ecx,ecx
c0024d13:	78 16                	js     c0024d2b <__mulsf3+0xc2>
c0024d15:	89 d3                	mov    ebx,edx
c0024d17:	eb f5                	jmp    c0024d0e <__mulsf3+0xa5>
c0024d19:	89 f8                	mov    eax,edi
c0024d1b:	f7 d0                	not    eax
c0024d1d:	84 c0                	test   al,al
c0024d1f:	75 c4                	jne    c0024ce5 <__mulsf3+0x7c>
c0024d21:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0024d26:	e9 f7 00 00 00       	jmp    c0024e22 <__mulsf3+0x1b9>
c0024d2b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0024d2e:	c1 e6 08             	shl    esi,0x8
c0024d31:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0024d37:	8d 57 01             	lea    edx,[edi+0x1]
c0024d3a:	80 e2 fe             	and    dl,0xfe
c0024d3d:	75 63                	jne    c0024da2 <__mulsf3+0x139>
c0024d3f:	85 c0                	test   eax,eax
c0024d41:	74 2f                	je     c0024d72 <__mulsf3+0x109>
c0024d43:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024d47:	0f 89 d2 00 00 00    	jns    c0024e1f <__mulsf3+0x1b6>
c0024d4d:	52                   	push   edx
c0024d4e:	52                   	push   edx
c0024d4f:	6a 00                	push   0x0
c0024d51:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024d54:	e8 dc 04 00 00       	call   c0025235 <__eqsf2>
c0024d59:	83 c4 10             	add    esp,0x10
c0024d5c:	85 c0                	test   eax,eax
c0024d5e:	0f 85 bb 00 00 00    	jne    c0024e1f <__mulsf3+0x1b6>
c0024d64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024d67:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0024d6d:	e9 b0 00 00 00       	jmp    c0024e22 <__mulsf3+0x1b9>
c0024d72:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0024d75:	50                   	push   eax
c0024d76:	50                   	push   eax
c0024d77:	6a 00                	push   0x0
c0024d79:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024d7c:	e8 b4 04 00 00       	call   c0025235 <__eqsf2>
c0024d81:	83 c4 10             	add    esp,0x10
c0024d84:	85 c0                	test   eax,eax
c0024d86:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024d89:	75 0c                	jne    c0024d97 <__mulsf3+0x12e>
c0024d8b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024d8f:	0f 89 8a 00 00 00    	jns    c0024e1f <__mulsf3+0x1b6>
c0024d95:	eb cd                	jmp    c0024d64 <__mulsf3+0xfb>
c0024d97:	8d 43 ff             	lea    eax,[ebx-0x1]
c0024d9a:	01 f6                	add    esi,esi
c0024d9c:	78 04                	js     c0024da2 <__mulsf3+0x139>
c0024d9e:	89 c3                	mov    ebx,eax
c0024da0:	eb f5                	jmp    c0024d97 <__mulsf3+0x12e>
c0024da2:	89 c8                	mov    eax,ecx
c0024da4:	0d 00 00 00 80       	or     eax,0x80000000
c0024da9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024daf:	f7 e6                	mul    esi
c0024db1:	85 c0                	test   eax,eax
c0024db3:	0f 95 c0             	setne  al
c0024db6:	0f b6 c0             	movzx  eax,al
c0024db9:	09 c2                	or     edx,eax
c0024dbb:	78 03                	js     c0024dc0 <__mulsf3+0x157>
c0024dbd:	01 d2                	add    edx,edx
c0024dbf:	4b                   	dec    ebx
c0024dc0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0024dc6:	7f 22                	jg     c0024dea <__mulsf3+0x181>
c0024dc8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024dce:	85 db                	test   ebx,ebx
c0024dd0:	7f 23                	jg     c0024df5 <__mulsf3+0x18c>
c0024dd2:	83 fb e9             	cmp    ebx,0xffffffe9
c0024dd5:	7c 1a                	jl     c0024df1 <__mulsf3+0x188>
c0024dd7:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024ddd:	b9 01 00 00 00       	mov    ecx,0x1
c0024de2:	29 d9                	sub    ecx,ebx
c0024de4:	d3 ea                	shr    edx,cl
c0024de6:	31 db                	xor    ebx,ebx
c0024de8:	eb 0b                	jmp    c0024df5 <__mulsf3+0x18c>
c0024dea:	bb ff 00 00 00       	mov    ebx,0xff
c0024def:	eb 02                	jmp    c0024df3 <__mulsf3+0x18a>
c0024df1:	31 db                	xor    ebx,ebx
c0024df3:	31 d2                	xor    edx,edx
c0024df5:	89 d0                	mov    eax,edx
c0024df7:	c1 e8 08             	shr    eax,0x8
c0024dfa:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0024dfd:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0024e03:	09 fb                	or     ebx,edi
c0024e05:	c1 e3 17             	shl    ebx,0x17
c0024e08:	09 c3                	or     ebx,eax
c0024e0a:	f6 c2 7f             	test   dl,0x7f
c0024e0d:	0f 95 c1             	setne  cl
c0024e10:	09 c8                	or     eax,ecx
c0024e12:	83 e0 01             	and    eax,0x1
c0024e15:	c1 ea 07             	shr    edx,0x7
c0024e18:	21 c2                	and    edx,eax
c0024e1a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0024e1d:	eb 03                	jmp    c0024e22 <__mulsf3+0x1b9>
c0024e1f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0024e22:	89 f0                	mov    eax,esi
c0024e24:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024e27:	5b                   	pop    ebx
c0024e28:	5e                   	pop    esi
c0024e29:	5f                   	pop    edi
c0024e2a:	5d                   	pop    ebp
c0024e2b:	c3                   	ret    

c0024e2c <__divsf3>:
c0024e2c:	55                   	push   ebp
c0024e2d:	89 e5                	mov    ebp,esp
c0024e2f:	57                   	push   edi
c0024e30:	56                   	push   esi
c0024e31:	53                   	push   ebx
c0024e32:	83 ec 1c             	sub    esp,0x1c
c0024e35:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024e38:	89 d8                	mov    eax,ebx
c0024e3a:	89 d9                	mov    ecx,ebx
c0024e3c:	c1 f9 17             	sar    ecx,0x17
c0024e3f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0024e42:	c1 e0 08             	shl    eax,0x8
c0024e45:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0024e4a:	89 c1                	mov    ecx,eax
c0024e4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024e4f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024e52:	89 c7                	mov    edi,eax
c0024e54:	c1 ff 17             	sar    edi,0x17
c0024e57:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0024e5b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024e5e:	89 f8                	mov    eax,edi
c0024e60:	0f b6 c0             	movzx  eax,al
c0024e63:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024e66:	29 c6                	sub    esi,eax
c0024e68:	83 c6 7f             	add    esi,0x7f
c0024e6b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024e6e:	42                   	inc    edx
c0024e6f:	80 e2 fe             	and    dl,0xfe
c0024e72:	0f 85 9c 00 00 00    	jne    c0024f14 <__divsf3+0xe8>
c0024e78:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0024e7c:	74 33                	je     c0024eb1 <__divsf3+0x85>
c0024e7e:	85 c9                	test   ecx,ecx
c0024e80:	0f 85 c7 01 00 00    	jne    c002504d <__divsf3+0x221>
c0024e86:	8d 57 01             	lea    edx,[edi+0x1]
c0024e89:	80 e2 fe             	and    dl,0xfe
c0024e8c:	75 2f                	jne    c0024ebd <__divsf3+0x91>
c0024e8e:	85 c0                	test   eax,eax
c0024e90:	74 2b                	je     c0024ebd <__divsf3+0x91>
c0024e92:	51                   	push   ecx
c0024e93:	51                   	push   ecx
c0024e94:	6a 00                	push   0x0
c0024e96:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024e99:	e8 d2 03 00 00       	call   c0025270 <__nesf2>
c0024e9e:	83 c4 10             	add    esp,0x10
c0024ea1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0024ea4:	85 c0                	test   eax,eax
c0024ea6:	0f 85 a1 01 00 00    	jne    c002504d <__divsf3+0x221>
c0024eac:	e9 92 01 00 00       	jmp    c0025043 <__divsf3+0x217>
c0024eb1:	85 c9                	test   ecx,ecx
c0024eb3:	75 1b                	jne    c0024ed0 <__divsf3+0xa4>
c0024eb5:	8d 57 01             	lea    edx,[edi+0x1]
c0024eb8:	80 e2 fe             	and    dl,0xfe
c0024ebb:	74 1e                	je     c0024edb <__divsf3+0xaf>
c0024ebd:	85 ff                	test   edi,edi
c0024ebf:	0f 89 88 01 00 00    	jns    c002504d <__divsf3+0x221>
c0024ec5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0024ecb:	e9 7d 01 00 00       	jmp    c002504d <__divsf3+0x221>
c0024ed0:	8d 56 ff             	lea    edx,[esi-0x1]
c0024ed3:	01 c9                	add    ecx,ecx
c0024ed5:	78 3d                	js     c0024f14 <__divsf3+0xe8>
c0024ed7:	89 d6                	mov    esi,edx
c0024ed9:	eb f5                	jmp    c0024ed0 <__divsf3+0xa4>
c0024edb:	85 c0                	test   eax,eax
c0024edd:	b8 00 00 00 00       	mov    eax,0x0
c0024ee2:	74 18                	je     c0024efc <__divsf3+0xd0>
c0024ee4:	52                   	push   edx
c0024ee5:	52                   	push   edx
c0024ee6:	50                   	push   eax
c0024ee7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024eea:	e8 81 03 00 00       	call   c0025270 <__nesf2>
c0024eef:	83 c4 10             	add    esp,0x10
c0024ef2:	85 c0                	test   eax,eax
c0024ef4:	0f 85 50 01 00 00    	jne    c002504a <__divsf3+0x21e>
c0024efa:	eb c1                	jmp    c0024ebd <__divsf3+0x91>
c0024efc:	56                   	push   esi
c0024efd:	56                   	push   esi
c0024efe:	50                   	push   eax
c0024eff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024f02:	e8 69 03 00 00       	call   c0025270 <__nesf2>
c0024f07:	83 c4 10             	add    esp,0x10
c0024f0a:	85 c0                	test   eax,eax
c0024f0c:	0f 84 31 01 00 00    	je     c0025043 <__divsf3+0x217>
c0024f12:	eb a9                	jmp    c0024ebd <__divsf3+0x91>
c0024f14:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0024f17:	c1 e3 08             	shl    ebx,0x8
c0024f1a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0024f20:	8d 57 01             	lea    edx,[edi+0x1]
c0024f23:	80 e2 fe             	and    dl,0xfe
c0024f26:	75 71                	jne    c0024f99 <__divsf3+0x16d>
c0024f28:	85 c0                	test   eax,eax
c0024f2a:	ba 00 00 00 00       	mov    edx,0x0
c0024f2f:	74 2f                	je     c0024f60 <__divsf3+0x134>
c0024f31:	51                   	push   ecx
c0024f32:	51                   	push   ecx
c0024f33:	52                   	push   edx
c0024f34:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024f37:	e8 f9 02 00 00       	call   c0025235 <__eqsf2>
c0024f3c:	83 c4 10             	add    esp,0x10
c0024f3f:	85 c0                	test   eax,eax
c0024f41:	0f 85 03 01 00 00    	jne    c002504a <__divsf3+0x21e>
c0024f47:	31 d2                	xor    edx,edx
c0024f49:	89 d3                	mov    ebx,edx
c0024f4b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024f4e:	31 f8                	xor    eax,edi
c0024f50:	0f 89 f7 00 00 00    	jns    c002504d <__divsf3+0x221>
c0024f56:	bb 00 00 00 80       	mov    ebx,0x80000000
c0024f5b:	e9 ed 00 00 00       	jmp    c002504d <__divsf3+0x221>
c0024f60:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0024f63:	50                   	push   eax
c0024f64:	50                   	push   eax
c0024f65:	52                   	push   edx
c0024f66:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024f69:	e8 c7 02 00 00       	call   c0025235 <__eqsf2>
c0024f6e:	83 c4 10             	add    esp,0x10
c0024f71:	85 c0                	test   eax,eax
c0024f73:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024f76:	75 16                	jne    c0024f8e <__divsf3+0x162>
c0024f78:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024f7b:	31 fb                	xor    ebx,edi
c0024f7d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0024f83:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0024f89:	e9 bf 00 00 00       	jmp    c002504d <__divsf3+0x221>
c0024f8e:	8d 46 01             	lea    eax,[esi+0x1]
c0024f91:	01 db                	add    ebx,ebx
c0024f93:	78 04                	js     c0024f99 <__divsf3+0x16d>
c0024f95:	89 c6                	mov    esi,eax
c0024f97:	eb f5                	jmp    c0024f8e <__divsf3+0x162>
c0024f99:	89 c8                	mov    eax,ecx
c0024f9b:	0d 00 00 00 80       	or     eax,0x80000000
c0024fa0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0024fa6:	31 d2                	xor    edx,edx
c0024fa8:	39 d8                	cmp    eax,ebx
c0024faa:	72 07                	jb     c0024fb3 <__divsf3+0x187>
c0024fac:	29 d8                	sub    eax,ebx
c0024fae:	ba 01 00 00 00       	mov    edx,0x1
c0024fb3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0024fba:	01 d2                	add    edx,edx
c0024fbc:	89 c1                	mov    ecx,eax
c0024fbe:	01 c0                	add    eax,eax
c0024fc0:	85 c9                	test   ecx,ecx
c0024fc2:	78 04                	js     c0024fc8 <__divsf3+0x19c>
c0024fc4:	39 c3                	cmp    ebx,eax
c0024fc6:	77 05                	ja     c0024fcd <__divsf3+0x1a1>
c0024fc8:	29 d8                	sub    eax,ebx
c0024fca:	83 ca 01             	or     edx,0x1
c0024fcd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0024fd0:	75 e8                	jne    c0024fba <__divsf3+0x18e>
c0024fd2:	85 c0                	test   eax,eax
c0024fd4:	0f 95 c0             	setne  al
c0024fd7:	0f b6 c0             	movzx  eax,al
c0024fda:	c1 e2 06             	shl    edx,0x6
c0024fdd:	09 c2                	or     edx,eax
c0024fdf:	78 03                	js     c0024fe4 <__divsf3+0x1b8>
c0024fe1:	01 d2                	add    edx,edx
c0024fe3:	4e                   	dec    esi
c0024fe4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024fea:	7f 22                	jg     c002500e <__divsf3+0x1e2>
c0024fec:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024ff2:	85 f6                	test   esi,esi
c0024ff4:	7f 23                	jg     c0025019 <__divsf3+0x1ed>
c0024ff6:	83 fe e9             	cmp    esi,0xffffffe9
c0024ff9:	7c 1a                	jl     c0025015 <__divsf3+0x1e9>
c0024ffb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025001:	b9 01 00 00 00       	mov    ecx,0x1
c0025006:	29 f1                	sub    ecx,esi
c0025008:	d3 ea                	shr    edx,cl
c002500a:	31 f6                	xor    esi,esi
c002500c:	eb 0b                	jmp    c0025019 <__divsf3+0x1ed>
c002500e:	be ff 00 00 00       	mov    esi,0xff
c0025013:	eb 02                	jmp    c0025017 <__divsf3+0x1eb>
c0025015:	31 f6                	xor    esi,esi
c0025017:	31 d2                	xor    edx,edx
c0025019:	89 d0                	mov    eax,edx
c002501b:	c1 e8 08             	shr    eax,0x8
c002501e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025021:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025027:	09 fe                	or     esi,edi
c0025029:	c1 e6 17             	shl    esi,0x17
c002502c:	09 c6                	or     esi,eax
c002502e:	f6 c2 7f             	test   dl,0x7f
c0025031:	0f 95 c1             	setne  cl
c0025034:	09 c8                	or     eax,ecx
c0025036:	83 e0 01             	and    eax,0x1
c0025039:	c1 ea 07             	shr    edx,0x7
c002503c:	21 c2                	and    edx,eax
c002503e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0025041:	eb 0a                	jmp    c002504d <__divsf3+0x221>
c0025043:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0025048:	eb 03                	jmp    c002504d <__divsf3+0x221>
c002504a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002504d:	89 d8                	mov    eax,ebx
c002504f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025052:	5b                   	pop    ebx
c0025053:	5e                   	pop    esi
c0025054:	5f                   	pop    edi
c0025055:	5d                   	pop    ebp
c0025056:	c3                   	ret    

c0025057 <__floatsisf>:
c0025057:	55                   	push   ebp
c0025058:	89 e5                	mov    ebp,esp
c002505a:	53                   	push   ebx
c002505b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002505e:	85 d2                	test   edx,edx
c0025060:	7e 2b                	jle    c002508d <__floatsisf+0x36>
c0025062:	0f bd ca             	bsr    ecx,edx
c0025065:	83 f1 1f             	xor    ecx,0x1f
c0025068:	d3 e2                	shl    edx,cl
c002506a:	89 d0                	mov    eax,edx
c002506c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025071:	89 c3                	mov    ebx,eax
c0025073:	c1 eb 08             	shr    ebx,0x8
c0025076:	80 e2 7f             	and    dl,0x7f
c0025079:	0f 95 c2             	setne  dl
c002507c:	09 da                	or     edx,ebx
c002507e:	83 e2 01             	and    edx,0x1
c0025081:	c1 e8 07             	shr    eax,0x7
c0025084:	21 c2                	and    edx,eax
c0025086:	b8 9e 00 00 00       	mov    eax,0x9e
c002508b:	eb 32                	jmp    c00250bf <__floatsisf+0x68>
c002508d:	b8 00 00 00 00       	mov    eax,0x0
c0025092:	74 34                	je     c00250c8 <__floatsisf+0x71>
c0025094:	f7 da                	neg    edx
c0025096:	0f bd ca             	bsr    ecx,edx
c0025099:	83 f1 1f             	xor    ecx,0x1f
c002509c:	d3 e2                	shl    edx,cl
c002509e:	89 d0                	mov    eax,edx
c00250a0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00250a5:	89 c3                	mov    ebx,eax
c00250a7:	c1 eb 08             	shr    ebx,0x8
c00250aa:	80 e2 7f             	and    dl,0x7f
c00250ad:	0f 95 c2             	setne  dl
c00250b0:	09 da                	or     edx,ebx
c00250b2:	83 e2 01             	and    edx,0x1
c00250b5:	c1 e8 07             	shr    eax,0x7
c00250b8:	21 c2                	and    edx,eax
c00250ba:	b8 9e 01 00 00       	mov    eax,0x19e
c00250bf:	29 c8                	sub    eax,ecx
c00250c1:	c1 e0 17             	shl    eax,0x17
c00250c4:	09 d8                	or     eax,ebx
c00250c6:	01 d0                	add    eax,edx
c00250c8:	5b                   	pop    ebx
c00250c9:	5d                   	pop    ebp
c00250ca:	c3                   	ret    

c00250cb <__floatunsisf>:
c00250cb:	55                   	push   ebp
c00250cc:	89 e5                	mov    ebp,esp
c00250ce:	53                   	push   ebx
c00250cf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00250d2:	31 c0                	xor    eax,eax
c00250d4:	85 d2                	test   edx,edx
c00250d6:	74 32                	je     c002510a <__floatunsisf+0x3f>
c00250d8:	0f bd ca             	bsr    ecx,edx
c00250db:	83 f1 1f             	xor    ecx,0x1f
c00250de:	d3 e2                	shl    edx,cl
c00250e0:	89 d0                	mov    eax,edx
c00250e2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00250e7:	89 c3                	mov    ebx,eax
c00250e9:	c1 eb 08             	shr    ebx,0x8
c00250ec:	80 e2 7f             	and    dl,0x7f
c00250ef:	0f 95 c2             	setne  dl
c00250f2:	09 da                	or     edx,ebx
c00250f4:	83 e2 01             	and    edx,0x1
c00250f7:	c1 e8 07             	shr    eax,0x7
c00250fa:	21 c2                	and    edx,eax
c00250fc:	b8 9e 00 00 00       	mov    eax,0x9e
c0025101:	29 c8                	sub    eax,ecx
c0025103:	c1 e0 17             	shl    eax,0x17
c0025106:	09 d8                	or     eax,ebx
c0025108:	01 d0                	add    eax,edx
c002510a:	5b                   	pop    ebx
c002510b:	5d                   	pop    ebp
c002510c:	c3                   	ret    

c002510d <__fixsfsi>:
c002510d:	55                   	push   ebp
c002510e:	89 e5                	mov    ebp,esp
c0025110:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025113:	89 d1                	mov    ecx,edx
c0025115:	c1 e1 08             	shl    ecx,0x8
c0025118:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002511e:	c1 fa 17             	sar    edx,0x17
c0025121:	78 1c                	js     c002513f <__fixsfsi+0x32>
c0025123:	83 ea 7f             	sub    edx,0x7f
c0025126:	31 c0                	xor    eax,eax
c0025128:	83 fa 1e             	cmp    edx,0x1e
c002512b:	77 40                	ja     c002516d <__fixsfsi+0x60>
c002512d:	89 c8                	mov    eax,ecx
c002512f:	0d 00 00 00 80       	or     eax,0x80000000
c0025134:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025139:	29 d1                	sub    ecx,edx
c002513b:	d3 e8                	shr    eax,cl
c002513d:	eb 2e                	jmp    c002516d <__fixsfsi+0x60>
c002513f:	31 c0                	xor    eax,eax
c0025141:	81 c2 81 00 00 00    	add    edx,0x81
c0025147:	78 24                	js     c002516d <__fixsfsi+0x60>
c0025149:	83 fa 1e             	cmp    edx,0x1e
c002514c:	7e 09                	jle    c0025157 <__fixsfsi+0x4a>
c002514e:	83 fa 1f             	cmp    edx,0x1f
c0025151:	75 18                	jne    c002516b <__fixsfsi+0x5e>
c0025153:	85 c9                	test   ecx,ecx
c0025155:	75 14                	jne    c002516b <__fixsfsi+0x5e>
c0025157:	89 c8                	mov    eax,ecx
c0025159:	0d 00 00 00 80       	or     eax,0x80000000
c002515e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025163:	29 d1                	sub    ecx,edx
c0025165:	d3 e8                	shr    eax,cl
c0025167:	f7 d8                	neg    eax
c0025169:	eb 02                	jmp    c002516d <__fixsfsi+0x60>
c002516b:	31 c0                	xor    eax,eax
c002516d:	5d                   	pop    ebp
c002516e:	c3                   	ret    

c002516f <__fixunssfsi>:
c002516f:	55                   	push   ebp
c0025170:	89 e5                	mov    ebp,esp
c0025172:	53                   	push   ebx
c0025173:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025176:	89 d3                	mov    ebx,edx
c0025178:	c1 fb 17             	sar    ebx,0x17
c002517b:	83 eb 7f             	sub    ebx,0x7f
c002517e:	31 c0                	xor    eax,eax
c0025180:	83 fb 1f             	cmp    ebx,0x1f
c0025183:	77 18                	ja     c002519d <__fixunssfsi+0x2e>
c0025185:	89 d0                	mov    eax,edx
c0025187:	c1 e0 08             	shl    eax,0x8
c002518a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002518f:	0d 00 00 00 80       	or     eax,0x80000000
c0025194:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025199:	29 d9                	sub    ecx,ebx
c002519b:	d3 e8                	shr    eax,cl
c002519d:	5b                   	pop    ebx
c002519e:	5d                   	pop    ebp
c002519f:	c3                   	ret    

c00251a0 <__cmpsf2>:
c00251a0:	55                   	push   ebp
c00251a1:	89 e5                	mov    ebp,esp
c00251a3:	57                   	push   edi
c00251a4:	56                   	push   esi
c00251a5:	53                   	push   ebx
c00251a6:	83 ec 24             	sub    esp,0x24
c00251a9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00251ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00251af:	e8 4f 10 00 00       	call   c0026203 <__truncdfsf2>
c00251b4:	5a                   	pop    edx
c00251b5:	59                   	pop    ecx
c00251b6:	89 c3                	mov    ebx,eax
c00251b8:	c1 e8 17             	shr    eax,0x17
c00251bb:	0f b6 f0             	movzx  esi,al
c00251be:	89 d8                	mov    eax,ebx
c00251c0:	c1 e8 1f             	shr    eax,0x1f
c00251c3:	31 c6                	xor    esi,eax
c00251c5:	c1 e3 08             	shl    ebx,0x8
c00251c8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00251cb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00251ce:	e8 30 10 00 00       	call   c0026203 <__truncdfsf2>
c00251d3:	83 c4 10             	add    esp,0x10
c00251d6:	89 c1                	mov    ecx,eax
c00251d8:	c1 e9 17             	shr    ecx,0x17
c00251db:	0f b6 c9             	movzx  ecx,cl
c00251de:	89 c7                	mov    edi,eax
c00251e0:	c1 ef 1f             	shr    edi,0x1f
c00251e3:	89 ca                	mov    edx,ecx
c00251e5:	31 fa                	xor    edx,edi
c00251e7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00251ea:	c1 e0 08             	shl    eax,0x8
c00251ed:	89 c2                	mov    edx,eax
c00251ef:	89 d8                	mov    eax,ebx
c00251f1:	09 d0                	or     eax,edx
c00251f3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00251f8:	09 f0                	or     eax,esi
c00251fa:	75 08                	jne    c0025204 <__cmpsf2+0x64>
c00251fc:	31 c0                	xor    eax,eax
c00251fe:	39 f9                	cmp    ecx,edi
c0025200:	75 0c                	jne    c002520e <__cmpsf2+0x6e>
c0025202:	eb 29                	jmp    c002522d <__cmpsf2+0x8d>
c0025204:	b8 01 00 00 00       	mov    eax,0x1
c0025209:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002520c:	7f 1f                	jg     c002522d <__cmpsf2+0x8d>
c002520e:	83 c8 ff             	or     eax,0xffffffff
c0025211:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025214:	7c 17                	jl     c002522d <__cmpsf2+0x8d>
c0025216:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002521c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025222:	b8 01 00 00 00       	mov    eax,0x1
c0025227:	39 d3                	cmp    ebx,edx
c0025229:	77 02                	ja     c002522d <__cmpsf2+0x8d>
c002522b:	19 c0                	sbb    eax,eax
c002522d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025230:	5b                   	pop    ebx
c0025231:	5e                   	pop    esi
c0025232:	5f                   	pop    edi
c0025233:	5d                   	pop    ebp
c0025234:	c3                   	ret    

c0025235 <__eqsf2>:
c0025235:	55                   	push   ebp
c0025236:	89 e5                	mov    ebp,esp
c0025238:	83 ec 24             	sub    esp,0x24
c002523b:	6a 01                	push   0x1
c002523d:	83 ec 0c             	sub    esp,0xc
c0025240:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025243:	e8 df 10 00 00       	call   c0026327 <__extendsfdf2>
c0025248:	83 c4 10             	add    esp,0x10
c002524b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002524e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025251:	52                   	push   edx
c0025252:	50                   	push   eax
c0025253:	50                   	push   eax
c0025254:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025257:	e8 cb 10 00 00       	call   c0026327 <__extendsfdf2>
c002525c:	59                   	pop    ecx
c002525d:	59                   	pop    ecx
c002525e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025261:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025264:	52                   	push   edx
c0025265:	50                   	push   eax
c0025266:	e8 35 ff ff ff       	call   c00251a0 <__cmpsf2>
c002526b:	83 c4 20             	add    esp,0x20
c002526e:	c9                   	leave  
c002526f:	c3                   	ret    

c0025270 <__nesf2>:
c0025270:	eb c3                	jmp    c0025235 <__eqsf2>

c0025272 <__gtsf2>:
c0025272:	55                   	push   ebp
c0025273:	89 e5                	mov    ebp,esp
c0025275:	83 ec 24             	sub    esp,0x24
c0025278:	6a ff                	push   0xffffffff
c002527a:	83 ec 0c             	sub    esp,0xc
c002527d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025280:	e8 a2 10 00 00       	call   c0026327 <__extendsfdf2>
c0025285:	83 c4 10             	add    esp,0x10
c0025288:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002528b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002528e:	52                   	push   edx
c002528f:	50                   	push   eax
c0025290:	50                   	push   eax
c0025291:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025294:	e8 8e 10 00 00       	call   c0026327 <__extendsfdf2>
c0025299:	59                   	pop    ecx
c002529a:	59                   	pop    ecx
c002529b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002529e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00252a1:	52                   	push   edx
c00252a2:	50                   	push   eax
c00252a3:	e8 f8 fe ff ff       	call   c00251a0 <__cmpsf2>
c00252a8:	83 c4 20             	add    esp,0x20
c00252ab:	c9                   	leave  
c00252ac:	c3                   	ret    

c00252ad <__gesf2>:
c00252ad:	eb c3                	jmp    c0025272 <__gtsf2>

c00252af <__ltsf2>:
c00252af:	eb 84                	jmp    c0025235 <__eqsf2>

c00252b1 <__lesf2>:
c00252b1:	eb 82                	jmp    c0025235 <__eqsf2>

c00252b3 <__adddf3>:
c00252b3:	55                   	push   ebp
c00252b4:	89 e5                	mov    ebp,esp
c00252b6:	57                   	push   edi
c00252b7:	56                   	push   esi
c00252b8:	53                   	push   ebx
c00252b9:	83 ec 24             	sub    esp,0x24
c00252bc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00252bf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00252c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00252c5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00252c8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00252cb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00252ce:	89 c8                	mov    eax,ecx
c00252d0:	89 ce                	mov    esi,ecx
c00252d2:	c1 fe 14             	sar    esi,0x14
c00252d5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00252d8:	89 fb                	mov    ebx,edi
c00252da:	89 fa                	mov    edx,edi
c00252dc:	c1 e2 0b             	shl    edx,0xb
c00252df:	c1 e0 0b             	shl    eax,0xb
c00252e2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00252e7:	c1 eb 15             	shr    ebx,0x15
c00252ea:	09 d8                	or     eax,ebx
c00252ec:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00252ef:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00252f2:	c1 fe 14             	sar    esi,0x14
c00252f5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00252f8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00252fb:	89 f3                	mov    ebx,esi
c00252fd:	c1 e3 0b             	shl    ebx,0xb
c0025300:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0025303:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025306:	c1 e3 0b             	shl    ebx,0xb
c0025309:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002530f:	c1 ee 15             	shr    esi,0x15
c0025312:	09 f3                	or     ebx,esi
c0025314:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0025317:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002531a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002531d:	0f 88 5f 02 00 00    	js     c0025582 <__adddf3+0x2cf>
c0025323:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025326:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0025329:	85 db                	test   ebx,ebx
c002532b:	0f 8e c7 00 00 00    	jle    c00253f8 <__adddf3+0x145>
c0025331:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0025338:	75 1a                	jne    c0025354 <__adddf3+0xa1>
c002533a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002533d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0025340:	0f 84 b2 05 00 00    	je     c00258f8 <__adddf3+0x645>
c0025346:	4b                   	dec    ebx
c0025347:	75 23                	jne    c002536c <__adddf3+0xb9>
c0025349:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002534c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002534f:	e9 99 00 00 00       	jmp    c00253ed <__adddf3+0x13a>
c0025354:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025357:	f7 d6                	not    esi
c0025359:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002535f:	0f 84 93 05 00 00    	je     c00258f8 <__adddf3+0x645>
c0025365:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002536c:	83 fb 1f             	cmp    ebx,0x1f
c002536f:	7e 42                	jle    c00253b3 <__adddf3+0x100>
c0025371:	83 fb 3f             	cmp    ebx,0x3f
c0025374:	0f 8f 7e 05 00 00    	jg     c00258f8 <__adddf3+0x645>
c002537a:	83 e3 1f             	and    ebx,0x1f
c002537d:	89 d9                	mov    ecx,ebx
c002537f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0025382:	d3 ef                	shr    edi,cl
c0025384:	31 db                	xor    ebx,ebx
c0025386:	85 c9                	test   ecx,ecx
c0025388:	74 15                	je     c002539f <__adddf3+0xec>
c002538a:	be 20 00 00 00       	mov    esi,0x20
c002538f:	29 ce                	sub    esi,ecx
c0025391:	89 f1                	mov    ecx,esi
c0025393:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025396:	d3 e6                	shl    esi,cl
c0025398:	31 db                	xor    ebx,ebx
c002539a:	85 f6                	test   esi,esi
c002539c:	0f 95 c3             	setne  bl
c002539f:	31 c9                	xor    ecx,ecx
c00253a1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00253a5:	0f 95 c1             	setne  cl
c00253a8:	09 cf                	or     edi,ecx
c00253aa:	09 fb                	or     ebx,edi
c00253ac:	01 da                	add    edx,ebx
c00253ae:	83 d0 00             	adc    eax,0x0
c00253b1:	eb 3a                	jmp    c00253ed <__adddf3+0x13a>
c00253b3:	bf 20 00 00 00       	mov    edi,0x20
c00253b8:	29 df                	sub    edi,ebx
c00253ba:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00253bd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00253c0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00253c3:	d3 e6                	shl    esi,cl
c00253c5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00253c8:	88 d9                	mov    cl,bl
c00253ca:	d3 ef                	shr    edi,cl
c00253cc:	09 fe                	or     esi,edi
c00253ce:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00253d1:	88 d9                	mov    cl,bl
c00253d3:	d3 ef                	shr    edi,cl
c00253d5:	89 fb                	mov    ebx,edi
c00253d7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00253da:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00253dd:	d3 e7                	shl    edi,cl
c00253df:	85 ff                	test   edi,edi
c00253e1:	0f 95 c1             	setne  cl
c00253e4:	0f b6 c9             	movzx  ecx,cl
c00253e7:	09 ce                	or     esi,ecx
c00253e9:	01 f2                	add    edx,esi
c00253eb:	11 d8                	adc    eax,ebx
c00253ed:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00253f0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00253f3:	e9 52 01 00 00       	jmp    c002554a <__adddf3+0x297>
c00253f8:	0f 84 d5 00 00 00    	je     c00254d3 <__adddf3+0x220>
c00253fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025401:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0025404:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0025407:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002540a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0025411:	75 20                	jne    c0025433 <__adddf3+0x180>
c0025413:	89 d6                	mov    esi,edx
c0025415:	09 c6                	or     esi,eax
c0025417:	0f 84 db 04 00 00    	je     c00258f8 <__adddf3+0x645>
c002541d:	4b                   	dec    ebx
c002541e:	75 29                	jne    c0025449 <__adddf3+0x196>
c0025420:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025423:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025426:	01 d1                	add    ecx,edx
c0025428:	11 c6                	adc    esi,eax
c002542a:	89 f0                	mov    eax,esi
c002542c:	89 ca                	mov    edx,ecx
c002542e:	e9 17 01 00 00       	jmp    c002554a <__adddf3+0x297>
c0025433:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0025436:	f7 d6                	not    esi
c0025438:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002543e:	0f 84 b4 04 00 00    	je     c00258f8 <__adddf3+0x645>
c0025444:	0d 00 00 00 80       	or     eax,0x80000000
c0025449:	83 fb 1f             	cmp    ebx,0x1f
c002544c:	7e 48                	jle    c0025496 <__adddf3+0x1e3>
c002544e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0025451:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0025454:	83 fb 3f             	cmp    ebx,0x3f
c0025457:	0f 8f 9b 04 00 00    	jg     c00258f8 <__adddf3+0x645>
c002545d:	83 e3 1f             	and    ebx,0x1f
c0025460:	89 d9                	mov    ecx,ebx
c0025462:	89 c7                	mov    edi,eax
c0025464:	d3 ef                	shr    edi,cl
c0025466:	31 db                	xor    ebx,ebx
c0025468:	85 c9                	test   ecx,ecx
c002546a:	74 12                	je     c002547e <__adddf3+0x1cb>
c002546c:	be 20 00 00 00       	mov    esi,0x20
c0025471:	29 ce                	sub    esi,ecx
c0025473:	89 f1                	mov    ecx,esi
c0025475:	d3 e0                	shl    eax,cl
c0025477:	31 db                	xor    ebx,ebx
c0025479:	85 c0                	test   eax,eax
c002547b:	0f 95 c3             	setne  bl
c002547e:	31 c0                	xor    eax,eax
c0025480:	85 d2                	test   edx,edx
c0025482:	0f 95 c0             	setne  al
c0025485:	09 c7                	or     edi,eax
c0025487:	09 fb                	or     ebx,edi
c0025489:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002548c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002548f:	01 da                	add    edx,ebx
c0025491:	83 d6 00             	adc    esi,0x0
c0025494:	eb 39                	jmp    c00254cf <__adddf3+0x21c>
c0025496:	be 20 00 00 00       	mov    esi,0x20
c002549b:	29 de                	sub    esi,ebx
c002549d:	89 c7                	mov    edi,eax
c002549f:	89 f1                	mov    ecx,esi
c00254a1:	d3 e7                	shl    edi,cl
c00254a3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00254a6:	89 d7                	mov    edi,edx
c00254a8:	88 d9                	mov    cl,bl
c00254aa:	d3 ef                	shr    edi,cl
c00254ac:	89 f9                	mov    ecx,edi
c00254ae:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00254b1:	09 cf                	or     edi,ecx
c00254b3:	88 d9                	mov    cl,bl
c00254b5:	d3 e8                	shr    eax,cl
c00254b7:	89 f1                	mov    ecx,esi
c00254b9:	d3 e2                	shl    edx,cl
c00254bb:	85 d2                	test   edx,edx
c00254bd:	0f 95 c2             	setne  dl
c00254c0:	0f b6 d2             	movzx  edx,dl
c00254c3:	09 d7                	or     edi,edx
c00254c5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00254c8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00254cb:	01 fa                	add    edx,edi
c00254cd:	11 c6                	adc    esi,eax
c00254cf:	89 f0                	mov    eax,esi
c00254d1:	eb 77                	jmp    c002554a <__adddf3+0x297>
c00254d3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00254d6:	46                   	inc    esi
c00254d7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00254da:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00254e0:	75 41                	jne    c0025523 <__adddf3+0x270>
c00254e2:	89 d3                	mov    ebx,edx
c00254e4:	09 c3                	or     ebx,eax
c00254e6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00254ed:	75 27                	jne    c0025516 <__adddf3+0x263>
c00254ef:	85 db                	test   ebx,ebx
c00254f1:	0f 84 fb 03 00 00    	je     c00258f2 <__adddf3+0x63f>
c00254f7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00254fa:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00254fd:	0f 84 f5 03 00 00    	je     c00258f8 <__adddf3+0x645>
c0025503:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0025506:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0025509:	85 c0                	test   eax,eax
c002550b:	0f 89 91 03 00 00    	jns    c00258a2 <__adddf3+0x5ef>
c0025511:	e9 85 03 00 00       	jmp    c002589b <__adddf3+0x5e8>
c0025516:	85 db                	test   ebx,ebx
c0025518:	0f 85 da 03 00 00    	jne    c00258f8 <__adddf3+0x645>
c002551e:	e9 cf 03 00 00       	jmp    c00258f2 <__adddf3+0x63f>
c0025523:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0025526:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0025529:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002552c:	f7 d1                	not    ecx
c002552e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0025534:	0f 84 70 03 00 00    	je     c00258aa <__adddf3+0x5f7>
c002553a:	d1 ea                	shr    edx,1
c002553c:	89 c1                	mov    ecx,eax
c002553e:	c1 e1 1f             	shl    ecx,0x1f
c0025541:	09 ca                	or     edx,ecx
c0025543:	d1 e8                	shr    eax,1
c0025545:	e9 6f 03 00 00       	jmp    c00258b9 <__adddf3+0x606>
c002554a:	85 c0                	test   eax,eax
c002554c:	0f 89 67 03 00 00    	jns    c00258b9 <__adddf3+0x606>
c0025552:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0025555:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025558:	f7 d1                	not    ecx
c002555a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0025560:	0f 84 44 03 00 00    	je     c00258aa <__adddf3+0x5f7>
c0025566:	89 d1                	mov    ecx,edx
c0025568:	d1 e9                	shr    ecx,1
c002556a:	83 e2 01             	and    edx,0x1
c002556d:	09 ca                	or     edx,ecx
c002556f:	89 c1                	mov    ecx,eax
c0025571:	c1 e1 1f             	shl    ecx,0x1f
c0025574:	09 ca                	or     edx,ecx
c0025576:	d1 e8                	shr    eax,1
c0025578:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002557d:	e9 37 03 00 00       	jmp    c00258b9 <__adddf3+0x606>
c0025582:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025585:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002558b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002558e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025591:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0025597:	29 de                	sub    esi,ebx
c0025599:	85 f6                	test   esi,esi
c002559b:	0f 8e bd 00 00 00    	jle    c002565e <__adddf3+0x3ab>
c00255a1:	85 db                	test   ebx,ebx
c00255a3:	75 17                	jne    c00255bc <__adddf3+0x309>
c00255a5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00255a8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00255ab:	0f 84 47 03 00 00    	je     c00258f8 <__adddf3+0x645>
c00255b1:	4e                   	dec    esi
c00255b2:	75 20                	jne    c00255d4 <__adddf3+0x321>
c00255b4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00255b7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00255ba:	eb 5b                	jmp    c0025617 <__adddf3+0x364>
c00255bc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00255bf:	f7 d3                	not    ebx
c00255c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00255c7:	0f 84 2b 03 00 00    	je     c00258f8 <__adddf3+0x645>
c00255cd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00255d4:	83 fe 1f             	cmp    esi,0x1f
c00255d7:	7e 49                	jle    c0025622 <__adddf3+0x36f>
c00255d9:	83 fe 3f             	cmp    esi,0x3f
c00255dc:	0f 8f 16 03 00 00    	jg     c00258f8 <__adddf3+0x645>
c00255e2:	83 e6 1f             	and    esi,0x1f
c00255e5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00255e8:	89 f1                	mov    ecx,esi
c00255ea:	d3 ef                	shr    edi,cl
c00255ec:	31 db                	xor    ebx,ebx
c00255ee:	85 f6                	test   esi,esi
c00255f0:	74 13                	je     c0025605 <__adddf3+0x352>
c00255f2:	b9 20 00 00 00       	mov    ecx,0x20
c00255f7:	29 f1                	sub    ecx,esi
c00255f9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00255fc:	d3 e6                	shl    esi,cl
c00255fe:	31 db                	xor    ebx,ebx
c0025600:	85 f6                	test   esi,esi
c0025602:	0f 95 c3             	setne  bl
c0025605:	31 c9                	xor    ecx,ecx
c0025607:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002560b:	0f 95 c1             	setne  cl
c002560e:	09 cf                	or     edi,ecx
c0025610:	09 fb                	or     ebx,edi
c0025612:	29 da                	sub    edx,ebx
c0025614:	83 d8 00             	sbb    eax,0x0
c0025617:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002561a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002561d:	e9 aa 01 00 00       	jmp    c00257cc <__adddf3+0x519>
c0025622:	bf 20 00 00 00       	mov    edi,0x20
c0025627:	29 f7                	sub    edi,esi
c0025629:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002562c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002562f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0025632:	d3 e3                	shl    ebx,cl
c0025634:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0025637:	89 f1                	mov    ecx,esi
c0025639:	d3 ef                	shr    edi,cl
c002563b:	09 fb                	or     ebx,edi
c002563d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0025640:	89 f1                	mov    ecx,esi
c0025642:	d3 ef                	shr    edi,cl
c0025644:	89 fe                	mov    esi,edi
c0025646:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0025649:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002564c:	d3 e7                	shl    edi,cl
c002564e:	85 ff                	test   edi,edi
c0025650:	0f 95 c1             	setne  cl
c0025653:	0f b6 c9             	movzx  ecx,cl
c0025656:	09 cb                	or     ebx,ecx
c0025658:	29 da                	sub    edx,ebx
c002565a:	19 f0                	sbb    eax,esi
c002565c:	eb b9                	jmp    c0025617 <__adddf3+0x364>
c002565e:	0f 84 cd 00 00 00    	je     c0025731 <__adddf3+0x47e>
c0025664:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0025667:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002566a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002566d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0025671:	75 1b                	jne    c002568e <__adddf3+0x3db>
c0025673:	89 d6                	mov    esi,edx
c0025675:	09 c6                	or     esi,eax
c0025677:	0f 84 7b 02 00 00    	je     c00258f8 <__adddf3+0x645>
c002567d:	4b                   	dec    ebx
c002567e:	75 24                	jne    c00256a4 <__adddf3+0x3f1>
c0025680:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025683:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025686:	29 d1                	sub    ecx,edx
c0025688:	19 c6                	sbb    esi,eax
c002568a:	89 ca                	mov    edx,ecx
c002568c:	eb 61                	jmp    c00256ef <__adddf3+0x43c>
c002568e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0025691:	f7 d6                	not    esi
c0025693:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0025699:	0f 84 59 02 00 00    	je     c00258f8 <__adddf3+0x645>
c002569f:	0d 00 00 00 80       	or     eax,0x80000000
c00256a4:	83 fb 1f             	cmp    ebx,0x1f
c00256a7:	7e 4d                	jle    c00256f6 <__adddf3+0x443>
c00256a9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00256ac:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00256af:	83 fb 3f             	cmp    ebx,0x3f
c00256b2:	0f 8f 40 02 00 00    	jg     c00258f8 <__adddf3+0x645>
c00256b8:	83 e3 1f             	and    ebx,0x1f
c00256bb:	89 d9                	mov    ecx,ebx
c00256bd:	89 c7                	mov    edi,eax
c00256bf:	d3 ef                	shr    edi,cl
c00256c1:	31 db                	xor    ebx,ebx
c00256c3:	85 c9                	test   ecx,ecx
c00256c5:	74 12                	je     c00256d9 <__adddf3+0x426>
c00256c7:	be 20 00 00 00       	mov    esi,0x20
c00256cc:	29 ce                	sub    esi,ecx
c00256ce:	89 f1                	mov    ecx,esi
c00256d0:	d3 e0                	shl    eax,cl
c00256d2:	31 db                	xor    ebx,ebx
c00256d4:	85 c0                	test   eax,eax
c00256d6:	0f 95 c3             	setne  bl
c00256d9:	31 c0                	xor    eax,eax
c00256db:	85 d2                	test   edx,edx
c00256dd:	0f 95 c0             	setne  al
c00256e0:	09 c7                	or     edi,eax
c00256e2:	09 fb                	or     ebx,edi
c00256e4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00256e7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00256ea:	29 da                	sub    edx,ebx
c00256ec:	83 de 00             	sbb    esi,0x0
c00256ef:	89 f0                	mov    eax,esi
c00256f1:	e9 d6 00 00 00       	jmp    c00257cc <__adddf3+0x519>
c00256f6:	be 20 00 00 00       	mov    esi,0x20
c00256fb:	29 de                	sub    esi,ebx
c00256fd:	89 c7                	mov    edi,eax
c00256ff:	89 f1                	mov    ecx,esi
c0025701:	d3 e7                	shl    edi,cl
c0025703:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0025706:	89 d7                	mov    edi,edx
c0025708:	88 d9                	mov    cl,bl
c002570a:	d3 ef                	shr    edi,cl
c002570c:	89 f9                	mov    ecx,edi
c002570e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025711:	09 cf                	or     edi,ecx
c0025713:	88 d9                	mov    cl,bl
c0025715:	d3 e8                	shr    eax,cl
c0025717:	89 f1                	mov    ecx,esi
c0025719:	d3 e2                	shl    edx,cl
c002571b:	85 d2                	test   edx,edx
c002571d:	0f 95 c2             	setne  dl
c0025720:	0f b6 d2             	movzx  edx,dl
c0025723:	09 d7                	or     edi,edx
c0025725:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025728:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002572b:	29 fa                	sub    edx,edi
c002572d:	19 c6                	sbb    esi,eax
c002572f:	eb be                	jmp    c00256ef <__adddf3+0x43c>
c0025731:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025734:	8d 5e 01             	lea    ebx,[esi+0x1]
c0025737:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002573d:	75 6a                	jne    c00257a9 <__adddf3+0x4f6>
c002573f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0025743:	75 58                	jne    c002579d <__adddf3+0x4ea>
c0025745:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025748:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002574b:	89 d6                	mov    esi,edx
c002574d:	09 c6                	or     esi,eax
c002574f:	75 17                	jne    c0025768 <__adddf3+0x4b5>
c0025751:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0025754:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0025757:	85 db                	test   ebx,ebx
c0025759:	0f 85 99 01 00 00    	jne    c00258f8 <__adddf3+0x645>
c002575f:	31 ff                	xor    edi,edi
c0025761:	31 c9                	xor    ecx,ecx
c0025763:	e9 90 01 00 00       	jmp    c00258f8 <__adddf3+0x645>
c0025768:	85 db                	test   ebx,ebx
c002576a:	0f 84 88 01 00 00    	je     c00258f8 <__adddf3+0x645>
c0025770:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0025773:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0025776:	85 c0                	test   eax,eax
c0025778:	79 10                	jns    c002578a <__adddf3+0x4d7>
c002577a:	31 c9                	xor    ecx,ecx
c002577c:	f7 da                	neg    edx
c002577e:	0f 95 c1             	setne  cl
c0025781:	01 c8                	add    eax,ecx
c0025783:	f7 d8                	neg    eax
c0025785:	e9 2f 01 00 00       	jmp    c00258b9 <__adddf3+0x606>
c002578a:	31 ff                	xor    edi,edi
c002578c:	31 c9                	xor    ecx,ecx
c002578e:	89 c3                	mov    ebx,eax
c0025790:	09 d3                	or     ebx,edx
c0025792:	0f 84 60 01 00 00    	je     c00258f8 <__adddf3+0x645>
c0025798:	e9 05 01 00 00       	jmp    c00258a2 <__adddf3+0x5ef>
c002579d:	31 ff                	xor    edi,edi
c002579f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00257a4:	e9 4f 01 00 00       	jmp    c00258f8 <__adddf3+0x645>
c00257a9:	89 c1                	mov    ecx,eax
c00257ab:	89 d0                	mov    eax,edx
c00257ad:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00257b0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00257b3:	89 ca                	mov    edx,ecx
c00257b5:	85 c9                	test   ecx,ecx
c00257b7:	79 2c                	jns    c00257e5 <__adddf3+0x532>
c00257b9:	31 c9                	xor    ecx,ecx
c00257bb:	f7 d8                	neg    eax
c00257bd:	0f 95 c1             	setne  cl
c00257c0:	01 ca                	add    edx,ecx
c00257c2:	f7 da                	neg    edx
c00257c4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00257c7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00257ca:	eb 19                	jmp    c00257e5 <__adddf3+0x532>
c00257cc:	85 c0                	test   eax,eax
c00257ce:	0f 89 e5 00 00 00    	jns    c00258b9 <__adddf3+0x606>
c00257d4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00257d9:	89 c1                	mov    ecx,eax
c00257db:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00257de:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00257e1:	89 d0                	mov    eax,edx
c00257e3:	89 ca                	mov    edx,ecx
c00257e5:	85 d2                	test   edx,edx
c00257e7:	74 59                	je     c0025842 <__adddf3+0x58f>
c00257e9:	0f bd da             	bsr    ebx,edx
c00257ec:	83 f3 1f             	xor    ebx,0x1f
c00257ef:	88 d9                	mov    cl,bl
c00257f1:	d3 e2                	shl    edx,cl
c00257f3:	bf 20 00 00 00       	mov    edi,0x20
c00257f8:	89 f9                	mov    ecx,edi
c00257fa:	29 d9                	sub    ecx,ebx
c00257fc:	89 c6                	mov    esi,eax
c00257fe:	d3 ee                	shr    esi,cl
c0025800:	09 d6                	or     esi,edx
c0025802:	88 d9                	mov    cl,bl
c0025804:	d3 e0                	shl    eax,cl
c0025806:	89 c2                	mov    edx,eax
c0025808:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002580b:	25 ff 07 00 00       	and    eax,0x7ff
c0025810:	39 d8                	cmp    eax,ebx
c0025812:	7f 22                	jg     c0025836 <__adddf3+0x583>
c0025814:	29 c3                	sub    ebx,eax
c0025816:	43                   	inc    ebx
c0025817:	88 d9                	mov    cl,bl
c0025819:	d3 ea                	shr    edx,cl
c002581b:	29 df                	sub    edi,ebx
c002581d:	89 f9                	mov    ecx,edi
c002581f:	89 f0                	mov    eax,esi
c0025821:	d3 e0                	shl    eax,cl
c0025823:	09 c2                	or     edx,eax
c0025825:	89 f0                	mov    eax,esi
c0025827:	88 d9                	mov    cl,bl
c0025829:	d3 e8                	shr    eax,cl
c002582b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002582e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0025834:	eb 6f                	jmp    c00258a5 <__adddf3+0x5f2>
c0025836:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025839:	29 d8                	sub    eax,ebx
c002583b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002583e:	89 f0                	mov    eax,esi
c0025840:	eb 59                	jmp    c002589b <__adddf3+0x5e8>
c0025842:	85 c0                	test   eax,eax
c0025844:	74 6a                	je     c00258b0 <__adddf3+0x5fd>
c0025846:	0f bd c8             	bsr    ecx,eax
c0025849:	83 f1 1f             	xor    ecx,0x1f
c002584c:	d3 e0                	shl    eax,cl
c002584e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025851:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0025857:	83 c1 20             	add    ecx,0x20
c002585a:	39 cb                	cmp    ebx,ecx
c002585c:	7f 35                	jg     c0025893 <__adddf3+0x5e0>
c002585e:	29 d9                	sub    ecx,ebx
c0025860:	8d 71 01             	lea    esi,[ecx+0x1]
c0025863:	83 fe 1f             	cmp    esi,0x1f
c0025866:	7e 09                	jle    c0025871 <__adddf3+0x5be>
c0025868:	83 e9 1f             	sub    ecx,0x1f
c002586b:	d3 e8                	shr    eax,cl
c002586d:	89 c3                	mov    ebx,eax
c002586f:	eb 11                	jmp    c0025882 <__adddf3+0x5cf>
c0025871:	b9 20 00 00 00       	mov    ecx,0x20
c0025876:	29 f1                	sub    ecx,esi
c0025878:	89 c3                	mov    ebx,eax
c002587a:	d3 e3                	shl    ebx,cl
c002587c:	89 f1                	mov    ecx,esi
c002587e:	d3 e8                	shr    eax,cl
c0025880:	89 c2                	mov    edx,eax
c0025882:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025885:	25 00 f8 ff ff       	and    eax,0xfffff800
c002588a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002588d:	89 d0                	mov    eax,edx
c002588f:	89 da                	mov    edx,ebx
c0025891:	eb 26                	jmp    c00258b9 <__adddf3+0x606>
c0025893:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025896:	29 cf                	sub    edi,ecx
c0025898:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002589b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00258a0:	eb 17                	jmp    c00258b9 <__adddf3+0x606>
c00258a2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00258a5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00258a8:	eb 0f                	jmp    c00258b9 <__adddf3+0x606>
c00258aa:	31 d2                	xor    edx,edx
c00258ac:	31 c0                	xor    eax,eax
c00258ae:	eb 09                	jmp    c00258b9 <__adddf3+0x606>
c00258b0:	89 c2                	mov    edx,eax
c00258b2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00258b9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00258bc:	c1 e1 14             	shl    ecx,0x14
c00258bf:	89 c3                	mov    ebx,eax
c00258c1:	c1 eb 0b             	shr    ebx,0xb
c00258c4:	09 d9                	or     ecx,ebx
c00258c6:	89 d3                	mov    ebx,edx
c00258c8:	c1 eb 0b             	shr    ebx,0xb
c00258cb:	c1 e0 15             	shl    eax,0x15
c00258ce:	09 d8                	or     eax,ebx
c00258d0:	89 c7                	mov    edi,eax
c00258d2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00258d8:	0f 95 c0             	setne  al
c00258db:	89 c6                	mov    esi,eax
c00258dd:	09 f3                	or     ebx,esi
c00258df:	83 e3 01             	and    ebx,0x1
c00258e2:	c1 ea 0a             	shr    edx,0xa
c00258e5:	21 da                	and    edx,ebx
c00258e7:	89 f8                	mov    eax,edi
c00258e9:	01 d0                	add    eax,edx
c00258eb:	83 d1 00             	adc    ecx,0x0
c00258ee:	89 c7                	mov    edi,eax
c00258f0:	eb 06                	jmp    c00258f8 <__adddf3+0x645>
c00258f2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00258f5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00258f8:	89 f8                	mov    eax,edi
c00258fa:	89 ca                	mov    edx,ecx
c00258fc:	83 c4 24             	add    esp,0x24
c00258ff:	5b                   	pop    ebx
c0025900:	5e                   	pop    esi
c0025901:	5f                   	pop    edi
c0025902:	5d                   	pop    ebp
c0025903:	c3                   	ret    

c0025904 <__subdf3>:
c0025904:	55                   	push   ebp
c0025905:	89 e5                	mov    ebp,esp
c0025907:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002590a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002590d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0025913:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0025916:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0025919:	5d                   	pop    ebp
c002591a:	e9 94 f9 ff ff       	jmp    c00252b3 <__adddf3>

c002591f <__negdf2>:
c002591f:	55                   	push   ebp
c0025920:	89 e5                	mov    ebp,esp
c0025922:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025925:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025928:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002592e:	5d                   	pop    ebp
c002592f:	c3                   	ret    

c0025930 <__muldf3>:
c0025930:	55                   	push   ebp
c0025931:	89 e5                	mov    ebp,esp
c0025933:	57                   	push   edi
c0025934:	56                   	push   esi
c0025935:	53                   	push   ebx
c0025936:	83 ec 24             	sub    esp,0x24
c0025939:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002593c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002593f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025942:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025945:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025948:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002594b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002594e:	89 c8                	mov    eax,ecx
c0025950:	c1 f8 14             	sar    eax,0x14
c0025953:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025956:	89 f8                	mov    eax,edi
c0025958:	89 fb                	mov    ebx,edi
c002595a:	c1 e3 0b             	shl    ebx,0xb
c002595d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0025960:	c1 e1 0b             	shl    ecx,0xb
c0025963:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0025969:	c1 e8 15             	shr    eax,0x15
c002596c:	09 c1                	or     ecx,eax
c002596e:	89 d6                	mov    esi,edx
c0025970:	89 d0                	mov    eax,edx
c0025972:	c1 f8 14             	sar    eax,0x14
c0025975:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025978:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002597b:	89 c3                	mov    ebx,eax
c002597d:	c1 e3 0b             	shl    ebx,0xb
c0025980:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0025983:	c1 e6 0b             	shl    esi,0xb
c0025986:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002598c:	c1 e8 15             	shr    eax,0x15
c002598f:	09 c6                	or     esi,eax
c0025991:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025994:	25 ff 07 00 00       	and    eax,0x7ff
c0025999:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002599c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002599f:	25 ff 07 00 00       	and    eax,0x7ff
c00259a4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00259a7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00259aa:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00259ad:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00259b4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00259b7:	40                   	inc    eax
c00259b8:	a9 fe 07 00 00       	test   eax,0x7fe
c00259bd:	0f 85 8d 00 00 00    	jne    c0025a50 <__muldf3+0x120>
c00259c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00259c6:	09 c8                	or     eax,ecx
c00259c8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00259cc:	74 44                	je     c0025a12 <__muldf3+0xe2>
c00259ce:	85 c0                	test   eax,eax
c00259d0:	0f 85 31 02 00 00    	jne    c0025c07 <__muldf3+0x2d7>
c00259d6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00259d9:	40                   	inc    eax
c00259da:	a9 fe 07 00 00       	test   eax,0x7fe
c00259df:	75 13                	jne    c00259f4 <__muldf3+0xc4>
c00259e1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00259e4:	09 f1                	or     ecx,esi
c00259e6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00259ea:	74 22                	je     c0025a0e <__muldf3+0xde>
c00259ec:	85 c9                	test   ecx,ecx
c00259ee:	0f 85 0d 02 00 00    	jne    c0025c01 <__muldf3+0x2d1>
c00259f4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00259f8:	0f 89 09 02 00 00    	jns    c0025c07 <__muldf3+0x2d7>
c00259fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025a01:	05 00 00 00 80       	add    eax,0x80000000
c0025a06:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025a09:	e9 f9 01 00 00       	jmp    c0025c07 <__muldf3+0x2d7>
c0025a0e:	85 c9                	test   ecx,ecx
c0025a10:	eb 2e                	jmp    c0025a40 <__muldf3+0x110>
c0025a12:	85 c0                	test   eax,eax
c0025a14:	74 20                	je     c0025a36 <__muldf3+0x106>
c0025a16:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0025a19:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025a1c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025a1f:	c1 ef 1f             	shr    edi,0x1f
c0025a22:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0025a25:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0025a28:	8d 43 ff             	lea    eax,[ebx-0x1]
c0025a2b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025a2e:	09 f9                	or     ecx,edi
c0025a30:	78 1e                	js     c0025a50 <__muldf3+0x120>
c0025a32:	89 c3                	mov    ebx,eax
c0025a34:	eb e0                	jmp    c0025a16 <__muldf3+0xe6>
c0025a36:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025a39:	f7 d0                	not    eax
c0025a3b:	a9 ff 07 00 00       	test   eax,0x7ff
c0025a40:	75 b2                	jne    c00259f4 <__muldf3+0xc4>
c0025a42:	31 ff                	xor    edi,edi
c0025a44:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0025a4b:	e9 b7 01 00 00       	jmp    c0025c07 <__muldf3+0x2d7>
c0025a50:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025a53:	40                   	inc    eax
c0025a54:	a9 fe 07 00 00       	test   eax,0x7fe
c0025a59:	75 57                	jne    c0025ab2 <__muldf3+0x182>
c0025a5b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a5e:	09 f0                	or     eax,esi
c0025a60:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0025a64:	74 23                	je     c0025a89 <__muldf3+0x159>
c0025a66:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0025a6a:	0f 89 91 01 00 00    	jns    c0025c01 <__muldf3+0x2d1>
c0025a70:	85 c0                	test   eax,eax
c0025a72:	0f 85 89 01 00 00    	jne    c0025c01 <__muldf3+0x2d1>
c0025a78:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0025a7b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0025a81:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025a84:	e9 7e 01 00 00       	jmp    c0025c07 <__muldf3+0x2d7>
c0025a89:	85 c0                	test   eax,eax
c0025a8b:	75 0c                	jne    c0025a99 <__muldf3+0x169>
c0025a8d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0025a91:	0f 89 6a 01 00 00    	jns    c0025c01 <__muldf3+0x2d1>
c0025a97:	eb df                	jmp    c0025a78 <__muldf3+0x148>
c0025a99:	01 f6                	add    esi,esi
c0025a9b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025a9e:	c1 ea 1f             	shr    edx,0x1f
c0025aa1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0025aa4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0025aa7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0025aaa:	09 d6                	or     esi,edx
c0025aac:	78 04                	js     c0025ab2 <__muldf3+0x182>
c0025aae:	89 c3                	mov    ebx,eax
c0025ab0:	eb e7                	jmp    c0025a99 <__muldf3+0x169>
c0025ab2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0025ab8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025abe:	89 c8                	mov    eax,ecx
c0025ac0:	f7 e6                	mul    esi
c0025ac2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0025ac5:	89 c7                	mov    edi,eax
c0025ac7:	89 c8                	mov    eax,ecx
c0025ac9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0025acc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0025acf:	89 c1                	mov    ecx,eax
c0025ad1:	89 f0                	mov    eax,esi
c0025ad3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0025ad6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0025ad9:	89 c6                	mov    esi,eax
c0025adb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025ade:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0025ae1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0025ae4:	31 c0                	xor    eax,eax
c0025ae6:	01 f1                	add    ecx,esi
c0025ae8:	0f 92 c0             	setb   al
c0025aeb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0025aee:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0025af1:	83 d6 00             	adc    esi,0x0
c0025af4:	01 c7                	add    edi,eax
c0025af6:	83 d6 00             	adc    esi,0x0
c0025af9:	01 ca                	add    edx,ecx
c0025afb:	0f 92 c1             	setb   cl
c0025afe:	0f b6 c9             	movzx  ecx,cl
c0025b01:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0025b04:	83 d6 00             	adc    esi,0x0
c0025b07:	01 cf                	add    edi,ecx
c0025b09:	83 d6 00             	adc    esi,0x0
c0025b0c:	31 c9                	xor    ecx,ecx
c0025b0e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0025b11:	0f 95 c1             	setne  cl
c0025b14:	09 cf                	or     edi,ecx
c0025b16:	85 f6                	test   esi,esi
c0025b18:	78 0c                	js     c0025b26 <__muldf3+0x1f6>
c0025b1a:	01 f6                	add    esi,esi
c0025b1c:	89 f8                	mov    eax,edi
c0025b1e:	c1 e8 1f             	shr    eax,0x1f
c0025b21:	09 c6                	or     esi,eax
c0025b23:	01 ff                	add    edi,edi
c0025b25:	4b                   	dec    ebx
c0025b26:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0025b2c:	0f 8f 85 00 00 00    	jg     c0025bb7 <__muldf3+0x287>
c0025b32:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0025b38:	85 db                	test   ebx,ebx
c0025b3a:	0f 8f 84 00 00 00    	jg     c0025bc4 <__muldf3+0x294>
c0025b40:	83 fb cc             	cmp    ebx,0xffffffcc
c0025b43:	7c 79                	jl     c0025bbe <__muldf3+0x28e>
c0025b45:	ba 01 00 00 00       	mov    edx,0x1
c0025b4a:	29 da                	sub    edx,ebx
c0025b4c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025b52:	83 fa 1f             	cmp    edx,0x1f
c0025b55:	7e 30                	jle    c0025b87 <__muldf3+0x257>
c0025b57:	83 fa 20             	cmp    edx,0x20
c0025b5a:	75 0b                	jne    c0025b67 <__muldf3+0x237>
c0025b5c:	31 c0                	xor    eax,eax
c0025b5e:	85 ff                	test   edi,edi
c0025b60:	0f 95 c0             	setne  al
c0025b63:	89 c7                	mov    edi,eax
c0025b65:	eb 1a                	jmp    c0025b81 <__muldf3+0x251>
c0025b67:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0025b6a:	89 f0                	mov    eax,esi
c0025b6c:	d3 e0                	shl    eax,cl
c0025b6e:	09 f8                	or     eax,edi
c0025b70:	0f 95 c0             	setne  al
c0025b73:	0f b6 c0             	movzx  eax,al
c0025b76:	89 c7                	mov    edi,eax
c0025b78:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0025b7d:	29 d9                	sub    ecx,ebx
c0025b7f:	d3 ee                	shr    esi,cl
c0025b81:	09 f7                	or     edi,esi
c0025b83:	31 db                	xor    ebx,ebx
c0025b85:	eb 3b                	jmp    c0025bc2 <__muldf3+0x292>
c0025b87:	83 c3 1f             	add    ebx,0x1f
c0025b8a:	89 f0                	mov    eax,esi
c0025b8c:	88 d9                	mov    cl,bl
c0025b8e:	d3 e0                	shl    eax,cl
c0025b90:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025b93:	89 f8                	mov    eax,edi
c0025b95:	88 d1                	mov    cl,dl
c0025b97:	d3 e8                	shr    eax,cl
c0025b99:	89 c1                	mov    ecx,eax
c0025b9b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025b9e:	09 c8                	or     eax,ecx
c0025ba0:	88 d9                	mov    cl,bl
c0025ba2:	d3 e7                	shl    edi,cl
c0025ba4:	31 db                	xor    ebx,ebx
c0025ba6:	85 ff                	test   edi,edi
c0025ba8:	0f 95 c3             	setne  bl
c0025bab:	89 df                	mov    edi,ebx
c0025bad:	09 c7                	or     edi,eax
c0025baf:	88 d1                	mov    cl,dl
c0025bb1:	d3 ee                	shr    esi,cl
c0025bb3:	31 db                	xor    ebx,ebx
c0025bb5:	eb 0d                	jmp    c0025bc4 <__muldf3+0x294>
c0025bb7:	bb ff 07 00 00       	mov    ebx,0x7ff
c0025bbc:	eb 02                	jmp    c0025bc0 <__muldf3+0x290>
c0025bbe:	31 db                	xor    ebx,ebx
c0025bc0:	31 ff                	xor    edi,edi
c0025bc2:	31 f6                	xor    esi,esi
c0025bc4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025bc7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0025bca:	25 00 f8 ff ff       	and    eax,0xfffff800
c0025bcf:	09 c3                	or     ebx,eax
c0025bd1:	c1 e3 14             	shl    ebx,0x14
c0025bd4:	89 f0                	mov    eax,esi
c0025bd6:	c1 e8 0b             	shr    eax,0xb
c0025bd9:	09 c3                	or     ebx,eax
c0025bdb:	89 f8                	mov    eax,edi
c0025bdd:	c1 e8 0b             	shr    eax,0xb
c0025be0:	c1 e6 15             	shl    esi,0x15
c0025be3:	09 c6                	or     esi,eax
c0025be5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0025beb:	0f 95 c1             	setne  cl
c0025bee:	09 c8                	or     eax,ecx
c0025bf0:	83 e0 01             	and    eax,0x1
c0025bf3:	c1 ef 0a             	shr    edi,0xa
c0025bf6:	21 c7                	and    edi,eax
c0025bf8:	01 f7                	add    edi,esi
c0025bfa:	83 d3 00             	adc    ebx,0x0
c0025bfd:	89 da                	mov    edx,ebx
c0025bff:	eb 03                	jmp    c0025c04 <__muldf3+0x2d4>
c0025c01:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0025c04:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0025c07:	89 f8                	mov    eax,edi
c0025c09:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025c0c:	83 c4 24             	add    esp,0x24
c0025c0f:	5b                   	pop    ebx
c0025c10:	5e                   	pop    esi
c0025c11:	5f                   	pop    edi
c0025c12:	5d                   	pop    ebp
c0025c13:	c3                   	ret    

c0025c14 <__divdf3>:
c0025c14:	55                   	push   ebp
c0025c15:	89 e5                	mov    ebp,esp
c0025c17:	57                   	push   edi
c0025c18:	56                   	push   esi
c0025c19:	53                   	push   ebx
c0025c1a:	83 ec 2c             	sub    esp,0x2c
c0025c1d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025c20:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025c23:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c26:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0025c29:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c2c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025c2f:	89 ce                	mov    esi,ecx
c0025c31:	89 c8                	mov    eax,ecx
c0025c33:	c1 f8 14             	sar    eax,0x14
c0025c36:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c39:	89 f8                	mov    eax,edi
c0025c3b:	89 fb                	mov    ebx,edi
c0025c3d:	c1 e3 0b             	shl    ebx,0xb
c0025c40:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0025c43:	c1 e6 0b             	shl    esi,0xb
c0025c46:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0025c4c:	c1 e8 15             	shr    eax,0x15
c0025c4f:	09 c6                	or     esi,eax
c0025c51:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0025c54:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025c57:	89 c2                	mov    edx,eax
c0025c59:	c1 fa 14             	sar    edx,0x14
c0025c5c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0025c5f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0025c62:	89 de                	mov    esi,ebx
c0025c64:	c1 e6 0b             	shl    esi,0xb
c0025c67:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0025c6a:	c1 e0 0b             	shl    eax,0xb
c0025c6d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025c72:	c1 eb 15             	shr    ebx,0x15
c0025c75:	09 d8                	or     eax,ebx
c0025c77:	89 c2                	mov    edx,eax
c0025c79:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025c7c:	25 ff 07 00 00       	and    eax,0x7ff
c0025c81:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025c84:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025c87:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0025c8d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0025c90:	29 d8                	sub    eax,ebx
c0025c92:	05 ff 03 00 00       	add    eax,0x3ff
c0025c97:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025c9a:	46                   	inc    esi
c0025c9b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0025ca1:	0f 85 a5 00 00 00    	jne    c0025d4c <__divdf3+0x138>
c0025ca7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0025caa:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0025cad:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0025cb1:	74 2a                	je     c0025cdd <__divdf3+0xc9>
c0025cb3:	85 f6                	test   esi,esi
c0025cb5:	0f 85 cc 02 00 00    	jne    c0025f87 <__divdf3+0x373>
c0025cbb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025cbe:	40                   	inc    eax
c0025cbf:	a9 fe 07 00 00       	test   eax,0x7fe
c0025cc4:	75 26                	jne    c0025cec <__divdf3+0xd8>
c0025cc6:	85 db                	test   ebx,ebx
c0025cc8:	74 22                	je     c0025cec <__divdf3+0xd8>
c0025cca:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0025ccd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0025cd0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025cd3:	09 d0                	or     eax,edx
c0025cd5:	0f 85 ac 02 00 00    	jne    c0025f87 <__divdf3+0x373>
c0025cdb:	eb 63                	jmp    c0025d40 <__divdf3+0x12c>
c0025cdd:	85 f6                	test   esi,esi
c0025cdf:	75 22                	jne    c0025d03 <__divdf3+0xef>
c0025ce1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025ce4:	40                   	inc    eax
c0025ce5:	a9 fe 07 00 00       	test   eax,0x7fe
c0025cea:	74 36                	je     c0025d22 <__divdf3+0x10e>
c0025cec:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025cf0:	0f 89 91 02 00 00    	jns    c0025f87 <__divdf3+0x373>
c0025cf6:	89 f8                	mov    eax,edi
c0025cf8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0025cfe:	e9 80 02 00 00       	jmp    c0025f83 <__divdf3+0x36f>
c0025d03:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025d06:	01 f6                	add    esi,esi
c0025d08:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0025d0b:	c1 ef 1f             	shr    edi,0x1f
c0025d0e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025d11:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0025d14:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025d17:	09 f7                	or     edi,esi
c0025d19:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0025d1c:	78 2e                	js     c0025d4c <__divdf3+0x138>
c0025d1e:	89 c8                	mov    eax,ecx
c0025d20:	eb e1                	jmp    c0025d03 <__divdf3+0xef>
c0025d22:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025d25:	09 d0                	or     eax,edx
c0025d27:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0025d2b:	74 0f                	je     c0025d3c <__divdf3+0x128>
c0025d2d:	85 c0                	test   eax,eax
c0025d2f:	74 bb                	je     c0025cec <__divdf3+0xd8>
c0025d31:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0025d34:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0025d37:	e9 4b 02 00 00       	jmp    c0025f87 <__divdf3+0x373>
c0025d3c:	85 c0                	test   eax,eax
c0025d3e:	75 ac                	jne    c0025cec <__divdf3+0xd8>
c0025d40:	31 ff                	xor    edi,edi
c0025d42:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0025d47:	e9 3b 02 00 00       	jmp    c0025f87 <__divdf3+0x373>
c0025d4c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025d4f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0025d52:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0025d58:	75 6b                	jne    c0025dc5 <__divdf3+0x1b1>
c0025d5a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025d5d:	09 d6                	or     esi,edx
c0025d5f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0025d63:	74 28                	je     c0025d8d <__divdf3+0x179>
c0025d65:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0025d68:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0025d6b:	85 f6                	test   esi,esi
c0025d6d:	0f 85 14 02 00 00    	jne    c0025f87 <__divdf3+0x373>
c0025d73:	31 ff                	xor    edi,edi
c0025d75:	31 c9                	xor    ecx,ecx
c0025d77:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025d7a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0025d7d:	0f 89 04 02 00 00    	jns    c0025f87 <__divdf3+0x373>
c0025d83:	b9 00 00 00 80       	mov    ecx,0x80000000
c0025d88:	e9 fa 01 00 00       	jmp    c0025f87 <__divdf3+0x373>
c0025d8d:	85 f6                	test   esi,esi
c0025d8f:	75 1b                	jne    c0025dac <__divdf3+0x198>
c0025d91:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025d94:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0025d97:	25 00 00 00 80       	and    eax,0x80000000
c0025d9c:	31 c9                	xor    ecx,ecx
c0025d9e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0025da3:	89 cf                	mov    edi,ecx
c0025da5:	89 c1                	mov    ecx,eax
c0025da7:	e9 db 01 00 00       	jmp    c0025f87 <__divdf3+0x373>
c0025dac:	01 d2                	add    edx,edx
c0025dae:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025db1:	c1 eb 1f             	shr    ebx,0x1f
c0025db4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025db7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0025dba:	8d 48 01             	lea    ecx,[eax+0x1]
c0025dbd:	09 da                	or     edx,ebx
c0025dbf:	78 04                	js     c0025dc5 <__divdf3+0x1b1>
c0025dc1:	89 c8                	mov    eax,ecx
c0025dc3:	eb e7                	jmp    c0025dac <__divdf3+0x198>
c0025dc5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025dc8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025dce:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025dd4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0025dd7:	39 d6                	cmp    esi,edx
c0025dd9:	77 0d                	ja     c0025de8 <__divdf3+0x1d4>
c0025ddb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025dde:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0025de1:	72 1b                	jb     c0025dfe <__divdf3+0x1ea>
c0025de3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0025de6:	75 16                	jne    c0025dfe <__divdf3+0x1ea>
c0025de8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0025deb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025dee:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0025df1:	83 de 00             	sbb    esi,0x0
c0025df4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0025df7:	ba 01 00 00 00       	mov    edx,0x1
c0025dfc:	eb 02                	jmp    c0025e00 <__divdf3+0x1ec>
c0025dfe:	31 d2                	xor    edx,edx
c0025e00:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0025e07:	31 ff                	xor    edi,edi
c0025e09:	01 ff                	add    edi,edi
c0025e0b:	89 d1                	mov    ecx,edx
c0025e0d:	c1 e9 1f             	shr    ecx,0x1f
c0025e10:	09 cf                	or     edi,ecx
c0025e12:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0025e15:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0025e18:	89 da                	mov    edx,ebx
c0025e1a:	89 f3                	mov    ebx,esi
c0025e1c:	8d 34 36             	lea    esi,[esi+esi*1]
c0025e1f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025e22:	c1 e9 1f             	shr    ecx,0x1f
c0025e25:	09 ce                	or     esi,ecx
c0025e27:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025e2a:	01 c9                	add    ecx,ecx
c0025e2c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0025e2f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0025e32:	85 db                	test   ebx,ebx
c0025e34:	78 29                	js     c0025e5f <__divdf3+0x24b>
c0025e36:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0025e39:	72 07                	jb     c0025e42 <__divdf3+0x22e>
c0025e3b:	75 3c                	jne    c0025e79 <__divdf3+0x265>
c0025e3d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0025e40:	77 37                	ja     c0025e79 <__divdf3+0x265>
c0025e42:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0025e45:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0025e48:	31 d2                	xor    edx,edx
c0025e4a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0025e4d:	0f 97 c2             	seta   dl
c0025e50:	29 d6                	sub    esi,edx
c0025e52:	89 d9                	mov    ecx,ebx
c0025e54:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0025e57:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0025e5a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025e5d:	eb 17                	jmp    c0025e76 <__divdf3+0x262>
c0025e5f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0025e62:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025e65:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0025e68:	0f 97 c1             	seta   cl
c0025e6b:	0f b6 c9             	movzx  ecx,cl
c0025e6e:	29 ce                	sub    esi,ecx
c0025e70:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0025e73:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0025e76:	83 ca 01             	or     edx,0x1
c0025e79:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0025e7c:	75 8b                	jne    c0025e09 <__divdf3+0x1f5>
c0025e7e:	c1 e7 09             	shl    edi,0x9
c0025e81:	89 d1                	mov    ecx,edx
c0025e83:	c1 e9 17             	shr    ecx,0x17
c0025e86:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025e89:	09 f3                	or     ebx,esi
c0025e8b:	0f 95 c3             	setne  bl
c0025e8e:	0f b6 db             	movzx  ebx,bl
c0025e91:	c1 e2 09             	shl    edx,0x9
c0025e94:	09 d3                	or     ebx,edx
c0025e96:	89 ca                	mov    edx,ecx
c0025e98:	09 fa                	or     edx,edi
c0025e9a:	78 0c                	js     c0025ea8 <__divdf3+0x294>
c0025e9c:	01 d2                	add    edx,edx
c0025e9e:	89 d9                	mov    ecx,ebx
c0025ea0:	c1 e9 1f             	shr    ecx,0x1f
c0025ea3:	09 ca                	or     edx,ecx
c0025ea5:	01 db                	add    ebx,ebx
c0025ea7:	48                   	dec    eax
c0025ea8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0025ead:	0f 8f 83 00 00 00    	jg     c0025f36 <__divdf3+0x322>
c0025eb3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025eb9:	85 c0                	test   eax,eax
c0025ebb:	0f 8f 82 00 00 00    	jg     c0025f43 <__divdf3+0x32f>
c0025ec1:	83 f8 cc             	cmp    eax,0xffffffcc
c0025ec4:	7c 77                	jl     c0025f3d <__divdf3+0x329>
c0025ec6:	be 01 00 00 00       	mov    esi,0x1
c0025ecb:	29 c6                	sub    esi,eax
c0025ecd:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025ed3:	83 fe 1f             	cmp    esi,0x1f
c0025ed6:	7e 2f                	jle    c0025f07 <__divdf3+0x2f3>
c0025ed8:	83 fe 20             	cmp    esi,0x20
c0025edb:	75 0a                	jne    c0025ee7 <__divdf3+0x2d3>
c0025edd:	85 db                	test   ebx,ebx
c0025edf:	0f 95 c3             	setne  bl
c0025ee2:	0f b6 db             	movzx  ebx,bl
c0025ee5:	eb 1a                	jmp    c0025f01 <__divdf3+0x2ed>
c0025ee7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0025eea:	89 d7                	mov    edi,edx
c0025eec:	d3 e7                	shl    edi,cl
c0025eee:	89 f9                	mov    ecx,edi
c0025ef0:	09 d9                	or     ecx,ebx
c0025ef2:	0f 95 c3             	setne  bl
c0025ef5:	0f b6 db             	movzx  ebx,bl
c0025ef8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0025efd:	29 c1                	sub    ecx,eax
c0025eff:	d3 ea                	shr    edx,cl
c0025f01:	09 d3                	or     ebx,edx
c0025f03:	31 c0                	xor    eax,eax
c0025f05:	eb 3a                	jmp    c0025f41 <__divdf3+0x32d>
c0025f07:	83 c0 1f             	add    eax,0x1f
c0025f0a:	89 d7                	mov    edi,edx
c0025f0c:	88 c1                	mov    cl,al
c0025f0e:	d3 e7                	shl    edi,cl
c0025f10:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025f13:	89 df                	mov    edi,ebx
c0025f15:	89 f1                	mov    ecx,esi
c0025f17:	d3 ef                	shr    edi,cl
c0025f19:	89 f9                	mov    ecx,edi
c0025f1b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0025f1e:	09 cf                	or     edi,ecx
c0025f20:	88 c1                	mov    cl,al
c0025f22:	d3 e3                	shl    ebx,cl
c0025f24:	85 db                	test   ebx,ebx
c0025f26:	0f 95 c3             	setne  bl
c0025f29:	0f b6 db             	movzx  ebx,bl
c0025f2c:	09 fb                	or     ebx,edi
c0025f2e:	89 f1                	mov    ecx,esi
c0025f30:	d3 ea                	shr    edx,cl
c0025f32:	31 c0                	xor    eax,eax
c0025f34:	eb 0d                	jmp    c0025f43 <__divdf3+0x32f>
c0025f36:	b8 ff 07 00 00       	mov    eax,0x7ff
c0025f3b:	eb 02                	jmp    c0025f3f <__divdf3+0x32b>
c0025f3d:	31 c0                	xor    eax,eax
c0025f3f:	31 db                	xor    ebx,ebx
c0025f41:	31 d2                	xor    edx,edx
c0025f43:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0025f46:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0025f49:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0025f4f:	09 c8                	or     eax,ecx
c0025f51:	c1 e0 14             	shl    eax,0x14
c0025f54:	89 d1                	mov    ecx,edx
c0025f56:	c1 e9 0b             	shr    ecx,0xb
c0025f59:	09 c8                	or     eax,ecx
c0025f5b:	89 c6                	mov    esi,eax
c0025f5d:	89 d9                	mov    ecx,ebx
c0025f5f:	c1 e9 0b             	shr    ecx,0xb
c0025f62:	c1 e2 15             	shl    edx,0x15
c0025f65:	09 ca                	or     edx,ecx
c0025f67:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0025f6d:	0f 95 c0             	setne  al
c0025f70:	09 c1                	or     ecx,eax
c0025f72:	83 e1 01             	and    ecx,0x1
c0025f75:	c1 eb 0a             	shr    ebx,0xa
c0025f78:	21 cb                	and    ebx,ecx
c0025f7a:	01 d3                	add    ebx,edx
c0025f7c:	89 d8                	mov    eax,ebx
c0025f7e:	83 d6 00             	adc    esi,0x0
c0025f81:	89 f2                	mov    edx,esi
c0025f83:	89 c7                	mov    edi,eax
c0025f85:	89 d1                	mov    ecx,edx
c0025f87:	89 f8                	mov    eax,edi
c0025f89:	89 ca                	mov    edx,ecx
c0025f8b:	83 c4 2c             	add    esp,0x2c
c0025f8e:	5b                   	pop    ebx
c0025f8f:	5e                   	pop    esi
c0025f90:	5f                   	pop    edi
c0025f91:	5d                   	pop    ebp
c0025f92:	c3                   	ret    

c0025f93 <__floatsidf>:
c0025f93:	55                   	push   ebp
c0025f94:	89 e5                	mov    ebp,esp
c0025f96:	56                   	push   esi
c0025f97:	53                   	push   ebx
c0025f98:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025f9b:	85 db                	test   ebx,ebx
c0025f9d:	7e 15                	jle    c0025fb4 <__floatsidf+0x21>
c0025f9f:	0f bd cb             	bsr    ecx,ebx
c0025fa2:	83 f1 1f             	xor    ecx,0x1f
c0025fa5:	d3 e3                	shl    ebx,cl
c0025fa7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025fad:	b8 1e 04 00 00       	mov    eax,0x41e
c0025fb2:	eb 21                	jmp    c0025fd5 <__floatsidf+0x42>
c0025fb4:	b8 00 00 00 00       	mov    eax,0x0
c0025fb9:	ba 00 00 00 00       	mov    edx,0x0
c0025fbe:	74 2a                	je     c0025fea <__floatsidf+0x57>
c0025fc0:	f7 db                	neg    ebx
c0025fc2:	0f bd cb             	bsr    ecx,ebx
c0025fc5:	83 f1 1f             	xor    ecx,0x1f
c0025fc8:	d3 e3                	shl    ebx,cl
c0025fca:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025fd0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0025fd5:	29 c8                	sub    eax,ecx
c0025fd7:	c1 e0 14             	shl    eax,0x14
c0025fda:	89 c1                	mov    ecx,eax
c0025fdc:	89 de                	mov    esi,ebx
c0025fde:	c1 ee 0b             	shr    esi,0xb
c0025fe1:	09 f1                	or     ecx,esi
c0025fe3:	89 ca                	mov    edx,ecx
c0025fe5:	c1 e3 15             	shl    ebx,0x15
c0025fe8:	89 d8                	mov    eax,ebx
c0025fea:	5b                   	pop    ebx
c0025feb:	5e                   	pop    esi
c0025fec:	5d                   	pop    ebp
c0025fed:	c3                   	ret    

c0025fee <__floatunsidf>:
c0025fee:	55                   	push   ebp
c0025fef:	89 e5                	mov    ebp,esp
c0025ff1:	56                   	push   esi
c0025ff2:	53                   	push   ebx
c0025ff3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025ff6:	85 db                	test   ebx,ebx
c0025ff8:	74 2a                	je     c0026024 <__floatunsidf+0x36>
c0025ffa:	0f bd cb             	bsr    ecx,ebx
c0025ffd:	83 f1 1f             	xor    ecx,0x1f
c0026000:	d3 e3                	shl    ebx,cl
c0026002:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026008:	b8 1e 04 00 00       	mov    eax,0x41e
c002600d:	29 c8                	sub    eax,ecx
c002600f:	c1 e0 14             	shl    eax,0x14
c0026012:	89 c1                	mov    ecx,eax
c0026014:	89 de                	mov    esi,ebx
c0026016:	c1 ee 0b             	shr    esi,0xb
c0026019:	09 f1                	or     ecx,esi
c002601b:	89 ca                	mov    edx,ecx
c002601d:	c1 e3 15             	shl    ebx,0x15
c0026020:	89 d8                	mov    eax,ebx
c0026022:	eb 04                	jmp    c0026028 <__floatunsidf+0x3a>
c0026024:	31 c0                	xor    eax,eax
c0026026:	31 d2                	xor    edx,edx
c0026028:	5b                   	pop    ebx
c0026029:	5e                   	pop    esi
c002602a:	5d                   	pop    ebp
c002602b:	c3                   	ret    

c002602c <__fixdfsi>:
c002602c:	55                   	push   ebp
c002602d:	89 e5                	mov    ebp,esp
c002602f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026032:	89 d1                	mov    ecx,edx
c0026034:	c1 e1 0b             	shl    ecx,0xb
c0026037:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002603d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026040:	c1 e8 15             	shr    eax,0x15
c0026043:	09 c1                	or     ecx,eax
c0026045:	c1 fa 14             	sar    edx,0x14
c0026048:	78 1f                	js     c0026069 <__fixdfsi+0x3d>
c002604a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0026050:	31 c0                	xor    eax,eax
c0026052:	83 fa 1e             	cmp    edx,0x1e
c0026055:	77 40                	ja     c0026097 <__fixdfsi+0x6b>
c0026057:	89 c8                	mov    eax,ecx
c0026059:	0d 00 00 00 80       	or     eax,0x80000000
c002605e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026063:	29 d1                	sub    ecx,edx
c0026065:	d3 e8                	shr    eax,cl
c0026067:	eb 2e                	jmp    c0026097 <__fixdfsi+0x6b>
c0026069:	31 c0                	xor    eax,eax
c002606b:	81 c2 01 04 00 00    	add    edx,0x401
c0026071:	78 24                	js     c0026097 <__fixdfsi+0x6b>
c0026073:	83 fa 1e             	cmp    edx,0x1e
c0026076:	7e 09                	jle    c0026081 <__fixdfsi+0x55>
c0026078:	83 fa 1f             	cmp    edx,0x1f
c002607b:	75 18                	jne    c0026095 <__fixdfsi+0x69>
c002607d:	85 c9                	test   ecx,ecx
c002607f:	75 14                	jne    c0026095 <__fixdfsi+0x69>
c0026081:	89 c8                	mov    eax,ecx
c0026083:	0d 00 00 00 80       	or     eax,0x80000000
c0026088:	b9 1f 00 00 00       	mov    ecx,0x1f
c002608d:	29 d1                	sub    ecx,edx
c002608f:	d3 e8                	shr    eax,cl
c0026091:	f7 d8                	neg    eax
c0026093:	eb 02                	jmp    c0026097 <__fixdfsi+0x6b>
c0026095:	31 c0                	xor    eax,eax
c0026097:	5d                   	pop    ebp
c0026098:	c3                   	ret    

c0026099 <__fixunsdfsi>:
c0026099:	55                   	push   ebp
c002609a:	89 e5                	mov    ebp,esp
c002609c:	53                   	push   ebx
c002609d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00260a0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00260a3:	89 d3                	mov    ebx,edx
c00260a5:	c1 fb 14             	sar    ebx,0x14
c00260a8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00260ae:	31 c0                	xor    eax,eax
c00260b0:	83 fb 1f             	cmp    ebx,0x1f
c00260b3:	77 1d                	ja     c00260d2 <__fixunsdfsi+0x39>
c00260b5:	89 d0                	mov    eax,edx
c00260b7:	c1 e0 0b             	shl    eax,0xb
c00260ba:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00260bf:	c1 e9 15             	shr    ecx,0x15
c00260c2:	09 c8                	or     eax,ecx
c00260c4:	0d 00 00 00 80       	or     eax,0x80000000
c00260c9:	b9 1f 00 00 00       	mov    ecx,0x1f
c00260ce:	29 d9                	sub    ecx,ebx
c00260d0:	d3 e8                	shr    eax,cl
c00260d2:	5b                   	pop    ebx
c00260d3:	5d                   	pop    ebp
c00260d4:	c3                   	ret    

c00260d5 <__cmpdf2>:
c00260d5:	55                   	push   ebp
c00260d6:	89 e5                	mov    ebp,esp
c00260d8:	57                   	push   edi
c00260d9:	56                   	push   esi
c00260da:	53                   	push   ebx
c00260db:	83 ec 0c             	sub    esp,0xc
c00260de:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00260e1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00260e4:	89 ca                	mov    edx,ecx
c00260e6:	c1 ea 14             	shr    edx,0x14
c00260e9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00260ef:	89 cb                	mov    ebx,ecx
c00260f1:	c1 fb 1f             	sar    ebx,0x1f
c00260f4:	31 da                	xor    edx,ebx
c00260f6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00260f9:	89 df                	mov    edi,ebx
c00260fb:	c1 e7 0b             	shl    edi,0xb
c00260fe:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026101:	c1 e1 0b             	shl    ecx,0xb
c0026104:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002610a:	c1 eb 15             	shr    ebx,0x15
c002610d:	09 d9                	or     ecx,ebx
c002610f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0026112:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0026115:	89 ce                	mov    esi,ecx
c0026117:	c1 ee 14             	shr    esi,0x14
c002611a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026120:	89 cb                	mov    ebx,ecx
c0026122:	c1 fb 1f             	sar    ebx,0x1f
c0026125:	31 de                	xor    esi,ebx
c0026127:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002612a:	89 df                	mov    edi,ebx
c002612c:	c1 e7 0b             	shl    edi,0xb
c002612f:	c1 e1 0b             	shl    ecx,0xb
c0026132:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026138:	c1 eb 15             	shr    ebx,0x15
c002613b:	09 d9                	or     ecx,ebx
c002613d:	89 d3                	mov    ebx,edx
c002613f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026145:	43                   	inc    ebx
c0026146:	83 fb 01             	cmp    ebx,0x1
c0026149:	77 08                	ja     c0026153 <__cmpdf2+0x7e>
c002614b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002614e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026151:	75 68                	jne    c00261bb <__cmpdf2+0xe6>
c0026153:	89 f3                	mov    ebx,esi
c0026155:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002615b:	43                   	inc    ebx
c002615c:	83 fb 01             	cmp    ebx,0x1
c002615f:	77 06                	ja     c0026167 <__cmpdf2+0x92>
c0026161:	89 fb                	mov    ebx,edi
c0026163:	09 cb                	or     ebx,ecx
c0026165:	75 54                	jne    c00261bb <__cmpdf2+0xe6>
c0026167:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002616a:	09 f8                	or     eax,edi
c002616c:	09 c8                	or     eax,ecx
c002616e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0026171:	75 12                	jne    c0026185 <__cmpdf2+0xb0>
c0026173:	8d 42 01             	lea    eax,[edx+0x1]
c0026176:	83 f8 01             	cmp    eax,0x1
c0026179:	77 0a                	ja     c0026185 <__cmpdf2+0xb0>
c002617b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002617e:	31 c0                	xor    eax,eax
c0026180:	83 fb 01             	cmp    ebx,0x1
c0026183:	76 36                	jbe    c00261bb <__cmpdf2+0xe6>
c0026185:	b8 01 00 00 00       	mov    eax,0x1
c002618a:	39 f2                	cmp    edx,esi
c002618c:	7f 2d                	jg     c00261bb <__cmpdf2+0xe6>
c002618e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026193:	7c 26                	jl     c00261bb <__cmpdf2+0xe6>
c0026195:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026198:	77 07                	ja     c00261a1 <__cmpdf2+0xcc>
c002619a:	72 16                	jb     c00261b2 <__cmpdf2+0xdd>
c002619c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002619f:	76 0a                	jbe    c00261ab <__cmpdf2+0xd6>
c00261a1:	89 d0                	mov    eax,edx
c00261a3:	c1 f8 1f             	sar    eax,0x1f
c00261a6:	83 c8 01             	or     eax,0x1
c00261a9:	eb 10                	jmp    c00261bb <__cmpdf2+0xe6>
c00261ab:	b8 00 00 00 00       	mov    eax,0x0
c00261b0:	73 09                	jae    c00261bb <__cmpdf2+0xe6>
c00261b2:	89 d0                	mov    eax,edx
c00261b4:	c1 f8 1f             	sar    eax,0x1f
c00261b7:	83 e0 02             	and    eax,0x2
c00261ba:	48                   	dec    eax
c00261bb:	83 c4 0c             	add    esp,0xc
c00261be:	5b                   	pop    ebx
c00261bf:	5e                   	pop    esi
c00261c0:	5f                   	pop    edi
c00261c1:	5d                   	pop    ebp
c00261c2:	c3                   	ret    

c00261c3 <__eqdf2>:
c00261c3:	55                   	push   ebp
c00261c4:	89 e5                	mov    ebp,esp
c00261c6:	50                   	push   eax
c00261c7:	6a 01                	push   0x1
c00261c9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00261cc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00261cf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00261d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261d5:	e8 fb fe ff ff       	call   c00260d5 <__cmpdf2>
c00261da:	83 c4 18             	add    esp,0x18
c00261dd:	c9                   	leave  
c00261de:	c3                   	ret    

c00261df <__nedf2>:
c00261df:	eb e2                	jmp    c00261c3 <__eqdf2>

c00261e1 <__gtdf2>:
c00261e1:	55                   	push   ebp
c00261e2:	89 e5                	mov    ebp,esp
c00261e4:	50                   	push   eax
c00261e5:	6a ff                	push   0xffffffff
c00261e7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00261ea:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00261ed:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00261f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261f3:	e8 dd fe ff ff       	call   c00260d5 <__cmpdf2>
c00261f8:	83 c4 18             	add    esp,0x18
c00261fb:	c9                   	leave  
c00261fc:	c3                   	ret    

c00261fd <__gedf2>:
c00261fd:	eb e2                	jmp    c00261e1 <__gtdf2>

c00261ff <__ltdf2>:
c00261ff:	eb c2                	jmp    c00261c3 <__eqdf2>

c0026201 <__ledf2>:
c0026201:	eb c0                	jmp    c00261c3 <__eqdf2>

c0026203 <__truncdfsf2>:
c0026203:	55                   	push   ebp
c0026204:	89 e5                	mov    ebp,esp
c0026206:	57                   	push   edi
c0026207:	56                   	push   esi
c0026208:	53                   	push   ebx
c0026209:	83 ec 0c             	sub    esp,0xc
c002620c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002620f:	89 d1                	mov    ecx,edx
c0026211:	c1 f9 14             	sar    ecx,0x14
c0026214:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026217:	89 df                	mov    edi,ebx
c0026219:	c1 e7 0b             	shl    edi,0xb
c002621c:	89 d0                	mov    eax,edx
c002621e:	c1 e0 0b             	shl    eax,0xb
c0026221:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026226:	c1 eb 15             	shr    ebx,0x15
c0026229:	09 d8                	or     eax,ebx
c002622b:	89 cb                	mov    ebx,ecx
c002622d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026233:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0026239:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002623f:	0f 86 9e 00 00 00    	jbe    c00262e3 <__truncdfsf2+0xe0>
c0026245:	85 db                	test   ebx,ebx
c0026247:	75 0a                	jne    c0026253 <__truncdfsf2+0x50>
c0026249:	c1 fa 17             	sar    edx,0x17
c002624c:	30 d2                	xor    dl,dl
c002624e:	e9 84 00 00 00       	jmp    c00262d7 <__truncdfsf2+0xd4>
c0026253:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0026259:	83 fe 83             	cmp    esi,0xffffff83
c002625c:	7d 4b                	jge    c00262a9 <__truncdfsf2+0xa6>
c002625e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0026263:	29 f1                	sub    ecx,esi
c0026265:	83 f9 1f             	cmp    ecx,0x1f
c0026268:	7f 6b                	jg     c00262d5 <__truncdfsf2+0xd2>
c002626a:	0d 00 00 00 80       	or     eax,0x80000000
c002626f:	89 c3                	mov    ebx,eax
c0026271:	d3 eb                	shr    ebx,cl
c0026273:	be 01 00 00 00       	mov    esi,0x1
c0026278:	d3 e6                	shl    esi,cl
c002627a:	4e                   	dec    esi
c002627b:	21 f0                	and    eax,esi
c002627d:	09 f8                	or     eax,edi
c002627f:	0f 95 c0             	setne  al
c0026282:	0f b6 c0             	movzx  eax,al
c0026285:	09 c3                	or     ebx,eax
c0026287:	89 d9                	mov    ecx,ebx
c0026289:	c1 e9 08             	shr    ecx,0x8
c002628c:	f6 c3 7f             	test   bl,0x7f
c002628f:	0f 95 c0             	setne  al
c0026292:	09 c8                	or     eax,ecx
c0026294:	83 e0 01             	and    eax,0x1
c0026297:	c1 eb 07             	shr    ebx,0x7
c002629a:	21 c3                	and    ebx,eax
c002629c:	81 e2 00 00 00 80    	and    edx,0x80000000
c00262a2:	09 d1                	or     ecx,edx
c00262a4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00262a7:	eb 76                	jmp    c002631f <__truncdfsf2+0x11c>
c00262a9:	83 c6 80             	add    esi,0xffffff80
c00262ac:	7e 1d                	jle    c00262cb <__truncdfsf2+0xc8>
c00262ae:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00262b4:	75 0b                	jne    c00262c1 <__truncdfsf2+0xbe>
c00262b6:	09 f8                	or     eax,edi
c00262b8:	74 09                	je     c00262c3 <__truncdfsf2+0xc0>
c00262ba:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00262bf:	eb 02                	jmp    c00262c3 <__truncdfsf2+0xc0>
c00262c1:	31 c0                	xor    eax,eax
c00262c3:	c1 fa 17             	sar    edx,0x17
c00262c6:	80 ca ff             	or     dl,0xff
c00262c9:	eb 0e                	jmp    c00262d9 <__truncdfsf2+0xd6>
c00262cb:	c1 fa 1f             	sar    edx,0x1f
c00262ce:	c1 e2 08             	shl    edx,0x8
c00262d1:	09 ca                	or     edx,ecx
c00262d3:	eb 04                	jmp    c00262d9 <__truncdfsf2+0xd6>
c00262d5:	31 d2                	xor    edx,edx
c00262d7:	31 c0                	xor    eax,eax
c00262d9:	c1 e2 17             	shl    edx,0x17
c00262dc:	c1 e8 08             	shr    eax,0x8
c00262df:	09 d0                	or     eax,edx
c00262e1:	eb 3c                	jmp    c002631f <__truncdfsf2+0x11c>
c00262e3:	81 e9 80 03 00 00    	sub    ecx,0x380
c00262e9:	89 ca                	mov    edx,ecx
c00262eb:	c1 fa 0b             	sar    edx,0xb
c00262ee:	c1 e2 08             	shl    edx,0x8
c00262f1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00262f4:	31 db                	xor    ebx,ebx
c00262f6:	85 ff                	test   edi,edi
c00262f8:	0f 95 c3             	setne  bl
c00262fb:	09 d8                	or     eax,ebx
c00262fd:	89 c3                	mov    ebx,eax
c00262ff:	c1 eb 08             	shr    ebx,0x8
c0026302:	a8 7f                	test   al,0x7f
c0026304:	0f 95 c2             	setne  dl
c0026307:	89 d6                	mov    esi,edx
c0026309:	09 de                	or     esi,ebx
c002630b:	83 e6 01             	and    esi,0x1
c002630e:	c1 e8 07             	shr    eax,0x7
c0026311:	21 f0                	and    eax,esi
c0026313:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026316:	09 ca                	or     edx,ecx
c0026318:	c1 e2 17             	shl    edx,0x17
c002631b:	09 da                	or     edx,ebx
c002631d:	01 d0                	add    eax,edx
c002631f:	83 c4 0c             	add    esp,0xc
c0026322:	5b                   	pop    ebx
c0026323:	5e                   	pop    esi
c0026324:	5f                   	pop    edi
c0026325:	5d                   	pop    ebp
c0026326:	c3                   	ret    

c0026327 <__extendsfdf2>:
c0026327:	55                   	push   ebp
c0026328:	89 e5                	mov    ebp,esp
c002632a:	57                   	push   edi
c002632b:	56                   	push   esi
c002632c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002632f:	89 d1                	mov    ecx,edx
c0026331:	c1 f9 17             	sar    ecx,0x17
c0026334:	c1 e2 08             	shl    edx,0x8
c0026337:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002633d:	89 c8                	mov    eax,ecx
c002633f:	80 e4 f8             	and    ah,0xf8
c0026342:	8d 71 01             	lea    esi,[ecx+0x1]
c0026345:	81 e6 fe 00 00 00    	and    esi,0xfe
c002634b:	75 27                	jne    c0026374 <__extendsfdf2+0x4d>
c002634d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0026353:	75 18                	jne    c002636d <__extendsfdf2+0x46>
c0026355:	85 d2                	test   edx,edx
c0026357:	74 20                	je     c0026379 <__extendsfdf2+0x52>
c0026359:	41                   	inc    ecx
c002635a:	01 d2                	add    edx,edx
c002635c:	79 fb                	jns    c0026359 <__extendsfdf2+0x32>
c002635e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026364:	29 c8                	sub    eax,ecx
c0026366:	05 81 03 00 00       	add    eax,0x381
c002636b:	eb 0c                	jmp    c0026379 <__extendsfdf2+0x52>
c002636d:	05 00 07 00 00       	add    eax,0x700
c0026372:	eb 05                	jmp    c0026379 <__extendsfdf2+0x52>
c0026374:	05 80 03 00 00       	add    eax,0x380
c0026379:	c1 e0 14             	shl    eax,0x14
c002637c:	89 c1                	mov    ecx,eax
c002637e:	89 d0                	mov    eax,edx
c0026380:	c1 e8 0b             	shr    eax,0xb
c0026383:	09 c1                	or     ecx,eax
c0026385:	c1 e2 15             	shl    edx,0x15
c0026388:	89 d0                	mov    eax,edx
c002638a:	89 ca                	mov    edx,ecx
c002638c:	5e                   	pop    esi
c002638d:	5f                   	pop    edi
c002638e:	5d                   	pop    ebp
c002638f:	c3                   	ret    

c0026390 <fabs>:
c0026390:	83 ec 0c             	sub    esp,0xc
c0026393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026397:	89 04 24             	mov    DWORD PTR [esp],eax
c002639a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002639e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00263a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00263a7:	dd 04 24             	fld    QWORD PTR [esp]
c00263aa:	83 c4 0c             	add    esp,0xc
c00263ad:	c3                   	ret    
c00263ae:	66 90                	xchg   ax,ax

c00263b0 <lrint>:
c00263b0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00263b4:	83 ec 04             	sub    esp,0x4
c00263b7:	db 1c 24             	fistp  DWORD PTR [esp]
c00263ba:	58                   	pop    eax
c00263bb:	c3                   	ret    

c00263bc <lrintf>:
c00263bc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00263c0:	83 ec 04             	sub    esp,0x4
c00263c3:	db 1c 24             	fistp  DWORD PTR [esp]
c00263c6:	58                   	pop    eax
c00263c7:	c3                   	ret    

Disassembly of section .init:

c00263c8 <_init>:
c00263c8:	55                   	push   ebp
c00263c9:	89 e5                	mov    ebp,esp
c00263cb:	e8 48 9d fd ff       	call   c0000118 <frame_dummy>
c00263d0:	e8 63 e0 ff ff       	call   c0024438 <__do_global_ctors_aux>
c00263d5:	5d                   	pop    ebp
c00263d6:	c3                   	ret    

Disassembly of section .fini:

c00263d7 <_fini>:
c00263d7:	55                   	push   ebp
c00263d8:	89 e5                	mov    ebp,esp
c00263da:	e8 c9 9c fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00263df:	5d                   	pop    ebp
c00263e0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00263e2 <Computer::~Computer()>:
c00263e2:	83 ec 0c             	sub    esp,0xc
c00263e5:	ba 70 7e 02 c0       	mov    edx,0xc0027e70
c00263ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ee:	89 10                	mov    DWORD PTR [eax],edx
c00263f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263f4:	83 ec 0c             	sub    esp,0xc
c00263f7:	50                   	push   eax
c00263f8:	e8 61 d5 fe ff       	call   c001395e <Device::~Device()>
c00263fd:	83 c4 10             	add    esp,0x10
c0026400:	90                   	nop
c0026401:	83 c4 0c             	add    esp,0xc
c0026404:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0026406 <Computer::~Computer()>:
c0026406:	83 ec 0c             	sub    esp,0xc
c0026409:	83 ec 0c             	sub    esp,0xc
c002640c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026410:	e8 cd ff ff ff       	call   c00263e2 <Computer::~Computer()>
c0026415:	83 c4 10             	add    esp,0x10
c0026418:	83 ec 08             	sub    esp,0x8
c002641b:	68 ec 01 00 00       	push   0x1ec
c0026420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026424:	e8 94 c1 fe ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0026429:	83 c4 10             	add    esp,0x10
c002642c:	83 c4 0c             	add    esp,0xc
c002642f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0026430 <idleCommon()>:
c0026430:	83 ec 0c             	sub    esp,0xc
c0026433:	e8 ef 5d ff ff       	call   c001c227 <lockScheduler()>
c0026438:	e8 25 61 ff ff       	call   c001c562 <schedule()>
c002643d:	83 c4 0c             	add    esp,0xc
c0026440:	e9 e4 5d ff ff       	jmp    c001c229 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0026446 <LinkedList<UnixFile>::~LinkedList()>:
c0026446:	90                   	nop
c0026447:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0026448 <LinkedList<UnixFile>::LinkedList()>:
c0026448:	83 ec 0c             	sub    esp,0xc
c002644b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002644f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026459:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026464:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002646b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002646f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026479:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026484:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002648b:	83 ec 0c             	sub    esp,0xc
c002648e:	68 e6 80 02 c0       	push   0xc00280e6
c0026493:	e8 05 c2 fe ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0026498:	83 c4 10             	add    esp,0x10
c002649b:	90                   	nop
c002649c:	83 c4 0c             	add    esp,0xc
c002649f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00264a0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00264a0:	83 ec 0c             	sub    esp,0xc
c00264a3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00264a8:	75 10                	jne    c00264ba <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00264aa:	83 ec 0c             	sub    esp,0xc
c00264ad:	68 00 81 02 c0       	push   0xc0028100
c00264b2:	e8 2a 2d ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c00264b7:	83 c4 10             	add    esp,0x10
c00264ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264be:	8b 00                	mov    eax,DWORD PTR [eax]
c00264c0:	85 c0                	test   eax,eax
c00264c2:	74 34                	je     c00264f8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00264c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00264cb:	85 c0                	test   eax,eax
c00264cd:	74 29                	je     c00264f8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00264cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00264d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00264da:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00264dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00264e5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00264e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00264ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00264f6:	eb 65                	jmp    c002655d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00264f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00264fe:	85 c0                	test   eax,eax
c0026500:	75 4b                	jne    c002654d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0026502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026506:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026509:	85 c0                	test   eax,eax
c002650b:	75 40                	jne    c002654d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002650d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026511:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026515:	89 10                	mov    DWORD PTR [eax],edx
c0026517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002651b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002651f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026526:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026529:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026534:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026537:	85 c0                	test   eax,eax
c0026539:	74 22                	je     c002655d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002653b:	83 ec 0c             	sub    esp,0xc
c002653e:	68 22 81 02 c0       	push   0xc0028122
c0026543:	e8 99 2c ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c0026548:	83 c4 10             	add    esp,0x10
c002654b:	eb 10                	jmp    c002655d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002654d:	83 ec 0c             	sub    esp,0xc
c0026550:	68 2c 81 02 c0       	push   0xc002812c
c0026555:	e8 87 2c ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c002655a:	83 c4 10             	add    esp,0x10
c002655d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026561:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026564:	8d 50 01             	lea    edx,[eax+0x1]
c0026567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002656b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002656e:	90                   	nop
c002656f:	83 c4 0c             	add    esp,0xc
c0026572:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0026574 <LinkedList<UnixFile>::getFirstElement()>:
c0026574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026578:	8b 00                	mov    eax,DWORD PTR [eax]
c002657a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002657c <LinkedList<UnixFile>::removeFirst()>:
c002657c:	83 ec 0c             	sub    esp,0xc
c002657f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026583:	8b 00                	mov    eax,DWORD PTR [eax]
c0026585:	85 c0                	test   eax,eax
c0026587:	75 12                	jne    c002659b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0026589:	83 ec 0c             	sub    esp,0xc
c002658c:	68 38 81 02 c0       	push   0xc0028138
c0026591:	e8 4b 2c ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c0026596:	83 c4 10             	add    esp,0x10
c0026599:	eb 7e                	jmp    c0026619 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002659b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002659f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00265a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00265a5:	85 c0                	test   eax,eax
c00265a7:	74 10                	je     c00265b9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00265a9:	83 ec 0c             	sub    esp,0xc
c00265ac:	68 83 81 02 c0       	push   0xc0028183
c00265b1:	e8 2b 2c ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c00265b6:	83 c4 10             	add    esp,0x10
c00265b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00265bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00265c2:	85 c0                	test   eax,eax
c00265c4:	75 33                	jne    c00265f9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00265c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00265d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00265db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00265e2:	83 f8 01             	cmp    eax,0x1
c00265e5:	74 21                	je     c0026608 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00265e7:	83 ec 0c             	sub    esp,0xc
c00265ea:	68 5c 81 02 c0       	push   0xc002815c
c00265ef:	e8 ed 2b ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c00265f4:	83 c4 10             	add    esp,0x10
c00265f7:	eb 0f                	jmp    c0026608 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00265f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00265ff:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026606:	89 10                	mov    DWORD PTR [eax],edx
c0026608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002660c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002660f:	8d 50 ff             	lea    edx,[eax-0x1]
c0026612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026616:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026619:	83 c4 0c             	add    esp,0xc
c002661c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002661e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002661e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026622:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026625:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0026626 <DriverlessDevice::~DriverlessDevice()>:
c0026626:	ba 44 88 02 c0       	mov    edx,0xc0028844
c002662b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002662f:	89 10                	mov    DWORD PTR [eax],edx
c0026631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026635:	50                   	push   eax
c0026636:	e8 23 d3 fe ff       	call   c001395e <Device::~Device()>
c002663b:	83 c4 04             	add    esp,0x4
c002663e:	90                   	nop
c002663f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0026640 <DriverlessDevice::~DriverlessDevice()>:
c0026640:	83 ec 0c             	sub    esp,0xc
c0026643:	83 ec 0c             	sub    esp,0xc
c0026646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002664a:	e8 d7 ff ff ff       	call   c0026626 <DriverlessDevice::~DriverlessDevice()>
c002664f:	83 c4 10             	add    esp,0x10
c0026652:	83 ec 08             	sub    esp,0x8
c0026655:	68 58 01 00 00       	push   0x158
c002665a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002665e:	e8 5a bf fe ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0026663:	83 c4 10             	add    esp,0x10
c0026666:	83 c4 0c             	add    esp,0xc
c0026669:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002666a <LinkedList<Device>::addElement(Device*)>:
c002666a:	83 ec 0c             	sub    esp,0xc
c002666d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0026672:	75 10                	jne    c0026684 <LinkedList<Device>::addElement(Device*)+0x1a>
c0026674:	83 ec 0c             	sub    esp,0xc
c0026677:	68 00 81 02 c0       	push   0xc0028100
c002667c:	e8 60 2b ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c0026681:	83 c4 10             	add    esp,0x10
c0026684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026688:	8b 00                	mov    eax,DWORD PTR [eax]
c002668a:	85 c0                	test   eax,eax
c002668c:	74 3a                	je     c00266c8 <LinkedList<Device>::addElement(Device*)+0x5e>
c002668e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026692:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026695:	85 c0                	test   eax,eax
c0026697:	74 2f                	je     c00266c8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0026699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002669d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00266a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00266a4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00266aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00266b2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00266b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00266bc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00266c6:	eb 68                	jmp    c0026730 <LinkedList<Device>::addElement(Device*)+0xc6>
c00266c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00266ce:	85 c0                	test   eax,eax
c00266d0:	75 4e                	jne    c0026720 <LinkedList<Device>::addElement(Device*)+0xb6>
c00266d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00266d9:	85 c0                	test   eax,eax
c00266db:	75 43                	jne    c0026720 <LinkedList<Device>::addElement(Device*)+0xb6>
c00266dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00266e5:	89 10                	mov    DWORD PTR [eax],edx
c00266e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00266ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00266f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00266f9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0026703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026707:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002670a:	85 c0                	test   eax,eax
c002670c:	74 22                	je     c0026730 <LinkedList<Device>::addElement(Device*)+0xc6>
c002670e:	83 ec 0c             	sub    esp,0xc
c0026711:	68 22 81 02 c0       	push   0xc0028122
c0026716:	e8 c6 2a ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c002671b:	83 c4 10             	add    esp,0x10
c002671e:	eb 10                	jmp    c0026730 <LinkedList<Device>::addElement(Device*)+0xc6>
c0026720:	83 ec 0c             	sub    esp,0xc
c0026723:	68 2c 81 02 c0       	push   0xc002812c
c0026728:	e8 b4 2a ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c002672d:	83 c4 10             	add    esp,0x10
c0026730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026734:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026737:	8d 50 01             	lea    edx,[eax+0x1]
c002673a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002673e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026741:	90                   	nop
c0026742:	83 c4 0c             	add    esp,0xc
c0026745:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0026746 <LinkedList<Device>::LinkedList()>:
c0026746:	83 ec 0c             	sub    esp,0xc
c0026749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002674d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026757:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002675e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026762:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002676d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026777:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002677e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026782:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026789:	83 ec 0c             	sub    esp,0xc
c002678c:	68 e6 80 02 c0       	push   0xc00280e6
c0026791:	e8 07 bf fe ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0026796:	83 c4 10             	add    esp,0x10
c0026799:	90                   	nop
c002679a:	83 c4 0c             	add    esp,0xc
c002679d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002679e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002679e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00267a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00267a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00267a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00267a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00267aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00267ac:	85 c0                	test   eax,eax
c00267ae:	75 0e                	jne    c00267be <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00267b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00267b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00267b7:	85 c0                	test   eax,eax
c00267b9:	75 03                	jne    c00267be <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00267bb:	b0 01                	mov    al,0x1
c00267bd:	c3                   	ret    
c00267be:	b0 00                	mov    al,0x0
c00267c0:	90                   	nop
c00267c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00267c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00267c2:	83 ec 0c             	sub    esp,0xc
c00267c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00267cb:	85 c0                	test   eax,eax
c00267cd:	75 15                	jne    c00267e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00267cf:	83 ec 0c             	sub    esp,0xc
c00267d2:	68 38 81 02 c0       	push   0xc0028138
c00267d7:	e8 05 2a ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c00267dc:	83 c4 10             	add    esp,0x10
c00267df:	e9 88 00 00 00       	jmp    c002686c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00267e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00267eb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00267ee:	85 c0                	test   eax,eax
c00267f0:	0f 95 c0             	setne  al
c00267f3:	84 c0                	test   al,al
c00267f5:	74 10                	je     c0026807 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00267f7:	83 ec 0c             	sub    esp,0xc
c00267fa:	68 83 81 02 c0       	push   0xc0028183
c00267ff:	e8 dd 29 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c0026804:	83 c4 10             	add    esp,0x10
c0026807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002680b:	8b 00                	mov    eax,DWORD PTR [eax]
c002680d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0026810:	85 c0                	test   eax,eax
c0026812:	0f 94 c0             	sete   al
c0026815:	84 c0                	test   al,al
c0026817:	74 33                	je     c002684c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0026819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002681d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026827:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002682e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026832:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026835:	83 f8 01             	cmp    eax,0x1
c0026838:	74 21                	je     c002685b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002683a:	83 ec 0c             	sub    esp,0xc
c002683d:	68 5c 81 02 c0       	push   0xc002815c
c0026842:	e8 9a 29 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c0026847:	83 c4 10             	add    esp,0x10
c002684a:	eb 0f                	jmp    c002685b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002684c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026850:	8b 00                	mov    eax,DWORD PTR [eax]
c0026852:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0026855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026859:	89 10                	mov    DWORD PTR [eax],edx
c002685b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002685f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026862:	8d 50 ff             	lea    edx,[eax-0x1]
c0026865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002686c:	83 c4 0c             	add    esp,0xc
c002686f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0026870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0026870:	83 ec 0c             	sub    esp,0xc
c0026873:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0026878:	75 10                	jne    c002688a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002687a:	83 ec 0c             	sub    esp,0xc
c002687d:	68 00 81 02 c0       	push   0xc0028100
c0026882:	e8 5a 29 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c0026887:	83 c4 10             	add    esp,0x10
c002688a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002688e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026890:	85 c0                	test   eax,eax
c0026892:	74 34                	je     c00268c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0026894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026898:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002689b:	85 c0                	test   eax,eax
c002689d:	74 29                	je     c00268c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002689f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00268a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00268aa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00268ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00268b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00268b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00268bf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00268c6:	eb 65                	jmp    c002692d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00268c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00268ce:	85 c0                	test   eax,eax
c00268d0:	75 4b                	jne    c002691d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00268d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00268d9:	85 c0                	test   eax,eax
c00268db:	75 40                	jne    c002691d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00268dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00268e5:	89 10                	mov    DWORD PTR [eax],edx
c00268e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00268ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00268f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00268f9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0026900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026904:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026907:	85 c0                	test   eax,eax
c0026909:	74 22                	je     c002692d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002690b:	83 ec 0c             	sub    esp,0xc
c002690e:	68 22 81 02 c0       	push   0xc0028122
c0026913:	e8 c9 28 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c0026918:	83 c4 10             	add    esp,0x10
c002691b:	eb 10                	jmp    c002692d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002691d:	83 ec 0c             	sub    esp,0xc
c0026920:	68 2c 81 02 c0       	push   0xc002812c
c0026925:	e8 b7 28 ff ff       	call   c00191e1 <Krnl::panic(char const*)>
c002692a:	83 c4 10             	add    esp,0x10
c002692d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026931:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026934:	8d 50 01             	lea    edx,[eax+0x1]
c0026937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002693b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002693e:	90                   	nop
c002693f:	83 c4 0c             	add    esp,0xc
c0026942:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0026944 <ACPI::~ACPI()>:
c0026944:	83 ec 0c             	sub    esp,0xc
c0026947:	ba d8 90 02 c0       	mov    edx,0xc00290d8
c002694c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026950:	89 10                	mov    DWORD PTR [eax],edx
c0026952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026956:	83 ec 0c             	sub    esp,0xc
c0026959:	50                   	push   eax
c002695a:	e8 ff cf fe ff       	call   c001395e <Device::~Device()>
c002695f:	83 c4 10             	add    esp,0x10
c0026962:	90                   	nop
c0026963:	83 c4 0c             	add    esp,0xc
c0026966:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0026968 <ACPI::~ACPI()>:
c0026968:	83 ec 0c             	sub    esp,0xc
c002696b:	83 ec 0c             	sub    esp,0xc
c002696e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026972:	e8 cd ff ff ff       	call   c0026944 <ACPI::~ACPI()>
c0026977:	83 c4 10             	add    esp,0x10
c002697a:	83 ec 08             	sub    esp,0x8
c002697d:	68 68 22 00 00       	push   0x2268
c0026982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026986:	e8 32 bc fe ff       	call   c00125bd <operator delete(void*, unsigned long)>
c002698b:	83 c4 10             	add    esp,0x10
c002698e:	83 c4 0c             	add    esp,0xc
c0026991:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0026992 <CPU::~CPU()>:
c0026992:	83 ec 0c             	sub    esp,0xc
c0026995:	ba c8 94 02 c0       	mov    edx,0xc00294c8
c002699a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002699e:	89 10                	mov    DWORD PTR [eax],edx
c00269a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269a4:	83 ec 0c             	sub    esp,0xc
c00269a7:	50                   	push   eax
c00269a8:	e8 b1 cf fe ff       	call   c001395e <Device::~Device()>
c00269ad:	83 c4 10             	add    esp,0x10
c00269b0:	90                   	nop
c00269b1:	83 c4 0c             	add    esp,0xc
c00269b4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00269b6 <CPU::~CPU()>:
c00269b6:	83 ec 0c             	sub    esp,0xc
c00269b9:	83 ec 0c             	sub    esp,0xc
c00269bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00269c0:	e8 cd ff ff ff       	call   c0026992 <CPU::~CPU()>
c00269c5:	83 c4 10             	add    esp,0x10
c00269c8:	83 ec 08             	sub    esp,0x8
c00269cb:	68 98 11 00 00       	push   0x1198
c00269d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00269d4:	e8 e4 bb fe ff       	call   c00125bd <operator delete(void*, unsigned long)>
c00269d9:	83 c4 10             	add    esp,0x10
c00269dc:	83 c4 0c             	add    esp,0xc
c00269df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00269e0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00269e0:	90                   	nop
c00269e1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00269e2 <ThreadControlBlock::ThreadControlBlock()>:
c00269e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00269e6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00269ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00269f1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00269f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00269fc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0026a03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026a07:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0026a0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026a12:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0026a16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026a1a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0026a1e:	90                   	nop
c0026a1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0026a20 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0026a20:	83 ec 0c             	sub    esp,0xc
c0026a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a3c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a47:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a5c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026a63:	83 ec 0c             	sub    esp,0xc
c0026a66:	68 e6 80 02 c0       	push   0xc00280e6
c0026a6b:	e8 2d bc fe ff       	call   c001269d <Dbg::kprintf(char const*, ...)>
c0026a70:	83 c4 10             	add    esp,0x10
c0026a73:	90                   	nop
c0026a74:	83 c4 0c             	add    esp,0xc
c0026a77:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0026a78 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0026a78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026a7c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0026a7f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0026a80 <Vm::_FPUState::_FPUState()>:
c0026a80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026a84:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0026a8b:	90                   	nop
c0026a8c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0026a8e <PCI::~PCI()>:
c0026a8e:	83 ec 0c             	sub    esp,0xc
c0026a91:	ba ec a1 02 c0       	mov    edx,0xc002a1ec
c0026a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a9a:	89 10                	mov    DWORD PTR [eax],edx
c0026a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026aa0:	83 ec 0c             	sub    esp,0xc
c0026aa3:	50                   	push   eax
c0026aa4:	e8 c5 c8 fe ff       	call   c001336e <Bus::~Bus()>
c0026aa9:	83 c4 10             	add    esp,0x10
c0026aac:	90                   	nop
c0026aad:	83 c4 0c             	add    esp,0xc
c0026ab0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0026ab2 <PCI::~PCI()>:
c0026ab2:	83 ec 0c             	sub    esp,0xc
c0026ab5:	83 ec 0c             	sub    esp,0xc
c0026ab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026abc:	e8 cd ff ff ff       	call   c0026a8e <PCI::~PCI()>
c0026ac1:	83 c4 10             	add    esp,0x10
c0026ac4:	83 ec 08             	sub    esp,0x8
c0026ac7:	68 58 01 00 00       	push   0x158
c0026acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ad0:	e8 e8 ba fe ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0026ad5:	83 c4 10             	add    esp,0x10
c0026ad8:	83 c4 0c             	add    esp,0xc
c0026adb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0026adc <IDE::~IDE()>:
c0026adc:	83 ec 0c             	sub    esp,0xc
c0026adf:	ba 50 a4 02 c0       	mov    edx,0xc002a450
c0026ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ae8:	89 10                	mov    DWORD PTR [eax],edx
c0026aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026aee:	83 ec 0c             	sub    esp,0xc
c0026af1:	50                   	push   eax
c0026af2:	e8 57 d3 fe ff       	call   c0013e4e <HardDiskController::~HardDiskController()>
c0026af7:	83 c4 10             	add    esp,0x10
c0026afa:	90                   	nop
c0026afb:	83 c4 0c             	add    esp,0xc
c0026afe:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0026b00 <IDE::~IDE()>:
c0026b00:	83 ec 0c             	sub    esp,0xc
c0026b03:	83 ec 0c             	sub    esp,0xc
c0026b06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b0a:	e8 cd ff ff ff       	call   c0026adc <IDE::~IDE()>
c0026b0f:	83 c4 10             	add    esp,0x10
c0026b12:	83 ec 08             	sub    esp,0x8
c0026b15:	68 70 02 00 00       	push   0x270
c0026b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b1e:	e8 9a ba fe ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0026b23:	83 c4 10             	add    esp,0x10
c0026b26:	83 c4 0c             	add    esp,0xc
c0026b29:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0026b2a <SATABus::~SATABus()>:
c0026b2a:	83 ec 0c             	sub    esp,0xc
c0026b2d:	ba 30 a5 02 c0       	mov    edx,0xc002a530
c0026b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b36:	89 10                	mov    DWORD PTR [eax],edx
c0026b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b3c:	83 ec 0c             	sub    esp,0xc
c0026b3f:	50                   	push   eax
c0026b40:	e8 09 d3 fe ff       	call   c0013e4e <HardDiskController::~HardDiskController()>
c0026b45:	83 c4 10             	add    esp,0x10
c0026b48:	90                   	nop
c0026b49:	83 c4 0c             	add    esp,0xc
c0026b4c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0026b4e <SATABus::~SATABus()>:
c0026b4e:	83 ec 0c             	sub    esp,0xc
c0026b51:	83 ec 0c             	sub    esp,0xc
c0026b54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b58:	e8 cd ff ff ff       	call   c0026b2a <SATABus::~SATABus()>
c0026b5d:	83 c4 10             	add    esp,0x10
c0026b60:	83 ec 08             	sub    esp,0x8
c0026b63:	68 64 01 00 00       	push   0x164
c0026b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b6c:	e8 4c ba fe ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0026b71:	83 c4 10             	add    esp,0x10
c0026b74:	83 c4 0c             	add    esp,0xc
c0026b77:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0026b78 <ATA::~ATA()>:
c0026b78:	83 ec 0c             	sub    esp,0xc
c0026b7b:	ba 70 a5 02 c0       	mov    edx,0xc002a570
c0026b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b84:	89 10                	mov    DWORD PTR [eax],edx
c0026b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b8a:	83 ec 0c             	sub    esp,0xc
c0026b8d:	50                   	push   eax
c0026b8e:	e8 99 d3 fe ff       	call   c0013f2c <PhysicalDisk::~PhysicalDisk()>
c0026b93:	83 c4 10             	add    esp,0x10
c0026b96:	90                   	nop
c0026b97:	83 c4 0c             	add    esp,0xc
c0026b9a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0026b9c <ATA::~ATA()>:
c0026b9c:	83 ec 0c             	sub    esp,0xc
c0026b9f:	83 ec 0c             	sub    esp,0xc
c0026ba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ba6:	e8 cd ff ff ff       	call   c0026b78 <ATA::~ATA()>
c0026bab:	83 c4 10             	add    esp,0x10
c0026bae:	83 ec 08             	sub    esp,0x8
c0026bb1:	68 7c 01 00 00       	push   0x17c
c0026bb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026bba:	e8 fe b9 fe ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0026bbf:	83 c4 10             	add    esp,0x10
c0026bc2:	83 c4 0c             	add    esp,0xc
c0026bc5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0026bc6 <ATAPI::~ATAPI()>:
c0026bc6:	83 ec 0c             	sub    esp,0xc
c0026bc9:	ba dc a5 02 c0       	mov    edx,0xc002a5dc
c0026bce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bd2:	89 10                	mov    DWORD PTR [eax],edx
c0026bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bd8:	83 ec 0c             	sub    esp,0xc
c0026bdb:	50                   	push   eax
c0026bdc:	e8 4b d3 fe ff       	call   c0013f2c <PhysicalDisk::~PhysicalDisk()>
c0026be1:	83 c4 10             	add    esp,0x10
c0026be4:	90                   	nop
c0026be5:	83 c4 0c             	add    esp,0xc
c0026be8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0026bea <ATAPI::~ATAPI()>:
c0026bea:	83 ec 0c             	sub    esp,0xc
c0026bed:	83 ec 0c             	sub    esp,0xc
c0026bf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026bf4:	e8 cd ff ff ff       	call   c0026bc6 <ATAPI::~ATAPI()>
c0026bf9:	83 c4 10             	add    esp,0x10
c0026bfc:	83 ec 08             	sub    esp,0x8
c0026bff:	68 80 01 00 00       	push   0x180
c0026c04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c08:	e8 b0 b9 fe ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0026c0d:	83 c4 10             	add    esp,0x10
c0026c10:	83 c4 0c             	add    esp,0xc
c0026c13:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0026c14 <SATA::~SATA()>:
c0026c14:	83 ec 0c             	sub    esp,0xc
c0026c17:	ba 00 a7 02 c0       	mov    edx,0xc002a700
c0026c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c20:	89 10                	mov    DWORD PTR [eax],edx
c0026c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c26:	83 ec 0c             	sub    esp,0xc
c0026c29:	50                   	push   eax
c0026c2a:	e8 fd d2 fe ff       	call   c0013f2c <PhysicalDisk::~PhysicalDisk()>
c0026c2f:	83 c4 10             	add    esp,0x10
c0026c32:	90                   	nop
c0026c33:	83 c4 0c             	add    esp,0xc
c0026c36:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0026c38 <SATA::~SATA()>:
c0026c38:	83 ec 0c             	sub    esp,0xc
c0026c3b:	83 ec 0c             	sub    esp,0xc
c0026c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c42:	e8 cd ff ff ff       	call   c0026c14 <SATA::~SATA()>
c0026c47:	83 c4 10             	add    esp,0x10
c0026c4a:	83 ec 08             	sub    esp,0x8
c0026c4d:	68 74 01 00 00       	push   0x174
c0026c52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c56:	e8 62 b9 fe ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0026c5b:	83 c4 10             	add    esp,0x10
c0026c5e:	83 c4 0c             	add    esp,0xc
c0026c61:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0026c62 <AVX::~AVX()>:
c0026c62:	83 ec 0c             	sub    esp,0xc
c0026c65:	ba 3c a7 02 c0       	mov    edx,0xc002a73c
c0026c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c6e:	89 10                	mov    DWORD PTR [eax],edx
c0026c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c74:	83 ec 0c             	sub    esp,0xc
c0026c77:	50                   	push   eax
c0026c78:	e8 33 d3 fe ff       	call   c0013fb0 <FPU::~FPU()>
c0026c7d:	83 c4 10             	add    esp,0x10
c0026c80:	90                   	nop
c0026c81:	83 c4 0c             	add    esp,0xc
c0026c84:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0026c86 <AVX::~AVX()>:
c0026c86:	83 ec 0c             	sub    esp,0xc
c0026c89:	83 ec 0c             	sub    esp,0xc
c0026c8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c90:	e8 cd ff ff ff       	call   c0026c62 <AVX::~AVX()>
c0026c95:	83 c4 10             	add    esp,0x10
c0026c98:	83 ec 08             	sub    esp,0x8
c0026c9b:	68 58 01 00 00       	push   0x158
c0026ca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ca4:	e8 14 b9 fe ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0026ca9:	83 c4 10             	add    esp,0x10
c0026cac:	83 c4 0c             	add    esp,0xc
c0026caf:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0026cb0 <MMX::~MMX()>:
c0026cb0:	83 ec 0c             	sub    esp,0xc
c0026cb3:	ba 7c a7 02 c0       	mov    edx,0xc002a77c
c0026cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cbc:	89 10                	mov    DWORD PTR [eax],edx
c0026cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cc2:	83 ec 0c             	sub    esp,0xc
c0026cc5:	50                   	push   eax
c0026cc6:	e8 e5 d2 fe ff       	call   c0013fb0 <FPU::~FPU()>
c0026ccb:	83 c4 10             	add    esp,0x10
c0026cce:	90                   	nop
c0026ccf:	83 c4 0c             	add    esp,0xc
c0026cd2:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0026cd4 <MMX::~MMX()>:
c0026cd4:	83 ec 0c             	sub    esp,0xc
c0026cd7:	83 ec 0c             	sub    esp,0xc
c0026cda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026cde:	e8 cd ff ff ff       	call   c0026cb0 <MMX::~MMX()>
c0026ce3:	83 c4 10             	add    esp,0x10
c0026ce6:	83 ec 08             	sub    esp,0x8
c0026ce9:	68 58 01 00 00       	push   0x158
c0026cee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026cf2:	e8 c6 b8 fe ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0026cf7:	83 c4 10             	add    esp,0x10
c0026cfa:	83 c4 0c             	add    esp,0xc
c0026cfd:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0026cfe <SSE::~SSE()>:
c0026cfe:	83 ec 0c             	sub    esp,0xc
c0026d01:	ba bc a7 02 c0       	mov    edx,0xc002a7bc
c0026d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d0a:	89 10                	mov    DWORD PTR [eax],edx
c0026d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d10:	83 ec 0c             	sub    esp,0xc
c0026d13:	50                   	push   eax
c0026d14:	e8 97 d2 fe ff       	call   c0013fb0 <FPU::~FPU()>
c0026d19:	83 c4 10             	add    esp,0x10
c0026d1c:	90                   	nop
c0026d1d:	83 c4 0c             	add    esp,0xc
c0026d20:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0026d22 <SSE::~SSE()>:
c0026d22:	83 ec 0c             	sub    esp,0xc
c0026d25:	83 ec 0c             	sub    esp,0xc
c0026d28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d2c:	e8 cd ff ff ff       	call   c0026cfe <SSE::~SSE()>
c0026d31:	83 c4 10             	add    esp,0x10
c0026d34:	83 ec 08             	sub    esp,0x8
c0026d37:	68 58 01 00 00       	push   0x158
c0026d3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d40:	e8 78 b8 fe ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0026d45:	83 c4 10             	add    esp,0x10
c0026d48:	83 c4 0c             	add    esp,0xc
c0026d4b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0026d4c <x87::~x87()>:
c0026d4c:	83 ec 0c             	sub    esp,0xc
c0026d4f:	ba fc a7 02 c0       	mov    edx,0xc002a7fc
c0026d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d58:	89 10                	mov    DWORD PTR [eax],edx
c0026d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d5e:	83 ec 0c             	sub    esp,0xc
c0026d61:	50                   	push   eax
c0026d62:	e8 49 d2 fe ff       	call   c0013fb0 <FPU::~FPU()>
c0026d67:	83 c4 10             	add    esp,0x10
c0026d6a:	90                   	nop
c0026d6b:	83 c4 0c             	add    esp,0xc
c0026d6e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0026d70 <x87::~x87()>:
c0026d70:	83 ec 0c             	sub    esp,0xc
c0026d73:	83 ec 0c             	sub    esp,0xc
c0026d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d7a:	e8 cd ff ff ff       	call   c0026d4c <x87::~x87()>
c0026d7f:	83 c4 10             	add    esp,0x10
c0026d82:	83 ec 08             	sub    esp,0x8
c0026d85:	68 58 01 00 00       	push   0x158
c0026d8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d8e:	e8 2a b8 fe ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0026d93:	83 c4 10             	add    esp,0x10
c0026d96:	83 c4 0c             	add    esp,0xc
c0026d99:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0026d9a <IOAPIC::~IOAPIC()>:
c0026d9a:	83 ec 0c             	sub    esp,0xc
c0026d9d:	ba 54 a9 02 c0       	mov    edx,0xc002a954
c0026da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026da6:	89 10                	mov    DWORD PTR [eax],edx
c0026da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dac:	83 ec 0c             	sub    esp,0xc
c0026daf:	50                   	push   eax
c0026db0:	e8 a9 cb fe ff       	call   c001395e <Device::~Device()>
c0026db5:	83 c4 10             	add    esp,0x10
c0026db8:	90                   	nop
c0026db9:	83 c4 0c             	add    esp,0xc
c0026dbc:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0026dbe <IOAPIC::~IOAPIC()>:
c0026dbe:	83 ec 0c             	sub    esp,0xc
c0026dc1:	83 ec 0c             	sub    esp,0xc
c0026dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026dc8:	e8 cd ff ff ff       	call   c0026d9a <IOAPIC::~IOAPIC()>
c0026dcd:	83 c4 10             	add    esp,0x10
c0026dd0:	83 ec 08             	sub    esp,0x8
c0026dd3:	68 68 01 00 00       	push   0x168
c0026dd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ddc:	e8 dc b7 fe ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0026de1:	83 c4 10             	add    esp,0x10
c0026de4:	83 c4 0c             	add    esp,0xc
c0026de7:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0026de8 <APIC::~APIC()>:
c0026de8:	83 ec 0c             	sub    esp,0xc
c0026deb:	ba 0c a9 02 c0       	mov    edx,0xc002a90c
c0026df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026df4:	89 10                	mov    DWORD PTR [eax],edx
c0026df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dfa:	83 ec 0c             	sub    esp,0xc
c0026dfd:	50                   	push   eax
c0026dfe:	e8 77 d6 fe ff       	call   c001447a <InterruptController::~InterruptController()>
c0026e03:	83 c4 10             	add    esp,0x10
c0026e06:	90                   	nop
c0026e07:	83 c4 0c             	add    esp,0xc
c0026e0a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0026e0c <APIC::~APIC()>:
c0026e0c:	83 ec 0c             	sub    esp,0xc
c0026e0f:	83 ec 0c             	sub    esp,0xc
c0026e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e16:	e8 cd ff ff ff       	call   c0026de8 <APIC::~APIC()>
c0026e1b:	83 c4 10             	add    esp,0x10
c0026e1e:	83 ec 08             	sub    esp,0x8
c0026e21:	68 58 21 00 00       	push   0x2158
c0026e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e2a:	e8 8e b7 fe ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0026e2f:	83 c4 10             	add    esp,0x10
c0026e32:	83 c4 0c             	add    esp,0xc
c0026e35:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0026e36 <PIC::~PIC()>:
c0026e36:	83 ec 0c             	sub    esp,0xc
c0026e39:	ba a4 a9 02 c0       	mov    edx,0xc002a9a4
c0026e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e42:	89 10                	mov    DWORD PTR [eax],edx
c0026e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e48:	83 ec 0c             	sub    esp,0xc
c0026e4b:	50                   	push   eax
c0026e4c:	e8 29 d6 fe ff       	call   c001447a <InterruptController::~InterruptController()>
c0026e51:	83 c4 10             	add    esp,0x10
c0026e54:	90                   	nop
c0026e55:	83 c4 0c             	add    esp,0xc
c0026e58:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0026e5a <PIC::~PIC()>:
c0026e5a:	83 ec 0c             	sub    esp,0xc
c0026e5d:	83 ec 0c             	sub    esp,0xc
c0026e60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e64:	e8 cd ff ff ff       	call   c0026e36 <PIC::~PIC()>
c0026e69:	83 c4 10             	add    esp,0x10
c0026e6c:	83 ec 08             	sub    esp,0x8
c0026e6f:	68 58 21 00 00       	push   0x2158
c0026e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e78:	e8 40 b7 fe ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0026e7d:	83 c4 10             	add    esp,0x10
c0026e80:	83 c4 0c             	add    esp,0xc
c0026e83:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0026e84 <APICTimer::~APICTimer()>:
c0026e84:	83 ec 0c             	sub    esp,0xc
c0026e87:	ba f8 a9 02 c0       	mov    edx,0xc002a9f8
c0026e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e90:	89 10                	mov    DWORD PTR [eax],edx
c0026e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e96:	83 ec 0c             	sub    esp,0xc
c0026e99:	50                   	push   eax
c0026e9a:	e8 db f3 fe ff       	call   c001627a <Timer::~Timer()>
c0026e9f:	83 c4 10             	add    esp,0x10
c0026ea2:	90                   	nop
c0026ea3:	83 c4 0c             	add    esp,0xc
c0026ea6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0026ea8 <APICTimer::~APICTimer()>:
c0026ea8:	83 ec 0c             	sub    esp,0xc
c0026eab:	83 ec 0c             	sub    esp,0xc
c0026eae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026eb2:	e8 cd ff ff ff       	call   c0026e84 <APICTimer::~APICTimer()>
c0026eb7:	83 c4 10             	add    esp,0x10
c0026eba:	83 ec 08             	sub    esp,0x8
c0026ebd:	68 60 01 00 00       	push   0x160
c0026ec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ec6:	e8 f2 b6 fe ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0026ecb:	83 c4 10             	add    esp,0x10
c0026ece:	83 c4 0c             	add    esp,0xc
c0026ed1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0026ed2 <PIT::~PIT()>:
c0026ed2:	83 ec 0c             	sub    esp,0xc
c0026ed5:	ba 48 aa 02 c0       	mov    edx,0xc002aa48
c0026eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ede:	89 10                	mov    DWORD PTR [eax],edx
c0026ee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ee4:	83 ec 0c             	sub    esp,0xc
c0026ee7:	50                   	push   eax
c0026ee8:	e8 8d f3 fe ff       	call   c001627a <Timer::~Timer()>
c0026eed:	83 c4 10             	add    esp,0x10
c0026ef0:	90                   	nop
c0026ef1:	83 c4 0c             	add    esp,0xc
c0026ef4:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0026ef6 <PIT::~PIT()>:
c0026ef6:	83 ec 0c             	sub    esp,0xc
c0026ef9:	83 ec 0c             	sub    esp,0xc
c0026efc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026f00:	e8 cd ff ff ff       	call   c0026ed2 <PIT::~PIT()>
c0026f05:	83 c4 10             	add    esp,0x10
c0026f08:	83 ec 08             	sub    esp,0x8
c0026f0b:	68 5c 01 00 00       	push   0x15c
c0026f10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026f14:	e8 a4 b6 fe ff       	call   c00125bd <operator delete(void*, unsigned long)>
c0026f19:	83 c4 10             	add    esp,0x10
c0026f1c:	83 c4 0c             	add    esp,0xc
c0026f1f:	c3                   	ret    
