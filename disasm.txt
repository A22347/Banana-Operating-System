
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 83 86 02 00       	call   c00286a8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 52 92 02 c0       	mov    ebx,0xc0029252
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 60 92 02 c0    	cmp    ebx,0xc0029260
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 db 02 c0       	mov    eax,0xc002db78
c0000049:	3d 78 db 02 c0       	cmp    eax,0xc002db78
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 db 02 c0       	push   0xc002db78
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 db 02 c0       	mov    eax,0xc002db78
c0000075:	2d 78 db 02 c0       	sub    eax,0xc002db78
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 db 02 c0       	push   0xc002db78
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a8 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e1a8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 68 92 02 c0       	mov    ebx,0xc0029268
c00000bb:	81 eb 64 92 02 c0    	sub    ebx,0xc0029264
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 64 92 02 c0       	mov    esi,0xc0029264
c00000ca:	a1 ac e1 02 c0       	mov    eax,ds:0xc002e1ac
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ac e1 02 c0       	mov    ds:0xc002e1ac,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ac e1 02 c0       	mov    eax,ds:0xc002e1ac
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 db 02 c0       	push   0xc002db78
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a8 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e1a8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b0 e1 02 c0       	push   0xc002e1b0
c000012c:	68 78 db 02 c0       	push   0xc002db78
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 5f d6 01 00       	call   c001d9fa <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 99 29 01 00       	call   c0012d4c <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 3d d6 01 00       	call   c001d9fa <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 8b da 01 00       	call   c001de67 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 39 e0 01 00       	call   c001e41e <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 f0 e5 02 c0 	lgdtd  ds:0xc002e5f0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 76 46 01 00       	call   c0014c4f <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 c8 e1 02 c0       	mov    ds:0xc002e1c8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 c8 e1 02 c0    	mov    DWORD PTR ds:0xc002e1c8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d c8 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e1c8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 80 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6d80],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 80 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d80],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 80 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6d80],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 80 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6d80],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 80 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d80],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d e0 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1e0
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d e0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1e0,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 e4 e1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1e1c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 e4 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e1c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d e0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1e0,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 0c e2 02 c0    	cmp    DWORD PTR ds:0xc002e20c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 1c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e21c
c0000e60:	c7 42 0c 14 e2 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e214
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 1c e2 02 c0    	mov    DWORD PTR ds:0xc002e21c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 0c e2 02 c0    	mov    DWORD PTR ds:0xc002e20c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 e0 e1 02 c0 02 	test   BYTE PTR ds:0xc002e1e0,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d e0 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e1e0
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 e4 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e1c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 e4 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1e1c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 14 e2 02 c0 	lea    edx,[eax*8-0x3ffd1dec]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 20 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e220
c00011e2:	81 fb 14 e2 02 c0    	cmp    ebx,0xc002e214
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 14 e2 02 c0       	cmp    eax,0xc002e214
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 10 e2 02 c0    	cmp    DWORD PTR ds:0xc002e210,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 1c e2 02 c0       	mov    ds:0xc002e21c,eax
c000121e:	a3 20 e2 02 c0       	mov    ds:0xc002e220,eax
c0001223:	a3 10 e2 02 c0       	mov    ds:0xc002e210,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 14 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e214
c0001231:	c7 40 0c 14 e2 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e214
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 20 e2 02 c0       	mov    ds:0xc002e220,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 14 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e214
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 d8 e1 02 c0 	lea    ebp,[edx*4-0x3ffd1e28]
c0001282:	8b 14 95 e0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e20]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 e0 e1 02 c0 	lea    ecx,[edx*4-0x3ffd1e20]
c000129d:	8b 14 95 e0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e20]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 14 e5 02 c0 	or     DWORD PTR [edi*4-0x3ffd1aec],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 14 e2 02 c0 	lea    eax,[eax*8-0x3ffd1dec]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 1c e2 02 c0    	mov    DWORD PTR ds:0xc002e21c,ecx
c0001357:	89 0d 20 e2 02 c0    	mov    DWORD PTR ds:0xc002e220,ecx
c000135d:	c7 41 08 14 e2 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e214
c0001364:	c7 41 0c 14 e2 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e214
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 0c e2 02 c0 	lea    edx,[ecx*8-0x3ffd1df4]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 14 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1aec]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 14 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1aec]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 0c e2 02 c0 	lea    edx,[eax*4-0x3ffd1df4]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 14 e5 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1aec],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 1c e2 02 c0    	mov    DWORD PTR ds:0xc002e21c,edi
c000142a:	89 3d 20 e2 02 c0    	mov    DWORD PTR ds:0xc002e220,edi
c0001430:	c7 47 08 14 e2 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e214
c0001437:	c7 47 0c 14 e2 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e214
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 10 e2 02 c0    	mov    DWORD PTR ds:0xc002e210,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 0c e2 02 c0       	mov    eax,ds:0xc002e20c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 0c e2 02 c0    	mov    DWORD PTR ds:0xc002e20c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba e0 e1 02 c0       	mov    edx,0xc002e1e0
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d e0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1e0,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 34 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e534
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 34 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e534,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 34 e5 02 c0    	mov    DWORD PTR ds:0xc002e534,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 0c e2 02 c0    	cmp    DWORD PTR ds:0xc002e20c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 0c e2 02 c0    	mov    DWORD PTR ds:0xc002e20c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d e0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1e0,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 3c e5 02 c0    	push   DWORD PTR ds:0xc002e53c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d e0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1e0,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 3c e5 02 c0       	mov    eax,ds:0xc002e53c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 0c e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e20c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 0c e2 02 c0       	mov    eax,ds:0xc002e20c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 e4 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1e1c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 14 e2 02 c0       	mov    eax,0xc002e214
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 0c e5 02 c0       	cmp    eax,0xc002e50c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 48 e5 02 c0       	mov    eax,ds:0xc002e548
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 30 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e530
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 44 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e544
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 54 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e554
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 84 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6c7c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 e0 e1 02 c0       	mov    eax,ds:0xc002e1e0
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 e0 e1 02 c0       	mov    ds:0xc002e1e0,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 24 e5 02 c0    	mov    DWORD PTR ds:0xc002e524,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 28 e5 02 c0    	mov    DWORD PTR ds:0xc002e528,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 2c e5 02 c0    	mov    DWORD PTR ds:0xc002e52c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 34 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e534,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 c0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce340]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 ea f1 01 00       	jmp    c0020e16 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 c0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce340]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 1b f2 01 00       	jmp    c0020e5d <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 c0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce340]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 43 f2 01 00       	jmp    c0020ea4 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 c8 4a 02 00       	call   c0026a0c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 a0 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6b60]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 a0 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6b60]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba a0 93 02 c0       	mov    edx,0xc00293a0
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba c0 94 02 c0       	mov    edx,0xc00294c0
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 00 ca 02 c0       	mov    edx,0xc002ca00
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba cc 94 02 c0       	mov    edx,0xc00294cc
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba b0 94 02 c0       	mov    edx,0xc00294b0
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 80 e5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1a80]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 60 e5 02 c0    	mov    ax,ds:0xc002e560
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 60 e5 02 c0    	mov    ds:0xc002e560,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 c5 38 02 00       	call   c0026a0c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 d2 94 02 c0       	mov    eax,0xc00294d2
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 20 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6be0]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 db 94 02 c0       	mov    eax,0xc00294db
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 a0 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6b60]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 90 22 02 00       	call   c0026a0c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba b0 94 02 c0       	mov    edx,0xc00294b0
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba a0 93 02 c0       	mov    edx,0xc00293a0
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba b0 93 02 c0       	mov    edx,0xc00293b0
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 80 e5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1a80]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 80 e5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1a80],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 57 0c 02 00       	call   c0026a0c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 3d 0c 02 00       	call   c0026a0c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 f7 93 02 c0       	mov    eax,0xc00293f7
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 f0 93 02 c0       	mov    eax,0xc00293f0
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 80 e5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1a80]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be e0 93 02 c0       	mov    esi,0xc00293e0
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 80 f3 01 00       	call   c0026a0c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba c0 94 02 c0       	mov    edx,0xc00294c0
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba c0 93 02 c0       	mov    edx,0xc00293c0
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba d0 93 02 c0       	mov    edx,0xc00293d0
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba e2 94 02 c0       	mov    edx,0xc00294e2
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba ee 94 02 c0       	mov    edx,0xc00294ee
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 02 95 02 c0       	mov    edx,0xc0029502
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 20 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029820
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 20 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029820
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 20 96 02 c0       	mov    eax,0xc0029620
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 60 95 02 c0       	mov    eax,0xc0029560
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 20 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ae0]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 d4 fc 01 00       	call   c00284df <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 97 fc 01 00       	call   c00284c1 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 6b fc 01 00       	call   c00284df <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 1e f3 01 00       	call   c0027be4 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 98 fd 01 00       	call   c0028670 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 e5 fb 01 00       	call   c00284df <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 27 fb 01 00       	call   c00284df <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 f4 fa 01 00       	call   c00284c1 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 e1 f9 01 00       	call   c00284df <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 a9 f9 01 00       	call   c00284c1 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 20 99 02 c0       	mov    eax,0xc0029920
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 b5 f7 01 00       	call   c00284df <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 7a f7 01 00       	call   c00284c1 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 80 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6280]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 8a f4 01 00       	call   c0028273 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 08 ee 01 00       	call   c0027c10 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 c4 f6 01 00       	call   c00284e3 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 b2 f7 01 00       	call   c0028607 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 9c ed 01 00       	call   c0027c10 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 47 f6 01 00       	call   c00284dd <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 28 f6 01 00       	call   c00284e1 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 b6 f7 01 00       	call   c0028690 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 68 f3 01 00       	call   c0028273 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 e6 ec 01 00       	call   c0027c10 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 a2 f5 01 00       	call   c00284e3 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 90 f6 01 00       	call   c0028607 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 7a ec 01 00       	call   c0027c10 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 25 f5 01 00       	call   c00284dd <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 05 f5 01 00       	call   c00284e1 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 92 f6 01 00       	call   c0028690 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 40 f4 01 00       	call   c00284df <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 fe f3 01 00       	call   c00284c1 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 e6 f3 01 00       	call   c00284df <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 58 f1 01 00       	call   c0028273 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 5a e4 01 00       	call   c0027593 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 bd ea 01 00       	call   c0027c10 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 0f f1 01 00       	call   c0028273 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 15 e4 01 00       	call   c0027593 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 e4 f0 01 00       	call   c0028273 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 34 f3 01 00       	call   c00284dd <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 11 ea 01 00       	call   c0027be4 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 8b f4 01 00       	call   c0028670 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 ba f2 01 00       	call   c00284c1 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 b5 e9 01 00       	call   c0027be4 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 33 f0 01 00       	call   c0028273 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 b6 e9 01 00       	call   c0027c10 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 08 f0 01 00       	call   c0028273 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 6f ec 01 00       	call   c0027ef4 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 ee e2 01 00       	call   c0027593 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 4e dc 01 00       	call   c0026f28 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 25 f3 01 00       	call   c0028607 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 0e e9 01 00       	call   c0027c10 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 f5 f2 01 00       	call   c0028607 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 67 e2 01 00       	call   c0027593 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 a0 f1 01 00       	call   c00284e3 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 88 eb 01 00       	call   c0027ef4 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 0e e2 01 00       	call   c0027593 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 f4 f2 01 00       	call   c0028690 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 ce ee 01 00       	call   c0028273 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 25 e8 01 00       	call   c0027be4 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 04 f1 01 00       	call   c00284df <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 9d e1 01 00       	call   c0027593 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 c9 e7 01 00       	call   c0027be4 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 63 f2 01 00       	call   c0028690 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 1c ee 01 00       	call   c0028273 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 99 e7 01 00       	call   c0027c10 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 ec ed 01 00       	call   c0028273 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 f2 e0 01 00       	call   c0027593 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 c2 ed 01 00       	call   c0028273 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 14 f0 01 00       	call   c00284df <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 eb e6 01 00       	call   c0027be4 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 65 f1 01 00       	call   c0028670 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 94 ef 01 00       	call   c00284c1 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 8e e6 01 00       	call   c0027be4 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 0c ed 01 00       	call   c0028273 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 8f e6 01 00       	call   c0027c10 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 e1 ec 01 00       	call   c0028273 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 48 e9 01 00       	call   c0027ef4 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 c7 df 01 00       	call   c0027593 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 17 d9 01 00       	call   c0026f28 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 ee ef 01 00       	call   c0028607 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 d7 e5 01 00       	call   c0027c10 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 be ef 01 00       	call   c0028607 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 30 df 01 00       	call   c0027593 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 69 ee 01 00       	call   c00284e3 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 50 e8 01 00       	call   c0027ef4 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 cf de 01 00       	call   c0027593 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 b5 ef 01 00       	call   c0028690 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 8f eb 01 00       	call   c0028273 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 e6 e4 01 00       	call   c0027be4 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 c5 ed 01 00       	call   c00284df <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 5e de 01 00       	call   c0027593 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 8a e4 01 00       	call   c0027be4 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 ff ea 01 00       	call   c0028273 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 05 de 01 00       	call   c0027593 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 e0 9d 02 c0       	mov    eax,0xc0029de0
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 f4 9d 02 c0       	mov    eax,0xc0029df4
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 7a e9 01 00       	call   c0028273 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 f8 e2 01 00       	call   c0027c10 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 8a d5 01 00       	call   c0026f28 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 61 ec 01 00       	call   c0028607 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 4a e2 01 00       	call   c0027c10 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 2d ec 01 00       	call   c0028607 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 9f db 01 00       	call   c0027593 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 ff eb 01 00       	call   c0028607 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 ee e1 01 00       	call   c0027c10 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 57 db 01 00       	call   c0027593 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 78 d4 01 00       	call   c0026f28 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 4f eb 01 00       	call   c0028607 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 38 e1 01 00       	call   c0027c10 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 1b eb 01 00       	call   c0028607 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 8d da 01 00       	call   c0027593 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 ed ea 01 00       	call   c0028607 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 dc e0 01 00       	call   c0027c10 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 45 da 01 00       	call   c0027593 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 23 da 01 00       	call   c0027593 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 ff d2 01 00       	call   c0026f28 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 d6 e9 01 00       	call   c0028607 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 bf df 01 00       	call   c0027c10 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 a2 e9 01 00       	call   c0028607 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 14 d9 01 00       	call   c0027593 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 74 e9 01 00       	call   c0028607 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 5d df 01 00       	call   c0027c10 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 c6 d8 01 00       	call   c0027593 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 26 e9 01 00       	call   c0028607 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 0f df 01 00       	call   c0027c10 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 78 d8 01 00       	call   c0027593 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 8d d1 01 00       	call   c0026f28 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 64 e8 01 00       	call   c0028607 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 4d de 01 00       	call   c0027c10 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 34 e8 01 00       	call   c0028607 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 a6 d7 01 00       	call   c0027593 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 06 e8 01 00       	call   c0028607 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 ef dd 01 00       	call   c0027c10 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 58 d7 01 00       	call   c0027593 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 b8 e7 01 00       	call   c0028607 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 a1 dd 01 00       	call   c0027c10 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 0a d7 01 00       	call   c0027593 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 de d6 01 00       	call   c0027593 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 3b dd 01 00       	call   c0027c10 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 f7 e5 01 00       	call   c00284e3 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 86 d6 01 00       	call   c0027593 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 e3 dc 01 00       	call   c0027c10 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 9f e5 01 00       	call   c00284e3 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 19 cf 01 00       	call   c0026f28 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 f0 e5 01 00       	call   c0028607 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 d9 db 01 00       	call   c0027c10 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 bc e5 01 00       	call   c0028607 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 2e d5 01 00       	call   c0027593 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 8e e5 01 00       	call   c0028607 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 77 db 01 00       	call   c0027c10 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 e0 d4 01 00       	call   c0027593 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 40 e5 01 00       	call   c0028607 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 29 db 01 00       	call   c0027c10 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 92 d4 01 00       	call   c0027593 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 f2 e4 01 00       	call   c0028607 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 db da 01 00       	call   c0027c10 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 44 d4 01 00       	call   c0027593 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 a4 e4 01 00       	call   c0028607 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 8d da 01 00       	call   c0027c10 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 f6 d3 01 00       	call   c0027593 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 f8 cc 01 00       	call   c0026f28 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 cf e3 01 00       	call   c0028607 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 b8 d9 01 00       	call   c0027c10 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 9f e3 01 00       	call   c0028607 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 11 d3 01 00       	call   c0027593 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 71 e3 01 00       	call   c0028607 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 5a d9 01 00       	call   c0027c10 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 c3 d2 01 00       	call   c0027593 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 23 e3 01 00       	call   c0028607 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 0c d9 01 00       	call   c0027c10 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 75 d2 01 00       	call   c0027593 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 d5 e2 01 00       	call   c0028607 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 be d8 01 00       	call   c0027c10 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 27 d2 01 00       	call   c0027593 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 87 e2 01 00       	call   c0028607 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 70 d8 01 00       	call   c0027c10 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 d9 d1 01 00       	call   c0027593 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 ad d1 01 00       	call   c0027593 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 0a d8 01 00       	call   c0027c10 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 c6 e0 01 00       	call   c00284e3 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 55 d1 01 00       	call   c0027593 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 b2 d7 01 00       	call   c0027c10 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 6e e0 01 00       	call   c00284e3 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 fc d0 01 00       	call   c0027593 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 59 d7 01 00       	call   c0027c10 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 15 e0 01 00       	call   c00284e3 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 a3 d0 01 00       	call   c0027593 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 00 d7 01 00       	call   c0027c10 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 bc df 01 00       	call   c00284e3 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 1a c9 01 00       	call   c0026f28 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 f1 df 01 00       	call   c0028607 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 da d5 01 00       	call   c0027c10 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 bd df 01 00       	call   c0028607 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 2f cf 01 00       	call   c0027593 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 8f df 01 00       	call   c0028607 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 78 d5 01 00       	call   c0027c10 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 e1 ce 01 00       	call   c0027593 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 41 df 01 00       	call   c0028607 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 2a d5 01 00       	call   c0027c10 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 93 ce 01 00       	call   c0027593 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 f3 de 01 00       	call   c0028607 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 dc d4 01 00       	call   c0027c10 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 45 ce 01 00       	call   c0027593 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 a5 de 01 00       	call   c0028607 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 8e d4 01 00       	call   c0027c10 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 f7 cd 01 00       	call   c0027593 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 57 de 01 00       	call   c0028607 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 40 d4 01 00       	call   c0027c10 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 a6 cd 01 00       	call   c0027593 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 06 de 01 00       	call   c0028607 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 ef d3 01 00       	call   c0027c10 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 58 cd 01 00       	call   c0027593 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 52 c6 01 00       	call   c0026f28 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 29 dd 01 00       	call   c0028607 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 12 d3 01 00       	call   c0027c10 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 f2 dc 01 00       	call   c0028607 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 64 cc 01 00       	call   c0027593 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 c4 dc 01 00       	call   c0028607 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 ad d2 01 00       	call   c0027c10 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 16 cc 01 00       	call   c0027593 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 76 dc 01 00       	call   c0028607 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 5f d2 01 00       	call   c0027c10 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 c8 cb 01 00       	call   c0027593 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 28 dc 01 00       	call   c0028607 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 11 d2 01 00       	call   c0027c10 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 7a cb 01 00       	call   c0027593 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 da db 01 00       	call   c0028607 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 c3 d1 01 00       	call   c0027c10 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 2c cb 01 00       	call   c0027593 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 8c db 01 00       	call   c0028607 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 75 d1 01 00       	call   c0027c10 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 db ca 01 00       	call   c0027593 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 3b db 01 00       	call   c0028607 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 24 d1 01 00       	call   c0027c10 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 93 ca 01 00       	call   c0027593 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 6c ca 01 00       	call   c0027593 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 ca d0 01 00       	call   c0027c10 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 86 d9 01 00       	call   c00284e3 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 15 ca 01 00       	call   c0027593 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 73 d0 01 00       	call   c0027c10 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 2f d9 01 00       	call   c00284e3 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 bd c9 01 00       	call   c0027593 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 1b d0 01 00       	call   c0027c10 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 d7 d8 01 00       	call   c00284e3 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 65 c9 01 00       	call   c0027593 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 c3 cf 01 00       	call   c0027c10 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 7f d8 01 00       	call   c00284e3 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 0d c9 01 00       	call   c0027593 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 6b cf 01 00       	call   c0027c10 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 27 d8 01 00       	call   c00284e3 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 bb c8 01 00       	call   c0027593 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 19 cf 01 00       	call   c0027c10 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 d5 d7 01 00       	call   c00284e3 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 e9 c0 01 00       	call   c0026f28 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 c0 d7 01 00       	call   c0028607 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 a9 cd 01 00       	call   c0027c10 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 90 d7 01 00       	call   c0028607 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 02 c7 01 00       	call   c0027593 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 24 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61dc]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 36 d7 01 00       	call   c0028607 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 1f cd 01 00       	call   c0027c10 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 8a c6 01 00       	call   c0027593 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 d7 d6 01 00       	call   c0028607 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 c0 cc 01 00       	call   c0027c10 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 2b c6 01 00       	call   c0027593 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 78 d6 01 00       	call   c0028607 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 61 cc 01 00       	call   c0027c10 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 cc c5 01 00       	call   c0027593 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 19 d6 01 00       	call   c0028607 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 02 cc 01 00       	call   c0027c10 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 6d c5 01 00       	call   c0027593 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 ba d5 01 00       	call   c0028607 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 a3 cb 01 00       	call   c0027c10 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 0e c5 01 00       	call   c0027593 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 5b d5 01 00       	call   c0028607 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 44 cb 01 00       	call   c0027c10 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 af c4 01 00       	call   c0027593 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 fc d4 01 00       	call   c0028607 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 e5 ca 01 00       	call   c0027c10 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 50 c4 01 00       	call   c0027593 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 9d d4 01 00       	call   c0028607 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 86 ca 01 00       	call   c0027c10 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 f1 c3 01 00       	call   c0027593 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 fb bc 01 00       	call   c0026f28 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 d2 d3 01 00       	call   c0028607 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 bb c9 01 00       	call   c0027c10 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 a2 d3 01 00       	call   c0028607 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 14 c3 01 00       	call   c0027593 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 40 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61c0]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 47 d3 01 00       	call   c0028607 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 30 c9 01 00       	call   c0027c10 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 9b c2 01 00       	call   c0027593 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 e7 d2 01 00       	call   c0028607 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 d0 c8 01 00       	call   c0027c10 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 3b c2 01 00       	call   c0027593 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 87 d2 01 00       	call   c0028607 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 70 c8 01 00       	call   c0027c10 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 db c1 01 00       	call   c0027593 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 27 d2 01 00       	call   c0028607 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 10 c8 01 00       	call   c0027c10 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 7b c1 01 00       	call   c0027593 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 c7 d1 01 00       	call   c0028607 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 b0 c7 01 00       	call   c0027c10 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 1b c1 01 00       	call   c0027593 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 67 d1 01 00       	call   c0028607 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 50 c7 01 00       	call   c0027c10 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 bb c0 01 00       	call   c0027593 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 07 d1 01 00       	call   c0028607 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 f0 c6 01 00       	call   c0027c10 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 5b c0 01 00       	call   c0027593 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 a7 d0 01 00       	call   c0028607 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 90 c6 01 00       	call   c0027c10 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 fb bf 01 00       	call   c0027593 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 5c 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61a4]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 a0 bf 01 00       	call   c0027593 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 fd c5 01 00       	call   c0027c10 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 b9 ce 01 00       	call   c00284e3 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 43 bf 01 00       	call   c0027593 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 a0 c5 01 00       	call   c0027c10 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 5c ce 01 00       	call   c00284e3 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 e6 be 01 00       	call   c0027593 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 43 c5 01 00       	call   c0027c10 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 ff cd 01 00       	call   c00284e3 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 89 be 01 00       	call   c0027593 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 e6 c4 01 00       	call   c0027c10 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 a2 cd 01 00       	call   c00284e3 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 2c be 01 00       	call   c0027593 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 89 c4 01 00       	call   c0027c10 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 45 cd 01 00       	call   c00284e3 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 cf bd 01 00       	call   c0027593 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 2c c4 01 00       	call   c0027c10 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 e8 cc 01 00       	call   c00284e3 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 72 bd 01 00       	call   c0027593 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 cf c3 01 00       	call   c0027c10 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 8b cc 01 00       	call   c00284e3 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 15 bd 01 00       	call   c0027593 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 72 c3 01 00       	call   c0027c10 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 2e cc 01 00       	call   c00284e3 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 2a c3 01 00       	call   c0027c10 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 9a cd 01 00       	jmp    c0028690 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 0c ca 01 00       	call   c00284df <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 ca c9 01 00       	call   c00284c1 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 61 c7 01 00       	call   c0028273 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 62 ba 01 00       	call   c0027593 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 31 c7 01 00       	call   c0028273 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 98 c3 01 00       	call   c0027ef4 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 37 c9 01 00       	call   c00284c1 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 3a c9 01 00       	call   c00284df <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 0d c9 01 00       	call   c00284df <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 06 c3 01 00       	call   c0027ef4 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 88 ca 01 00       	call   c0028690 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 63 ca 01 00       	call   c0028690 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 3d c6 01 00       	call   c0028273 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 94 bf 01 00       	call   c0027be4 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 73 c8 01 00       	call   c00284df <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 0c b9 01 00       	call   c0027593 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 30 bf 01 00       	call   c0027be4 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 ca c9 01 00       	call   c0028690 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 0a c2 01 00       	call   c0027ef4 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 87 b8 01 00       	call   c0027593 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 b3 c4 01 00       	call   c0028273 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 b3 b7 01 00       	call   c0027593 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 93 b7 01 00       	call   c0027593 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 63 c4 01 00       	call   c0028273 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 b3 c6 01 00       	call   c00284dd <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 92 bd 01 00       	call   c0027be4 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 0c c8 01 00       	call   c0028670 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 3b c6 01 00       	call   c00284c1 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 39 bd 01 00       	call   c0027be4 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 b7 c3 01 00       	call   c0028273 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 3a bd 01 00       	call   c0027c10 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 8c c3 01 00       	call   c0028273 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 f3 bf 01 00       	call   c0027ef4 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 72 b6 01 00       	call   c0027593 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 3c c3 01 00       	call   c0028273 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 88 c5 01 00       	call   c00284df <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 7d bc 01 00       	call   c0027c10 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 4f bc 01 00       	call   c0027c10 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 88 c2 01 00       	call   c0028273 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 ec be 01 00       	call   c0027ef4 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 b4 be 01 00       	call   c0027ef4 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 33 b5 01 00       	call   c0027593 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 18 c6 01 00       	call   c0028690 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 f2 c1 01 00       	call   c0028273 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 49 bb 01 00       	call   c0027be4 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 28 c4 01 00       	call   c00284df <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 c0 b4 01 00       	call   c0027593 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 e4 ba 01 00       	call   c0027be4 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 7e c5 01 00       	call   c0028690 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 47 c3 01 00       	call   c00284df <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 05 c3 01 00       	call   c00284c1 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 9c c0 01 00       	call   c0028273 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 9d b3 01 00       	call   c0027593 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 6c c0 01 00       	call   c0028273 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 d3 bc 01 00       	call   c0027ef4 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 72 c2 01 00       	call   c00284c1 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 75 c2 01 00       	call   c00284df <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 48 c2 01 00       	call   c00284df <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 41 bc 01 00       	call   c0027ef4 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 c3 c3 01 00       	call   c0028690 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 9e c3 01 00       	call   c0028690 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 78 bf 01 00       	call   c0028273 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 cf b8 01 00       	call   c0027be4 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 ae c1 01 00       	call   c00284df <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 47 b2 01 00       	call   c0027593 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 6b b8 01 00       	call   c0027be4 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 05 c3 01 00       	call   c0028690 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 45 bb 01 00       	call   c0027ef4 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 c2 b1 01 00       	call   c0027593 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 ed bd 01 00       	call   c0028273 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 ed b0 01 00       	call   c0027593 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 cd b0 01 00       	call   c0027593 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 9d bd 01 00       	call   c0028273 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 ed bf 01 00       	call   c00284dd <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 cb b6 01 00       	call   c0027be4 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 45 c1 01 00       	call   c0028670 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 74 bf 01 00       	call   c00284c1 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 71 b6 01 00       	call   c0027be4 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 ef bc 01 00       	call   c0028273 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 72 b6 01 00       	call   c0027c10 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 c4 bc 01 00       	call   c0028273 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 2b b9 01 00       	call   c0027ef4 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 aa af 01 00       	call   c0027593 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 74 bc 01 00       	call   c0028273 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 c0 be 01 00       	call   c00284df <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 b5 b5 01 00       	call   c0027c10 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 87 b5 01 00       	call   c0027c10 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 be bb 01 00       	call   c0028273 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 22 b8 01 00       	call   c0027ef4 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 ef b7 01 00       	call   c0027ef4 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 6e ae 01 00       	call   c0027593 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 53 bf 01 00       	call   c0028690 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 2d bb 01 00       	call   c0028273 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 84 b4 01 00       	call   c0027be4 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 63 bd 01 00       	call   c00284df <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 fb ad 01 00       	call   c0027593 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 1f b4 01 00       	call   c0027be4 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 b9 be 01 00       	call   c0028690 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 82 bc 01 00       	call   c00284df <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 40 bc 01 00       	call   c00284c1 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 d7 b9 01 00       	call   c0028273 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 d8 ac 01 00       	call   c0027593 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 a7 b9 01 00       	call   c0028273 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 0e b6 01 00       	call   c0027ef4 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 ad bb 01 00       	call   c00284c1 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 b0 bb 01 00       	call   c00284df <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 83 bb 01 00       	call   c00284df <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 7c b5 01 00       	call   c0027ef4 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 fe bc 01 00       	call   c0028690 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 d9 bc 01 00       	call   c0028690 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 b3 b8 01 00       	call   c0028273 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 0a b2 01 00       	call   c0027be4 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 e9 ba 01 00       	call   c00284df <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 82 ab 01 00       	call   c0027593 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 a6 b1 01 00       	call   c0027be4 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 40 bc 01 00       	call   c0028690 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 80 b4 01 00       	call   c0027ef4 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 fd aa 01 00       	call   c0027593 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 28 b7 01 00       	call   c0028273 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 28 aa 01 00       	call   c0027593 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 08 aa 01 00       	call   c0027593 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 d8 b6 01 00       	call   c0028273 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 28 b9 01 00       	call   c00284dd <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 06 b0 01 00       	call   c0027be4 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 80 ba 01 00       	call   c0028670 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 af b8 01 00       	call   c00284c1 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 ac af 01 00       	call   c0027be4 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 2a b6 01 00       	call   c0028273 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 ad af 01 00       	call   c0027c10 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 ff b5 01 00       	call   c0028273 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 66 b2 01 00       	call   c0027ef4 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 e5 a8 01 00       	call   c0027593 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 af b5 01 00       	call   c0028273 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 fb b7 01 00       	call   c00284df <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 f0 ae 01 00       	call   c0027c10 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 c2 ae 01 00       	call   c0027c10 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 f9 b4 01 00       	call   c0028273 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 5d b1 01 00       	call   c0027ef4 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 2a b1 01 00       	call   c0027ef4 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 a9 a7 01 00       	call   c0027593 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 8e b8 01 00       	call   c0028690 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 68 b4 01 00       	call   c0028273 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 bf ad 01 00       	call   c0027be4 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 9e b6 01 00       	call   c00284df <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 36 a7 01 00       	call   c0027593 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 5a ad 01 00       	call   c0027be4 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 f4 b7 01 00       	call   c0028690 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 bd b5 01 00       	call   c00284df <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 7b b5 01 00       	call   c00284c1 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 12 b3 01 00       	call   c0028273 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 13 a6 01 00       	call   c0027593 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 e2 b2 01 00       	call   c0028273 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 49 af 01 00       	call   c0027ef4 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 e8 b4 01 00       	call   c00284c1 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 eb b4 01 00       	call   c00284df <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 be b4 01 00       	call   c00284df <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 b7 ae 01 00       	call   c0027ef4 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 39 b6 01 00       	call   c0028690 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 14 b6 01 00       	call   c0028690 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 ee b1 01 00       	call   c0028273 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 45 ab 01 00       	call   c0027be4 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 24 b4 01 00       	call   c00284df <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 bd a4 01 00       	call   c0027593 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 e1 aa 01 00       	call   c0027be4 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 7b b5 01 00       	call   c0028690 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 bb ad 01 00       	call   c0027ef4 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 38 a4 01 00       	call   c0027593 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 63 b0 01 00       	call   c0028273 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 63 a3 01 00       	call   c0027593 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 43 a3 01 00       	call   c0027593 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 13 b0 01 00       	call   c0028273 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 63 b2 01 00       	call   c00284dd <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 41 a9 01 00       	call   c0027be4 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 bb b3 01 00       	call   c0028670 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 ea b1 01 00       	call   c00284c1 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 e7 a8 01 00       	call   c0027be4 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 65 af 01 00       	call   c0028273 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 e8 a8 01 00       	call   c0027c10 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 3a af 01 00       	call   c0028273 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 a1 ab 01 00       	call   c0027ef4 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 20 a2 01 00       	call   c0027593 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 ea ae 01 00       	call   c0028273 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 36 b1 01 00       	call   c00284df <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 2b a8 01 00       	call   c0027c10 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 fd a7 01 00       	call   c0027c10 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 34 ae 01 00       	call   c0028273 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 98 aa 01 00       	call   c0027ef4 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 65 aa 01 00       	call   c0027ef4 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 e4 a0 01 00       	call   c0027593 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 c9 b1 01 00       	call   c0028690 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 a3 ad 01 00       	call   c0028273 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 fa a6 01 00       	call   c0027be4 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 d9 af 01 00       	call   c00284df <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 71 a0 01 00       	call   c0027593 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 95 a6 01 00       	call   c0027be4 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 2f b1 01 00       	call   c0028690 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 f5 ae 01 00       	call   c00284df <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 b3 ae 01 00       	call   c00284c1 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 4a ac 01 00       	call   c0028273 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 4b 9f 01 00       	call   c0027593 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 1a ac 01 00       	call   c0028273 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 81 a8 01 00       	call   c0027ef4 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 20 ae 01 00       	call   c00284c1 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 23 ae 01 00       	call   c00284df <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 f6 ad 01 00       	call   c00284df <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 ef a7 01 00       	call   c0027ef4 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 71 af 01 00       	call   c0028690 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 48 af 01 00       	call   c0028690 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 22 ab 01 00       	call   c0028273 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 79 a4 01 00       	call   c0027be4 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 58 ad 01 00       	call   c00284df <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 f1 9d 01 00       	call   c0027593 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 19 a4 01 00       	call   c0027be4 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 b3 ae 01 00       	call   c0028690 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 f4 a6 01 00       	call   c0027ef4 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 71 9d 01 00       	call   c0027593 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 9d a9 01 00       	call   c0028273 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 9d 9c 01 00       	call   c0027593 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 7d 9c 01 00       	call   c0027593 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 4d a9 01 00       	call   c0028273 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 81 ab 01 00       	call   c00284c1 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 78 a2 01 00       	call   c0027be4 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 f2 ac 01 00       	call   c0028670 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 21 ab 01 00       	call   c00284c1 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 1b a2 01 00       	call   c0027be4 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 99 a8 01 00       	call   c0028273 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 1c a2 01 00       	call   c0027c10 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 6e a8 01 00       	call   c0028273 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 d5 a4 01 00       	call   c0027ef4 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 54 9b 01 00       	call   c0027593 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 1e a8 01 00       	call   c0028273 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 6a aa 01 00       	call   c00284df <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 5f a1 01 00       	call   c0027c10 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 31 a1 01 00       	call   c0027c10 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 75 a7 01 00       	call   c0028273 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 dc a3 01 00       	call   c0027ef4 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 c5 a0 01 00       	call   c0027c10 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 81 a9 01 00       	call   c00284e3 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 74 a3 01 00       	call   c0027ef4 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 f3 99 01 00       	call   c0027593 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 d8 aa 01 00       	call   c0028690 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 b2 a6 01 00       	call   c0028273 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 09 a0 01 00       	call   c0027be4 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 e8 a8 01 00       	call   c00284df <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 80 99 01 00       	call   c0027593 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 a8 9f 01 00       	call   c0027be4 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 42 aa 01 00       	call   c0028690 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 84 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd617c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 78 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6188]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 fd a6 01 00       	call   c00284df <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 bb a6 01 00       	call   c00284c1 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 a7 a6 01 00       	call   c00284df <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 19 a4 01 00       	call   c0028273 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 97 9d 01 00       	call   c0027c10 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 e9 a3 01 00       	call   c0028273 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 ef 96 01 00       	call   c0027593 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 be a3 01 00       	call   c0028273 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 0e a6 01 00       	call   c00284dd <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 ef 9c 01 00       	call   c0027be4 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 69 a7 01 00       	call   c0028670 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 98 a5 01 00       	call   c00284c1 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 97 9c 01 00       	call   c0027be4 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 15 a3 01 00       	call   c0028273 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 98 9c 01 00       	call   c0027c10 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 ea a2 01 00       	call   c0028273 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 51 9f 01 00       	call   c0027ef4 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 d0 95 01 00       	call   c0027593 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 f8 9e 01 00       	call   c0027ef4 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 7e 95 01 00       	call   c0027593 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 64 a6 01 00       	call   c0028690 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 3e a2 01 00       	call   c0028273 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 95 9b 01 00       	call   c0027be4 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 74 a4 01 00       	call   c00284df <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 0d 95 01 00       	call   c0027593 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 39 9b 01 00       	call   c0027be4 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 d3 a5 01 00       	call   c0028690 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 88 a1 01 00       	call   c0028273 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 05 9b 01 00       	call   c0027c10 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 56 a1 01 00       	call   c0028273 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 5c 94 01 00       	call   c0027593 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 2c a1 01 00       	call   c0028273 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 80 a3 01 00       	call   c00284e1 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 59 9a 01 00       	call   c0027be4 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 d3 a4 01 00       	call   c0028670 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 02 a3 01 00       	call   c00284c1 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 00 9a 01 00       	call   c0027be4 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 7e a0 01 00       	call   c0028273 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 01 9a 01 00       	call   c0027c10 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 53 a0 01 00       	call   c0028273 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 ba 9c 01 00       	call   c0027ef4 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 39 93 01 00       	call   c0027593 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 55 9c 01 00       	call   c0027ef4 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 d4 92 01 00       	call   c0027593 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 ba a3 01 00       	call   c0028690 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 94 9f 01 00       	call   c0028273 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 eb 98 01 00       	call   c0027be4 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 ca a1 01 00       	call   c00284df <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 63 92 01 00       	call   c0027593 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 8f 98 01 00       	call   c0027be4 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 00 9f 01 00       	call   c0028273 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 06 92 01 00       	call   c0027593 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 9e 9f 02 c0       	mov    eax,0xc0029f9e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 af 9f 02 c0       	mov    eax,0xc0029faf
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 e6 9f 02 c0       	push   0xc0029fe6
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 e8 e5 02 c0       	mov    eax,0xc002e5e8
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 ef 9f 02 c0       	push   0xc0029fef
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 0c 6a 02 c0       	mov    eax,0xc0026a0c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 f9 9f 02 c0       	push   0xc0029ff9
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 40 67 02 c0       	mov    eax,0xc0026740
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 02 a0 02 c0       	push   0xc002a002
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 0c 6b 02 c0       	mov    eax,0xc0026b0c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 0c a0 02 c0       	push   0xc002a00c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 8c 68 02 c0       	mov    eax,0xc002688c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 15 a0 02 c0       	push   0xc002a015
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 ec e5 02 c0       	mov    eax,0xc002e5ec
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 22 a0 02 c0       	push   0xc002a022
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 ed e5 02 c0       	mov    eax,0xc002e5ed
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 e7 5e 00 00       	call   c001450a <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c000e668:	68 2f a0 02 c0       	push   0xc002a02f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 f3 f5 00 00       	call   c001dc68 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 dc f8 00 00       	call   c001df66 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 c4 e7 01 c0       	push   0xc001e7c4
c000e693:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c000e699:	e8 c8 f8 00 00       	call   c001df66 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 08 1b 03 c0       	mov    ds:0xc0031b08,eax
c000e6a6:	c6 05 ed e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5ed,0x1
c000e6ad:	e8 93 04 01 00       	call   c001eb45 <Vm::initialise8086()>
c000e6b2:	e8 3b 4c 00 00       	call   c00132f2 <Fs::initVFS()>
c000e6b7:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 25 df 00 00       	call   c001c5f8 <Sys::loadSyscalls()>
c000e6d3:	e8 fe bd 00 00       	call   c001a4d6 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 3c a0 02 c0       	push   0xc002a03c
c000e6e2:	68 45 a0 02 c0       	push   0xc002a045
c000e6e7:	e8 10 cb 00 00       	call   c001b1fc <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 e6 56 00 00       	call   c0013dda <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 d9 5d 00 00       	call   c00144de <Device::loadDriversForAll()>
c000e705:	e8 12 b9 00 00       	call   c001a01c <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d e8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5e8
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 4d a0 02 c0       	push   0xc002a04d
c000e719:	e8 6e f0 00 00       	call   c001d78c <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 99 f2 00 00       	call   c001d9c0 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 96 fb 00 00       	call   c001e2ca <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 69 a0 02 c0       	push   0xc002a069
c000e749:	50                   	push   eax
c000e74a:	e8 35 5e 00 00       	call   c0014584 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 08 a2 02 c0       	mov    edx,0xc002a208
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 01 e6 02 c0 04 	test   BYTE PTR ds:0xc002e601,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 f3 7d 01 00       	call   c00266d6 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 10 a4 00 00       	call   c0018d2e <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 e9 a3 00 00       	call   c0018d2e <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 c7 a3 00 00       	call   c0018d2e <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 a5 a3 00 00       	call   c0018d2e <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 00 e6 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e600,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 b3 a2 00 00       	call   c0018caa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 8e a2 00 00       	call   c0018caa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 5d 7c 01 00       	call   c0026690 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 1a 7c 01 00       	call   c0026670 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 aa a2 00 00       	call   c0018d2e <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 79 a0 02 c0       	push   0xc002a079
c000eaaf:	e8 ba 44 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 8c a0 02 c0       	push   0xc002a08c
c000ead2:	e8 97 44 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 9d a0 02 c0       	push   0xc002a09d
c000eaf5:	e8 74 44 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 ae a0 02 c0       	push   0xc002a0ae
c000eb18:	e8 51 44 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 bf a0 02 c0       	push   0xc002a0bf
c000eb3b:	e8 2e 44 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 d0 a0 02 c0       	push   0xc002a0d0
c000eb5e:	e8 0b 44 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 e1 a0 02 c0       	push   0xc002a0e1
c000eb81:	e8 e8 43 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 f2 a0 02 c0       	push   0xc002a0f2
c000eba4:	e8 c5 43 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 03 a1 02 c0       	push   0xc002a103
c000ebc7:	e8 a2 43 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 14 a1 02 c0       	push   0xc002a114
c000ebea:	e8 7f 43 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 25 a1 02 c0       	push   0xc002a125
c000ec0d:	e8 5c 43 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 36 a1 02 c0       	push   0xc002a136
c000ec30:	e8 39 43 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 47 a1 02 c0       	push   0xc002a147
c000ec53:	e8 16 43 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 58 a1 02 c0       	push   0xc002a158
c000ec76:	e8 f3 42 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 69 a1 02 c0       	push   0xc002a169
c000ec99:	e8 d0 42 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 7a a1 02 c0       	push   0xc002a17a
c000ecbc:	e8 ad 42 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 8b a1 02 c0       	push   0xc002a18b
c000ecdf:	e8 8a 42 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 9c a1 02 c0       	push   0xc002a19c
c000ed02:	e8 67 42 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 ad a1 02 c0       	push   0xc002a1ad
c000ed21:	e8 48 42 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 70 bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bc70
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 37 42 00 00       	jmp    c0012f6e <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 be a1 02 c0       	push   0xc002a1be
c000ee0a:	e8 00 b8 00 00       	call   c001a60f <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 c4 a1 02 c0       	push   0xc002a1c4
c000ee42:	e8 c8 b7 00 00       	call   c001a60f <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 00 e6 02 c0 04 	test   BYTE PTR ds:0xc002e600,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 24 d5 02 c0 	sete   BYTE PTR ds:0xc002d524
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 49 93 00 00       	call   c00181fe <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 d0 54 00 00       	call   c0014394 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 f2 9e 00 00       	call   c0018de6 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 91 54 00 00       	call   c0014394 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 fb 59 00 00       	call   c001491a <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 61 54 00 00       	call   c0014394 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 11 f1 00 00       	call   c001e066 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 ca a1 02 c0       	push   0xc002a1ca
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 cb 3f 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 db a1 02 c0       	push   0xc002a1db
c000efc0:	e8 4a b6 00 00       	call   c001a60f <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 e8 a1 02 c0       	push   0xc002a1e8
c000efd5:	e8 35 b6 00 00       	call   c001a60f <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 f2 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a1f2
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 1e b6 00 00       	jmp    c001a60f <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 2c a2 02 c0       	push   0xc002a22c
c000f086:	e8 e3 3e 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 f2 e5 02 c0       	mov    ds:0xc002e5f2,eax
c000f0c7:	66 89 15 f0 e5 02 c0 	mov    WORD PTR ds:0xc002e5f0,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 58 ec 00 00       	call   c001de36 <unlockScheduler()>
c000f1de:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 e8 e5 02 c0    	push   DWORD PTR ds:0xc002e5e8
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 e4 94 01 00       	call   c0028710 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 db 94 01 00       	call   c0028710 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 f8 e5 02 c0 ff 07 	mov    WORD PTR ds:0xc002e5f8,0x7ff
c000f323:	a3 fa e5 02 c0       	mov    ds:0xc002e5fa,eax
c000f328:	0f 01 1d f8 e5 02 c0 	lidtd  ds:0xc002e5f8
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 11 28 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 42 2e 00 00       	call   c0012462 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 7e 1e 00 00       	call   c00114bc <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 af 1e 00 00       	call   c00114fc <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 e8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5e8
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 14 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d514
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 14 d5 02 c0       	mov    eax,ds:0xc002d514
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 48 a2 02 c0       	push   0xc002a248
c000f6f4:	e8 75 38 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 14 d5 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d514,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 07 27 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 14 d5 02 c0    	mov    ebp,DWORD PTR ds:0xc002d514
c000f727:	e8 b6 07 00 00       	call   c000fee2 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 29 2c 00 00       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 14 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d514
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 78 a2 02 c0       	push   0xc002a278
c000f7ad:	e8 5d ae 00 00       	call   c001a60f <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 7d a2 02 c0       	push   0xc002a27d
c000f7c3:	e8 47 ae 00 00       	call   c001a60f <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 5b e6 00 00       	call   c001de34 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 4c e6 00 00       	call   c001de36 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 2b 26 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 58 2c 00 00       	call   c0012462 <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 10 26 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 fb 28 00 00       	call   c001211e <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 20 d5 02 c0       	mov    eax,ds:0xc002d520
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 80 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e680,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 20 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d520
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 80 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e680,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 80 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e680,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 80 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e680,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 80 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e680,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 20 d5 02 c0       	mov    eax,ds:0xc002d520
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 9e 0c 00 00       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 80 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e680,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 60 0c 00 00       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 f7 0c 00 00       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 20 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d520
c000fb46:	80 3d 80 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e680,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d 20 d5 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d520,0x8000
c000fba0:	c6 05 80 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e680,0x1
c000fba7:	c7 05 b8 e6 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e6b8,0xc000fa13
c000fbb1:	c7 05 a4 e6 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e6a4,0xc000f89a
c000fbbb:	c7 05 a0 e6 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e6a0,0xc000f8e5
c000fbc5:	c7 05 ac e6 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e6ac,0xc000fa59
c000fbcf:	c7 05 b4 e6 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e6b4,0xc000f963
c000fbd9:	c7 05 a8 e6 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e6a8,0xc000f9c1
c000fbe3:	c7 05 b0 e6 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e6b0,0xc000f9c2
c000fbed:	c7 05 bc e6 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e6bc,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 de 09 00 00       	call   c00105e8 <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 84 a2 02 c0       	push   0xc002a284
c000fc4a:	e8 1f 33 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 3d 04 00 00       	call   c00100a3 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 df 20 00 00       	call   c0011d4a <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 71 bc 02 c0       	push   0xc002bc71
c000fc92:	e8 78 a9 00 00       	call   c001a60f <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d 00 e6 02 c0    	mov    DWORD PTR ds:0xc002e600,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 af 22 00 00       	call   c0011f5c <VAS::VAS()>
c000fcad:	89 1d 68 e7 02 c0    	mov    DWORD PTR ds:0xc002e768,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 9b a2 02 c0 	mov    DWORD PTR [esp],0xc002a29b
c000fcbf:	e8 aa 32 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000fcc4:	e8 00 21 00 00       	call   c0011dc9 <Virt::swappingSetup()>
c000fcc9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd0:	e8 6b fb ff ff       	call   c000f840 <malloc>
c000fcd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd8:	89 c6                	mov    esi,eax
c000fcda:	e8 5b ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdf:	58                   	pop    eax
c000fce0:	89 35 e8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5e8,esi
c000fce6:	5a                   	pop    edx
c000fce7:	56                   	push   esi
c000fce8:	68 b8 a2 02 c0       	push   0xc002a2b8
c000fced:	e8 7c 32 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000fcf2:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c000fcf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	6a 00                	push   0x0
c000fcff:	50                   	push   eax
c000fd00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd03:	83 c4 14             	add    esp,0x14
c000fd06:	53                   	push   ebx
c000fd07:	e8 ea 24 00 00       	call   c00121f6 <VAS::~VAS()>
c000fd0c:	c7 04 24 cb a2 02 c0 	mov    DWORD PTR [esp],0xc002a2cb
c000fd13:	e8 f7 a8 00 00       	call   c001a60f <Krnl::panic(char const*)>
c000fd18:	83 c4 20             	add    esp,0x20
c000fd1b:	5b                   	pop    ebx
c000fd1c:	5e                   	pop    esi
c000fd1d:	5f                   	pop    edi
c000fd1e:	c3                   	ret    

c000fd1f <Phys::allocateDMA(unsigned long)>:
c000fd1f:	55                   	push   ebp
c000fd20:	31 d2                	xor    edx,edx
c000fd22:	57                   	push   edi
c000fd23:	31 ed                	xor    ebp,ebp
c000fd25:	56                   	push   esi
c000fd26:	31 c9                	xor    ecx,ecx
c000fd28:	53                   	push   ebx
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd33:	31 c0                	xor    eax,eax
c000fd35:	c1 ee 0c             	shr    esi,0xc
c000fd38:	eb 17                	jmp    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3a:	85 c9                	test   ecx,ecx
c000fd3c:	75 04                	jne    c000fd42 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3e:	89 d5                	mov    ebp,edx
c000fd40:	89 d0                	mov    eax,edx
c000fd42:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd45:	39 de                	cmp    esi,ebx
c000fd47:	74 20                	je     c000fd69 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd49:	42                   	inc    edx
c000fd4a:	89 d9                	mov    ecx,ebx
c000fd4c:	83 fa 2f             	cmp    edx,0x2f
c000fd4f:	7f 11                	jg     c000fd62 <Phys::allocateDMA(unsigned long)+0x43>
c000fd51:	80 ba 40 e6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd19c0],0x0
c000fd58:	74 e0                	je     c000fd3a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5a:	31 c9                	xor    ecx,ecx
c000fd5c:	42                   	inc    edx
c000fd5d:	83 fa 2f             	cmp    edx,0x2f
c000fd60:	7e ef                	jle    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd62:	5b                   	pop    ebx
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	5e                   	pop    esi
c000fd66:	5f                   	pop    edi
c000fd67:	5d                   	pop    ebp
c000fd68:	c3                   	ret    
c000fd69:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6c:	89 d7                	mov    edi,edx
c000fd6e:	4f                   	dec    edi
c000fd6f:	79 03                	jns    c000fd74 <Phys::allocateDMA(unsigned long)+0x55>
c000fd71:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd74:	c1 ff 04             	sar    edi,0x4
c000fd77:	89 c2                	mov    edx,eax
c000fd79:	c1 fa 04             	sar    edx,0x4
c000fd7c:	39 fa                	cmp    edx,edi
c000fd7e:	75 2f                	jne    c000fdaf <Phys::allocateDMA(unsigned long)+0x90>
c000fd80:	85 db                	test   ebx,ebx
c000fd82:	74 1a                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0x7f>
c000fd84:	be 40 e6 02 c0       	mov    esi,0xc002e640
c000fd89:	8d 90 40 e6 02 c0    	lea    edx,[eax-0x3ffd19c0]
c000fd8f:	f7 d6                	not    esi
c000fd91:	29 c6                	sub    esi,eax
c000fd93:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd96:	42                   	inc    edx
c000fd97:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9a:	39 d9                	cmp    ecx,ebx
c000fd9c:	7f f5                	jg     c000fd93 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9e:	85 ff                	test   edi,edi
c000fda0:	74 13                	je     c000fdb5 <Phys::allocateDMA(unsigned long)+0x96>
c000fda2:	5b                   	pop    ebx
c000fda3:	05 50 20 0c 00       	add    eax,0xc2050
c000fda8:	5e                   	pop    esi
c000fda9:	c1 e0 0c             	shl    eax,0xc
c000fdac:	5f                   	pop    edi
c000fdad:	5d                   	pop    ebp
c000fdae:	c3                   	ret    
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	31 c9                	xor    ecx,ecx
c000fdb3:	eb a7                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb5:	5b                   	pop    ebx
c000fdb6:	c1 e0 0c             	shl    eax,0xc
c000fdb9:	5e                   	pop    esi
c000fdba:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbf:	5f                   	pop    edi
c000fdc0:	5d                   	pop    ebp
c000fdc1:	c3                   	ret    

c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdca:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd0:	c1 e9 0c             	shr    ecx,0xc
c000fdd3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd8:	76 25                	jbe    c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdda:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddf:	c1 e8 0c             	shr    eax,0xc
c000fde2:	8d 50 10             	lea    edx,[eax+0x10]
c000fde5:	85 c9                	test   ecx,ecx
c000fde7:	74 15                	je     c000fdfe <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde9:	8d 82 40 e6 02 c0    	lea    eax,[edx-0x3ffd19c0]
c000fdef:	8d 94 11 40 e6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd19c0]
c000fdf6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf9:	40                   	inc    eax
c000fdfa:	39 d0                	cmp    eax,edx
c000fdfc:	75 f8                	jne    c000fdf6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfe:	c3                   	ret    
c000fdff:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe05:	c1 ea 0c             	shr    edx,0xc
c000fe08:	eb db                	jmp    c000fde5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0a <Phys::setPageState(unsigned long, bool)>:
c000fe0a:	56                   	push   esi
c000fe0b:	ba 01 00 00 00       	mov    edx,0x1
c000fe10:	53                   	push   ebx
c000fe11:	8b 35 18 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d518
c000fe17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1f:	89 c8                	mov    eax,ecx
c000fe21:	83 e1 07             	and    ecx,0x7
c000fe24:	c1 e8 03             	shr    eax,0x3
c000fe27:	d3 e3                	shl    ebx,cl
c000fe29:	01 c6                	add    esi,eax
c000fe2b:	d3 e2                	shl    edx,cl
c000fe2d:	f7 d2                	not    edx
c000fe2f:	20 16                	and    BYTE PTR [esi],dl
c000fe31:	03 05 18 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d518
c000fe37:	08 18                	or     BYTE PTR [eax],bl
c000fe39:	5b                   	pop    ebx
c000fe3a:	5e                   	pop    esi
c000fe3b:	c3                   	ret    

c000fe3c <Phys::getPageState(unsigned long)>:
c000fe3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe40:	8b 15 18 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d518
c000fe46:	89 c8                	mov    eax,ecx
c000fe48:	83 e1 07             	and    ecx,0x7
c000fe4b:	c1 e8 03             	shr    eax,0x3
c000fe4e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe52:	d3 f8                	sar    eax,cl
c000fe54:	83 e0 01             	and    eax,0x1
c000fe57:	c3                   	ret    

c000fe58 <Phys::freePage(unsigned long)>:
c000fe58:	53                   	push   ebx
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe60:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe66:	76 57                	jbe    c000febf <Phys::freePage(unsigned long)+0x67>
c000fe68:	c1 eb 0c             	shr    ebx,0xc
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 cb ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000fe71:	5a                   	pop    edx
c000fe72:	84 c0                	test   al,al
c000fe74:	74 5b                	je     c000fed1 <Phys::freePage(unsigned long)+0x79>
c000fe76:	a1 30 e6 02 c0       	mov    eax,ds:0xc002e630
c000fe7b:	48                   	dec    eax
c000fe7c:	a3 30 e6 02 c0       	mov    ds:0xc002e630,eax
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	c1 e0 02             	shl    eax,0x2
c000fe8a:	99                   	cdq    
c000fe8b:	f7 3d 34 e6 02 c0    	idiv   DWORD PTR ds:0xc002e634
c000fe91:	39 05 2c e6 02 c0    	cmp    DWORD PTR ds:0xc002e62c,eax
c000fe97:	75 13                	jne    c000feac <Phys::freePage(unsigned long)+0x54>
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	6a 00                	push   0x0
c000fe9e:	53                   	push   ebx
c000fe9f:	e8 66 ff ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	83 c4 08             	add    esp,0x8
c000feaa:	5b                   	pop    ebx
c000feab:	c3                   	ret    
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	a3 2c e6 02 c0       	mov    ds:0xc002e62c,eax
c000feb4:	50                   	push   eax
c000feb5:	e8 c2 0a 00 00       	call   c001097c <VgaText::updateRAMUsageDisplay(int)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	eb da                	jmp    c000fe99 <Phys::freePage(unsigned long)+0x41>
c000febf:	68 00 10 00 00       	push   0x1000
c000fec4:	53                   	push   ebx
c000fec5:	e8 f8 fe ff ff       	call   c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>
c000feca:	59                   	pop    ecx
c000fecb:	5b                   	pop    ebx
c000fecc:	83 c4 08             	add    esp,0x8
c000fecf:	5b                   	pop    ebx
c000fed0:	c3                   	ret    
c000fed1:	c7 44 24 10 e6 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a2e6
c000fed9:	83 c4 08             	add    esp,0x8
c000fedc:	5b                   	pop    ebx
c000fedd:	e9 2d a7 00 00       	jmp    c001a60f <Krnl::panic(char const*)>

c000fee2 <Phys::allocatePage()>:
c000fee2:	56                   	push   esi
c000fee3:	53                   	push   ebx
c000fee4:	83 ec 14             	sub    esp,0x14
c000fee7:	8b 35 24 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e624
c000feed:	89 f3                	mov    ebx,esi
c000feef:	eb 0a                	jmp    c000fefb <Phys::allocatePage()+0x19>
c000fef1:	89 1d 24 e6 02 c0    	mov    DWORD PTR ds:0xc002e624,ebx
c000fef7:	39 de                	cmp    esi,ebx
c000fef9:	74 24                	je     c000ff1f <Phys::allocatePage()+0x3d>
c000fefb:	53                   	push   ebx
c000fefc:	e8 3b ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff01:	5a                   	pop    edx
c000ff02:	84 c0                	test   al,al
c000ff04:	74 5e                	je     c000ff64 <Phys::allocatePage()+0x82>
c000ff06:	43                   	inc    ebx
c000ff07:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0d:	75 e2                	jne    c000fef1 <Phys::allocatePage()+0xf>
c000ff0f:	31 db                	xor    ebx,ebx
c000ff11:	c7 05 24 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e624,0x0
c000ff1b:	39 de                	cmp    esi,ebx
c000ff1d:	75 dc                	jne    c000fefb <Phys::allocatePage()+0x19>
c000ff1f:	83 ec 0c             	sub    esp,0xc
c000ff22:	68 10 a3 02 c0       	push   0xc002a310
c000ff27:	e8 42 30 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000ff2c:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff33:	e8 e7 fd ff ff       	call   c000fd1f <Phys::allocateDMA(unsigned long)>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	85 c0                	test   eax,eax
c000ff3d:	0f 85 a8 00 00 00    	jne    c000ffeb <Phys::allocatePage()+0x109>
c000ff43:	83 ec 0c             	sub    esp,0xc
c000ff46:	68 21 a3 02 c0       	push   0xc002a321
c000ff4b:	e8 bf a6 00 00       	call   c001a60f <Krnl::panic(char const*)>
c000ff50:	83 c4 10             	add    esp,0x10
c000ff53:	8b 1d 24 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e624
c000ff59:	53                   	push   ebx
c000ff5a:	e8 dd fe ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff5f:	5a                   	pop    edx
c000ff60:	84 c0                	test   al,al
c000ff62:	75 a2                	jne    c000ff06 <Phys::allocatePage()+0x24>
c000ff64:	6a 01                	push   0x1
c000ff66:	53                   	push   ebx
c000ff67:	e8 9e fe ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000ff6c:	a1 30 e6 02 c0       	mov    eax,ds:0xc002e630
c000ff71:	40                   	inc    eax
c000ff72:	a3 30 e6 02 c0       	mov    ds:0xc002e630,eax
c000ff77:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7a:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7d:	c1 e0 02             	shl    eax,0x2
c000ff80:	99                   	cdq    
c000ff81:	f7 3d 34 e6 02 c0    	idiv   DWORD PTR ds:0xc002e634
c000ff87:	5a                   	pop    edx
c000ff88:	39 05 2c e6 02 c0    	cmp    DWORD PTR ds:0xc002e62c,eax
c000ff8e:	59                   	pop    ecx
c000ff8f:	75 60                	jne    c000fff1 <Phys::allocatePage()+0x10f>
c000ff91:	83 f8 32             	cmp    eax,0x32
c000ff94:	7e 4d                	jle    c000ffe3 <Phys::allocatePage()+0x101>
c000ff96:	80 3d 20 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e620,0x0
c000ff9d:	75 44                	jne    c000ffe3 <Phys::allocatePage()+0x101>
c000ff9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffa4:	85 c0                	test   eax,eax
c000ffa6:	74 3b                	je     c000ffe3 <Phys::allocatePage()+0x101>
c000ffa8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffab:	85 c0                	test   eax,eax
c000ffad:	74 34                	je     c000ffe3 <Phys::allocatePage()+0x101>
c000ffaf:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ffb5:	85 c0                	test   eax,eax
c000ffb7:	74 2a                	je     c000ffe3 <Phys::allocatePage()+0x101>
c000ffb9:	83 ec 0c             	sub    esp,0xc
c000ffbc:	68 fc a2 02 c0       	push   0xc002a2fc
c000ffc1:	e8 a8 2f 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c000ffc6:	83 c4 0c             	add    esp,0xc
c000ffc9:	6a 01                	push   0x1
c000ffcb:	6a 08                	push   0x8
c000ffcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffd2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffd5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ffdb:	e8 98 2c 00 00       	call   c0012c78 <VAS::scanForEviction(int, int)>
c000ffe0:	83 c4 10             	add    esp,0x10
c000ffe3:	a1 24 e6 02 c0       	mov    eax,ds:0xc002e624
c000ffe8:	c1 e0 0c             	shl    eax,0xc
c000ffeb:	83 c4 14             	add    esp,0x14
c000ffee:	5b                   	pop    ebx
c000ffef:	5e                   	pop    esi
c000fff0:	c3                   	ret    
c000fff1:	83 ec 0c             	sub    esp,0xc
c000fff4:	a3 2c e6 02 c0       	mov    ds:0xc002e62c,eax
c000fff9:	50                   	push   eax
c000fffa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fffe:	e8 79 09 00 00       	call   c001097c <VgaText::updateRAMUsageDisplay(int)>
c0010003:	83 c4 10             	add    esp,0x10
c0010006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001000a:	83 f8 32             	cmp    eax,0x32
c001000d:	7e d4                	jle    c000ffe3 <Phys::allocatePage()+0x101>
c001000f:	eb 85                	jmp    c000ff96 <Phys::allocatePage()+0xb4>

c0010011 <Phys::allocateContiguousPages(int)>:
c0010011:	57                   	push   edi
c0010012:	56                   	push   esi
c0010013:	53                   	push   ebx
c0010014:	31 db                	xor    ebx,ebx
c0010016:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001001a:	e8 15 de 00 00       	call   c001de34 <lockScheduler()>
c001001f:	85 db                	test   ebx,ebx
c0010021:	75 11                	jne    c0010034 <Phys::allocateContiguousPages(int)+0x23>
c0010023:	e8 ba fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c0010028:	83 ff 01             	cmp    edi,0x1
c001002b:	89 c6                	mov    esi,eax
c001002d:	74 21                	je     c0010050 <Phys::allocateContiguousPages(int)+0x3f>
c001002f:	bb 01 00 00 00       	mov    ebx,0x1
c0010034:	e8 a9 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c0010039:	89 da                	mov    edx,ebx
c001003b:	c1 e2 0c             	shl    edx,0xc
c001003e:	01 f2                	add    edx,esi
c0010040:	39 c2                	cmp    edx,eax
c0010042:	74 17                	je     c001005b <Phys::allocateContiguousPages(int)+0x4a>
c0010044:	bb 01 00 00 00       	mov    ebx,0x1
c0010049:	89 c6                	mov    esi,eax
c001004b:	83 ff 01             	cmp    edi,0x1
c001004e:	75 e4                	jne    c0010034 <Phys::allocateContiguousPages(int)+0x23>
c0010050:	e8 e1 dd 00 00       	call   c001de36 <unlockScheduler()>
c0010055:	89 f0                	mov    eax,esi
c0010057:	5b                   	pop    ebx
c0010058:	5e                   	pop    esi
c0010059:	5f                   	pop    edi
c001005a:	c3                   	ret    
c001005b:	43                   	inc    ebx
c001005c:	39 fb                	cmp    ebx,edi
c001005e:	75 bf                	jne    c001001f <Phys::allocateContiguousPages(int)+0xe>
c0010060:	e8 d1 dd 00 00       	call   c001de36 <unlockScheduler()>
c0010065:	89 f0                	mov    eax,esi
c0010067:	5b                   	pop    ebx
c0010068:	5e                   	pop    esi
c0010069:	5f                   	pop    edi
c001006a:	c3                   	ret    

c001006b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001006b:	56                   	push   esi
c001006c:	53                   	push   ebx
c001006d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010071:	39 1d 28 e6 02 c0    	cmp    DWORD PTR ds:0xc002e628,ebx
c0010077:	73 06                	jae    c001007f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010079:	89 1d 28 e6 02 c0    	mov    DWORD PTR ds:0xc002e628,ebx
c001007f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010083:	c1 eb 0c             	shr    ebx,0xc
c0010086:	c1 e8 0c             	shr    eax,0xc
c0010089:	39 d8                	cmp    eax,ebx
c001008b:	73 13                	jae    c00100a0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001008d:	6a 00                	push   0x0
c001008f:	8d 70 01             	lea    esi,[eax+0x1]
c0010092:	50                   	push   eax
c0010093:	e8 72 fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c0010098:	5a                   	pop    edx
c0010099:	89 f0                	mov    eax,esi
c001009b:	59                   	pop    ecx
c001009c:	39 f3                	cmp    ebx,esi
c001009e:	75 ed                	jne    c001008d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100a0:	5b                   	pop    ebx
c00100a1:	5e                   	pop    esi
c00100a2:	c3                   	ret    

c00100a3 <Phys::physicalMemorySetup(unsigned int)>:
c00100a3:	55                   	push   ebp
c00100a4:	57                   	push   edi
c00100a5:	56                   	push   esi
c00100a6:	53                   	push   ebx
c00100a7:	31 db                	xor    ebx,ebx
c00100a9:	83 ec 40             	sub    esp,0x40
c00100ac:	6a 30                	push   0x30
c00100ae:	6a 00                	push   0x0
c00100b0:	68 40 e6 02 c0       	push   0xc002e640
c00100b5:	e8 be 06 ff ff       	call   c0000778 <memset>
c00100ba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100be:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100c3:	05 00 10 00 00       	add    eax,0x1000
c00100c8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100cc:	83 c4 10             	add    esp,0x10
c00100cf:	83 ec 08             	sub    esp,0x8
c00100d2:	6a 01                	push   0x1
c00100d4:	53                   	push   ebx
c00100d5:	43                   	inc    ebx
c00100d6:	e8 2f fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100db:	83 c4 10             	add    esp,0x10
c00100de:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100e4:	75 e9                	jne    c00100cf <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100e6:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100ed:	66 85 c0             	test   ax,ax
c00100f0:	0f 84 8e 01 00 00    	je     c0010284 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100fa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010102:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010106:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001010b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001010f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010117:	eb 15                	jmp    c001012e <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010119:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001011d:	83 c3 18             	add    ebx,0x18
c0010120:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010124:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010128:	0f 84 66 01 00 00    	je     c0010294 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001012e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010134:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010137:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001013b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001013f:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010141:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010144:	01 f0                	add    eax,esi
c0010146:	55                   	push   ebp
c0010147:	11 fa                	adc    edx,edi
c0010149:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001014d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010151:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010155:	56                   	push   esi
c0010156:	68 5c a3 02 c0       	push   0xc002a35c
c001015b:	e8 0e 2e 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0010160:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010164:	83 c4 10             	add    esp,0x10
c0010167:	09 f8                	or     eax,edi
c0010169:	0f 85 25 01 00 00    	jne    c0010294 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001016f:	4d                   	dec    ebp
c0010170:	75 a7                	jne    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010172:	ba 00 00 08 00       	mov    edx,0x80000
c0010177:	89 c1                	mov    ecx,eax
c0010179:	39 f2                	cmp    edx,esi
c001017b:	19 f9                	sbb    ecx,edi
c001017d:	0f 82 a7 00 00 00    	jb     c001022a <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010183:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010187:	89 c1                	mov    ecx,eax
c0010189:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001018d:	0f 83 97 00 00 00    	jae    c001022a <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010193:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010198:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001019c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101a0:	39 fa                	cmp    edx,edi
c00101a2:	19 e8                	sbb    eax,ebp
c00101a4:	0f 82 14 01 00 00    	jb     c00102be <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101aa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101ae:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101b2:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101b8:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101bd:	83 d5 ff             	adc    ebp,0xffffffff
c00101c0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101c4:	31 c0                	xor    eax,eax
c00101c6:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101ca:	39 fa                	cmp    edx,edi
c00101cc:	89 c1                	mov    ecx,eax
c00101ce:	19 e9                	sbb    ecx,ebp
c00101d0:	0f 83 43 ff ff ff    	jae    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101d6:	be 00 00 08 00       	mov    esi,0x80000
c00101db:	50                   	push   eax
c00101dc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101e0:	57                   	push   edi
c00101e1:	56                   	push   esi
c00101e2:	68 80 a3 02 c0       	push   0xc002a380
c00101e7:	e8 82 2d 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00101ec:	5a                   	pop    edx
c00101ed:	59                   	pop    ecx
c00101ee:	57                   	push   edi
c00101ef:	56                   	push   esi
c00101f0:	e8 76 fe ff ff       	call   c001006b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101f5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101fd:	83 c4 0c             	add    esp,0xc
c0010200:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010204:	03 05 34 e6 02 c0    	add    eax,DWORD PTR ds:0xc002e634
c001020a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010211:	a3 34 e6 02 c0       	mov    ds:0xc002e634,eax
c0010216:	52                   	push   edx
c0010217:	50                   	push   eax
c0010218:	68 3d a3 02 c0       	push   0xc002a33d
c001021d:	e8 4c 2d 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0010222:	83 c4 10             	add    esp,0x10
c0010225:	e9 ef fe ff ff       	jmp    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001022a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001022e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010232:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010236:	39 ea                	cmp    edx,ebp
c0010238:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001023c:	0f 82 d7 fe ff ff    	jb     c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010242:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010247:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001024b:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001024f:	0f 83 c4 fe ff ff    	jae    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010255:	39 ee                	cmp    esi,ebp
c0010257:	89 f8                	mov    eax,edi
c0010259:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001025d:	0f 83 78 ff ff ff    	jae    c00101db <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010263:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010267:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001026b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001026f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010273:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010277:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001027b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001027f:	e9 57 ff ff ff       	jmp    c00101db <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010284:	83 ec 0c             	sub    esp,0xc
c0010287:	68 2f a3 02 c0       	push   0xc002a32f
c001028c:	e8 7e a3 00 00       	call   c001a60f <Krnl::panic(char const*)>
c0010291:	83 c4 10             	add    esp,0x10
c0010294:	bb 40 01 00 00       	mov    ebx,0x140
c0010299:	83 ec 08             	sub    esp,0x8
c001029c:	6a 00                	push   0x0
c001029e:	53                   	push   ebx
c001029f:	43                   	inc    ebx
c00102a0:	e8 65 fb ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00102a5:	ff 05 34 e6 02 c0    	inc    DWORD PTR ds:0xc002e634
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102b4:	75 e3                	jne    c0010299 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102b6:	83 c4 3c             	add    esp,0x3c
c00102b9:	5b                   	pop    ebx
c00102ba:	5e                   	pop    esi
c00102bb:	5f                   	pop    edi
c00102bc:	5d                   	pop    ebp
c00102bd:	c3                   	ret    
c00102be:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102ce:	e9 d7 fe ff ff       	jmp    c00101aa <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102d3:	90                   	nop

c00102d4 <Pipe::isAtty()>:
c00102d4:	31 c0                	xor    eax,eax
c00102d6:	c3                   	ret    
c00102d7:	90                   	nop

c00102d8 <Pipe::~Pipe()>:
c00102d8:	83 ec 0c             	sub    esp,0xc
c00102db:	ba ec a3 02 c0       	mov    edx,0xc002a3ec
c00102e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102e4:	89 10                	mov    DWORD PTR [eax],edx
c00102e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ea:	83 ec 0c             	sub    esp,0xc
c00102ed:	50                   	push   eax
c00102ee:	e8 37 16 00 00       	call   c001192a <UnixFile::~UnixFile()>
c00102f3:	83 c4 10             	add    esp,0x10
c00102f6:	90                   	nop
c00102f7:	83 c4 0c             	add    esp,0xc
c00102fa:	c3                   	ret    
c00102fb:	90                   	nop

c00102fc <Pipe::~Pipe()>:
c00102fc:	83 ec 0c             	sub    esp,0xc
c00102ff:	83 ec 0c             	sub    esp,0xc
c0010302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010306:	e8 cd ff ff ff       	call   c00102d8 <Pipe::~Pipe()>
c001030b:	83 c4 10             	add    esp,0x10
c001030e:	83 ec 08             	sub    esp,0x8
c0010311:	6a 20                	push   0x20
c0010313:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010317:	e8 72 2b 00 00       	call   c0012e8e <operator delete(void*, unsigned long)>
c001031c:	83 c4 10             	add    esp,0x10
c001031f:	83 c4 0c             	add    esp,0xc
c0010322:	c3                   	ret    
c0010323:	90                   	nop

c0010324 <Pipe::read(unsigned long long, void*, int*)>:
c0010324:	55                   	push   ebp
c0010325:	57                   	push   edi
c0010326:	56                   	push   esi
c0010327:	53                   	push   ebx
c0010328:	83 ec 1c             	sub    esp,0x1c
c001032b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001032f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010333:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010337:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001033a:	89 c8                	mov    eax,ecx
c001033c:	99                   	cdq    
c001033d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010341:	74 19                	je     c001035c <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010343:	39 f9                	cmp    ecx,edi
c0010345:	89 d1                	mov    ecx,edx
c0010347:	19 f1                	sbb    ecx,esi
c0010349:	73 11                	jae    c001035c <Pipe::read(unsigned long long, void*, int*)+0x38>
c001034b:	e8 e4 da 00 00       	call   c001de34 <lockScheduler()>
c0010350:	e8 1b de 00 00       	call   c001e170 <schedule()>
c0010355:	e8 dc da 00 00       	call   c001de36 <unlockScheduler()>
c001035a:	eb db                	jmp    c0010337 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001035c:	39 f8                	cmp    eax,edi
c001035e:	89 d1                	mov    ecx,edx
c0010360:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010364:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010368:	19 f1                	sbb    ecx,esi
c001036a:	73 08                	jae    c0010374 <Pipe::read(unsigned long long, void*, int*)+0x50>
c001036c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010370:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010374:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010377:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001037a:	29 c6                	sub    esi,eax
c001037c:	89 f1                	mov    ecx,esi
c001037e:	c1 f9 1f             	sar    ecx,0x1f
c0010381:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010385:	89 ca                	mov    edx,ecx
c0010387:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001038b:	19 d1                	sbb    ecx,edx
c001038d:	73 04                	jae    c0010393 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001038f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010393:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010397:	89 fd                	mov    ebp,edi
c0010399:	29 f5                	sub    ebp,esi
c001039b:	85 f6                	test   esi,esi
c001039d:	74 12                	je     c00103b1 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001039f:	52                   	push   edx
c00103a0:	56                   	push   esi
c00103a1:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103a4:	50                   	push   eax
c00103a5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103a9:	e8 96 03 ff ff       	call   c0000744 <memcpy>
c00103ae:	83 c4 10             	add    esp,0x10
c00103b1:	85 ed                	test   ebp,ebp
c00103b3:	74 12                	je     c00103c7 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103b5:	50                   	push   eax
c00103b6:	55                   	push   ebp
c00103b7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103ba:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103be:	56                   	push   esi
c00103bf:	e8 80 03 ff ff       	call   c0000744 <memcpy>
c00103c4:	83 c4 10             	add    esp,0x10
c00103c7:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103ca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103cd:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103d0:	99                   	cdq    
c00103d1:	89 f7                	mov    edi,esi
c00103d3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103d7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103db:	c1 ff 1f             	sar    edi,0x1f
c00103de:	57                   	push   edi
c00103df:	56                   	push   esi
c00103e0:	52                   	push   edx
c00103e1:	50                   	push   eax
c00103e2:	e8 25 67 01 00       	call   c0026b0c <__umoddi3>
c00103e7:	83 c4 10             	add    esp,0x10
c00103ea:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103ed:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103f2:	75 10                	jne    c0010404 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103f4:	83 ec 0c             	sub    esp,0xc
c00103f7:	68 a9 a3 02 c0       	push   0xc002a3a9
c00103fc:	e8 0e a2 00 00       	call   c001a60f <Krnl::panic(char const*)>
c0010401:	83 c4 10             	add    esp,0x10
c0010404:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010408:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001040c:	89 10                	mov    DWORD PTR [eax],edx
c001040e:	83 c4 1c             	add    esp,0x1c
c0010411:	31 c0                	xor    eax,eax
c0010413:	5b                   	pop    ebx
c0010414:	5e                   	pop    esi
c0010415:	5f                   	pop    edi
c0010416:	5d                   	pop    ebp
c0010417:	c3                   	ret    

c0010418 <Pipe::write(unsigned long long, void*, int*)>:
c0010418:	55                   	push   ebp
c0010419:	57                   	push   edi
c001041a:	56                   	push   esi
c001041b:	53                   	push   ebx
c001041c:	83 ec 1c             	sub    esp,0x1c
c001041f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010423:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010427:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001042b:	89 04 24             	mov    DWORD PTR [esp],eax
c001042e:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010431:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010434:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010438:	89 de                	mov    esi,ebx
c001043a:	89 df                	mov    edi,ebx
c001043c:	c1 ff 1f             	sar    edi,0x1f
c001043f:	01 c6                	add    esi,eax
c0010441:	89 c8                	mov    eax,ecx
c0010443:	11 d7                	adc    edi,edx
c0010445:	99                   	cdq    
c0010446:	39 f1                	cmp    ecx,esi
c0010448:	89 d0                	mov    eax,edx
c001044a:	19 f8                	sbb    eax,edi
c001044c:	b8 01 00 00 00       	mov    eax,0x1
c0010451:	0f 82 80 00 00 00    	jb     c00104d7 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010457:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001045a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001045d:	01 d8                	add    eax,ebx
c001045f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010463:	99                   	cdq    
c0010464:	f7 f9                	idiv   ecx
c0010466:	29 d1                	sub    ecx,edx
c0010468:	89 d7                	mov    edi,edx
c001046a:	89 c8                	mov    eax,ecx
c001046c:	99                   	cdq    
c001046d:	39 ce                	cmp    esi,ecx
c001046f:	19 d3                	sbb    ebx,edx
c0010471:	bb 00 00 00 00       	mov    ebx,0x0
c0010476:	72 04                	jb     c001047c <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010478:	89 f3                	mov    ebx,esi
c001047a:	29 cb                	sub    ebx,ecx
c001047c:	89 f1                	mov    ecx,esi
c001047e:	29 d9                	sub    ecx,ebx
c0010480:	74 1a                	je     c001049c <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010482:	52                   	push   edx
c0010483:	51                   	push   ecx
c0010484:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010488:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001048c:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001048f:	57                   	push   edi
c0010490:	e8 af 02 ff ff       	call   c0000744 <memcpy>
c0010495:	83 c4 10             	add    esp,0x10
c0010498:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001049c:	85 db                	test   ebx,ebx
c001049e:	74 12                	je     c00104b2 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104a0:	50                   	push   eax
c00104a1:	53                   	push   ebx
c00104a2:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104a6:	51                   	push   ecx
c00104a7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104aa:	e8 95 02 ff ff       	call   c0000744 <memcpy>
c00104af:	83 c4 10             	add    esp,0x10
c00104b2:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104b5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104ba:	75 10                	jne    c00104cc <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104bc:	83 ec 0c             	sub    esp,0xc
c00104bf:	68 c5 a3 02 c0       	push   0xc002a3c5
c00104c4:	e8 46 a1 00 00       	call   c001a60f <Krnl::panic(char const*)>
c00104c9:	83 c4 10             	add    esp,0x10
c00104cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104d0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104d3:	89 38                	mov    DWORD PTR [eax],edi
c00104d5:	31 c0                	xor    eax,eax
c00104d7:	83 c4 1c             	add    esp,0x1c
c00104da:	5b                   	pop    ebx
c00104db:	5e                   	pop    esi
c00104dc:	5f                   	pop    edi
c00104dd:	5d                   	pop    ebp
c00104de:	c3                   	ret    
c00104df:	90                   	nop

c00104e0 <Pipe::Pipe(int)>:
c00104e0:	83 ec 0c             	sub    esp,0xc
c00104e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e7:	83 ec 08             	sub    esp,0x8
c00104ea:	6a 00                	push   0x0
c00104ec:	50                   	push   eax
c00104ed:	e8 56 12 00 00       	call   c0011748 <UnixFile::UnixFile(int)>
c00104f2:	83 c4 10             	add    esp,0x10
c00104f5:	ba ec a3 02 c0       	mov    edx,0xc002a3ec
c00104fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fe:	89 10                	mov    DWORD PTR [eax],edx
c0010500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010504:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010508:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001050b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010521:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010525:	83 ec 0c             	sub    esp,0xc
c0010528:	50                   	push   eax
c0010529:	e8 12 f3 ff ff       	call   c000f840 <malloc>
c001052e:	83 c4 10             	add    esp,0x10
c0010531:	89 c2                	mov    edx,eax
c0010533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010537:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001053a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001053e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010542:	90                   	nop
c0010543:	83 c4 0c             	add    esp,0xc
c0010546:	c3                   	ret    
c0010547:	90                   	nop

c0010548 <VgaText::isAtty()>:
c0010548:	b0 01                	mov    al,0x1
c001054a:	c3                   	ret    
c001054b:	90                   	nop

c001054c <VgaText::~VgaText()>:
c001054c:	83 ec 0c             	sub    esp,0xc
c001054f:	ba a8 a4 02 c0       	mov    edx,0xc002a4a8
c0010554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010558:	89 10                	mov    DWORD PTR [eax],edx
c001055a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055e:	83 ec 0c             	sub    esp,0xc
c0010561:	50                   	push   eax
c0010562:	e8 c3 13 00 00       	call   c001192a <UnixFile::~UnixFile()>
c0010567:	83 c4 10             	add    esp,0x10
c001056a:	90                   	nop
c001056b:	83 c4 0c             	add    esp,0xc
c001056e:	c3                   	ret    
c001056f:	90                   	nop

c0010570 <VgaText::~VgaText()>:
c0010570:	83 ec 0c             	sub    esp,0xc
c0010573:	83 ec 0c             	sub    esp,0xc
c0010576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001057a:	e8 cd ff ff ff       	call   c001054c <VgaText::~VgaText()>
c001057f:	83 c4 10             	add    esp,0x10
c0010582:	83 ec 08             	sub    esp,0x8
c0010585:	68 60 12 00 00       	push   0x1260
c001058a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001058e:	e8 fb 28 00 00       	call   c0012e8e <operator delete(void*, unsigned long)>
c0010593:	83 c4 10             	add    esp,0x10
c0010596:	83 c4 0c             	add    esp,0xc
c0010599:	c3                   	ret    

c001059a <VgaText::read(unsigned long long, void*, int*)>:
c001059a:	83 ec 10             	sub    esp,0x10
c001059d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a9:	e8 62 5d 00 00       	call   c0016310 <readKeyboard(VgaText*, char*, unsigned long)>
c00105ae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105b2:	89 02                	mov    DWORD PTR [edx],eax
c00105b4:	31 c0                	xor    eax,eax
c00105b6:	83 c4 1c             	add    esp,0x1c
c00105b9:	c3                   	ret    

c00105ba <setTerminalScrollLock(bool)>:
c00105ba:	c3                   	ret    

c00105bb <addToTerminalCycle(VgaText*)>:
c00105bb:	8b 15 c0 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6c0
c00105c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105c5:	85 d2                	test   edx,edx
c00105c7:	75 0c                	jne    c00105d5 <addToTerminalCycle(VgaText*)+0x1a>
c00105c9:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105cf:	a3 c0 e6 02 c0       	mov    ds:0xc002e6c0,eax
c00105d4:	c3                   	ret    
c00105d5:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105db:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105e1:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105e7:	c3                   	ret    

c00105e8 <installVgaTextImplementation()>:
c00105e8:	83 ec 10             	sub    esp,0x10
c00105eb:	6a 20                	push   0x20
c00105ed:	6a 00                	push   0x0
c00105ef:	68 a0 e6 02 c0       	push   0xc002e6a0
c00105f4:	e8 7f 01 ff ff       	call   c0000778 <memset>
c00105f9:	83 c4 1c             	add    esp,0x1c
c00105fc:	c3                   	ret    

c00105fd <scrollTerminalScrollLock(int)>:
c00105fd:	c3                   	ret    

c00105fe <VgaText::load()>:
c00105fe:	53                   	push   ebx
c00105ff:	31 c0                	xor    eax,eax
c0010601:	83 ec 58             	sub    esp,0x58
c0010604:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010608:	89 e2                	mov    edx,esp
c001060a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001060e:	40                   	inc    eax
c001060f:	83 f8 50             	cmp    eax,0x50
c0010612:	75 f6                	jne    c001060a <VgaText::load()+0xc>
c0010614:	31 c0                	xor    eax,eax
c0010616:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c001061d:	84 c9                	test   cl,cl
c001061f:	74 06                	je     c0010627 <VgaText::load()+0x29>
c0010621:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010624:	40                   	inc    eax
c0010625:	eb ef                	jmp    c0010616 <VgaText::load()+0x18>
c0010627:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c001062d:	85 c0                	test   eax,eax
c001062f:	74 09                	je     c001063a <VgaText::load()+0x3c>
c0010631:	51                   	push   ecx
c0010632:	51                   	push   ecx
c0010633:	52                   	push   edx
c0010634:	53                   	push   ebx
c0010635:	ff d0                	call   eax
c0010637:	83 c4 10             	add    esp,0x10
c001063a:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010640:	85 c0                	test   eax,eax
c0010642:	74 09                	je     c001064d <VgaText::load()+0x4f>
c0010644:	83 ec 0c             	sub    esp,0xc
c0010647:	53                   	push   ebx
c0010648:	ff d0                	call   eax
c001064a:	83 c4 10             	add    esp,0x10
c001064d:	83 c4 58             	add    esp,0x58
c0010650:	5b                   	pop    ebx
c0010651:	c3                   	ret    

c0010652 <VgaText::updateCursor()>:
c0010652:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010656:	39 05 c4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6c4,eax
c001065c:	75 0c                	jne    c001066a <VgaText::updateCursor()+0x18>
c001065e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010664:	85 c0                	test   eax,eax
c0010666:	74 02                	je     c001066a <VgaText::updateCursor()+0x18>
c0010668:	ff e0                	jmp    eax
c001066a:	c3                   	ret    
c001066b:	90                   	nop

c001066c <VgaText::showCursor(bool)>:
c001066c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010670:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010674:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001067a:	c3                   	ret    
c001067b:	90                   	nop

c001067c <VgaText::disableBlink(bool)>:
c001067c:	56                   	push   esi
c001067d:	53                   	push   ebx
c001067e:	51                   	push   ecx
c001067f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010683:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010687:	39 1d c4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6c4,ebx
c001068d:	75 18                	jne    c00106a7 <VgaText::disableBlink(bool)+0x2b>
c001068f:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010695:	85 c0                	test   eax,eax
c0010697:	74 0e                	je     c00106a7 <VgaText::disableBlink(bool)+0x2b>
c0010699:	89 f1                	mov    ecx,esi
c001069b:	52                   	push   edx
c001069c:	52                   	push   edx
c001069d:	0f b6 d1             	movzx  edx,cl
c00106a0:	52                   	push   edx
c00106a1:	53                   	push   ebx
c00106a2:	ff d0                	call   eax
c00106a4:	83 c4 10             	add    esp,0x10
c00106a7:	89 f0                	mov    eax,esi
c00106a9:	83 f0 01             	xor    eax,0x1
c00106ac:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106b2:	58                   	pop    eax
c00106b3:	5b                   	pop    ebx
c00106b4:	5e                   	pop    esi
c00106b5:	c3                   	ret    

c00106b6 <VgaText::doANSI_SGR(int)>:
c00106b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106be:	85 d2                	test   edx,edx
c00106c0:	75 14                	jne    c00106d6 <VgaText::doANSI_SGR(int)+0x20>
c00106c2:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106c8:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106ce:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106d4:	eb 65                	jmp    c001073b <VgaText::doANSI_SGR(int)+0x85>
c00106d6:	83 fa 07             	cmp    edx,0x7
c00106d9:	75 14                	jne    c00106ef <VgaText::doANSI_SGR(int)+0x39>
c00106db:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106e1:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106e7:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106ed:	eb 4c                	jmp    c001073b <VgaText::doANSI_SGR(int)+0x85>
c00106ef:	83 fa 1b             	cmp    edx,0x1b
c00106f2:	74 ce                	je     c00106c2 <VgaText::doANSI_SGR(int)+0xc>
c00106f4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106f7:	83 f9 07             	cmp    ecx,0x7
c00106fa:	77 09                	ja     c0010705 <VgaText::doANSI_SGR(int)+0x4f>
c00106fc:	8b 14 8d 40 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ac0]
c0010703:	eb 20                	jmp    c0010725 <VgaText::doANSI_SGR(int)+0x6f>
c0010705:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010708:	83 f9 07             	cmp    ecx,0x7
c001070b:	77 09                	ja     c0010716 <VgaText::doANSI_SGR(int)+0x60>
c001070d:	8b 14 8d 40 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ac0]
c0010714:	eb 25                	jmp    c001073b <VgaText::doANSI_SGR(int)+0x85>
c0010716:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010719:	83 f9 07             	cmp    ecx,0x7
c001071c:	77 0e                	ja     c001072c <VgaText::doANSI_SGR(int)+0x76>
c001071e:	8b 14 95 f8 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c08]
c0010725:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001072b:	c3                   	ret    
c001072c:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001072f:	83 f9 07             	cmp    ecx,0x7
c0010732:	77 0d                	ja     c0010741 <VgaText::doANSI_SGR(int)+0x8b>
c0010734:	8b 14 95 d0 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c30]
c001073b:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010741:	c3                   	ret    

c0010742 <VgaText::setDefaultBgColour(VgaColour)>:
c0010742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001074a:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010750:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010756:	c3                   	ret    
c0010757:	90                   	nop

c0010758 <VgaText::setDefaultFgColour(VgaColour)>:
c0010758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001075c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010760:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010766:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001076c:	c3                   	ret    
c001076d:	90                   	nop

c001076e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001076e:	53                   	push   ebx
c001076f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010773:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010777:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001077b:	51                   	push   ecx
c001077c:	e8 c1 ff ff ff       	call   c0010742 <VgaText::setDefaultBgColour(VgaColour)>
c0010781:	58                   	pop    eax
c0010782:	5a                   	pop    edx
c0010783:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010787:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001078b:	5b                   	pop    ebx
c001078c:	eb ca                	jmp    c0010758 <VgaText::setDefaultFgColour(VgaColour)>

c001078e <VgaText::combineColours(unsigned char, unsigned char)>:
c001078e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010792:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010797:	83 e0 0f             	and    eax,0xf
c001079a:	c1 e2 04             	shl    edx,0x4
c001079d:	09 d0                	or     eax,edx
c001079f:	c3                   	ret    

c00107a0 <VgaText::scrollScreen()>:
c00107a0:	57                   	push   edi
c00107a1:	56                   	push   esi
c00107a2:	be 01 00 00 00       	mov    esi,0x1
c00107a7:	53                   	push   ebx
c00107a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107ac:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107b2:	31 ff                	xor    edi,edi
c00107b4:	01 d9                	add    ecx,ebx
c00107b6:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107b9:	83 fe 17             	cmp    esi,0x17
c00107bc:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107c2:	75 28                	jne    c00107ec <VgaText::scrollScreen()+0x4c>
c00107c4:	f7 c7 01 00 00 00    	test   edi,0x1
c00107ca:	74 1c                	je     c00107e8 <VgaText::scrollScreen()+0x48>
c00107cc:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107d3:	50                   	push   eax
c00107d4:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107db:	50                   	push   eax
c00107dc:	e8 ad ff ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c00107e1:	5a                   	pop    edx
c00107e2:	5a                   	pop    edx
c00107e3:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107e6:	eb 04                	jmp    c00107ec <VgaText::scrollScreen()+0x4c>
c00107e8:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107ec:	47                   	inc    edi
c00107ed:	41                   	inc    ecx
c00107ee:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107f4:	75 c0                	jne    c00107b6 <VgaText::scrollScreen()+0x16>
c00107f6:	46                   	inc    esi
c00107f7:	83 fe 18             	cmp    esi,0x18
c00107fa:	75 b0                	jne    c00107ac <VgaText::scrollScreen()+0xc>
c00107fc:	39 1d c4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6c4,ebx
c0010802:	75 24                	jne    c0010828 <VgaText::scrollScreen()+0x88>
c0010804:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001080b:	74 08                	je     c0010815 <VgaText::scrollScreen()+0x75>
c001080d:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010813:	eb 13                	jmp    c0010828 <VgaText::scrollScreen()+0x88>
c0010815:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001081b:	85 c0                	test   eax,eax
c001081d:	74 09                	je     c0010828 <VgaText::scrollScreen()+0x88>
c001081f:	83 ec 0c             	sub    esp,0xc
c0010822:	53                   	push   ebx
c0010823:	ff d0                	call   eax
c0010825:	83 c4 10             	add    esp,0x10
c0010828:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001082c:	5b                   	pop    ebx
c001082d:	5e                   	pop    esi
c001082e:	5f                   	pop    edi
c001082f:	e9 1e fe ff ff       	jmp    c0010652 <VgaText::updateCursor()>

c0010834 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010834:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010839:	c1 e0 08             	shl    eax,0x8
c001083c:	89 c2                	mov    edx,eax
c001083e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010843:	09 d0                	or     eax,edx
c0010845:	c3                   	ret    

c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010846:	53                   	push   ebx
c0010847:	83 ec 08             	sub    esp,0x8
c001084a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001084e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010853:	50                   	push   eax
c0010854:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010859:	50                   	push   eax
c001085a:	e8 2f ff ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c001085f:	5a                   	pop    edx
c0010860:	0f b6 c0             	movzx  eax,al
c0010863:	5b                   	pop    ebx
c0010864:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010869:	50                   	push   eax
c001086a:	53                   	push   ebx
c001086b:	e8 c4 ff ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010870:	5a                   	pop    edx
c0010871:	5a                   	pop    edx
c0010872:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010878:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001087c:	0f b7 d2             	movzx  edx,dx
c001087f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010884:	39 0d c4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6c4,ecx
c001088a:	75 14                	jne    c00108a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001088c:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010892:	85 c0                	test   eax,eax
c0010894:	74 0a                	je     c00108a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010896:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001089a:	83 c4 08             	add    esp,0x8
c001089d:	5b                   	pop    ebx
c001089e:	ff e0                	jmp    eax
c00108a0:	83 c4 08             	add    esp,0x8
c00108a3:	5b                   	pop    ebx
c00108a4:	c3                   	ret    
c00108a5:	90                   	nop

c00108a6 <VgaText::getCursorX()>:
c00108a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108aa:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108b0:	c3                   	ret    
c00108b1:	90                   	nop

c00108b2 <VgaText::getCursorY()>:
c00108b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108b6:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108bc:	c3                   	ret    
c00108bd:	90                   	nop

c00108be <VgaText::setCursor(int, int)>:
c00108be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108c6:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108d0:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108d6:	e9 77 fd ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c00108db:	90                   	nop

c00108dc <VgaText::setCursorX(int)>:
c00108dc:	83 ec 10             	sub    esp,0x10
c00108df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108e3:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ed:	50                   	push   eax
c00108ee:	e8 cb ff ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c00108f3:	83 c4 1c             	add    esp,0x1c
c00108f6:	c3                   	ret    
c00108f7:	90                   	nop

c00108f8 <VgaText::setCursorY(int)>:
c00108f8:	83 ec 10             	sub    esp,0x10
c00108fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010903:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010909:	50                   	push   eax
c001090a:	e8 af ff ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c001090f:	83 c4 1c             	add    esp,0x1c
c0010912:	c3                   	ret    
c0010913:	90                   	nop

c0010914 <VgaText::incrementCursor(bool)>:
c0010914:	56                   	push   esi
c0010915:	53                   	push   ebx
c0010916:	51                   	push   ecx
c0010917:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001091b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001091f:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010925:	40                   	inc    eax
c0010926:	83 f8 50             	cmp    eax,0x50
c0010929:	74 08                	je     c0010933 <VgaText::incrementCursor(bool)+0x1f>
c001092b:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010931:	eb 33                	jmp    c0010966 <VgaText::incrementCursor(bool)+0x52>
c0010933:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010939:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010943:	8d 50 01             	lea    edx,[eax+0x1]
c0010946:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001094c:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010952:	75 12                	jne    c0010966 <VgaText::incrementCursor(bool)+0x52>
c0010954:	83 ec 0c             	sub    esp,0xc
c0010957:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001095d:	53                   	push   ebx
c001095e:	e8 3d fe ff ff       	call   c00107a0 <VgaText::scrollScreen()>
c0010963:	83 c4 10             	add    esp,0x10
c0010966:	89 f0                	mov    eax,esi
c0010968:	84 c0                	test   al,al
c001096a:	74 0c                	je     c0010978 <VgaText::incrementCursor(bool)+0x64>
c001096c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010970:	5a                   	pop    edx
c0010971:	5b                   	pop    ebx
c0010972:	5e                   	pop    esi
c0010973:	e9 da fc ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c0010978:	58                   	pop    eax
c0010979:	5b                   	pop    ebx
c001097a:	5e                   	pop    esi
c001097b:	c3                   	ret    

c001097c <VgaText::updateRAMUsageDisplay(int)>:
c001097c:	56                   	push   esi
c001097d:	8b 35 20 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d520
c0010983:	53                   	push   ebx
c0010984:	bb 0a 00 00 00       	mov    ebx,0xa
c0010989:	6a 0f                	push   0xf
c001098b:	6a 00                	push   0x0
c001098d:	e8 fc fd ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c0010992:	5a                   	pop    edx
c0010993:	59                   	pop    ecx
c0010994:	0f b6 c8             	movzx  ecx,al
c0010997:	51                   	push   ecx
c0010998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001099c:	99                   	cdq    
c001099d:	f7 fb                	idiv   ebx
c001099f:	89 d3                	mov    ebx,edx
c00109a1:	83 c0 30             	add    eax,0x30
c00109a4:	83 c3 30             	add    ebx,0x30
c00109a7:	0f be c0             	movsx  eax,al
c00109aa:	0f b6 db             	movzx  ebx,bl
c00109ad:	50                   	push   eax
c00109ae:	e8 81 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c00109b3:	5a                   	pop    edx
c00109b4:	5a                   	pop    edx
c00109b5:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109bc:	51                   	push   ecx
c00109bd:	53                   	push   ebx
c00109be:	e8 71 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c3:	5b                   	pop    ebx
c00109c4:	5a                   	pop    edx
c00109c5:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109cc:	51                   	push   ecx
c00109cd:	6a 25                	push   0x25
c00109cf:	e8 60 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c00109d4:	59                   	pop    ecx
c00109d5:	5b                   	pop    ebx
c00109d6:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109dd:	5b                   	pop    ebx
c00109de:	5e                   	pop    esi
c00109df:	c3                   	ret    

c00109e0 <VgaText::updateDiskUsage()>:
c00109e0:	55                   	push   ebp
c00109e1:	bd 10 27 00 00       	mov    ebp,0x2710
c00109e6:	57                   	push   edi
c00109e7:	8b 3d 20 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d520
c00109ed:	56                   	push   esi
c00109ee:	53                   	push   ebx
c00109ef:	6a 0f                	push   0xf
c00109f1:	6a 00                	push   0x0
c00109f3:	e8 96 fd ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c00109f8:	5a                   	pop    edx
c00109f9:	0f b6 d8             	movzx  ebx,al
c00109fc:	59                   	pop    ecx
c00109fd:	8b 35 48 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032948
c0010a03:	53                   	push   ebx
c0010a04:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a09:	89 f0                	mov    eax,esi
c0010a0b:	99                   	cdq    
c0010a0c:	f7 fd                	idiv   ebp
c0010a0e:	99                   	cdq    
c0010a0f:	f7 f9                	idiv   ecx
c0010a11:	8d 42 30             	lea    eax,[edx+0x30]
c0010a14:	0f b6 c0             	movzx  eax,al
c0010a17:	50                   	push   eax
c0010a18:	e8 17 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a1d:	5d                   	pop    ebp
c0010a1e:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a23:	5a                   	pop    edx
c0010a24:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a28:	53                   	push   ebx
c0010a29:	89 f0                	mov    eax,esi
c0010a2b:	99                   	cdq    
c0010a2c:	f7 fd                	idiv   ebp
c0010a2e:	99                   	cdq    
c0010a2f:	f7 f9                	idiv   ecx
c0010a31:	8d 42 30             	lea    eax,[edx+0x30]
c0010a34:	0f b6 c0             	movzx  eax,al
c0010a37:	50                   	push   eax
c0010a38:	e8 f7 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a3d:	5d                   	pop    ebp
c0010a3e:	bd 64 00 00 00       	mov    ebp,0x64
c0010a43:	5a                   	pop    edx
c0010a44:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a4b:	53                   	push   ebx
c0010a4c:	89 f0                	mov    eax,esi
c0010a4e:	99                   	cdq    
c0010a4f:	f7 fd                	idiv   ebp
c0010a51:	99                   	cdq    
c0010a52:	f7 f9                	idiv   ecx
c0010a54:	8d 42 30             	lea    eax,[edx+0x30]
c0010a57:	0f b6 c0             	movzx  eax,al
c0010a5a:	50                   	push   eax
c0010a5b:	e8 d4 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a60:	5d                   	pop    ebp
c0010a61:	5a                   	pop    edx
c0010a62:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a69:	53                   	push   ebx
c0010a6a:	89 f0                	mov    eax,esi
c0010a6c:	99                   	cdq    
c0010a6d:	f7 f9                	idiv   ecx
c0010a6f:	89 d6                	mov    esi,edx
c0010a71:	99                   	cdq    
c0010a72:	f7 f9                	idiv   ecx
c0010a74:	8d 42 30             	lea    eax,[edx+0x30]
c0010a77:	0f b6 c0             	movzx  eax,al
c0010a7a:	50                   	push   eax
c0010a7b:	e8 b4 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a80:	5d                   	pop    ebp
c0010a81:	5a                   	pop    edx
c0010a82:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a89:	53                   	push   ebx
c0010a8a:	8d 46 30             	lea    eax,[esi+0x30]
c0010a8d:	0f b6 f0             	movzx  esi,al
c0010a90:	56                   	push   esi
c0010a91:	e8 9e fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a96:	5e                   	pop    esi
c0010a97:	8b 35 44 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032944
c0010a9d:	5d                   	pop    ebp
c0010a9e:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010aa5:	bd 10 27 00 00       	mov    ebp,0x2710
c0010aaa:	53                   	push   ebx
c0010aab:	89 f0                	mov    eax,esi
c0010aad:	99                   	cdq    
c0010aae:	f7 fd                	idiv   ebp
c0010ab0:	99                   	cdq    
c0010ab1:	f7 f9                	idiv   ecx
c0010ab3:	8d 42 30             	lea    eax,[edx+0x30]
c0010ab6:	0f b6 c0             	movzx  eax,al
c0010ab9:	50                   	push   eax
c0010aba:	e8 75 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010abf:	5a                   	pop    edx
c0010ac0:	5d                   	pop    ebp
c0010ac1:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ac8:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010acd:	53                   	push   ebx
c0010ace:	89 f0                	mov    eax,esi
c0010ad0:	99                   	cdq    
c0010ad1:	f7 fd                	idiv   ebp
c0010ad3:	99                   	cdq    
c0010ad4:	f7 f9                	idiv   ecx
c0010ad6:	8d 42 30             	lea    eax,[edx+0x30]
c0010ad9:	0f b6 c0             	movzx  eax,al
c0010adc:	50                   	push   eax
c0010add:	e8 52 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ae2:	5a                   	pop    edx
c0010ae3:	5d                   	pop    ebp
c0010ae4:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010aeb:	bd 64 00 00 00       	mov    ebp,0x64
c0010af0:	53                   	push   ebx
c0010af1:	89 f0                	mov    eax,esi
c0010af3:	99                   	cdq    
c0010af4:	f7 fd                	idiv   ebp
c0010af6:	99                   	cdq    
c0010af7:	f7 f9                	idiv   ecx
c0010af9:	83 c2 30             	add    edx,0x30
c0010afc:	0f b6 d2             	movzx  edx,dl
c0010aff:	52                   	push   edx
c0010b00:	e8 2f fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b05:	5a                   	pop    edx
c0010b06:	5d                   	pop    ebp
c0010b07:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b0e:	53                   	push   ebx
c0010b0f:	89 f0                	mov    eax,esi
c0010b11:	99                   	cdq    
c0010b12:	f7 f9                	idiv   ecx
c0010b14:	89 d6                	mov    esi,edx
c0010b16:	99                   	cdq    
c0010b17:	f7 f9                	idiv   ecx
c0010b19:	8d 42 30             	lea    eax,[edx+0x30]
c0010b1c:	0f b6 c0             	movzx  eax,al
c0010b1f:	50                   	push   eax
c0010b20:	e8 0f fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b25:	5a                   	pop    edx
c0010b26:	59                   	pop    ecx
c0010b27:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b2e:	53                   	push   ebx
c0010b2f:	8d 46 30             	lea    eax,[esi+0x30]
c0010b32:	0f b6 f0             	movzx  esi,al
c0010b35:	56                   	push   esi
c0010b36:	e8 f9 fc ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b3b:	5b                   	pop    ebx
c0010b3c:	5e                   	pop    esi
c0010b3d:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b44:	5b                   	pop    ebx
c0010b45:	5e                   	pop    esi
c0010b46:	5f                   	pop    edi
c0010b47:	5d                   	pop    ebp
c0010b48:	c3                   	ret    
c0010b49:	90                   	nop

c0010b4a <VgaText::updateTitle()>:
c0010b4a:	53                   	push   ebx
c0010b4b:	31 c0                	xor    eax,eax
c0010b4d:	83 ec 58             	sub    esp,0x58
c0010b50:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b54:	89 e1                	mov    ecx,esp
c0010b56:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b5a:	40                   	inc    eax
c0010b5b:	83 f8 50             	cmp    eax,0x50
c0010b5e:	75 f6                	jne    c0010b56 <VgaText::updateTitle()+0xc>
c0010b60:	31 c0                	xor    eax,eax
c0010b62:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b69:	84 db                	test   bl,bl
c0010b6b:	74 06                	je     c0010b73 <VgaText::updateTitle()+0x29>
c0010b6d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b70:	40                   	inc    eax
c0010b71:	eb ef                	jmp    c0010b62 <VgaText::updateTitle()+0x18>
c0010b73:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b79:	85 c0                	test   eax,eax
c0010b7b:	74 09                	je     c0010b86 <VgaText::updateTitle()+0x3c>
c0010b7d:	53                   	push   ebx
c0010b7e:	53                   	push   ebx
c0010b7f:	51                   	push   ecx
c0010b80:	52                   	push   edx
c0010b81:	ff d0                	call   eax
c0010b83:	83 c4 10             	add    esp,0x10
c0010b86:	e8 55 fe ff ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c0010b8b:	83 c4 58             	add    esp,0x58
c0010b8e:	5b                   	pop    ebx
c0010b8f:	c3                   	ret    

c0010b90 <VgaText::setTitleTextColour(VgaColour)>:
c0010b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b98:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b9e:	eb aa                	jmp    c0010b4a <VgaText::updateTitle()>

c0010ba0 <VgaText::setTitleColour(VgaColour)>:
c0010ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ba4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ba8:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010bae:	eb 9a                	jmp    c0010b4a <VgaText::updateTitle()>

c0010bb0 <VgaText::setTitle(char*)>:
c0010bb0:	53                   	push   ebx
c0010bb1:	83 ec 10             	sub    esp,0x10
c0010bb4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bbc:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bc2:	50                   	push   eax
c0010bc3:	e8 6c fc fe ff       	call   c0000834 <strcpy>
c0010bc8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bcc:	83 c4 18             	add    esp,0x18
c0010bcf:	5b                   	pop    ebx
c0010bd0:	e9 75 ff ff ff       	jmp    c0010b4a <VgaText::updateTitle()>
c0010bd5:	90                   	nop

c0010bd6 <VgaText::decrementCursor(bool)>:
c0010bd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bda:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bde:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010be4:	85 c0                	test   eax,eax
c0010be6:	74 07                	je     c0010bef <VgaText::decrementCursor(bool)+0x19>
c0010be8:	48                   	dec    eax
c0010be9:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010bef:	84 c9                	test   cl,cl
c0010bf1:	74 09                	je     c0010bfc <VgaText::decrementCursor(bool)+0x26>
c0010bf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010bf7:	e9 56 fa ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c0010bfc:	c3                   	ret    
c0010bfd:	90                   	nop

c0010bfe <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bfe:	53                   	push   ebx
c0010bff:	83 ec 08             	sub    esp,0x8
c0010c02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c0a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c0e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c12:	3c 07                	cmp    al,0x7
c0010c14:	75 2a                	jne    c0010c40 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c16:	a1 70 e7 02 c0       	mov    eax,ds:0xc002e770
c0010c1b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c23:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c2b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c37:	83 c4 08             	add    esp,0x8
c0010c3a:	5b                   	pop    ebx
c0010c3b:	e9 2c 31 00 00       	jmp    c0013d6c <Buzzer::beep(int, int, bool)>
c0010c40:	3c 0d                	cmp    al,0xd
c0010c42:	75 0c                	jne    c0010c50 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c44:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c4e:	eb 3b                	jmp    c0010c8b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c50:	3c 0a                	cmp    al,0xa
c0010c52:	75 40                	jne    c0010c94 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c54:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c5a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c64:	8d 50 01             	lea    edx,[eax+0x1]
c0010c67:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c6d:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c73:	75 12                	jne    c0010c87 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c75:	83 ec 0c             	sub    esp,0xc
c0010c78:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c7e:	53                   	push   ebx
c0010c7f:	e8 1c fb ff ff       	call   c00107a0 <VgaText::scrollScreen()>
c0010c84:	83 c4 10             	add    esp,0x10
c0010c87:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c8b:	83 c4 08             	add    esp,0x8
c0010c8e:	5b                   	pop    ebx
c0010c8f:	e9 be f9 ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c0010c94:	3c 08                	cmp    al,0x8
c0010c96:	75 31                	jne    c0010cc9 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c98:	50                   	push   eax
c0010c99:	50                   	push   eax
c0010c9a:	6a 01                	push   0x1
c0010c9c:	53                   	push   ebx
c0010c9d:	e8 34 ff ff ff       	call   c0010bd6 <VgaText::decrementCursor(bool)>
c0010ca2:	5a                   	pop    edx
c0010ca3:	59                   	pop    ecx
c0010ca4:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010caa:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cb0:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010cb6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cbc:	6a 20                	push   0x20
c0010cbe:	53                   	push   ebx
c0010cbf:	e8 82 fb ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cc4:	83 c4 28             	add    esp,0x28
c0010cc7:	5b                   	pop    ebx
c0010cc8:	c3                   	ret    
c0010cc9:	83 ec 08             	sub    esp,0x8
c0010ccc:	0f be c0             	movsx  eax,al
c0010ccf:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cd5:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cdb:	51                   	push   ecx
c0010cdc:	52                   	push   edx
c0010cdd:	50                   	push   eax
c0010cde:	53                   	push   ebx
c0010cdf:	e8 62 fb ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ce4:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010ce8:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010cf0:	83 c4 28             	add    esp,0x28
c0010cf3:	5b                   	pop    ebx
c0010cf4:	e9 1b fc ff ff       	jmp    c0010914 <VgaText::incrementCursor(bool)>
c0010cf9:	90                   	nop

c0010cfa <VgaText::isShowingCursor()>:
c0010cfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cfe:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d04:	c3                   	ret    
c0010d05:	90                   	nop

c0010d06 <VgaText::isBlinkDisabled()>:
c0010d06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d0a:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d10:	83 f0 01             	xor    eax,0x1
c0010d13:	c3                   	ret    

c0010d14 <VgaText::setCursorHeight(int)>:
c0010d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d1c:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d22:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d2d:	e9 3a f9 ff ff       	jmp    c001066c <VgaText::showCursor(bool)>

c0010d32 <VgaText::getCursorHeight()>:
c0010d32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d36:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d3c:	c3                   	ret    

c0010d3d <setActiveTerminal(VgaText*)>:
c0010d3d:	53                   	push   ebx
c0010d3e:	83 ec 08             	sub    esp,0x8
c0010d41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d45:	85 db                	test   ebx,ebx
c0010d47:	75 11                	jne    c0010d5a <setActiveTerminal(VgaText*)+0x1d>
c0010d49:	c7 44 24 10 00 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a400
c0010d51:	83 c4 08             	add    esp,0x8
c0010d54:	5b                   	pop    ebx
c0010d55:	e9 b5 98 00 00       	jmp    c001a60f <Krnl::panic(char const*)>
c0010d5a:	50                   	push   eax
c0010d5b:	50                   	push   eax
c0010d5c:	53                   	push   ebx
c0010d5d:	68 0e a4 02 c0       	push   0xc002a40e
c0010d62:	e8 07 22 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0010d67:	a1 c4 e6 02 c0       	mov    eax,ds:0xc002e6c4
c0010d6c:	83 c4 10             	add    esp,0x10
c0010d6f:	85 c0                	test   eax,eax
c0010d71:	74 0c                	je     c0010d7f <setActiveTerminal(VgaText*)+0x42>
c0010d73:	83 ec 0c             	sub    esp,0xc
c0010d76:	50                   	push   eax
c0010d77:	e8 d6 f8 ff ff       	call   c0010652 <VgaText::updateCursor()>
c0010d7c:	83 c4 10             	add    esp,0x10
c0010d7f:	89 1d c4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6c4,ebx
c0010d85:	51                   	push   ecx
c0010d86:	51                   	push   ecx
c0010d87:	53                   	push   ebx
c0010d88:	68 26 a4 02 c0       	push   0xc002a426
c0010d8d:	e8 dc 21 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0010d92:	83 c4 0c             	add    esp,0xc
c0010d95:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d9b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010da1:	53                   	push   ebx
c0010da2:	e8 17 fb ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c0010da7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010daa:	e8 57 ff ff ff       	call   c0010d06 <VgaText::isBlinkDisabled()>
c0010daf:	5a                   	pop    edx
c0010db0:	0f b6 c0             	movzx  eax,al
c0010db3:	59                   	pop    ecx
c0010db4:	50                   	push   eax
c0010db5:	53                   	push   ebx
c0010db6:	e8 c1 f8 ff ff       	call   c001067c <VgaText::disableBlink(bool)>
c0010dbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dbe:	e8 6f ff ff ff       	call   c0010d32 <VgaText::getCursorHeight()>
c0010dc3:	5a                   	pop    edx
c0010dc4:	59                   	pop    ecx
c0010dc5:	50                   	push   eax
c0010dc6:	53                   	push   ebx
c0010dc7:	e8 48 ff ff ff       	call   c0010d14 <VgaText::setCursorHeight(int)>
c0010dcc:	83 c4 10             	add    esp,0x10
c0010dcf:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dd6:	75 0a                	jne    c0010de2 <setActiveTerminal(VgaText*)+0xa5>
c0010dd8:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010de2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010de6:	83 c4 08             	add    esp,0x8
c0010de9:	5b                   	pop    ebx
c0010dea:	e9 0f f8 ff ff       	jmp    c00105fe <VgaText::load()>

c0010def <doTerminalCycle()>:
c0010def:	83 ec 18             	sub    esp,0x18
c0010df2:	a1 c0 e6 02 c0       	mov    eax,ds:0xc002e6c0
c0010df7:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010dfd:	50                   	push   eax
c0010dfe:	a3 c0 e6 02 c0       	mov    ds:0xc002e6c0,eax
c0010e03:	e8 35 ff ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c0010e08:	83 c4 1c             	add    esp,0x1c
c0010e0b:	c3                   	ret    

c0010e0c <VgaText::doUpdate()>:
c0010e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e10:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e16:	85 c0                	test   eax,eax
c0010e18:	74 02                	je     c0010e1c <VgaText::doUpdate()+0x10>
c0010e1a:	ff e0                	jmp    eax
c0010e1c:	c3                   	ret    
c0010e1d:	90                   	nop

c0010e1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e1e:	55                   	push   ebp
c0010e1f:	57                   	push   edi
c0010e20:	56                   	push   esi
c0010e21:	53                   	push   ebx
c0010e22:	83 ec 1c             	sub    esp,0x1c
c0010e25:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e29:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e2e:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e35:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e38:	50                   	push   eax
c0010e39:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e3e:	50                   	push   eax
c0010e3f:	e8 4a f9 ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c0010e44:	59                   	pop    ecx
c0010e45:	0f b6 c0             	movzx  eax,al
c0010e48:	5b                   	pop    ebx
c0010e49:	31 c9                	xor    ecx,ecx
c0010e4b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e53:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e57:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e61:	0f b7 db             	movzx  ebx,bx
c0010e64:	01 db                	add    ebx,ebx
c0010e66:	01 fb                	add    ebx,edi
c0010e68:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e6b:	84 c0                	test   al,al
c0010e6d:	0f 84 38 01 00 00    	je     c0010fab <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e73:	3c 0d                	cmp    al,0xd
c0010e75:	75 0f                	jne    c0010e86 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e77:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e81:	e9 1f 01 00 00       	jmp    c0010fa5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e86:	3c 0a                	cmp    al,0xa
c0010e88:	75 5b                	jne    c0010ee5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e8a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e90:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e9a:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e9d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010ea3:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010ea9:	75 12                	jne    c0010ebd <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010eab:	83 ec 0c             	sub    esp,0xc
c0010eae:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010eb4:	55                   	push   ebp
c0010eb5:	e8 e6 f8 ff ff       	call   c00107a0 <VgaText::scrollScreen()>
c0010eba:	83 c4 10             	add    esp,0x10
c0010ebd:	83 ec 0c             	sub    esp,0xc
c0010ec0:	55                   	push   ebp
c0010ec1:	e8 8c f7 ff ff       	call   c0010652 <VgaText::updateCursor()>
c0010ec6:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ece:	83 c4 10             	add    esp,0x10
c0010ed1:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ed7:	31 c9                	xor    ecx,ecx
c0010ed9:	0f b7 db             	movzx  ebx,bx
c0010edc:	01 db                	add    ebx,ebx
c0010ede:	01 fb                	add    ebx,edi
c0010ee0:	e9 c0 00 00 00       	jmp    c0010fa5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ee5:	3c 08                	cmp    al,0x8
c0010ee7:	75 4e                	jne    c0010f37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ee9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010eed:	53                   	push   ebx
c0010eee:	53                   	push   ebx
c0010eef:	6a 01                	push   0x1
c0010ef1:	55                   	push   ebp
c0010ef2:	e8 df fc ff ff       	call   c0010bd6 <VgaText::decrementCursor(bool)>
c0010ef7:	58                   	pop    eax
c0010ef8:	5a                   	pop    edx
c0010ef9:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010eff:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f05:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f0b:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f11:	6a 20                	push   0x20
c0010f13:	55                   	push   ebp
c0010f14:	e8 2d f9 ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f19:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f21:	83 c4 20             	add    esp,0x20
c0010f24:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f2a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f2e:	0f b7 db             	movzx  ebx,bx
c0010f31:	01 db                	add    ebx,ebx
c0010f33:	01 fb                	add    ebx,edi
c0010f35:	eb 6e                	jmp    c0010fa5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f37:	51                   	push   ecx
c0010f38:	51                   	push   ecx
c0010f39:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f3d:	50                   	push   eax
c0010f3e:	e8 f1 f8 ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f43:	83 c4 10             	add    esp,0x10
c0010f46:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f49:	39 2d c4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6c4,ebp
c0010f4f:	75 2a                	jne    c0010f7b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f51:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f57:	85 c0                	test   eax,eax
c0010f59:	74 20                	je     c0010f7b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f5b:	52                   	push   edx
c0010f5c:	52                   	push   edx
c0010f5d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f63:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f69:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f71:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f74:	51                   	push   ecx
c0010f75:	55                   	push   ebp
c0010f76:	ff d0                	call   eax
c0010f78:	83 c4 20             	add    esp,0x20
c0010f7b:	83 c3 02             	add    ebx,0x2
c0010f7e:	50                   	push   eax
c0010f7f:	50                   	push   eax
c0010f80:	6a 00                	push   0x0
c0010f82:	55                   	push   ebp
c0010f83:	e8 8c f9 ff ff       	call   c0010914 <VgaText::incrementCursor(bool)>
c0010f88:	83 c4 10             	add    esp,0x10
c0010f8b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f92:	75 0f                	jne    c0010fa3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f94:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f9c:	0f b7 db             	movzx  ebx,bx
c0010f9f:	01 db                	add    ebx,ebx
c0010fa1:	01 fb                	add    ebx,edi
c0010fa3:	b1 01                	mov    cl,0x1
c0010fa5:	46                   	inc    esi
c0010fa6:	e9 bd fe ff ff       	jmp    c0010e68 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010fab:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010faf:	83 ec 0c             	sub    esp,0xc
c0010fb2:	55                   	push   ebp
c0010fb3:	e8 9a f6 ff ff       	call   c0010652 <VgaText::updateCursor()>
c0010fb8:	83 c4 10             	add    esp,0x10
c0010fbb:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fbf:	84 c9                	test   cl,cl
c0010fc1:	74 0c                	je     c0010fcf <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fc3:	83 ec 0c             	sub    esp,0xc
c0010fc6:	55                   	push   ebp
c0010fc7:	e8 40 fe ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0010fcc:	83 c4 10             	add    esp,0x10
c0010fcf:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fd6:	83 c4 1c             	add    esp,0x1c
c0010fd9:	5b                   	pop    ebx
c0010fda:	5e                   	pop    esi
c0010fdb:	5f                   	pop    edi
c0010fdc:	5d                   	pop    ebp
c0010fdd:	c3                   	ret    

c0010fde <VgaText::clearScreen()>:
c0010fde:	57                   	push   edi
c0010fdf:	56                   	push   esi
c0010fe0:	31 f6                	xor    esi,esi
c0010fe2:	53                   	push   ebx
c0010fe3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fe7:	52                   	push   edx
c0010fe8:	6a 00                	push   0x0
c0010fea:	6a 00                	push   0x0
c0010fec:	53                   	push   ebx
c0010fed:	e8 cc f8 ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c0010ff2:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010ff9:	83 c4 10             	add    esp,0x10
c0010ffc:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0011002:	7e 26                	jle    c001102a <VgaText::clearScreen()+0x4c>
c0011004:	31 ff                	xor    edi,edi
c0011006:	50                   	push   eax
c0011007:	50                   	push   eax
c0011008:	56                   	push   esi
c0011009:	57                   	push   edi
c001100a:	47                   	inc    edi
c001100b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011011:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011017:	6a 20                	push   0x20
c0011019:	53                   	push   ebx
c001101a:	e8 27 f8 ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001101f:	83 c4 20             	add    esp,0x20
c0011022:	83 ff 50             	cmp    edi,0x50
c0011025:	75 df                	jne    c0011006 <VgaText::clearScreen()+0x28>
c0011027:	46                   	inc    esi
c0011028:	eb d2                	jmp    c0010ffc <VgaText::clearScreen()+0x1e>
c001102a:	83 ec 0c             	sub    esp,0xc
c001102d:	53                   	push   ebx
c001102e:	e8 d9 fd ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0011033:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001103a:	83 c4 10             	add    esp,0x10
c001103d:	5b                   	pop    ebx
c001103e:	5e                   	pop    esi
c001103f:	5f                   	pop    edi
c0011040:	c3                   	ret    
c0011041:	90                   	nop

c0011042 <VgaText::putchar(char)>:
c0011042:	56                   	push   esi
c0011043:	53                   	push   ebx
c0011044:	83 ec 14             	sub    esp,0x14
c0011047:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001104b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001104f:	3c 5b                	cmp    al,0x5b
c0011051:	75 21                	jne    c0011074 <VgaText::putchar(char)+0x32>
c0011053:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001105a:	74 28                	je     c0011084 <VgaText::putchar(char)+0x42>
c001105c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011065:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001106f:	e9 e2 00 00 00       	jmp    c0011156 <VgaText::putchar(char)+0x114>
c0011074:	3c 1b                	cmp    al,0x1b
c0011076:	75 0c                	jne    c0011084 <VgaText::putchar(char)+0x42>
c0011078:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001107f:	e9 d2 00 00 00       	jmp    c0011156 <VgaText::putchar(char)+0x114>
c0011084:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001108a:	84 c9                	test   cl,cl
c001108c:	0f 84 ab 00 00 00    	je     c001113d <VgaText::putchar(char)+0xfb>
c0011092:	8d 50 c0             	lea    edx,[eax-0x40]
c0011095:	80 fa 3e             	cmp    dl,0x3e
c0011098:	0f 87 82 00 00 00    	ja     c0011120 <VgaText::putchar(char)+0xde>
c001109e:	3c 6d                	cmp    al,0x6d
c00110a0:	75 4d                	jne    c00110ef <VgaText::putchar(char)+0xad>
c00110a2:	31 f6                	xor    esi,esi
c00110a4:	31 d2                	xor    edx,edx
c00110a6:	31 c0                	xor    eax,eax
c00110a8:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110ae:	7e 30                	jle    c00110e0 <VgaText::putchar(char)+0x9e>
c00110b0:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110b8:	80 fa 3b             	cmp    dl,0x3b
c00110bb:	75 17                	jne    c00110d4 <VgaText::putchar(char)+0x92>
c00110bd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110c1:	50                   	push   eax
c00110c2:	53                   	push   ebx
c00110c3:	e8 ee f5 ff ff       	call   c00106b6 <VgaText::doANSI_SGR(int)>
c00110c8:	59                   	pop    ecx
c00110c9:	31 d2                	xor    edx,edx
c00110cb:	58                   	pop    eax
c00110cc:	31 c0                	xor    eax,eax
c00110ce:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110d2:	eb 09                	jmp    c00110dd <VgaText::putchar(char)+0x9b>
c00110d4:	6b c0 0a             	imul   eax,eax,0xa
c00110d7:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110db:	88 ca                	mov    dl,cl
c00110dd:	46                   	inc    esi
c00110de:	eb c8                	jmp    c00110a8 <VgaText::putchar(char)+0x66>
c00110e0:	84 d2                	test   dl,dl
c00110e2:	74 31                	je     c0011115 <VgaText::putchar(char)+0xd3>
c00110e4:	50                   	push   eax
c00110e5:	53                   	push   ebx
c00110e6:	e8 cb f5 ff ff       	call   c00106b6 <VgaText::doANSI_SGR(int)>
c00110eb:	58                   	pop    eax
c00110ec:	5a                   	pop    edx
c00110ed:	eb 26                	jmp    c0011115 <VgaText::putchar(char)+0xd3>
c00110ef:	3c 4a                	cmp    al,0x4a
c00110f1:	75 22                	jne    c0011115 <VgaText::putchar(char)+0xd3>
c00110f3:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110fa:	75 19                	jne    c0011115 <VgaText::putchar(char)+0xd3>
c00110fc:	83 ec 0c             	sub    esp,0xc
c00110ff:	53                   	push   ebx
c0011100:	e8 d9 fe ff ff       	call   c0010fde <VgaText::clearScreen()>
c0011105:	83 c4 0c             	add    esp,0xc
c0011108:	6a 00                	push   0x0
c001110a:	6a 00                	push   0x0
c001110c:	53                   	push   ebx
c001110d:	e8 ac f7 ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c0011112:	83 c4 10             	add    esp,0x10
c0011115:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c001111e:	eb 36                	jmp    c0011156 <VgaText::putchar(char)+0x114>
c0011120:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0011126:	83 fa 0e             	cmp    edx,0xe
c0011129:	7f 2b                	jg     c0011156 <VgaText::putchar(char)+0x114>
c001112b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001112e:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011134:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001113b:	eb 19                	jmp    c0011156 <VgaText::putchar(char)+0x114>
c001113d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011143:	0f be c0             	movsx  eax,al
c0011146:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001114c:	50                   	push   eax
c001114d:	53                   	push   ebx
c001114e:	e8 ab fa ff ff       	call   c0010bfe <VgaText::putchar(char, VgaColour, VgaColour)>
c0011153:	83 c4 10             	add    esp,0x10
c0011156:	83 c4 14             	add    esp,0x14
c0011159:	5b                   	pop    ebx
c001115a:	5e                   	pop    esi
c001115b:	c3                   	ret    

c001115c <VgaText::puts(char const*)>:
c001115c:	53                   	push   ebx
c001115d:	83 ec 08             	sub    esp,0x8
c0011160:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011164:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011167:	84 c0                	test   al,al
c0011169:	74 12                	je     c001117d <VgaText::puts(char const*)+0x21>
c001116b:	43                   	inc    ebx
c001116c:	51                   	push   ecx
c001116d:	51                   	push   ecx
c001116e:	50                   	push   eax
c001116f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011173:	e8 ca fe ff ff       	call   c0011042 <VgaText::putchar(char)>
c0011178:	83 c4 10             	add    esp,0x10
c001117b:	eb e7                	jmp    c0011164 <VgaText::puts(char const*)+0x8>
c001117d:	83 c4 08             	add    esp,0x8
c0011180:	5b                   	pop    ebx
c0011181:	c3                   	ret    

c0011182 <VgaText::putx(unsigned int)>:
c0011182:	57                   	push   edi
c0011183:	b9 11 00 00 00       	mov    ecx,0x11
c0011188:	56                   	push   esi
c0011189:	be 42 a4 02 c0       	mov    esi,0xc002a442
c001118e:	53                   	push   ebx
c001118f:	83 ec 20             	sub    esp,0x20
c0011192:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011196:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001119a:	fc                   	cld    
c001119b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001119d:	be 08 00 00 00       	mov    esi,0x8
c00111a2:	50                   	push   eax
c00111a3:	50                   	push   eax
c00111a4:	89 d8                	mov    eax,ebx
c00111a6:	c1 e3 04             	shl    ebx,0x4
c00111a9:	c1 e8 1c             	shr    eax,0x1c
c00111ac:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111b1:	50                   	push   eax
c00111b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111b6:	e8 87 fe ff ff       	call   c0011042 <VgaText::putchar(char)>
c00111bb:	83 c4 10             	add    esp,0x10
c00111be:	4e                   	dec    esi
c00111bf:	75 e1                	jne    c00111a2 <VgaText::putx(unsigned int)+0x20>
c00111c1:	83 c4 20             	add    esp,0x20
c00111c4:	5b                   	pop    ebx
c00111c5:	5e                   	pop    esi
c00111c6:	5f                   	pop    edi
c00111c7:	c3                   	ret    

c00111c8 <VgaText::VgaText(char const*)>:
c00111c8:	57                   	push   edi
c00111c9:	56                   	push   esi
c00111ca:	53                   	push   ebx
c00111cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111cf:	83 ec 08             	sub    esp,0x8
c00111d2:	6a 00                	push   0x0
c00111d4:	50                   	push   eax
c00111d5:	e8 6e 05 00 00       	call   c0011748 <UnixFile::UnixFile(int)>
c00111da:	83 c4 10             	add    esp,0x10
c00111dd:	ba a8 a4 02 c0       	mov    edx,0xc002a4a8
c00111e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e6:	89 10                	mov    DWORD PTR [eax],edx
c00111e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ec:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fa:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0011204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011208:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c001120f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011213:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c001121a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121e:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0011228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122c:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0011236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123a:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011245:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c001124c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011250:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011256:	bb a0 e6 02 c0       	mov    ebx,0xc002e6a0
c001125b:	b8 08 00 00 00       	mov    eax,0x8
c0011260:	fc                   	cld    
c0011261:	89 d7                	mov    edi,edx
c0011263:	89 de                	mov    esi,ebx
c0011265:	89 c1                	mov    ecx,eax
c0011267:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001126d:	05 1e 10 00 00       	add    eax,0x101e
c0011272:	83 ec 08             	sub    esp,0x8
c0011275:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011279:	50                   	push   eax
c001127a:	e8 b5 f5 fe ff       	call   c0000834 <strcpy>
c001127f:	83 c4 10             	add    esp,0x10
c0011282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011286:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011294:	83 c0 0c             	add    eax,0xc
c0011297:	83 ec 04             	sub    esp,0x4
c001129a:	68 00 0f 00 00       	push   0xf00
c001129f:	6a 00                	push   0x0
c00112a1:	50                   	push   eax
c00112a2:	e8 d1 f4 fe ff       	call   c0000778 <memset>
c00112a7:	83 c4 10             	add    esp,0x10
c00112aa:	83 ec 04             	sub    esp,0x4
c00112ad:	6a 00                	push   0x0
c00112af:	6a 07                	push   0x7
c00112b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112b5:	e8 b4 f4 ff ff       	call   c001076e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112ba:	83 c4 10             	add    esp,0x10
c00112bd:	83 ec 08             	sub    esp,0x8
c00112c0:	6a 02                	push   0x2
c00112c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c6:	e8 49 fa ff ff       	call   c0010d14 <VgaText::setCursorHeight(int)>
c00112cb:	83 c4 10             	add    esp,0x10
c00112ce:	83 ec 04             	sub    esp,0x4
c00112d1:	6a 00                	push   0x0
c00112d3:	6a 00                	push   0x0
c00112d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112d9:	e8 e0 f5 ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c00112de:	83 c4 10             	add    esp,0x10
c00112e1:	83 ec 08             	sub    esp,0x8
c00112e4:	6a 01                	push   0x1
c00112e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ea:	e8 7d f3 ff ff       	call   c001066c <VgaText::showCursor(bool)>
c00112ef:	83 c4 10             	add    esp,0x10
c00112f2:	83 ec 08             	sub    esp,0x8
c00112f5:	6a 01                	push   0x1
c00112f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112fb:	e8 7c f3 ff ff       	call   c001067c <VgaText::disableBlink(bool)>
c0011300:	83 c4 10             	add    esp,0x10
c0011303:	83 ec 0c             	sub    esp,0xc
c0011306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001130a:	e8 cf fc ff ff       	call   c0010fde <VgaText::clearScreen()>
c001130f:	83 c4 10             	add    esp,0x10
c0011312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011316:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c001131d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011321:	05 9e 10 00 00       	add    eax,0x109e
c0011326:	83 ec 04             	sub    esp,0x4
c0011329:	68 96 00 00 00       	push   0x96
c001132e:	6a 00                	push   0x0
c0011330:	50                   	push   eax
c0011331:	e8 42 f4 fe ff       	call   c0000778 <memset>
c0011336:	83 c4 10             	add    esp,0x10
c0011339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001133d:	05 34 11 00 00       	add    eax,0x1134
c0011342:	83 ec 04             	sub    esp,0x4
c0011345:	68 2c 01 00 00       	push   0x12c
c001134a:	6a 00                	push   0x0
c001134c:	50                   	push   eax
c001134d:	e8 26 f4 fe ff       	call   c0000778 <memset>
c0011352:	83 c4 10             	add    esp,0x10
c0011355:	90                   	nop
c0011356:	5b                   	pop    ebx
c0011357:	5e                   	pop    esi
c0011358:	5f                   	pop    edi
c0011359:	c3                   	ret    

c001135a <VgaText::receiveKey(unsigned char)>:
c001135a:	55                   	push   ebp
c001135b:	57                   	push   edi
c001135c:	56                   	push   esi
c001135d:	53                   	push   ebx
c001135e:	83 ec 1c             	sub    esp,0x1c
c0011361:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011365:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011369:	84 db                	test   bl,bl
c001136b:	0f 84 c9 00 00 00    	je     c001143a <VgaText::receiveKey(unsigned char)+0xe0>
c0011371:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011377:	80 fb 08             	cmp    bl,0x8
c001137a:	75 2c                	jne    c00113a8 <VgaText::receiveKey(unsigned char)+0x4e>
c001137c:	83 ec 0c             	sub    esp,0xc
c001137f:	57                   	push   edi
c0011380:	e8 0f f4 fe ff       	call   c0000794 <strlen>
c0011385:	83 c4 10             	add    esp,0x10
c0011388:	85 c0                	test   eax,eax
c001138a:	74 41                	je     c00113cd <VgaText::receiveKey(unsigned char)+0x73>
c001138c:	50                   	push   eax
c001138d:	50                   	push   eax
c001138e:	6a 08                	push   0x8
c0011390:	56                   	push   esi
c0011391:	e8 ac fc ff ff       	call   c0011042 <VgaText::putchar(char)>
c0011396:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011399:	e8 f6 f3 fe ff       	call   c0000794 <strlen>
c001139e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113a6:	eb 22                	jmp    c00113ca <VgaText::receiveKey(unsigned char)+0x70>
c00113a8:	0f be c3             	movsx  eax,bl
c00113ab:	52                   	push   edx
c00113ac:	52                   	push   edx
c00113ad:	50                   	push   eax
c00113ae:	56                   	push   esi
c00113af:	e8 8e fc ff ff       	call   c0011042 <VgaText::putchar(char)>
c00113b4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113b8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113bd:	59                   	pop    ecx
c00113be:	5d                   	pop    ebp
c00113bf:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113c3:	50                   	push   eax
c00113c4:	57                   	push   edi
c00113c5:	e8 aa f5 fe ff       	call   c0000974 <strcat>
c00113ca:	83 c4 10             	add    esp,0x10
c00113cd:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113d4:	75 05                	jne    c00113db <VgaText::receiveKey(unsigned char)+0x81>
c00113d6:	80 fb 0a             	cmp    bl,0xa
c00113d9:	75 53                	jne    c001142e <VgaText::receiveKey(unsigned char)+0xd4>
c00113db:	83 ec 0c             	sub    esp,0xc
c00113de:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113e4:	53                   	push   ebx
c00113e5:	e8 aa f3 fe ff       	call   c0000794 <strlen>
c00113ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113ed:	89 c5                	mov    ebp,eax
c00113ef:	e8 a0 f3 fe ff       	call   c0000794 <strlen>
c00113f4:	83 c4 10             	add    esp,0x10
c00113f7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113fb:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011400:	76 10                	jbe    c0011412 <VgaText::receiveKey(unsigned char)+0xb8>
c0011402:	83 ec 0c             	sub    esp,0xc
c0011405:	68 53 a4 02 c0       	push   0xc002a453
c001140a:	e8 00 92 00 00       	call   c001a60f <Krnl::panic(char const*)>
c001140f:	83 c4 10             	add    esp,0x10
c0011412:	50                   	push   eax
c0011413:	50                   	push   eax
c0011414:	57                   	push   edi
c0011415:	53                   	push   ebx
c0011416:	e8 59 f5 fe ff       	call   c0000974 <strcat>
c001141b:	83 c4 0c             	add    esp,0xc
c001141e:	68 96 00 00 00       	push   0x96
c0011423:	6a 00                	push   0x0
c0011425:	57                   	push   edi
c0011426:	e8 4d f3 fe ff       	call   c0000778 <memset>
c001142b:	83 c4 10             	add    esp,0x10
c001142e:	83 ec 0c             	sub    esp,0xc
c0011431:	56                   	push   esi
c0011432:	e8 d5 f9 ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0011437:	83 c4 10             	add    esp,0x10
c001143a:	83 c4 1c             	add    esp,0x1c
c001143d:	5b                   	pop    ebx
c001143e:	5e                   	pop    esi
c001143f:	5f                   	pop    edi
c0011440:	5d                   	pop    ebp
c0011441:	c3                   	ret    

c0011442 <VgaText::write(unsigned long long, void*, int*)>:
c0011442:	55                   	push   ebp
c0011443:	57                   	push   edi
c0011444:	56                   	push   esi
c0011445:	53                   	push   ebx
c0011446:	83 ec 0c             	sub    esp,0xc
c0011449:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001144d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011451:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011455:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001145c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001145f:	39 eb                	cmp    ebx,ebp
c0011461:	74 13                	je     c0011476 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011463:	43                   	inc    ebx
c0011464:	50                   	push   eax
c0011465:	50                   	push   eax
c0011466:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001146a:	50                   	push   eax
c001146b:	56                   	push   esi
c001146c:	e8 d1 fb ff ff       	call   c0011042 <VgaText::putchar(char)>
c0011471:	83 c4 10             	add    esp,0x10
c0011474:	eb e9                	jmp    c001145f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011476:	83 ec 0c             	sub    esp,0xc
c0011479:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011480:	56                   	push   esi
c0011481:	e8 86 f9 ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0011486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001148a:	89 38                	mov    DWORD PTR [eax],edi
c001148c:	83 c4 1c             	add    esp,0x1c
c001148f:	31 c0                	xor    eax,eax
c0011491:	5b                   	pop    ebx
c0011492:	5e                   	pop    esi
c0011493:	5f                   	pop    edi
c0011494:	5d                   	pop    ebp
c0011495:	c3                   	ret    

c0011496 <newTerminal(char*)>:
c0011496:	83 ec 28             	sub    esp,0x28
c0011499:	68 60 12 00 00       	push   0x1260
c001149e:	e8 9d e3 ff ff       	call   c000f840 <malloc>
c00114a3:	5a                   	pop    edx
c00114a4:	59                   	pop    ecx
c00114a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114a9:	50                   	push   eax
c00114aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114ae:	e8 15 fd ff ff       	call   c00111c8 <VgaText::VgaText(char const*)>
c00114b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114b7:	83 c4 2c             	add    esp,0x2c
c00114ba:	c3                   	ret    
c00114bb:	90                   	nop

c00114bc <TSS::TSS()>:
c00114bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114c7:	90                   	nop
c00114c8:	c3                   	ret    
c00114c9:	90                   	nop

c00114ca <TSS::setESP(unsigned long)>:
c00114ca:	55                   	push   ebp
c00114cb:	89 e5                	mov    ebp,esp
c00114cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114d6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114d9:	90                   	nop
c00114da:	5d                   	pop    ebp
c00114db:	c3                   	ret    

c00114dc <TSS::flush()>:
c00114dc:	55                   	push   ebp
c00114dd:	89 e5                	mov    ebp,esp
c00114df:	83 ec 10             	sub    esp,0x10
c00114e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00114e7:	83 c8 03             	or     eax,0x3
c00114ea:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114ee:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114f2:	66 89 d0             	mov    ax,dx
c00114f5:	0f 00 d8             	ltr    ax
c00114f8:	90                   	nop
c00114f9:	c9                   	leave  
c00114fa:	c3                   	ret    
c00114fb:	90                   	nop

c00114fc <TSS::setup(unsigned long, unsigned long)>:
c00114fc:	55                   	push   ebp
c00114fd:	89 e5                	mov    ebp,esp
c00114ff:	83 ec 18             	sub    esp,0x18
c0011502:	83 ec 0c             	sub    esp,0xc
c0011505:	6a 68                	push   0x68
c0011507:	e8 34 e3 ff ff       	call   c000f840 <malloc>
c001150c:	83 c4 10             	add    esp,0x10
c001150f:	89 c2                	mov    edx,eax
c0011511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011514:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151d:	83 ec 04             	sub    esp,0x4
c0011520:	6a 68                	push   0x68
c0011522:	6a 00                	push   0x0
c0011524:	50                   	push   eax
c0011525:	e8 4e f2 fe ff       	call   c0000778 <memset>
c001152a:	83 c4 10             	add    esp,0x10
c001152d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011533:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001154e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011557:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001155d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011560:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011563:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011578:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011587:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001158d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011590:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011593:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115a2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c4:	0f 20 da             	mov    edx,cr3
c00115c7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115ca:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115cd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d6:	83 ec 08             	sub    esp,0x8
c00115d9:	50                   	push   eax
c00115da:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115dd:	50                   	push   eax
c00115de:	e8 3b da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115e3:	83 c4 10             	add    esp,0x10
c00115e6:	83 ec 08             	sub    esp,0x8
c00115e9:	6a 68                	push   0x68
c00115eb:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115ee:	50                   	push   eax
c00115ef:	e8 46 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115f4:	83 c4 10             	add    esp,0x10
c00115f7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115fb:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115fe:	83 e0 0f             	and    eax,0xf
c0011601:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011604:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011607:	83 c8 40             	or     eax,0x40
c001160a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001160d:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0011612:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011618:	05 78 01 00 00       	add    eax,0x178
c001161d:	83 ec 04             	sub    esp,0x4
c0011620:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011623:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011626:	50                   	push   eax
c0011627:	e8 42 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c001162c:	83 c4 10             	add    esp,0x10
c001162f:	89 c2                	mov    edx,eax
c0011631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011634:	89 10                	mov    DWORD PTR [eax],edx
c0011636:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001163b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011641:	05 78 01 00 00       	add    eax,0x178
c0011646:	83 ec 0c             	sub    esp,0xc
c0011649:	50                   	push   eax
c001164a:	e8 63 da ff ff       	call   c000f0b2 <GDT::flush()>
c001164f:	83 c4 10             	add    esp,0x10
c0011652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011655:	8b 00                	mov    eax,DWORD PTR [eax]
c0011657:	83 ec 08             	sub    esp,0x8
c001165a:	50                   	push   eax
c001165b:	68 bc a4 02 c0       	push   0xc002a4bc
c0011660:	e8 09 19 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0011665:	83 c4 10             	add    esp,0x10
c0011668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001166b:	8b 00                	mov    eax,DWORD PTR [eax]
c001166d:	c9                   	leave  
c001166e:	c3                   	ret    
c001166f:	90                   	nop

c0011670 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011670:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011674:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001167b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011680:	75 08                	jne    c001168a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011682:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011688:	eb 38                	jmp    c00116c2 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001168a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001168f:	75 17                	jne    c00116a8 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011691:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011696:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011699:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001169f:	8b 10                	mov    edx,DWORD PTR [eax]
c00116a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116a5:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00116a8:	89 c1                	mov    ecx,eax
c00116aa:	83 e1 fd             	and    ecx,0xfffffffd
c00116ad:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116b3:	74 cd                	je     c0011682 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116b5:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116ba:	83 e0 ef             	and    eax,0xffffffef
c00116bd:	83 f8 08             	cmp    eax,0x8
c00116c0:	76 c0                	jbe    c0011682 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116c2:	31 c0                	xor    eax,eax
c00116c4:	c3                   	ret    
c00116c5:	90                   	nop

c00116c6 <ReservedFilename::isAtty()>:
c00116c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116ca:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116cd:	31 c0                	xor    eax,eax
c00116cf:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116d5:	74 09                	je     c00116e0 <ReservedFilename::isAtty()+0x1a>
c00116d7:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116dd:	0f 94 c0             	sete   al
c00116e0:	c3                   	ret    
c00116e1:	90                   	nop

c00116e2 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116e6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116f6:	75 08                	jne    c0011700 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116fe:	eb 3d                	jmp    c001173d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011700:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011705:	75 17                	jne    c001171e <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011707:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001170c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001170f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011715:	8b 10                	mov    edx,DWORD PTR [eax]
c0011717:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001171b:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001171e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011723:	75 04                	jne    c0011729 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011725:	89 0a                	mov    DWORD PTR [edx],ecx
c0011727:	eb 14                	jmp    c001173d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011729:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001172e:	74 c8                	je     c00116f8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011730:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011735:	83 e0 ef             	and    eax,0xffffffef
c0011738:	83 f8 08             	cmp    eax,0x8
c001173b:	76 bb                	jbe    c00116f8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001173d:	31 c0                	xor    eax,eax
c001173f:	c3                   	ret    

c0011740 <UnixFile::getFileDescriptor()>:
c0011740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011744:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011747:	c3                   	ret    

c0011748 <UnixFile::UnixFile(int)>:
c0011748:	53                   	push   ebx
c0011749:	83 ec 28             	sub    esp,0x28
c001174c:	ba a8 a5 02 c0       	mov    edx,0xc002a5a8
c0011751:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011755:	89 10                	mov    DWORD PTR [eax],edx
c0011757:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001175f:	0f 8f 8c 01 00 00    	jg     c00118f1 <UnixFile::UnixFile(int)+0x1a9>
c0011765:	a1 80 d5 02 c0       	mov    eax,ds:0xc002d580
c001176a:	8d 50 01             	lea    edx,[eax+0x1]
c001176d:	89 15 80 d5 02 c0    	mov    DWORD PTR ds:0xc002d580,edx
c0011773:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011777:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001177a:	83 ec 08             	sub    esp,0x8
c001177d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011781:	68 58 e7 02 c0       	push   0xc002e758
c0011786:	e8 f5 6f 01 00       	call   c0028780 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001178b:	83 c4 10             	add    esp,0x10
c001178e:	a0 54 e7 02 c0       	mov    al,ds:0xc002e754
c0011793:	83 f0 01             	xor    eax,0x1
c0011796:	84 c0                	test   al,al
c0011798:	0f 84 54 01 00 00    	je     c00118f2 <UnixFile::UnixFile(int)+0x1aa>
c001179e:	c6 05 54 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e754,0x1
c00117a5:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117ad:	83 ec 0c             	sub    esp,0xc
c00117b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117b4:	e8 87 e0 ff ff       	call   c000f840 <malloc>
c00117b9:	83 c4 10             	add    esp,0x10
c00117bc:	89 c3                	mov    ebx,eax
c00117be:	83 ec 08             	sub    esp,0x8
c00117c1:	68 03 ff ff 0f       	push   0xfffff03
c00117c6:	53                   	push   ebx
c00117c7:	e8 2c 01 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00117cc:	83 c4 10             	add    esp,0x10
c00117cf:	89 1d 4c e7 02 c0    	mov    DWORD PTR ds:0xc002e74c,ebx
c00117d5:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117dd:	83 ec 0c             	sub    esp,0xc
c00117e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117e4:	e8 57 e0 ff ff       	call   c000f840 <malloc>
c00117e9:	83 c4 10             	add    esp,0x10
c00117ec:	89 c3                	mov    ebx,eax
c00117ee:	83 ec 08             	sub    esp,0x8
c00117f1:	68 01 ff ff 0f       	push   0xfffff01
c00117f6:	53                   	push   ebx
c00117f7:	e8 fc 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00117fc:	83 c4 10             	add    esp,0x10
c00117ff:	89 1d 50 e7 02 c0    	mov    DWORD PTR ds:0xc002e750,ebx
c0011805:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001180d:	83 ec 0c             	sub    esp,0xc
c0011810:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011814:	e8 27 e0 ff ff       	call   c000f840 <malloc>
c0011819:	83 c4 10             	add    esp,0x10
c001181c:	89 c3                	mov    ebx,eax
c001181e:	83 ec 08             	sub    esp,0x8
c0011821:	68 00 ff ff 0f       	push   0xfffff00
c0011826:	53                   	push   ebx
c0011827:	e8 cc 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c001182c:	83 c4 10             	add    esp,0x10
c001182f:	89 1d 44 e7 02 c0    	mov    DWORD PTR ds:0xc002e744,ebx
c0011835:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001183d:	83 ec 0c             	sub    esp,0xc
c0011840:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011844:	e8 f7 df ff ff       	call   c000f840 <malloc>
c0011849:	83 c4 10             	add    esp,0x10
c001184c:	89 c3                	mov    ebx,eax
c001184e:	83 ec 08             	sub    esp,0x8
c0011851:	68 02 ff ff 0f       	push   0xfffff02
c0011856:	53                   	push   ebx
c0011857:	e8 9c 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c001185c:	83 c4 10             	add    esp,0x10
c001185f:	89 1d 48 e7 02 c0    	mov    DWORD PTR ds:0xc002e748,ebx
c0011865:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001186d:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011872:	7f 7e                	jg     c00118f2 <UnixFile::UnixFile(int)+0x1aa>
c0011874:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001187c:	83 ec 0c             	sub    esp,0xc
c001187f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011883:	e8 b8 df ff ff       	call   c000f840 <malloc>
c0011888:	83 c4 10             	add    esp,0x10
c001188b:	89 c3                	mov    ebx,eax
c001188d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011891:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011896:	83 ec 08             	sub    esp,0x8
c0011899:	50                   	push   eax
c001189a:	53                   	push   ebx
c001189b:	e8 58 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00118a0:	83 c4 10             	add    esp,0x10
c00118a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118a7:	89 1c 85 20 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd18e0],ebx
c00118ae:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118b6:	83 ec 0c             	sub    esp,0xc
c00118b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118bd:	e8 7e df ff ff       	call   c000f840 <malloc>
c00118c2:	83 c4 10             	add    esp,0x10
c00118c5:	89 c3                	mov    ebx,eax
c00118c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118cb:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118d0:	83 ec 08             	sub    esp,0x8
c00118d3:	50                   	push   eax
c00118d4:	53                   	push   ebx
c00118d5:	e8 1e 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00118da:	83 c4 10             	add    esp,0x10
c00118dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118e1:	89 1c 85 e0 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1920],ebx
c00118e8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118ec:	e9 7c ff ff ff       	jmp    c001186d <UnixFile::UnixFile(int)+0x125>
c00118f1:	90                   	nop
c00118f2:	83 c4 28             	add    esp,0x28
c00118f5:	5b                   	pop    ebx
c00118f6:	c3                   	ret    
c00118f7:	90                   	nop

c00118f8 <ReservedFilename::ReservedFilename(int)>:
c00118f8:	83 ec 0c             	sub    esp,0xc
c00118fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ff:	83 ec 08             	sub    esp,0x8
c0011902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011906:	50                   	push   eax
c0011907:	e8 3c fe ff ff       	call   c0011748 <UnixFile::UnixFile(int)>
c001190c:	83 c4 10             	add    esp,0x10
c001190f:	ba c4 a5 02 c0       	mov    edx,0xc002a5c4
c0011914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011918:	89 10                	mov    DWORD PTR [eax],edx
c001191a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001191e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011922:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011925:	90                   	nop
c0011926:	83 c4 0c             	add    esp,0xc
c0011929:	c3                   	ret    

c001192a <UnixFile::~UnixFile()>:
c001192a:	83 ec 1c             	sub    esp,0x1c
c001192d:	ba a8 a5 02 c0       	mov    edx,0xc002a5a8
c0011932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011936:	89 10                	mov    DWORD PTR [eax],edx
c0011938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001193c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001193f:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011944:	7f 73                	jg     c00119b9 <UnixFile::~UnixFile()+0x8f>
c0011946:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001194e:	83 ec 0c             	sub    esp,0xc
c0011951:	68 58 e7 02 c0       	push   0xc002e758
c0011956:	e8 f9 6e 01 00       	call   c0028854 <LinkedList<UnixFile>::getFirstElement()>
c001195b:	83 c4 10             	add    esp,0x10
c001195e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011962:	83 ec 0c             	sub    esp,0xc
c0011965:	68 58 e7 02 c0       	push   0xc002e758
c001196a:	e8 ed 6e 01 00       	call   c002885c <LinkedList<UnixFile>::removeFirst()>
c001196f:	83 c4 10             	add    esp,0x10
c0011972:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011976:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001197a:	74 40                	je     c00119bc <UnixFile::~UnixFile()+0x92>
c001197c:	83 ec 08             	sub    esp,0x8
c001197f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011983:	68 58 e7 02 c0       	push   0xc002e758
c0011988:	e8 f3 6d 01 00       	call   c0028780 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001198d:	83 c4 10             	add    esp,0x10
c0011990:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011994:	8d 50 01             	lea    edx,[eax+0x1]
c0011997:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001199b:	3d 88 13 00 00       	cmp    eax,0x1388
c00119a0:	0f 94 c0             	sete   al
c00119a3:	84 c0                	test   al,al
c00119a5:	74 a7                	je     c001194e <UnixFile::~UnixFile()+0x24>
c00119a7:	83 ec 0c             	sub    esp,0xc
c00119aa:	68 80 a5 02 c0       	push   0xc002a580
c00119af:	e8 5b 8c 00 00       	call   c001a60f <Krnl::panic(char const*)>
c00119b4:	83 c4 10             	add    esp,0x10
c00119b7:	eb 95                	jmp    c001194e <UnixFile::~UnixFile()+0x24>
c00119b9:	90                   	nop
c00119ba:	eb 01                	jmp    c00119bd <UnixFile::~UnixFile()+0x93>
c00119bc:	90                   	nop
c00119bd:	90                   	nop
c00119be:	83 c4 1c             	add    esp,0x1c
c00119c1:	c3                   	ret    

c00119c2 <UnixFile::~UnixFile()>:
c00119c2:	83 ec 0c             	sub    esp,0xc
c00119c5:	83 ec 0c             	sub    esp,0xc
c00119c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119cc:	e8 59 ff ff ff       	call   c001192a <UnixFile::~UnixFile()>
c00119d1:	83 c4 10             	add    esp,0x10
c00119d4:	83 ec 08             	sub    esp,0x8
c00119d7:	6a 0c                	push   0xc
c00119d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119dd:	e8 ac 14 00 00       	call   c0012e8e <operator delete(void*, unsigned long)>
c00119e2:	83 c4 10             	add    esp,0x10
c00119e5:	83 c4 0c             	add    esp,0xc
c00119e8:	c3                   	ret    
c00119e9:	90                   	nop

c00119ea <ReservedFilename::~ReservedFilename()>:
c00119ea:	83 ec 0c             	sub    esp,0xc
c00119ed:	ba c4 a5 02 c0       	mov    edx,0xc002a5c4
c00119f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119f6:	89 10                	mov    DWORD PTR [eax],edx
c00119f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119fc:	83 ec 0c             	sub    esp,0xc
c00119ff:	50                   	push   eax
c0011a00:	e8 25 ff ff ff       	call   c001192a <UnixFile::~UnixFile()>
c0011a05:	83 c4 10             	add    esp,0x10
c0011a08:	90                   	nop
c0011a09:	83 c4 0c             	add    esp,0xc
c0011a0c:	c3                   	ret    
c0011a0d:	90                   	nop

c0011a0e <ReservedFilename::~ReservedFilename()>:
c0011a0e:	83 ec 0c             	sub    esp,0xc
c0011a11:	83 ec 0c             	sub    esp,0xc
c0011a14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a18:	e8 cd ff ff ff       	call   c00119ea <ReservedFilename::~ReservedFilename()>
c0011a1d:	83 c4 10             	add    esp,0x10
c0011a20:	83 ec 08             	sub    esp,0x8
c0011a23:	6a 0c                	push   0xc
c0011a25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a29:	e8 60 14 00 00       	call   c0012e8e <operator delete(void*, unsigned long)>
c0011a2e:	83 c4 10             	add    esp,0x10
c0011a31:	83 c4 0c             	add    esp,0xc
c0011a34:	c3                   	ret    

c0011a35 <getFromFileDescriptor(int)>:
c0011a35:	53                   	push   ebx
c0011a36:	83 ec 08             	sub    esp,0x8
c0011a39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a3d:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a43:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a49:	7f 2c                	jg     c0011a77 <getFromFileDescriptor(int)+0x42>
c0011a4b:	83 ec 0c             	sub    esp,0xc
c0011a4e:	68 58 e7 02 c0       	push   0xc002e758
c0011a53:	e8 fc 6d 01 00       	call   c0028854 <LinkedList<UnixFile>::getFirstElement()>
c0011a58:	83 c4 10             	add    esp,0x10
c0011a5b:	85 c0                	test   eax,eax
c0011a5d:	75 04                	jne    c0011a63 <getFromFileDescriptor(int)+0x2e>
c0011a5f:	31 c0                	xor    eax,eax
c0011a61:	eb 6e                	jmp    c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a63:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a66:	74 69                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a68:	52                   	push   edx
c0011a69:	52                   	push   edx
c0011a6a:	50                   	push   eax
c0011a6b:	68 58 e7 02 c0       	push   0xc002e758
c0011a70:	e8 89 6e 01 00       	call   c00288fe <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a75:	eb e1                	jmp    c0011a58 <getFromFileDescriptor(int)+0x23>
c0011a77:	a1 4c e7 02 c0       	mov    eax,ds:0xc002e74c
c0011a7c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a82:	74 4d                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a84:	a1 50 e7 02 c0       	mov    eax,ds:0xc002e750
c0011a89:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a8f:	74 40                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a91:	a1 48 e7 02 c0       	mov    eax,ds:0xc002e748
c0011a96:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a9c:	74 33                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a9e:	a1 44 e7 02 c0       	mov    eax,ds:0xc002e744
c0011aa3:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011aa9:	74 26                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011aab:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011ab1:	83 f8 08             	cmp    eax,0x8
c0011ab4:	77 09                	ja     c0011abf <getFromFileDescriptor(int)+0x8a>
c0011ab6:	8b 04 85 20 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd18e0]
c0011abd:	eb 12                	jmp    c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011abf:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ac5:	83 fb 08             	cmp    ebx,0x8
c0011ac8:	77 95                	ja     c0011a5f <getFromFileDescriptor(int)+0x2a>
c0011aca:	8b 04 9d e0 e6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1920]
c0011ad1:	83 c4 08             	add    esp,0x8
c0011ad4:	5b                   	pop    ebx
c0011ad5:	c3                   	ret    

c0011ad6 <__static_initialization_and_destruction_0(int, int)>:
c0011ad6:	83 ec 0c             	sub    esp,0xc
c0011ad9:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011ade:	75 34                	jne    c0011b14 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ae0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011ae8:	75 2a                	jne    c0011b14 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011aea:	83 ec 0c             	sub    esp,0xc
c0011aed:	68 58 e7 02 c0       	push   0xc002e758
c0011af2:	e8 31 6c 01 00       	call   c0028728 <LinkedList<UnixFile>::LinkedList()>
c0011af7:	83 c4 10             	add    esp,0x10
c0011afa:	83 ec 04             	sub    esp,0x4
c0011afd:	68 10 d5 02 c0       	push   0xc002d510
c0011b02:	68 58 e7 02 c0       	push   0xc002e758
c0011b07:	68 26 87 02 c0       	push   0xc0028726
c0011b0c:	e8 f7 12 00 00       	call   c0012e08 <__cxa_atexit>
c0011b11:	83 c4 10             	add    esp,0x10
c0011b14:	90                   	nop
c0011b15:	83 c4 0c             	add    esp,0xc
c0011b18:	c3                   	ret    

c0011b19 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b19:	83 ec 0c             	sub    esp,0xc
c0011b1c:	83 ec 08             	sub    esp,0x8
c0011b1f:	68 ff ff 00 00       	push   0xffff
c0011b24:	6a 01                	push   0x1
c0011b26:	e8 ab ff ff ff       	call   c0011ad6 <__static_initialization_and_destruction_0(int, int)>
c0011b2b:	83 c4 10             	add    esp,0x10
c0011b2e:	83 c4 0c             	add    esp,0xc
c0011b31:	c3                   	ret    

c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b32:	53                   	push   ebx
c0011b33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b37:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b3b:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b41:	89 c8                	mov    eax,ecx
c0011b43:	d1 e8                	shr    eax,1
c0011b45:	03 05 88 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d588
c0011b4b:	83 e1 01             	and    ecx,0x1
c0011b4e:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b50:	75 09                	jne    c0011b5b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b52:	83 e2 f0             	and    edx,0xfffffff0
c0011b55:	09 da                	or     edx,ebx
c0011b57:	88 10                	mov    BYTE PTR [eax],dl
c0011b59:	5b                   	pop    ebx
c0011b5a:	c3                   	ret    
c0011b5b:	c1 e3 04             	shl    ebx,0x4
c0011b5e:	83 e2 0f             	and    edx,0xf
c0011b61:	09 da                	or     edx,ebx
c0011b63:	88 10                	mov    BYTE PTR [eax],dl
c0011b65:	5b                   	pop    ebx
c0011b66:	c3                   	ret    

c0011b67 <Virt::getPageState(unsigned long)>:
c0011b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b6b:	8b 0d 88 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d588
c0011b71:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b77:	89 d0                	mov    eax,edx
c0011b79:	d1 e8                	shr    eax,1
c0011b7b:	83 e2 01             	and    edx,0x1
c0011b7e:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b81:	75 04                	jne    c0011b87 <Virt::getPageState(unsigned long)+0x20>
c0011b83:	83 e0 0f             	and    eax,0xf
c0011b86:	c3                   	ret    
c0011b87:	c0 e8 04             	shr    al,0x4
c0011b8a:	c3                   	ret    

c0011b8b <Virt::allocateKernelVirtualPages(int)>:
c0011b8b:	55                   	push   ebp
c0011b8c:	31 ed                	xor    ebp,ebp
c0011b8e:	57                   	push   edi
c0011b8f:	56                   	push   esi
c0011b90:	53                   	push   ebx
c0011b91:	31 db                	xor    ebx,ebx
c0011b93:	83 ec 1c             	sub    esp,0x1c
c0011b96:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b9a:	8b 3d 84 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d584
c0011ba0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011ba5:	57                   	push   edi
c0011ba6:	e8 bc ff ff ff       	call   c0011b67 <Virt::getPageState(unsigned long)>
c0011bab:	5a                   	pop    edx
c0011bac:	84 c0                	test   al,al
c0011bae:	75 3a                	jne    c0011bea <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011bb0:	85 db                	test   ebx,ebx
c0011bb2:	75 02                	jne    c0011bb6 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011bb4:	89 fd                	mov    ebp,edi
c0011bb6:	43                   	inc    ebx
c0011bb7:	39 f3                	cmp    ebx,esi
c0011bb9:	74 5a                	je     c0011c15 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bbb:	47                   	inc    edi
c0011bbc:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bc2:	76 31                	jbe    c0011bf5 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bc4:	c7 05 84 d5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d584,0xc8000
c0011bce:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011bd3:	75 28                	jne    c0011bfd <Virt::allocateKernelVirtualPages(int)+0x72>
c0011bd5:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bda:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bdf:	57                   	push   edi
c0011be0:	e8 82 ff ff ff       	call   c0011b67 <Virt::getPageState(unsigned long)>
c0011be5:	5a                   	pop    edx
c0011be6:	84 c0                	test   al,al
c0011be8:	74 c6                	je     c0011bb0 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011bea:	31 db                	xor    ebx,ebx
c0011bec:	47                   	inc    edi
c0011bed:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bf3:	77 cf                	ja     c0011bc4 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011bf5:	89 3d 84 d5 02 c0    	mov    DWORD PTR ds:0xc002d584,edi
c0011bfb:	eb a8                	jmp    c0011ba5 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bfd:	83 ec 0c             	sub    esp,0xc
c0011c00:	68 d8 a5 02 c0       	push   0xc002a5d8
c0011c05:	e8 05 8a 00 00       	call   c001a60f <Krnl::panic(char const*)>
c0011c0a:	8b 3d 84 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d584
c0011c10:	83 c4 10             	add    esp,0x10
c0011c13:	eb 90                	jmp    c0011ba5 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c15:	89 2d 84 d5 02 c0    	mov    DWORD PTR ds:0xc002d584,ebp
c0011c1b:	4b                   	dec    ebx
c0011c1c:	74 5f                	je     c0011c7d <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c1e:	85 f6                	test   esi,esi
c0011c20:	74 3d                	je     c0011c5f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c22:	89 e8                	mov    eax,ebp
c0011c24:	31 db                	xor    ebx,ebx
c0011c26:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c29:	eb 14                	jmp    c0011c3f <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c2b:	6a 01                	push   0x1
c0011c2d:	43                   	inc    ebx
c0011c2e:	50                   	push   eax
c0011c2f:	e8 fe fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c34:	58                   	pop    eax
c0011c35:	39 f3                	cmp    ebx,esi
c0011c37:	5a                   	pop    edx
c0011c38:	74 25                	je     c0011c5f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c3a:	a1 84 d5 02 c0       	mov    eax,ds:0xc002d584
c0011c3f:	8d 50 01             	lea    edx,[eax+0x1]
c0011c42:	85 db                	test   ebx,ebx
c0011c44:	89 15 84 d5 02 c0    	mov    DWORD PTR ds:0xc002d584,edx
c0011c4a:	74 20                	je     c0011c6c <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c4c:	39 df                	cmp    edi,ebx
c0011c4e:	75 db                	jne    c0011c2b <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c50:	6a 03                	push   0x3
c0011c52:	43                   	inc    ebx
c0011c53:	50                   	push   eax
c0011c54:	e8 d9 fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c59:	59                   	pop    ecx
c0011c5a:	39 f3                	cmp    ebx,esi
c0011c5c:	58                   	pop    eax
c0011c5d:	75 db                	jne    c0011c3a <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c5f:	83 c4 1c             	add    esp,0x1c
c0011c62:	89 e8                	mov    eax,ebp
c0011c64:	5b                   	pop    ebx
c0011c65:	c1 e0 0c             	shl    eax,0xc
c0011c68:	5e                   	pop    esi
c0011c69:	5f                   	pop    edi
c0011c6a:	5d                   	pop    ebp
c0011c6b:	c3                   	ret    
c0011c6c:	6a 02                	push   0x2
c0011c6e:	bb 01 00 00 00       	mov    ebx,0x1
c0011c73:	50                   	push   eax
c0011c74:	e8 b9 fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c79:	58                   	pop    eax
c0011c7a:	5a                   	pop    edx
c0011c7b:	eb bd                	jmp    c0011c3a <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c7d:	6a 04                	push   0x4
c0011c7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c82:	55                   	push   ebp
c0011c83:	a3 84 d5 02 c0       	mov    ds:0xc002d584,eax
c0011c88:	e8 a5 fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c8d:	59                   	pop    ecx
c0011c8e:	89 e8                	mov    eax,ebp
c0011c90:	5b                   	pop    ebx
c0011c91:	c1 e0 0c             	shl    eax,0xc
c0011c94:	83 c4 1c             	add    esp,0x1c
c0011c97:	5b                   	pop    ebx
c0011c98:	5e                   	pop    esi
c0011c99:	5f                   	pop    edi
c0011c9a:	5d                   	pop    ebp
c0011c9b:	c3                   	ret    

c0011c9c <Virt::freeSwapfilePage(unsigned long)>:
c0011c9c:	53                   	push   ebx
c0011c9d:	8b 15 64 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e764
c0011ca3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ca7:	b8 01 00 00 00       	mov    eax,0x1
c0011cac:	89 cb                	mov    ebx,ecx
c0011cae:	d3 e0                	shl    eax,cl
c0011cb0:	c1 eb 05             	shr    ebx,0x5
c0011cb3:	f7 d0                	not    eax
c0011cb5:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011cb8:	5b                   	pop    ebx
c0011cb9:	c3                   	ret    

c0011cba <Virt::swapIDToSector(unsigned long)>:
c0011cba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cbe:	0f af 05 8c d5 02 c0 	imul   eax,DWORD PTR ds:0xc002d58c
c0011cc5:	03 05 94 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d594
c0011ccb:	c3                   	ret    

c0011ccc <Virt::allocateSwapfilePage()>:
c0011ccc:	55                   	push   ebp
c0011ccd:	31 d2                	xor    edx,edx
c0011ccf:	57                   	push   edi
c0011cd0:	56                   	push   esi
c0011cd1:	53                   	push   ebx
c0011cd2:	83 ec 0c             	sub    esp,0xc
c0011cd5:	8b 0d 8c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d58c
c0011cdb:	a1 90 d5 02 c0       	mov    eax,ds:0xc002d590
c0011ce0:	f7 f1                	div    ecx
c0011ce2:	39 0d 90 d5 02 c0    	cmp    DWORD PTR ds:0xc002d590,ecx
c0011ce8:	72 2d                	jb     c0011d17 <Virt::allocateSwapfilePage()+0x4b>
c0011cea:	8b 35 64 e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e764
c0011cf0:	8b 16                	mov    edx,DWORD PTR [esi]
c0011cf2:	f6 c2 01             	test   dl,0x1
c0011cf5:	74 3c                	je     c0011d33 <Virt::allocateSwapfilePage()+0x67>
c0011cf7:	31 c9                	xor    ecx,ecx
c0011cf9:	bf 01 00 00 00       	mov    edi,0x1
c0011cfe:	eb 12                	jmp    c0011d12 <Virt::allocateSwapfilePage()+0x46>
c0011d00:	89 fd                	mov    ebp,edi
c0011d02:	89 ca                	mov    edx,ecx
c0011d04:	d3 e5                	shl    ebp,cl
c0011d06:	c1 ea 05             	shr    edx,0x5
c0011d09:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d0c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d0e:	85 ea                	test   edx,ebp
c0011d10:	74 2a                	je     c0011d3c <Virt::allocateSwapfilePage()+0x70>
c0011d12:	41                   	inc    ecx
c0011d13:	39 c8                	cmp    eax,ecx
c0011d15:	77 e9                	ja     c0011d00 <Virt::allocateSwapfilePage()+0x34>
c0011d17:	83 ec 0c             	sub    esp,0xc
c0011d1a:	68 2a a8 02 c0       	push   0xc002a82a
c0011d1f:	e8 eb 88 00 00       	call   c001a60f <Krnl::panic(char const*)>
c0011d24:	83 c4 10             	add    esp,0x10
c0011d27:	31 c9                	xor    ecx,ecx
c0011d29:	83 c4 0c             	add    esp,0xc
c0011d2c:	89 c8                	mov    eax,ecx
c0011d2e:	5b                   	pop    ebx
c0011d2f:	5e                   	pop    esi
c0011d30:	5f                   	pop    edi
c0011d31:	5d                   	pop    ebp
c0011d32:	c3                   	ret    
c0011d33:	89 f3                	mov    ebx,esi
c0011d35:	bd 01 00 00 00       	mov    ebp,0x1
c0011d3a:	31 c9                	xor    ecx,ecx
c0011d3c:	09 ea                	or     edx,ebp
c0011d3e:	89 c8                	mov    eax,ecx
c0011d40:	89 13                	mov    DWORD PTR [ebx],edx
c0011d42:	83 c4 0c             	add    esp,0xc
c0011d45:	5b                   	pop    ebx
c0011d46:	5e                   	pop    esi
c0011d47:	5f                   	pop    edi
c0011d48:	5d                   	pop    ebp
c0011d49:	c3                   	ret    

c0011d4a <Virt::virtualMemorySetup()>:
c0011d4a:	53                   	push   ebx
c0011d4b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d50:	83 ec 08             	sub    esp,0x8
c0011d53:	6a 0f                	push   0xf
c0011d55:	53                   	push   ebx
c0011d56:	43                   	inc    ebx
c0011d57:	e8 d6 fd ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d5c:	59                   	pop    ecx
c0011d5d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d63:	58                   	pop    eax
c0011d64:	75 ed                	jne    c0011d53 <Virt::virtualMemorySetup()+0x9>
c0011d66:	83 ec 08             	sub    esp,0x8
c0011d69:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d6e:	68 00 00 00 c8       	push   0xc8000000
c0011d73:	68 41 a8 02 c0       	push   0xc002a841
c0011d78:	e8 f1 11 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0011d7d:	58                   	pop    eax
c0011d7e:	5a                   	pop    edx
c0011d7f:	68 00 f0 ff ef       	push   0xeffff000
c0011d84:	68 55 a8 02 c0       	push   0xc002a855
c0011d89:	e8 e0 11 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0011d8e:	83 c4 10             	add    esp,0x10
c0011d91:	83 ec 08             	sub    esp,0x8
c0011d94:	6a 00                	push   0x0
c0011d96:	53                   	push   ebx
c0011d97:	43                   	inc    ebx
c0011d98:	e8 95 fd ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d9d:	83 c4 10             	add    esp,0x10
c0011da0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011da6:	75 e9                	jne    c0011d91 <Virt::virtualMemorySetup()+0x47>
c0011da8:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011dad:	83 ec 08             	sub    esp,0x8
c0011db0:	6a 0f                	push   0xf
c0011db2:	53                   	push   ebx
c0011db3:	43                   	inc    ebx
c0011db4:	e8 79 fd ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db9:	83 c4 10             	add    esp,0x10
c0011dbc:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011dc2:	75 e9                	jne    c0011dad <Virt::virtualMemorySetup()+0x63>
c0011dc4:	83 c4 08             	add    esp,0x8
c0011dc7:	5b                   	pop    ebx
c0011dc8:	c3                   	ret    

c0011dc9 <Virt::swappingSetup()>:
c0011dc9:	83 ec 14             	sub    esp,0x14
c0011dcc:	31 d2                	xor    edx,edx
c0011dce:	a1 90 d5 02 c0       	mov    eax,ds:0xc002d590
c0011dd3:	f7 35 8c d5 02 c0    	div    DWORD PTR ds:0xc002d58c
c0011dd9:	c1 e8 05             	shr    eax,0x5
c0011ddc:	50                   	push   eax
c0011ddd:	68 69 a8 02 c0       	push   0xc002a869
c0011de2:	e8 87 11 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0011de7:	a1 90 d5 02 c0       	mov    eax,ds:0xc002d590
c0011dec:	31 d2                	xor    edx,edx
c0011dee:	f7 35 8c d5 02 c0    	div    DWORD PTR ds:0xc002d58c
c0011df4:	c1 e8 05             	shr    eax,0x5
c0011df7:	89 04 24             	mov    DWORD PTR [esp],eax
c0011dfa:	e8 41 da ff ff       	call   c000f840 <malloc>
c0011dff:	83 c4 0c             	add    esp,0xc
c0011e02:	89 c1                	mov    ecx,eax
c0011e04:	a3 64 e7 02 c0       	mov    ds:0xc002e764,eax
c0011e09:	31 d2                	xor    edx,edx
c0011e0b:	a1 90 d5 02 c0       	mov    eax,ds:0xc002d590
c0011e10:	f7 35 8c d5 02 c0    	div    DWORD PTR ds:0xc002d58c
c0011e16:	c1 e8 05             	shr    eax,0x5
c0011e19:	50                   	push   eax
c0011e1a:	6a 00                	push   0x0
c0011e1c:	51                   	push   ecx
c0011e1d:	e8 56 e9 fe ff       	call   c0000778 <memset>
c0011e22:	83 c4 1c             	add    esp,0x1c
c0011e25:	c3                   	ret    

c0011e26 <Virt::getAKernelVAS()>:
c0011e26:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0011e2b:	c3                   	ret    

c0011e2c <Virt::setupPageSwapping(int)>:
c0011e2c:	57                   	push   edi
c0011e2d:	56                   	push   esi
c0011e2e:	53                   	push   ebx
c0011e2f:	83 ec 1c             	sub    esp,0x1c
c0011e32:	68 14 01 00 00       	push   0x114
c0011e37:	e8 04 da ff ff       	call   c000f840 <malloc>
c0011e3c:	83 c4 0c             	add    esp,0xc
c0011e3f:	89 c6                	mov    esi,eax
c0011e41:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c0011e47:	68 84 a8 02 c0       	push   0xc002a884
c0011e4c:	50                   	push   eax
c0011e4d:	e8 74 16 00 00       	call   c00134c6 <File::File(char const*, Process*)>
c0011e52:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e55:	e8 48 18 00 00       	call   c00136a2 <File::unlink()>
c0011e5a:	58                   	pop    eax
c0011e5b:	5a                   	pop    edx
c0011e5c:	6a 12                	push   0x12
c0011e5e:	56                   	push   esi
c0011e5f:	e8 c6 16 00 00       	call   c001352a <File::open(FileOpenMode)>
c0011e64:	83 c4 10             	add    esp,0x10
c0011e67:	85 c0                	test   eax,eax
c0011e69:	0f 85 ca 00 00 00    	jne    c0011f39 <Virt::setupPageSwapping(int)+0x10d>
c0011e6f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e7b:	c1 e3 08             	shl    ebx,0x8
c0011e7e:	83 ec 0c             	sub    esp,0xc
c0011e81:	68 00 00 01 00       	push   0x10000
c0011e86:	e8 b5 d9 ff ff       	call   c000f840 <malloc>
c0011e8b:	83 c4 0c             	add    esp,0xc
c0011e8e:	89 c7                	mov    edi,eax
c0011e90:	68 00 00 01 00       	push   0x10000
c0011e95:	6a 00                	push   0x0
c0011e97:	50                   	push   eax
c0011e98:	e8 db e8 fe ff       	call   c0000778 <memset>
c0011e9d:	83 c4 10             	add    esp,0x10
c0011ea0:	85 db                	test   ebx,ebx
c0011ea2:	79 03                	jns    c0011ea7 <Virt::setupPageSwapping(int)+0x7b>
c0011ea4:	83 c3 0f             	add    ebx,0xf
c0011ea7:	c1 fb 04             	sar    ebx,0x4
c0011eaa:	4b                   	dec    ebx
c0011eab:	83 fb ff             	cmp    ebx,0xffffffff
c0011eae:	74 4b                	je     c0011efb <Virt::setupPageSwapping(int)+0xcf>
c0011eb0:	83 ec 0c             	sub    esp,0xc
c0011eb3:	8b 06                	mov    eax,DWORD PTR [esi]
c0011eb5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011eb9:	52                   	push   edx
c0011eba:	57                   	push   edi
c0011ebb:	6a 00                	push   0x0
c0011ebd:	68 00 00 01 00       	push   0x10000
c0011ec2:	56                   	push   esi
c0011ec3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011ec6:	83 c4 20             	add    esp,0x20
c0011ec9:	85 c0                	test   eax,eax
c0011ecb:	75 59                	jne    c0011f26 <Virt::setupPageSwapping(int)+0xfa>
c0011ecd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ed1:	3d 00 00 01 00       	cmp    eax,0x10000
c0011ed6:	74 d2                	je     c0011eaa <Virt::setupPageSwapping(int)+0x7e>
c0011ed8:	83 ec 08             	sub    esp,0x8
c0011edb:	4b                   	dec    ebx
c0011edc:	50                   	push   eax
c0011edd:	68 d7 a8 02 c0       	push   0xc002a8d7
c0011ee2:	e8 87 10 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0011ee7:	c7 04 24 e0 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8e0
c0011eee:	e8 1c 87 00 00       	call   c001a60f <Krnl::panic(char const*)>
c0011ef3:	83 c4 10             	add    esp,0x10
c0011ef6:	83 fb ff             	cmp    ebx,0xffffffff
c0011ef9:	75 b5                	jne    c0011eb0 <Virt::setupPageSwapping(int)+0x84>
c0011efb:	83 ec 0c             	sub    esp,0xc
c0011efe:	56                   	push   esi
c0011eff:	e8 84 16 00 00       	call   c0013588 <File::close()>
c0011f04:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f07:	e8 54 d9 ff ff       	call   c000f860 <rfree>
c0011f0c:	83 c4 10             	add    esp,0x10
c0011f0f:	85 f6                	test   esi,esi
c0011f11:	74 0c                	je     c0011f1f <Virt::setupPageSwapping(int)+0xf3>
c0011f13:	83 ec 0c             	sub    esp,0xc
c0011f16:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f18:	56                   	push   esi
c0011f19:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f1c:	83 c4 10             	add    esp,0x10
c0011f1f:	83 c4 10             	add    esp,0x10
c0011f22:	5b                   	pop    ebx
c0011f23:	5e                   	pop    esi
c0011f24:	5f                   	pop    edi
c0011f25:	c3                   	ret    
c0011f26:	83 ec 08             	sub    esp,0x8
c0011f29:	50                   	push   eax
c0011f2a:	68 bf a8 02 c0       	push   0xc002a8bf
c0011f2f:	e8 3a 10 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0011f34:	83 c4 10             	add    esp,0x10
c0011f37:	eb 94                	jmp    c0011ecd <Virt::setupPageSwapping(int)+0xa1>
c0011f39:	83 ec 08             	sub    esp,0x8
c0011f3c:	50                   	push   eax
c0011f3d:	68 9b a8 02 c0       	push   0xc002a89b
c0011f42:	e8 27 10 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0011f47:	c7 04 24 a4 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8a4
c0011f4e:	e8 bc 86 00 00       	call   c001a60f <Krnl::panic(char const*)>
c0011f53:	83 c4 10             	add    esp,0x10
c0011f56:	e9 14 ff ff ff       	jmp    c0011e6f <Virt::setupPageSwapping(int)+0x43>
c0011f5b:	90                   	nop

c0011f5c <VAS::VAS()>:
c0011f5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f60:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f6b:	a3 68 e7 02 c0       	mov    ds:0xc002e768,eax
c0011f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f74:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f7c:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f83:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f8a:	90                   	nop
c0011f8b:	c3                   	ret    

c0011f8c <VAS::VAS(VAS*)>:
c0011f8c:	83 ec 0c             	sub    esp,0xc
c0011f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f9a:	83 ec 0c             	sub    esp,0xc
c0011f9d:	68 f8 a5 02 c0       	push   0xc002a5f8
c0011fa2:	e8 68 86 00 00       	call   c001a60f <Krnl::panic(char const*)>
c0011fa7:	83 c4 10             	add    esp,0x10
c0011faa:	90                   	nop
c0011fab:	83 c4 0c             	add    esp,0xc
c0011fae:	c3                   	ret    
c0011faf:	90                   	nop

c0011fb0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fb4:	89 c2                	mov    edx,eax
c0011fb6:	c1 e8 0a             	shr    eax,0xa
c0011fb9:	c1 ea 16             	shr    edx,0x16
c0011fbc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fc1:	19 c9                	sbb    ecx,ecx
c0011fc3:	c1 e2 0c             	shl    edx,0xc
c0011fc6:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fcc:	25 fc 0f 00 00       	and    eax,0xffc
c0011fd1:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fd8:	01 d0                	add    eax,edx
c0011fda:	c3                   	ret    
c0011fdb:	90                   	nop

c0011fdc <VAS::getPageTableEntry(unsigned long)>:
c0011fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011fe0:	89 ca                	mov    edx,ecx
c0011fe2:	c1 e9 0a             	shr    ecx,0xa
c0011fe5:	c1 ea 16             	shr    edx,0x16
c0011fe8:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011fee:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011ff4:	c1 e0 0c             	shl    eax,0xc
c0011ff7:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011ffa:	c3                   	ret    

c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>:
c0011ffb:	57                   	push   edi
c0011ffc:	56                   	push   esi
c0011ffd:	be 01 00 00 00       	mov    esi,0x1
c0012002:	53                   	push   ebx
c0012003:	83 ec 10             	sub    esp,0x10
c0012006:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001200a:	c1 eb 0c             	shr    ebx,0xc
c001200d:	eb 3f                	jmp    c001204e <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001200f:	e8 12 fe ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0012014:	83 ec 08             	sub    esp,0x8
c0012017:	57                   	push   edi
c0012018:	50                   	push   eax
c0012019:	e8 be ff ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001201e:	83 c4 10             	add    esp,0x10
c0012021:	8b 00                	mov    eax,DWORD PTR [eax]
c0012023:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012027:	f6 c4 04             	test   ah,0x4
c001202a:	75 5f                	jne    c001208b <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001202c:	80 fa 04             	cmp    dl,0x4
c001202f:	74 78                	je     c00120a9 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012031:	80 fa 02             	cmp    dl,0x2
c0012034:	0f 84 88 00 00 00    	je     c00120c2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001203a:	80 fa 03             	cmp    dl,0x3
c001203d:	0f 84 ad 00 00 00    	je     c00120f0 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012043:	fe ca                	dec    dl
c0012045:	0f 84 92 00 00 00    	je     c00120dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001204b:	43                   	inc    ebx
c001204c:	31 f6                	xor    esi,esi
c001204e:	53                   	push   ebx
c001204f:	e8 13 fb ff ff       	call   c0011b67 <Virt::getPageState(unsigned long)>
c0012054:	5f                   	pop    edi
c0012055:	89 df                	mov    edi,ebx
c0012057:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001205b:	c1 e7 0c             	shl    edi,0xc
c001205e:	84 c0                	test   al,al
c0012060:	75 ad                	jne    c001200f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012062:	83 ec 0c             	sub    esp,0xc
c0012065:	68 e6 a8 02 c0       	push   0xc002a8e6
c001206a:	e8 a0 85 00 00       	call   c001a60f <Krnl::panic(char const*)>
c001206f:	e8 b2 fd ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0012074:	5a                   	pop    edx
c0012075:	59                   	pop    ecx
c0012076:	57                   	push   edi
c0012077:	50                   	push   eax
c0012078:	e8 5f ff ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001207d:	83 c4 10             	add    esp,0x10
c0012080:	8b 00                	mov    eax,DWORD PTR [eax]
c0012082:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012086:	f6 c4 04             	test   ah,0x4
c0012089:	74 c0                	je     c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001208b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001208f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012094:	83 ec 0c             	sub    esp,0xc
c0012097:	50                   	push   eax
c0012098:	e8 bb dd ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001209d:	83 c4 10             	add    esp,0x10
c00120a0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120a4:	80 fa 04             	cmp    dl,0x4
c00120a7:	75 88                	jne    c0012031 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120a9:	89 f0                	mov    eax,esi
c00120ab:	84 c0                	test   al,al
c00120ad:	75 47                	jne    c00120f6 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120af:	c7 44 24 20 1c a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a61c
c00120b7:	83 c4 10             	add    esp,0x10
c00120ba:	5b                   	pop    ebx
c00120bb:	5e                   	pop    esi
c00120bc:	5f                   	pop    edi
c00120bd:	e9 4d 85 00 00       	jmp    c001a60f <Krnl::panic(char const*)>
c00120c2:	89 f0                	mov    eax,esi
c00120c4:	84 c0                	test   al,al
c00120c6:	75 15                	jne    c00120dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120c8:	83 ec 0c             	sub    esp,0xc
c00120cb:	68 02 a9 02 c0       	push   0xc002a902
c00120d0:	e8 3a 85 00 00       	call   c001a60f <Krnl::panic(char const*)>
c00120d5:	83 c4 10             	add    esp,0x10
c00120d8:	e9 6e ff ff ff       	jmp    c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120dd:	83 ec 08             	sub    esp,0x8
c00120e0:	6a 00                	push   0x0
c00120e2:	53                   	push   ebx
c00120e3:	e8 4a fa ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120e8:	83 c4 10             	add    esp,0x10
c00120eb:	e9 5b ff ff ff       	jmp    c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120f0:	89 f0                	mov    eax,esi
c00120f2:	84 c0                	test   al,al
c00120f4:	75 15                	jne    c001210b <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00120f6:	83 ec 08             	sub    esp,0x8
c00120f9:	6a 00                	push   0x0
c00120fb:	53                   	push   ebx
c00120fc:	e8 31 fa ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012101:	83 c4 10             	add    esp,0x10
c0012104:	83 c4 10             	add    esp,0x10
c0012107:	5b                   	pop    ebx
c0012108:	5e                   	pop    esi
c0012109:	5f                   	pop    edi
c001210a:	c3                   	ret    
c001210b:	c7 44 24 20 1e a9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a91e
c0012113:	83 c4 10             	add    esp,0x10
c0012116:	5b                   	pop    ebx
c0012117:	5e                   	pop    esi
c0012118:	5f                   	pop    edi
c0012119:	e9 f1 84 00 00       	jmp    c001a60f <Krnl::panic(char const*)>

c001211e <VAS::freeAllocatedPages(unsigned long)>:
c001211e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012122:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012126:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001212a:	74 09                	je     c0012135 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001212c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012130:	e9 c6 fe ff ff       	jmp    c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0012135:	c7 44 24 04 40 a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a640
c001213d:	e9 2c 0e 00 00       	jmp    c0012f6e <Dbg::kprintf(char const*, ...)>

c0012142 <VAS::virtualToPhysical(unsigned long)>:
c0012142:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012146:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001214a:	e8 8d fe ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001214f:	5a                   	pop    edx
c0012150:	8b 00                	mov    eax,DWORD PTR [eax]
c0012152:	59                   	pop    ecx
c0012153:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012158:	c3                   	ret    
c0012159:	90                   	nop

c001215a <VAS::reflagRange(unsigned long, int, int, int)>:
c001215a:	55                   	push   ebp
c001215b:	57                   	push   edi
c001215c:	56                   	push   esi
c001215d:	53                   	push   ebx
c001215e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012162:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012166:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001216a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001216e:	85 db                	test   ebx,ebx
c0012170:	7e 22                	jle    c0012194 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012172:	c1 e3 0c             	shl    ebx,0xc
c0012175:	01 f3                	add    ebx,esi
c0012177:	56                   	push   esi
c0012178:	81 c6 00 10 00 00    	add    esi,0x1000
c001217e:	55                   	push   ebp
c001217f:	e8 58 fe ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012184:	5a                   	pop    edx
c0012185:	59                   	pop    ecx
c0012186:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012188:	21 f9                	and    ecx,edi
c001218a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001218e:	39 f3                	cmp    ebx,esi
c0012190:	89 08                	mov    DWORD PTR [eax],ecx
c0012192:	75 e3                	jne    c0012177 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012194:	5b                   	pop    ebx
c0012195:	5e                   	pop    esi
c0012196:	5f                   	pop    edi
c0012197:	5d                   	pop    ebp
c0012198:	c3                   	ret    
c0012199:	90                   	nop

c001219a <VAS::setToWriteCombining(unsigned long, int)>:
c001219a:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001219f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121a5:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121ac:	75 01                	jne    c00121af <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121ae:	c3                   	ret    
c00121af:	68 80 00 00 00       	push   0x80
c00121b4:	6a ff                	push   0xffffffff
c00121b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121c2:	e8 93 ff ff ff       	call   c001215a <VAS::reflagRange(unsigned long, int, int, int)>
c00121c7:	83 c4 14             	add    esp,0x14
c00121ca:	c3                   	ret    
c00121cb:	90                   	nop

c00121cc <VAS::mapOtherVASIn(bool, VAS*)>:
c00121cc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121d5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121dc:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121df:	19 c0                	sbb    eax,eax
c00121e1:	83 ca 03             	or     edx,0x3
c00121e4:	83 e0 fc             	and    eax,0xfffffffc
c00121e7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121ee:	0f 20 d8             	mov    eax,cr3
c00121f1:	0f 22 d8             	mov    cr3,eax
c00121f4:	c3                   	ret    
c00121f5:	90                   	nop

c00121f6 <VAS::~VAS()>:
c00121f6:	83 ec 2c             	sub    esp,0x2c
c00121f9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012201:	e8 2e bc 00 00       	call   c001de34 <lockScheduler()>
c0012206:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001220b:	8b 00                	mov    eax,DWORD PTR [eax]
c001220d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012210:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012216:	83 ec 04             	sub    esp,0x4
c0012219:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001221d:	6a 01                	push   0x1
c001221f:	50                   	push   eax
c0012220:	e8 a7 ff ff ff       	call   c00121cc <VAS::mapOtherVASIn(bool, VAS*)>
c0012225:	83 c4 10             	add    esp,0x10
c0012228:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012230:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012238:	0f 8f d7 00 00 00    	jg     c0012315 <VAS::~VAS()+0x11f>
c001223e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012242:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012245:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012249:	c1 e2 02             	shl    edx,0x2
c001224c:	01 d0                	add    eax,edx
c001224e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012250:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012258:	83 e0 01             	and    eax,0x1
c001225b:	0f 84 ab 00 00 00    	je     c001230c <VAS::~VAS()+0x116>
c0012261:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012269:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012271:	7f 75                	jg     c00122e8 <VAS::~VAS()+0xf2>
c0012273:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012277:	c1 e0 0a             	shl    eax,0xa
c001227a:	89 c2                	mov    edx,eax
c001227c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012280:	01 d0                	add    eax,edx
c0012282:	c1 e0 0c             	shl    eax,0xc
c0012285:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012289:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001228e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012290:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012293:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012299:	83 ec 04             	sub    esp,0x4
c001229c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122a0:	6a 01                	push   0x1
c00122a2:	50                   	push   eax
c00122a3:	e8 08 fd ff ff       	call   c0011fb0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122a8:	83 c4 10             	add    esp,0x10
c00122ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00122b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122bd:	25 01 04 00 00       	and    eax,0x401
c00122c2:	3d 01 04 00 00       	cmp    eax,0x401
c00122c7:	75 19                	jne    c00122e2 <VAS::~VAS()+0xec>
c00122c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122d2:	83 ec 0c             	sub    esp,0xc
c00122d5:	50                   	push   eax
c00122d6:	e8 7d db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00122db:	83 c4 10             	add    esp,0x10
c00122de:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122e2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122e6:	eb 81                	jmp    c0012269 <VAS::~VAS()+0x73>
c00122e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122ec:	25 00 04 00 00       	and    eax,0x400
c00122f1:	74 19                	je     c001230c <VAS::~VAS()+0x116>
c00122f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122f7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122fc:	83 ec 0c             	sub    esp,0xc
c00122ff:	50                   	push   eax
c0012300:	e8 53 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012305:	83 c4 10             	add    esp,0x10
c0012308:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001230c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012310:	e9 1b ff ff ff       	jmp    c0012230 <VAS::~VAS()+0x3a>
c0012315:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012319:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001231c:	83 ec 0c             	sub    esp,0xc
c001231f:	50                   	push   eax
c0012320:	e8 d6 fc ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0012325:	83 c4 10             	add    esp,0x10
c0012328:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001232c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001232f:	83 ec 0c             	sub    esp,0xc
c0012332:	50                   	push   eax
c0012333:	e8 20 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012338:	83 c4 10             	add    esp,0x10
c001233b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001233f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012343:	c1 e0 02             	shl    eax,0x2
c0012346:	83 ec 08             	sub    esp,0x8
c0012349:	50                   	push   eax
c001234a:	68 64 a6 02 c0       	push   0xc002a664
c001234f:	e8 1a 0c 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012354:	83 c4 10             	add    esp,0x10
c0012357:	e8 da ba 00 00       	call   c001de36 <unlockScheduler()>
c001235c:	90                   	nop
c001235d:	83 c4 2c             	add    esp,0x2c
c0012360:	c3                   	ret    
c0012361:	90                   	nop

c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012362:	55                   	push   ebp
c0012363:	57                   	push   edi
c0012364:	56                   	push   esi
c0012365:	53                   	push   ebx
c0012366:	83 ec 1c             	sub    esp,0x1c
c0012369:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001236d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012371:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012377:	77 08                	ja     c0012381 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012379:	0f 20 d8             	mov    eax,cr3
c001237c:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001237f:	75 47                	jne    c00123c8 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012381:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012385:	09 d8                	or     eax,ebx
c0012387:	a9 ff 0f 00 00       	test   eax,0xfff
c001238c:	75 57                	jne    c00123e5 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001238e:	89 de                	mov    esi,ebx
c0012390:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012393:	c1 ee 16             	shr    esi,0x16
c0012396:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001239d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123a1:	74 54                	je     c00123f7 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123a7:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123ad:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123b1:	c1 e6 0c             	shl    esi,0xc
c00123b4:	c1 eb 0a             	shr    ebx,0xa
c00123b7:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123bd:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123c0:	83 c4 1c             	add    esp,0x1c
c00123c3:	5b                   	pop    ebx
c00123c4:	5e                   	pop    esi
c00123c5:	5f                   	pop    edi
c00123c6:	5d                   	pop    ebp
c00123c7:	c3                   	ret    
c00123c8:	83 ec 0c             	sub    esp,0xc
c00123cb:	68 84 a6 02 c0       	push   0xc002a684
c00123d0:	e8 99 0b 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00123d5:	83 c4 10             	add    esp,0x10
c00123d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123dc:	09 d8                	or     eax,ebx
c00123de:	a9 ff 0f 00 00       	test   eax,0xfff
c00123e3:	74 a9                	je     c001238e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123e5:	83 ec 0c             	sub    esp,0xc
c00123e8:	68 ec a6 02 c0       	push   0xc002a6ec
c00123ed:	e8 1d 82 00 00       	call   c001a60f <Krnl::panic(char const*)>
c00123f2:	83 c4 10             	add    esp,0x10
c00123f5:	eb 97                	jmp    c001238e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123fb:	e8 e2 da ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012400:	89 c5                	mov    ebp,eax
c0012402:	e8 1f fa ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0012407:	83 ec 0c             	sub    esp,0xc
c001240a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001240e:	6a 01                	push   0x1
c0012410:	e8 76 f7 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0012415:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001241c:	6a 01                	push   0x1
c001241e:	50                   	push   eax
c001241f:	55                   	push   ebp
c0012420:	81 cd 07 04 00 00    	or     ebp,0x407
c0012426:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001242a:	51                   	push   ecx
c001242b:	e8 26 02 00 00       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012430:	83 c4 1c             	add    esp,0x1c
c0012433:	68 00 10 00 00       	push   0x1000
c0012438:	6a 00                	push   0x0
c001243a:	50                   	push   eax
c001243b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001243f:	e8 34 e3 fe ff       	call   c0000778 <memset>
c0012444:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012448:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001244b:	e8 ab fb ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0012450:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012454:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012457:	83 c4 10             	add    esp,0x10
c001245a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001245d:	e9 41 ff ff ff       	jmp    c00123a3 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012462 <VAS::allocatePages(int, int)>:
c0012462:	55                   	push   ebp
c0012463:	57                   	push   edi
c0012464:	56                   	push   esi
c0012465:	53                   	push   ebx
c0012466:	83 ec 1c             	sub    esp,0x1c
c0012469:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001246d:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0012472:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012478:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001247e:	83 e0 01             	and    eax,0x1
c0012481:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012485:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012489:	0f 85 cc 00 00 00    	jne    c001255b <VAS::allocatePages(int, int)+0xf9>
c001248f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012492:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012496:	85 c0                	test   eax,eax
c0012498:	0f 84 a1 00 00 00    	je     c001253f <VAS::allocatePages(int, int)+0xdd>
c001249e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124a6:	c1 e6 0c             	shl    esi,0xc
c00124a9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124ad:	85 c0                	test   eax,eax
c00124af:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124b2:	7e 33                	jle    c00124e7 <VAS::allocatePages(int, int)+0x85>
c00124b4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124b8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124bc:	81 cd 00 04 00 00    	or     ebp,0x400
c00124c2:	e8 1b da ff ff       	call   c000fee2 <Phys::allocatePage()>
c00124c7:	55                   	push   ebp
c00124c8:	53                   	push   ebx
c00124c9:	50                   	push   eax
c00124ca:	57                   	push   edi
c00124cb:	e8 92 fe ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124d0:	83 c4 10             	add    esp,0x10
c00124d3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124d8:	74 03                	je     c00124dd <VAS::allocatePages(int, int)+0x7b>
c00124da:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124dd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124e3:	39 de                	cmp    esi,ebx
c00124e5:	75 db                	jne    c00124c2 <VAS::allocatePages(int, int)+0x60>
c00124e7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ec:	75 12                	jne    c0012500 <VAS::allocatePages(int, int)+0x9e>
c00124ee:	0f 20 d8             	mov    eax,cr3
c00124f1:	0f 22 d8             	mov    cr3,eax
c00124f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124f8:	83 c4 1c             	add    esp,0x1c
c00124fb:	5b                   	pop    ebx
c00124fc:	5e                   	pop    esi
c00124fd:	5f                   	pop    edi
c00124fe:	5d                   	pop    ebp
c00124ff:	c3                   	ret    
c0012500:	c1 ee 0a             	shr    esi,0xa
c0012503:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012507:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001250d:	c1 eb 0a             	shr    ebx,0xa
c0012510:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012516:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001251c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012522:	39 c3                	cmp    ebx,eax
c0012524:	77 ce                	ja     c00124f4 <VAS::allocatePages(int, int)+0x92>
c0012526:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012529:	81 c3 00 10 00 00    	add    ebx,0x1000
c001252f:	39 d8                	cmp    eax,ebx
c0012531:	73 f3                	jae    c0012526 <VAS::allocatePages(int, int)+0xc4>
c0012533:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012537:	83 c4 1c             	add    esp,0x1c
c001253a:	5b                   	pop    ebx
c001253b:	5e                   	pop    esi
c001253c:	5f                   	pop    edi
c001253d:	5d                   	pop    ebp
c001253e:	c3                   	ret    
c001253f:	83 ec 0c             	sub    esp,0xc
c0012542:	68 10 a7 02 c0       	push   0xc002a710
c0012547:	e8 c3 80 00 00       	call   c001a60f <Krnl::panic(char const*)>
c001254c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001254f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012553:	83 c4 10             	add    esp,0x10
c0012556:	e9 43 ff ff ff       	jmp    c001249e <VAS::allocatePages(int, int)+0x3c>
c001255b:	83 ec 0c             	sub    esp,0xc
c001255e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012562:	e8 24 f6 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0012567:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001256b:	83 c4 10             	add    esp,0x10
c001256e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012573:	0f 87 9b 00 00 00    	ja     c0012614 <VAS::allocatePages(int, int)+0x1b2>
c0012579:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001257d:	85 d2                	test   edx,edx
c001257f:	7e 3c                	jle    c00125bd <VAS::allocatePages(int, int)+0x15b>
c0012581:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012585:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012589:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001258d:	c1 e5 0c             	shl    ebp,0xc
c0012590:	81 ce 00 04 00 00    	or     esi,0x400
c0012596:	01 dd                	add    ebp,ebx
c0012598:	e8 45 d9 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001259d:	56                   	push   esi
c001259e:	53                   	push   ebx
c001259f:	50                   	push   eax
c00125a0:	57                   	push   edi
c00125a1:	e8 bc fd ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125a6:	83 c4 10             	add    esp,0x10
c00125a9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125ae:	74 03                	je     c00125b3 <VAS::allocatePages(int, int)+0x151>
c00125b0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125b9:	39 dd                	cmp    ebp,ebx
c00125bb:	75 db                	jne    c0012598 <VAS::allocatePages(int, int)+0x136>
c00125bd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c2:	0f 84 26 ff ff ff    	je     c00124ee <VAS::allocatePages(int, int)+0x8c>
c00125c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125d0:	89 d3                	mov    ebx,edx
c00125d2:	c1 e0 0c             	shl    eax,0xc
c00125d5:	c1 eb 0a             	shr    ebx,0xa
c00125d8:	01 d0                	add    eax,edx
c00125da:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125e0:	c1 e8 0a             	shr    eax,0xa
c00125e3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125ee:	2d 00 00 40 00       	sub    eax,0x400000
c00125f3:	39 c3                	cmp    ebx,eax
c00125f5:	0f 87 f9 fe ff ff    	ja     c00124f4 <VAS::allocatePages(int, int)+0x92>
c00125fb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125fe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012604:	39 d8                	cmp    eax,ebx
c0012606:	73 f3                	jae    c00125fb <VAS::allocatePages(int, int)+0x199>
c0012608:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001260c:	83 c4 1c             	add    esp,0x1c
c001260f:	5b                   	pop    ebx
c0012610:	5e                   	pop    esi
c0012611:	5f                   	pop    edi
c0012612:	5d                   	pop    ebp
c0012613:	c3                   	ret    
c0012614:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0012619:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001261f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012626:	0f 84 4d ff ff ff    	je     c0012579 <VAS::allocatePages(int, int)+0x117>
c001262c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012634:	e9 40 ff ff ff       	jmp    c0012579 <VAS::allocatePages(int, int)+0x117>
c0012639:	90                   	nop

c001263a <VAS::setCPUSpecific(unsigned long)>:
c001263a:	83 ec 0c             	sub    esp,0xc
c001263d:	6a 05                	push   0x5
c001263f:	68 00 00 40 c2       	push   0xc2400000
c0012644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001264c:	e8 11 fd ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012651:	83 c4 1c             	add    esp,0x1c
c0012654:	c3                   	ret    
c0012655:	90                   	nop

c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012656:	55                   	push   ebp
c0012657:	57                   	push   edi
c0012658:	56                   	push   esi
c0012659:	53                   	push   ebx
c001265a:	83 ec 1c             	sub    esp,0x1c
c001265d:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0012662:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012666:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001266c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012670:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012676:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001267a:	83 e0 01             	and    eax,0x1
c001267d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012681:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012685:	85 c0                	test   eax,eax
c0012687:	7e 39                	jle    c00126c2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012689:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001268d:	89 f3                	mov    ebx,esi
c001268f:	c1 e0 0c             	shl    eax,0xc
c0012692:	01 f0                	add    eax,esi
c0012694:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012698:	55                   	push   ebp
c0012699:	53                   	push   ebx
c001269a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001269e:	29 f0                	sub    eax,esi
c00126a0:	01 d8                	add    eax,ebx
c00126a2:	50                   	push   eax
c00126a3:	57                   	push   edi
c00126a4:	e8 b9 fc ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126a9:	83 c4 10             	add    esp,0x10
c00126ac:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126b1:	74 03                	je     c00126b6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126b3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126b6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126bc:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126c0:	75 d6                	jne    c0012698 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126c2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126c7:	75 10                	jne    c00126d9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126c9:	0f 20 d8             	mov    eax,cr3
c00126cc:	0f 22 d8             	mov    cr3,eax
c00126cf:	83 c4 1c             	add    esp,0x1c
c00126d2:	89 f0                	mov    eax,esi
c00126d4:	5b                   	pop    ebx
c00126d5:	5e                   	pop    esi
c00126d6:	5f                   	pop    edi
c00126d7:	5d                   	pop    ebp
c00126d8:	c3                   	ret    
c00126d9:	89 f3                	mov    ebx,esi
c00126db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126df:	c1 eb 0a             	shr    ebx,0xa
c00126e2:	c1 e0 0c             	shl    eax,0xc
c00126e5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126eb:	01 f0                	add    eax,esi
c00126ed:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126f3:	c1 e8 0a             	shr    eax,0xa
c00126f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126fb:	2d 00 00 40 00       	sub    eax,0x400000
c0012700:	39 c3                	cmp    ebx,eax
c0012702:	77 cb                	ja     c00126cf <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012704:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012707:	81 c3 00 10 00 00    	add    ebx,0x1000
c001270d:	39 d8                	cmp    eax,ebx
c001270f:	73 f3                	jae    c0012704 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012711:	83 c4 1c             	add    esp,0x1c
c0012714:	89 f0                	mov    eax,esi
c0012716:	5b                   	pop    ebx
c0012717:	5e                   	pop    esi
c0012718:	5f                   	pop    edi
c0012719:	5d                   	pop    ebp
c001271a:	c3                   	ret    
c001271b:	90                   	nop

c001271c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001271c:	55                   	push   ebp
c001271d:	57                   	push   edi
c001271e:	56                   	push   esi
c001271f:	53                   	push   ebx
c0012720:	83 ec 1c             	sub    esp,0x1c
c0012723:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012727:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001272b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001272f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012733:	a9 ff 0f 00 00       	test   eax,0xfff
c0012738:	75 4a                	jne    c0012784 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001273a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001273e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012741:	c1 eb 16             	shr    ebx,0x16
c0012744:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001274b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001274f:	74 4d                	je     c001279e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012751:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012755:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012759:	c1 e8 0a             	shr    eax,0xa
c001275c:	80 fa 01             	cmp    dl,0x1
c001275f:	19 d2                	sbb    edx,edx
c0012761:	c1 e3 0c             	shl    ebx,0xc
c0012764:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012768:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001276e:	25 fc 0f 00 00       	and    eax,0xffc
c0012773:	01 d8                	add    eax,ebx
c0012775:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001277c:	83 c4 1c             	add    esp,0x1c
c001277f:	5b                   	pop    ebx
c0012780:	5e                   	pop    esi
c0012781:	5f                   	pop    edi
c0012782:	5d                   	pop    ebp
c0012783:	c3                   	ret    
c0012784:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012788:	83 ec 0c             	sub    esp,0xc
c001278b:	68 3c a7 02 c0       	push   0xc002a73c
c0012790:	e8 7a 7e 00 00       	call   c001a60f <Krnl::panic(char const*)>
c0012795:	83 c4 10             	add    esp,0x10
c0012798:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001279c:	eb 9c                	jmp    c001273a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001279e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127a2:	e8 3b d7 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00127a7:	89 c5                	mov    ebp,eax
c00127a9:	e8 78 f6 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c00127ae:	83 ec 0c             	sub    esp,0xc
c00127b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127b5:	6a 01                	push   0x1
c00127b7:	e8 cf f3 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c00127bc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127c3:	6a 01                	push   0x1
c00127c5:	50                   	push   eax
c00127c6:	55                   	push   ebp
c00127c7:	81 cd 07 04 00 00    	or     ebp,0x407
c00127cd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127d1:	51                   	push   ecx
c00127d2:	e8 7f fe ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127d7:	83 c4 1c             	add    esp,0x1c
c00127da:	68 00 10 00 00       	push   0x1000
c00127df:	6a 00                	push   0x0
c00127e1:	50                   	push   eax
c00127e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127e6:	e8 8d df fe ff       	call   c0000778 <memset>
c00127eb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127f2:	e8 04 f8 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c00127f7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00127fa:	83 c4 10             	add    esp,0x10
c00127fd:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012800:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012804:	e9 48 ff ff ff       	jmp    c0012751 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012809:	90                   	nop

c001280a <VAS::VAS(bool)>:
c001280a:	53                   	push   ebx
c001280b:	83 ec 28             	sub    esp,0x28
c001280e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012812:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012816:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001281a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012821:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012825:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012829:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001282c:	e8 b1 d6 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012831:	89 c2                	mov    edx,eax
c0012833:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012837:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001283a:	e8 e7 f5 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c001283f:	89 c3                	mov    ebx,eax
c0012841:	83 ec 0c             	sub    esp,0xc
c0012844:	6a 01                	push   0x1
c0012846:	e8 40 f3 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c001284b:	83 c4 10             	add    esp,0x10
c001284e:	89 c2                	mov    edx,eax
c0012850:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012854:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012857:	83 ec 0c             	sub    esp,0xc
c001285a:	6a 03                	push   0x3
c001285c:	6a 01                	push   0x1
c001285e:	52                   	push   edx
c001285f:	50                   	push   eax
c0012860:	53                   	push   ebx
c0012861:	e8 f0 fd ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012866:	83 c4 20             	add    esp,0x20
c0012869:	89 c2                	mov    edx,eax
c001286b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001286f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012872:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001287a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012882:	7f 1c                	jg     c00128a0 <VAS::VAS(bool)+0x96>
c0012884:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012888:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001288b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001288f:	c1 e2 02             	shl    edx,0x2
c0012892:	01 d0                	add    eax,edx
c0012894:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001289a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001289e:	eb da                	jmp    c001287a <VAS::VAS(bool)+0x70>
c00128a0:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128a8:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128b0:	7f 7a                	jg     c001292c <VAS::VAS(bool)+0x122>
c00128b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128b6:	2d 00 02 00 00       	sub    eax,0x200
c00128bb:	c1 e0 0c             	shl    eax,0xc
c00128be:	83 c8 03             	or     eax,0x3
c00128c1:	89 c2                	mov    edx,eax
c00128c3:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00128c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128ce:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128d4:	83 e0 10             	and    eax,0x10
c00128d7:	84 c0                	test   al,al
c00128d9:	74 07                	je     c00128e2 <VAS::VAS(bool)+0xd8>
c00128db:	b8 00 01 00 00       	mov    eax,0x100
c00128e0:	eb 05                	jmp    c00128e7 <VAS::VAS(bool)+0xdd>
c00128e2:	b8 00 00 00 00       	mov    eax,0x0
c00128e7:	09 d0                	or     eax,edx
c00128e9:	89 c1                	mov    ecx,eax
c00128eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128f6:	c1 e2 02             	shl    edx,0x2
c00128f9:	01 d0                	add    eax,edx
c00128fb:	89 ca                	mov    edx,ecx
c00128fd:	89 10                	mov    DWORD PTR [eax],edx
c00128ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012903:	2d 40 03 00 00       	sub    eax,0x340
c0012908:	83 f8 7f             	cmp    eax,0x7f
c001290b:	77 16                	ja     c0012923 <VAS::VAS(bool)+0x119>
c001290d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012911:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012914:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012918:	c1 e2 02             	shl    edx,0x2
c001291b:	01 d0                	add    eax,edx
c001291d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012923:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012927:	e9 7c ff ff ff       	jmp    c00128a8 <VAS::VAS(bool)+0x9e>
c001292c:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0012931:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012937:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001293d:	83 e0 10             	and    eax,0x10
c0012940:	84 c0                	test   al,al
c0012942:	74 07                	je     c001294b <VAS::VAS(bool)+0x141>
c0012944:	b8 03 41 00 00       	mov    eax,0x4103
c0012949:	eb 05                	jmp    c0012950 <VAS::VAS(bool)+0x146>
c001294b:	b8 03 40 00 00       	mov    eax,0x4003
c0012950:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012954:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012957:	81 c2 20 0c 00 00    	add    edx,0xc20
c001295d:	89 02                	mov    DWORD PTR [edx],eax
c001295f:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0012964:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001296a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012970:	83 ec 08             	sub    esp,0x8
c0012973:	50                   	push   eax
c0012974:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012978:	e8 bd fc ff ff       	call   c001263a <VAS::setCPUSpecific(unsigned long)>
c001297d:	83 c4 10             	add    esp,0x10
c0012980:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012984:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012987:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001298c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012992:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012998:	83 e0 10             	and    eax,0x10
c001299b:	84 c0                	test   al,al
c001299d:	74 07                	je     c00129a6 <VAS::VAS(bool)+0x19c>
c001299f:	b8 00 01 00 00       	mov    eax,0x100
c00129a4:	eb 05                	jmp    c00129ab <VAS::VAS(bool)+0x1a1>
c00129a6:	b8 00 00 00 00       	mov    eax,0x0
c00129ab:	09 c2                	or     edx,eax
c00129ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129b4:	05 fc 0f 00 00       	add    eax,0xffc
c00129b9:	83 ca 03             	or     edx,0x3
c00129bc:	89 10                	mov    DWORD PTR [eax],edx
c00129be:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00129c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129c9:	83 ec 0c             	sub    esp,0xc
c00129cc:	50                   	push   eax
c00129cd:	e8 ae 1c 00 00       	call   c0014680 <Device::getName()>
c00129d2:	83 c4 10             	add    esp,0x10
c00129d5:	83 ec 08             	sub    esp,0x8
c00129d8:	68 38 a9 02 c0       	push   0xc002a938
c00129dd:	50                   	push   eax
c00129de:	e8 dd de fe ff       	call   c00008c0 <strcmp>
c00129e3:	83 c4 10             	add    esp,0x10
c00129e6:	85 c0                	test   eax,eax
c00129e8:	0f 94 c0             	sete   al
c00129eb:	84 c0                	test   al,al
c00129ed:	74 70                	je     c0012a5f <VAS::VAS(bool)+0x255>
c00129ef:	e8 23 b4 00 00       	call   c001de17 <disableIRQs()>
c00129f4:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00129f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129ff:	05 7c 09 00 00       	add    eax,0x97c
c0012a04:	83 ec 0c             	sub    esp,0xc
c0012a07:	50                   	push   eax
c0012a08:	e8 af c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a0d:	83 c4 10             	add    esp,0x10
c0012a10:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a15:	89 c3                	mov    ebx,eax
c0012a17:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0012a1c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a22:	05 7c 09 00 00       	add    eax,0x97c
c0012a27:	83 ec 0c             	sub    esp,0xc
c0012a2a:	50                   	push   eax
c0012a2b:	e8 8c c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a30:	83 c4 10             	add    esp,0x10
c0012a33:	83 ec 08             	sub    esp,0x8
c0012a36:	50                   	push   eax
c0012a37:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a3b:	e8 9c f5 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012a40:	83 c4 10             	add    esp,0x10
c0012a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a45:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a4a:	6a 11                	push   0x11
c0012a4c:	53                   	push   ebx
c0012a4d:	50                   	push   eax
c0012a4e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a52:	e8 0b f9 ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a57:	83 c4 10             	add    esp,0x10
c0012a5a:	e8 c6 b3 00 00       	call   c001de25 <enableIRQs()>
c0012a5f:	90                   	nop
c0012a60:	83 c4 28             	add    esp,0x28
c0012a63:	5b                   	pop    ebx
c0012a64:	c3                   	ret    
c0012a65:	90                   	nop

c0012a66 <VAS::evict(unsigned long)>:
c0012a66:	55                   	push   ebp
c0012a67:	57                   	push   edi
c0012a68:	56                   	push   esi
c0012a69:	53                   	push   ebx
c0012a6a:	83 ec 1c             	sub    esp,0x1c
c0012a6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a71:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a79:	e8 b6 b3 00 00       	call   c001de34 <lockScheduler()>
c0012a7e:	83 ec 08             	sub    esp,0x8
c0012a81:	55                   	push   ebp
c0012a82:	68 60 a7 02 c0       	push   0xc002a760
c0012a87:	e8 e2 04 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012a8c:	e8 3b f2 ff ff       	call   c0011ccc <Virt::allocateSwapfilePage()>
c0012a91:	83 c4 0c             	add    esp,0xc
c0012a94:	89 c7                	mov    edi,eax
c0012a96:	50                   	push   eax
c0012a97:	50                   	push   eax
c0012a98:	68 46 a9 02 c0       	push   0xc002a946
c0012a9d:	e8 cc 04 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012aa2:	83 c4 10             	add    esp,0x10
c0012aa5:	a1 8c d5 02 c0       	mov    eax,ds:0xc002d58c
c0012aaa:	85 c0                	test   eax,eax
c0012aac:	7e 3d                	jle    c0012aeb <VAS::evict(unsigned long)+0x85>
c0012aae:	89 ee                	mov    esi,ebp
c0012ab0:	31 db                	xor    ebx,ebx
c0012ab2:	83 ec 0c             	sub    esp,0xc
c0012ab5:	57                   	push   edi
c0012ab6:	e8 ff f1 ff ff       	call   c0011cba <Virt::swapIDToSector(unsigned long)>
c0012abb:	89 34 24             	mov    DWORD PTR [esp],esi
c0012abe:	01 d8                	add    eax,ebx
c0012ac0:	6a 01                	push   0x1
c0012ac2:	31 d2                	xor    edx,edx
c0012ac4:	43                   	inc    ebx
c0012ac5:	52                   	push   edx
c0012ac6:	81 c6 00 02 00 00    	add    esi,0x200
c0012acc:	50                   	push   eax
c0012acd:	0f be 05 98 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d598
c0012ad4:	ff 34 85 fc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1504]
c0012adb:	e8 0a 3d 00 00       	call   c00167ea <LogicalDisk::write(unsigned long long, int, void*)>
c0012ae0:	83 c4 20             	add    esp,0x20
c0012ae3:	39 1d 8c d5 02 c0    	cmp    DWORD PTR ds:0xc002d58c,ebx
c0012ae9:	7f c7                	jg     c0012ab2 <VAS::evict(unsigned long)+0x4c>
c0012aeb:	83 ec 08             	sub    esp,0x8
c0012aee:	c1 e7 0b             	shl    edi,0xb
c0012af1:	55                   	push   ebp
c0012af2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012af6:	e8 e1 f4 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012afb:	89 c3                	mov    ebx,eax
c0012afd:	8b 00                	mov    eax,DWORD PTR [eax]
c0012aff:	c1 e8 0c             	shr    eax,0xc
c0012b02:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b05:	e8 4e d3 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012b0a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b0c:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012b12:	09 d7                	or     edi,edx
c0012b14:	89 3b                	mov    DWORD PTR [ebx],edi
c0012b16:	c7 04 24 56 a9 02 c0 	mov    DWORD PTR [esp],0xc002a956
c0012b1d:	e8 4c 04 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012b22:	83 c4 2c             	add    esp,0x2c
c0012b25:	5b                   	pop    ebx
c0012b26:	5e                   	pop    esi
c0012b27:	5f                   	pop    edi
c0012b28:	5d                   	pop    ebp
c0012b29:	e9 08 b3 00 00       	jmp    c001de36 <unlockScheduler()>

c0012b2e <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012b2e:	57                   	push   edi
c0012b2f:	56                   	push   esi
c0012b30:	53                   	push   ebx
c0012b31:	83 ec 18             	sub    esp,0x18
c0012b34:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012b38:	53                   	push   ebx
c0012b39:	68 66 a9 02 c0       	push   0xc002a966
c0012b3e:	e8 2b 04 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012b43:	e8 ec b2 00 00       	call   c001de34 <lockScheduler()>
c0012b48:	5e                   	pop    esi
c0012b49:	5f                   	pop    edi
c0012b4a:	53                   	push   ebx
c0012b4b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012b51:	68 80 a7 02 c0       	push   0xc002a780
c0012b56:	e8 13 04 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012b5b:	58                   	pop    eax
c0012b5c:	5a                   	pop    edx
c0012b5d:	53                   	push   ebx
c0012b5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b62:	e8 75 f4 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012b67:	59                   	pop    ecx
c0012b68:	5e                   	pop    esi
c0012b69:	89 c6                	mov    esi,eax
c0012b6b:	50                   	push   eax
c0012b6c:	68 79 a9 02 c0       	push   0xc002a979
c0012b71:	e8 f8 03 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012b76:	83 c4 10             	add    esp,0x10
c0012b79:	85 f6                	test   esi,esi
c0012b7b:	74 08                	je     c0012b85 <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c0012b7d:	f7 06 00 04 00 00    	test   DWORD PTR [esi],0x400
c0012b83:	75 1e                	jne    c0012ba3 <VAS::tryLoadBackOffDisk(unsigned long)+0x75>
c0012b85:	83 ec 0c             	sub    esp,0xc
c0012b88:	68 f1 a9 02 c0       	push   0xc002a9f1
c0012b8d:	e8 dc 03 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012b92:	e8 9f b2 00 00       	call   c001de36 <unlockScheduler()>
c0012b97:	83 c4 10             	add    esp,0x10
c0012b9a:	31 c0                	xor    eax,eax
c0012b9c:	83 c4 10             	add    esp,0x10
c0012b9f:	5b                   	pop    ebx
c0012ba0:	5e                   	pop    esi
c0012ba1:	5f                   	pop    edi
c0012ba2:	c3                   	ret    
c0012ba3:	83 ec 0c             	sub    esp,0xc
c0012ba6:	68 87 a9 02 c0       	push   0xc002a987
c0012bab:	e8 be 03 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012bb0:	c6 05 20 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e620,0x1
c0012bb7:	8b 3e                	mov    edi,DWORD PTR [esi]
c0012bb9:	e8 24 d3 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012bbe:	c1 ef 0b             	shr    edi,0xb
c0012bc1:	5a                   	pop    edx
c0012bc2:	c6 05 20 e6 02 c0 00 	mov    BYTE PTR ds:0xc002e620,0x0
c0012bc9:	59                   	pop    ecx
c0012bca:	50                   	push   eax
c0012bcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012bcf:	68 9f a9 02 c0       	push   0xc002a99f
c0012bd4:	e8 95 03 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012bd9:	58                   	pop    eax
c0012bda:	5a                   	pop    edx
c0012bdb:	ff 36                	push   DWORD PTR [esi]
c0012bdd:	68 b9 a9 02 c0       	push   0xc002a9b9
c0012be2:	e8 87 03 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012be7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012beb:	8b 16                	mov    edx,DWORD PTR [esi]
c0012bed:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012bf3:	09 d0                	or     eax,edx
c0012bf5:	0d 01 08 00 00       	or     eax,0x801
c0012bfa:	89 06                	mov    DWORD PTR [esi],eax
c0012bfc:	59                   	pop    ecx
c0012bfd:	5e                   	pop    esi
c0012bfe:	50                   	push   eax
c0012bff:	68 cc a9 02 c0       	push   0xc002a9cc
c0012c04:	e8 65 03 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012c09:	58                   	pop    eax
c0012c0a:	5a                   	pop    edx
c0012c0b:	53                   	push   ebx
c0012c0c:	68 df a9 02 c0       	push   0xc002a9df
c0012c11:	e8 58 03 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012c16:	83 c4 10             	add    esp,0x10
c0012c19:	8b 0d 8c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d58c
c0012c1f:	85 c9                	test   ecx,ecx
c0012c21:	7e 3b                	jle    c0012c5e <VAS::tryLoadBackOffDisk(unsigned long)+0x130>
c0012c23:	31 f6                	xor    esi,esi
c0012c25:	83 ec 0c             	sub    esp,0xc
c0012c28:	57                   	push   edi
c0012c29:	e8 8c f0 ff ff       	call   c0011cba <Virt::swapIDToSector(unsigned long)>
c0012c2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c31:	01 f0                	add    eax,esi
c0012c33:	6a 01                	push   0x1
c0012c35:	31 d2                	xor    edx,edx
c0012c37:	46                   	inc    esi
c0012c38:	52                   	push   edx
c0012c39:	81 c3 00 02 00 00    	add    ebx,0x200
c0012c3f:	50                   	push   eax
c0012c40:	0f be 05 98 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d598
c0012c47:	ff 34 85 fc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1504]
c0012c4e:	e8 2b 3b 00 00       	call   c001677e <LogicalDisk::read(unsigned long long, int, void*)>
c0012c53:	83 c4 20             	add    esp,0x20
c0012c56:	39 35 8c d5 02 c0    	cmp    DWORD PTR ds:0xc002d58c,esi
c0012c5c:	7f c7                	jg     c0012c25 <VAS::tryLoadBackOffDisk(unsigned long)+0xf7>
c0012c5e:	83 ec 0c             	sub    esp,0xc
c0012c61:	57                   	push   edi
c0012c62:	e8 35 f0 ff ff       	call   c0011c9c <Virt::freeSwapfilePage(unsigned long)>
c0012c67:	e8 ca b1 00 00       	call   c001de36 <unlockScheduler()>
c0012c6c:	83 c4 10             	add    esp,0x10
c0012c6f:	b0 01                	mov    al,0x1
c0012c71:	83 c4 10             	add    esp,0x10
c0012c74:	5b                   	pop    ebx
c0012c75:	5e                   	pop    esi
c0012c76:	5f                   	pop    edi
c0012c77:	c3                   	ret    

c0012c78 <VAS::scanForEviction(int, int)>:
c0012c78:	55                   	push   ebp
c0012c79:	57                   	push   edi
c0012c7a:	56                   	push   esi
c0012c7b:	53                   	push   ebx
c0012c7c:	83 ec 0c             	sub    esp,0xc
c0012c7f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012c83:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012c87:	85 c9                	test   ecx,ecx
c0012c89:	75 08                	jne    c0012c93 <VAS::scanForEviction(int, int)+0x1b>
c0012c8b:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0012c93:	83 ec 0c             	sub    esp,0xc
c0012c96:	31 ed                	xor    ebp,ebp
c0012c98:	68 ac a7 02 c0       	push   0xc002a7ac
c0012c9d:	e8 cc 02 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012ca2:	83 c4 10             	add    esp,0x10
c0012ca5:	eb 0f                	jmp    c0012cb6 <VAS::scanForEviction(int, int)+0x3e>
c0012ca7:	83 c5 04             	add    ebp,0x4
c0012caa:	81 fd 00 0c 00 00    	cmp    ebp,0xc00
c0012cb0:	0f 84 8e 00 00 00    	je     c0012d44 <VAS::scanForEviction(int, int)+0xcc>
c0012cb6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012cb9:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0012cbd:	74 e8                	je     c0012ca7 <VAS::scanForEviction(int, int)+0x2f>
c0012cbf:	89 eb                	mov    ebx,ebp
c0012cc1:	31 f6                	xor    esi,esi
c0012cc3:	c1 e3 14             	shl    ebx,0x14
c0012cc6:	eb 0f                	jmp    c0012cd7 <VAS::scanForEviction(int, int)+0x5f>
c0012cc8:	46                   	inc    esi
c0012cc9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012ccf:	81 fe 00 04 00 00    	cmp    esi,0x400
c0012cd5:	74 d0                	je     c0012ca7 <VAS::scanForEviction(int, int)+0x2f>
c0012cd7:	83 ec 08             	sub    esp,0x8
c0012cda:	53                   	push   ebx
c0012cdb:	57                   	push   edi
c0012cdc:	e8 fb f2 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012ce1:	83 c4 10             	add    esp,0x10
c0012ce4:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ce6:	89 c2                	mov    edx,eax
c0012ce8:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012cee:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012cf4:	75 d2                	jne    c0012cc8 <VAS::scanForEviction(int, int)+0x50>
c0012cf6:	a8 01                	test   al,0x1
c0012cf8:	74 37                	je     c0012d31 <VAS::scanForEviction(int, int)+0xb9>
c0012cfa:	83 ec 08             	sub    esp,0x8
c0012cfd:	53                   	push   ebx
c0012cfe:	68 d0 a7 02 c0       	push   0xc002a7d0
c0012d03:	e8 66 02 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012d08:	89 f0                	mov    eax,esi
c0012d0a:	99                   	cdq    
c0012d0b:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
c0012d0f:	83 c4 10             	add    esp,0x10
c0012d12:	85 d2                	test   edx,edx
c0012d14:	75 b2                	jne    c0012cc8 <VAS::scanForEviction(int, int)+0x50>
c0012d16:	83 ec 0c             	sub    esp,0xc
c0012d19:	68 0a aa 02 c0       	push   0xc002aa0a
c0012d1e:	e8 4b 02 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012d23:	58                   	pop    eax
c0012d24:	5a                   	pop    edx
c0012d25:	53                   	push   ebx
c0012d26:	57                   	push   edi
c0012d27:	e8 3a fd ff ff       	call   c0012a66 <VAS::evict(unsigned long)>
c0012d2c:	83 c4 10             	add    esp,0x10
c0012d2f:	eb 97                	jmp    c0012cc8 <VAS::scanForEviction(int, int)+0x50>
c0012d31:	83 ec 08             	sub    esp,0x8
c0012d34:	53                   	push   ebx
c0012d35:	68 fc a7 02 c0       	push   0xc002a7fc
c0012d3a:	e8 2f 02 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012d3f:	83 c4 10             	add    esp,0x10
c0012d42:	eb 84                	jmp    c0012cc8 <VAS::scanForEviction(int, int)+0x50>
c0012d44:	83 c4 0c             	add    esp,0xc
c0012d47:	5b                   	pop    ebx
c0012d48:	5e                   	pop    esi
c0012d49:	5f                   	pop    edi
c0012d4a:	5d                   	pop    ebp
c0012d4b:	c3                   	ret    

c0012d4c <mapVASFirstTime>:
c0012d4c:	55                   	push   ebp
c0012d4d:	57                   	push   edi
c0012d4e:	56                   	push   esi
c0012d4f:	53                   	push   ebx
c0012d50:	83 ec 0c             	sub    esp,0xc
c0012d53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d58:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012d5b:	4a                   	dec    edx
c0012d5c:	0f 84 8e 00 00 00    	je     c0012df0 <mapVASFirstTime+0xa4>
c0012d62:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012d65:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012d68:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012d6d:	c1 e5 15             	shl    ebp,0x15
c0012d70:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012d75:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012d7b:	29 eb                	sub    ebx,ebp
c0012d7d:	29 ee                	sub    esi,ebp
c0012d7f:	e8 5e d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d84:	83 ec 0c             	sub    esp,0xc
c0012d87:	68 03 04 00 00       	push   0x403
c0012d8c:	6a 01                	push   0x1
c0012d8e:	53                   	push   ebx
c0012d8f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d95:	50                   	push   eax
c0012d96:	57                   	push   edi
c0012d97:	e8 ba f8 ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d9c:	83 c4 20             	add    esp,0x20
c0012d9f:	39 f3                	cmp    ebx,esi
c0012da1:	75 dc                	jne    c0012d7f <mapVASFirstTime+0x33>
c0012da3:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012da8:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012dad:	29 ee                	sub    esi,ebp
c0012daf:	29 e8                	sub    eax,ebp
c0012db1:	89 c5                	mov    ebp,eax
c0012db3:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012db7:	19 db                	sbb    ebx,ebx
c0012db9:	e8 24 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012dbe:	83 e3 04             	and    ebx,0x4
c0012dc1:	83 ec 0c             	sub    esp,0xc
c0012dc4:	81 c3 03 04 00 00    	add    ebx,0x403
c0012dca:	53                   	push   ebx
c0012dcb:	6a 01                	push   0x1
c0012dcd:	56                   	push   esi
c0012dce:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012dd4:	50                   	push   eax
c0012dd5:	57                   	push   edi
c0012dd6:	e8 7b f8 ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ddb:	83 c4 20             	add    esp,0x20
c0012dde:	39 f5                	cmp    ebp,esi
c0012de0:	75 d1                	jne    c0012db3 <mapVASFirstTime+0x67>
c0012de2:	0f 20 d8             	mov    eax,cr3
c0012de5:	0f 22 d8             	mov    cr3,eax
c0012de8:	83 c4 0c             	add    esp,0xc
c0012deb:	5b                   	pop    ebx
c0012dec:	5e                   	pop    esi
c0012ded:	5f                   	pop    edi
c0012dee:	5d                   	pop    ebp
c0012def:	c3                   	ret    
c0012df0:	83 ec 0c             	sub    esp,0xc
c0012df3:	68 15 aa 02 c0       	push   0xc002aa15
c0012df8:	e8 71 01 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012dfd:	83 c4 10             	add    esp,0x10
c0012e00:	83 c4 0c             	add    esp,0xc
c0012e03:	5b                   	pop    ebx
c0012e04:	5e                   	pop    esi
c0012e05:	5f                   	pop    edi
c0012e06:	5d                   	pop    ebp
c0012e07:	c3                   	ret    

c0012e08 <__cxa_atexit>:
c0012e08:	31 c0                	xor    eax,eax
c0012e0a:	c3                   	ret    

c0012e0b <__cxa_finalize>:
c0012e0b:	c3                   	ret    

c0012e0c <__stack_chk_fail>:
c0012e0c:	55                   	push   ebp
c0012e0d:	89 e5                	mov    ebp,esp
c0012e0f:	83 ec 14             	sub    esp,0x14
c0012e12:	68 2e aa 02 c0       	push   0xc002aa2e
c0012e17:	e8 52 01 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012e1c:	58                   	pop    eax
c0012e1d:	5a                   	pop    edx
c0012e1e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012e21:	68 7e aa 02 c0       	push   0xc002aa7e
c0012e26:	e8 43 01 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012e2b:	59                   	pop    ecx
c0012e2c:	58                   	pop    eax
c0012e2d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e30:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e33:	68 7e aa 02 c0       	push   0xc002aa7e
c0012e38:	e8 31 01 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012e3d:	5a                   	pop    edx
c0012e3e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e41:	59                   	pop    ecx
c0012e42:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e44:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e47:	68 7e aa 02 c0       	push   0xc002aa7e
c0012e4c:	e8 1d 01 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012e51:	5a                   	pop    edx
c0012e52:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e55:	59                   	pop    ecx
c0012e56:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e58:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e5a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e5d:	68 7e aa 02 c0       	push   0xc002aa7e
c0012e62:	e8 07 01 00 00       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0012e67:	c7 04 24 86 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa86
c0012e6e:	e8 9c 77 00 00       	call   c001a60f <Krnl::panic(char const*)>
c0012e73:	83 c4 10             	add    esp,0x10
c0012e76:	c9                   	leave  
c0012e77:	c3                   	ret    

c0012e78 <__cxa_pure_virtual>:
c0012e78:	83 ec 18             	sub    esp,0x18
c0012e7b:	68 9e aa 02 c0       	push   0xc002aa9e
c0012e80:	e8 8a 77 00 00       	call   c001a60f <Krnl::panic(char const*)>
c0012e85:	83 c4 1c             	add    esp,0x1c
c0012e88:	c3                   	ret    

c0012e89 <operator new[](unsigned long)>:
c0012e89:	e9 b2 c9 ff ff       	jmp    c000f840 <malloc>

c0012e8e <operator delete(void*, unsigned long)>:
c0012e8e:	e9 cd c9 ff ff       	jmp    c000f860 <rfree>

c0012e93 <operator delete[](void*)>:
c0012e93:	e9 c8 c9 ff ff       	jmp    c000f860 <rfree>

c0012e98 <operator delete[](void*, unsigned long)>:
c0012e98:	e9 c3 c9 ff ff       	jmp    c000f860 <rfree>

c0012e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e9d:	57                   	push   edi
c0012e9e:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012ea3:	56                   	push   esi
c0012ea4:	be b4 aa 02 c0       	mov    esi,0xc002aab4
c0012ea9:	53                   	push   ebx
c0012eaa:	83 ec 40             	sub    esp,0x40
c0012ead:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012eb1:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012eb5:	fc                   	cld    
c0012eb6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012eb8:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012ebc:	83 f9 3e             	cmp    ecx,0x3e
c0012ebf:	7e 05                	jle    c0012ec6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012ec1:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012ec6:	89 df                	mov    edi,ebx
c0012ec8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012ecc:	eb 02                	jmp    c0012ed0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012ece:	89 c7                	mov    edi,eax
c0012ed0:	31 d2                	xor    edx,edx
c0012ed2:	46                   	inc    esi
c0012ed3:	89 f8                	mov    eax,edi
c0012ed5:	f7 f1                	div    ecx
c0012ed7:	39 cf                	cmp    edi,ecx
c0012ed9:	73 f3                	jae    c0012ece <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012edb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012ede:	eb 02                	jmp    c0012ee2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012ee0:	89 c3                	mov    ebx,eax
c0012ee2:	31 d2                	xor    edx,edx
c0012ee4:	4e                   	dec    esi
c0012ee5:	89 d8                	mov    eax,ebx
c0012ee7:	f7 f1                	div    ecx
c0012ee9:	39 cb                	cmp    ebx,ecx
c0012eeb:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012eef:	88 16                	mov    BYTE PTR [esi],dl
c0012ef1:	73 ed                	jae    c0012ee0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012ef3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012ef7:	83 c4 40             	add    esp,0x40
c0012efa:	5b                   	pop    ebx
c0012efb:	5e                   	pop    esi
c0012efc:	5f                   	pop    edi
c0012efd:	c3                   	ret    

c0012efe <Dbg::logc(char)>:
c0012efe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f02:	ba fd 03 00 00       	mov    edx,0x3fd
c0012f07:	ec                   	in     al,dx
c0012f08:	a8 20                	test   al,0x20
c0012f0a:	74 fb                	je     c0012f07 <Dbg::logc(char)+0x9>
c0012f0c:	ba f8 03 00 00       	mov    edx,0x3f8
c0012f11:	88 c8                	mov    al,cl
c0012f13:	ee                   	out    dx,al
c0012f14:	c3                   	ret    

c0012f15 <Dbg::logs(char*)>:
c0012f15:	53                   	push   ebx
c0012f16:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012f1a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f1d:	84 c0                	test   al,al
c0012f1f:	74 0f                	je     c0012f30 <Dbg::logs(char*)+0x1b>
c0012f21:	50                   	push   eax
c0012f22:	43                   	inc    ebx
c0012f23:	e8 d6 ff ff ff       	call   c0012efe <Dbg::logc(char)>
c0012f28:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f2b:	5a                   	pop    edx
c0012f2c:	84 c0                	test   al,al
c0012f2e:	75 f1                	jne    c0012f21 <Dbg::logs(char*)+0xc>
c0012f30:	5b                   	pop    ebx
c0012f31:	c3                   	ret    

c0012f32 <Dbg::logWriteInt(unsigned int)>:
c0012f32:	83 ec 10             	sub    esp,0x10
c0012f35:	6a 0a                	push   0xa
c0012f37:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f3b:	50                   	push   eax
c0012f3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f40:	e8 58 ff ff ff       	call   c0012e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f45:	50                   	push   eax
c0012f46:	e8 ca ff ff ff       	call   c0012f15 <Dbg::logs(char*)>
c0012f4b:	83 c4 20             	add    esp,0x20
c0012f4e:	c3                   	ret    

c0012f4f <Dbg::logWriteIntBase(unsigned int, int)>:
c0012f4f:	83 ec 10             	sub    esp,0x10
c0012f52:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f56:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f5a:	50                   	push   eax
c0012f5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f5f:	e8 39 ff ff ff       	call   c0012e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f64:	50                   	push   eax
c0012f65:	e8 ab ff ff ff       	call   c0012f15 <Dbg::logs(char*)>
c0012f6a:	83 c4 20             	add    esp,0x20
c0012f6d:	c3                   	ret    

c0012f6e <Dbg::kprintf(char const*, ...)>:
c0012f6e:	55                   	push   ebp
c0012f6f:	57                   	push   edi
c0012f70:	56                   	push   esi
c0012f71:	53                   	push   ebx
c0012f72:	83 ec 0c             	sub    esp,0xc
c0012f75:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f79:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f7d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f81:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f84:	84 c0                	test   al,al
c0012f86:	74 4a                	je     c0012fd2 <Dbg::kprintf(char const*, ...)+0x64>
c0012f88:	31 db                	xor    ebx,ebx
c0012f8a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f8d:	3c 25                	cmp    al,0x25
c0012f8f:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f92:	0f 85 e4 00 00 00    	jne    c001307c <Dbg::kprintf(char const*, ...)+0x10e>
c0012f98:	83 c3 02             	add    ebx,0x2
c0012f9b:	8a 07                	mov    al,BYTE PTR [edi]
c0012f9d:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012fa0:	83 e8 25             	sub    eax,0x25
c0012fa3:	3c 53                	cmp    al,0x53
c0012fa5:	0f 87 ba 00 00 00    	ja     c0013065 <Dbg::kprintf(char const*, ...)+0xf7>
c0012fab:	0f b6 c0             	movzx  eax,al
c0012fae:	ff 24 85 f4 aa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd550c]
c0012fb5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fb9:	89 c8                	mov    eax,ecx
c0012fbb:	83 c1 04             	add    ecx,0x4
c0012fbe:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fc2:	ff 30                	push   DWORD PTR [eax]
c0012fc4:	e8 4c ff ff ff       	call   c0012f15 <Dbg::logs(char*)>
c0012fc9:	58                   	pop    eax
c0012fca:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012fce:	84 c0                	test   al,al
c0012fd0:	75 b8                	jne    c0012f8a <Dbg::kprintf(char const*, ...)+0x1c>
c0012fd2:	83 c4 0c             	add    esp,0xc
c0012fd5:	5b                   	pop    ebx
c0012fd6:	5e                   	pop    esi
c0012fd7:	5f                   	pop    edi
c0012fd8:	5d                   	pop    ebp
c0012fd9:	c3                   	ret    
c0012fda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fde:	89 d0                	mov    eax,edx
c0012fe0:	83 c2 04             	add    edx,0x4
c0012fe3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fe7:	ff 30                	push   DWORD PTR [eax]
c0012fe9:	e8 44 ff ff ff       	call   c0012f32 <Dbg::logWriteInt(unsigned int)>
c0012fee:	58                   	pop    eax
c0012fef:	eb d9                	jmp    c0012fca <Dbg::kprintf(char const*, ...)+0x5c>
c0012ff1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ff5:	89 d0                	mov    eax,edx
c0012ff7:	83 c2 04             	add    edx,0x4
c0012ffa:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012ffd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013001:	50                   	push   eax
c0013002:	e8 f7 fe ff ff       	call   c0012efe <Dbg::logc(char)>
c0013007:	58                   	pop    eax
c0013008:	eb c0                	jmp    c0012fca <Dbg::kprintf(char const*, ...)+0x5c>
c001300a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001300e:	89 c8                	mov    eax,ecx
c0013010:	83 c1 04             	add    ecx,0x4
c0013013:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013017:	ff 30                	push   DWORD PTR [eax]
c0013019:	e8 14 ff ff ff       	call   c0012f32 <Dbg::logWriteInt(unsigned int)>
c001301e:	5f                   	pop    edi
c001301f:	eb a9                	jmp    c0012fca <Dbg::kprintf(char const*, ...)+0x5c>
c0013021:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013025:	89 c8                	mov    eax,ecx
c0013027:	83 c1 04             	add    ecx,0x4
c001302a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001302e:	6a 10                	push   0x10
c0013030:	ff 30                	push   DWORD PTR [eax]
c0013032:	e8 18 ff ff ff       	call   c0012f4f <Dbg::logWriteIntBase(unsigned int, int)>
c0013037:	59                   	pop    ecx
c0013038:	5f                   	pop    edi
c0013039:	eb 8f                	jmp    c0012fca <Dbg::kprintf(char const*, ...)+0x5c>
c001303b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001303f:	89 d0                	mov    eax,edx
c0013041:	83 c2 08             	add    edx,0x8
c0013044:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013048:	6a 10                	push   0x10
c001304a:	ff 30                	push   DWORD PTR [eax]
c001304c:	e8 fe fe ff ff       	call   c0012f4f <Dbg::logWriteIntBase(unsigned int, int)>
c0013051:	58                   	pop    eax
c0013052:	5a                   	pop    edx
c0013053:	e9 72 ff ff ff       	jmp    c0012fca <Dbg::kprintf(char const*, ...)+0x5c>
c0013058:	6a 25                	push   0x25
c001305a:	e8 9f fe ff ff       	call   c0012efe <Dbg::logc(char)>
c001305f:	58                   	pop    eax
c0013060:	e9 65 ff ff ff       	jmp    c0012fca <Dbg::kprintf(char const*, ...)+0x5c>
c0013065:	6a 25                	push   0x25
c0013067:	e8 92 fe ff ff       	call   c0012efe <Dbg::logc(char)>
c001306c:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001306f:	50                   	push   eax
c0013070:	e8 89 fe ff ff       	call   c0012efe <Dbg::logc(char)>
c0013075:	5a                   	pop    edx
c0013076:	59                   	pop    ecx
c0013077:	e9 4e ff ff ff       	jmp    c0012fca <Dbg::kprintf(char const*, ...)+0x5c>
c001307c:	50                   	push   eax
c001307d:	89 eb                	mov    ebx,ebp
c001307f:	e8 7a fe ff ff       	call   c0012efe <Dbg::logc(char)>
c0013084:	89 fd                	mov    ebp,edi
c0013086:	58                   	pop    eax
c0013087:	e9 3e ff ff ff       	jmp    c0012fca <Dbg::kprintf(char const*, ...)+0x5c>

c001308c <File::read(unsigned long long, void*, int*)>:
c001308c:	53                   	push   ebx
c001308d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013091:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013095:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001309c:	3c 19                	cmp    al,0x19
c001309e:	77 35                	ja     c00130d5 <File::read(unsigned long long, void*, int*)+0x49>
c00130a0:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c00130a7:	85 c0                	test   eax,eax
c00130a9:	74 2a                	je     c00130d5 <File::read(unsigned long long, void*, int*)+0x49>
c00130ab:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130b1:	85 c0                	test   eax,eax
c00130b3:	74 20                	je     c00130d5 <File::read(unsigned long long, void*, int*)+0x49>
c00130b5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130b9:	74 21                	je     c00130dc <File::read(unsigned long long, void*, int*)+0x50>
c00130bb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130bd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130c1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130cf:	5b                   	pop    ebx
c00130d0:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00130d3:	ff e0                	jmp    eax
c00130d5:	b8 0b 00 00 00       	mov    eax,0xb
c00130da:	eb 05                	jmp    c00130e1 <File::read(unsigned long long, void*, int*)+0x55>
c00130dc:	b8 05 00 00 00       	mov    eax,0x5
c00130e1:	5b                   	pop    ebx
c00130e2:	c3                   	ret    
c00130e3:	90                   	nop

c00130e4 <File::write(unsigned long long, void*, int*)>:
c00130e4:	53                   	push   ebx
c00130e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130ed:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130f4:	3c 19                	cmp    al,0x19
c00130f6:	77 35                	ja     c001312d <File::write(unsigned long long, void*, int*)+0x49>
c00130f8:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c00130ff:	85 c0                	test   eax,eax
c0013101:	74 2a                	je     c001312d <File::write(unsigned long long, void*, int*)+0x49>
c0013103:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013109:	85 c0                	test   eax,eax
c001310b:	74 20                	je     c001312d <File::write(unsigned long long, void*, int*)+0x49>
c001310d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013111:	74 21                	je     c0013134 <File::write(unsigned long long, void*, int*)+0x50>
c0013113:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013115:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013119:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001311f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013123:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013127:	5b                   	pop    ebx
c0013128:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001312b:	ff e0                	jmp    eax
c001312d:	b8 0b 00 00 00       	mov    eax,0xb
c0013132:	eb 05                	jmp    c0013139 <File::write(unsigned long long, void*, int*)+0x55>
c0013134:	b8 05 00 00 00       	mov    eax,0x5
c0013139:	5b                   	pop    ebx
c001313a:	c3                   	ret    
c001313b:	90                   	nop

c001313c <Directory::read(unsigned long long, void*, int*)>:
c001313c:	53                   	push   ebx
c001313d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013141:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013145:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001314c:	3c 19                	cmp    al,0x19
c001314e:	77 35                	ja     c0013185 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013150:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c0013157:	85 c0                	test   eax,eax
c0013159:	74 2a                	je     c0013185 <Directory::read(unsigned long long, void*, int*)+0x49>
c001315b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013161:	85 c0                	test   eax,eax
c0013163:	74 20                	je     c0013185 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013165:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013169:	74 21                	je     c001318c <Directory::read(unsigned long long, void*, int*)+0x50>
c001316b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001316d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013171:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013177:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001317b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001317f:	5b                   	pop    ebx
c0013180:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013183:	ff e0                	jmp    eax
c0013185:	b8 0b 00 00 00       	mov    eax,0xb
c001318a:	eb 05                	jmp    c0013191 <Directory::read(unsigned long long, void*, int*)+0x55>
c001318c:	b8 05 00 00 00       	mov    eax,0x5
c0013191:	5b                   	pop    ebx
c0013192:	c3                   	ret    
c0013193:	90                   	nop

c0013194 <Directory::write(unsigned long long, void*, int*)>:
c0013194:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013198:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001319f:	b8 0b 00 00 00       	mov    eax,0xb
c00131a4:	80 fa 19             	cmp    dl,0x19
c00131a7:	77 18                	ja     c00131c1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00131a9:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c00131b0:	85 d2                	test   edx,edx
c00131b2:	74 0d                	je     c00131c1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00131b4:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00131bb:	19 c0                	sbb    eax,eax
c00131bd:	83 e0 0a             	and    eax,0xa
c00131c0:	40                   	inc    eax
c00131c1:	c3                   	ret    

c00131c2 <File::isAtty()>:
c00131c2:	31 c0                	xor    eax,eax
c00131c4:	c3                   	ret    
c00131c5:	90                   	nop

c00131c6 <Directory::isAtty()>:
c00131c6:	31 c0                	xor    eax,eax
c00131c8:	c3                   	ret    
c00131c9:	90                   	nop

c00131ca <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00131ca:	b8 0a 00 00 00       	mov    eax,0xa
c00131cf:	c3                   	ret    

c00131d0 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00131d0:	b8 0a 00 00 00       	mov    eax,0xa
c00131d5:	c3                   	ret    

c00131d6 <File::~File()>:
c00131d6:	83 ec 0c             	sub    esp,0xc
c00131d9:	ba b0 ac 02 c0       	mov    edx,0xc002acb0
c00131de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e2:	89 10                	mov    DWORD PTR [eax],edx
c00131e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e8:	83 ec 0c             	sub    esp,0xc
c00131eb:	50                   	push   eax
c00131ec:	e8 39 e7 ff ff       	call   c001192a <UnixFile::~UnixFile()>
c00131f1:	83 c4 10             	add    esp,0x10
c00131f4:	90                   	nop
c00131f5:	83 c4 0c             	add    esp,0xc
c00131f8:	c3                   	ret    
c00131f9:	90                   	nop

c00131fa <File::~File()>:
c00131fa:	83 ec 0c             	sub    esp,0xc
c00131fd:	83 ec 0c             	sub    esp,0xc
c0013200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013204:	e8 cd ff ff ff       	call   c00131d6 <File::~File()>
c0013209:	83 c4 10             	add    esp,0x10
c001320c:	83 ec 08             	sub    esp,0x8
c001320f:	68 14 01 00 00       	push   0x114
c0013214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013218:	e8 71 fc ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c001321d:	83 c4 10             	add    esp,0x10
c0013220:	83 c4 0c             	add    esp,0xc
c0013223:	c3                   	ret    

c0013224 <Directory::~Directory()>:
c0013224:	83 ec 0c             	sub    esp,0xc
c0013227:	ba cc ac 02 c0       	mov    edx,0xc002accc
c001322c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013230:	89 10                	mov    DWORD PTR [eax],edx
c0013232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013236:	83 ec 0c             	sub    esp,0xc
c0013239:	50                   	push   eax
c001323a:	e8 eb e6 ff ff       	call   c001192a <UnixFile::~UnixFile()>
c001323f:	83 c4 10             	add    esp,0x10
c0013242:	90                   	nop
c0013243:	83 c4 0c             	add    esp,0xc
c0013246:	c3                   	ret    
c0013247:	90                   	nop

c0013248 <Directory::~Directory()>:
c0013248:	83 ec 0c             	sub    esp,0xc
c001324b:	83 ec 0c             	sub    esp,0xc
c001324e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013252:	e8 cd ff ff ff       	call   c0013224 <Directory::~Directory()>
c0013257:	83 c4 10             	add    esp,0x10
c001325a:	83 ec 08             	sub    esp,0x8
c001325d:	68 14 01 00 00       	push   0x114
c0013262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013266:	e8 23 fc ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c001326b:	83 c4 10             	add    esp,0x10
c001326e:	83 c4 0c             	add    esp,0xc
c0013271:	c3                   	ret    

c0013272 <Filesystem::Filesystem()>:
c0013272:	ba 4c ac 02 c0       	mov    edx,0xc002ac4c
c0013277:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001327b:	89 10                	mov    DWORD PTR [eax],edx
c001327d:	8b 15 6c e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e76c
c0013283:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013287:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001328a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001328e:	a3 6c e7 02 c0       	mov    ds:0xc002e76c,eax
c0013293:	90                   	nop
c0013294:	c3                   	ret    
c0013295:	90                   	nop

c0013296 <Filesystem::~Filesystem()>:
c0013296:	ba 4c ac 02 c0       	mov    edx,0xc002ac4c
c001329b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001329f:	89 10                	mov    DWORD PTR [eax],edx
c00132a1:	90                   	nop
c00132a2:	c3                   	ret    
c00132a3:	90                   	nop

c00132a4 <Filesystem::~Filesystem()>:
c00132a4:	83 ec 0c             	sub    esp,0xc
c00132a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00132ab:	e8 e6 ff ff ff       	call   c0013296 <Filesystem::~Filesystem()>
c00132b0:	83 c4 04             	add    esp,0x4
c00132b3:	83 ec 08             	sub    esp,0x8
c00132b6:	6a 08                	push   0x8
c00132b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132bc:	e8 cd fb ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c00132c1:	83 c4 10             	add    esp,0x10
c00132c4:	83 c4 0c             	add    esp,0xc
c00132c7:	c3                   	ret    

c00132c8 <Fs::getcwd(Process*, char*, int)>:
c00132c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00132cc:	31 c0                	xor    eax,eax
c00132ce:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00132d1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00132d5:	7d 15                	jge    c00132ec <Fs::getcwd(Process*, char*, int)+0x24>
c00132d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00132db:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00132e2:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00132e5:	84 c9                	test   cl,cl
c00132e7:	74 06                	je     c00132ef <Fs::getcwd(Process*, char*, int)+0x27>
c00132e9:	40                   	inc    eax
c00132ea:	eb e2                	jmp    c00132ce <Fs::getcwd(Process*, char*, int)+0x6>
c00132ec:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00132ef:	31 c0                	xor    eax,eax
c00132f1:	c3                   	ret    

c00132f2 <Fs::initVFS()>:
c00132f2:	83 ec 18             	sub    esp,0x18
c00132f5:	6a 08                	push   0x8
c00132f7:	e8 44 c5 ff ff       	call   c000f840 <malloc>
c00132fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00132ff:	e8 a4 dc 00 00       	call   c0020fa8 <FAT::FAT()>
c0013304:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001330b:	e8 30 c5 ff ff       	call   c000f840 <malloc>
c0013310:	89 04 24             	mov    DWORD PTR [esp],eax
c0013313:	e8 e8 ee 00 00       	call   c0022200 <ISO9660::ISO9660()>
c0013318:	83 c4 1c             	add    esp,0x1c
c001331b:	c3                   	ret    

c001331c <Fs::standardiseFiles(char*, char const*, char const*)>:
c001331c:	55                   	push   ebp
c001331d:	57                   	push   edi
c001331e:	56                   	push   esi
c001331f:	53                   	push   ebx
c0013320:	81 ec 10 04 00 00    	sub    esp,0x410
c0013326:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001332d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013334:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001333b:	68 00 04 00 00       	push   0x400
c0013340:	6a 00                	push   0x0
c0013342:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013346:	56                   	push   esi
c0013347:	e8 2c d4 fe ff       	call   c0000778 <memset>
c001334c:	83 c4 10             	add    esp,0x10
c001334f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013353:	75 0b                	jne    c0013360 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013355:	50                   	push   eax
c0013356:	50                   	push   eax
c0013357:	57                   	push   edi
c0013358:	56                   	push   esi
c0013359:	e8 d6 d4 fe ff       	call   c0000834 <strcpy>
c001335e:	eb 41                	jmp    c00133a1 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013360:	8a 07                	mov    al,BYTE PTR [edi]
c0013362:	3c 5c                	cmp    al,0x5c
c0013364:	74 04                	je     c001336a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013366:	3c 2f                	cmp    al,0x2f
c0013368:	75 18                	jne    c0013382 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c001336a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001336d:	3c 60                	cmp    al,0x60
c001336f:	7e 03                	jle    c0013374 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013371:	83 e8 20             	sub    eax,0x20
c0013374:	88 04 24             	mov    BYTE PTR [esp],al
c0013377:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001337e:	50                   	push   eax
c001337f:	50                   	push   eax
c0013380:	eb 18                	jmp    c001339a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013382:	50                   	push   eax
c0013383:	50                   	push   eax
c0013384:	55                   	push   ebp
c0013385:	56                   	push   esi
c0013386:	e8 a9 d4 fe ff       	call   c0000834 <strcpy>
c001338b:	5a                   	pop    edx
c001338c:	59                   	pop    ecx
c001338d:	68 d4 c3 02 c0       	push   0xc002c3d4
c0013392:	56                   	push   esi
c0013393:	e8 dc d5 fe ff       	call   c0000974 <strcat>
c0013398:	5d                   	pop    ebp
c0013399:	58                   	pop    eax
c001339a:	57                   	push   edi
c001339b:	56                   	push   esi
c001339c:	e8 d3 d5 fe ff       	call   c0000974 <strcat>
c00133a1:	83 c4 10             	add    esp,0x10
c00133a4:	8a 04 24             	mov    al,BYTE PTR [esp]
c00133a7:	3c 60                	cmp    al,0x60
c00133a9:	7e 03                	jle    c00133ae <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00133ab:	83 e8 20             	sub    eax,0x20
c00133ae:	88 04 24             	mov    BYTE PTR [esp],al
c00133b1:	88 03                	mov    BYTE PTR [ebx],al
c00133b3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00133ba:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00133c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00133c4:	bf 03 00 00 00       	mov    edi,0x3
c00133c9:	b8 03 00 00 00       	mov    eax,0x3
c00133ce:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00133d1:	84 d2                	test   dl,dl
c00133d3:	0f 84 91 00 00 00    	je     c001346a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00133d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00133dc:	80 fa 5c             	cmp    dl,0x5c
c00133df:	74 05                	je     c00133e6 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00133e1:	80 fa 2f             	cmp    dl,0x2f
c00133e4:	75 12                	jne    c00133f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133e6:	89 c5                	mov    ebp,eax
c00133e8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133ed:	74 09                	je     c00133f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133ef:	40                   	inc    eax
c00133f0:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00133f4:	89 cf                	mov    edi,ecx
c00133f6:	eb d6                	jmp    c00133ce <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00133f8:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00133fd:	75 5b                	jne    c001345a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133ff:	80 fa 2e             	cmp    dl,0x2e
c0013402:	75 56                	jne    c001345a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013404:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013408:	74 19                	je     c0013423 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c001340a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001340f:	74 53                	je     c0013464 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013411:	89 f9                	mov    ecx,edi
c0013413:	41                   	inc    ecx
c0013414:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013417:	80 fa 2f             	cmp    dl,0x2f
c001341a:	74 f7                	je     c0013413 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001341c:	80 fa 5c             	cmp    dl,0x5c
c001341f:	74 f2                	je     c0013413 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013421:	eb d1                	jmp    c00133f4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013423:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013428:	74 3a                	je     c0013464 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001342a:	83 f8 03             	cmp    eax,0x3
c001342d:	74 c5                	je     c00133f4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001342f:	41                   	inc    ecx
c0013430:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013433:	80 fa 2f             	cmp    dl,0x2f
c0013436:	74 f7                	je     c001342f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013438:	80 fa 5c             	cmp    dl,0x5c
c001343b:	74 f2                	je     c001342f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001343d:	48                   	dec    eax
c001343e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013442:	75 06                	jne    c001344a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013444:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013448:	eb f3                	jmp    c001343d <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c001344a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001344e:	74 07                	je     c0013457 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013450:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013454:	48                   	dec    eax
c0013455:	eb f3                	jmp    c001344a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013457:	40                   	inc    eax
c0013458:	eb 9a                	jmp    c00133f4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001345a:	80 fa 2f             	cmp    dl,0x2f
c001345d:	74 95                	je     c00133f4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001345f:	80 fa 5c             	cmp    dl,0x5c
c0013462:	74 90                	je     c00133f4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013464:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013467:	40                   	inc    eax
c0013468:	eb 8a                	jmp    c00133f4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001346a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001346e:	83 ec 0c             	sub    esp,0xc
c0013471:	53                   	push   ebx
c0013472:	e8 1d d3 fe ff       	call   c0000794 <strlen>
c0013477:	83 c4 10             	add    esp,0x10
c001347a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001347f:	75 26                	jne    c00134a7 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013481:	83 ec 0c             	sub    esp,0xc
c0013484:	53                   	push   ebx
c0013485:	e8 0a d3 fe ff       	call   c0000794 <strlen>
c001348a:	83 c4 10             	add    esp,0x10
c001348d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013492:	74 26                	je     c00134ba <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013494:	83 ec 0c             	sub    esp,0xc
c0013497:	53                   	push   ebx
c0013498:	e8 f7 d2 fe ff       	call   c0000794 <strlen>
c001349d:	83 c4 10             	add    esp,0x10
c00134a0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00134a5:	eb c7                	jmp    c001346e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00134a7:	83 ec 0c             	sub    esp,0xc
c00134aa:	53                   	push   ebx
c00134ab:	e8 e4 d2 fe ff       	call   c0000794 <strlen>
c00134b0:	83 c4 10             	add    esp,0x10
c00134b3:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00134b8:	74 c7                	je     c0013481 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00134ba:	81 c4 0c 04 00 00    	add    esp,0x40c
c00134c0:	5b                   	pop    ebx
c00134c1:	5e                   	pop    esi
c00134c2:	5f                   	pop    edi
c00134c3:	5d                   	pop    ebp
c00134c4:	c3                   	ret    
c00134c5:	90                   	nop

c00134c6 <File::File(char const*, Process*)>:
c00134c6:	83 ec 0c             	sub    esp,0xc
c00134c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134cd:	83 ec 08             	sub    esp,0x8
c00134d0:	6a 00                	push   0x0
c00134d2:	50                   	push   eax
c00134d3:	e8 70 e2 ff ff       	call   c0011748 <UnixFile::UnixFile(int)>
c00134d8:	83 c4 10             	add    esp,0x10
c00134db:	ba b0 ac 02 c0       	mov    edx,0xc002acb0
c00134e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e4:	89 10                	mov    DWORD PTR [eax],edx
c00134e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134ea:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00134f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f4:	83 c0 0d             	add    eax,0xd
c00134f7:	83 ec 04             	sub    esp,0x4
c00134fa:	52                   	push   edx
c00134fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134ff:	50                   	push   eax
c0013500:	e8 17 fe ff ff       	call   c001331c <Fs::standardiseFiles(char*, char const*, char const*)>
c0013505:	83 c4 10             	add    esp,0x10
c0013508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001350c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001350f:	8d 50 bf             	lea    edx,[eax-0x41]
c0013512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013516:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001351c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013520:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013524:	90                   	nop
c0013525:	83 c4 0c             	add    esp,0xc
c0013528:	c3                   	ret    
c0013529:	90                   	nop

c001352a <File::open(FileOpenMode)>:
c001352a:	53                   	push   ebx
c001352b:	b8 0b 00 00 00       	mov    eax,0xb
c0013530:	83 ec 08             	sub    esp,0x8
c0013533:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013537:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001353e:	80 fa 19             	cmp    dl,0x19
c0013541:	77 40                	ja     c0013583 <File::open(FileOpenMode)+0x59>
c0013543:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c001354a:	85 d2                	test   edx,edx
c001354c:	74 35                	je     c0013583 <File::open(FileOpenMode)+0x59>
c001354e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013554:	85 d2                	test   edx,edx
c0013556:	74 2b                	je     c0013583 <File::open(FileOpenMode)+0x59>
c0013558:	b8 06 00 00 00       	mov    eax,0x6
c001355d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013561:	75 20                	jne    c0013583 <File::open(FileOpenMode)+0x59>
c0013563:	8b 02                	mov    eax,DWORD PTR [edx]
c0013565:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001356b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001356f:	51                   	push   ecx
c0013570:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013573:	51                   	push   ecx
c0013574:	52                   	push   edx
c0013575:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013578:	83 c4 10             	add    esp,0x10
c001357b:	85 c0                	test   eax,eax
c001357d:	75 04                	jne    c0013583 <File::open(FileOpenMode)+0x59>
c001357f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013583:	83 c4 08             	add    esp,0x8
c0013586:	5b                   	pop    ebx
c0013587:	c3                   	ret    

c0013588 <File::close()>:
c0013588:	53                   	push   ebx
c0013589:	b8 0b 00 00 00       	mov    eax,0xb
c001358e:	83 ec 08             	sub    esp,0x8
c0013591:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013595:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001359c:	80 fa 19             	cmp    dl,0x19
c001359f:	77 41                	ja     c00135e2 <File::close()+0x5a>
c00135a1:	8b 1c 95 00 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1400]
c00135a8:	85 db                	test   ebx,ebx
c00135aa:	74 36                	je     c00135e2 <File::close()+0x5a>
c00135ac:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00135b3:	74 2d                	je     c00135e2 <File::close()+0x5a>
c00135b5:	b8 05 00 00 00       	mov    eax,0x5
c00135ba:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135be:	74 22                	je     c00135e2 <File::close()+0x5a>
c00135c0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00135c4:	8b 04 95 00 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1400]
c00135cb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00135d1:	53                   	push   ebx
c00135d2:	53                   	push   ebx
c00135d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00135d5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135db:	50                   	push   eax
c00135dc:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00135df:	83 c4 10             	add    esp,0x10
c00135e2:	83 c4 08             	add    esp,0x8
c00135e5:	5b                   	pop    ebx
c00135e6:	c3                   	ret    
c00135e7:	90                   	nop

c00135e8 <File::seek(unsigned long long)>:
c00135e8:	56                   	push   esi
c00135e9:	53                   	push   ebx
c00135ea:	b8 0b 00 00 00       	mov    eax,0xb
c00135ef:	51                   	push   ecx
c00135f0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00135f8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00135ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013603:	80 fa 19             	cmp    dl,0x19
c0013606:	77 31                	ja     c0013639 <File::seek(unsigned long long)+0x51>
c0013608:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c001360f:	85 d2                	test   edx,edx
c0013611:	74 26                	je     c0013639 <File::seek(unsigned long long)+0x51>
c0013613:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013619:	85 d2                	test   edx,edx
c001361b:	74 1c                	je     c0013639 <File::seek(unsigned long long)+0x51>
c001361d:	b8 05 00 00 00       	mov    eax,0x5
c0013622:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013626:	74 11                	je     c0013639 <File::seek(unsigned long long)+0x51>
c0013628:	8b 02                	mov    eax,DWORD PTR [edx]
c001362a:	53                   	push   ebx
c001362b:	51                   	push   ecx
c001362c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013632:	52                   	push   edx
c0013633:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013636:	83 c4 10             	add    esp,0x10
c0013639:	5a                   	pop    edx
c001363a:	5b                   	pop    ebx
c001363b:	5e                   	pop    esi
c001363c:	c3                   	ret    
c001363d:	90                   	nop

c001363e <File::tell(unsigned long long*)>:
c001363e:	83 ec 0c             	sub    esp,0xc
c0013641:	b8 0b 00 00 00       	mov    eax,0xb
c0013646:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001364a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013651:	80 fa 19             	cmp    dl,0x19
c0013654:	77 34                	ja     c001368a <File::tell(unsigned long long*)+0x4c>
c0013656:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c001365d:	85 d2                	test   edx,edx
c001365f:	74 29                	je     c001368a <File::tell(unsigned long long*)+0x4c>
c0013661:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013667:	85 d2                	test   edx,edx
c0013669:	74 1f                	je     c001368a <File::tell(unsigned long long*)+0x4c>
c001366b:	b8 05 00 00 00       	mov    eax,0x5
c0013670:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013674:	74 14                	je     c001368a <File::tell(unsigned long long*)+0x4c>
c0013676:	50                   	push   eax
c0013677:	8b 02                	mov    eax,DWORD PTR [edx]
c0013679:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001367d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013683:	52                   	push   edx
c0013684:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013687:	83 c4 10             	add    esp,0x10
c001368a:	83 c4 0c             	add    esp,0xc
c001368d:	c3                   	ret    

c001368e <File::rewind()>:
c001368e:	83 ec 10             	sub    esp,0x10
c0013691:	6a 00                	push   0x0
c0013693:	6a 00                	push   0x0
c0013695:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013699:	e8 4a ff ff ff       	call   c00135e8 <File::seek(unsigned long long)>
c001369e:	83 c4 1c             	add    esp,0x1c
c00136a1:	c3                   	ret    

c00136a2 <File::unlink()>:
c00136a2:	83 ec 0c             	sub    esp,0xc
c00136a5:	b8 0b 00 00 00       	mov    eax,0xb
c00136aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136b5:	80 f9 19             	cmp    cl,0x19
c00136b8:	77 2f                	ja     c00136e9 <File::unlink()+0x47>
c00136ba:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c00136c1:	85 c9                	test   ecx,ecx
c00136c3:	74 24                	je     c00136e9 <File::unlink()+0x47>
c00136c5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136cb:	85 c9                	test   ecx,ecx
c00136cd:	74 1a                	je     c00136e9 <File::unlink()+0x47>
c00136cf:	b8 06 00 00 00       	mov    eax,0x6
c00136d4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136d8:	75 0f                	jne    c00136e9 <File::unlink()+0x47>
c00136da:	83 c2 0d             	add    edx,0xd
c00136dd:	50                   	push   eax
c00136de:	50                   	push   eax
c00136df:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136e1:	52                   	push   edx
c00136e2:	51                   	push   ecx
c00136e3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00136e6:	83 c4 10             	add    esp,0x10
c00136e9:	83 c4 0c             	add    esp,0xc
c00136ec:	c3                   	ret    
c00136ed:	90                   	nop

c00136ee <File::rename(char const*)>:
c00136ee:	83 ec 0c             	sub    esp,0xc
c00136f1:	b8 0b 00 00 00       	mov    eax,0xb
c00136f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013701:	80 f9 19             	cmp    cl,0x19
c0013704:	77 32                	ja     c0013738 <File::rename(char const*)+0x4a>
c0013706:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c001370d:	85 c9                	test   ecx,ecx
c001370f:	74 27                	je     c0013738 <File::rename(char const*)+0x4a>
c0013711:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013717:	85 c9                	test   ecx,ecx
c0013719:	74 1d                	je     c0013738 <File::rename(char const*)+0x4a>
c001371b:	b8 06 00 00 00       	mov    eax,0x6
c0013720:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013724:	75 12                	jne    c0013738 <File::rename(char const*)+0x4a>
c0013726:	83 c2 0d             	add    edx,0xd
c0013729:	50                   	push   eax
c001372a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001372c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013730:	52                   	push   edx
c0013731:	51                   	push   ecx
c0013732:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013735:	83 c4 10             	add    esp,0x10
c0013738:	83 c4 0c             	add    esp,0xc
c001373b:	c3                   	ret    

c001373c <File::chfatattr(unsigned char, unsigned char)>:
c001373c:	57                   	push   edi
c001373d:	b8 0b 00 00 00       	mov    eax,0xb
c0013742:	56                   	push   esi
c0013743:	53                   	push   ebx
c0013744:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013748:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001374c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013753:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013757:	80 f9 19             	cmp    cl,0x19
c001375a:	77 37                	ja     c0013793 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001375c:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c0013763:	85 c9                	test   ecx,ecx
c0013765:	74 2c                	je     c0013793 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013767:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001376d:	85 c9                	test   ecx,ecx
c001376f:	74 22                	je     c0013793 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013771:	b8 06 00 00 00       	mov    eax,0x6
c0013776:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001377a:	75 17                	jne    c0013793 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001377c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001377e:	89 f0                	mov    eax,esi
c0013780:	83 c2 0d             	add    edx,0xd
c0013783:	0f b6 f0             	movzx  esi,al
c0013786:	0f b6 db             	movzx  ebx,bl
c0013789:	56                   	push   esi
c001378a:	53                   	push   ebx
c001378b:	52                   	push   edx
c001378c:	51                   	push   ecx
c001378d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013790:	83 c4 10             	add    esp,0x10
c0013793:	5b                   	pop    ebx
c0013794:	5e                   	pop    esi
c0013795:	5f                   	pop    edi
c0013796:	c3                   	ret    
c0013797:	90                   	nop

c0013798 <File::exists()>:
c0013798:	83 ec 0c             	sub    esp,0xc
c001379b:	31 c0                	xor    eax,eax
c001379d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137a1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137a8:	80 f9 19             	cmp    cl,0x19
c00137ab:	77 24                	ja     c00137d1 <File::exists()+0x39>
c00137ad:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c00137b4:	85 c9                	test   ecx,ecx
c00137b6:	74 19                	je     c00137d1 <File::exists()+0x39>
c00137b8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137be:	85 c9                	test   ecx,ecx
c00137c0:	74 0f                	je     c00137d1 <File::exists()+0x39>
c00137c2:	83 c2 0d             	add    edx,0xd
c00137c5:	50                   	push   eax
c00137c6:	50                   	push   eax
c00137c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137c9:	52                   	push   edx
c00137ca:	51                   	push   ecx
c00137cb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00137ce:	83 c4 10             	add    esp,0x10
c00137d1:	83 c4 0c             	add    esp,0xc
c00137d4:	c3                   	ret    
c00137d5:	90                   	nop

c00137d6 <File::stat(unsigned long long*, bool*)>:
c00137d6:	56                   	push   esi
c00137d7:	53                   	push   ebx
c00137d8:	50                   	push   eax
c00137d9:	b8 0b 00 00 00       	mov    eax,0xb
c00137de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137e2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137e6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137f1:	80 f9 19             	cmp    cl,0x19
c00137f4:	77 3d                	ja     c0013833 <File::stat(unsigned long long*, bool*)+0x5d>
c00137f6:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c00137fd:	85 c9                	test   ecx,ecx
c00137ff:	74 32                	je     c0013833 <File::stat(unsigned long long*, bool*)+0x5d>
c0013801:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013807:	85 c9                	test   ecx,ecx
c0013809:	74 28                	je     c0013833 <File::stat(unsigned long long*, bool*)+0x5d>
c001380b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001380d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013811:	74 13                	je     c0013826 <File::stat(unsigned long long*, bool*)+0x50>
c0013813:	83 ec 04             	sub    esp,0x4
c0013816:	56                   	push   esi
c0013817:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001381d:	51                   	push   ecx
c001381e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013821:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013824:	eb 0a                	jmp    c0013830 <File::stat(unsigned long long*, bool*)+0x5a>
c0013826:	53                   	push   ebx
c0013827:	83 c2 0d             	add    edx,0xd
c001382a:	56                   	push   esi
c001382b:	52                   	push   edx
c001382c:	51                   	push   ecx
c001382d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013830:	83 c4 10             	add    esp,0x10
c0013833:	5a                   	pop    edx
c0013834:	5b                   	pop    ebx
c0013835:	5e                   	pop    esi
c0013836:	c3                   	ret    

c0013837 <Fs::setcwd(Process*, char*)>:
c0013837:	55                   	push   ebp
c0013838:	57                   	push   edi
c0013839:	56                   	push   esi
c001383a:	53                   	push   ebx
c001383b:	81 ec 20 02 00 00    	sub    esp,0x220
c0013841:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013848:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001384e:	57                   	push   edi
c001384f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013856:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001385a:	56                   	push   esi
c001385b:	e8 bc fa ff ff       	call   c001331c <Fs::standardiseFiles(char*, char const*, char const*)>
c0013860:	89 34 24             	mov    DWORD PTR [esp],esi
c0013863:	e8 2c cf fe ff       	call   c0000794 <strlen>
c0013868:	83 c4 10             	add    esp,0x10
c001386b:	83 f8 02             	cmp    eax,0x2
c001386e:	77 17                	ja     c0013887 <Fs::setcwd(Process*, char*)+0x50>
c0013870:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013875:	83 e8 41             	sub    eax,0x41
c0013878:	83 f8 19             	cmp    eax,0x19
c001387b:	76 24                	jbe    c00138a1 <Fs::setcwd(Process*, char*)+0x6a>
c001387d:	b8 03 00 00 00       	mov    eax,0x3
c0013882:	e9 e0 00 00 00       	jmp    c0013967 <Fs::setcwd(Process*, char*)+0x130>
c0013887:	83 ec 0c             	sub    esp,0xc
c001388a:	56                   	push   esi
c001388b:	e8 04 cf fe ff       	call   c0000794 <strlen>
c0013890:	83 c4 10             	add    esp,0x10
c0013893:	83 f8 03             	cmp    eax,0x3
c0013896:	75 34                	jne    c00138cc <Fs::setcwd(Process*, char*)+0x95>
c0013898:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001389d:	75 2d                	jne    c00138cc <Fs::setcwd(Process*, char*)+0x95>
c001389f:	eb cf                	jmp    c0013870 <Fs::setcwd(Process*, char*)+0x39>
c00138a1:	8b 14 85 00 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1400]
c00138a8:	b8 05 00 00 00       	mov    eax,0x5
c00138ad:	85 d2                	test   edx,edx
c00138af:	0f 84 b2 00 00 00    	je     c0013967 <Fs::setcwd(Process*, char*)+0x130>
c00138b5:	b8 06 00 00 00       	mov    eax,0x6
c00138ba:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00138c1:	0f 85 92 00 00 00    	jne    c0013959 <Fs::setcwd(Process*, char*)+0x122>
c00138c7:	e9 9b 00 00 00       	jmp    c0013967 <Fs::setcwd(Process*, char*)+0x130>
c00138cc:	83 ec 0c             	sub    esp,0xc
c00138cf:	68 14 01 00 00       	push   0x114
c00138d4:	e8 67 bf ff ff       	call   c000f840 <malloc>
c00138d9:	83 c4 0c             	add    esp,0xc
c00138dc:	89 c3                	mov    ebx,eax
c00138de:	55                   	push   ebp
c00138df:	56                   	push   esi
c00138e0:	50                   	push   eax
c00138e1:	e8 e0 fb ff ff       	call   c00134c6 <File::File(char const*, Process*)>
c00138e6:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00138eb:	83 c4 0c             	add    esp,0xc
c00138ee:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00138f2:	50                   	push   eax
c00138f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138f7:	50                   	push   eax
c00138f8:	53                   	push   ebx
c00138f9:	e8 d8 fe ff ff       	call   c00137d6 <File::stat(unsigned long long*, bool*)>
c00138fe:	83 c4 10             	add    esp,0x10
c0013901:	83 f8 02             	cmp    eax,0x2
c0013904:	74 04                	je     c001390a <Fs::setcwd(Process*, char*)+0xd3>
c0013906:	85 c0                	test   eax,eax
c0013908:	74 1c                	je     c0013926 <Fs::setcwd(Process*, char*)+0xef>
c001390a:	b8 01 00 00 00       	mov    eax,0x1
c001390f:	85 db                	test   ebx,ebx
c0013911:	74 54                	je     c0013967 <Fs::setcwd(Process*, char*)+0x130>
c0013913:	83 ec 0c             	sub    esp,0xc
c0013916:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013918:	53                   	push   ebx
c0013919:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001391c:	83 c4 10             	add    esp,0x10
c001391f:	b8 01 00 00 00       	mov    eax,0x1
c0013924:	eb 41                	jmp    c0013967 <Fs::setcwd(Process*, char*)+0x130>
c0013926:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001392b:	75 1c                	jne    c0013949 <Fs::setcwd(Process*, char*)+0x112>
c001392d:	b8 02 00 00 00       	mov    eax,0x2
c0013932:	85 db                	test   ebx,ebx
c0013934:	74 31                	je     c0013967 <Fs::setcwd(Process*, char*)+0x130>
c0013936:	83 ec 0c             	sub    esp,0xc
c0013939:	8b 03                	mov    eax,DWORD PTR [ebx]
c001393b:	53                   	push   ebx
c001393c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001393f:	83 c4 10             	add    esp,0x10
c0013942:	b8 02 00 00 00       	mov    eax,0x2
c0013947:	eb 1e                	jmp    c0013967 <Fs::setcwd(Process*, char*)+0x130>
c0013949:	85 db                	test   ebx,ebx
c001394b:	74 0c                	je     c0013959 <Fs::setcwd(Process*, char*)+0x122>
c001394d:	83 ec 0c             	sub    esp,0xc
c0013950:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013952:	53                   	push   ebx
c0013953:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013956:	83 c4 10             	add    esp,0x10
c0013959:	50                   	push   eax
c001395a:	50                   	push   eax
c001395b:	56                   	push   esi
c001395c:	57                   	push   edi
c001395d:	e8 d2 ce fe ff       	call   c0000834 <strcpy>
c0013962:	83 c4 10             	add    esp,0x10
c0013965:	31 c0                	xor    eax,eax
c0013967:	81 c4 1c 02 00 00    	add    esp,0x21c
c001396d:	5b                   	pop    ebx
c001396e:	5e                   	pop    esi
c001396f:	5f                   	pop    edi
c0013970:	5d                   	pop    ebp
c0013971:	c3                   	ret    

c0013972 <Directory::Directory(char const*, Process*)>:
c0013972:	83 ec 0c             	sub    esp,0xc
c0013975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013979:	83 ec 08             	sub    esp,0x8
c001397c:	6a 00                	push   0x0
c001397e:	50                   	push   eax
c001397f:	e8 c4 dd ff ff       	call   c0011748 <UnixFile::UnixFile(int)>
c0013984:	83 c4 10             	add    esp,0x10
c0013987:	ba cc ac 02 c0       	mov    edx,0xc002accc
c001398c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013990:	89 10                	mov    DWORD PTR [eax],edx
c0013992:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013996:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001399c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139a0:	83 c0 0d             	add    eax,0xd
c00139a3:	83 ec 04             	sub    esp,0x4
c00139a6:	52                   	push   edx
c00139a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139ab:	50                   	push   eax
c00139ac:	e8 6b f9 ff ff       	call   c001331c <Fs::standardiseFiles(char*, char const*, char const*)>
c00139b1:	83 c4 10             	add    esp,0x10
c00139b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139b8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00139bb:	8d 50 bf             	lea    edx,[eax-0x41]
c00139be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139c2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00139c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139cc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00139d0:	90                   	nop
c00139d1:	83 c4 0c             	add    esp,0xc
c00139d4:	c3                   	ret    
c00139d5:	90                   	nop

c00139d6 <Directory::open()>:
c00139d6:	53                   	push   ebx
c00139d7:	b8 0b 00 00 00       	mov    eax,0xb
c00139dc:	83 ec 08             	sub    esp,0x8
c00139df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00139e3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00139ea:	80 fa 19             	cmp    dl,0x19
c00139ed:	77 3d                	ja     c0013a2c <Directory::open()+0x56>
c00139ef:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c00139f6:	85 d2                	test   edx,edx
c00139f8:	74 32                	je     c0013a2c <Directory::open()+0x56>
c00139fa:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013a00:	85 d2                	test   edx,edx
c0013a02:	74 28                	je     c0013a2c <Directory::open()+0x56>
c0013a04:	b8 06 00 00 00       	mov    eax,0x6
c0013a09:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013a0d:	75 1d                	jne    c0013a2c <Directory::open()+0x56>
c0013a0f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013a15:	50                   	push   eax
c0013a16:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a18:	51                   	push   ecx
c0013a19:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013a1c:	51                   	push   ecx
c0013a1d:	52                   	push   edx
c0013a1e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013a21:	83 c4 10             	add    esp,0x10
c0013a24:	85 c0                	test   eax,eax
c0013a26:	75 04                	jne    c0013a2c <Directory::open()+0x56>
c0013a28:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013a2c:	83 c4 08             	add    esp,0x8
c0013a2f:	5b                   	pop    ebx
c0013a30:	c3                   	ret    
c0013a31:	90                   	nop

c0013a32 <Directory::close()>:
c0013a32:	53                   	push   ebx
c0013a33:	b8 0b 00 00 00       	mov    eax,0xb
c0013a38:	83 ec 08             	sub    esp,0x8
c0013a3b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013a3f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a46:	80 fa 19             	cmp    dl,0x19
c0013a49:	77 41                	ja     c0013a8c <Directory::close()+0x5a>
c0013a4b:	8b 1c 95 00 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1400]
c0013a52:	85 db                	test   ebx,ebx
c0013a54:	74 36                	je     c0013a8c <Directory::close()+0x5a>
c0013a56:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013a5d:	74 2d                	je     c0013a8c <Directory::close()+0x5a>
c0013a5f:	b8 05 00 00 00       	mov    eax,0x5
c0013a64:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013a68:	74 22                	je     c0013a8c <Directory::close()+0x5a>
c0013a6a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013a6e:	8b 04 95 00 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1400]
c0013a75:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013a7b:	53                   	push   ebx
c0013a7c:	53                   	push   ebx
c0013a7d:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a7f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013a85:	50                   	push   eax
c0013a86:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a89:	83 c4 10             	add    esp,0x10
c0013a8c:	83 c4 08             	add    esp,0x8
c0013a8f:	5b                   	pop    ebx
c0013a90:	c3                   	ret    
c0013a91:	90                   	nop

c0013a92 <Directory::unlink()>:
c0013a92:	83 ec 0c             	sub    esp,0xc
c0013a95:	b8 0b 00 00 00       	mov    eax,0xb
c0013a9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a9e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013aa5:	80 f9 19             	cmp    cl,0x19
c0013aa8:	77 2f                	ja     c0013ad9 <Directory::unlink()+0x47>
c0013aaa:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c0013ab1:	85 c9                	test   ecx,ecx
c0013ab3:	74 24                	je     c0013ad9 <Directory::unlink()+0x47>
c0013ab5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013abb:	85 c9                	test   ecx,ecx
c0013abd:	74 1a                	je     c0013ad9 <Directory::unlink()+0x47>
c0013abf:	b8 06 00 00 00       	mov    eax,0x6
c0013ac4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013ac8:	75 0f                	jne    c0013ad9 <Directory::unlink()+0x47>
c0013aca:	83 c2 0d             	add    edx,0xd
c0013acd:	50                   	push   eax
c0013ace:	50                   	push   eax
c0013acf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ad1:	52                   	push   edx
c0013ad2:	51                   	push   ecx
c0013ad3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013ad6:	83 c4 10             	add    esp,0x10
c0013ad9:	83 c4 0c             	add    esp,0xc
c0013adc:	c3                   	ret    
c0013add:	90                   	nop

c0013ade <Directory::rename(char const*)>:
c0013ade:	83 ec 0c             	sub    esp,0xc
c0013ae1:	b8 0b 00 00 00       	mov    eax,0xb
c0013ae6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013af1:	80 f9 19             	cmp    cl,0x19
c0013af4:	77 32                	ja     c0013b28 <Directory::rename(char const*)+0x4a>
c0013af6:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c0013afd:	85 c9                	test   ecx,ecx
c0013aff:	74 27                	je     c0013b28 <Directory::rename(char const*)+0x4a>
c0013b01:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b07:	85 c9                	test   ecx,ecx
c0013b09:	74 1d                	je     c0013b28 <Directory::rename(char const*)+0x4a>
c0013b0b:	b8 06 00 00 00       	mov    eax,0x6
c0013b10:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b14:	75 12                	jne    c0013b28 <Directory::rename(char const*)+0x4a>
c0013b16:	83 c2 0d             	add    edx,0xd
c0013b19:	50                   	push   eax
c0013b1a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b20:	52                   	push   edx
c0013b21:	51                   	push   ecx
c0013b22:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013b25:	83 c4 10             	add    esp,0x10
c0013b28:	83 c4 0c             	add    esp,0xc
c0013b2b:	c3                   	ret    

c0013b2c <Directory::exists()>:
c0013b2c:	83 ec 0c             	sub    esp,0xc
c0013b2f:	31 c0                	xor    eax,eax
c0013b31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b35:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b3c:	80 f9 19             	cmp    cl,0x19
c0013b3f:	77 24                	ja     c0013b65 <Directory::exists()+0x39>
c0013b41:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c0013b48:	85 c9                	test   ecx,ecx
c0013b4a:	74 19                	je     c0013b65 <Directory::exists()+0x39>
c0013b4c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b52:	85 c9                	test   ecx,ecx
c0013b54:	74 0f                	je     c0013b65 <Directory::exists()+0x39>
c0013b56:	83 c2 0d             	add    edx,0xd
c0013b59:	50                   	push   eax
c0013b5a:	50                   	push   eax
c0013b5b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b5d:	52                   	push   edx
c0013b5e:	51                   	push   ecx
c0013b5f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013b62:	83 c4 10             	add    esp,0x10
c0013b65:	83 c4 0c             	add    esp,0xc
c0013b68:	c3                   	ret    
c0013b69:	90                   	nop

c0013b6a <Directory::read(dirent*)>:
c0013b6a:	83 ec 1c             	sub    esp,0x1c
c0013b6d:	b8 0b 00 00 00       	mov    eax,0xb
c0013b72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b76:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b7d:	80 fa 19             	cmp    dl,0x19
c0013b80:	77 30                	ja     c0013bb2 <Directory::read(dirent*)+0x48>
c0013b82:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c0013b89:	85 d2                	test   edx,edx
c0013b8b:	74 25                	je     c0013bb2 <Directory::read(dirent*)+0x48>
c0013b8d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b94:	74 1c                	je     c0013bb2 <Directory::read(dirent*)+0x48>
c0013b96:	83 ec 0c             	sub    esp,0xc
c0013b99:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b9b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b9f:	52                   	push   edx
c0013ba0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013ba4:	6a 00                	push   0x0
c0013ba6:	68 10 01 00 00       	push   0x110
c0013bab:	51                   	push   ecx
c0013bac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013baf:	83 c4 20             	add    esp,0x20
c0013bb2:	83 c4 1c             	add    esp,0x1c
c0013bb5:	c3                   	ret    

c0013bb6 <Directory::create()>:
c0013bb6:	83 ec 0c             	sub    esp,0xc
c0013bb9:	b8 0b 00 00 00       	mov    eax,0xb
c0013bbe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bc2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013bc9:	80 f9 19             	cmp    cl,0x19
c0013bcc:	77 2f                	ja     c0013bfd <Directory::create()+0x47>
c0013bce:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c0013bd5:	85 c9                	test   ecx,ecx
c0013bd7:	74 24                	je     c0013bfd <Directory::create()+0x47>
c0013bd9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013bdf:	85 c9                	test   ecx,ecx
c0013be1:	74 1a                	je     c0013bfd <Directory::create()+0x47>
c0013be3:	b8 06 00 00 00       	mov    eax,0x6
c0013be8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013bec:	75 0f                	jne    c0013bfd <Directory::create()+0x47>
c0013bee:	83 c2 0d             	add    edx,0xd
c0013bf1:	50                   	push   eax
c0013bf2:	50                   	push   eax
c0013bf3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bf5:	52                   	push   edx
c0013bf6:	51                   	push   ecx
c0013bf7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013bfa:	83 c4 10             	add    esp,0x10
c0013bfd:	83 c4 0c             	add    esp,0xc
c0013c00:	c3                   	ret    
c0013c01:	90                   	nop

c0013c02 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013c02:	b8 0a 00 00 00       	mov    eax,0xa
c0013c07:	c3                   	ret    

c0013c08 <Bus::Bus(char const*)>:
c0013c08:	83 ec 0c             	sub    esp,0xc
c0013c0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c0f:	83 ec 08             	sub    esp,0x8
c0013c12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c16:	50                   	push   eax
c0013c17:	e8 68 09 00 00       	call   c0014584 <Device::Device(char const*)>
c0013c1c:	83 c4 10             	add    esp,0x10
c0013c1f:	ba e8 ac 02 c0       	mov    edx,0xc002ace8
c0013c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c28:	89 10                	mov    DWORD PTR [eax],edx
c0013c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c2e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013c38:	90                   	nop
c0013c39:	83 c4 0c             	add    esp,0xc
c0013c3c:	c3                   	ret    
c0013c3d:	90                   	nop

c0013c3e <Bus::~Bus()>:
c0013c3e:	83 ec 0c             	sub    esp,0xc
c0013c41:	ba e8 ac 02 c0       	mov    edx,0xc002ace8
c0013c46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c4a:	89 10                	mov    DWORD PTR [eax],edx
c0013c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c50:	83 ec 0c             	sub    esp,0xc
c0013c53:	50                   	push   eax
c0013c54:	e8 0d 06 00 00       	call   c0014266 <Device::~Device()>
c0013c59:	83 c4 10             	add    esp,0x10
c0013c5c:	90                   	nop
c0013c5d:	83 c4 0c             	add    esp,0xc
c0013c60:	c3                   	ret    
c0013c61:	90                   	nop

c0013c62 <Bus::~Bus()>:
c0013c62:	83 ec 0c             	sub    esp,0xc
c0013c65:	83 ec 0c             	sub    esp,0xc
c0013c68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c6c:	e8 cd ff ff ff       	call   c0013c3e <Bus::~Bus()>
c0013c71:	83 c4 10             	add    esp,0x10
c0013c74:	83 ec 08             	sub    esp,0x8
c0013c77:	68 58 01 00 00       	push   0x158
c0013c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c80:	e8 09 f2 ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0013c85:	83 c4 10             	add    esp,0x10
c0013c88:	83 c4 0c             	add    esp,0xc
c0013c8b:	c3                   	ret    

c0013c8c <Buzzer::Buzzer(char const*)>:
c0013c8c:	83 ec 0c             	sub    esp,0xc
c0013c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c93:	83 ec 08             	sub    esp,0x8
c0013c96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c9a:	50                   	push   eax
c0013c9b:	e8 e4 08 00 00       	call   c0014584 <Device::Device(char const*)>
c0013ca0:	83 c4 10             	add    esp,0x10
c0013ca3:	ba 14 ad 02 c0       	mov    edx,0xc002ad14
c0013ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cac:	89 10                	mov    DWORD PTR [eax],edx
c0013cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc0:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013cca:	90                   	nop
c0013ccb:	83 c4 0c             	add    esp,0xc
c0013cce:	c3                   	ret    
c0013ccf:	90                   	nop

c0013cd0 <Buzzer::~Buzzer()>:
c0013cd0:	83 ec 0c             	sub    esp,0xc
c0013cd3:	ba 14 ad 02 c0       	mov    edx,0xc002ad14
c0013cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cdc:	89 10                	mov    DWORD PTR [eax],edx
c0013cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ce2:	83 ec 0c             	sub    esp,0xc
c0013ce5:	50                   	push   eax
c0013ce6:	e8 7b 05 00 00       	call   c0014266 <Device::~Device()>
c0013ceb:	83 c4 10             	add    esp,0x10
c0013cee:	90                   	nop
c0013cef:	83 c4 0c             	add    esp,0xc
c0013cf2:	c3                   	ret    
c0013cf3:	90                   	nop

c0013cf4 <Buzzer::~Buzzer()>:
c0013cf4:	83 ec 0c             	sub    esp,0xc
c0013cf7:	83 ec 0c             	sub    esp,0xc
c0013cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cfe:	e8 cd ff ff ff       	call   c0013cd0 <Buzzer::~Buzzer()>
c0013d03:	83 c4 10             	add    esp,0x10
c0013d06:	83 ec 08             	sub    esp,0x8
c0013d09:	68 5c 01 00 00       	push   0x15c
c0013d0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d12:	e8 77 f1 ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0013d17:	83 c4 10             	add    esp,0x10
c0013d1a:	83 c4 0c             	add    esp,0xc
c0013d1d:	c3                   	ret    

c0013d1e <Buzzer::stop()>:
c0013d1e:	83 ec 14             	sub    esp,0x14
c0013d21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d25:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d27:	6a 00                	push   0x0
c0013d29:	50                   	push   eax
c0013d2a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d2d:	83 c4 1c             	add    esp,0x1c
c0013d30:	c3                   	ret    

c0013d31 <beepThread(void*)>:
c0013d31:	53                   	push   ebx
c0013d32:	83 ec 08             	sub    esp,0x8
c0013d35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d39:	e8 f8 a0 00 00       	call   c001de36 <unlockScheduler()>
c0013d3e:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013d43:	52                   	push   edx
c0013d44:	52                   	push   edx
c0013d45:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013d4b:	52                   	push   edx
c0013d4c:	50                   	push   eax
c0013d4d:	e8 32 a6 00 00       	call   c001e384 <nanoSleep(unsigned long long)>
c0013d52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d55:	e8 c4 ff ff ff       	call   c0013d1e <Buzzer::stop()>
c0013d5a:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013d62:	83 c4 18             	add    esp,0x18
c0013d65:	5b                   	pop    ebx
c0013d66:	e9 5f a5 00 00       	jmp    c001e2ca <blockTask(TaskState)>
c0013d6b:	90                   	nop

c0013d6c <Buzzer::beep(int, int, bool)>:
c0013d6c:	57                   	push   edi
c0013d6d:	56                   	push   esi
c0013d6e:	53                   	push   ebx
c0013d6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d73:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d7b:	52                   	push   edx
c0013d7c:	52                   	push   edx
c0013d7d:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d83:	56                   	push   esi
c0013d84:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d87:	83 c4 10             	add    esp,0x10
c0013d8a:	89 f8                	mov    eax,edi
c0013d8c:	84 c0                	test   al,al
c0013d8e:	74 1f                	je     c0013daf <Buzzer::beep(int, int, bool)+0x43>
c0013d90:	50                   	push   eax
c0013d91:	50                   	push   eax
c0013d92:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d98:	99                   	cdq    
c0013d99:	52                   	push   edx
c0013d9a:	50                   	push   eax
c0013d9b:	e8 e4 a5 00 00       	call   c001e384 <nanoSleep(unsigned long long)>
c0013da0:	83 c4 10             	add    esp,0x10
c0013da3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013da7:	5b                   	pop    ebx
c0013da8:	5e                   	pop    esi
c0013da9:	5f                   	pop    edi
c0013daa:	e9 6f ff ff ff       	jmp    c0013d1e <Buzzer::stop()>
c0013daf:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013db5:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0013dba:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013dc2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013dc6:	c7 44 24 14 31 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013d31
c0013dce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013dd2:	5b                   	pop    ebx
c0013dd3:	5e                   	pop    esi
c0013dd4:	5f                   	pop    edi
c0013dd5:	e9 8c a1 00 00       	jmp    c001df66 <Process::createThread(void (*)(void*), void*, int)>

c0013dda <User::loadClockSettings(int)>:
c0013dda:	53                   	push   ebx
c0013ddb:	83 ec 14             	sub    esp,0x14
c0013dde:	68 14 01 00 00       	push   0x114
c0013de3:	e8 58 ba ff ff       	call   c000f840 <malloc>
c0013de8:	83 c4 0c             	add    esp,0xc
c0013deb:	89 c3                	mov    ebx,eax
c0013ded:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c0013df3:	68 3c ad 02 c0       	push   0xc002ad3c
c0013df8:	50                   	push   eax
c0013df9:	e8 c8 f6 ff ff       	call   c00134c6 <File::File(char const*, Process*)>
c0013dfe:	58                   	pop    eax
c0013dff:	5a                   	pop    edx
c0013e00:	6a 01                	push   0x1
c0013e02:	53                   	push   ebx
c0013e03:	e8 22 f7 ff ff       	call   c001352a <File::open(FileOpenMode)>
c0013e08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e0b:	e8 78 f7 ff ff       	call   c0013588 <File::close()>
c0013e10:	83 c4 10             	add    esp,0x10
c0013e13:	85 db                	test   ebx,ebx
c0013e15:	74 0f                	je     c0013e26 <User::loadClockSettings(int)+0x4c>
c0013e17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e19:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013e1d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e20:	83 c4 08             	add    esp,0x8
c0013e23:	5b                   	pop    ebx
c0013e24:	ff e0                	jmp    eax
c0013e26:	83 c4 08             	add    esp,0x8
c0013e29:	5b                   	pop    ebx
c0013e2a:	c3                   	ret    
c0013e2b:	90                   	nop

c0013e2c <Clock::Clock(char const*)>:
c0013e2c:	83 ec 0c             	sub    esp,0xc
c0013e2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e33:	83 ec 08             	sub    esp,0x8
c0013e36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e3a:	50                   	push   eax
c0013e3b:	e8 44 07 00 00       	call   c0014584 <Device::Device(char const*)>
c0013e40:	83 c4 10             	add    esp,0x10
c0013e43:	ba 64 ad 02 c0       	mov    edx,0xc002ad64
c0013e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e4c:	89 10                	mov    DWORD PTR [eax],edx
c0013e4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e52:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013e5c:	90                   	nop
c0013e5d:	83 c4 0c             	add    esp,0xc
c0013e60:	c3                   	ret    
c0013e61:	90                   	nop

c0013e62 <Clock::~Clock()>:
c0013e62:	83 ec 0c             	sub    esp,0xc
c0013e65:	ba 64 ad 02 c0       	mov    edx,0xc002ad64
c0013e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e6e:	89 10                	mov    DWORD PTR [eax],edx
c0013e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e74:	83 ec 0c             	sub    esp,0xc
c0013e77:	50                   	push   eax
c0013e78:	e8 e9 03 00 00       	call   c0014266 <Device::~Device()>
c0013e7d:	83 c4 10             	add    esp,0x10
c0013e80:	90                   	nop
c0013e81:	83 c4 0c             	add    esp,0xc
c0013e84:	c3                   	ret    
c0013e85:	90                   	nop

c0013e86 <Clock::~Clock()>:
c0013e86:	83 ec 0c             	sub    esp,0xc
c0013e89:	83 ec 0c             	sub    esp,0xc
c0013e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e90:	e8 cd ff ff ff       	call   c0013e62 <Clock::~Clock()>
c0013e95:	83 c4 10             	add    esp,0x10
c0013e98:	83 ec 08             	sub    esp,0x8
c0013e9b:	68 58 01 00 00       	push   0x158
c0013ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ea4:	e8 e5 ef ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0013ea9:	83 c4 10             	add    esp,0x10
c0013eac:	83 c4 0c             	add    esp,0xc
c0013eaf:	c3                   	ret    

c0013eb0 <Clock::timeInSecondsLocal()>:
c0013eb0:	53                   	push   ebx
c0013eb1:	83 ec 14             	sub    esp,0x14
c0013eb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013eb8:	8b 10                	mov    edx,DWORD PTR [eax]
c0013eba:	50                   	push   eax
c0013ebb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013ebe:	0f b6 0d 74 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e774
c0013ec5:	03 0d 78 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e778
c0013ecb:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ed1:	89 cb                	mov    ebx,ecx
c0013ed3:	c1 fb 1f             	sar    ebx,0x1f
c0013ed6:	01 c8                	add    eax,ecx
c0013ed8:	11 da                	adc    edx,ebx
c0013eda:	83 c4 10             	add    esp,0x10
c0013edd:	31 c9                	xor    ecx,ecx
c0013edf:	80 3d 75 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e775,0x0
c0013ee6:	74 05                	je     c0013eed <Clock::timeInSecondsLocal()+0x3d>
c0013ee8:	b9 08 07 00 00       	mov    ecx,0x708
c0013eed:	31 db                	xor    ebx,ebx
c0013eef:	01 c8                	add    eax,ecx
c0013ef1:	11 da                	adc    edx,ebx
c0013ef3:	83 c4 08             	add    esp,0x8
c0013ef6:	5b                   	pop    ebx
c0013ef7:	c3                   	ret    

c0013ef8 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013ef8:	57                   	push   edi
c0013ef9:	56                   	push   esi
c0013efa:	53                   	push   ebx
c0013efb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013eff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f03:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013f05:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f09:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013f0c:	0f b6 05 74 e7 02 c0 	movzx  eax,BYTE PTR ds:0xc002e774
c0013f13:	03 05 78 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e778
c0013f19:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013f1f:	99                   	cdq    
c0013f20:	29 c6                	sub    esi,eax
c0013f22:	19 d7                	sbb    edi,edx
c0013f24:	89 f0                	mov    eax,esi
c0013f26:	89 fa                	mov    edx,edi
c0013f28:	31 f6                	xor    esi,esi
c0013f2a:	80 3d 75 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e775,0x0
c0013f31:	74 05                	je     c0013f38 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013f33:	be 08 07 00 00       	mov    esi,0x708
c0013f38:	31 ff                	xor    edi,edi
c0013f3a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013f3e:	29 f0                	sub    eax,esi
c0013f40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f44:	19 fa                	sbb    edx,edi
c0013f46:	89 d8                	mov    eax,ebx
c0013f48:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f4c:	5b                   	pop    ebx
c0013f4d:	5e                   	pop    esi
c0013f4e:	5f                   	pop    edi
c0013f4f:	ff e0                	jmp    eax

c0013f51 <datetimeToSeconds(datetime_t)>:
c0013f51:	55                   	push   ebp
c0013f52:	57                   	push   edi
c0013f53:	56                   	push   esi
c0013f54:	53                   	push   ebx
c0013f55:	83 ec 14             	sub    esp,0x14
c0013f58:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013f5c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f60:	89 d3                	mov    ebx,edx
c0013f62:	0f b6 c6             	movzx  eax,dh
c0013f65:	c1 eb 10             	shr    ebx,0x10
c0013f68:	48                   	dec    eax
c0013f69:	66 81 eb 6c 07       	sub    bx,0x76c
c0013f6e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013f72:	0f b6 f5             	movzx  esi,ch
c0013f75:	89 cf                	mov    edi,ecx
c0013f77:	6b f6 3c             	imul   esi,esi,0x3c
c0013f7a:	c1 ef 10             	shr    edi,0x10
c0013f7d:	0f b6 c9             	movzx  ecx,cl
c0013f80:	89 f8                	mov    eax,edi
c0013f82:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f88:	0f b6 f8             	movzx  edi,al
c0013f8b:	0f b6 d2             	movzx  edx,dl
c0013f8e:	01 fe                	add    esi,edi
c0013f90:	01 f1                	add    ecx,esi
c0013f92:	0f b7 f3             	movzx  esi,bx
c0013f95:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f99:	c1 f9 1f             	sar    ecx,0x1f
c0013f9c:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013fa1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fa5:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013faa:	8b 0c 8d a0 ad 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5260]
c0013fb1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013fb5:	76 29                	jbe    c0013fe0 <datetimeToSeconds(datetime_t)+0x8f>
c0013fb7:	f6 c3 03             	test   bl,0x3
c0013fba:	75 24                	jne    c0013fe0 <datetimeToSeconds(datetime_t)+0x8f>
c0013fbc:	31 d2                	xor    edx,edx
c0013fbe:	bf 64 00 00 00       	mov    edi,0x64
c0013fc3:	89 d8                	mov    eax,ebx
c0013fc5:	66 f7 f7             	div    di
c0013fc8:	66 85 d2             	test   dx,dx
c0013fcb:	75 12                	jne    c0013fdf <datetimeToSeconds(datetime_t)+0x8e>
c0013fcd:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013fd3:	bf 90 01 00 00       	mov    edi,0x190
c0013fd8:	99                   	cdq    
c0013fd9:	f7 ff                	idiv   edi
c0013fdb:	85 d2                	test   edx,edx
c0013fdd:	75 01                	jne    c0013fe0 <datetimeToSeconds(datetime_t)+0x8f>
c0013fdf:	41                   	inc    ecx
c0013fe0:	66 83 fb 46          	cmp    bx,0x46
c0013fe4:	76 45                	jbe    c001402b <datetimeToSeconds(datetime_t)+0xda>
c0013fe6:	bb 46 00 00 00       	mov    ebx,0x46
c0013feb:	bf 64 00 00 00       	mov    edi,0x64
c0013ff0:	bd 90 01 00 00       	mov    ebp,0x190
c0013ff5:	b8 6d 01 00 00       	mov    eax,0x16d
c0013ffa:	f6 c3 03             	test   bl,0x3
c0013ffd:	75 23                	jne    c0014022 <datetimeToSeconds(datetime_t)+0xd1>
c0013fff:	89 d8                	mov    eax,ebx
c0014001:	99                   	cdq    
c0014002:	f7 ff                	idiv   edi
c0014004:	b8 6e 01 00 00       	mov    eax,0x16e
c0014009:	85 d2                	test   edx,edx
c001400b:	75 15                	jne    c0014022 <datetimeToSeconds(datetime_t)+0xd1>
c001400d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0014013:	99                   	cdq    
c0014014:	f7 fd                	idiv   ebp
c0014016:	83 fa 01             	cmp    edx,0x1
c0014019:	19 c0                	sbb    eax,eax
c001401b:	f7 d0                	not    eax
c001401d:	05 6e 01 00 00       	add    eax,0x16e
c0014022:	01 c1                	add    ecx,eax
c0014024:	43                   	inc    ebx
c0014025:	39 f3                	cmp    ebx,esi
c0014027:	7c cc                	jl     c0013ff5 <datetimeToSeconds(datetime_t)+0xa4>
c0014029:	eb 35                	jmp    c0014060 <datetimeToSeconds(datetime_t)+0x10f>
c001402b:	74 33                	je     c0014060 <datetimeToSeconds(datetime_t)+0x10f>
c001402d:	b8 45 00 00 00       	mov    eax,0x45
c0014032:	89 c2                	mov    edx,eax
c0014034:	83 e2 03             	and    edx,0x3
c0014037:	39 f0                	cmp    eax,esi
c0014039:	7e 0f                	jle    c001404a <datetimeToSeconds(datetime_t)+0xf9>
c001403b:	83 fa 01             	cmp    edx,0x1
c001403e:	19 d2                	sbb    edx,edx
c0014040:	48                   	dec    eax
c0014041:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0014048:	eb e8                	jmp    c0014032 <datetimeToSeconds(datetime_t)+0xe1>
c001404a:	b8 6d 01 00 00       	mov    eax,0x16d
c001404f:	85 d2                	test   edx,edx
c0014051:	75 0b                	jne    c001405e <datetimeToSeconds(datetime_t)+0x10d>
c0014053:	66 83 fb 01          	cmp    bx,0x1
c0014057:	19 c0                	sbb    eax,eax
c0014059:	05 6e 01 00 00       	add    eax,0x16e
c001405e:	29 c1                	sub    ecx,eax
c0014060:	b8 80 51 01 00       	mov    eax,0x15180
c0014065:	f7 e9                	imul   ecx
c0014067:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001406b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001406f:	83 c4 14             	add    esp,0x14
c0014072:	5b                   	pop    ebx
c0014073:	5e                   	pop    esi
c0014074:	5f                   	pop    edi
c0014075:	5d                   	pop    ebp
c0014076:	c3                   	ret    
c0014077:	90                   	nop

c0014078 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0014078:	57                   	push   edi
c0014079:	56                   	push   esi
c001407a:	53                   	push   ebx
c001407b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001407f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014081:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014084:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014088:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001408c:	e8 c0 fe ff ff       	call   c0013f51 <datetimeToSeconds(datetime_t)>
c0014091:	59                   	pop    ecx
c0014092:	0f b6 0d 74 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e774
c0014099:	5b                   	pop    ebx
c001409a:	03 0d 78 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e778
c00140a0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00140a6:	89 cb                	mov    ebx,ecx
c00140a8:	c1 fb 1f             	sar    ebx,0x1f
c00140ab:	29 c8                	sub    eax,ecx
c00140ad:	19 da                	sbb    edx,ebx
c00140af:	31 c9                	xor    ecx,ecx
c00140b1:	80 3d 75 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e775,0x0
c00140b8:	74 05                	je     c00140bf <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00140ba:	b9 08 07 00 00       	mov    ecx,0x708
c00140bf:	31 db                	xor    ebx,ebx
c00140c1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00140c5:	29 c8                	sub    eax,ecx
c00140c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140cb:	19 da                	sbb    edx,ebx
c00140cd:	89 f8                	mov    eax,edi
c00140cf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00140d3:	5b                   	pop    ebx
c00140d4:	5e                   	pop    esi
c00140d5:	5f                   	pop    edi
c00140d6:	ff e0                	jmp    eax

c00140d8 <secondsToDatetime(unsigned long long)>:
c00140d8:	55                   	push   ebp
c00140d9:	57                   	push   edi
c00140da:	56                   	push   esi
c00140db:	53                   	push   ebx
c00140dc:	83 ec 1c             	sub    esp,0x1c
c00140df:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00140e3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00140e7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00140eb:	6a 00                	push   0x0
c00140ed:	68 80 51 01 00       	push   0x15180
c00140f2:	55                   	push   ebp
c00140f3:	57                   	push   edi
c00140f4:	e8 13 29 01 00       	call   c0026a0c <__udivdi3>
c00140f9:	83 c4 10             	add    esp,0x10
c00140fc:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014102:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014106:	6a 00                	push   0x0
c0014108:	68 80 51 01 00       	push   0x15180
c001410d:	55                   	push   ebp
c001410e:	57                   	push   edi
c001410f:	bf 10 0e 00 00       	mov    edi,0xe10
c0014114:	e8 f3 29 01 00       	call   c0026b0c <__umoddi3>
c0014119:	83 c4 10             	add    esp,0x10
c001411c:	99                   	cdq    
c001411d:	f7 ff                	idiv   edi
c001411f:	bf 3c 00 00 00       	mov    edi,0x3c
c0014124:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014127:	89 d0                	mov    eax,edx
c0014129:	99                   	cdq    
c001412a:	f7 ff                	idiv   edi
c001412c:	85 db                	test   ebx,ebx
c001412e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014131:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014134:	79 11                	jns    c0014147 <secondsToDatetime(unsigned long long)+0x6f>
c0014136:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001413a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014140:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014145:	eb 07                	jmp    c001414e <secondsToDatetime(unsigned long long)+0x76>
c0014147:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001414c:	89 d8                	mov    eax,ebx
c001414e:	bf b4 05 00 00       	mov    edi,0x5b4
c0014153:	99                   	cdq    
c0014154:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014159:	f7 f9                	idiv   ecx
c001415b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014160:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014164:	31 d2                	xor    edx,edx
c0014166:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001416e:	01 c3                	add    ebx,eax
c0014170:	89 d8                	mov    eax,ebx
c0014172:	f7 f1                	div    ecx
c0014174:	31 d2                	xor    edx,edx
c0014176:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014179:	89 d8                	mov    eax,ebx
c001417b:	f7 f7                	div    edi
c001417d:	31 d2                	xor    edx,edx
c001417f:	29 c1                	sub    ecx,eax
c0014181:	89 d8                	mov    eax,ebx
c0014183:	f7 f5                	div    ebp
c0014185:	bd 6d 01 00 00       	mov    ebp,0x16d
c001418a:	29 c1                	sub    ecx,eax
c001418c:	31 d2                	xor    edx,edx
c001418e:	89 c8                	mov    eax,ecx
c0014190:	f7 f5                	div    ebp
c0014192:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014197:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001419b:	31 d2                	xor    edx,edx
c001419d:	89 c8                	mov    eax,ecx
c001419f:	f7 f5                	div    ebp
c00141a1:	31 d2                	xor    edx,edx
c00141a3:	01 c3                	add    ebx,eax
c00141a5:	89 c8                	mov    eax,ecx
c00141a7:	f7 f7                	div    edi
c00141a9:	bf 99 00 00 00       	mov    edi,0x99
c00141ae:	29 c3                	sub    ebx,eax
c00141b0:	31 d2                	xor    edx,edx
c00141b2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00141ba:	29 c3                	sub    ebx,eax
c00141bc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00141bf:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00141c2:	bb 05 00 00 00       	mov    ebx,0x5
c00141c7:	83 c1 02             	add    ecx,0x2
c00141ca:	89 c8                	mov    eax,ecx
c00141cc:	f7 f7                	div    edi
c00141ce:	31 d2                	xor    edx,edx
c00141d0:	89 c7                	mov    edi,eax
c00141d2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00141d8:	83 c0 02             	add    eax,0x2
c00141db:	f7 f3                	div    ebx
c00141dd:	89 eb                	mov    ebx,ebp
c00141df:	29 c3                	sub    ebx,eax
c00141e1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00141e7:	88 1e                	mov    BYTE PTR [esi],bl
c00141e9:	19 c0                	sbb    eax,eax
c00141eb:	31 d2                	xor    edx,edx
c00141ed:	83 e0 0c             	and    eax,0xc
c00141f0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00141f4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00141fc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014200:	83 f9 01             	cmp    ecx,0x1
c0014203:	0f 96 c2             	setbe  dl
c0014206:	41                   	inc    ecx
c0014207:	01 d0                	add    eax,edx
c0014209:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001420c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014210:	83 c4 1c             	add    esp,0x1c
c0014213:	89 f0                	mov    eax,esi
c0014215:	5b                   	pop    ebx
c0014216:	5e                   	pop    esi
c0014217:	5f                   	pop    edi
c0014218:	5d                   	pop    ebp
c0014219:	c2 04 00             	ret    0x4

c001421c <Clock::timeInDatetimeLocal()>:
c001421c:	53                   	push   ebx
c001421d:	83 ec 14             	sub    esp,0x14
c0014220:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014224:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014228:	e8 83 fc ff ff       	call   c0013eb0 <Clock::timeInSecondsLocal()>
c001422d:	83 c4 0c             	add    esp,0xc
c0014230:	52                   	push   edx
c0014231:	50                   	push   eax
c0014232:	53                   	push   ebx
c0014233:	e8 a0 fe ff ff       	call   c00140d8 <secondsToDatetime(unsigned long long)>
c0014238:	89 d8                	mov    eax,ebx
c001423a:	83 c4 14             	add    esp,0x14
c001423d:	5b                   	pop    ebx
c001423e:	c2 04 00             	ret    0x4
c0014241:	90                   	nop

c0014242 <Device::hibernate()>:
c0014242:	c3                   	ret    
c0014243:	90                   	nop

c0014244 <Device::wake()>:
c0014244:	c3                   	ret    
c0014245:	90                   	nop

c0014246 <Device::detect()>:
c0014246:	c3                   	ret    
c0014247:	90                   	nop

c0014248 <Device::disableLegacy()>:
c0014248:	c3                   	ret    
c0014249:	90                   	nop

c001424a <Device::powerSaving(PowerSavingLevel)>:
c001424a:	c3                   	ret    
c001424b:	90                   	nop

c001424c <DriverlessDevice::close(int, int, void*)>:
c001424c:	31 c0                	xor    eax,eax
c001424e:	c3                   	ret    
c001424f:	90                   	nop

c0014250 <DriverlessDevice::detect()>:
c0014250:	c3                   	ret    
c0014251:	90                   	nop

c0014252 <DriverlessDevice::open(int, int, void*)>:
c0014252:	83 ec 18             	sub    esp,0x18
c0014255:	68 d0 ad 02 c0       	push   0xc002add0
c001425a:	e8 b0 63 00 00       	call   c001a60f <Krnl::panic(char const*)>
c001425f:	83 c8 ff             	or     eax,0xffffffff
c0014262:	83 c4 1c             	add    esp,0x1c
c0014265:	c3                   	ret    

c0014266 <Device::~Device()>:
c0014266:	ba f8 ad 02 c0       	mov    edx,0xc002adf8
c001426b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001426f:	89 10                	mov    DWORD PTR [eax],edx
c0014271:	90                   	nop
c0014272:	c3                   	ret    
c0014273:	90                   	nop

c0014274 <Device::~Device()>:
c0014274:	83 ec 0c             	sub    esp,0xc
c0014277:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001427b:	e8 e6 ff ff ff       	call   c0014266 <Device::~Device()>
c0014280:	83 c4 04             	add    esp,0x4
c0014283:	83 ec 08             	sub    esp,0x8
c0014286:	68 58 01 00 00       	push   0x158
c001428b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001428f:	e8 fa eb ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0014294:	83 c4 10             	add    esp,0x10
c0014297:	83 c4 0c             	add    esp,0xc
c001429a:	c3                   	ret    
c001429b:	90                   	nop

c001429c <Device::findAndLoadDriver()>:
c001429c:	c3                   	ret    
c001429d:	90                   	nop

c001429e <Device::preOpenPCI(PCIDeviceInfo)>:
c001429e:	57                   	push   edi
c001429f:	b9 09 00 00 00       	mov    ecx,0x9
c00142a4:	56                   	push   esi
c00142a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00142a9:	8d 74 24 10          	lea    esi,[esp+0x10]
c00142ad:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00142b7:	81 c7 18 01 00 00    	add    edi,0x118
c00142bd:	fc                   	cld    
c00142be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00142c0:	5e                   	pop    esi
c00142c1:	5f                   	pop    edi
c00142c2:	c3                   	ret    
c00142c3:	90                   	nop

c00142c4 <Device::preOpenACPI(void*, char*, char*)>:
c00142c4:	56                   	push   esi
c00142c5:	53                   	push   ebx
c00142c6:	83 ec 08             	sub    esp,0x8
c00142c9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142cd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142d1:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00142db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142df:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00142e5:	6a 1e                	push   0x1e
c00142e7:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00142ed:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142f1:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00142f7:	50                   	push   eax
c00142f8:	e8 47 c4 fe ff       	call   c0000744 <memcpy>
c00142fd:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014301:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014305:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001430d:	83 c4 14             	add    esp,0x14
c0014310:	5b                   	pop    ebx
c0014311:	5e                   	pop    esi
c0014312:	e9 2d c4 fe ff       	jmp    c0000744 <memcpy>
c0014317:	90                   	nop

c0014318 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001431c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014321:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014328:	75 0b                	jne    c0014335 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c001432a:	8b 00                	mov    eax,DWORD PTR [eax]
c001432c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014330:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014333:	eb 1e                	jmp    c0014353 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014335:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001433a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014340:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014346:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014348:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001434c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014350:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014353:	ff e0                	jmp    eax
c0014355:	90                   	nop

c0014356 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014356:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001435a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001435f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014366:	75 0b                	jne    c0014373 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014368:	8b 00                	mov    eax,DWORD PTR [eax]
c001436a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001436e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014371:	eb 1e                	jmp    c0014391 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014373:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0014378:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001437e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014384:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014386:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001438a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001438e:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014391:	ff e0                	jmp    eax
c0014393:	90                   	nop

c0014394 <Device::addChild(Device*)>:
c0014394:	53                   	push   ebx
c0014395:	83 ec 08             	sub    esp,0x8
c0014398:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001439c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143a0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00143a6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00143ac:	8b 13                	mov    edx,DWORD PTR [ebx]
c00143ae:	85 d2                	test   edx,edx
c00143b0:	74 04                	je     c00143b6 <Device::addChild(Device*)+0x22>
c00143b2:	89 d3                	mov    ebx,edx
c00143b4:	eb f6                	jmp    c00143ac <Device::addChild(Device*)+0x18>
c00143b6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00143b9:	83 ec 0c             	sub    esp,0xc
c00143bc:	6a 08                	push   0x8
c00143be:	e8 7d b4 ff ff       	call   c000f840 <malloc>
c00143c3:	89 03                	mov    DWORD PTR [ebx],eax
c00143c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143d2:	83 c4 18             	add    esp,0x18
c00143d5:	5b                   	pop    ebx
c00143d6:	c3                   	ret    
c00143d7:	90                   	nop

c00143d8 <Device::removeAllChildren()>:
c00143d8:	56                   	push   esi
c00143d9:	53                   	push   ebx
c00143da:	52                   	push   edx
c00143db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143df:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00143e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143e8:	74 17                	je     c0014401 <Device::removeAllChildren()+0x29>
c00143ea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00143ed:	85 c0                	test   eax,eax
c00143ef:	74 0c                	je     c00143fd <Device::removeAllChildren()+0x25>
c00143f1:	83 ec 0c             	sub    esp,0xc
c00143f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00143f6:	50                   	push   eax
c00143f7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00143fa:	83 c4 10             	add    esp,0x10
c00143fd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143ff:	eb e4                	jmp    c00143e5 <Device::removeAllChildren()+0xd>
c0014401:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014407:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001440d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014413:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001441a:	58                   	pop    eax
c001441b:	5b                   	pop    ebx
c001441c:	5e                   	pop    esi
c001441d:	c3                   	ret    

c001441e <Device::hibernateAll()>:
c001441e:	53                   	push   ebx
c001441f:	83 ec 14             	sub    esp,0x14
c0014422:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014426:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014428:	53                   	push   ebx
c0014429:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001442c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014432:	83 c4 10             	add    esp,0x10
c0014435:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014438:	74 0f                	je     c0014449 <Device::hibernateAll()+0x2b>
c001443a:	83 ec 0c             	sub    esp,0xc
c001443d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014440:	e8 d9 ff ff ff       	call   c001441e <Device::hibernateAll()>
c0014445:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014447:	eb e9                	jmp    c0014432 <Device::hibernateAll()+0x14>
c0014449:	83 c4 08             	add    esp,0x8
c001444c:	5b                   	pop    ebx
c001444d:	c3                   	ret    

c001444e <Device::wakeAll()>:
c001444e:	53                   	push   ebx
c001444f:	83 ec 14             	sub    esp,0x14
c0014452:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014456:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014458:	53                   	push   ebx
c0014459:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001445c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014462:	83 c4 10             	add    esp,0x10
c0014465:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014468:	74 0f                	je     c0014479 <Device::wakeAll()+0x2b>
c001446a:	83 ec 0c             	sub    esp,0xc
c001446d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014470:	e8 d9 ff ff ff       	call   c001444e <Device::wakeAll()>
c0014475:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014477:	eb e9                	jmp    c0014462 <Device::wakeAll()+0x14>
c0014479:	83 c4 08             	add    esp,0x8
c001447c:	5b                   	pop    ebx
c001447d:	c3                   	ret    

c001447e <Device::detectAll()>:
c001447e:	53                   	push   ebx
c001447f:	83 ec 14             	sub    esp,0x14
c0014482:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014486:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014488:	53                   	push   ebx
c0014489:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001448c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014492:	83 c4 10             	add    esp,0x10
c0014495:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014498:	74 0f                	je     c00144a9 <Device::detectAll()+0x2b>
c001449a:	83 ec 0c             	sub    esp,0xc
c001449d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144a0:	e8 d9 ff ff ff       	call   c001447e <Device::detectAll()>
c00144a5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144a7:	eb e9                	jmp    c0014492 <Device::detectAll()+0x14>
c00144a9:	83 c4 08             	add    esp,0x8
c00144ac:	5b                   	pop    ebx
c00144ad:	c3                   	ret    

c00144ae <Device::disableLegacyAll()>:
c00144ae:	53                   	push   ebx
c00144af:	83 ec 14             	sub    esp,0x14
c00144b2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144b8:	53                   	push   ebx
c00144b9:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00144bc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144c2:	83 c4 10             	add    esp,0x10
c00144c5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144c8:	74 0f                	je     c00144d9 <Device::disableLegacyAll()+0x2b>
c00144ca:	83 ec 0c             	sub    esp,0xc
c00144cd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144d0:	e8 d9 ff ff ff       	call   c00144ae <Device::disableLegacyAll()>
c00144d5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144d7:	eb e9                	jmp    c00144c2 <Device::disableLegacyAll()+0x14>
c00144d9:	83 c4 08             	add    esp,0x8
c00144dc:	5b                   	pop    ebx
c00144dd:	c3                   	ret    

c00144de <Device::loadDriversForAll()>:
c00144de:	53                   	push   ebx
c00144df:	83 ec 08             	sub    esp,0x8
c00144e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144e6:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144ec:	8b 18                	mov    ebx,DWORD PTR [eax]
c00144ee:	85 db                	test   ebx,ebx
c00144f0:	74 12                	je     c0014504 <Device::loadDriversForAll()+0x26>
c00144f2:	83 ec 0c             	sub    esp,0xc
c00144f5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144f8:	e8 e1 ff ff ff       	call   c00144de <Device::loadDriversForAll()>
c00144fd:	83 c4 10             	add    esp,0x10
c0014500:	89 d8                	mov    eax,ebx
c0014502:	eb e8                	jmp    c00144ec <Device::loadDriversForAll()+0xe>
c0014504:	83 c4 08             	add    esp,0x8
c0014507:	5b                   	pop    ebx
c0014508:	c3                   	ret    
c0014509:	90                   	nop

c001450a <Device::closeAll()>:
c001450a:	53                   	push   ebx
c001450b:	83 ec 08             	sub    esp,0x8
c001450e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014512:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014514:	6a 00                	push   0x0
c0014516:	6a 00                	push   0x0
c0014518:	6a 00                	push   0x0
c001451a:	53                   	push   ebx
c001451b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001451e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014524:	83 c4 10             	add    esp,0x10
c0014527:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001452a:	74 0f                	je     c001453b <Device::closeAll()+0x31>
c001452c:	83 ec 0c             	sub    esp,0xc
c001452f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014532:	e8 d3 ff ff ff       	call   c001450a <Device::closeAll()>
c0014537:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014539:	eb e9                	jmp    c0014524 <Device::closeAll()+0x1a>
c001453b:	83 c4 08             	add    esp,0x8
c001453e:	5b                   	pop    ebx
c001453f:	c3                   	ret    

c0014540 <Device::powerSavingAll(PowerSavingLevel)>:
c0014540:	56                   	push   esi
c0014541:	53                   	push   ebx
c0014542:	83 ec 0c             	sub    esp,0xc
c0014545:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014549:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001454d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001454f:	56                   	push   esi
c0014550:	53                   	push   ebx
c0014551:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014554:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001455a:	83 c4 10             	add    esp,0x10
c001455d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014560:	74 0f                	je     c0014571 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014562:	52                   	push   edx
c0014563:	52                   	push   edx
c0014564:	56                   	push   esi
c0014565:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014568:	e8 d3 ff ff ff       	call   c0014540 <Device::powerSavingAll(PowerSavingLevel)>
c001456d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001456f:	eb e9                	jmp    c001455a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014571:	58                   	pop    eax
c0014572:	5b                   	pop    ebx
c0014573:	5e                   	pop    esi
c0014574:	c3                   	ret    
c0014575:	90                   	nop

c0014576 <Device::setName(char const*)>:
c0014576:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001457e:	e9 b1 c2 fe ff       	jmp    c0000834 <strcpy>
c0014583:	90                   	nop

c0014584 <Device::Device(char const*)>:
c0014584:	83 ec 1c             	sub    esp,0x1c
c0014587:	ba f8 ad 02 c0       	mov    edx,0xc002adf8
c001458c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014590:	89 10                	mov    DWORD PTR [eax],edx
c0014592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014596:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00145a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00145ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145ca:	83 ec 08             	sub    esp,0x8
c00145cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145d5:	e8 9c ff ff ff       	call   c0014576 <Device::setName(char const*)>
c00145da:	83 c4 10             	add    esp,0x10
c00145dd:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00145e5:	83 ec 0c             	sub    esp,0xc
c00145e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145ec:	e8 4f b2 ff ff       	call   c000f840 <malloc>
c00145f1:	83 c4 10             	add    esp,0x10
c00145f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014601:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014605:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001460b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001460f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014615:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001461b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001461f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014625:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001462c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014630:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014637:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001463b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014642:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014646:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014650:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014654:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001465e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014662:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001466c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014670:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001467a:	90                   	nop
c001467b:	83 c4 1c             	add    esp,0x1c
c001467e:	c3                   	ret    
c001467f:	90                   	nop

c0014680 <Device::getName()>:
c0014680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014684:	05 d0 00 00 00       	add    eax,0xd0
c0014689:	c3                   	ret    

c001468a <DriverlessDevice::DriverlessDevice(char const*)>:
c001468a:	83 ec 0c             	sub    esp,0xc
c001468d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014691:	83 ec 08             	sub    esp,0x8
c0014694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014698:	50                   	push   eax
c0014699:	e8 e6 fe ff ff       	call   c0014584 <Device::Device(char const*)>
c001469e:	83 c4 10             	add    esp,0x10
c00146a1:	ba 24 ae 02 c0       	mov    edx,0xc002ae24
c00146a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146aa:	89 10                	mov    DWORD PTR [eax],edx
c00146ac:	90                   	nop
c00146ad:	83 c4 0c             	add    esp,0xc
c00146b0:	c3                   	ret    
c00146b1:	90                   	nop

c00146b2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00146b2:	57                   	push   edi
c00146b3:	56                   	push   esi
c00146b4:	53                   	push   ebx
c00146b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146b9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00146bd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00146c1:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00146c7:	75 0c                	jne    c00146d5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00146c9:	52                   	push   edx
c00146ca:	52                   	push   edx
c00146cb:	53                   	push   ebx
c00146cc:	56                   	push   esi
c00146cd:	e8 78 42 01 00       	call   c002894a <LinkedList<Device>::addElement(Device*)>
c00146d2:	83 c4 10             	add    esp,0x10
c00146d5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00146db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00146de:	74 12                	je     c00146f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00146e0:	50                   	push   eax
c00146e1:	57                   	push   edi
c00146e2:	56                   	push   esi
c00146e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00146e6:	e8 c7 ff ff ff       	call   c00146b2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00146ed:	83 c4 10             	add    esp,0x10
c00146f0:	eb e9                	jmp    c00146db <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00146f2:	5b                   	pop    ebx
c00146f3:	5e                   	pop    esi
c00146f4:	5f                   	pop    edi
c00146f5:	c3                   	ret    

c00146f6 <getDevicesOfType(DeviceType)>:
c00146f6:	53                   	push   ebx
c00146f7:	83 ec 14             	sub    esp,0x14
c00146fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00146fe:	53                   	push   ebx
c00146ff:	e8 22 43 01 00       	call   c0028a26 <LinkedList<Device>::LinkedList()>
c0014704:	83 c4 0c             	add    esp,0xc
c0014707:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001470b:	53                   	push   ebx
c001470c:	ff 35 e8 e5 02 c0    	push   DWORD PTR ds:0xc002e5e8
c0014712:	e8 9b ff ff ff       	call   c00146b2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014717:	89 d8                	mov    eax,ebx
c0014719:	83 c4 18             	add    esp,0x18
c001471c:	5b                   	pop    ebx
c001471d:	c2 04 00             	ret    0x4

c0014720 <HardDiskController::HardDiskController(char const*)>:
c0014720:	83 ec 0c             	sub    esp,0xc
c0014723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014727:	83 ec 08             	sub    esp,0x8
c001472a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001472e:	50                   	push   eax
c001472f:	e8 50 fe ff ff       	call   c0014584 <Device::Device(char const*)>
c0014734:	83 c4 10             	add    esp,0x10
c0014737:	ba 50 ae 02 c0       	mov    edx,0xc002ae50
c001473c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014740:	89 10                	mov    DWORD PTR [eax],edx
c0014742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014746:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014750:	90                   	nop
c0014751:	83 c4 0c             	add    esp,0xc
c0014754:	c3                   	ret    
c0014755:	90                   	nop

c0014756 <HardDiskController::~HardDiskController()>:
c0014756:	83 ec 0c             	sub    esp,0xc
c0014759:	ba 50 ae 02 c0       	mov    edx,0xc002ae50
c001475e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014762:	89 10                	mov    DWORD PTR [eax],edx
c0014764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014768:	83 ec 0c             	sub    esp,0xc
c001476b:	50                   	push   eax
c001476c:	e8 f5 fa ff ff       	call   c0014266 <Device::~Device()>
c0014771:	83 c4 10             	add    esp,0x10
c0014774:	90                   	nop
c0014775:	83 c4 0c             	add    esp,0xc
c0014778:	c3                   	ret    
c0014779:	90                   	nop

c001477a <HardDiskController::~HardDiskController()>:
c001477a:	83 ec 0c             	sub    esp,0xc
c001477d:	83 ec 0c             	sub    esp,0xc
c0014780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014784:	e8 cd ff ff ff       	call   c0014756 <HardDiskController::~HardDiskController()>
c0014789:	83 c4 10             	add    esp,0x10
c001478c:	83 ec 08             	sub    esp,0x8
c001478f:	68 58 01 00 00       	push   0x158
c0014794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014798:	e8 f1 e6 ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c001479d:	83 c4 10             	add    esp,0x10
c00147a0:	83 c4 0c             	add    esp,0xc
c00147a3:	c3                   	ret    

c00147a4 <PhysicalDisk::eject()>:
c00147a4:	83 ec 18             	sub    esp,0x18
c00147a7:	68 74 ae 02 c0       	push   0xc002ae74
c00147ac:	e8 bd e7 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00147b1:	83 c8 ff             	or     eax,0xffffffff
c00147b4:	83 c4 1c             	add    esp,0x1c
c00147b7:	c3                   	ret    

c00147b8 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00147b8:	83 ec 0c             	sub    esp,0xc
c00147bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147bf:	83 ec 08             	sub    esp,0x8
c00147c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147c6:	50                   	push   eax
c00147c7:	e8 b8 fd ff ff       	call   c0014584 <Device::Device(char const*)>
c00147cc:	83 c4 10             	add    esp,0x10
c00147cf:	ba a4 ae 02 c0       	mov    edx,0xc002aea4
c00147d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d8:	89 10                	mov    DWORD PTR [eax],edx
c00147da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147de:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00147e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e9:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00147f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f4:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00147fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014802:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014806:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001480c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014810:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001481a:	90                   	nop
c001481b:	83 c4 0c             	add    esp,0xc
c001481e:	c3                   	ret    
c001481f:	90                   	nop

c0014820 <PhysicalDisk::startCache()>:
c0014820:	56                   	push   esi
c0014821:	53                   	push   ebx
c0014822:	83 ec 10             	sub    esp,0x10
c0014825:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014829:	6a 44                	push   0x44
c001482b:	e8 10 b0 ff ff       	call   c000f840 <malloc>
c0014830:	89 c6                	mov    esi,eax
c0014832:	58                   	pop    eax
c0014833:	5a                   	pop    edx
c0014834:	53                   	push   ebx
c0014835:	56                   	push   esi
c0014836:	e8 29 27 00 00       	call   c0016f64 <VCache::VCache(PhysicalDisk*)>
c001483b:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014841:	83 c4 14             	add    esp,0x14
c0014844:	5b                   	pop    ebx
c0014845:	5e                   	pop    esi
c0014846:	c3                   	ret    
c0014847:	90                   	nop

c0014848 <PhysicalDisk::~PhysicalDisk()>:
c0014848:	83 ec 0c             	sub    esp,0xc
c001484b:	ba a4 ae 02 c0       	mov    edx,0xc002aea4
c0014850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014854:	89 10                	mov    DWORD PTR [eax],edx
c0014856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001485a:	83 ec 0c             	sub    esp,0xc
c001485d:	50                   	push   eax
c001485e:	e8 03 fa ff ff       	call   c0014266 <Device::~Device()>
c0014863:	83 c4 10             	add    esp,0x10
c0014866:	90                   	nop
c0014867:	83 c4 0c             	add    esp,0xc
c001486a:	c3                   	ret    
c001486b:	90                   	nop

c001486c <PhysicalDisk::~PhysicalDisk()>:
c001486c:	83 ec 0c             	sub    esp,0xc
c001486f:	83 ec 0c             	sub    esp,0xc
c0014872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014876:	e8 cd ff ff ff       	call   c0014848 <PhysicalDisk::~PhysicalDisk()>
c001487b:	83 c4 10             	add    esp,0x10
c001487e:	83 ec 08             	sub    esp,0x8
c0014881:	68 6c 01 00 00       	push   0x16c
c0014886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001488a:	e8 ff e5 ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c001488f:	83 c4 10             	add    esp,0x10
c0014892:	83 c4 0c             	add    esp,0xc
c0014895:	c3                   	ret    

c0014896 <FPU::FPU(char const*)>:
c0014896:	83 ec 0c             	sub    esp,0xc
c0014899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001489d:	83 ec 08             	sub    esp,0x8
c00148a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148a4:	50                   	push   eax
c00148a5:	e8 da fc ff ff       	call   c0014584 <Device::Device(char const*)>
c00148aa:	83 c4 10             	add    esp,0x10
c00148ad:	ba e8 ae 02 c0       	mov    edx,0xc002aee8
c00148b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148b6:	89 10                	mov    DWORD PTR [eax],edx
c00148b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148bc:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00148c6:	90                   	nop
c00148c7:	83 c4 0c             	add    esp,0xc
c00148ca:	c3                   	ret    
c00148cb:	90                   	nop

c00148cc <FPU::~FPU()>:
c00148cc:	83 ec 0c             	sub    esp,0xc
c00148cf:	ba e8 ae 02 c0       	mov    edx,0xc002aee8
c00148d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148d8:	89 10                	mov    DWORD PTR [eax],edx
c00148da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148de:	83 ec 0c             	sub    esp,0xc
c00148e1:	50                   	push   eax
c00148e2:	e8 7f f9 ff ff       	call   c0014266 <Device::~Device()>
c00148e7:	83 c4 10             	add    esp,0x10
c00148ea:	90                   	nop
c00148eb:	83 c4 0c             	add    esp,0xc
c00148ee:	c3                   	ret    
c00148ef:	90                   	nop

c00148f0 <FPU::~FPU()>:
c00148f0:	83 ec 0c             	sub    esp,0xc
c00148f3:	83 ec 0c             	sub    esp,0xc
c00148f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148fa:	e8 cd ff ff ff       	call   c00148cc <FPU::~FPU()>
c00148ff:	83 c4 10             	add    esp,0x10
c0014902:	83 ec 08             	sub    esp,0x8
c0014905:	68 58 01 00 00       	push   0x158
c001490a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001490e:	e8 7b e5 ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0014913:	83 c4 10             	add    esp,0x10
c0014916:	83 c4 0c             	add    esp,0xc
c0014919:	c3                   	ret    

c001491a <setupFPU()>:
c001491a:	53                   	push   ebx
c001491b:	83 ec 08             	sub    esp,0x8
c001491e:	8b 15 e8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5e8
c0014924:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001492b:	74 19                	je     c0014946 <setupFPU()+0x2c>
c001492d:	83 ec 0c             	sub    esp,0xc
c0014930:	68 58 01 00 00       	push   0x158
c0014935:	e8 06 af ff ff       	call   c000f840 <malloc>
c001493a:	89 c3                	mov    ebx,eax
c001493c:	89 04 24             	mov    DWORD PTR [esp],eax
c001493f:	e8 56 0c 01 00       	call   c002559a <AVX::AVX()>
c0014944:	eb 5b                	jmp    c00149a1 <setupFPU()+0x87>
c0014946:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001494c:	84 c0                	test   al,al
c001494e:	79 19                	jns    c0014969 <setupFPU()+0x4f>
c0014950:	83 ec 0c             	sub    esp,0xc
c0014953:	68 58 01 00 00       	push   0x158
c0014958:	e8 e3 ae ff ff       	call   c000f840 <malloc>
c001495d:	89 c3                	mov    ebx,eax
c001495f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014962:	e8 59 0d 01 00       	call   c00256c0 <SSE::SSE()>
c0014967:	eb 38                	jmp    c00149a1 <setupFPU()+0x87>
c0014969:	a8 20                	test   al,0x20
c001496b:	74 19                	je     c0014986 <setupFPU()+0x6c>
c001496d:	83 ec 0c             	sub    esp,0xc
c0014970:	68 58 01 00 00       	push   0x158
c0014975:	e8 c6 ae ff ff       	call   c000f840 <malloc>
c001497a:	89 c3                	mov    ebx,eax
c001497c:	89 04 24             	mov    DWORD PTR [esp],eax
c001497f:	e8 a6 0c 01 00       	call   c002562a <MMX::MMX()>
c0014984:	eb 1b                	jmp    c00149a1 <setupFPU()+0x87>
c0014986:	a8 10                	test   al,0x10
c0014988:	74 1c                	je     c00149a6 <setupFPU()+0x8c>
c001498a:	83 ec 0c             	sub    esp,0xc
c001498d:	68 58 01 00 00       	push   0x158
c0014992:	e8 a9 ae ff ff       	call   c000f840 <malloc>
c0014997:	89 c3                	mov    ebx,eax
c0014999:	89 04 24             	mov    DWORD PTR [esp],eax
c001499c:	e8 ad 0d 01 00       	call   c002574e <x87::x87()>
c00149a1:	83 c4 10             	add    esp,0x10
c00149a4:	eb 24                	jmp    c00149ca <setupFPU()+0xb0>
c00149a6:	83 e0 ef             	and    eax,0xffffffef
c00149a9:	83 ec 0c             	sub    esp,0xc
c00149ac:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00149b2:	68 d4 ae 02 c0       	push   0xc002aed4
c00149b7:	e8 b2 e5 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00149bc:	0f 20 c0             	mov    eax,cr0
c00149bf:	83 c8 04             	or     eax,0x4
c00149c2:	0f 22 c0             	mov    cr0,eax
c00149c5:	31 db                	xor    ebx,ebx
c00149c7:	83 c4 10             	add    esp,0x10
c00149ca:	89 d8                	mov    eax,ebx
c00149cc:	83 c4 08             	add    esp,0x8
c00149cf:	5b                   	pop    ebx
c00149d0:	c3                   	ret    
c00149d1:	90                   	nop

c00149d2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00149d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00149d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00149da:	c1 e0 04             	shl    eax,0x4
c00149dd:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00149e1:	8d 50 10             	lea    edx,[eax+0x10]
c00149e4:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00149ea:	74 08                	je     c00149f4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00149ec:	83 c0 04             	add    eax,0x4
c00149ef:	39 d0                	cmp    eax,edx
c00149f1:	75 f1                	jne    c00149e4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00149f3:	c3                   	ret    
c00149f4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00149fe:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a08:	eb e2                	jmp    c00149ec <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014a0a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014a0a:	57                   	push   edi
c0014a0b:	31 c0                	xor    eax,eax
c0014a0d:	56                   	push   esi
c0014a0e:	53                   	push   ebx
c0014a0f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014a13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a17:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014a1b:	89 da                	mov    edx,ebx
c0014a1d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014a21:	c1 e2 04             	shl    edx,0x4
c0014a24:	01 ca                	add    edx,ecx
c0014a26:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014a2e:	74 16                	je     c0014a46 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014a30:	40                   	inc    eax
c0014a31:	83 f8 04             	cmp    eax,0x4
c0014a34:	75 f0                	jne    c0014a26 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014a36:	c7 44 24 10 18 af 02 c0 	mov    DWORD PTR [esp+0x10],0xc002af18
c0014a3e:	5b                   	pop    ebx
c0014a3f:	5e                   	pop    esi
c0014a40:	5f                   	pop    edi
c0014a41:	e9 c9 5b 00 00       	jmp    c001a60f <Krnl::panic(char const*)>
c0014a46:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014a49:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014a4c:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014a52:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014a58:	5b                   	pop    ebx
c0014a59:	5e                   	pop    esi
c0014a5a:	5f                   	pop    edi
c0014a5b:	c3                   	ret    

c0014a5c <doubleFault(regs*, void*)>:
c0014a5c:	55                   	push   ebp
c0014a5d:	89 e5                	mov    ebp,esp
c0014a5f:	83 ec 08             	sub    esp,0x8
c0014a62:	83 ec 0c             	sub    esp,0xc
c0014a65:	68 53 af 02 c0       	push   0xc002af53
c0014a6a:	e8 a0 5b 00 00       	call   c001a60f <Krnl::panic(char const*)>
c0014a6f:	83 c4 10             	add    esp,0x10
c0014a72:	90                   	nop
c0014a73:	c9                   	leave  
c0014a74:	c3                   	ret    
c0014a75:	90                   	nop

c0014a76 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a76:	56                   	push   esi
c0014a77:	53                   	push   ebx
c0014a78:	50                   	push   eax
c0014a79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a7d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a81:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a86:	75 35                	jne    c0014abd <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a88:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a8b:	31 d2                	xor    edx,edx
c0014a8d:	89 c1                	mov    ecx,eax
c0014a8f:	c1 e1 04             	shl    ecx,0x4
c0014a92:	01 f1                	add    ecx,esi
c0014a94:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a9c:	74 3e                	je     c0014adc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a9e:	42                   	inc    edx
c0014a9f:	83 fa 04             	cmp    edx,0x4
c0014aa2:	75 f0                	jne    c0014a94 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014aa4:	83 ec 0c             	sub    esp,0xc
c0014aa7:	68 98 af 02 c0       	push   0xc002af98
c0014aac:	e8 5e 5b 00 00       	call   c001a60f <Krnl::panic(char const*)>
c0014ab1:	83 c4 10             	add    esp,0x10
c0014ab4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014ab9:	5a                   	pop    edx
c0014aba:	5b                   	pop    ebx
c0014abb:	5e                   	pop    esi
c0014abc:	c3                   	ret    
c0014abd:	83 ec 0c             	sub    esp,0xc
c0014ac0:	56                   	push   esi
c0014ac1:	e8 ba fb ff ff       	call   c0014680 <Device::getName()>
c0014ac6:	83 c4 10             	add    esp,0x10
c0014ac9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014acc:	75 ba                	jne    c0014a88 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ace:	83 fb 0f             	cmp    ebx,0xf
c0014ad1:	7f 29                	jg     c0014afc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014ad3:	0f b6 9b 40 d8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd27c0]
c0014ada:	eb ac                	jmp    c0014a88 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014adc:	8d 04 82             	lea    eax,[edx+eax*4]
c0014adf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014ae3:	8d 04 86             	lea    eax,[esi+eax*4]
c0014ae6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014aec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014af0:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014af6:	89 d8                	mov    eax,ebx
c0014af8:	5a                   	pop    edx
c0014af9:	5b                   	pop    ebx
c0014afa:	5e                   	pop    esi
c0014afb:	c3                   	ret    
c0014afc:	83 ec 0c             	sub    esp,0xc
c0014aff:	68 60 af 02 c0       	push   0xc002af60
c0014b04:	e8 06 5b 00 00       	call   c001a60f <Krnl::panic(char const*)>
c0014b09:	83 c4 10             	add    esp,0x10
c0014b0c:	e9 77 ff ff ff       	jmp    c0014a88 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b11:	90                   	nop

c0014b12 <InterruptController::clearAllHandlers(int, bool)>:
c0014b12:	56                   	push   esi
c0014b13:	53                   	push   ebx
c0014b14:	52                   	push   edx
c0014b15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b19:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b1d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014b22:	75 61                	jne    c0014b85 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014b24:	8d 46 20             	lea    eax,[esi+0x20]
c0014b27:	c1 e6 04             	shl    esi,0x4
c0014b2a:	c1 e0 04             	shl    eax,0x4
c0014b2d:	01 de                	add    esi,ebx
c0014b2f:	01 d8                	add    eax,ebx
c0014b31:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014b3b:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014b45:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014b4f:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014b59:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014b63:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014b6d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b77:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b81:	58                   	pop    eax
c0014b82:	5b                   	pop    ebx
c0014b83:	5e                   	pop    esi
c0014b84:	c3                   	ret    
c0014b85:	83 ec 0c             	sub    esp,0xc
c0014b88:	53                   	push   ebx
c0014b89:	e8 f2 fa ff ff       	call   c0014680 <Device::getName()>
c0014b8e:	83 c4 10             	add    esp,0x10
c0014b91:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b94:	75 8e                	jne    c0014b24 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b96:	83 fe 0f             	cmp    esi,0xf
c0014b99:	7f 09                	jg     c0014ba4 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b9b:	0f b6 b6 40 d8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd27c0]
c0014ba2:	eb 80                	jmp    c0014b24 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ba4:	83 ec 0c             	sub    esp,0xc
c0014ba7:	68 d4 af 02 c0       	push   0xc002afd4
c0014bac:	e8 5e 5a 00 00       	call   c001a60f <Krnl::panic(char const*)>
c0014bb1:	83 c4 10             	add    esp,0x10
c0014bb4:	e9 6b ff ff ff       	jmp    c0014b24 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014bb9:	90                   	nop

c0014bba <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014bba:	56                   	push   esi
c0014bbb:	53                   	push   ebx
c0014bbc:	52                   	push   edx
c0014bbd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014bc1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014bc5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014bca:	75 3a                	jne    c0014c06 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014bcc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bd0:	8d 50 20             	lea    edx,[eax+0x20]
c0014bd3:	c1 e2 04             	shl    edx,0x4
c0014bd6:	8d 04 16             	lea    eax,[esi+edx*1]
c0014bd9:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014bdd:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014be3:	74 0b                	je     c0014bf0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014be5:	83 c0 04             	add    eax,0x4
c0014be8:	39 d0                	cmp    eax,edx
c0014bea:	75 f1                	jne    c0014bdd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014bec:	58                   	pop    eax
c0014bed:	5b                   	pop    ebx
c0014bee:	5e                   	pop    esi
c0014bef:	c3                   	ret    
c0014bf0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014bfa:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014c04:	eb df                	jmp    c0014be5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014c06:	83 ec 0c             	sub    esp,0xc
c0014c09:	56                   	push   esi
c0014c0a:	e8 71 fa ff ff       	call   c0014680 <Device::getName()>
c0014c0f:	83 c4 10             	add    esp,0x10
c0014c12:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c15:	75 b5                	jne    c0014bcc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c17:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014c1c:	7f 11                	jg     c0014c2f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014c1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c22:	0f b6 80 40 d8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd27c0]
c0014c29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c2d:	eb 9d                	jmp    c0014bcc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c2f:	83 ec 0c             	sub    esp,0xc
c0014c32:	68 d4 af 02 c0       	push   0xc002afd4
c0014c37:	e8 d3 59 00 00       	call   c001a60f <Krnl::panic(char const*)>
c0014c3c:	83 c4 10             	add    esp,0x10
c0014c3f:	eb 8b                	jmp    c0014bcc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014c41 <nmiHandler(regs*, void*)>:
c0014c41:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0014c46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c4a:	e9 3d a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014c4f <int_handler>:
c0014c4f:	55                   	push   ebp
c0014c50:	57                   	push   edi
c0014c51:	56                   	push   esi
c0014c52:	53                   	push   ebx
c0014c53:	83 ec 0c             	sub    esp,0xc
c0014c56:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014c5a:	80 3d 44 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031144,0x0
c0014c61:	74 0b                	je     c0014c6e <int_handler+0x1f>
c0014c63:	fa                   	cli    
c0014c64:	f4                   	hlt    
c0014c65:	80 3d 44 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031144,0x0
c0014c6c:	75 f5                	jne    c0014c63 <int_handler+0x14>
c0014c6e:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0014c73:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c76:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c7c:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c82:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c85:	83 f8 17             	cmp    eax,0x17
c0014c88:	77 13                	ja     c0014c9d <int_handler+0x4e>
c0014c8a:	83 ec 08             	sub    esp,0x8
c0014c8d:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c8f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c92:	0f b6 c0             	movzx  eax,al
c0014c95:	50                   	push   eax
c0014c96:	57                   	push   edi
c0014c97:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c9a:	83 c4 10             	add    esp,0x10
c0014c9d:	83 c3 15             	add    ebx,0x15
c0014ca0:	c1 e3 04             	shl    ebx,0x4
c0014ca3:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014ca7:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014cae:	31 db                	xor    ebx,ebx
c0014cb0:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014cb4:	85 c0                	test   eax,eax
c0014cb6:	74 13                	je     c0014ccb <int_handler+0x7c>
c0014cb8:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014cbb:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014cbf:	74 1c                	je     c0014cdd <int_handler+0x8e>
c0014cc1:	83 ec 08             	sub    esp,0x8
c0014cc4:	52                   	push   edx
c0014cc5:	56                   	push   esi
c0014cc6:	ff d0                	call   eax
c0014cc8:	83 c4 10             	add    esp,0x10
c0014ccb:	43                   	inc    ebx
c0014ccc:	83 fb 04             	cmp    ebx,0x4
c0014ccf:	75 df                	jne    c0014cb0 <int_handler+0x61>
c0014cd1:	83 c4 0c             	add    esp,0xc
c0014cd4:	31 c0                	xor    eax,eax
c0014cd6:	5b                   	pop    ebx
c0014cd7:	31 d2                	xor    edx,edx
c0014cd9:	5e                   	pop    esi
c0014cda:	5f                   	pop    edi
c0014cdb:	5d                   	pop    ebp
c0014cdc:	c3                   	ret    
c0014cdd:	83 ec 08             	sub    esp,0x8
c0014ce0:	52                   	push   edx
c0014ce1:	56                   	push   esi
c0014ce2:	ff d0                	call   eax
c0014ce4:	83 c4 10             	add    esp,0x10
c0014ce7:	83 c4 0c             	add    esp,0xc
c0014cea:	5b                   	pop    ebx
c0014ceb:	5e                   	pop    esi
c0014cec:	5f                   	pop    edi
c0014ced:	5d                   	pop    ebp
c0014cee:	c3                   	ret    
c0014cef:	90                   	nop

c0014cf0 <InterruptController::InterruptController(char const*)>:
c0014cf0:	83 ec 1c             	sub    esp,0x1c
c0014cf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cf7:	83 ec 08             	sub    esp,0x8
c0014cfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014cfe:	50                   	push   eax
c0014cff:	e8 80 f8 ff ff       	call   c0014584 <Device::Device(char const*)>
c0014d04:	83 c4 10             	add    esp,0x10
c0014d07:	ba 70 b2 02 c0       	mov    edx,0xc002b270
c0014d0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d10:	89 10                	mov    DWORD PTR [eax],edx
c0014d12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d16:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014d20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d28:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014d30:	7f 5e                	jg     c0014d90 <InterruptController::InterruptController(char const*)+0xa0>
c0014d32:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d3a:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014d3f:	7f 49                	jg     c0014d8a <InterruptController::InterruptController(char const*)+0x9a>
c0014d41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d45:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d49:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d54:	01 ca                	add    edx,ecx
c0014d56:	83 c2 54             	add    edx,0x54
c0014d59:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d69:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d74:	01 ca                	add    edx,ecx
c0014d76:	81 c2 54 04 00 00    	add    edx,0x454
c0014d7c:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d84:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d88:	eb b0                	jmp    c0014d3a <InterruptController::InterruptController(char const*)+0x4a>
c0014d8a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d8e:	eb 98                	jmp    c0014d28 <InterruptController::InterruptController(char const*)+0x38>
c0014d90:	90                   	nop
c0014d91:	83 c4 1c             	add    esp,0x1c
c0014d94:	c3                   	ret    
c0014d95:	90                   	nop

c0014d96 <InterruptController::~InterruptController()>:
c0014d96:	83 ec 0c             	sub    esp,0xc
c0014d99:	ba 70 b2 02 c0       	mov    edx,0xc002b270
c0014d9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014da2:	89 10                	mov    DWORD PTR [eax],edx
c0014da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014da8:	83 ec 0c             	sub    esp,0xc
c0014dab:	50                   	push   eax
c0014dac:	e8 b5 f4 ff ff       	call   c0014266 <Device::~Device()>
c0014db1:	83 c4 10             	add    esp,0x10
c0014db4:	90                   	nop
c0014db5:	83 c4 0c             	add    esp,0xc
c0014db8:	c3                   	ret    
c0014db9:	90                   	nop

c0014dba <InterruptController::~InterruptController()>:
c0014dba:	83 ec 0c             	sub    esp,0xc
c0014dbd:	83 ec 0c             	sub    esp,0xc
c0014dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dc4:	e8 cd ff ff ff       	call   c0014d96 <InterruptController::~InterruptController()>
c0014dc9:	83 c4 10             	add    esp,0x10
c0014dcc:	83 ec 08             	sub    esp,0x8
c0014dcf:	68 58 21 00 00       	push   0x2158
c0014dd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dd8:	e8 b1 e0 ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0014ddd:	83 c4 10             	add    esp,0x10
c0014de0:	83 c4 0c             	add    esp,0xc
c0014de3:	c3                   	ret    

c0014de4 <displayDebugInfo(regs*)>:
c0014de4:	55                   	push   ebp
c0014de5:	57                   	push   edi
c0014de6:	56                   	push   esi
c0014de7:	53                   	push   ebx
c0014de8:	83 ec 24             	sub    esp,0x24
c0014deb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014def:	0f 20 c2             	mov    edx,cr0
c0014df2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014df6:	0f 20 d7             	mov    edi,cr2
c0014df9:	0f 20 de             	mov    esi,cr3
c0014dfc:	0f 20 e5             	mov    ebp,cr4
c0014dff:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014e02:	68 0e b0 02 c0       	push   0xc002b00e
c0014e07:	e8 62 e1 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0014e0c:	59                   	pop    ecx
c0014e0d:	58                   	pop    eax
c0014e0e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014e11:	68 19 b0 02 c0       	push   0xc002b019
c0014e16:	e8 53 e1 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0014e1b:	58                   	pop    eax
c0014e1c:	5a                   	pop    edx
c0014e1d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014e20:	68 24 b0 02 c0       	push   0xc002b024
c0014e25:	e8 44 e1 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0014e2a:	59                   	pop    ecx
c0014e2b:	58                   	pop    eax
c0014e2c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014e2f:	68 2f b0 02 c0       	push   0xc002b02f
c0014e34:	e8 35 e1 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0014e39:	58                   	pop    eax
c0014e3a:	5a                   	pop    edx
c0014e3b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014e3e:	68 3a b0 02 c0       	push   0xc002b03a
c0014e43:	e8 26 e1 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0014e48:	59                   	pop    ecx
c0014e49:	58                   	pop    eax
c0014e4a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014e4d:	68 45 b0 02 c0       	push   0xc002b045
c0014e52:	e8 17 e1 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0014e57:	58                   	pop    eax
c0014e58:	5a                   	pop    edx
c0014e59:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e5c:	68 50 b0 02 c0       	push   0xc002b050
c0014e61:	e8 08 e1 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0014e66:	59                   	pop    ecx
c0014e67:	58                   	pop    eax
c0014e68:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014e6b:	68 5b b0 02 c0       	push   0xc002b05b
c0014e70:	e8 f9 e0 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0014e75:	58                   	pop    eax
c0014e76:	5a                   	pop    edx
c0014e77:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e7a:	68 66 b0 02 c0       	push   0xc002b066
c0014e7f:	e8 ea e0 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0014e84:	59                   	pop    ecx
c0014e85:	58                   	pop    eax
c0014e86:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e89:	68 75 b0 02 c0       	push   0xc002b075
c0014e8e:	e8 db e0 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0014e93:	58                   	pop    eax
c0014e94:	5a                   	pop    edx
c0014e95:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e98:	68 80 b0 02 c0       	push   0xc002b080
c0014e9d:	e8 cc e0 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0014ea2:	59                   	pop    ecx
c0014ea3:	58                   	pop    eax
c0014ea4:	57                   	push   edi
c0014ea5:	68 8b b0 02 c0       	push   0xc002b08b
c0014eaa:	e8 bf e0 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0014eaf:	58                   	pop    eax
c0014eb0:	5a                   	pop    edx
c0014eb1:	56                   	push   esi
c0014eb2:	68 96 b0 02 c0       	push   0xc002b096
c0014eb7:	e8 b2 e0 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0014ebc:	59                   	pop    ecx
c0014ebd:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014ec2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec8:	e8 70 be ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c0014ecd:	58                   	pop    eax
c0014ece:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014ed1:	5a                   	pop    edx
c0014ed2:	c1 e0 05             	shl    eax,0x5
c0014ed5:	05 a0 d5 02 c0       	add    eax,0xc002d5a0
c0014eda:	50                   	push   eax
c0014edb:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014ee0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee6:	e8 71 c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014eeb:	59                   	pop    ecx
c0014eec:	58                   	pop    eax
c0014eed:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014ef2:	68 a1 b0 02 c0       	push   0xc002b0a1
c0014ef7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014efd:	e8 5a c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014f02:	58                   	pop    eax
c0014f03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f08:	5a                   	pop    edx
c0014f09:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f0c:	83 c0 0c             	add    eax,0xc
c0014f0f:	50                   	push   eax
c0014f10:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014f15:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f1b:	e8 3c c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014f20:	59                   	pop    ecx
c0014f21:	58                   	pop    eax
c0014f22:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014f27:	68 aa b0 02 c0       	push   0xc002b0aa
c0014f2c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f32:	e8 25 c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014f37:	58                   	pop    eax
c0014f38:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014f3d:	5a                   	pop    edx
c0014f3e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f41:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f47:	e8 36 c2 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014f4c:	59                   	pop    ecx
c0014f4d:	58                   	pop    eax
c0014f4e:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014f53:	68 b2 b0 02 c0       	push   0xc002b0b2
c0014f58:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f5e:	e8 f9 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014f63:	58                   	pop    eax
c0014f64:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014f69:	5a                   	pop    edx
c0014f6a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f6d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f73:	e8 0a c2 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014f78:	59                   	pop    ecx
c0014f79:	58                   	pop    eax
c0014f7a:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014f7f:	68 ba b0 02 c0       	push   0xc002b0ba
c0014f84:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f8a:	e8 cd c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014f8f:	58                   	pop    eax
c0014f90:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014f95:	5a                   	pop    edx
c0014f96:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f9f:	e8 de c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014fa4:	59                   	pop    ecx
c0014fa5:	58                   	pop    eax
c0014fa6:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014fab:	68 c2 b0 02 c0       	push   0xc002b0c2
c0014fb0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb6:	e8 a1 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014fbb:	58                   	pop    eax
c0014fbc:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014fc1:	5a                   	pop    edx
c0014fc2:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014fc5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fcb:	e8 b2 c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014fd0:	59                   	pop    ecx
c0014fd1:	58                   	pop    eax
c0014fd2:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014fd7:	68 ca b0 02 c0       	push   0xc002b0ca
c0014fdc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe2:	e8 75 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014fe7:	58                   	pop    eax
c0014fe8:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0014fed:	5a                   	pop    edx
c0014fee:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014ff1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff7:	e8 86 c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014ffc:	59                   	pop    ecx
c0014ffd:	58                   	pop    eax
c0014ffe:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015003:	68 d2 b0 02 c0       	push   0xc002b0d2
c0015008:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500e:	e8 49 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015013:	58                   	pop    eax
c0015014:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015019:	5a                   	pop    edx
c001501a:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001501d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015023:	e8 5a c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015028:	59                   	pop    ecx
c0015029:	58                   	pop    eax
c001502a:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001502f:	68 da b0 02 c0       	push   0xc002b0da
c0015034:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001503a:	e8 1d c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001503f:	58                   	pop    eax
c0015040:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015045:	5a                   	pop    edx
c0015046:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001504a:	52                   	push   edx
c001504b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015051:	e8 2c c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015056:	59                   	pop    ecx
c0015057:	58                   	pop    eax
c0015058:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001505d:	68 e3 b0 02 c0       	push   0xc002b0e3
c0015062:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015068:	e8 ef c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001506d:	58                   	pop    eax
c001506e:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015073:	5a                   	pop    edx
c0015074:	57                   	push   edi
c0015075:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001507b:	e8 02 c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015080:	59                   	pop    ecx
c0015081:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015086:	5f                   	pop    edi
c0015087:	68 eb b0 02 c0       	push   0xc002b0eb
c001508c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015092:	e8 c5 c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015097:	58                   	pop    eax
c0015098:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001509d:	5a                   	pop    edx
c001509e:	56                   	push   esi
c001509f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a5:	e8 d8 c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c00150aa:	59                   	pop    ecx
c00150ab:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c00150b0:	5e                   	pop    esi
c00150b1:	68 f3 b0 02 c0       	push   0xc002b0f3
c00150b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150bc:	e8 9b c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c00150c1:	5f                   	pop    edi
c00150c2:	58                   	pop    eax
c00150c3:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c00150c8:	55                   	push   ebp
c00150c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150cf:	e8 ae c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c00150d4:	58                   	pop    eax
c00150d5:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c00150da:	5a                   	pop    edx
c00150db:	68 fb b0 02 c0       	push   0xc002b0fb
c00150e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e6:	e8 71 c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c00150eb:	0f 21 c0             	mov    eax,db0
c00150ee:	59                   	pop    ecx
c00150ef:	5e                   	pop    esi
c00150f0:	50                   	push   eax
c00150f1:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c00150f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150fc:	e8 81 c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015101:	5f                   	pop    edi
c0015102:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015107:	5d                   	pop    ebp
c0015108:	68 04 b1 02 c0       	push   0xc002b104
c001510d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015113:	e8 44 c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015118:	0f 21 c8             	mov    eax,db1
c001511b:	5a                   	pop    edx
c001511c:	59                   	pop    ecx
c001511d:	50                   	push   eax
c001511e:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015123:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015129:	e8 54 c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001512e:	5e                   	pop    esi
c001512f:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015134:	5f                   	pop    edi
c0015135:	68 0c b1 02 c0       	push   0xc002b10c
c001513a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015140:	e8 17 c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015145:	0f 21 d0             	mov    eax,db2
c0015148:	5d                   	pop    ebp
c0015149:	5a                   	pop    edx
c001514a:	50                   	push   eax
c001514b:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015150:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015156:	e8 27 c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001515b:	59                   	pop    ecx
c001515c:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015161:	5e                   	pop    esi
c0015162:	68 14 b1 02 c0       	push   0xc002b114
c0015167:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001516d:	e8 ea bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015172:	0f 21 d8             	mov    eax,db3
c0015175:	5f                   	pop    edi
c0015176:	5d                   	pop    ebp
c0015177:	50                   	push   eax
c0015178:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001517d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015183:	e8 fa bf ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015188:	58                   	pop    eax
c0015189:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001518e:	5a                   	pop    edx
c001518f:	68 1c b1 02 c0       	push   0xc002b11c
c0015194:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001519a:	e8 bd bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c001519f:	0f 21 f0             	mov    eax,db6
c00151a2:	59                   	pop    ecx
c00151a3:	5e                   	pop    esi
c00151a4:	50                   	push   eax
c00151a5:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c00151aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151b0:	e8 cd bf ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c00151b5:	5f                   	pop    edi
c00151b6:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c00151bb:	5d                   	pop    ebp
c00151bc:	68 24 b1 02 c0       	push   0xc002b124
c00151c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151c7:	e8 90 bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c00151cc:	0f 21 f8             	mov    eax,db7
c00151cf:	5a                   	pop    edx
c00151d0:	59                   	pop    ecx
c00151d1:	50                   	push   eax
c00151d2:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c00151d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151dd:	e8 a0 bf ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c00151e2:	5e                   	pop    esi
c00151e3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151e6:	e8 50 85 00 00       	call   c001d73b <Thr::getDriverNameFromAddress(unsigned long)>
c00151eb:	83 c4 10             	add    esp,0x10
c00151ee:	85 c0                	test   eax,eax
c00151f0:	74 7d                	je     c001526f <displayDebugInfo(regs*)+0x48b>
c00151f2:	89 c6                	mov    esi,eax
c00151f4:	50                   	push   eax
c00151f5:	50                   	push   eax
c00151f6:	56                   	push   esi
c00151f7:	68 2c b1 02 c0       	push   0xc002b12c
c00151fc:	e8 6d dd ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0015201:	5a                   	pop    edx
c0015202:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015207:	59                   	pop    ecx
c0015208:	68 3a b1 02 c0       	push   0xc002b13a
c001520d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015213:	e8 44 bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015218:	5f                   	pop    edi
c0015219:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001521e:	5d                   	pop    ebp
c001521f:	56                   	push   esi
c0015220:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015226:	e8 31 bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c001522b:	58                   	pop    eax
c001522c:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015231:	5a                   	pop    edx
c0015232:	68 46 b1 02 c0       	push   0xc002b146
c0015237:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001523d:	e8 1a bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015242:	59                   	pop    ecx
c0015243:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c0015248:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c001524e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015251:	e8 1c 85 00 00       	call   c001d772 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015256:	5b                   	pop    ebx
c0015257:	5d                   	pop    ebp
c0015258:	50                   	push   eax
c0015259:	57                   	push   edi
c001525a:	e8 23 bf ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001525f:	58                   	pop    eax
c0015260:	5a                   	pop    edx
c0015261:	56                   	push   esi
c0015262:	68 52 b1 02 c0       	push   0xc002b152
c0015267:	e8 02 dd ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001526c:	83 c4 10             	add    esp,0x10
c001526f:	fa                   	cli    
c0015270:	f4                   	hlt    
c0015271:	eb fe                	jmp    c0015271 <displayDebugInfo(regs*)+0x48d>

c0015273 <x87EmulHandler(regs*, void*)>:
c0015273:	53                   	push   ebx
c0015274:	83 ec 14             	sub    esp,0x14
c0015277:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001527b:	53                   	push   ebx
c001527c:	e8 47 a8 00 00       	call   c001fac8 <Vm::x87Handler(regs*)>
c0015281:	83 c4 10             	add    esp,0x10
c0015284:	84 c0                	test   al,al
c0015286:	74 05                	je     c001528d <x87EmulHandler(regs*, void*)+0x1a>
c0015288:	83 c4 08             	add    esp,0x8
c001528b:	5b                   	pop    ebx
c001528c:	c3                   	ret    
c001528d:	83 ec 0c             	sub    esp,0xc
c0015290:	68 62 b1 02 c0       	push   0xc002b162
c0015295:	e8 d4 dc ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001529a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001529d:	e8 42 fb ff ff       	call   c0014de4 <displayDebugInfo(regs*)>

c00152a2 <gpFault(regs*, void*)>:
c00152a2:	53                   	push   ebx
c00152a3:	83 ec 14             	sub    esp,0x14
c00152a6:	c7 05 94 e7 02 c0 45 ee 01 c0 	mov    DWORD PTR ds:0xc002e794,0xc001ee45
c00152b0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00152b4:	53                   	push   ebx
c00152b5:	e8 8b 9b 00 00       	call   c001ee45 <Vm::faultHandler(regs*)>
c00152ba:	83 c4 10             	add    esp,0x10
c00152bd:	84 c0                	test   al,al
c00152bf:	74 05                	je     c00152c6 <gpFault(regs*, void*)+0x24>
c00152c1:	83 c4 08             	add    esp,0x8
c00152c4:	5b                   	pop    ebx
c00152c5:	c3                   	ret    
c00152c6:	83 ec 0c             	sub    esp,0xc
c00152c9:	68 78 b1 02 c0       	push   0xc002b178
c00152ce:	e8 9b dc ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00152d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152d6:	e8 09 fb ff ff       	call   c0014de4 <displayDebugInfo(regs*)>

c00152db <pgFault(regs*, void*)>:
c00152db:	83 ec 18             	sub    esp,0x18
c00152de:	68 93 b1 02 c0       	push   0xc002b193
c00152e3:	e8 86 dc ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00152e8:	0f 20 d0             	mov    eax,cr2
c00152eb:	5a                   	pop    edx
c00152ec:	59                   	pop    ecx
c00152ed:	50                   	push   eax
c00152ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152f6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00152fc:	e8 2d d8 ff ff       	call   c0012b2e <VAS::tryLoadBackOffDisk(unsigned long)>
c0015301:	83 c4 10             	add    esp,0x10
c0015304:	84 c0                	test   al,al
c0015306:	74 04                	je     c001530c <pgFault(regs*, void*)+0x31>
c0015308:	83 c4 0c             	add    esp,0xc
c001530b:	c3                   	ret    
c001530c:	83 ec 0c             	sub    esp,0xc
c001530f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015313:	e8 cc fa ff ff       	call   c0014de4 <displayDebugInfo(regs*)>

c0015318 <otherISRHandler(regs*, void*)>:
c0015318:	53                   	push   ebx
c0015319:	83 ec 0c             	sub    esp,0xc
c001531c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015320:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015323:	50                   	push   eax
c0015324:	50                   	push   eax
c0015325:	68 a0 b1 02 c0       	push   0xc002b1a0
c001532a:	e8 3f dc ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001532f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015332:	e8 ad fa ff ff       	call   c0014de4 <displayDebugInfo(regs*)>

c0015337 <opcodeFault(regs*, void*)>:
c0015337:	55                   	push   ebp
c0015338:	89 e5                	mov    ebp,esp
c001533a:	56                   	push   esi
c001533b:	53                   	push   ebx
c001533c:	83 ec 40             	sub    esp,0x40
c001533f:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0015344:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001534a:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015350:	84 c0                	test   al,al
c0015352:	74 24                	je     c0015378 <opcodeFault(regs*, void*)+0x41>
c0015354:	83 ec 0c             	sub    esp,0xc
c0015357:	68 c0 b1 02 c0       	push   0xc002b1c0
c001535c:	e8 0d dc ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0015361:	83 c4 10             	add    esp,0x10
c0015364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015367:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001536a:	8d 50 19             	lea    edx,[eax+0x19]
c001536d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015370:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015373:	e9 be 05 00 00       	jmp    c0015936 <opcodeFault(regs*, void*)+0x5ff>
c0015378:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001537e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015381:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015385:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001538f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015392:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015395:	8a 00                	mov    al,BYTE PTR [eax]
c0015397:	3c f0                	cmp    al,0xf0
c0015399:	75 17                	jne    c00153b2 <opcodeFault(regs*, void*)+0x7b>
c001539b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001539e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153a4:	8d 50 01             	lea    edx,[eax+0x1]
c00153a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153aa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ad:	e9 da 00 00 00       	jmp    c001548c <opcodeFault(regs*, void*)+0x155>
c00153b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b5:	8a 00                	mov    al,BYTE PTR [eax]
c00153b7:	3c f2                	cmp    al,0xf2
c00153b9:	74 09                	je     c00153c4 <opcodeFault(regs*, void*)+0x8d>
c00153bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153be:	8a 00                	mov    al,BYTE PTR [eax]
c00153c0:	3c f3                	cmp    al,0xf3
c00153c2:	75 1b                	jne    c00153df <opcodeFault(regs*, void*)+0xa8>
c00153c4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153c8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153d1:	8d 50 01             	lea    edx,[eax+0x1]
c00153d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153da:	e9 ad 00 00 00       	jmp    c001548c <opcodeFault(regs*, void*)+0x155>
c00153df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e2:	8a 00                	mov    al,BYTE PTR [eax]
c00153e4:	3c 66                	cmp    al,0x66
c00153e6:	75 1f                	jne    c0015407 <opcodeFault(regs*, void*)+0xd0>
c00153e8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153ec:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00153f0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f9:	8d 50 01             	lea    edx,[eax+0x1]
c00153fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ff:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015402:	e9 85 00 00 00       	jmp    c001548c <opcodeFault(regs*, void*)+0x155>
c0015407:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540a:	8a 00                	mov    al,BYTE PTR [eax]
c001540c:	3c 67                	cmp    al,0x67
c001540e:	75 18                	jne    c0015428 <opcodeFault(regs*, void*)+0xf1>
c0015410:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015414:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015417:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001541d:	8d 50 01             	lea    edx,[eax+0x1]
c0015420:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015423:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015426:	eb 64                	jmp    c001548c <opcodeFault(regs*, void*)+0x155>
c0015428:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542b:	8a 00                	mov    al,BYTE PTR [eax]
c001542d:	3c 2e                	cmp    al,0x2e
c001542f:	74 09                	je     c001543a <opcodeFault(regs*, void*)+0x103>
c0015431:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015434:	8a 00                	mov    al,BYTE PTR [eax]
c0015436:	3c 3e                	cmp    al,0x3e
c0015438:	75 18                	jne    c0015452 <opcodeFault(regs*, void*)+0x11b>
c001543a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001543e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015441:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015444:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015447:	8d 50 01             	lea    edx,[eax+0x1]
c001544a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015450:	eb 3a                	jmp    c001548c <opcodeFault(regs*, void*)+0x155>
c0015452:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015455:	8a 00                	mov    al,BYTE PTR [eax]
c0015457:	3c 36                	cmp    al,0x36
c0015459:	74 1b                	je     c0015476 <opcodeFault(regs*, void*)+0x13f>
c001545b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545e:	8a 00                	mov    al,BYTE PTR [eax]
c0015460:	3c 26                	cmp    al,0x26
c0015462:	74 12                	je     c0015476 <opcodeFault(regs*, void*)+0x13f>
c0015464:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015467:	8a 00                	mov    al,BYTE PTR [eax]
c0015469:	3c 64                	cmp    al,0x64
c001546b:	74 09                	je     c0015476 <opcodeFault(regs*, void*)+0x13f>
c001546d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015470:	8a 00                	mov    al,BYTE PTR [eax]
c0015472:	3c 65                	cmp    al,0x65
c0015474:	75 16                	jne    c001548c <opcodeFault(regs*, void*)+0x155>
c0015476:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001547a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001547d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015480:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015483:	8d 50 01             	lea    edx,[eax+0x1]
c0015486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015489:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001548c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548f:	8a 00                	mov    al,BYTE PTR [eax]
c0015491:	3c 0f                	cmp    al,0xf
c0015493:	0f 85 ad 00 00 00    	jne    c0015546 <opcodeFault(regs*, void*)+0x20f>
c0015499:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001549c:	40                   	inc    eax
c001549d:	8a 00                	mov    al,BYTE PTR [eax]
c001549f:	3c c2                	cmp    al,0xc2
c00154a1:	74 0e                	je     c00154b1 <opcodeFault(regs*, void*)+0x17a>
c00154a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a6:	40                   	inc    eax
c00154a7:	8a 00                	mov    al,BYTE PTR [eax]
c00154a9:	3c c3                	cmp    al,0xc3
c00154ab:	0f 85 95 00 00 00    	jne    c0015546 <opcodeFault(regs*, void*)+0x20f>
c00154b1:	83 ec 0c             	sub    esp,0xc
c00154b4:	68 e3 b1 02 c0       	push   0xc002b1e3
c00154b9:	e8 b0 da ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00154be:	83 c4 10             	add    esp,0x10
c00154c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154c7:	8d 50 01             	lea    edx,[eax+0x1]
c00154ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154d0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d6:	8a 00                	mov    al,BYTE PTR [eax]
c00154d8:	8d 50 fe             	lea    edx,[eax-0x2]
c00154db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154de:	88 10                	mov    BYTE PTR [eax],dl
c00154e0:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00154e3:	50                   	push   eax
c00154e4:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00154e7:	50                   	push   eax
c00154e8:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00154eb:	50                   	push   eax
c00154ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154ef:	e8 e2 47 00 00       	call   c0019cd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00154f4:	83 c4 10             	add    esp,0x10
c00154f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154fd:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015500:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015503:	01 d0                	add    eax,edx
c0015505:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001550e:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015511:	48                   	dec    eax
c0015512:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015518:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001551b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001551e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015521:	83 ec 04             	sub    esp,0x4
c0015524:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015527:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001552a:	50                   	push   eax
c001552b:	e8 84 ac fe ff       	call   c00001b4 <voodooXADD>
c0015530:	83 c4 10             	add    esp,0x10
c0015533:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015536:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015539:	01 c2                	add    edx,eax
c001553b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001553e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015541:	e9 f0 03 00 00       	jmp    c0015936 <opcodeFault(regs*, void*)+0x5ff>
c0015546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015549:	8a 00                	mov    al,BYTE PTR [eax]
c001554b:	3c 0f                	cmp    al,0xf
c001554d:	0f 85 8b 01 00 00    	jne    c00156de <opcodeFault(regs*, void*)+0x3a7>
c0015553:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015556:	40                   	inc    eax
c0015557:	8a 00                	mov    al,BYTE PTR [eax]
c0015559:	3c c7                	cmp    al,0xc7
c001555b:	0f 86 7d 01 00 00    	jbe    c00156de <opcodeFault(regs*, void*)+0x3a7>
c0015561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015564:	40                   	inc    eax
c0015565:	8a 00                	mov    al,BYTE PTR [eax]
c0015567:	3c cf                	cmp    al,0xcf
c0015569:	0f 87 6f 01 00 00    	ja     c00156de <opcodeFault(regs*, void*)+0x3a7>
c001556f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015572:	40                   	inc    eax
c0015573:	8a 00                	mov    al,BYTE PTR [eax]
c0015575:	83 c0 38             	add    eax,0x38
c0015578:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001557b:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001557f:	75 0b                	jne    c001558c <opcodeFault(regs*, void*)+0x255>
c0015581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015584:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015587:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001558a:	eb 75                	jmp    c0015601 <opcodeFault(regs*, void*)+0x2ca>
c001558c:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015590:	75 0b                	jne    c001559d <opcodeFault(regs*, void*)+0x266>
c0015592:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015595:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015598:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001559b:	eb 64                	jmp    c0015601 <opcodeFault(regs*, void*)+0x2ca>
c001559d:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00155a1:	75 0b                	jne    c00155ae <opcodeFault(regs*, void*)+0x277>
c00155a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00155a9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ac:	eb 53                	jmp    c0015601 <opcodeFault(regs*, void*)+0x2ca>
c00155ae:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155b2:	75 0b                	jne    c00155bf <opcodeFault(regs*, void*)+0x288>
c00155b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155ba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155bd:	eb 42                	jmp    c0015601 <opcodeFault(regs*, void*)+0x2ca>
c00155bf:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155c3:	75 0b                	jne    c00155d0 <opcodeFault(regs*, void*)+0x299>
c00155c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00155cb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ce:	eb 31                	jmp    c0015601 <opcodeFault(regs*, void*)+0x2ca>
c00155d0:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155d4:	75 0b                	jne    c00155e1 <opcodeFault(regs*, void*)+0x2aa>
c00155d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00155dc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155df:	eb 20                	jmp    c0015601 <opcodeFault(regs*, void*)+0x2ca>
c00155e1:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155e5:	75 0b                	jne    c00155f2 <opcodeFault(regs*, void*)+0x2bb>
c00155e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ea:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155f0:	eb 0f                	jmp    c0015601 <opcodeFault(regs*, void*)+0x2ca>
c00155f2:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155f6:	75 09                	jne    c0015601 <opcodeFault(regs*, void*)+0x2ca>
c00155f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155fe:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015601:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015605:	74 10                	je     c0015617 <opcodeFault(regs*, void*)+0x2e0>
c0015607:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001560e:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015615:	eb 2d                	jmp    c0015644 <opcodeFault(regs*, void*)+0x30d>
c0015617:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001561a:	c1 e0 18             	shl    eax,0x18
c001561d:	89 c2                	mov    edx,eax
c001561f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015622:	c1 e0 08             	shl    eax,0x8
c0015625:	25 00 00 ff 00       	and    eax,0xff0000
c001562a:	09 c2                	or     edx,eax
c001562c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001562f:	c1 e8 08             	shr    eax,0x8
c0015632:	25 00 ff 00 00       	and    eax,0xff00
c0015637:	09 c2                	or     edx,eax
c0015639:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001563c:	c1 e8 18             	shr    eax,0x18
c001563f:	09 d0                	or     eax,edx
c0015641:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015644:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015648:	75 0b                	jne    c0015655 <opcodeFault(regs*, void*)+0x31e>
c001564a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015650:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015653:	eb 75                	jmp    c00156ca <opcodeFault(regs*, void*)+0x393>
c0015655:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015659:	75 0b                	jne    c0015666 <opcodeFault(regs*, void*)+0x32f>
c001565b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015661:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015664:	eb 64                	jmp    c00156ca <opcodeFault(regs*, void*)+0x393>
c0015666:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001566a:	75 0b                	jne    c0015677 <opcodeFault(regs*, void*)+0x340>
c001566c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015672:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015675:	eb 53                	jmp    c00156ca <opcodeFault(regs*, void*)+0x393>
c0015677:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001567b:	75 0b                	jne    c0015688 <opcodeFault(regs*, void*)+0x351>
c001567d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015680:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015683:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015686:	eb 42                	jmp    c00156ca <opcodeFault(regs*, void*)+0x393>
c0015688:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001568c:	75 0b                	jne    c0015699 <opcodeFault(regs*, void*)+0x362>
c001568e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015691:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015694:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015697:	eb 31                	jmp    c00156ca <opcodeFault(regs*, void*)+0x393>
c0015699:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001569d:	75 0b                	jne    c00156aa <opcodeFault(regs*, void*)+0x373>
c001569f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156a5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00156a8:	eb 20                	jmp    c00156ca <opcodeFault(regs*, void*)+0x393>
c00156aa:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00156ae:	75 0b                	jne    c00156bb <opcodeFault(regs*, void*)+0x384>
c00156b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156b6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00156b9:	eb 0f                	jmp    c00156ca <opcodeFault(regs*, void*)+0x393>
c00156bb:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00156bf:	75 09                	jne    c00156ca <opcodeFault(regs*, void*)+0x393>
c00156c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156c7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00156ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156d0:	8d 50 02             	lea    edx,[eax+0x2]
c00156d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156d9:	e9 58 02 00 00       	jmp    c0015936 <opcodeFault(regs*, void*)+0x5ff>
c00156de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156e1:	8a 00                	mov    al,BYTE PTR [eax]
c00156e3:	3c 0f                	cmp    al,0xf
c00156e5:	0f 85 76 01 00 00    	jne    c0015861 <opcodeFault(regs*, void*)+0x52a>
c00156eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156ee:	40                   	inc    eax
c00156ef:	8a 00                	mov    al,BYTE PTR [eax]
c00156f1:	3c c7                	cmp    al,0xc7
c00156f3:	0f 85 68 01 00 00    	jne    c0015861 <opcodeFault(regs*, void*)+0x52a>
c00156f9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015702:	8d 50 01             	lea    edx,[eax+0x1]
c0015705:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015708:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001570b:	8d 45 ba             	lea    eax,[ebp-0x46]
c001570e:	50                   	push   eax
c001570f:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015712:	50                   	push   eax
c0015713:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015716:	50                   	push   eax
c0015717:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001571a:	e8 b7 45 00 00       	call   c0019cd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001571f:	83 c4 10             	add    esp,0x10
c0015722:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015725:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015728:	83 f0 01             	xor    eax,0x1
c001572b:	84 c0                	test   al,al
c001572d:	0f 84 2e 01 00 00    	je     c0015861 <opcodeFault(regs*, void*)+0x52a>
c0015733:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015736:	3c 01                	cmp    al,0x1
c0015738:	0f 85 23 01 00 00    	jne    c0015861 <opcodeFault(regs*, void*)+0x52a>
c001573e:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015741:	83 f0 01             	xor    eax,0x1
c0015744:	84 c0                	test   al,al
c0015746:	0f 84 15 01 00 00    	je     c0015861 <opcodeFault(regs*, void*)+0x52a>
c001574c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015752:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015755:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001575c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001575f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015762:	89 c2                	mov    edx,eax
c0015764:	b8 00 00 00 00       	mov    eax,0x0
c0015769:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001576c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001576f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015772:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015775:	ba 00 00 00 00       	mov    edx,0x0
c001577a:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001577d:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015780:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015783:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015786:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015789:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015790:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015793:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015796:	89 c2                	mov    edx,eax
c0015798:	b8 00 00 00 00       	mov    eax,0x0
c001579d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00157a0:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00157a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00157a9:	ba 00 00 00 00       	mov    edx,0x0
c00157ae:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00157b1:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00157b4:	e8 7b 86 00 00       	call   c001de34 <lockScheduler()>
c00157b9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157bc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00157c1:	89 c1                	mov    ecx,eax
c00157c3:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00157c6:	89 cb                	mov    ebx,ecx
c00157c8:	89 d0                	mov    eax,edx
c00157ca:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00157cd:	89 c6                	mov    esi,eax
c00157cf:	89 f0                	mov    eax,esi
c00157d1:	09 d8                	or     eax,ebx
c00157d3:	85 c0                	test   eax,eax
c00157d5:	75 21                	jne    c00157f8 <opcodeFault(regs*, void*)+0x4c1>
c00157d7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00157da:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157dd:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157e0:	89 01                	mov    DWORD PTR [ecx],eax
c00157e2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00157e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157eb:	83 c8 40             	or     eax,0x40
c00157ee:	89 c2                	mov    edx,eax
c00157f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f3:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157f6:	eb 3e                	jmp    c0015836 <opcodeFault(regs*, void*)+0x4ff>
c00157f8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157fb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015800:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015803:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015806:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001580f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015812:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015815:	89 d0                	mov    eax,edx
c0015817:	31 d2                	xor    edx,edx
c0015819:	89 c3                	mov    ebx,eax
c001581b:	89 d6                	mov    esi,edx
c001581d:	89 da                	mov    edx,ebx
c001581f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015822:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015828:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001582b:	83 e0 bf             	and    eax,0xffffffbf
c001582e:	89 c2                	mov    edx,eax
c0015830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015833:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015836:	e8 fb 85 00 00       	call   c001de36 <unlockScheduler()>
c001583b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015841:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015844:	01 c2                	add    edx,eax
c0015846:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015849:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001584c:	83 ec 0c             	sub    esp,0xc
c001584f:	68 f2 b1 02 c0       	push   0xc002b1f2
c0015854:	e8 15 d7 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0015859:	83 c4 10             	add    esp,0x10
c001585c:	e9 d5 00 00 00       	jmp    c0015936 <opcodeFault(regs*, void*)+0x5ff>
c0015861:	83 ec 0c             	sub    esp,0xc
c0015864:	68 05 b2 02 c0       	push   0xc002b205
c0015869:	e8 00 d7 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001586e:	83 c4 10             	add    esp,0x10
c0015871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015874:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015877:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001587d:	c1 e0 04             	shl    eax,0x4
c0015880:	01 d0                	add    eax,edx
c0015882:	83 c0 03             	add    eax,0x3
c0015885:	8a 00                	mov    al,BYTE PTR [eax]
c0015887:	0f b6 d8             	movzx  ebx,al
c001588a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015893:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015896:	c1 e0 04             	shl    eax,0x4
c0015899:	01 d0                	add    eax,edx
c001589b:	83 c0 02             	add    eax,0x2
c001589e:	8a 00                	mov    al,BYTE PTR [eax]
c00158a0:	0f b6 c8             	movzx  ecx,al
c00158a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158af:	c1 e0 04             	shl    eax,0x4
c00158b2:	01 d0                	add    eax,edx
c00158b4:	40                   	inc    eax
c00158b5:	8a 00                	mov    al,BYTE PTR [eax]
c00158b7:	0f b6 d0             	movzx  edx,al
c00158ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bd:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00158c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158c6:	c1 e0 04             	shl    eax,0x4
c00158c9:	01 f0                	add    eax,esi
c00158cb:	8a 00                	mov    al,BYTE PTR [eax]
c00158cd:	0f b6 c0             	movzx  eax,al
c00158d0:	83 ec 0c             	sub    esp,0xc
c00158d3:	53                   	push   ebx
c00158d4:	51                   	push   ecx
c00158d5:	52                   	push   edx
c00158d6:	50                   	push   eax
c00158d7:	68 18 b2 02 c0       	push   0xc002b218
c00158dc:	e8 8d d6 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00158e1:	83 c4 20             	add    esp,0x20
c00158e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158ea:	83 c0 03             	add    eax,0x3
c00158ed:	8a 00                	mov    al,BYTE PTR [eax]
c00158ef:	0f b6 d8             	movzx  ebx,al
c00158f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158f8:	83 c0 02             	add    eax,0x2
c00158fb:	8a 00                	mov    al,BYTE PTR [eax]
c00158fd:	0f b6 c8             	movzx  ecx,al
c0015900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015903:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015906:	40                   	inc    eax
c0015907:	8a 00                	mov    al,BYTE PTR [eax]
c0015909:	0f b6 d0             	movzx  edx,al
c001590c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015912:	8a 00                	mov    al,BYTE PTR [eax]
c0015914:	0f b6 c0             	movzx  eax,al
c0015917:	83 ec 0c             	sub    esp,0xc
c001591a:	53                   	push   ebx
c001591b:	51                   	push   ecx
c001591c:	52                   	push   edx
c001591d:	50                   	push   eax
c001591e:	68 40 b2 02 c0       	push   0xc002b240
c0015923:	e8 46 d6 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0015928:	83 c4 20             	add    esp,0x20
c001592b:	83 ec 0c             	sub    esp,0xc
c001592e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015931:	e8 ae f4 ff ff       	call   c0014de4 <displayDebugInfo(regs*)>
c0015936:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015939:	5b                   	pop    ebx
c001593a:	5e                   	pop    esi
c001593b:	5d                   	pop    ebp
c001593c:	c3                   	ret    

c001593d <displayProgramFault(char const*)>:
c001593d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015942:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015945:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001594b:	85 c0                	test   eax,eax
c001594d:	74 15                	je     c0015964 <displayProgramFault(char const*)+0x27>
c001594f:	83 ec 0c             	sub    esp,0xc
c0015952:	6a 04                	push   0x4
c0015954:	6a 0f                	push   0xf
c0015956:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001595a:	50                   	push   eax
c001595b:	e8 be b4 ff ff       	call   c0010e1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015960:	83 c4 1c             	add    esp,0x1c
c0015963:	c3                   	ret    
c0015964:	c3                   	ret    

c0015965 <setupInterruptController()>:
c0015965:	55                   	push   ebp
c0015966:	89 e5                	mov    ebp,esp
c0015968:	53                   	push   ebx
c0015969:	83 ec 24             	sub    esp,0x24
c001596c:	b8 00 00 00 00       	mov    eax,0x0
c0015971:	85 c0                	test   eax,eax
c0015973:	0f 95 c0             	setne  al
c0015976:	84 c0                	test   al,al
c0015978:	74 5b                	je     c00159d5 <setupInterruptController()+0x70>
c001597a:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015981:	83 ec 0c             	sub    esp,0xc
c0015984:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015987:	e8 b4 9e ff ff       	call   c000f840 <malloc>
c001598c:	83 c4 10             	add    esp,0x10
c001598f:	89 c3                	mov    ebx,eax
c0015991:	83 ec 0c             	sub    esp,0xc
c0015994:	53                   	push   ebx
c0015995:	e8 f2 ff 00 00       	call   c002598c <APIC::APIC()>
c001599a:	83 c4 10             	add    esp,0x10
c001599d:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00159a0:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00159a3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a8:	83 c0 08             	add    eax,0x8
c00159ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ad:	6a 00                	push   0x0
c00159af:	6a 00                	push   0x0
c00159b1:	6a 00                	push   0x0
c00159b3:	52                   	push   edx
c00159b4:	ff d0                	call   eax
c00159b6:	83 c4 10             	add    esp,0x10
c00159b9:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00159be:	83 ec 08             	sub    esp,0x8
c00159c1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00159c4:	50                   	push   eax
c00159c5:	e8 ca e9 ff ff       	call   c0014394 <Device::addChild(Device*)>
c00159ca:	83 c4 10             	add    esp,0x10
c00159cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159d0:	e9 52 03 00 00       	jmp    c0015d27 <setupInterruptController()+0x3c2>
c00159d5:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00159da:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159e0:	83 e0 01             	and    eax,0x1
c00159e3:	84 c0                	test   al,al
c00159e5:	0f 95 c0             	setne  al
c00159e8:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159eb:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00159f2:	83 ec 0c             	sub    esp,0xc
c00159f5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00159f8:	e8 43 9e ff ff       	call   c000f840 <malloc>
c00159fd:	83 c4 10             	add    esp,0x10
c0015a00:	89 c3                	mov    ebx,eax
c0015a02:	83 ec 0c             	sub    esp,0xc
c0015a05:	53                   	push   ebx
c0015a06:	e8 d9 04 01 00       	call   c0025ee4 <PIC::PIC()>
c0015a0b:	83 c4 10             	add    esp,0x10
c0015a0e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a11:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a17:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a19:	83 c0 08             	add    eax,0x8
c0015a1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a1e:	6a 00                	push   0x0
c0015a20:	6a 00                	push   0x0
c0015a22:	6a 00                	push   0x0
c0015a24:	52                   	push   edx
c0015a25:	ff d0                	call   eax
c0015a27:	83 c4 10             	add    esp,0x10
c0015a2a:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a2e:	74 73                	je     c0015aa3 <setupInterruptController()+0x13e>
c0015a30:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a36:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a38:	83 c0 0c             	add    eax,0xc
c0015a3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a3d:	6a 00                	push   0x0
c0015a3f:	6a 00                	push   0x0
c0015a41:	6a 00                	push   0x0
c0015a43:	52                   	push   edx
c0015a44:	ff d0                	call   eax
c0015a46:	83 c4 10             	add    esp,0x10
c0015a49:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a4d:	74 15                	je     c0015a64 <setupInterruptController()+0xff>
c0015a4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a52:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a54:	83 c0 04             	add    eax,0x4
c0015a57:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a59:	83 ec 0c             	sub    esp,0xc
c0015a5c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a5f:	ff d0                	call   eax
c0015a61:	83 c4 10             	add    esp,0x10
c0015a64:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a6b:	83 ec 0c             	sub    esp,0xc
c0015a6e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a71:	e8 ca 9d ff ff       	call   c000f840 <malloc>
c0015a76:	83 c4 10             	add    esp,0x10
c0015a79:	89 c3                	mov    ebx,eax
c0015a7b:	83 ec 0c             	sub    esp,0xc
c0015a7e:	53                   	push   ebx
c0015a7f:	e8 08 ff 00 00       	call   c002598c <APIC::APIC()>
c0015a84:	83 c4 10             	add    esp,0x10
c0015a87:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a8a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a92:	83 c0 08             	add    eax,0x8
c0015a95:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a97:	6a 00                	push   0x0
c0015a99:	6a 00                	push   0x0
c0015a9b:	6a 00                	push   0x0
c0015a9d:	52                   	push   edx
c0015a9e:	ff d0                	call   eax
c0015aa0:	83 c4 10             	add    esp,0x10
c0015aa3:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0015aa8:	83 ec 08             	sub    esp,0x8
c0015aab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aae:	50                   	push   eax
c0015aaf:	e8 e0 e8 ff ff       	call   c0014394 <Device::addChild(Device*)>
c0015ab4:	83 c4 10             	add    esp,0x10
c0015ab7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aba:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abc:	83 c0 24             	add    eax,0x24
c0015abf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac1:	6a 00                	push   0x0
c0015ac3:	68 18 53 01 c0       	push   0xc0015318
c0015ac8:	6a 00                	push   0x0
c0015aca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015acd:	ff d0                	call   eax
c0015acf:	83 c4 10             	add    esp,0x10
c0015ad2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad7:	83 c0 24             	add    eax,0x24
c0015ada:	8b 00                	mov    eax,DWORD PTR [eax]
c0015adc:	6a 00                	push   0x0
c0015ade:	68 18 53 01 c0       	push   0xc0015318
c0015ae3:	6a 01                	push   0x1
c0015ae5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae8:	ff d0                	call   eax
c0015aea:	83 c4 10             	add    esp,0x10
c0015aed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af2:	83 c0 24             	add    eax,0x24
c0015af5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af7:	6a 00                	push   0x0
c0015af9:	68 41 4c 01 c0       	push   0xc0014c41
c0015afe:	6a 02                	push   0x2
c0015b00:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b03:	ff d0                	call   eax
c0015b05:	83 c4 10             	add    esp,0x10
c0015b08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0d:	83 c0 24             	add    eax,0x24
c0015b10:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b12:	6a 00                	push   0x0
c0015b14:	68 18 53 01 c0       	push   0xc0015318
c0015b19:	6a 03                	push   0x3
c0015b1b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b1e:	ff d0                	call   eax
c0015b20:	83 c4 10             	add    esp,0x10
c0015b23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b26:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b28:	83 c0 24             	add    eax,0x24
c0015b2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2d:	6a 00                	push   0x0
c0015b2f:	68 18 53 01 c0       	push   0xc0015318
c0015b34:	6a 04                	push   0x4
c0015b36:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b39:	ff d0                	call   eax
c0015b3b:	83 c4 10             	add    esp,0x10
c0015b3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b41:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b43:	83 c0 24             	add    eax,0x24
c0015b46:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b48:	6a 00                	push   0x0
c0015b4a:	68 18 53 01 c0       	push   0xc0015318
c0015b4f:	6a 05                	push   0x5
c0015b51:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b54:	ff d0                	call   eax
c0015b56:	83 c4 10             	add    esp,0x10
c0015b59:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5e:	83 c0 24             	add    eax,0x24
c0015b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b63:	6a 00                	push   0x0
c0015b65:	68 37 53 01 c0       	push   0xc0015337
c0015b6a:	6a 06                	push   0x6
c0015b6c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b6f:	ff d0                	call   eax
c0015b71:	83 c4 10             	add    esp,0x10
c0015b74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b77:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b79:	83 c0 24             	add    eax,0x24
c0015b7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7e:	6a 00                	push   0x0
c0015b80:	68 73 52 01 c0       	push   0xc0015273
c0015b85:	6a 07                	push   0x7
c0015b87:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b8a:	ff d0                	call   eax
c0015b8c:	83 c4 10             	add    esp,0x10
c0015b8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b92:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b94:	83 c0 24             	add    eax,0x24
c0015b97:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b99:	6a 00                	push   0x0
c0015b9b:	68 5c 4a 01 c0       	push   0xc0014a5c
c0015ba0:	6a 08                	push   0x8
c0015ba2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba5:	ff d0                	call   eax
c0015ba7:	83 c4 10             	add    esp,0x10
c0015baa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bad:	8b 00                	mov    eax,DWORD PTR [eax]
c0015baf:	83 c0 24             	add    eax,0x24
c0015bb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb4:	6a 00                	push   0x0
c0015bb6:	68 18 53 01 c0       	push   0xc0015318
c0015bbb:	6a 09                	push   0x9
c0015bbd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc0:	ff d0                	call   eax
c0015bc2:	83 c4 10             	add    esp,0x10
c0015bc5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bca:	83 c0 24             	add    eax,0x24
c0015bcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bcf:	6a 00                	push   0x0
c0015bd1:	68 18 53 01 c0       	push   0xc0015318
c0015bd6:	6a 0a                	push   0xa
c0015bd8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bdb:	ff d0                	call   eax
c0015bdd:	83 c4 10             	add    esp,0x10
c0015be0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be5:	83 c0 24             	add    eax,0x24
c0015be8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bea:	6a 00                	push   0x0
c0015bec:	68 18 53 01 c0       	push   0xc0015318
c0015bf1:	6a 0b                	push   0xb
c0015bf3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf6:	ff d0                	call   eax
c0015bf8:	83 c4 10             	add    esp,0x10
c0015bfb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c00:	83 c0 24             	add    eax,0x24
c0015c03:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c05:	6a 00                	push   0x0
c0015c07:	68 18 53 01 c0       	push   0xc0015318
c0015c0c:	6a 0c                	push   0xc
c0015c0e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c11:	ff d0                	call   eax
c0015c13:	83 c4 10             	add    esp,0x10
c0015c16:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c19:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1b:	83 c0 24             	add    eax,0x24
c0015c1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c20:	6a 00                	push   0x0
c0015c22:	68 a2 52 01 c0       	push   0xc00152a2
c0015c27:	6a 0d                	push   0xd
c0015c29:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c2c:	ff d0                	call   eax
c0015c2e:	83 c4 10             	add    esp,0x10
c0015c31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c36:	83 c0 24             	add    eax,0x24
c0015c39:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3b:	6a 00                	push   0x0
c0015c3d:	68 db 52 01 c0       	push   0xc00152db
c0015c42:	6a 0e                	push   0xe
c0015c44:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c47:	ff d0                	call   eax
c0015c49:	83 c4 10             	add    esp,0x10
c0015c4c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c51:	83 c0 24             	add    eax,0x24
c0015c54:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c56:	6a 00                	push   0x0
c0015c58:	68 18 53 01 c0       	push   0xc0015318
c0015c5d:	6a 0f                	push   0xf
c0015c5f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c62:	ff d0                	call   eax
c0015c64:	83 c4 10             	add    esp,0x10
c0015c67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6c:	83 c0 24             	add    eax,0x24
c0015c6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c71:	6a 00                	push   0x0
c0015c73:	68 18 53 01 c0       	push   0xc0015318
c0015c78:	6a 10                	push   0x10
c0015c7a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c7d:	ff d0                	call   eax
c0015c7f:	83 c4 10             	add    esp,0x10
c0015c82:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c85:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c87:	83 c0 24             	add    eax,0x24
c0015c8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8c:	6a 00                	push   0x0
c0015c8e:	68 18 53 01 c0       	push   0xc0015318
c0015c93:	6a 11                	push   0x11
c0015c95:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c98:	ff d0                	call   eax
c0015c9a:	83 c4 10             	add    esp,0x10
c0015c9d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca2:	83 c0 24             	add    eax,0x24
c0015ca5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca7:	6a 00                	push   0x0
c0015ca9:	68 18 53 01 c0       	push   0xc0015318
c0015cae:	6a 12                	push   0x12
c0015cb0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cb3:	ff d0                	call   eax
c0015cb5:	83 c4 10             	add    esp,0x10
c0015cb8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cbd:	83 c0 24             	add    eax,0x24
c0015cc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc2:	6a 00                	push   0x0
c0015cc4:	68 18 53 01 c0       	push   0xc0015318
c0015cc9:	6a 13                	push   0x13
c0015ccb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cce:	ff d0                	call   eax
c0015cd0:	83 c4 10             	add    esp,0x10
c0015cd3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd8:	83 c0 24             	add    eax,0x24
c0015cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cdd:	6a 00                	push   0x0
c0015cdf:	68 18 53 01 c0       	push   0xc0015318
c0015ce4:	6a 14                	push   0x14
c0015ce6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ce9:	ff d0                	call   eax
c0015ceb:	83 c4 10             	add    esp,0x10
c0015cee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf3:	83 c0 24             	add    eax,0x24
c0015cf6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf8:	6a 00                	push   0x0
c0015cfa:	68 18 53 01 c0       	push   0xc0015318
c0015cff:	6a 1e                	push   0x1e
c0015d01:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d04:	ff d0                	call   eax
c0015d06:	83 c4 10             	add    esp,0x10
c0015d09:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d0e:	83 c0 24             	add    eax,0x24
c0015d11:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d13:	6a 00                	push   0x0
c0015d15:	68 e3 c7 01 c0       	push   0xc001c7e3
c0015d1a:	6a 60                	push   0x60
c0015d1c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d1f:	ff d0                	call   eax
c0015d21:	83 c4 10             	add    esp,0x10
c0015d24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d27:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d2a:	c9                   	leave  
c0015d2b:	c3                   	ret    

c0015d2c <InterruptController::convertLegacyIRQNumber(int)>:
c0015d2c:	55                   	push   ebp
c0015d2d:	89 e5                	mov    ebp,esp
c0015d2f:	83 ec 08             	sub    esp,0x8
c0015d32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d35:	83 ec 0c             	sub    esp,0xc
c0015d38:	50                   	push   eax
c0015d39:	e8 42 e9 ff ff       	call   c0014680 <Device::getName()>
c0015d3e:	83 c4 10             	add    esp,0x10
c0015d41:	8a 00                	mov    al,BYTE PTR [eax]
c0015d43:	3c 41                	cmp    al,0x41
c0015d45:	0f 94 c0             	sete   al
c0015d48:	84 c0                	test   al,al
c0015d4a:	74 28                	je     c0015d74 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d4c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d50:	7f 12                	jg     c0015d64 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d55:	05 40 d8 02 c0       	add    eax,0xc002d840
c0015d5a:	8a 00                	mov    al,BYTE PTR [eax]
c0015d5c:	0f b6 c0             	movzx  eax,al
c0015d5f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d62:	eb 10                	jmp    c0015d74 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d64:	83 ec 0c             	sub    esp,0xc
c0015d67:	68 60 af 02 c0       	push   0xc002af60
c0015d6c:	e8 9e 48 00 00       	call   c001a60f <Krnl::panic(char const*)>
c0015d71:	83 c4 10             	add    esp,0x10
c0015d74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d77:	c9                   	leave  
c0015d78:	c3                   	ret    
c0015d79:	90                   	nop

c0015d7a <startGUI(void*)>:
c0015d7a:	55                   	push   ebp
c0015d7b:	89 e5                	mov    ebp,esp
c0015d7d:	53                   	push   ebx
c0015d7e:	83 ec 04             	sub    esp,0x4
c0015d81:	e8 b0 80 00 00       	call   c001de36 <unlockScheduler()>
c0015d86:	8b 1d e8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5e8
c0015d8c:	83 ec 08             	sub    esp,0x8
c0015d8f:	6a 01                	push   0x1
c0015d91:	68 b0 b2 02 c0       	push   0xc002b2b0
c0015d96:	e8 f1 79 00 00       	call   c001d78c <Thr::loadDLL(char const*, bool)>
c0015d9b:	83 c4 10             	add    esp,0x10
c0015d9e:	83 ec 08             	sub    esp,0x8
c0015da1:	53                   	push   ebx
c0015da2:	50                   	push   eax
c0015da3:	e8 18 7c 00 00       	call   c001d9c0 <Thr::executeDLL(unsigned long, void*)>
c0015da8:	83 c4 10             	add    esp,0x10
c0015dab:	8b 1d e8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5e8
c0015db1:	83 ec 08             	sub    esp,0x8
c0015db4:	6a 01                	push   0x1
c0015db6:	68 ca b2 02 c0       	push   0xc002b2ca
c0015dbb:	e8 cc 79 00 00       	call   c001d78c <Thr::loadDLL(char const*, bool)>
c0015dc0:	83 c4 10             	add    esp,0x10
c0015dc3:	83 ec 08             	sub    esp,0x8
c0015dc6:	53                   	push   ebx
c0015dc7:	50                   	push   eax
c0015dc8:	e8 f3 7b 00 00       	call   c001d9c0 <Thr::executeDLL(unsigned long, void*)>
c0015dcd:	83 c4 10             	add    esp,0x10
c0015dd0:	90                   	nop
c0015dd1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dd4:	c9                   	leave  
c0015dd5:	c3                   	ret    

c0015dd6 <startGUIVESA(void*)>:
c0015dd6:	55                   	push   ebp
c0015dd7:	89 e5                	mov    ebp,esp
c0015dd9:	53                   	push   ebx
c0015dda:	83 ec 04             	sub    esp,0x4
c0015ddd:	e8 54 80 00 00       	call   c001de36 <unlockScheduler()>
c0015de2:	8b 1d e8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5e8
c0015de8:	83 ec 08             	sub    esp,0x8
c0015deb:	6a 01                	push   0x1
c0015ded:	68 e4 b2 02 c0       	push   0xc002b2e4
c0015df2:	e8 95 79 00 00       	call   c001d78c <Thr::loadDLL(char const*, bool)>
c0015df7:	83 c4 10             	add    esp,0x10
c0015dfa:	83 ec 08             	sub    esp,0x8
c0015dfd:	53                   	push   ebx
c0015dfe:	50                   	push   eax
c0015dff:	e8 bc 7b 00 00       	call   c001d9c0 <Thr::executeDLL(unsigned long, void*)>
c0015e04:	83 c4 10             	add    esp,0x10
c0015e07:	8b 1d e8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5e8
c0015e0d:	83 ec 08             	sub    esp,0x8
c0015e10:	6a 01                	push   0x1
c0015e12:	68 ca b2 02 c0       	push   0xc002b2ca
c0015e17:	e8 70 79 00 00       	call   c001d78c <Thr::loadDLL(char const*, bool)>
c0015e1c:	83 c4 10             	add    esp,0x10
c0015e1f:	83 ec 08             	sub    esp,0x8
c0015e22:	53                   	push   ebx
c0015e23:	50                   	push   eax
c0015e24:	e8 97 7b 00 00       	call   c001d9c0 <Thr::executeDLL(unsigned long, void*)>
c0015e29:	83 c4 10             	add    esp,0x10
c0015e2c:	90                   	nop
c0015e2d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e30:	c9                   	leave  
c0015e31:	c3                   	ret    

c0015e32 <sendKeyToTerminal(unsigned char)>:
c0015e32:	55                   	push   ebp
c0015e33:	89 e5                	mov    ebp,esp
c0015e35:	83 ec 28             	sub    esp,0x28
c0015e38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e3b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e3e:	a1 c4 e6 02 c0       	mov    eax,ds:0xc002e6c4
c0015e43:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e47:	83 ec 08             	sub    esp,0x8
c0015e4a:	52                   	push   edx
c0015e4b:	50                   	push   eax
c0015e4c:	e8 09 b5 ff ff       	call   c001135a <VgaText::receiveKey(unsigned char)>
c0015e51:	83 c4 10             	add    esp,0x10
c0015e54:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e58:	75 41                	jne    c0015e9b <sendKeyToTerminal(unsigned char)+0x69>
c0015e5a:	e8 fc 7f 00 00       	call   c001de5b <lockStuff()>
c0015e5f:	a1 a0 e7 02 c0       	mov    eax,ds:0xc002e7a0
c0015e64:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e67:	c7 05 a0 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e7a0,0x0
c0015e71:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e75:	74 1f                	je     c0015e96 <sendKeyToTerminal(unsigned char)+0x64>
c0015e77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e7a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e7d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e80:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e83:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e86:	83 ec 0c             	sub    esp,0xc
c0015e89:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e8c:	e8 bb 85 00 00       	call   c001e44c <unblockTask(ThreadControlBlock*)>
c0015e91:	83 c4 10             	add    esp,0x10
c0015e94:	eb db                	jmp    c0015e71 <sendKeyToTerminal(unsigned char)+0x3f>
c0015e96:	e8 5a 83 00 00       	call   c001e1f5 <unlockStuff()>
c0015e9b:	90                   	nop
c0015e9c:	c9                   	leave  
c0015e9d:	c3                   	ret    

c0015e9e <sendKeyboardToken(KeyboardToken)>:
c0015e9e:	55                   	push   ebp
c0015e9f:	89 e5                	mov    ebp,esp
c0015ea1:	83 ec 18             	sub    esp,0x18
c0015ea4:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015ea7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eaa:	0f b7 c0             	movzx  eax,ax
c0015ead:	83 f2 01             	xor    edx,0x1
c0015eb0:	88 90 c0 e7 02 c0    	mov    BYTE PTR [eax-0x3ffd1840],dl
c0015eb6:	a1 a8 e7 02 c0       	mov    eax,ds:0xc002e7a8
c0015ebb:	85 c0                	test   eax,eax
c0015ebd:	74 24                	je     c0015ee3 <sendKeyboardToken(KeyboardToken)+0x45>
c0015ebf:	8b 0d a8 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e7a8
c0015ec5:	83 ec 04             	sub    esp,0x4
c0015ec8:	68 c0 e7 02 c0       	push   0xc002e7c0
c0015ecd:	83 ec 08             	sub    esp,0x8
c0015ed0:	89 e2                	mov    edx,esp
c0015ed2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed5:	89 02                	mov    DWORD PTR [edx],eax
c0015ed7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015eda:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ede:	ff d1                	call   ecx
c0015ee0:	83 c4 10             	add    esp,0x10
c0015ee3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee6:	66 3d 03 02          	cmp    ax,0x203
c0015eea:	75 07                	jne    c0015ef3 <sendKeyboardToken(KeyboardToken)+0x55>
c0015eec:	a0 c0 e8 02 c0       	mov    al,ds:0xc002e8c0
c0015ef1:	84 c0                	test   al,al
c0015ef3:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ef7:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015efa:	a0 c8 eb 02 c0       	mov    al,ds:0xc002ebc8
c0015eff:	38 c2                	cmp    dl,al
c0015f01:	74 1c                	je     c0015f1f <sendKeyboardToken(KeyboardToken)+0x81>
c0015f03:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f06:	a2 c8 eb 02 c0       	mov    ds:0xc002ebc8,al
c0015f0b:	a0 c8 eb 02 c0       	mov    al,ds:0xc002ebc8
c0015f10:	0f b6 c0             	movzx  eax,al
c0015f13:	83 ec 0c             	sub    esp,0xc
c0015f16:	50                   	push   eax
c0015f17:	e8 9e a6 ff ff       	call   c00105ba <setTerminalScrollLock(bool)>
c0015f1c:	83 c4 10             	add    esp,0x10
c0015f1f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f22:	84 c0                	test   al,al
c0015f24:	0f 84 ae 00 00 00    	je     c0015fd8 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f2d:	66 3d 10 03          	cmp    ax,0x310
c0015f31:	75 06                	jne    c0015f39 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f33:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3c:	66 3d 11 03          	cmp    ax,0x311
c0015f40:	75 06                	jne    c0015f48 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f42:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f4b:	66 3d 12 03          	cmp    ax,0x312
c0015f4f:	75 06                	jne    c0015f57 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f51:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5a:	66 3d 13 03          	cmp    ax,0x313
c0015f5e:	75 06                	jne    c0015f66 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f60:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f69:	66 3d 14 03          	cmp    ax,0x314
c0015f6d:	75 06                	jne    c0015f75 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f6f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f78:	66 3d 15 03          	cmp    ax,0x315
c0015f7c:	75 06                	jne    c0015f84 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f7e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f87:	66 3d 16 03          	cmp    ax,0x316
c0015f8b:	75 06                	jne    c0015f93 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f8d:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f96:	66 3d 17 03          	cmp    ax,0x317
c0015f9a:	75 06                	jne    c0015fa2 <sendKeyboardToken(KeyboardToken)+0x104>
c0015f9c:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015fa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa5:	66 3d 18 03          	cmp    ax,0x318
c0015fa9:	75 06                	jne    c0015fb1 <sendKeyboardToken(KeyboardToken)+0x113>
c0015fab:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015fb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb4:	66 3d 19 03          	cmp    ax,0x319
c0015fb8:	75 06                	jne    c0015fc0 <sendKeyboardToken(KeyboardToken)+0x122>
c0015fba:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc3:	66 3d 1a 03          	cmp    ax,0x31a
c0015fc7:	0f 85 c9 00 00 00    	jne    c0016096 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fcd:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fd3:	e9 be 00 00 00       	jmp    c0016096 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fdb:	66 3d 10 03          	cmp    ax,0x310
c0015fdf:	75 0a                	jne    c0015feb <sendKeyboardToken(KeyboardToken)+0x14d>
c0015fe1:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fe7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015feb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fee:	66 3d 11 03          	cmp    ax,0x311
c0015ff2:	75 0a                	jne    c0015ffe <sendKeyboardToken(KeyboardToken)+0x160>
c0015ff4:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015ffa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ffe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016001:	66 3d 12 03          	cmp    ax,0x312
c0016005:	75 0a                	jne    c0016011 <sendKeyboardToken(KeyboardToken)+0x173>
c0016007:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001600d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016014:	66 3d 13 03          	cmp    ax,0x313
c0016018:	75 0a                	jne    c0016024 <sendKeyboardToken(KeyboardToken)+0x186>
c001601a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016020:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016024:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016027:	66 3d 14 03          	cmp    ax,0x314
c001602b:	75 0a                	jne    c0016037 <sendKeyboardToken(KeyboardToken)+0x199>
c001602d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016033:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001603a:	66 3d 15 03          	cmp    ax,0x315
c001603e:	75 0a                	jne    c001604a <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016040:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016046:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001604a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001604d:	66 3d 16 03          	cmp    ax,0x316
c0016051:	75 0a                	jne    c001605d <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016053:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016059:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001605d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016060:	66 3d 17 03          	cmp    ax,0x317
c0016064:	75 0a                	jne    c0016070 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016066:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001606c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016070:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016073:	66 3d 18 03          	cmp    ax,0x318
c0016077:	75 0a                	jne    c0016083 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016079:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001607f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016086:	66 3d 19 03          	cmp    ax,0x319
c001608a:	75 0a                	jne    c0016096 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001608c:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016092:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016096:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016099:	66 3d 00 02          	cmp    ax,0x200
c001609d:	75 2c                	jne    c00160cb <sendKeyboardToken(KeyboardToken)+0x22d>
c001609f:	a0 c0 eb 02 c0       	mov    al,ds:0xc002ebc0
c00160a4:	83 f0 01             	xor    eax,0x1
c00160a7:	84 c0                	test   al,al
c00160a9:	74 20                	je     c00160cb <sendKeyboardToken(KeyboardToken)+0x22d>
c00160ab:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c00160b0:	6a 01                	push   0x1
c00160b2:	6a 00                	push   0x0
c00160b4:	68 7a 5d 01 c0       	push   0xc0015d7a
c00160b9:	50                   	push   eax
c00160ba:	e8 a7 7e 00 00       	call   c001df66 <Process::createThread(void (*)(void*), void*, int)>
c00160bf:	83 c4 10             	add    esp,0x10
c00160c2:	c6 05 c0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002ebc0,0x1
c00160c9:	eb 33                	jmp    c00160fe <sendKeyboardToken(KeyboardToken)+0x260>
c00160cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ce:	66 3d 01 02          	cmp    ax,0x201
c00160d2:	75 2a                	jne    c00160fe <sendKeyboardToken(KeyboardToken)+0x260>
c00160d4:	a0 c0 eb 02 c0       	mov    al,ds:0xc002ebc0
c00160d9:	83 f0 01             	xor    eax,0x1
c00160dc:	84 c0                	test   al,al
c00160de:	74 1e                	je     c00160fe <sendKeyboardToken(KeyboardToken)+0x260>
c00160e0:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c00160e5:	6a 01                	push   0x1
c00160e7:	6a 00                	push   0x0
c00160e9:	68 d6 5d 01 c0       	push   0xc0015dd6
c00160ee:	50                   	push   eax
c00160ef:	e8 72 7e 00 00       	call   c001df66 <Process::createThread(void (*)(void*), void*, int)>
c00160f4:	83 c4 10             	add    esp,0x10
c00160f7:	c6 05 c0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002ebc0,0x1
c00160fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016101:	66 3d 1d 03          	cmp    ax,0x31d
c0016105:	75 06                	jne    c001610d <sendKeyboardToken(KeyboardToken)+0x26f>
c0016107:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001610d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016110:	66 3d 1c 03          	cmp    ax,0x31c
c0016114:	75 06                	jne    c001611c <sendKeyboardToken(KeyboardToken)+0x27e>
c0016116:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001611c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001611f:	66 3d 1b 03          	cmp    ax,0x31b
c0016123:	75 06                	jne    c001612b <sendKeyboardToken(KeyboardToken)+0x28d>
c0016125:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001612b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612e:	66 3d 1e 03          	cmp    ax,0x31e
c0016132:	75 06                	jne    c001613a <sendKeyboardToken(KeyboardToken)+0x29c>
c0016134:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001613a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001613d:	66 3d 1f 03          	cmp    ax,0x31f
c0016141:	75 06                	jne    c0016149 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016143:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001614c:	66 3d 1a 03          	cmp    ax,0x31a
c0016150:	75 06                	jne    c0016158 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016152:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016158:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001615c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001615f:	83 f0 01             	xor    eax,0x1
c0016162:	84 c0                	test   al,al
c0016164:	74 77                	je     c00161dd <sendKeyboardToken(KeyboardToken)+0x33f>
c0016166:	a0 c1 e8 02 c0       	mov    al,ds:0xc002e8c1
c001616b:	84 c0                	test   al,al
c001616d:	74 41                	je     c00161b0 <sendKeyboardToken(KeyboardToken)+0x312>
c001616f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016173:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016177:	74 2b                	je     c00161a4 <sendKeyboardToken(KeyboardToken)+0x306>
c0016179:	8b 15 c4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebc4
c001617f:	89 d0                	mov    eax,edx
c0016181:	c1 e0 02             	shl    eax,0x2
c0016184:	01 d0                	add    eax,edx
c0016186:	01 c0                	add    eax,eax
c0016188:	a3 c4 eb 02 c0       	mov    ds:0xc002ebc4,eax
c001618d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016190:	0f b7 c0             	movzx  eax,ax
c0016193:	8d 50 d0             	lea    edx,[eax-0x30]
c0016196:	a1 c4 eb 02 c0       	mov    eax,ds:0xc002ebc4
c001619b:	01 d0                	add    eax,edx
c001619d:	a3 c4 eb 02 c0       	mov    ds:0xc002ebc4,eax
c00161a2:	eb 6d                	jmp    c0016211 <sendKeyboardToken(KeyboardToken)+0x373>
c00161a4:	c7 05 c4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebc4,0x0
c00161ae:	eb 61                	jmp    c0016211 <sendKeyboardToken(KeyboardToken)+0x373>
c00161b0:	a1 c4 eb 02 c0       	mov    eax,ds:0xc002ebc4
c00161b5:	85 c0                	test   eax,eax
c00161b7:	74 18                	je     c00161d1 <sendKeyboardToken(KeyboardToken)+0x333>
c00161b9:	a1 c4 eb 02 c0       	mov    eax,ds:0xc002ebc4
c00161be:	0f b6 c0             	movzx  eax,al
c00161c1:	83 ec 0c             	sub    esp,0xc
c00161c4:	50                   	push   eax
c00161c5:	e8 68 fc ff ff       	call   c0015e32 <sendKeyToTerminal(unsigned char)>
c00161ca:	83 c4 10             	add    esp,0x10
c00161cd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161d1:	c7 05 c4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebc4,0x0
c00161db:	eb 34                	jmp    c0016211 <sendKeyboardToken(KeyboardToken)+0x373>
c00161dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161e0:	66 3d 01 01          	cmp    ax,0x101
c00161e4:	75 2b                	jne    c0016211 <sendKeyboardToken(KeyboardToken)+0x373>
c00161e6:	a1 c4 eb 02 c0       	mov    eax,ds:0xc002ebc4
c00161eb:	85 c0                	test   eax,eax
c00161ed:	74 18                	je     c0016207 <sendKeyboardToken(KeyboardToken)+0x369>
c00161ef:	a1 c4 eb 02 c0       	mov    eax,ds:0xc002ebc4
c00161f4:	0f b6 c0             	movzx  eax,al
c00161f7:	83 ec 0c             	sub    esp,0xc
c00161fa:	50                   	push   eax
c00161fb:	e8 32 fc ff ff       	call   c0015e32 <sendKeyToTerminal(unsigned char)>
c0016200:	83 c4 10             	add    esp,0x10
c0016203:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016207:	c7 05 c4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebc4,0x0
c0016211:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016214:	83 f0 01             	xor    eax,0x1
c0016217:	84 c0                	test   al,al
c0016219:	74 4c                	je     c0016267 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001621b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001621e:	83 f0 01             	xor    eax,0x1
c0016221:	84 c0                	test   al,al
c0016223:	74 42                	je     c0016267 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016225:	a0 c0 e8 02 c0       	mov    al,ds:0xc002e8c0
c001622a:	83 f0 01             	xor    eax,0x1
c001622d:	84 c0                	test   al,al
c001622f:	74 36                	je     c0016267 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016231:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016234:	66 83 f8 1f          	cmp    ax,0x1f
c0016238:	76 09                	jbe    c0016243 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001623a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623d:	66 83 f8 7e          	cmp    ax,0x7e
c0016241:	76 12                	jbe    c0016255 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016246:	66 83 f8 0a          	cmp    ax,0xa
c001624a:	74 09                	je     c0016255 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001624c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001624f:	66 83 f8 08          	cmp    ax,0x8
c0016253:	75 12                	jne    c0016267 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016258:	0f b6 c0             	movzx  eax,al
c001625b:	83 ec 0c             	sub    esp,0xc
c001625e:	50                   	push   eax
c001625f:	e8 ce fb ff ff       	call   c0015e32 <sendKeyToTerminal(unsigned char)>
c0016264:	83 c4 10             	add    esp,0x10
c0016267:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001626a:	83 f0 01             	xor    eax,0x1
c001626d:	84 c0                	test   al,al
c001626f:	74 4f                	je     c00162c0 <sendKeyboardToken(KeyboardToken)+0x422>
c0016271:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016274:	83 f0 01             	xor    eax,0x1
c0016277:	84 c0                	test   al,al
c0016279:	74 45                	je     c00162c0 <sendKeyboardToken(KeyboardToken)+0x422>
c001627b:	a0 c0 e8 02 c0       	mov    al,ds:0xc002e8c0
c0016280:	84 c0                	test   al,al
c0016282:	74 3c                	je     c00162c0 <sendKeyboardToken(KeyboardToken)+0x422>
c0016284:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016287:	66 83 f8 3f          	cmp    ax,0x3f
c001628b:	76 33                	jbe    c00162c0 <sendKeyboardToken(KeyboardToken)+0x422>
c001628d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016290:	66 83 f8 7f          	cmp    ax,0x7f
c0016294:	77 2a                	ja     c00162c0 <sendKeyboardToken(KeyboardToken)+0x422>
c0016296:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016299:	88 c2                	mov    dl,al
c001629b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001629e:	66 83 f8 5f          	cmp    ax,0x5f
c00162a2:	76 04                	jbe    c00162a8 <sendKeyboardToken(KeyboardToken)+0x40a>
c00162a4:	b0 20                	mov    al,0x20
c00162a6:	eb 02                	jmp    c00162aa <sendKeyboardToken(KeyboardToken)+0x40c>
c00162a8:	b0 00                	mov    al,0x0
c00162aa:	29 c2                	sub    edx,eax
c00162ac:	88 d0                	mov    al,dl
c00162ae:	83 e8 40             	sub    eax,0x40
c00162b1:	0f b6 c0             	movzx  eax,al
c00162b4:	83 ec 0c             	sub    esp,0xc
c00162b7:	50                   	push   eax
c00162b8:	e8 75 fb ff ff       	call   c0015e32 <sendKeyToTerminal(unsigned char)>
c00162bd:	83 c4 10             	add    esp,0x10
c00162c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c3:	66 3d 00 03          	cmp    ax,0x300
c00162c7:	75 0f                	jne    c00162d8 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162c9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162cc:	83 f0 01             	xor    eax,0x1
c00162cf:	84 c0                	test   al,al
c00162d1:	74 05                	je     c00162d8 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162d3:	e8 17 ab ff ff       	call   c0010def <doTerminalCycle()>
c00162d8:	90                   	nop
c00162d9:	c9                   	leave  
c00162da:	c3                   	ret    

c00162db <clearInternalKeybuffer(VgaText*)>:
c00162db:	55                   	push   ebp
c00162dc:	89 e5                	mov    ebp,esp
c00162de:	83 ec 08             	sub    esp,0x8
c00162e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162e4:	05 34 11 00 00       	add    eax,0x1134
c00162e9:	83 ec 0c             	sub    esp,0xc
c00162ec:	50                   	push   eax
c00162ed:	e8 a2 a4 fe ff       	call   c0000794 <strlen>
c00162f2:	83 c4 10             	add    esp,0x10
c00162f5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162f8:	81 c2 34 11 00 00    	add    edx,0x1134
c00162fe:	83 ec 04             	sub    esp,0x4
c0016301:	50                   	push   eax
c0016302:	6a 00                	push   0x0
c0016304:	52                   	push   edx
c0016305:	e8 6e a4 fe ff       	call   c0000778 <memset>
c001630a:	83 c4 10             	add    esp,0x10
c001630d:	90                   	nop
c001630e:	c9                   	leave  
c001630f:	c3                   	ret    

c0016310 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016310:	55                   	push   ebp
c0016311:	89 e5                	mov    ebp,esp
c0016313:	83 ec 18             	sub    esp,0x18
c0016316:	fb                   	sti    
c0016317:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001631e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016322:	0f 84 8a 00 00 00    	je     c00163b2 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016328:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001632b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016331:	84 c0                	test   al,al
c0016333:	75 11                	jne    c0016346 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0016335:	e8 fa 7a 00 00       	call   c001de34 <lockScheduler()>
c001633a:	e8 31 7e 00 00       	call   c001e170 <schedule()>
c001633f:	e8 f2 7a 00 00       	call   c001de36 <unlockScheduler()>
c0016344:	eb e2                	jmp    c0016328 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0016346:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016349:	8d 50 01             	lea    edx,[eax+0x1]
c001634c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001634f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016352:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0016358:	88 10                	mov    BYTE PTR [eax],dl
c001635a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001635d:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016363:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016369:	05 34 11 00 00       	add    eax,0x1134
c001636e:	83 ec 0c             	sub    esp,0xc
c0016371:	50                   	push   eax
c0016372:	e8 1d a4 fe ff       	call   c0000794 <strlen>
c0016377:	83 c4 10             	add    esp,0x10
c001637a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001637d:	81 c2 34 11 00 00    	add    edx,0x1134
c0016383:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016386:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016389:	81 c2 34 11 00 00    	add    edx,0x1134
c001638f:	83 ec 04             	sub    esp,0x4
c0016392:	50                   	push   eax
c0016393:	51                   	push   ecx
c0016394:	52                   	push   edx
c0016395:	e8 e2 a2 fe ff       	call   c000067c <memmove>
c001639a:	83 c4 10             	add    esp,0x10
c001639d:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00163a0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00163a3:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00163a7:	0f 85 71 ff ff ff    	jne    c001631e <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00163ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163b0:	eb 03                	jmp    c00163b5 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00163b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163b5:	c9                   	leave  
c00163b6:	c3                   	ret    
c00163b7:	90                   	nop

c00163b8 <Keyboard::Keyboard(char const*)>:
c00163b8:	83 ec 0c             	sub    esp,0xc
c00163bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163bf:	83 ec 08             	sub    esp,0x8
c00163c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163c6:	50                   	push   eax
c00163c7:	e8 b8 e1 ff ff       	call   c0014584 <Device::Device(char const*)>
c00163cc:	83 c4 10             	add    esp,0x10
c00163cf:	ba 08 b3 02 c0       	mov    edx,0xc002b308
c00163d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d8:	89 10                	mov    DWORD PTR [eax],edx
c00163da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163de:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00163e8:	c6 05 a4 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e7a4,0x1
c00163ef:	90                   	nop
c00163f0:	83 c4 0c             	add    esp,0xc
c00163f3:	c3                   	ret    

c00163f4 <Keyboard::~Keyboard()>:
c00163f4:	83 ec 0c             	sub    esp,0xc
c00163f7:	ba 08 b3 02 c0       	mov    edx,0xc002b308
c00163fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016400:	89 10                	mov    DWORD PTR [eax],edx
c0016402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016406:	83 ec 0c             	sub    esp,0xc
c0016409:	50                   	push   eax
c001640a:	e8 57 de ff ff       	call   c0014266 <Device::~Device()>
c001640f:	83 c4 10             	add    esp,0x10
c0016412:	90                   	nop
c0016413:	83 c4 0c             	add    esp,0xc
c0016416:	c3                   	ret    
c0016417:	90                   	nop

c0016418 <Keyboard::~Keyboard()>:
c0016418:	83 ec 0c             	sub    esp,0xc
c001641b:	83 ec 0c             	sub    esp,0xc
c001641e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016422:	e8 cd ff ff ff       	call   c00163f4 <Keyboard::~Keyboard()>
c0016427:	83 c4 10             	add    esp,0x10
c001642a:	83 ec 08             	sub    esp,0x8
c001642d:	68 5c 01 00 00       	push   0x15c
c0016432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016436:	e8 53 ca ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c001643b:	83 c4 10             	add    esp,0x10
c001643e:	83 c4 0c             	add    esp,0xc
c0016441:	c3                   	ret    

c0016442 <LogicalDisk::close(int, int, void*)>:
c0016442:	83 c8 ff             	or     eax,0xffffffff
c0016445:	c3                   	ret    

c0016446 <LogicalDisk::~LogicalDisk()>:
c0016446:	83 ec 0c             	sub    esp,0xc
c0016449:	ba b8 b3 02 c0       	mov    edx,0xc002b3b8
c001644e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016452:	89 10                	mov    DWORD PTR [eax],edx
c0016454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016458:	83 ec 0c             	sub    esp,0xc
c001645b:	50                   	push   eax
c001645c:	e8 05 de ff ff       	call   c0014266 <Device::~Device()>
c0016461:	83 c4 10             	add    esp,0x10
c0016464:	90                   	nop
c0016465:	83 c4 0c             	add    esp,0xc
c0016468:	c3                   	ret    
c0016469:	90                   	nop

c001646a <LogicalDisk::~LogicalDisk()>:
c001646a:	83 ec 0c             	sub    esp,0xc
c001646d:	83 ec 0c             	sub    esp,0xc
c0016470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016474:	e8 cd ff ff ff       	call   c0016446 <LogicalDisk::~LogicalDisk()>
c0016479:	83 c4 10             	add    esp,0x10
c001647c:	83 ec 08             	sub    esp,0x8
c001647f:	68 74 01 00 00       	push   0x174
c0016484:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016488:	e8 01 ca ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c001648d:	83 c4 10             	add    esp,0x10
c0016490:	83 c4 0c             	add    esp,0xc
c0016493:	c3                   	ret    

c0016494 <LogicalDisk::open(int, int, void*)>:
c0016494:	83 ec 18             	sub    esp,0x18
c0016497:	68 34 b3 02 c0       	push   0xc002b334
c001649c:	e8 6e 41 00 00       	call   c001a60f <Krnl::panic(char const*)>
c00164a1:	83 c8 ff             	or     eax,0xffffffff
c00164a4:	83 c4 1c             	add    esp,0x1c
c00164a7:	c3                   	ret    

c00164a8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00164a8:	53                   	push   ebx
c00164a9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00164ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164b5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00164bb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00164c1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00164c7:	77 10                	ja     c00164d9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00164c9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00164cf:	89 d3                	mov    ebx,edx
c00164d1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00164d7:	72 05                	jb     c00164de <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00164d9:	83 c8 ff             	or     eax,0xffffffff
c00164dc:	89 c2                	mov    edx,eax
c00164de:	5b                   	pop    ebx
c00164df:	c3                   	ret    

c00164e0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00164e0:	56                   	push   esi
c00164e1:	83 c8 ff             	or     eax,0xffffffff
c00164e4:	53                   	push   ebx
c00164e5:	89 c2                	mov    edx,eax
c00164e7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00164eb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00164ef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00164f3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00164f9:	77 27                	ja     c0016522 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164fb:	89 d8                	mov    eax,ebx
c00164fd:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016503:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016509:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001650e:	89 c2                	mov    edx,eax
c0016510:	73 10                	jae    c0016522 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016512:	89 c8                	mov    eax,ecx
c0016514:	89 da                	mov    edx,ebx
c0016516:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001651c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016522:	5b                   	pop    ebx
c0016523:	5e                   	pop    esi
c0016524:	c3                   	ret    
c0016525:	90                   	nop

c0016526 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016526:	83 ec 1c             	sub    esp,0x1c
c0016529:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001652d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016531:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016535:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016539:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001653d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016540:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016544:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016548:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001654c:	83 ec 08             	sub    esp,0x8
c001654f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016553:	50                   	push   eax
c0016554:	e8 2b e0 ff ff       	call   c0014584 <Device::Device(char const*)>
c0016559:	83 c4 10             	add    esp,0x10
c001655c:	ba b8 b3 02 c0       	mov    edx,0xc002b3b8
c0016561:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016565:	89 10                	mov    DWORD PTR [eax],edx
c0016567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001656b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016572:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016576:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001657d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016581:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001658b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001658f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016593:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016597:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001659d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00165a3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165a7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00165aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00165ae:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00165b4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00165ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165c2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00165c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165cc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00165d6:	90                   	nop
c00165d7:	83 c4 1c             	add    esp,0x1c
c00165da:	c3                   	ret    
c00165db:	90                   	nop

c00165dc <LogicalDisk::assignDriveLetter()>:
c00165dc:	55                   	push   ebp
c00165dd:	57                   	push   edi
c00165de:	56                   	push   esi
c00165df:	53                   	push   ebx
c00165e0:	83 ec 14             	sub    esp,0x14
c00165e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165e7:	8b 3d e0 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002ebe0
c00165ed:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00165f3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00165f7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00165fd:	8b 3d e4 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002ebe4
c0016603:	3c 01                	cmp    al,0x1
c0016605:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016609:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001660d:	19 c0                	sbb    eax,eax
c001660f:	83 e0 02             	and    eax,0x2
c0016612:	83 c0 41             	add    eax,0x41
c0016615:	0f be e8             	movsx  ebp,al
c0016618:	3c 43                	cmp    al,0x43
c001661a:	75 10                	jne    c001662c <LogicalDisk::assignDriveLetter()+0x50>
c001661c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016623:	75 5d                	jne    c0016682 <LogicalDisk::assignDriveLetter()+0xa6>
c0016625:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001662a:	75 56                	jne    c0016682 <LogicalDisk::assignDriveLetter()+0xa6>
c001662c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001662f:	ba 01 00 00 00       	mov    edx,0x1
c0016634:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016638:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001663c:	d3 e2                	shl    edx,cl
c001663e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016642:	89 d7                	mov    edi,edx
c0016644:	89 d6                	mov    esi,edx
c0016646:	c1 ff 1f             	sar    edi,0x1f
c0016649:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001664d:	21 f9                	and    ecx,edi
c001664f:	09 d1                	or     ecx,edx
c0016651:	75 2f                	jne    c0016682 <LogicalDisk::assignDriveLetter()+0xa6>
c0016653:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016657:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001665b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016661:	09 f2                	or     edx,esi
c0016663:	89 15 e0 eb 02 c0    	mov    DWORD PTR ds:0xc002ebe0,edx
c0016669:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001666d:	09 fa                	or     edx,edi
c001666f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016673:	89 15 e4 eb 02 c0    	mov    DWORD PTR ds:0xc002ebe4,edx
c0016679:	89 1c bd 00 ec 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1400],ebx
c0016680:	eb 08                	jmp    c001668a <LogicalDisk::assignDriveLetter()+0xae>
c0016682:	45                   	inc    ebp
c0016683:	40                   	inc    eax
c0016684:	3c 5b                	cmp    al,0x5b
c0016686:	75 90                	jne    c0016618 <LogicalDisk::assignDriveLetter()+0x3c>
c0016688:	31 c0                	xor    eax,eax
c001668a:	83 c4 14             	add    esp,0x14
c001668d:	5b                   	pop    ebx
c001668e:	5e                   	pop    esi
c001668f:	5f                   	pop    edi
c0016690:	5d                   	pop    ebp
c0016691:	c3                   	ret    

c0016692 <LogicalDisk::mount()>:
c0016692:	56                   	push   esi
c0016693:	53                   	push   ebx
c0016694:	51                   	push   ecx
c0016695:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016699:	8b 1d 6c e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e76c
c001669f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00166a9:	85 db                	test   ebx,ebx
c00166ab:	74 50                	je     c00166fd <LogicalDisk::mount()+0x6b>
c00166ad:	e8 6d 77 00 00       	call   c001de1f <getIRQNestingLevel()>
c00166b2:	52                   	push   edx
c00166b3:	52                   	push   edx
c00166b4:	50                   	push   eax
c00166b5:	68 58 b3 02 c0       	push   0xc002b358
c00166ba:	e8 af c8 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00166bf:	83 c4 0c             	add    esp,0xc
c00166c2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00166c9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00166cb:	83 e8 41             	sub    eax,0x41
c00166ce:	50                   	push   eax
c00166cf:	56                   	push   esi
c00166d0:	53                   	push   ebx
c00166d1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00166d4:	83 c4 10             	add    esp,0x10
c00166d7:	84 c0                	test   al,al
c00166d9:	74 08                	je     c00166e3 <LogicalDisk::mount()+0x51>
c00166db:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00166e1:	eb 1c                	jmp    c00166ff <LogicalDisk::mount()+0x6d>
c00166e3:	e8 37 77 00 00       	call   c001de1f <getIRQNestingLevel()>
c00166e8:	51                   	push   ecx
c00166e9:	51                   	push   ecx
c00166ea:	50                   	push   eax
c00166eb:	68 73 b3 02 c0       	push   0xc002b373
c00166f0:	e8 79 c8 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00166f5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00166f8:	83 c4 10             	add    esp,0x10
c00166fb:	eb ac                	jmp    c00166a9 <LogicalDisk::mount()+0x17>
c00166fd:	31 c0                	xor    eax,eax
c00166ff:	5a                   	pop    edx
c0016700:	5b                   	pop    ebx
c0016701:	5e                   	pop    esi
c0016702:	c3                   	ret    
c0016703:	90                   	nop

c0016704 <LogicalDisk::unmount()>:
c0016704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016708:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016712:	c3                   	ret    
c0016713:	90                   	nop

c0016714 <LogicalDisk::eject()>:
c0016714:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016718:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001671e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016720:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016724:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016727:	90                   	nop

c0016728 <LogicalDisk::unassignDriveLetter()>:
c0016728:	57                   	push   edi
c0016729:	56                   	push   esi
c001672a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001672e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016735:	84 c9                	test   cl,cl
c0016737:	75 0f                	jne    c0016748 <LogicalDisk::unassignDriveLetter()+0x20>
c0016739:	c7 44 24 0c 8e b3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b38e
c0016741:	5e                   	pop    esi
c0016742:	5f                   	pop    edi
c0016743:	e9 c7 3e 00 00       	jmp    c001a60f <Krnl::panic(char const*)>
c0016748:	83 e9 41             	sub    ecx,0x41
c001674b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016752:	b8 01 00 00 00       	mov    eax,0x1
c0016757:	c7 04 8d 00 ec 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1400],0x0
c0016762:	d3 e0                	shl    eax,cl
c0016764:	89 c7                	mov    edi,eax
c0016766:	f7 d0                	not    eax
c0016768:	c1 ff 1f             	sar    edi,0x1f
c001676b:	21 05 e0 eb 02 c0    	and    DWORD PTR ds:0xc002ebe0,eax
c0016771:	89 fe                	mov    esi,edi
c0016773:	f7 d6                	not    esi
c0016775:	21 35 e4 eb 02 c0    	and    DWORD PTR ds:0xc002ebe4,esi
c001677b:	5e                   	pop    esi
c001677c:	5f                   	pop    edi
c001677d:	c3                   	ret    

c001677e <LogicalDisk::read(unsigned long long, int, void*)>:
c001677e:	57                   	push   edi
c001677f:	56                   	push   esi
c0016780:	53                   	push   ebx
c0016781:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016785:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016789:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001678d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016791:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016797:	77 41                	ja     c00167da <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016799:	99                   	cdq    
c001679a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167a0:	01 c8                	add    eax,ecx
c00167a2:	11 da                	adc    edx,ebx
c00167a4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167aa:	19 d7                	sbb    edi,edx
c00167ac:	72 33                	jb     c00167e1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00167ae:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167b4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167be:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167c2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167c8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167d2:	5b                   	pop    ebx
c00167d3:	5e                   	pop    esi
c00167d4:	5f                   	pop    edi
c00167d5:	e9 b0 0a 00 00       	jmp    c001728a <VCache::read(unsigned long long, int, void*)>
c00167da:	b8 05 00 00 00       	mov    eax,0x5
c00167df:	eb 05                	jmp    c00167e6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00167e1:	b8 07 00 00 00       	mov    eax,0x7
c00167e6:	5b                   	pop    ebx
c00167e7:	5e                   	pop    esi
c00167e8:	5f                   	pop    edi
c00167e9:	c3                   	ret    

c00167ea <LogicalDisk::write(unsigned long long, int, void*)>:
c00167ea:	57                   	push   edi
c00167eb:	56                   	push   esi
c00167ec:	53                   	push   ebx
c00167ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167f5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167fd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016803:	77 41                	ja     c0016846 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016805:	99                   	cdq    
c0016806:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001680c:	01 c8                	add    eax,ecx
c001680e:	11 da                	adc    edx,ebx
c0016810:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016816:	19 d7                	sbb    edi,edx
c0016818:	72 33                	jb     c001684d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001681a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016820:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016826:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001682a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001682e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016834:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001683a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001683e:	5b                   	pop    ebx
c001683f:	5e                   	pop    esi
c0016840:	5f                   	pop    edi
c0016841:	e9 4e 09 00 00       	jmp    c0017194 <VCache::write(unsigned long long, int, void*)>
c0016846:	b8 05 00 00 00       	mov    eax,0x5
c001684b:	eb 05                	jmp    c0016852 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001684d:	b8 07 00 00 00       	mov    eax,0x7
c0016852:	5b                   	pop    ebx
c0016853:	5e                   	pop    esi
c0016854:	5f                   	pop    edi
c0016855:	c3                   	ret    

c0016856 <Mouse::Mouse(char const*)>:
c0016856:	83 ec 0c             	sub    esp,0xc
c0016859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001685d:	83 ec 08             	sub    esp,0x8
c0016860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016864:	50                   	push   eax
c0016865:	e8 1a dd ff ff       	call   c0014584 <Device::Device(char const*)>
c001686a:	83 c4 10             	add    esp,0x10
c001686d:	ba e4 b3 02 c0       	mov    edx,0xc002b3e4
c0016872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016876:	89 10                	mov    DWORD PTR [eax],edx
c0016878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001687c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016886:	90                   	nop
c0016887:	83 c4 0c             	add    esp,0xc
c001688a:	c3                   	ret    
c001688b:	90                   	nop

c001688c <Mouse::~Mouse()>:
c001688c:	83 ec 0c             	sub    esp,0xc
c001688f:	ba e4 b3 02 c0       	mov    edx,0xc002b3e4
c0016894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016898:	89 10                	mov    DWORD PTR [eax],edx
c001689a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001689e:	83 ec 0c             	sub    esp,0xc
c00168a1:	50                   	push   eax
c00168a2:	e8 bf d9 ff ff       	call   c0014266 <Device::~Device()>
c00168a7:	83 c4 10             	add    esp,0x10
c00168aa:	90                   	nop
c00168ab:	83 c4 0c             	add    esp,0xc
c00168ae:	c3                   	ret    
c00168af:	90                   	nop

c00168b0 <Mouse::~Mouse()>:
c00168b0:	83 ec 0c             	sub    esp,0xc
c00168b3:	83 ec 0c             	sub    esp,0xc
c00168b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168ba:	e8 cd ff ff ff       	call   c001688c <Mouse::~Mouse()>
c00168bf:	83 c4 10             	add    esp,0x10
c00168c2:	83 ec 08             	sub    esp,0x8
c00168c5:	68 58 01 00 00       	push   0x158
c00168ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168ce:	e8 bb c5 ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c00168d3:	83 c4 10             	add    esp,0x10
c00168d6:	83 c4 0c             	add    esp,0xc
c00168d9:	c3                   	ret    

c00168da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00168da:	55                   	push   ebp
c00168db:	57                   	push   edi
c00168dc:	56                   	push   esi
c00168dd:	53                   	push   ebx
c00168de:	81 ec 28 01 00 00    	sub    esp,0x128
c00168e4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00168eb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00168f2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00168f9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016900:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016904:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016908:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001690f:	e8 6c dd ff ff       	call   c0014680 <Device::getName()>
c0016914:	5a                   	pop    edx
c0016915:	59                   	pop    ecx
c0016916:	50                   	push   eax
c0016917:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001691b:	55                   	push   ebp
c001691c:	e8 13 9f fe ff       	call   c0000834 <strcpy>
c0016921:	5b                   	pop    ebx
c0016922:	58                   	pop    eax
c0016923:	68 08 b4 02 c0       	push   0xc002b408
c0016928:	55                   	push   ebp
c0016929:	e8 46 a0 fe ff       	call   c0000974 <strcat>
c001692e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016935:	e8 06 8f ff ff       	call   c000f840 <malloc>
c001693a:	83 c4 0c             	add    esp,0xc
c001693d:	89 c3                	mov    ebx,eax
c001693f:	57                   	push   edi
c0016940:	56                   	push   esi
c0016941:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016945:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016949:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016950:	55                   	push   ebp
c0016951:	50                   	push   eax
c0016952:	e8 cf fb ff ff       	call   c0016526 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016957:	83 c4 14             	add    esp,0x14
c001695a:	53                   	push   ebx
c001695b:	e8 7c fc ff ff       	call   c00165dc <LogicalDisk::assignDriveLetter()>
c0016960:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016963:	89 c6                	mov    esi,eax
c0016965:	e8 28 fd ff ff       	call   c0016692 <LogicalDisk::mount()>
c001696a:	58                   	pop    eax
c001696b:	5a                   	pop    edx
c001696c:	53                   	push   ebx
c001696d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016974:	e8 1b da ff ff       	call   c0014394 <Device::addChild(Device*)>
c0016979:	59                   	pop    ecx
c001697a:	89 f0                	mov    eax,esi
c001697c:	5b                   	pop    ebx
c001697d:	0f be f0             	movsx  esi,al
c0016980:	56                   	push   esi
c0016981:	68 13 b4 02 c0       	push   0xc002b413
c0016986:	e8 e3 c5 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001698b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016991:	5b                   	pop    ebx
c0016992:	5e                   	pop    esi
c0016993:	5f                   	pop    edi
c0016994:	5d                   	pop    ebp
c0016995:	c3                   	ret    

c0016996 <createPartitionsForDisk(PhysicalDisk*)>:
c0016996:	55                   	push   ebp
c0016997:	57                   	push   edi
c0016998:	56                   	push   esi
c0016999:	53                   	push   ebx
c001699a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00169a0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00169a7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00169ad:	3d 00 02 00 00       	cmp    eax,0x200
c00169b2:	74 27                	je     c00169db <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00169b4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00169ba:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00169c0:	83 ec 10             	sub    esp,0x10
c00169c3:	0f a4 f7 0a          	shld   edi,esi,0xa
c00169c7:	99                   	cdq    
c00169c8:	c1 e6 0a             	shl    esi,0xa
c00169cb:	52                   	push   edx
c00169cc:	89 fd                	mov    ebp,edi
c00169ce:	50                   	push   eax
c00169cf:	55                   	push   ebp
c00169d0:	56                   	push   esi
c00169d1:	e8 36 00 01 00       	call   c0026a0c <__udivdi3>
c00169d6:	e9 b1 00 00 00       	jmp    c0016a8c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169db:	83 ec 0c             	sub    esp,0xc
c00169de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169e0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00169e4:	56                   	push   esi
c00169e5:	6a 01                	push   0x1
c00169e7:	6a 00                	push   0x0
c00169e9:	6a 00                	push   0x0
c00169eb:	53                   	push   ebx
c00169ec:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00169ef:	83 c4 20             	add    esp,0x20
c00169f2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00169fa:	75 0a                	jne    c0016a06 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00169fc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a04:	74 2c                	je     c0016a32 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a06:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a0c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a12:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a18:	83 ec 10             	sub    esp,0x10
c0016a1b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a1f:	89 f7                	mov    edi,esi
c0016a21:	c1 e0 0a             	shl    eax,0xa
c0016a24:	c1 ff 1f             	sar    edi,0x1f
c0016a27:	57                   	push   edi
c0016a28:	56                   	push   esi
c0016a29:	52                   	push   edx
c0016a2a:	50                   	push   eax
c0016a2b:	e8 dc ff 00 00       	call   c0026a0c <__udivdi3>
c0016a30:	eb 5a                	jmp    c0016a8c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a32:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a39:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a40:	83 e1 7f             	and    ecx,0x7f
c0016a43:	83 e0 7f             	and    eax,0x7f
c0016a46:	01 c1                	add    ecx,eax
c0016a48:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a4f:	83 e0 7f             	and    eax,0x7f
c0016a52:	01 c1                	add    ecx,eax
c0016a54:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a5b:	83 e0 7f             	and    eax,0x7f
c0016a5e:	00 c1                	add    cl,al
c0016a60:	74 41                	je     c0016aa3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a62:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a68:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a6e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a74:	83 ec 10             	sub    esp,0x10
c0016a77:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a7b:	89 f7                	mov    edi,esi
c0016a7d:	c1 e0 0a             	shl    eax,0xa
c0016a80:	c1 ff 1f             	sar    edi,0x1f
c0016a83:	57                   	push   edi
c0016a84:	56                   	push   esi
c0016a85:	52                   	push   edx
c0016a86:	50                   	push   eax
c0016a87:	e8 80 ff 00 00       	call   c0026a0c <__udivdi3>
c0016a8c:	83 c4 14             	add    esp,0x14
c0016a8f:	52                   	push   edx
c0016a90:	50                   	push   eax
c0016a91:	6a 00                	push   0x0
c0016a93:	6a 00                	push   0x0
c0016a95:	53                   	push   ebx
c0016a96:	e8 3f fe ff ff       	call   c00168da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a9b:	83 c4 20             	add    esp,0x20
c0016a9e:	e9 79 01 00 00       	jmp    c0016c1c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016aa3:	89 f0                	mov    eax,esi
c0016aa5:	31 f6                	xor    esi,esi
c0016aa7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016aae:	75 02                	jne    c0016ab2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016ab0:	89 f1                	mov    ecx,esi
c0016ab2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016ab9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016ac0:	c1 e2 08             	shl    edx,0x8
c0016ac3:	c1 e7 10             	shl    edi,0x10
c0016ac6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016ace:	09 fa                	or     edx,edi
c0016ad0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016ad8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016adf:	83 c0 10             	add    eax,0x10
c0016ae2:	09 fa                	or     edx,edi
c0016ae4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016aeb:	c1 e7 18             	shl    edi,0x18
c0016aee:	09 fa                	or     edx,edi
c0016af0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016af7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016afb:	c1 e7 10             	shl    edi,0x10
c0016afe:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b05:	c1 e2 08             	shl    edx,0x8
c0016b08:	09 fa                	or     edx,edi
c0016b0a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b11:	09 fa                	or     edx,edi
c0016b13:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b1a:	c1 e7 18             	shl    edi,0x18
c0016b1d:	09 fa                	or     edx,edi
c0016b1f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b23:	46                   	inc    esi
c0016b24:	83 fe 04             	cmp    esi,0x4
c0016b27:	0f 85 7a ff ff ff    	jne    c0016aa7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b31:	83 f0 01             	xor    eax,0x1
c0016b34:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b38:	75 57                	jne    c0016b91 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b3e:	83 f0 01             	xor    eax,0x1
c0016b41:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b45:	75 4a                	jne    c0016b91 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b47:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b4b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b53:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b5b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b61:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b67:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b6d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b71:	89 f7                	mov    edi,esi
c0016b73:	c1 e0 0a             	shl    eax,0xa
c0016b76:	c1 ff 1f             	sar    edi,0x1f
c0016b79:	57                   	push   edi
c0016b7a:	56                   	push   esi
c0016b7b:	52                   	push   edx
c0016b7c:	50                   	push   eax
c0016b7d:	e8 8a fe 00 00       	call   c0026a0c <__udivdi3>
c0016b82:	83 c4 10             	add    esp,0x10
c0016b85:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b89:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b8d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016b91:	84 c9                	test   cl,cl
c0016b93:	74 53                	je     c0016be8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016b95:	0f b6 c9             	movzx  ecx,cl
c0016b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016ba0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ba4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016ba8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bb0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016bb4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016bb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016bbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016bc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bc4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bc8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016bcc:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016bd0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016bd4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016bd8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bdc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016be0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016be4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016be8:	31 ed                	xor    ebp,ebp
c0016bea:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016bee:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016bf2:	89 f8                	mov    eax,edi
c0016bf4:	09 f0                	or     eax,esi
c0016bf6:	74 1e                	je     c0016c16 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016bf8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016bfc:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c00:	89 d1                	mov    ecx,edx
c0016c02:	09 c1                	or     ecx,eax
c0016c04:	74 10                	je     c0016c16 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c06:	83 ec 0c             	sub    esp,0xc
c0016c09:	57                   	push   edi
c0016c0a:	56                   	push   esi
c0016c0b:	52                   	push   edx
c0016c0c:	50                   	push   eax
c0016c0d:	53                   	push   ebx
c0016c0e:	e8 c7 fc ff ff       	call   c00168da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c13:	83 c4 20             	add    esp,0x20
c0016c16:	45                   	inc    ebp
c0016c17:	83 fd 04             	cmp    ebp,0x4
c0016c1a:	75 ce                	jne    c0016bea <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c1c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c22:	5b                   	pop    ebx
c0016c23:	5e                   	pop    esi
c0016c24:	5f                   	pop    edi
c0016c25:	5d                   	pop    ebp
c0016c26:	c3                   	ret    
c0016c27:	90                   	nop

c0016c28 <Serial::Serial(char const*)>:
c0016c28:	83 ec 0c             	sub    esp,0xc
c0016c2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c2f:	83 ec 08             	sub    esp,0x8
c0016c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c36:	50                   	push   eax
c0016c37:	e8 48 d9 ff ff       	call   c0014584 <Device::Device(char const*)>
c0016c3c:	83 c4 10             	add    esp,0x10
c0016c3f:	ba 40 b4 02 c0       	mov    edx,0xc002b440
c0016c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c48:	89 10                	mov    DWORD PTR [eax],edx
c0016c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c4e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c58:	90                   	nop
c0016c59:	83 c4 0c             	add    esp,0xc
c0016c5c:	c3                   	ret    
c0016c5d:	90                   	nop

c0016c5e <Serial::~Serial()>:
c0016c5e:	83 ec 0c             	sub    esp,0xc
c0016c61:	ba 40 b4 02 c0       	mov    edx,0xc002b440
c0016c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c6a:	89 10                	mov    DWORD PTR [eax],edx
c0016c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c70:	83 ec 0c             	sub    esp,0xc
c0016c73:	50                   	push   eax
c0016c74:	e8 ed d5 ff ff       	call   c0014266 <Device::~Device()>
c0016c79:	83 c4 10             	add    esp,0x10
c0016c7c:	90                   	nop
c0016c7d:	83 c4 0c             	add    esp,0xc
c0016c80:	c3                   	ret    
c0016c81:	90                   	nop

c0016c82 <Serial::~Serial()>:
c0016c82:	83 ec 0c             	sub    esp,0xc
c0016c85:	83 ec 0c             	sub    esp,0xc
c0016c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c8c:	e8 cd ff ff ff       	call   c0016c5e <Serial::~Serial()>
c0016c91:	83 c4 10             	add    esp,0x10
c0016c94:	83 ec 08             	sub    esp,0x8
c0016c97:	68 58 01 00 00       	push   0x158
c0016c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ca0:	e8 e9 c1 ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0016ca5:	83 c4 10             	add    esp,0x10
c0016ca8:	83 c4 0c             	add    esp,0xc
c0016cab:	c3                   	ret    

c0016cac <Timer::Timer(char const*)>:
c0016cac:	83 ec 0c             	sub    esp,0xc
c0016caf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb3:	83 ec 08             	sub    esp,0x8
c0016cb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cba:	50                   	push   eax
c0016cbb:	e8 c4 d8 ff ff       	call   c0014584 <Device::Device(char const*)>
c0016cc0:	83 c4 10             	add    esp,0x10
c0016cc3:	ba 84 b4 02 c0       	mov    edx,0xc002b484
c0016cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ccc:	89 10                	mov    DWORD PTR [eax],edx
c0016cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd2:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016cdc:	90                   	nop
c0016cdd:	83 c4 0c             	add    esp,0xc
c0016ce0:	c3                   	ret    
c0016ce1:	90                   	nop

c0016ce2 <Timer::~Timer()>:
c0016ce2:	83 ec 0c             	sub    esp,0xc
c0016ce5:	ba 84 b4 02 c0       	mov    edx,0xc002b484
c0016cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cee:	89 10                	mov    DWORD PTR [eax],edx
c0016cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cf4:	83 ec 0c             	sub    esp,0xc
c0016cf7:	50                   	push   eax
c0016cf8:	e8 69 d5 ff ff       	call   c0014266 <Device::~Device()>
c0016cfd:	83 c4 10             	add    esp,0x10
c0016d00:	90                   	nop
c0016d01:	83 c4 0c             	add    esp,0xc
c0016d04:	c3                   	ret    
c0016d05:	90                   	nop

c0016d06 <Timer::~Timer()>:
c0016d06:	83 ec 0c             	sub    esp,0xc
c0016d09:	83 ec 0c             	sub    esp,0xc
c0016d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d10:	e8 cd ff ff ff       	call   c0016ce2 <Timer::~Timer()>
c0016d15:	83 c4 10             	add    esp,0x10
c0016d18:	83 ec 08             	sub    esp,0x8
c0016d1b:	68 5c 01 00 00       	push   0x15c
c0016d20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d24:	e8 65 c1 ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0016d29:	83 c4 10             	add    esp,0x10
c0016d2c:	83 c4 0c             	add    esp,0xc
c0016d2f:	c3                   	ret    

c0016d30 <Timer::read()>:
c0016d30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d34:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d3a:	c3                   	ret    

c0016d3b <timerHandler(unsigned long long)>:
c0016d3b:	55                   	push   ebp
c0016d3c:	57                   	push   edi
c0016d3d:	56                   	push   esi
c0016d3e:	53                   	push   ebx
c0016d3f:	83 ec 0c             	sub    esp,0xc
c0016d42:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d46:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d4a:	01 35 70 ec 02 c0    	add    DWORD PTR ds:0xc002ec70,esi
c0016d50:	11 3d 74 ec 02 c0    	adc    DWORD PTR ds:0xc002ec74,edi
c0016d56:	80 3d ed e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5ed,0x0
c0016d5d:	0f 84 07 01 00 00    	je     c0016e6a <timerHandler(unsigned long long)+0x12f>
c0016d63:	e8 f3 70 00 00       	call   c001de5b <lockStuff()>
c0016d68:	83 ec 0c             	sub    esp,0xc
c0016d6b:	68 3c 1b 03 c0       	push   0xc0031b3c
c0016d70:	e8 09 1d 01 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d75:	c7 04 24 3c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b3c
c0016d7c:	89 c3                	mov    ebx,eax
c0016d7e:	e8 03 1d 01 00       	call   c0028a86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d83:	83 c4 10             	add    esp,0x10
c0016d86:	84 c0                	test   al,al
c0016d88:	74 60                	je     c0016dea <timerHandler(unsigned long long)+0xaf>
c0016d8a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d90:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016d93:	85 c0                	test   eax,eax
c0016d95:	0f 85 91 00 00 00    	jne    c0016e2c <timerHandler(unsigned long long)+0xf1>
c0016d9b:	e9 be 00 00 00       	jmp    c0016e5e <timerHandler(unsigned long long)+0x123>
c0016da0:	83 ec 0c             	sub    esp,0xc
c0016da3:	55                   	push   ebp
c0016da4:	e8 a3 76 00 00       	call   c001e44c <unblockTask(ThreadControlBlock*)>
c0016da9:	83 c4 10             	add    esp,0x10
c0016dac:	39 eb                	cmp    ebx,ebp
c0016dae:	75 12                	jne    c0016dc2 <timerHandler(unsigned long long)+0x87>
c0016db0:	83 ec 0c             	sub    esp,0xc
c0016db3:	68 3c 1b 03 c0       	push   0xc0031b3c
c0016db8:	e8 c1 1c 01 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dbd:	89 c3                	mov    ebx,eax
c0016dbf:	83 c4 10             	add    esp,0x10
c0016dc2:	83 ec 0c             	sub    esp,0xc
c0016dc5:	68 3c 1b 03 c0       	push   0xc0031b3c
c0016dca:	e8 b7 1c 01 00       	call   c0028a86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016dcf:	83 c4 10             	add    esp,0x10
c0016dd2:	84 c0                	test   al,al
c0016dd4:	75 b4                	jne    c0016d8a <timerHandler(unsigned long long)+0x4f>
c0016dd6:	83 ec 0c             	sub    esp,0xc
c0016dd9:	68 3c 1b 03 c0       	push   0xc0031b3c
c0016dde:	e8 9b 1c 01 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016de3:	83 c4 10             	add    esp,0x10
c0016de6:	39 d8                	cmp    eax,ebx
c0016de8:	74 a0                	je     c0016d8a <timerHandler(unsigned long long)+0x4f>
c0016dea:	83 ec 0c             	sub    esp,0xc
c0016ded:	68 3c 1b 03 c0       	push   0xc0031b3c
c0016df2:	e8 87 1c 01 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016df7:	c7 04 24 3c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b3c
c0016dfe:	89 c5                	mov    ebp,eax
c0016e00:	e8 9d 1c 01 00       	call   c0028aa2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e05:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e08:	83 c4 10             	add    esp,0x10
c0016e0b:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e0e:	39 15 70 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec70,edx
c0016e14:	a1 74 ec 02 c0       	mov    eax,ds:0xc002ec74
c0016e19:	19 c8                	sbb    eax,ecx
c0016e1b:	73 83                	jae    c0016da0 <timerHandler(unsigned long long)+0x65>
c0016e1d:	50                   	push   eax
c0016e1e:	50                   	push   eax
c0016e1f:	55                   	push   ebp
c0016e20:	68 3c 1b 03 c0       	push   0xc0031b3c
c0016e25:	e8 26 1d 01 00       	call   c0028b50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e2a:	eb 93                	jmp    c0016dbf <timerHandler(unsigned long long)+0x84>
c0016e2c:	80 3d ec e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5ec,0x0
c0016e33:	74 29                	je     c0016e5e <timerHandler(unsigned long long)+0x123>
c0016e35:	39 c6                	cmp    esi,eax
c0016e37:	bb 00 00 00 00       	mov    ebx,0x0
c0016e3c:	19 df                	sbb    edi,ebx
c0016e3e:	72 19                	jb     c0016e59 <timerHandler(unsigned long long)+0x11e>
c0016e40:	e8 ef 6f 00 00       	call   c001de34 <lockScheduler()>
c0016e45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e4a:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e4d:	e8 1e 73 00 00       	call   c001e170 <schedule()>
c0016e52:	e8 df 6f 00 00       	call   c001de36 <unlockScheduler()>
c0016e57:	eb 05                	jmp    c0016e5e <timerHandler(unsigned long long)+0x123>
c0016e59:	29 f0                	sub    eax,esi
c0016e5b:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016e5e:	83 c4 0c             	add    esp,0xc
c0016e61:	5b                   	pop    ebx
c0016e62:	5e                   	pop    esi
c0016e63:	5f                   	pop    edi
c0016e64:	5d                   	pop    ebp
c0016e65:	e9 8b 73 00 00       	jmp    c001e1f5 <unlockStuff()>
c0016e6a:	83 c4 0c             	add    esp,0xc
c0016e6d:	5b                   	pop    ebx
c0016e6e:	5e                   	pop    esi
c0016e6f:	5f                   	pop    edi
c0016e70:	5d                   	pop    ebp
c0016e71:	c3                   	ret    

c0016e72 <setupTimer(int)>:
c0016e72:	57                   	push   edi
c0016e73:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0016e78:	56                   	push   esi
c0016e79:	53                   	push   ebx
c0016e7a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e7e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e84:	83 ec 0c             	sub    esp,0xc
c0016e87:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e8d:	e8 ee d7 ff ff       	call   c0014680 <Device::getName()>
c0016e92:	83 c4 10             	add    esp,0x10
c0016e95:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016e98:	0f 85 8d 00 00 00    	jne    c0016f2b <setupTimer(int)+0xb9>
c0016e9e:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0016ea3:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016eaa:	74 7f                	je     c0016f2b <setupTimer(int)+0xb9>
c0016eac:	83 ec 0c             	sub    esp,0xc
c0016eaf:	68 5c 01 00 00       	push   0x15c
c0016eb4:	e8 87 89 ff ff       	call   c000f840 <malloc>
c0016eb9:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ebc:	89 c3                	mov    ebx,eax
c0016ebe:	e8 2b f7 00 00       	call   c00265ee <PIT::PIT()>
c0016ec3:	59                   	pop    ecx
c0016ec4:	5f                   	pop    edi
c0016ec5:	53                   	push   ebx
c0016ec6:	ff 35 e8 e5 02 c0    	push   DWORD PTR ds:0xc002e5e8
c0016ecc:	e8 c3 d4 ff ff       	call   c0014394 <Device::addChild(Device*)>
c0016ed1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ed3:	6a 00                	push   0x0
c0016ed5:	6a 00                	push   0x0
c0016ed7:	56                   	push   esi
c0016ed8:	53                   	push   ebx
c0016ed9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016edc:	83 c4 14             	add    esp,0x14
c0016edf:	68 60 01 00 00       	push   0x160
c0016ee4:	e8 57 89 ff ff       	call   c000f840 <malloc>
c0016ee9:	89 04 24             	mov    DWORD PTR [esp],eax
c0016eec:	89 c7                	mov    edi,eax
c0016eee:	e8 ab f5 00 00       	call   c002649e <APICTimer::APICTimer()>
c0016ef3:	6a 00                	push   0x0
c0016ef5:	6a 00                	push   0x0
c0016ef7:	56                   	push   esi
c0016ef8:	57                   	push   edi
c0016ef9:	e8 a2 f4 00 00       	call   c00263a0 <APICTimer::open(int, int, void*)>
c0016efe:	83 c4 20             	add    esp,0x20
c0016f01:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f03:	6a 00                	push   0x0
c0016f05:	6a 00                	push   0x0
c0016f07:	6a 00                	push   0x0
c0016f09:	53                   	push   ebx
c0016f0a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f0d:	58                   	pop    eax
c0016f0e:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0016f13:	5a                   	pop    edx
c0016f14:	57                   	push   edi
c0016f15:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f1b:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f21:	e8 6e d4 ff ff       	call   c0014394 <Device::addChild(Device*)>
c0016f26:	83 c4 10             	add    esp,0x10
c0016f29:	eb 33                	jmp    c0016f5e <setupTimer(int)+0xec>
c0016f2b:	83 ec 0c             	sub    esp,0xc
c0016f2e:	68 5c 01 00 00       	push   0x15c
c0016f33:	e8 08 89 ff ff       	call   c000f840 <malloc>
c0016f38:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f3b:	89 c3                	mov    ebx,eax
c0016f3d:	e8 ac f6 00 00       	call   c00265ee <PIT::PIT()>
c0016f42:	58                   	pop    eax
c0016f43:	5a                   	pop    edx
c0016f44:	53                   	push   ebx
c0016f45:	ff 35 e8 e5 02 c0    	push   DWORD PTR ds:0xc002e5e8
c0016f4b:	e8 44 d4 ff ff       	call   c0014394 <Device::addChild(Device*)>
c0016f50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f52:	6a 00                	push   0x0
c0016f54:	6a 00                	push   0x0
c0016f56:	56                   	push   esi
c0016f57:	53                   	push   ebx
c0016f58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f5b:	83 c4 20             	add    esp,0x20
c0016f5e:	89 d8                	mov    eax,ebx
c0016f60:	5b                   	pop    ebx
c0016f61:	5e                   	pop    esi
c0016f62:	5f                   	pop    edi
c0016f63:	c3                   	ret    

c0016f64 <VCache::VCache(PhysicalDisk*)>:
c0016f64:	53                   	push   ebx
c0016f65:	83 ec 18             	sub    esp,0x18
c0016f68:	ba b4 b4 02 c0       	mov    edx,0xc002b4b4
c0016f6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f71:	89 10                	mov    DWORD PTR [eax],edx
c0016f73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f77:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016f7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f82:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016f89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f8d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016f94:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016f9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016fa6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016fad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fbc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016fc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016fcb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016fd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016fda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fde:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016fe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016fea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fee:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016ff5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016ffd:	83 ec 0c             	sub    esp,0xc
c0017000:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017004:	e8 37 88 ff ff       	call   c000f840 <malloc>
c0017009:	83 c4 10             	add    esp,0x10
c001700c:	89 c3                	mov    ebx,eax
c001700e:	83 ec 0c             	sub    esp,0xc
c0017011:	53                   	push   ebx
c0017012:	e8 3d 6f 00 00       	call   c001df54 <Mutex::Mutex()>
c0017017:	83 c4 10             	add    esp,0x10
c001701a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017021:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017025:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017029:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001702c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017030:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0017037:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001703b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017041:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017045:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017048:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001704c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0017052:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017058:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001705c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001705f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017062:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017066:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001706a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001706e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017074:	05 00 01 00 00       	add    eax,0x100
c0017079:	c1 e0 04             	shl    eax,0x4
c001707c:	83 ec 0c             	sub    esp,0xc
c001707f:	50                   	push   eax
c0017080:	e8 bb 87 ff ff       	call   c000f840 <malloc>
c0017085:	83 c4 10             	add    esp,0x10
c0017088:	89 c2                	mov    edx,eax
c001708a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001708e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017091:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017095:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001709c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00170a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170a8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170ae:	c1 e0 07             	shl    eax,0x7
c00170b1:	83 ec 0c             	sub    esp,0xc
c00170b4:	50                   	push   eax
c00170b5:	e8 86 87 ff ff       	call   c000f840 <malloc>
c00170ba:	83 c4 10             	add    esp,0x10
c00170bd:	89 c2                	mov    edx,eax
c00170bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00170c6:	90                   	nop
c00170c7:	83 c4 18             	add    esp,0x18
c00170ca:	5b                   	pop    ebx
c00170cb:	c3                   	ret    

c00170cc <VCache::invalidateReadBuffer()>:
c00170cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170d0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00170d6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170da:	c3                   	ret    
c00170db:	90                   	nop

c00170dc <VCache::writeWriteBuffer()>:
c00170dc:	53                   	push   ebx
c00170dd:	83 ec 14             	sub    esp,0x14
c00170e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00170e4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170e7:	8b 10                	mov    edx,DWORD PTR [eax]
c00170e9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00170ec:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00170ef:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00170f2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00170f5:	50                   	push   eax
c00170f6:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00170f9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017100:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017107:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001710b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017112:	83 c4 28             	add    esp,0x28
c0017115:	5b                   	pop    ebx
c0017116:	c3                   	ret    
c0017117:	90                   	nop

c0017118 <VCache::~VCache()>:
c0017118:	83 ec 0c             	sub    esp,0xc
c001711b:	ba b4 b4 02 c0       	mov    edx,0xc002b4b4
c0017120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017124:	89 10                	mov    DWORD PTR [eax],edx
c0017126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001712a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001712d:	84 c0                	test   al,al
c001712f:	74 0f                	je     c0017140 <VCache::~VCache()+0x28>
c0017131:	83 ec 0c             	sub    esp,0xc
c0017134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017138:	e8 9f ff ff ff       	call   c00170dc <VCache::writeWriteBuffer()>
c001713d:	83 c4 10             	add    esp,0x10
c0017140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017144:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017147:	83 ec 0c             	sub    esp,0xc
c001714a:	50                   	push   eax
c001714b:	e8 00 87 ff ff       	call   c000f850 <free>
c0017150:	83 c4 10             	add    esp,0x10
c0017153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017157:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001715a:	83 ec 0c             	sub    esp,0xc
c001715d:	50                   	push   eax
c001715e:	e8 ed 86 ff ff       	call   c000f850 <free>
c0017163:	83 c4 10             	add    esp,0x10
c0017166:	90                   	nop
c0017167:	83 c4 0c             	add    esp,0xc
c001716a:	c3                   	ret    
c001716b:	90                   	nop

c001716c <VCache::~VCache()>:
c001716c:	83 ec 0c             	sub    esp,0xc
c001716f:	83 ec 0c             	sub    esp,0xc
c0017172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017176:	e8 9d ff ff ff       	call   c0017118 <VCache::~VCache()>
c001717b:	83 c4 10             	add    esp,0x10
c001717e:	83 ec 08             	sub    esp,0x8
c0017181:	6a 44                	push   0x44
c0017183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017187:	e8 02 bd ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c001718c:	83 c4 10             	add    esp,0x10
c001718f:	83 c4 0c             	add    esp,0xc
c0017192:	c3                   	ret    
c0017193:	90                   	nop

c0017194 <VCache::write(unsigned long long, int, void*)>:
c0017194:	55                   	push   ebp
c0017195:	57                   	push   edi
c0017196:	56                   	push   esi
c0017197:	53                   	push   ebx
c0017198:	83 ec 28             	sub    esp,0x28
c001719b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001719f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00171a3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00171a7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00171ab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171ae:	e8 03 72 00 00       	call   c001e3b6 <Semaphore::acquire()>
c00171b3:	83 c4 10             	add    esp,0x10
c00171b6:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00171ba:	74 0c                	je     c00171c8 <VCache::write(unsigned long long, int, void*)+0x34>
c00171bc:	83 ec 0c             	sub    esp,0xc
c00171bf:	53                   	push   ebx
c00171c0:	e8 07 ff ff ff       	call   c00170cc <VCache::invalidateReadBuffer()>
c00171c5:	83 c4 10             	add    esp,0x10
c00171c8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00171cc:	74 66                	je     c0017234 <VCache::write(unsigned long long, int, void*)+0xa0>
c00171ce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171d1:	99                   	cdq    
c00171d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171d6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00171d9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00171dc:	89 c1                	mov    ecx,eax
c00171de:	89 d0                	mov    eax,edx
c00171e0:	31 f1                	xor    ecx,esi
c00171e2:	31 f8                	xor    eax,edi
c00171e4:	89 ca                	mov    edx,ecx
c00171e6:	09 c2                	or     edx,eax
c00171e8:	75 3e                	jne    c0017228 <VCache::write(unsigned long long, int, void*)+0x94>
c00171ea:	83 fd 01             	cmp    ebp,0x1
c00171ed:	75 39                	jne    c0017228 <VCache::write(unsigned long long, int, void*)+0x94>
c00171ef:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171f2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171f8:	51                   	push   ecx
c00171f9:	50                   	push   eax
c00171fa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171fe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017202:	0f af c8             	imul   ecx,eax
c0017205:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017208:	51                   	push   ecx
c0017209:	e8 36 95 fe ff       	call   c0000744 <memcpy>
c001720e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017211:	83 c4 10             	add    esp,0x10
c0017214:	40                   	inc    eax
c0017215:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017218:	83 c0 80             	add    eax,0xffffff80
c001721b:	75 57                	jne    c0017274 <VCache::write(unsigned long long, int, void*)+0xe0>
c001721d:	83 ec 0c             	sub    esp,0xc
c0017220:	53                   	push   ebx
c0017221:	e8 b6 fe ff ff       	call   c00170dc <VCache::writeWriteBuffer()>
c0017226:	eb 34                	jmp    c001725c <VCache::write(unsigned long long, int, void*)+0xc8>
c0017228:	83 ec 0c             	sub    esp,0xc
c001722b:	53                   	push   ebx
c001722c:	e8 ab fe ff ff       	call   c00170dc <VCache::writeWriteBuffer()>
c0017231:	83 c4 10             	add    esp,0x10
c0017234:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017237:	83 fd 7f             	cmp    ebp,0x7f
c001723a:	7f 25                	jg     c0017261 <VCache::write(unsigned long long, int, void*)+0xcd>
c001723c:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001723f:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017242:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0017245:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017249:	52                   	push   edx
c001724a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017250:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017254:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017257:	e8 e8 94 fe ff       	call   c0000744 <memcpy>
c001725c:	83 c4 10             	add    esp,0x10
c001725f:	eb 13                	jmp    c0017274 <VCache::write(unsigned long long, int, void*)+0xe0>
c0017261:	83 ec 0c             	sub    esp,0xc
c0017264:	8b 10                	mov    edx,DWORD PTR [eax]
c0017266:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001726a:	55                   	push   ebp
c001726b:	57                   	push   edi
c001726c:	56                   	push   esi
c001726d:	50                   	push   eax
c001726e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017271:	83 c4 20             	add    esp,0x20
c0017274:	83 ec 0c             	sub    esp,0xc
c0017277:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001727a:	e8 e5 76 00 00       	call   c001e964 <Semaphore::release()>
c001727f:	83 c4 2c             	add    esp,0x2c
c0017282:	31 c0                	xor    eax,eax
c0017284:	5b                   	pop    ebx
c0017285:	5e                   	pop    esi
c0017286:	5f                   	pop    edi
c0017287:	5d                   	pop    ebp
c0017288:	c3                   	ret    
c0017289:	90                   	nop

c001728a <VCache::read(unsigned long long, int, void*)>:
c001728a:	55                   	push   ebp
c001728b:	57                   	push   edi
c001728c:	56                   	push   esi
c001728d:	53                   	push   ebx
c001728e:	83 ec 28             	sub    esp,0x28
c0017291:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017295:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017299:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001729d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172a1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00172a5:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00172a9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00172ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172b0:	e8 01 71 00 00       	call   c001e3b6 <Semaphore::acquire()>
c00172b5:	83 c4 10             	add    esp,0x10
c00172b8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172bc:	74 0c                	je     c00172ca <VCache::read(unsigned long long, int, void*)+0x40>
c00172be:	83 ec 0c             	sub    esp,0xc
c00172c1:	53                   	push   ebx
c00172c2:	e8 15 fe ff ff       	call   c00170dc <VCache::writeWriteBuffer()>
c00172c7:	83 c4 10             	add    esp,0x10
c00172ca:	83 fe 01             	cmp    esi,0x1
c00172cd:	0f 85 80 00 00 00    	jne    c0017353 <VCache::read(unsigned long long, int, void*)+0xc9>
c00172d3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172d6:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00172dd:	75 74                	jne    c0017353 <VCache::read(unsigned long long, int, void*)+0xc9>
c00172df:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00172e2:	89 d1                	mov    ecx,edx
c00172e4:	f7 d9                	neg    ecx
c00172e6:	89 cf                	mov    edi,ecx
c00172e8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00172ec:	c1 ff 1f             	sar    edi,0x1f
c00172ef:	23 0c 24             	and    ecx,DWORD PTR [esp]
c00172f2:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00172f6:	89 ce                	mov    esi,ecx
c00172f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172fc:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017300:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017304:	89 cf                	mov    edi,ecx
c0017306:	74 0a                	je     c0017312 <VCache::read(unsigned long long, int, void*)+0x88>
c0017308:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001730b:	75 05                	jne    c0017312 <VCache::read(unsigned long long, int, void*)+0x88>
c001730d:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017310:	74 1c                	je     c001732e <VCache::read(unsigned long long, int, void*)+0xa4>
c0017312:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017316:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017319:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c001731c:	83 ec 0c             	sub    esp,0xc
c001731f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017321:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017324:	52                   	push   edx
c0017325:	57                   	push   edi
c0017326:	56                   	push   esi
c0017327:	50                   	push   eax
c0017328:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001732b:	83 c4 20             	add    esp,0x20
c001732e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017331:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017337:	50                   	push   eax
c0017338:	52                   	push   edx
c0017339:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001733c:	48                   	dec    eax
c001733d:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017341:	0f af c2             	imul   eax,edx
c0017344:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017347:	50                   	push   eax
c0017348:	55                   	push   ebp
c0017349:	e8 f6 93 fe ff       	call   c0000744 <memcpy>
c001734e:	83 c4 10             	add    esp,0x10
c0017351:	eb 21                	jmp    c0017374 <VCache::read(unsigned long long, int, void*)+0xea>
c0017353:	83 ec 0c             	sub    esp,0xc
c0017356:	53                   	push   ebx
c0017357:	e8 70 fd ff ff       	call   c00170cc <VCache::invalidateReadBuffer()>
c001735c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001735f:	8b 10                	mov    edx,DWORD PTR [eax]
c0017361:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017364:	56                   	push   esi
c0017365:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017369:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001736d:	50                   	push   eax
c001736e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017371:	83 c4 20             	add    esp,0x20
c0017374:	83 ec 0c             	sub    esp,0xc
c0017377:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001737a:	e8 e5 75 00 00       	call   c001e964 <Semaphore::release()>
c001737f:	83 c4 2c             	add    esp,0x2c
c0017382:	31 c0                	xor    eax,eax
c0017384:	5b                   	pop    ebx
c0017385:	5e                   	pop    esi
c0017386:	5f                   	pop    edi
c0017387:	5d                   	pop    ebp
c0017388:	c3                   	ret    
c0017389:	90                   	nop

c001738a <Video::putrect(int, int, int, int, unsigned int)>:
c001738a:	55                   	push   ebp
c001738b:	57                   	push   edi
c001738c:	56                   	push   esi
c001738d:	53                   	push   ebx
c001738e:	83 ec 1c             	sub    esp,0x1c
c0017391:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017395:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017399:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001739d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00173a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00173a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173a9:	01 df                	add    edi,ebx
c00173ab:	39 fb                	cmp    ebx,edi
c00173ad:	7d 1f                	jge    c00173ce <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00173af:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00173b3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00173b7:	7d 12                	jge    c00173cb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00173b9:	8b 16                	mov    edx,DWORD PTR [esi]
c00173bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00173bf:	53                   	push   ebx
c00173c0:	55                   	push   ebp
c00173c1:	45                   	inc    ebp
c00173c2:	56                   	push   esi
c00173c3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00173c6:	83 c4 10             	add    esp,0x10
c00173c9:	eb e8                	jmp    c00173b3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00173cb:	43                   	inc    ebx
c00173cc:	eb dd                	jmp    c00173ab <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00173ce:	83 c4 1c             	add    esp,0x1c
c00173d1:	5b                   	pop    ebx
c00173d2:	5e                   	pop    esi
c00173d3:	5f                   	pop    edi
c00173d4:	5d                   	pop    ebp
c00173d5:	c3                   	ret    

c00173d6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00173d6:	55                   	push   ebp
c00173d7:	57                   	push   edi
c00173d8:	31 ff                	xor    edi,edi
c00173da:	56                   	push   esi
c00173db:	53                   	push   ebx
c00173dc:	83 ec 1c             	sub    esp,0x1c
c00173df:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00173e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00173e7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00173ee:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00173f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173f7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00173fb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173ff:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017402:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017406:	01 f9                	add    ecx,edi
c0017408:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001740c:	7d 2f                	jge    c001743d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001740e:	31 f6                	xor    esi,esi
c0017410:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017414:	01 f2                	add    edx,esi
c0017416:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001741a:	7d 1a                	jge    c0017436 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001741c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001741f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017422:	46                   	inc    esi
c0017423:	51                   	push   ecx
c0017424:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017428:	52                   	push   edx
c0017429:	55                   	push   ebp
c001742a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001742d:	83 c4 10             	add    esp,0x10
c0017430:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017434:	eb da                	jmp    c0017410 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017436:	47                   	inc    edi
c0017437:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001743b:	eb c5                	jmp    c0017402 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001743d:	83 c4 1c             	add    esp,0x1c
c0017440:	5b                   	pop    ebx
c0017441:	5e                   	pop    esi
c0017442:	5f                   	pop    edi
c0017443:	5d                   	pop    ebp
c0017444:	c3                   	ret    
c0017445:	90                   	nop

c0017446 <Video::blit(unsigned int*, int, int, int, int)>:
c0017446:	55                   	push   ebp
c0017447:	57                   	push   edi
c0017448:	56                   	push   esi
c0017449:	53                   	push   ebx
c001744a:	83 ec 1c             	sub    esp,0x1c
c001744d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017451:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017455:	85 c0                	test   eax,eax
c0017457:	79 02                	jns    c001745b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017459:	31 c0                	xor    eax,eax
c001745b:	c1 e0 02             	shl    eax,0x2
c001745e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017462:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017466:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001746a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001746e:	39 d8                	cmp    eax,ebx
c0017470:	7e 49                	jle    c00174bb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017472:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017478:	7c 41                	jl     c00174bb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001747a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001747e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017482:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017486:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001748a:	39 f9                	cmp    ecx,edi
c001748c:	7e 22                	jle    c00174b0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001748e:	83 c5 04             	add    ebp,0x4
c0017491:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017497:	7c 14                	jl     c00174ad <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017499:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001749b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001749e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174a2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174a6:	56                   	push   esi
c00174a7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00174aa:	83 c4 10             	add    esp,0x10
c00174ad:	47                   	inc    edi
c00174ae:	eb d2                	jmp    c0017482 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00174b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174b4:	43                   	inc    ebx
c00174b5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00174b9:	eb ab                	jmp    c0017466 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00174bb:	83 c4 1c             	add    esp,0x1c
c00174be:	5b                   	pop    ebx
c00174bf:	5e                   	pop    esi
c00174c0:	5f                   	pop    edi
c00174c1:	5d                   	pop    ebp
c00174c2:	c3                   	ret    
c00174c3:	90                   	nop

c00174c4 <Video::clearScreen(unsigned int)>:
c00174c4:	57                   	push   edi
c00174c5:	56                   	push   esi
c00174c6:	53                   	push   ebx
c00174c7:	31 db                	xor    ebx,ebx
c00174c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00174cd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174d3:	7e 1f                	jle    c00174f4 <Video::clearScreen(unsigned int)+0x30>
c00174d5:	31 ff                	xor    edi,edi
c00174d7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174dd:	7e 12                	jle    c00174f1 <Video::clearScreen(unsigned int)+0x2d>
c00174df:	8b 06                	mov    eax,DWORD PTR [esi]
c00174e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174e5:	53                   	push   ebx
c00174e6:	57                   	push   edi
c00174e7:	47                   	inc    edi
c00174e8:	56                   	push   esi
c00174e9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174ec:	83 c4 10             	add    esp,0x10
c00174ef:	eb e6                	jmp    c00174d7 <Video::clearScreen(unsigned int)+0x13>
c00174f1:	43                   	inc    ebx
c00174f2:	eb d9                	jmp    c00174cd <Video::clearScreen(unsigned int)+0x9>
c00174f4:	5b                   	pop    ebx
c00174f5:	5e                   	pop    esi
c00174f6:	5f                   	pop    edi
c00174f7:	c3                   	ret    

c00174f8 <Video::putpixel(int, int, unsigned int)>:
c00174f8:	c7 44 24 04 bc b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b4bc
c0017500:	e9 0a 31 00 00       	jmp    c001a60f <Krnl::panic(char const*)>
c0017505:	90                   	nop

c0017506 <Video::Video(char const*)>:
c0017506:	83 ec 0c             	sub    esp,0xc
c0017509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001750d:	83 ec 08             	sub    esp,0x8
c0017510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017514:	50                   	push   eax
c0017515:	e8 6a d0 ff ff       	call   c0014584 <Device::Device(char const*)>
c001751a:	83 c4 10             	add    esp,0x10
c001751d:	ba 40 b5 02 c0       	mov    edx,0xc002b540
c0017522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017526:	89 10                	mov    DWORD PTR [eax],edx
c0017528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001752c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017536:	90                   	nop
c0017537:	83 c4 0c             	add    esp,0xc
c001753a:	c3                   	ret    
c001753b:	90                   	nop

c001753c <Video::~Video()>:
c001753c:	83 ec 0c             	sub    esp,0xc
c001753f:	ba 40 b5 02 c0       	mov    edx,0xc002b540
c0017544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017548:	89 10                	mov    DWORD PTR [eax],edx
c001754a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001754e:	83 ec 0c             	sub    esp,0xc
c0017551:	50                   	push   eax
c0017552:	e8 0f cd ff ff       	call   c0014266 <Device::~Device()>
c0017557:	83 c4 10             	add    esp,0x10
c001755a:	90                   	nop
c001755b:	83 c4 0c             	add    esp,0xc
c001755e:	c3                   	ret    
c001755f:	90                   	nop

c0017560 <Video::~Video()>:
c0017560:	83 ec 0c             	sub    esp,0xc
c0017563:	83 ec 0c             	sub    esp,0xc
c0017566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001756a:	e8 cd ff ff ff       	call   c001753c <Video::~Video()>
c001756f:	83 c4 10             	add    esp,0x10
c0017572:	83 ec 08             	sub    esp,0x8
c0017575:	68 64 01 00 00       	push   0x164
c001757a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001757e:	e8 0b b9 ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0017583:	83 c4 10             	add    esp,0x10
c0017586:	83 c4 0c             	add    esp,0xc
c0017589:	c3                   	ret    

c001758a <Video::isMonochrome()>:
c001758a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001758e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017594:	c3                   	ret    
c0017595:	90                   	nop

c0017596 <Video::getWidth()>:
c0017596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001759a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00175a0:	c3                   	ret    
c00175a1:	90                   	nop

c00175a2 <Video::getHeight()>:
c00175a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175a6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00175ac:	c3                   	ret    
c00175ad:	90                   	nop

c00175ae <Video::drawCursor(int, int, unsigned char*, int)>:
c00175ae:	55                   	push   ebp
c00175af:	57                   	push   edi
c00175b0:	56                   	push   esi
c00175b1:	53                   	push   ebx
c00175b2:	83 ec 2c             	sub    esp,0x2c
c00175b5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00175bd:	83 f8 01             	cmp    eax,0x1
c00175c0:	19 c9                	sbb    ecx,ecx
c00175c2:	31 db                	xor    ebx,ebx
c00175c4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00175c8:	89 cd                	mov    ebp,ecx
c00175ca:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00175d2:	f7 d5                	not    ebp
c00175d4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00175da:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00175de:	01 d8                	add    eax,ebx
c00175e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175e4:	56                   	push   esi
c00175e5:	e8 b8 ff ff ff       	call   c00175a2 <Video::getHeight()>
c00175ea:	59                   	pop    ecx
c00175eb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00175ef:	7e 70                	jle    c0017661 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00175f1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175f5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00175f9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00175fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017600:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017604:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001760b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001760f:	89 f8                	mov    eax,edi
c0017611:	83 c0 20             	add    eax,0x20
c0017614:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017618:	56                   	push   esi
c0017619:	e8 78 ff ff ff       	call   c0017596 <Video::getWidth()>
c001761e:	5a                   	pop    edx
c001761f:	39 c7                	cmp    edi,eax
c0017621:	7d 34                	jge    c0017657 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017623:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017628:	74 05                	je     c001762f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001762a:	8b 06                	mov    eax,DWORD PTR [esi]
c001762c:	55                   	push   ebp
c001762d:	eb 0d                	jmp    c001763c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001762f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017634:	74 12                	je     c0017648 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017636:	8b 06                	mov    eax,DWORD PTR [esi]
c0017638:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001763c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017640:	57                   	push   edi
c0017641:	56                   	push   esi
c0017642:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017645:	83 c4 10             	add    esp,0x10
c0017648:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001764c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017650:	47                   	inc    edi
c0017651:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017655:	75 c1                	jne    c0017618 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017657:	43                   	inc    ebx
c0017658:	83 fb 20             	cmp    ebx,0x20
c001765b:	0f 85 79 ff ff ff    	jne    c00175da <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017661:	83 c4 2c             	add    esp,0x2c
c0017664:	5b                   	pop    ebx
c0017665:	5e                   	pop    esi
c0017666:	5f                   	pop    edi
c0017667:	5d                   	pop    ebp
c0017668:	c3                   	ret    
c0017669:	90                   	nop

c001766a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001766a:	55                   	push   ebp
c001766b:	57                   	push   edi
c001766c:	56                   	push   esi
c001766d:	53                   	push   ebx
c001766e:	83 ec 28             	sub    esp,0x28
c0017671:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017675:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017679:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c001767d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017681:	c1 e7 08             	shl    edi,0x8
c0017684:	01 c7                	add    edi,eax
c0017686:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001768a:	c1 e0 08             	shl    eax,0x8
c001768d:	01 d0                	add    eax,edx
c001768f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017693:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017697:	0f af c7             	imul   eax,edi
c001769a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00176a1:	50                   	push   eax
c00176a2:	e8 99 81 ff ff       	call   c000f840 <malloc>
c00176a7:	83 c4 10             	add    esp,0x10
c00176aa:	89 c5                	mov    ebp,eax
c00176ac:	85 c0                	test   eax,eax
c00176ae:	75 15                	jne    c00176c5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00176b0:	83 ec 0c             	sub    esp,0xc
c00176b3:	68 dd b4 02 c0       	push   0xc002b4dd
c00176b8:	e8 b1 b8 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00176bd:	83 c4 10             	add    esp,0x10
c00176c0:	e9 1c 01 00 00       	jmp    c00177e1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00176c5:	be 12 00 00 00       	mov    esi,0x12
c00176ca:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176ce:	74 11                	je     c00176e1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00176d0:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00176d4:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00176d8:	c1 fe 03             	sar    esi,0x3
c00176db:	0f af f0             	imul   esi,eax
c00176de:	83 c6 12             	add    esi,0x12
c00176e1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00176e5:	74 04                	je     c00176eb <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00176e7:	85 ff                	test   edi,edi
c00176e9:	75 12                	jne    c00176fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00176eb:	83 ec 0c             	sub    esp,0xc
c00176ee:	68 f4 b4 02 c0       	push   0xc002b4f4
c00176f3:	e8 76 b8 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00176f8:	e9 ce 00 00 00       	jmp    c00177cb <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00176fd:	52                   	push   edx
c00176fe:	52                   	push   edx
c00176ff:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017703:	50                   	push   eax
c0017704:	68 09 b5 02 c0       	push   0xc002b509
c0017709:	e8 60 b8 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001770e:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017712:	83 c4 10             	add    esp,0x10
c0017715:	80 fa 02             	cmp    dl,0x2
c0017718:	0f 85 98 00 00 00    	jne    c00177b6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001771e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017723:	75 10                	jne    c0017735 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017725:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017729:	75 0a                	jne    c0017735 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001772b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001772e:	83 e8 18             	sub    eax,0x18
c0017731:	a8 f7                	test   al,0xf7
c0017733:	74 0a                	je     c001773f <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017735:	83 ec 0c             	sub    esp,0xc
c0017738:	68 16 b5 02 c0       	push   0xc002b516
c001773d:	eb 7f                	jmp    c00177be <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c001773f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017747:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001774f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017753:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001775b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001775f:	75 0c                	jne    c001776d <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017761:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017766:	c1 e0 18             	shl    eax,0x18
c0017769:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001776d:	41                   	inc    ecx
c001776e:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017773:	c1 e2 10             	shl    edx,0x10
c0017776:	89 d0                	mov    eax,edx
c0017778:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c001777d:	c1 e2 08             	shl    edx,0x8
c0017780:	09 c2                	or     edx,eax
c0017782:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017786:	09 c2                	or     edx,eax
c0017788:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c001778c:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017790:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017794:	c1 f8 03             	sar    eax,0x3
c0017797:	01 c6                	add    esi,eax
c0017799:	89 c8                	mov    eax,ecx
c001779b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001779f:	39 c7                	cmp    edi,eax
c00177a1:	7f b0                	jg     c0017753 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00177a3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00177a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177ab:	39 14 24             	cmp    DWORD PTR [esp],edx
c00177ae:	7e 22                	jle    c00177d2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00177b0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00177b4:	eb 99                	jmp    c001774f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00177b6:	50                   	push   eax
c00177b7:	50                   	push   eax
c00177b8:	52                   	push   edx
c00177b9:	68 24 b5 02 c0       	push   0xc002b524
c00177be:	e8 ab b7 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00177c3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00177c6:	e8 85 80 ff ff       	call   c000f850 <free>
c00177cb:	83 c4 10             	add    esp,0x10
c00177ce:	31 ed                	xor    ebp,ebp
c00177d0:	eb 0f                	jmp    c00177e1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177d2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177d6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00177d9:	89 38                	mov    DWORD PTR [eax],edi
c00177db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177df:	89 08                	mov    DWORD PTR [eax],ecx
c00177e1:	83 c4 1c             	add    esp,0x1c
c00177e4:	89 e8                	mov    eax,ebp
c00177e6:	5b                   	pop    ebx
c00177e7:	5e                   	pop    esi
c00177e8:	5f                   	pop    edi
c00177e9:	5d                   	pop    ebp
c00177ea:	c3                   	ret    
c00177eb:	90                   	nop

c00177ec <Video::putTGA(int, int, unsigned char*, int)>:
c00177ec:	55                   	push   ebp
c00177ed:	57                   	push   edi
c00177ee:	56                   	push   esi
c00177ef:	53                   	push   ebx
c00177f0:	83 ec 28             	sub    esp,0x28
c00177f3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00177f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177fb:	50                   	push   eax
c00177fc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017800:	50                   	push   eax
c0017801:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017805:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017809:	56                   	push   esi
c001780a:	e8 5b fe ff ff       	call   c001766a <Video::tgaParse(unsigned char*, int, int*, int*)>
c001780f:	83 c4 20             	add    esp,0x20
c0017812:	85 c0                	test   eax,eax
c0017814:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017818:	74 35                	je     c001784f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001781a:	89 c7                	mov    edi,eax
c001781c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017820:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017824:	39 d8                	cmp    eax,ebx
c0017826:	7e 27                	jle    c001784f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017828:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001782c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017830:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017834:	39 e8                	cmp    eax,ebp
c0017836:	7e 14                	jle    c001784c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017838:	8b 06                	mov    eax,DWORD PTR [esi]
c001783a:	83 c7 04             	add    edi,0x4
c001783d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017840:	53                   	push   ebx
c0017841:	55                   	push   ebp
c0017842:	45                   	inc    ebp
c0017843:	56                   	push   esi
c0017844:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017847:	83 c4 10             	add    esp,0x10
c001784a:	eb e0                	jmp    c001782c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001784c:	43                   	inc    ebx
c001784d:	eb cd                	jmp    c001781c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001784f:	83 c4 1c             	add    esp,0x1c
c0017852:	5b                   	pop    ebx
c0017853:	5e                   	pop    esi
c0017854:	5f                   	pop    edi
c0017855:	5d                   	pop    ebp
c0017856:	c3                   	ret    
c0017857:	90                   	nop

c0017858 <ACPI::close(int, int, void*)>:
c0017858:	83 ec 1c             	sub    esp,0x1c
c001785b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017863:	74 0a                	je     c001786f <ACPI::close(int, int, void*)+0x17>
c0017865:	b8 00 00 00 00       	mov    eax,0x0
c001786a:	e9 9a 00 00 00       	jmp    c0017909 <ACPI::close(int, int, void*)+0xb1>
c001786f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017874:	75 37                	jne    c00178ad <ACPI::close(int, int, void*)+0x55>
c0017876:	83 ec 0c             	sub    esp,0xc
c0017879:	68 80 b5 02 c0       	push   0xc002b580
c001787e:	e8 eb b6 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0017883:	83 c4 10             	add    esp,0x10
c0017886:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001788b:	85 c0                	test   eax,eax
c001788d:	74 07                	je     c0017896 <ACPI::close(int, int, void*)+0x3e>
c001788f:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c0017894:	ff d0                	call   eax
c0017896:	83 ec 0c             	sub    esp,0xc
c0017899:	68 a4 b6 02 c0       	push   0xc002b6a4
c001789e:	e8 6c 2d 00 00       	call   c001a60f <Krnl::panic(char const*)>
c00178a3:	83 c4 10             	add    esp,0x10
c00178a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178ab:	eb 5c                	jmp    c0017909 <ACPI::close(int, int, void*)+0xb1>
c00178ad:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00178b2:	75 50                	jne    c0017904 <ACPI::close(int, int, void*)+0xac>
c00178b4:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c00178b9:	85 c0                	test   eax,eax
c00178bb:	74 07                	je     c00178c4 <ACPI::close(int, int, void*)+0x6c>
c00178bd:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c00178c2:	ff d0                	call   eax
c00178c4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00178c9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00178ce:	83 e0 02             	and    eax,0x2
c00178d1:	74 1c                	je     c00178ef <ACPI::close(int, int, void*)+0x97>
c00178d3:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00178da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178de:	89 c2                	mov    edx,eax
c00178e0:	ec                   	in     al,dx
c00178e1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00178e5:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00178e9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00178ed:	eb da                	jmp    c00178c9 <ACPI::close(int, int, void*)+0x71>
c00178ef:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00178f6:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00178fb:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00178ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017903:	ee                   	out    dx,al
c0017904:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017909:	83 c4 1c             	add    esp,0x1c
c001790c:	c3                   	ret    

c001790d <findRSDP()>:
c001790d:	83 ec 1c             	sub    esp,0x1c
c0017910:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0017915:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001791b:	83 e0 04             	and    eax,0x4
c001791e:	84 c0                	test   al,al
c0017920:	75 07                	jne    c0017929 <findRSDP()+0x1c>
c0017922:	b8 00 00 00 00       	mov    eax,0x0
c0017927:	eb 6a                	jmp    c0017993 <findRSDP()+0x86>
c0017929:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c001792e:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017933:	7f 1b                	jg     c0017950 <findRSDP()+0x43>
c0017935:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001793a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017940:	83 e2 fb             	and    edx,0xfffffffb
c0017943:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017949:	b8 00 00 00 00       	mov    eax,0x0
c001794e:	eb 43                	jmp    c0017993 <findRSDP()+0x86>
c0017950:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017958:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017960:	77 2c                	ja     c001798e <findRSDP()+0x81>
c0017962:	83 ec 04             	sub    esp,0x4
c0017965:	6a 08                	push   0x8
c0017967:	68 8d b5 02 c0       	push   0xc002b58d
c001796c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017970:	e8 cb 8c fe ff       	call   c0000640 <memcmp>
c0017975:	83 c4 10             	add    esp,0x10
c0017978:	85 c0                	test   eax,eax
c001797a:	0f 94 c0             	sete   al
c001797d:	84 c0                	test   al,al
c001797f:	74 06                	je     c0017987 <findRSDP()+0x7a>
c0017981:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017985:	eb 0c                	jmp    c0017993 <findRSDP()+0x86>
c0017987:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001798c:	eb ca                	jmp    c0017958 <findRSDP()+0x4b>
c001798e:	b8 00 00 00 00       	mov    eax,0x0
c0017993:	83 c4 1c             	add    esp,0x1c
c0017996:	c3                   	ret    

c0017997 <loadACPITables(unsigned char*)>:
c0017997:	56                   	push   esi
c0017998:	53                   	push   ebx
c0017999:	83 ec 44             	sub    esp,0x44
c001799c:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00179a1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179a7:	83 e0 04             	and    eax,0x4
c00179aa:	84 c0                	test   al,al
c00179ac:	0f 84 05 02 00 00    	je     c0017bb7 <loadACPITables(unsigned char*)+0x220>
c00179b2:	a0 c0 0e 03 c0       	mov    al,ds:0xc0030ec0
c00179b7:	84 c0                	test   al,al
c00179b9:	74 75                	je     c0017a30 <loadACPITables(unsigned char*)+0x99>
c00179bb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179bf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00179c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179ca:	83 e8 24             	sub    eax,0x24
c00179cd:	c1 e8 03             	shr    eax,0x3
c00179d0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00179d4:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00179dc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179e0:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00179e4:	0f 8d b2 00 00 00    	jge    c0017a9c <loadACPITables(unsigned char*)+0x105>
c00179ea:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179ee:	83 c0 24             	add    eax,0x24
c00179f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00179f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179f9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a01:	c1 e0 03             	shl    eax,0x3
c0017a04:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017a08:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a0c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a11:	89 c1                	mov    ecx,eax
c0017a13:	a1 ac 0c 03 c0       	mov    eax,ds:0xc0030cac
c0017a18:	8d 50 01             	lea    edx,[eax+0x1]
c0017a1b:	89 15 ac 0c 03 c0    	mov    DWORD PTR ds:0xc0030cac,edx
c0017a21:	89 ca                	mov    edx,ecx
c0017a23:	89 14 c5 c4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf33c],edx
c0017a2a:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017a2e:	eb ac                	jmp    c00179dc <loadACPITables(unsigned char*)+0x45>
c0017a30:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a3f:	83 e8 24             	sub    eax,0x24
c0017a42:	c1 e8 02             	shr    eax,0x2
c0017a45:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a49:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017a51:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a55:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017a59:	7d 41                	jge    c0017a9c <loadACPITables(unsigned char*)+0x105>
c0017a5b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a5f:	83 c0 24             	add    eax,0x24
c0017a62:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a72:	c1 e0 02             	shl    eax,0x2
c0017a75:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017a79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a7d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017a7f:	a1 ac 0c 03 c0       	mov    eax,ds:0xc0030cac
c0017a84:	8d 50 01             	lea    edx,[eax+0x1]
c0017a87:	89 15 ac 0c 03 c0    	mov    DWORD PTR ds:0xc0030cac,edx
c0017a8d:	89 ca                	mov    edx,ecx
c0017a8f:	89 14 c5 c4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf33c],edx
c0017a96:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017a9a:	eb b5                	jmp    c0017a51 <loadACPITables(unsigned char*)+0xba>
c0017a9c:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017aa4:	a1 ac 0c 03 c0       	mov    eax,ds:0xc0030cac
c0017aa9:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017aad:	0f 8d 05 01 00 00    	jge    c0017bb8 <loadACPITables(unsigned char*)+0x221>
c0017ab3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ab7:	8b 04 c5 c4 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf33c]
c0017abe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ac6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ace:	25 ff 0f 00 00       	and    eax,0xfff
c0017ad3:	89 c6                	mov    esi,eax
c0017ad5:	e8 4c a3 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017ada:	89 c3                	mov    ebx,eax
c0017adc:	83 ec 0c             	sub    esp,0xc
c0017adf:	6a 01                	push   0x1
c0017ae1:	e8 a5 a0 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017ae6:	83 c4 10             	add    esp,0x10
c0017ae9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017aed:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017af3:	83 ec 0c             	sub    esp,0xc
c0017af6:	6a 01                	push   0x1
c0017af8:	6a 01                	push   0x1
c0017afa:	50                   	push   eax
c0017afb:	52                   	push   edx
c0017afc:	53                   	push   ebx
c0017afd:	e8 54 ab ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b02:	83 c4 20             	add    esp,0x20
c0017b05:	09 f0                	or     eax,esi
c0017b07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b0f:	c1 e0 03             	shl    eax,0x3
c0017b12:	05 c0 0c 03 c0       	add    eax,0xc0030cc0
c0017b17:	83 ec 04             	sub    esp,0x4
c0017b1a:	6a 04                	push   0x4
c0017b1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b20:	50                   	push   eax
c0017b21:	e8 1e 8c fe ff       	call   c0000744 <memcpy>
c0017b26:	83 c4 10             	add    esp,0x10
c0017b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b38:	05 00 10 00 00       	add    eax,0x1000
c0017b3d:	c1 e8 0c             	shr    eax,0xc
c0017b40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b48:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b4f:	25 ff 0f 00 00       	and    eax,0xfff
c0017b54:	89 c6                	mov    esi,eax
c0017b56:	e8 cb a2 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017b5b:	89 c3                	mov    ebx,eax
c0017b5d:	83 ec 0c             	sub    esp,0xc
c0017b60:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b64:	e8 22 a0 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017b69:	83 c4 10             	add    esp,0x10
c0017b6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b70:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b76:	83 ec 0c             	sub    esp,0xc
c0017b79:	6a 01                	push   0x1
c0017b7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b7f:	50                   	push   eax
c0017b80:	52                   	push   edx
c0017b81:	53                   	push   ebx
c0017b82:	e8 cf aa ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b87:	83 c4 20             	add    esp,0x20
c0017b8a:	09 f0                	or     eax,esi
c0017b8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b90:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017b93:	83 ec 0c             	sub    esp,0xc
c0017b96:	50                   	push   eax
c0017b97:	e8 5f a4 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0017b9c:	83 c4 10             	add    esp,0x10
c0017b9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ba3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017ba7:	89 14 c5 c4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf33c],edx
c0017bae:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017bb2:	e9 ed fe ff ff       	jmp    c0017aa4 <loadACPITables(unsigned char*)+0x10d>
c0017bb7:	90                   	nop
c0017bb8:	83 c4 44             	add    esp,0x44
c0017bbb:	5b                   	pop    ebx
c0017bbc:	5e                   	pop    esi
c0017bbd:	c3                   	ret    

c0017bbe <findRSDT(unsigned char*)>:
c0017bbe:	56                   	push   esi
c0017bbf:	53                   	push   ebx
c0017bc0:	83 ec 44             	sub    esp,0x44
c0017bc3:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0017bc8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017bce:	83 e0 04             	and    eax,0x4
c0017bd1:	84 c0                	test   al,al
c0017bd3:	75 0a                	jne    c0017bdf <findRSDT(unsigned char*)+0x21>
c0017bd5:	b8 00 00 00 00       	mov    eax,0x0
c0017bda:	e9 f7 00 00 00       	jmp    c0017cd6 <findRSDT(unsigned char*)+0x118>
c0017bdf:	83 ec 04             	sub    esp,0x4
c0017be2:	6a 24                	push   0x24
c0017be4:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017be8:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017bec:	50                   	push   eax
c0017bed:	e8 52 8b fe ff       	call   c0000744 <memcpy>
c0017bf2:	83 c4 10             	add    esp,0x10
c0017bf5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017bf9:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017bfd:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017c05:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c0d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c15:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c1d:	25 ff 0f 00 00       	and    eax,0xfff
c0017c22:	89 c6                	mov    esi,eax
c0017c24:	e8 fd a1 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017c29:	89 c3                	mov    ebx,eax
c0017c2b:	83 ec 0c             	sub    esp,0xc
c0017c2e:	6a 02                	push   0x2
c0017c30:	e8 56 9f ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017c35:	83 c4 10             	add    esp,0x10
c0017c38:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017c3c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c42:	83 ec 0c             	sub    esp,0xc
c0017c45:	6a 01                	push   0x1
c0017c47:	6a 02                	push   0x2
c0017c49:	50                   	push   eax
c0017c4a:	52                   	push   edx
c0017c4b:	53                   	push   ebx
c0017c4c:	e8 05 aa ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c51:	83 c4 20             	add    esp,0x20
c0017c54:	09 f0                	or     eax,esi
c0017c56:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c5e:	25 ff 0f 00 00       	and    eax,0xfff
c0017c63:	89 c6                	mov    esi,eax
c0017c65:	e8 bc a1 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017c6a:	89 c3                	mov    ebx,eax
c0017c6c:	83 ec 0c             	sub    esp,0xc
c0017c6f:	6a 02                	push   0x2
c0017c71:	e8 15 9f ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017c76:	83 c4 10             	add    esp,0x10
c0017c79:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c7d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c83:	83 ec 0c             	sub    esp,0xc
c0017c86:	6a 01                	push   0x1
c0017c88:	6a 02                	push   0x2
c0017c8a:	50                   	push   eax
c0017c8b:	52                   	push   edx
c0017c8c:	53                   	push   ebx
c0017c8d:	e8 c4 a9 ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c92:	83 c4 20             	add    esp,0x20
c0017c95:	09 f0                	or     eax,esi
c0017c97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c9b:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017ca0:	75 11                	jne    c0017cb3 <findRSDT(unsigned char*)+0xf5>
c0017ca2:	c6 05 c0 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030ec0,0x0
c0017ca9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cad:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cb1:	eb 1f                	jmp    c0017cd2 <findRSDT(unsigned char*)+0x114>
c0017cb3:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017cb8:	75 11                	jne    c0017ccb <findRSDT(unsigned char*)+0x10d>
c0017cba:	c6 05 c0 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ec0,0x1
c0017cc1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cc5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cc9:	eb 07                	jmp    c0017cd2 <findRSDT(unsigned char*)+0x114>
c0017ccb:	b8 00 00 00 00       	mov    eax,0x0
c0017cd0:	eb 04                	jmp    c0017cd6 <findRSDT(unsigned char*)+0x118>
c0017cd2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017cd6:	83 c4 44             	add    esp,0x44
c0017cd9:	5b                   	pop    ebx
c0017cda:	5e                   	pop    esi
c0017cdb:	c3                   	ret    

c0017cdc <findDataTable(unsigned char*, char*)>:
c0017cdc:	83 ec 1c             	sub    esp,0x1c
c0017cdf:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0017ce4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cea:	83 e0 04             	and    eax,0x4
c0017ced:	84 c0                	test   al,al
c0017cef:	75 07                	jne    c0017cf8 <findDataTable(unsigned char*, char*)+0x1c>
c0017cf1:	b8 00 00 00 00       	mov    eax,0x0
c0017cf6:	eb 7c                	jmp    c0017d74 <findDataTable(unsigned char*, char*)+0x98>
c0017cf8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017d00:	a1 ac 0c 03 c0       	mov    eax,ds:0xc0030cac
c0017d05:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017d09:	7d 3a                	jge    c0017d45 <findDataTable(unsigned char*, char*)+0x69>
c0017d0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d0f:	c1 e0 03             	shl    eax,0x3
c0017d12:	05 c0 0c 03 c0       	add    eax,0xc0030cc0
c0017d17:	83 ec 04             	sub    esp,0x4
c0017d1a:	6a 04                	push   0x4
c0017d1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d20:	50                   	push   eax
c0017d21:	e8 1a 89 fe ff       	call   c0000640 <memcmp>
c0017d26:	83 c4 10             	add    esp,0x10
c0017d29:	85 c0                	test   eax,eax
c0017d2b:	0f 94 c0             	sete   al
c0017d2e:	84 c0                	test   al,al
c0017d30:	74 0d                	je     c0017d3f <findDataTable(unsigned char*, char*)+0x63>
c0017d32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d36:	8b 04 c5 c4 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf33c]
c0017d3d:	eb 35                	jmp    c0017d74 <findDataTable(unsigned char*, char*)+0x98>
c0017d3f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017d43:	eb bb                	jmp    c0017d00 <findDataTable(unsigned char*, char*)+0x24>
c0017d45:	a0 c0 0e 03 c0       	mov    al,ds:0xc0030ec0
c0017d4a:	84 c0                	test   al,al
c0017d4c:	74 07                	je     c0017d55 <findDataTable(unsigned char*, char*)+0x79>
c0017d4e:	b8 58 00 00 00       	mov    eax,0x58
c0017d53:	eb 05                	jmp    c0017d5a <findDataTable(unsigned char*, char*)+0x7e>
c0017d55:	b8 52 00 00 00       	mov    eax,0x52
c0017d5a:	83 ec 04             	sub    esp,0x4
c0017d5d:	50                   	push   eax
c0017d5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d62:	68 c8 b6 02 c0       	push   0xc002b6c8
c0017d67:	e8 02 b2 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0017d6c:	83 c4 10             	add    esp,0x10
c0017d6f:	b8 00 00 00 00       	mov    eax,0x0
c0017d74:	83 c4 1c             	add    esp,0x1c
c0017d77:	c3                   	ret    

c0017d78 <scanMADT()>:
c0017d78:	53                   	push   ebx
c0017d79:	83 ec 38             	sub    esp,0x38
c0017d7c:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0017d81:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d87:	83 e0 04             	and    eax,0x4
c0017d8a:	84 c0                	test   al,al
c0017d8c:	0f 84 63 04 00 00    	je     c00181f5 <scanMADT()+0x47d>
c0017d92:	e8 76 fb ff ff       	call   c001790d <findRSDP()>
c0017d97:	a3 cc 0e 03 c0       	mov    ds:0xc0030ecc,eax
c0017d9c:	a1 cc 0e 03 c0       	mov    eax,ds:0xc0030ecc
c0017da1:	85 c0                	test   eax,eax
c0017da3:	75 19                	jne    c0017dbe <scanMADT()+0x46>
c0017da5:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0017daa:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017db0:	83 e2 fb             	and    edx,0xfffffffb
c0017db3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017db9:	e9 3b 04 00 00       	jmp    c00181f9 <scanMADT()+0x481>
c0017dbe:	a1 cc 0e 03 c0       	mov    eax,ds:0xc0030ecc
c0017dc3:	83 ec 0c             	sub    esp,0xc
c0017dc6:	50                   	push   eax
c0017dc7:	e8 f2 fd ff ff       	call   c0017bbe <findRSDT(unsigned char*)>
c0017dcc:	83 c4 10             	add    esp,0x10
c0017dcf:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c0017dd4:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0017dd9:	85 c0                	test   eax,eax
c0017ddb:	75 19                	jne    c0017df6 <scanMADT()+0x7e>
c0017ddd:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0017de2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017de8:	83 e2 fb             	and    edx,0xfffffffb
c0017deb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017df1:	e9 03 04 00 00       	jmp    c00181f9 <scanMADT()+0x481>
c0017df6:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0017dfb:	83 ec 0c             	sub    esp,0xc
c0017dfe:	50                   	push   eax
c0017dff:	e8 93 fb ff ff       	call   c0017997 <loadACPITables(unsigned char*)>
c0017e04:	83 c4 10             	add    esp,0x10
c0017e07:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0017e0c:	83 ec 08             	sub    esp,0x8
c0017e0f:	68 96 b5 02 c0       	push   0xc002b596
c0017e14:	50                   	push   eax
c0017e15:	e8 c2 fe ff ff       	call   c0017cdc <findDataTable(unsigned char*, char*)>
c0017e1a:	83 c4 10             	add    esp,0x10
c0017e1d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e21:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017e26:	75 19                	jne    c0017e41 <scanMADT()+0xc9>
c0017e28:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0017e2d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e33:	83 e2 fe             	and    edx,0xfffffffe
c0017e36:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e3c:	e9 b8 03 00 00       	jmp    c00181f9 <scanMADT()+0x481>
c0017e41:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017e49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e50:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017e54:	0f 87 9f 03 00 00    	ja     c00181f9 <scanMADT()+0x481>
c0017e5a:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017e62:	0f 87 91 03 00 00    	ja     c00181f9 <scanMADT()+0x481>
c0017e68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e6c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e74:	8d 50 01             	lea    edx,[eax+0x1]
c0017e77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e7b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e7f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e83:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017e87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e8b:	8d 50 01             	lea    edx,[eax+0x1]
c0017e8e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e92:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e96:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e9a:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017e9e:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017ea3:	0f 86 4f 03 00 00    	jbe    c00181f8 <scanMADT()+0x480>
c0017ea9:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017eae:	75 57                	jne    c0017f07 <scanMADT()+0x18f>
c0017eb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eb4:	8d 50 01             	lea    edx,[eax+0x1]
c0017eb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ebb:	8a 15 c0 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310c0
c0017ec1:	0f b6 d2             	movzx  edx,dl
c0017ec4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ec8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ecc:	88 82 00 11 03 c0    	mov    BYTE PTR [edx-0x3ffcef00],al
c0017ed2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ed6:	8d 50 01             	lea    edx,[eax+0x1]
c0017ed9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017edd:	8a 15 c0 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310c0
c0017ee3:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ee6:	88 0d c0 10 03 c0    	mov    BYTE PTR ds:0xc00310c0,cl
c0017eec:	0f b6 d2             	movzx  edx,dl
c0017eef:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ef3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ef7:	88 82 e0 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef20],al
c0017efd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f02:	e9 da 02 00 00       	jmp    c00181e1 <scanMADT()+0x469>
c0017f07:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017f0c:	0f 85 14 01 00 00    	jne    c0018026 <scanMADT()+0x2ae>
c0017f12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f16:	8d 50 01             	lea    edx,[eax+0x1]
c0017f19:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f1d:	8a 15 80 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f80
c0017f23:	0f b6 d2             	movzx  edx,dl
c0017f26:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f2a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f2e:	88 82 a0 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf060],al
c0017f34:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017f38:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f40:	01 d0                	add    eax,edx
c0017f42:	83 c0 2c             	add    eax,0x2c
c0017f45:	8a 00                	mov    al,BYTE PTR [eax]
c0017f47:	0f b6 d0             	movzx  edx,al
c0017f4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f4e:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f55:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f59:	0f b6 c0             	movzx  eax,al
c0017f5c:	c1 e0 08             	shl    eax,0x8
c0017f5f:	89 d1                	mov    ecx,edx
c0017f61:	09 c1                	or     ecx,eax
c0017f63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f67:	8d 50 02             	lea    edx,[eax+0x2]
c0017f6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f6e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f72:	0f b6 c0             	movzx  eax,al
c0017f75:	c1 e0 10             	shl    eax,0x10
c0017f78:	09 c1                	or     ecx,eax
c0017f7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f7e:	8d 50 03             	lea    edx,[eax+0x3]
c0017f81:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f85:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f89:	0f b6 c0             	movzx  eax,al
c0017f8c:	c1 e0 18             	shl    eax,0x18
c0017f8f:	09 c1                	or     ecx,eax
c0017f91:	89 ca                	mov    edx,ecx
c0017f93:	a0 80 0f 03 c0       	mov    al,ds:0xc0030f80
c0017f98:	0f b6 c0             	movzx  eax,al
c0017f9b:	89 14 85 c0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf040],edx
c0017fa2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fa7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017faf:	01 d0                	add    eax,edx
c0017fb1:	83 c0 2c             	add    eax,0x2c
c0017fb4:	8a 00                	mov    al,BYTE PTR [eax]
c0017fb6:	0f b6 d0             	movzx  edx,al
c0017fb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fbd:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fc0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fc4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fc8:	0f b6 c0             	movzx  eax,al
c0017fcb:	c1 e0 08             	shl    eax,0x8
c0017fce:	89 d1                	mov    ecx,edx
c0017fd0:	09 c1                	or     ecx,eax
c0017fd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fd6:	8d 50 02             	lea    edx,[eax+0x2]
c0017fd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fdd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fe1:	0f b6 c0             	movzx  eax,al
c0017fe4:	c1 e0 10             	shl    eax,0x10
c0017fe7:	09 c1                	or     ecx,eax
c0017fe9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fed:	8d 50 03             	lea    edx,[eax+0x3]
c0017ff0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ff4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ff8:	0f b6 c0             	movzx  eax,al
c0017ffb:	c1 e0 18             	shl    eax,0x18
c0017ffe:	09 c1                	or     ecx,eax
c0018000:	89 ca                	mov    edx,ecx
c0018002:	a0 80 0f 03 c0       	mov    al,ds:0xc0030f80
c0018007:	0f b6 c0             	movzx  eax,al
c001800a:	89 14 85 40 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefc0],edx
c0018011:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018016:	a0 80 0f 03 c0       	mov    al,ds:0xc0030f80
c001801b:	40                   	inc    eax
c001801c:	a2 80 0f 03 c0       	mov    ds:0xc0030f80,al
c0018021:	e9 bb 01 00 00       	jmp    c00181e1 <scanMADT()+0x469>
c0018026:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001802b:	0f 85 e9 00 00 00    	jne    c001811a <scanMADT()+0x3a2>
c0018031:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018035:	8d 50 01             	lea    edx,[eax+0x1]
c0018038:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001803c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018040:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018044:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018048:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001804c:	8d 50 01             	lea    edx,[eax+0x1]
c001804f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018053:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018057:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001805b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001805f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018063:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018067:	01 d0                	add    eax,edx
c0018069:	83 c0 2c             	add    eax,0x2c
c001806c:	8a 00                	mov    al,BYTE PTR [eax]
c001806e:	0f b6 d0             	movzx  edx,al
c0018071:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018075:	8d 48 01             	lea    ecx,[eax+0x1]
c0018078:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001807c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018080:	0f b6 c0             	movzx  eax,al
c0018083:	c1 e0 08             	shl    eax,0x8
c0018086:	89 d1                	mov    ecx,edx
c0018088:	09 c1                	or     ecx,eax
c001808a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001808e:	8d 50 02             	lea    edx,[eax+0x2]
c0018091:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018095:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018099:	0f b6 c0             	movzx  eax,al
c001809c:	c1 e0 10             	shl    eax,0x10
c001809f:	09 c1                	or     ecx,eax
c00180a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a5:	8d 50 03             	lea    edx,[eax+0x3]
c00180a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180ac:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180b0:	0f b6 c0             	movzx  eax,al
c00180b3:	c1 e0 18             	shl    eax,0x18
c00180b6:	09 c8                	or     eax,ecx
c00180b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00180bc:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180c9:	01 d0                	add    eax,edx
c00180cb:	83 c0 2c             	add    eax,0x2c
c00180ce:	8a 00                	mov    al,BYTE PTR [eax]
c00180d0:	0f b6 c0             	movzx  eax,al
c00180d3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00180d7:	8d 4a 01             	lea    ecx,[edx+0x1]
c00180da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180de:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00180e2:	0f b6 d2             	movzx  edx,dl
c00180e5:	c1 e2 08             	shl    edx,0x8
c00180e8:	09 d0                	or     eax,edx
c00180ea:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00180ef:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00180f4:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00180f9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180fd:	88 90 40 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd27c0],dl
c0018103:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018108:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001810d:	66 89 84 12 60 0f 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf0a0],ax
c0018115:	e9 c7 00 00 00       	jmp    c00181e1 <scanMADT()+0x469>
c001811a:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001811f:	0f 85 b0 00 00 00    	jne    c00181d5 <scanMADT()+0x45d>
c0018125:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018129:	8d 50 01             	lea    edx,[eax+0x1]
c001812c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018130:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018134:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018138:	0f b6 c0             	movzx  eax,al
c001813b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001813f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018143:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018147:	01 d0                	add    eax,edx
c0018149:	83 c0 2c             	add    eax,0x2c
c001814c:	8a 00                	mov    al,BYTE PTR [eax]
c001814e:	0f b6 d0             	movzx  edx,al
c0018151:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018155:	8d 48 01             	lea    ecx,[eax+0x1]
c0018158:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001815c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018160:	0f b6 c0             	movzx  eax,al
c0018163:	c1 e0 08             	shl    eax,0x8
c0018166:	09 d0                	or     eax,edx
c0018168:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001816c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018171:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018175:	8d 50 01             	lea    edx,[eax+0x1]
c0018178:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001817c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018180:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018184:	0f b6 c0             	movzx  eax,al
c0018187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001818b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001818f:	c1 e0 08             	shl    eax,0x8
c0018192:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018196:	89 c1                	mov    ecx,eax
c0018198:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001819c:	c1 e0 18             	shl    eax,0x18
c001819f:	89 c3                	mov    ebx,eax
c00181a1:	a1 d0 0e 03 c0       	mov    eax,ds:0xc0030ed0
c00181a6:	8d 50 01             	lea    edx,[eax+0x1]
c00181a9:	89 15 d0 0e 03 c0    	mov    DWORD PTR ds:0xc0030ed0,edx
c00181af:	09 d9                	or     ecx,ebx
c00181b1:	89 ca                	mov    edx,ecx
c00181b3:	89 14 85 e0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf120],edx
c00181ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00181be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00181c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181c6:	68 f8 b6 02 c0       	push   0xc002b6f8
c00181cb:	e8 9e ad ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00181d0:	83 c4 10             	add    esp,0x10
c00181d3:	eb 0c                	jmp    c00181e1 <scanMADT()+0x469>
c00181d5:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00181da:	75 05                	jne    c00181e1 <scanMADT()+0x469>
c00181dc:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00181e1:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00181e6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181ea:	01 d0                	add    eax,edx
c00181ec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00181f0:	e9 54 fc ff ff       	jmp    c0017e49 <scanMADT()+0xd1>
c00181f5:	90                   	nop
c00181f6:	eb 01                	jmp    c00181f9 <scanMADT()+0x481>
c00181f8:	90                   	nop
c00181f9:	83 c4 38             	add    esp,0x38
c00181fc:	5b                   	pop    ebx
c00181fd:	c3                   	ret    

c00181fe <ACPI::ACPI()>:
c00181fe:	83 ec 0c             	sub    esp,0xc
c0018201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018205:	83 ec 08             	sub    esp,0x8
c0018208:	68 9b b5 02 c0       	push   0xc002b59b
c001820d:	50                   	push   eax
c001820e:	e8 71 c3 ff ff       	call   c0014584 <Device::Device(char const*)>
c0018213:	83 c4 10             	add    esp,0x10
c0018216:	ba 6c b7 02 c0       	mov    edx,0xc002b76c
c001821b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821f:	89 10                	mov    DWORD PTR [eax],edx
c0018221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018225:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001822c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018230:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001823a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001823e:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001824c:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018257:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001825e:	e8 15 fb ff ff       	call   c0017d78 <scanMADT()>
c0018263:	90                   	nop
c0018264:	83 c4 0c             	add    esp,0xc
c0018267:	c3                   	ret    

c0018268 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018268:	83 ec 2c             	sub    esp,0x2c
c001826b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001826f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018273:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018277:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001827b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018280:	88 d0                	mov    al,dl
c0018282:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018286:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001828b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018293:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018297:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001829d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00182a1:	0f 8d 97 00 00 00    	jge    c001833e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00182a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182af:	83 c2 2a             	add    edx,0x2a
c00182b2:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00182b6:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00182bb:	75 78                	jne    c0018335 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182c5:	83 c2 2a             	add    edx,0x2a
c00182c8:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00182cc:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00182d0:	75 63                	jne    c0018335 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182d2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00182d7:	74 3a                	je     c0018313 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00182d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182e1:	83 c2 2a             	add    edx,0x2a
c00182e4:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00182e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00182ef:	39 c2                	cmp    edx,eax
c00182f1:	74 10                	je     c0018303 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00182f3:	83 ec 0c             	sub    esp,0xc
c00182f6:	68 34 b7 02 c0       	push   0xc002b734
c00182fb:	e8 0f 23 00 00       	call   c001a60f <Krnl::panic(char const*)>
c0018300:	83 c4 10             	add    esp,0x10
c0018303:	83 ec 0c             	sub    esp,0xc
c0018306:	68 a0 b5 02 c0       	push   0xc002b5a0
c001830b:	e8 ff 22 00 00       	call   c001a60f <Krnl::panic(char const*)>
c0018310:	83 c4 10             	add    esp,0x10
c0018313:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018317:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001831b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001831f:	83 c2 2a             	add    edx,0x2a
c0018322:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018326:	8b 02                	mov    eax,DWORD PTR [edx]
c0018328:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001832b:	89 01                	mov    DWORD PTR [ecx],eax
c001832d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018330:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018335:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018339:	e9 55 ff ff ff       	jmp    c0018293 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001833e:	90                   	nop
c001833f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018343:	83 c4 2c             	add    esp,0x2c
c0018346:	c2 04 00             	ret    0x4
c0018349:	90                   	nop

c001834a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001834a:	83 ec 1c             	sub    esp,0x1c
c001834d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018351:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018355:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018359:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001835e:	88 c8                	mov    al,cl
c0018360:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018364:	88 d0                	mov    al,dl
c0018366:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001836a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001836e:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018374:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018378:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001837b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001837f:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018383:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018387:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001838d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018391:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018394:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018398:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001839d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183a1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183a7:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183ab:	8d 48 01             	lea    ecx,[eax+0x1]
c00183ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183b2:	83 c2 2a             	add    edx,0x2a
c00183b5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00183b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183bd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183c7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183ca:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183ce:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00183d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183d6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183dc:	8d 50 01             	lea    edx,[eax+0x1]
c00183df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183e3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00183e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183ed:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183f3:	3d 00 02 00 00       	cmp    eax,0x200
c00183f8:	75 10                	jne    c001840a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00183fa:	83 ec 0c             	sub    esp,0xc
c00183fd:	68 af b5 02 c0       	push   0xc002b5af
c0018402:	e8 08 22 00 00       	call   c001a60f <Krnl::panic(char const*)>
c0018407:	83 c4 10             	add    esp,0x10
c001840a:	90                   	nop
c001840b:	83 c4 1c             	add    esp,0x1c
c001840e:	c3                   	ret    
c001840f:	90                   	nop

c0018410 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018410:	b8 00 00 00 00       	mov    eax,0x0
c0018415:	c3                   	ret    

c0018416 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018416:	83 ec 1c             	sub    esp,0x1c
c0018419:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001841d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018420:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018424:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0018429:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001842e:	83 ec 08             	sub    esp,0x8
c0018431:	52                   	push   edx
c0018432:	50                   	push   eax
c0018433:	e8 20 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0018438:	83 c4 10             	add    esp,0x10
c001843b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001843f:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0018444:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018449:	83 ec 04             	sub    esp,0x4
c001844c:	6a 01                	push   0x1
c001844e:	52                   	push   edx
c001844f:	50                   	push   eax
c0018450:	e8 19 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c0018455:	83 c4 10             	add    esp,0x10
c0018458:	90                   	nop
c0018459:	83 c4 1c             	add    esp,0x1c
c001845c:	c3                   	ret    
c001845d:	90                   	nop

c001845e <ACPI::open(int, int, void*)>:
c001845e:	53                   	push   ebx
c001845f:	83 ec 28             	sub    esp,0x28
c0018462:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018466:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001846d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018471:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018478:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001847d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018483:	83 e0 04             	and    eax,0x4
c0018486:	84 c0                	test   al,al
c0018488:	74 47                	je     c00184d1 <ACPI::open(int, int, void*)+0x73>
c001848a:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001848f:	83 ec 08             	sub    esp,0x8
c0018492:	68 cc b5 02 c0       	push   0xc002b5cc
c0018497:	50                   	push   eax
c0018498:	e8 3f f8 ff ff       	call   c0017cdc <findDataTable(unsigned char*, char*)>
c001849d:	83 c4 10             	add    esp,0x10
c00184a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00184a4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00184a9:	74 26                	je     c00184d1 <ACPI::open(int, int, void*)+0x73>
c00184ab:	83 ec 0c             	sub    esp,0xc
c00184ae:	68 d1 b5 02 c0       	push   0xc002b5d1
c00184b3:	e8 b6 aa ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00184b8:	83 c4 10             	add    esp,0x10
c00184bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184bf:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ca:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184d1:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c00184d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184dd:	8a 00                	mov    al,BYTE PTR [eax]
c00184df:	3c 01                	cmp    al,0x1
c00184e1:	75 28                	jne    c001850b <ACPI::open(int, int, void*)+0xad>
c00184e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184e7:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184f2:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184f9:	83 ec 0c             	sub    esp,0xc
c00184fc:	68 e2 b5 02 c0       	push   0xc002b5e2
c0018501:	e8 68 aa ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0018506:	83 c4 10             	add    esp,0x10
c0018509:	eb 25                	jmp    c0018530 <ACPI::open(int, int, void*)+0xd2>
c001850b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001850f:	8a 00                	mov    al,BYTE PTR [eax]
c0018511:	3c 02                	cmp    al,0x2
c0018513:	75 1b                	jne    c0018530 <ACPI::open(int, int, void*)+0xd2>
c0018515:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018519:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018520:	83 ec 0c             	sub    esp,0xc
c0018523:	68 ea b5 02 c0       	push   0xc002b5ea
c0018528:	e8 41 aa ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001852d:	83 c4 10             	add    esp,0x10
c0018530:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018534:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001853a:	83 f0 01             	xor    eax,0x1
c001853d:	84 c0                	test   al,al
c001853f:	74 6a                	je     c00185ab <ACPI::open(int, int, void*)+0x14d>
c0018541:	83 ec 0c             	sub    esp,0xc
c0018544:	68 f2 b5 02 c0       	push   0xc002b5f2
c0018549:	e8 20 aa ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001854e:	83 c4 10             	add    esp,0x10
c0018551:	e8 fa 7b fe ff       	call   c0000150 <manualPCIProbe>
c0018556:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001855a:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c001855f:	75 28                	jne    c0018589 <ACPI::open(int, int, void*)+0x12b>
c0018561:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018565:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001856c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018570:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018577:	83 ec 0c             	sub    esp,0xc
c001857a:	68 00 b6 02 c0       	push   0xc002b600
c001857f:	e8 ea a9 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0018584:	83 c4 10             	add    esp,0x10
c0018587:	eb 22                	jmp    c00185ab <ACPI::open(int, int, void*)+0x14d>
c0018589:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c001858e:	75 1b                	jne    c00185ab <ACPI::open(int, int, void*)+0x14d>
c0018590:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018594:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001859b:	83 ec 0c             	sub    esp,0xc
c001859e:	68 0a b6 02 c0       	push   0xc002b60a
c00185a3:	e8 c6 a9 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00185a8:	83 c4 10             	add    esp,0x10
c00185ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185af:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185b5:	84 c0                	test   al,al
c00185b7:	74 13                	je     c00185cc <ACPI::open(int, int, void*)+0x16e>
c00185b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185bd:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00185c3:	83 f0 01             	xor    eax,0x1
c00185c6:	0f b6 c0             	movzx  eax,al
c00185c9:	40                   	inc    eax
c00185ca:	eb 05                	jmp    c00185d1 <ACPI::open(int, int, void*)+0x173>
c00185cc:	b8 00 00 00 00       	mov    eax,0x0
c00185d1:	83 ec 08             	sub    esp,0x8
c00185d4:	50                   	push   eax
c00185d5:	68 14 b6 02 c0       	push   0xc002b614
c00185da:	e8 8f a9 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00185df:	83 c4 10             	add    esp,0x10
c00185e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185e6:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185ec:	84 c0                	test   al,al
c00185ee:	74 67                	je     c0018657 <ACPI::open(int, int, void*)+0x1f9>
c00185f0:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c00185f8:	83 ec 0c             	sub    esp,0xc
c00185fb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00185ff:	e8 3c 72 ff ff       	call   c000f840 <malloc>
c0018604:	83 c4 10             	add    esp,0x10
c0018607:	89 c3                	mov    ebx,eax
c0018609:	83 ec 0c             	sub    esp,0xc
c001860c:	53                   	push   ebx
c001860d:	e8 26 a3 00 00       	call   c0022938 <PCI::PCI()>
c0018612:	83 c4 10             	add    esp,0x10
c0018615:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018619:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001861d:	83 ec 08             	sub    esp,0x8
c0018620:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018624:	50                   	push   eax
c0018625:	e8 6a bd ff ff       	call   c0014394 <Device::addChild(Device*)>
c001862a:	83 c4 10             	add    esp,0x10
c001862d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018631:	8b 00                	mov    eax,DWORD PTR [eax]
c0018633:	83 c0 08             	add    eax,0x8
c0018636:	8b 00                	mov    eax,DWORD PTR [eax]
c0018638:	6a 00                	push   0x0
c001863a:	6a 00                	push   0x0
c001863c:	6a 00                	push   0x0
c001863e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018642:	ff d0                	call   eax
c0018644:	83 c4 10             	add    esp,0x10
c0018647:	83 ec 0c             	sub    esp,0xc
c001864a:	68 1d b6 02 c0       	push   0xc002b61d
c001864f:	e8 1a a9 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0018654:	83 c4 10             	add    esp,0x10
c0018657:	83 ec 0c             	sub    esp,0xc
c001865a:	68 28 b6 02 c0       	push   0xc002b628
c001865f:	e8 cb 46 00 00       	call   c001cd2f <Thr::loadKernelSymbolTable(char const*)>
c0018664:	83 c4 10             	add    esp,0x10
c0018667:	8b 1d e8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5e8
c001866d:	83 ec 08             	sub    esp,0x8
c0018670:	6a 01                	push   0x1
c0018672:	68 46 b6 02 c0       	push   0xc002b646
c0018677:	e8 10 51 00 00       	call   c001d78c <Thr::loadDLL(char const*, bool)>
c001867c:	83 c4 10             	add    esp,0x10
c001867f:	83 ec 08             	sub    esp,0x8
c0018682:	53                   	push   ebx
c0018683:	50                   	push   eax
c0018684:	e8 37 53 00 00       	call   c001d9c0 <Thr::executeDLL(unsigned long, void*)>
c0018689:	83 c4 10             	add    esp,0x10
c001868c:	8b 1d e8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5e8
c0018692:	83 ec 08             	sub    esp,0x8
c0018695:	6a 01                	push   0x1
c0018697:	68 63 b6 02 c0       	push   0xc002b663
c001869c:	e8 eb 50 00 00       	call   c001d78c <Thr::loadDLL(char const*, bool)>
c00186a1:	83 c4 10             	add    esp,0x10
c00186a4:	83 ec 08             	sub    esp,0x8
c00186a7:	53                   	push   ebx
c00186a8:	50                   	push   eax
c00186a9:	e8 12 53 00 00       	call   c001d9c0 <Thr::executeDLL(unsigned long, void*)>
c00186ae:	83 c4 10             	add    esp,0x10
c00186b1:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00186b6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00186bc:	83 e0 04             	and    eax,0x4
c00186bf:	84 c0                	test   al,al
c00186c1:	0f 84 d2 00 00 00    	je     c0018799 <ACPI::open(int, int, void*)+0x33b>
c00186c7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00186ce:	83 ec 0c             	sub    esp,0xc
c00186d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00186d5:	e8 66 71 ff ff       	call   c000f840 <malloc>
c00186da:	83 c4 10             	add    esp,0x10
c00186dd:	89 c3                	mov    ebx,eax
c00186df:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c00186e4:	83 ec 04             	sub    esp,0x4
c00186e7:	50                   	push   eax
c00186e8:	68 80 b6 02 c0       	push   0xc002b680
c00186ed:	53                   	push   ebx
c00186ee:	e8 d3 ad ff ff       	call   c00134c6 <File::File(char const*, Process*)>
c00186f3:	83 c4 10             	add    esp,0x10
c00186f6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00186fa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186ff:	74 17                	je     c0018718 <ACPI::open(int, int, void*)+0x2ba>
c0018701:	83 ec 0c             	sub    esp,0xc
c0018704:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018708:	e8 8b b0 ff ff       	call   c0013798 <File::exists()>
c001870d:	83 c4 10             	add    esp,0x10
c0018710:	84 c0                	test   al,al
c0018712:	74 04                	je     c0018718 <ACPI::open(int, int, void*)+0x2ba>
c0018714:	b0 01                	mov    al,0x1
c0018716:	eb 02                	jmp    c001871a <ACPI::open(int, int, void*)+0x2bc>
c0018718:	b0 00                	mov    al,0x0
c001871a:	84 c0                	test   al,al
c001871c:	74 22                	je     c0018740 <ACPI::open(int, int, void*)+0x2e2>
c001871e:	83 ec 08             	sub    esp,0x8
c0018721:	6a 01                	push   0x1
c0018723:	68 80 b6 02 c0       	push   0xc002b680
c0018728:	e8 5f 50 00 00       	call   c001d78c <Thr::loadDLL(char const*, bool)>
c001872d:	83 c4 10             	add    esp,0x10
c0018730:	83 ec 08             	sub    esp,0x8
c0018733:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018737:	50                   	push   eax
c0018738:	e8 83 52 00 00       	call   c001d9c0 <Thr::executeDLL(unsigned long, void*)>
c001873d:	83 c4 10             	add    esp,0x10
c0018740:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018745:	74 1e                	je     c0018765 <ACPI::open(int, int, void*)+0x307>
c0018747:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001874c:	74 17                	je     c0018765 <ACPI::open(int, int, void*)+0x307>
c001874e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018752:	8b 00                	mov    eax,DWORD PTR [eax]
c0018754:	83 c0 08             	add    eax,0x8
c0018757:	8b 00                	mov    eax,DWORD PTR [eax]
c0018759:	83 ec 0c             	sub    esp,0xc
c001875c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018760:	ff d0                	call   eax
c0018762:	83 c4 10             	add    esp,0x10
c0018765:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001876a:	83 ec 08             	sub    esp,0x8
c001876d:	68 9d b6 02 c0       	push   0xc002b69d
c0018772:	50                   	push   eax
c0018773:	e8 64 f5 ff ff       	call   c0017cdc <findDataTable(unsigned char*, char*)>
c0018778:	83 c4 10             	add    esp,0x10
c001877b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001877f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018784:	74 13                	je     c0018799 <ACPI::open(int, int, void*)+0x33b>
c0018786:	83 ec 08             	sub    esp,0x8
c0018789:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001878d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018791:	e8 80 fc ff ff       	call   c0018416 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018796:	83 c4 10             	add    esp,0x10
c0018799:	b8 00 00 00 00       	mov    eax,0x0
c001879e:	83 c4 28             	add    esp,0x28
c00187a1:	5b                   	pop    ebx
c00187a2:	c3                   	ret    
c00187a3:	90                   	nop

c00187a4 <ACPI::sleep()>:
c00187a4:	83 ec 0c             	sub    esp,0xc
c00187a7:	a1 a0 0c 03 c0       	mov    eax,ds:0xc0030ca0
c00187ac:	85 c0                	test   eax,eax
c00187ae:	74 07                	je     c00187b7 <ACPI::sleep()+0x13>
c00187b0:	a1 a0 0c 03 c0       	mov    eax,ds:0xc0030ca0
c00187b5:	ff d0                	call   eax
c00187b7:	90                   	nop
c00187b8:	83 c4 0c             	add    esp,0xc
c00187bb:	c3                   	ret    

c00187bc <CPU::close(int, int, void*)>:
c00187bc:	31 c0                	xor    eax,eax
c00187be:	c3                   	ret    
c00187bf:	90                   	nop

c00187c0 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00187c0:	55                   	push   ebp
c00187c1:	57                   	push   edi
c00187c2:	56                   	push   esi
c00187c3:	53                   	push   ebx
c00187c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00187c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187cc:	89 ce                	mov    esi,ecx
c00187ce:	89 d5                	mov    ebp,edx
c00187d0:	80 f9 04             	cmp    cl,0x4
c00187d3:	75 28                	jne    c00187fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00187d5:	8d 42 f9             	lea    eax,[edx-0x7]
c00187d8:	3c 03                	cmp    al,0x3
c00187da:	0f 86 63 01 00 00    	jbe    c0018943 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187e0:	80 fa 03             	cmp    dl,0x3
c00187e3:	0f 84 5a 01 00 00    	je     c0018943 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187e9:	8d 7a f2             	lea    edi,[edx-0xe]
c00187ec:	b8 10 da 02 c0       	mov    eax,0xc002da10
c00187f1:	89 fb                	mov    ebx,edi
c00187f3:	80 fb 01             	cmp    bl,0x1
c00187f6:	77 4e                	ja     c0018846 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00187f8:	e9 52 01 00 00       	jmp    c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187fd:	80 f9 05             	cmp    cl,0x5
c0018800:	75 4d                	jne    c001884f <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018802:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018807:	80 fa 03             	cmp    dl,0x3
c001880a:	0f 86 3f 01 00 00    	jbe    c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018810:	8d 7a fa             	lea    edi,[edx-0x6]
c0018813:	b8 30 da 02 c0       	mov    eax,0xc002da30
c0018818:	89 fb                	mov    ebx,edi
c001881a:	80 fb 01             	cmp    bl,0x1
c001881d:	0f 86 2c 01 00 00    	jbe    c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018823:	b8 40 da 02 c0       	mov    eax,0xc002da40
c0018828:	80 fa 08             	cmp    dl,0x8
c001882b:	0f 84 1e 01 00 00    	je     c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018831:	89 d7                	mov    edi,edx
c0018833:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018838:	83 e7 fb             	and    edi,0xfffffffb
c001883b:	89 fb                	mov    ebx,edi
c001883d:	80 fb 09             	cmp    bl,0x9
c0018840:	0f 84 09 01 00 00    	je     c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018846:	31 c0                	xor    eax,eax
c0018848:	89 eb                	mov    ebx,ebp
c001884a:	0f b6 fb             	movzx  edi,bl
c001884d:	eb 30                	jmp    c001887f <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001884f:	31 c0                	xor    eax,eax
c0018851:	80 f9 06             	cmp    cl,0x6
c0018854:	75 f2                	jne    c0018848 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018856:	80 fa 0a             	cmp    dl,0xa
c0018859:	77 ed                	ja     c0018848 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001885b:	bf de 05 00 00       	mov    edi,0x5de
c0018860:	0f a3 d7             	bt     edi,edx
c0018863:	73 e3                	jae    c0018848 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018865:	b8 60 da 02 c0       	mov    eax,0xc002da60
c001886a:	e9 e0 00 00 00       	jmp    c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001886f:	39 c7                	cmp    edi,eax
c0018871:	0f 84 d3 00 00 00    	je     c001894a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018877:	40                   	inc    eax
c0018878:	3d d0 00 00 00       	cmp    eax,0xd0
c001887d:	74 09                	je     c0018888 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001887f:	89 f3                	mov    ebx,esi
c0018881:	80 fb 0f             	cmp    bl,0xf
c0018884:	75 f1                	jne    c0018877 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018886:	eb e7                	jmp    c001886f <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018888:	80 f9 10             	cmp    cl,0x10
c001888b:	75 14                	jne    c00188a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001888d:	8d 42 fc             	lea    eax,[edx-0x4]
c0018890:	83 e0 fb             	and    eax,0xfffffffb
c0018893:	3c 02                	cmp    al,0x2
c0018895:	76 34                	jbe    c00188cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018897:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c001889c:	80 fa 02             	cmp    dl,0x2
c001889f:	eb 24                	jmp    c00188c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00188a1:	80 f9 11             	cmp    cl,0x11
c00188a4:	75 13                	jne    c00188b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00188a6:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c00188ab:	80 fa 03             	cmp    dl,0x3
c00188ae:	0f 85 9b 00 00 00    	jne    c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b4:	e9 91 00 00 00       	jmp    c001894a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188b9:	80 f9 12             	cmp    cl,0x12
c00188bc:	75 14                	jne    c00188d2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00188be:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c00188c3:	fe ca                	dec    dl
c00188c5:	0f 85 84 00 00 00    	jne    c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188cb:	b8 80 da 02 c0       	mov    eax,0xc002da80
c00188d0:	eb 7d                	jmp    c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d2:	80 f9 14             	cmp    cl,0x14
c00188d5:	75 12                	jne    c00188e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00188d7:	4a                   	dec    edx
c00188d8:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c00188dd:	80 fa 01             	cmp    dl,0x1
c00188e0:	77 6d                	ja     c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e2:	b8 90 da 02 c0       	mov    eax,0xc002da90
c00188e7:	eb 66                	jmp    c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e9:	80 f9 15             	cmp    cl,0x15
c00188ec:	75 31                	jne    c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00188ee:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c00188f3:	80 fa 01             	cmp    dl,0x1
c00188f6:	74 57                	je     c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f8:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c00188fd:	80 fa 13             	cmp    dl,0x13
c0018900:	76 0c                	jbe    c001890e <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018902:	80 fa 30             	cmp    dl,0x30
c0018905:	75 48                	jne    c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018907:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c001890c:	eb 41                	jmp    c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001890e:	b9 04 00 09 00       	mov    ecx,0x90004
c0018913:	0f a3 d1             	bt     ecx,edx
c0018916:	73 37                	jae    c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018918:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c001891d:	eb 30                	jmp    c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001891f:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c0018924:	80 f9 16             	cmp    cl,0x16
c0018927:	75 26                	jne    c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018929:	b8 d0 da 02 c0       	mov    eax,0xc002dad0
c001892e:	84 d2                	test   dl,dl
c0018930:	74 1d                	je     c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018932:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c0018937:	80 fa 30             	cmp    dl,0x30
c001893a:	75 13                	jne    c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001893c:	b8 e0 da 02 c0       	mov    eax,0xc002dae0
c0018941:	eb 0c                	jmp    c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018943:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018948:	eb 05                	jmp    c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001894a:	b8 70 da 02 c0       	mov    eax,0xc002da70
c001894f:	5b                   	pop    ebx
c0018950:	5e                   	pop    esi
c0018951:	5f                   	pop    edi
c0018952:	5d                   	pop    ebp
c0018953:	c3                   	ret    

c0018954 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018954:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018958:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001895c:	80 f9 04             	cmp    cl,0x4
c001895f:	75 6b                	jne    c00189cc <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018961:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018966:	80 fa 01             	cmp    dl,0x1
c0018969:	0f 86 92 02 00 00    	jbe    c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001896f:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018974:	80 fa 02             	cmp    dl,0x2
c0018977:	0f 84 84 02 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001897d:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018982:	80 fa 03             	cmp    dl,0x3
c0018985:	0f 84 76 02 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001898b:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018990:	80 fa 04             	cmp    dl,0x4
c0018993:	0f 84 68 02 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018999:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c001899e:	80 fa 05             	cmp    dl,0x5
c00189a1:	0f 84 5a 02 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a7:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c00189ac:	80 fa 07             	cmp    dl,0x7
c00189af:	0f 84 4c 02 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b5:	83 ea 08             	sub    edx,0x8
c00189b8:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c00189bd:	80 fa 01             	cmp    dl,0x1
c00189c0:	0f 87 3b 02 00 00    	ja     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c6:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c00189cb:	c3                   	ret    
c00189cc:	80 f9 05             	cmp    cl,0x5
c00189cf:	75 45                	jne    c0018a16 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00189d1:	8d 4a ff             	lea    ecx,[edx-0x1]
c00189d4:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c00189d9:	80 f9 02             	cmp    cl,0x2
c00189dc:	0f 86 1f 02 00 00    	jbe    c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e2:	80 fa 04             	cmp    dl,0x4
c00189e5:	0f 84 f3 01 00 00    	je     c0018bde <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00189eb:	80 fa 07             	cmp    dl,0x7
c00189ee:	0f 84 0d 02 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f4:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c00189f9:	80 fa 08             	cmp    dl,0x8
c00189fc:	0f 84 ff 01 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a02:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c0018a07:	80 fa 09             	cmp    dl,0x9
c0018a0a:	0f 85 f1 01 00 00    	jne    c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a10:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018a15:	c3                   	ret    
c0018a16:	80 f9 06             	cmp    cl,0x6
c0018a19:	0f 85 85 01 00 00    	jne    c0018ba4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a1f:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018a24:	80 fa 01             	cmp    dl,0x1
c0018a27:	0f 84 d4 01 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a2d:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a30:	3c 01                	cmp    al,0x1
c0018a32:	0f 86 ac 01 00 00    	jbe    c0018be4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a38:	80 fa 03             	cmp    dl,0x3
c0018a3b:	0f 84 a3 01 00 00    	je     c0018be4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a41:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a44:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018a49:	80 f9 01             	cmp    cl,0x1
c0018a4c:	0f 86 af 01 00 00    	jbe    c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a52:	80 fa 09             	cmp    dl,0x9
c0018a55:	0f 84 8f 01 00 00    	je     c0018bea <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a5b:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a5e:	80 f9 01             	cmp    cl,0x1
c0018a61:	0f 86 9a 01 00 00    	jbe    c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a67:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018a6c:	80 fa 0d             	cmp    dl,0xd
c0018a6f:	0f 84 8c 01 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a75:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018a7a:	80 fa 0e             	cmp    dl,0xe
c0018a7d:	0f 84 7e 01 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a83:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018a88:	80 fa 0f             	cmp    dl,0xf
c0018a8b:	0f 84 70 01 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a91:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018a96:	80 fa 15             	cmp    dl,0x15
c0018a99:	0f 84 62 01 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9f:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018aa2:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018aa7:	80 f9 01             	cmp    cl,0x1
c0018aaa:	0f 86 51 01 00 00    	jbe    c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab0:	80 fa 1a             	cmp    dl,0x1a
c0018ab3:	0f 84 37 01 00 00    	je     c0018bf0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018ab9:	80 fa 1c             	cmp    dl,0x1c
c0018abc:	0f 84 34 01 00 00    	je     c0018bf6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018ac2:	80 fa 1d             	cmp    dl,0x1d
c0018ac5:	0f 84 36 01 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018acb:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018ad0:	80 fa 25             	cmp    dl,0x25
c0018ad3:	0f 84 28 01 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad9:	8d 4a da             	lea    ecx,[edx-0x26]
c0018adc:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018ae1:	80 f9 01             	cmp    cl,0x1
c0018ae4:	0f 86 17 01 00 00    	jbe    c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aea:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018aef:	80 fa 2a             	cmp    dl,0x2a
c0018af2:	0f 84 09 01 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af8:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018afd:	80 fa 2c             	cmp    dl,0x2c
c0018b00:	0f 84 fb 00 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b06:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018b0b:	80 fa 2d             	cmp    dl,0x2d
c0018b0e:	0f 84 ed 00 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b14:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018b19:	80 fa 2e             	cmp    dl,0x2e
c0018b1c:	0f 84 df 00 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b22:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018b27:	80 fa 2f             	cmp    dl,0x2f
c0018b2a:	0f 84 d1 00 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b30:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b33:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018b38:	80 f9 01             	cmp    cl,0x1
c0018b3b:	0f 86 c0 00 00 00    	jbe    c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b41:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018b46:	80 fa 37             	cmp    dl,0x37
c0018b49:	0f 84 b2 00 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4f:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018b54:	80 fa 3a             	cmp    dl,0x3a
c0018b57:	0f 84 a4 00 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b5d:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018b62:	80 fa 3c             	cmp    dl,0x3c
c0018b65:	0f 84 96 00 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b6b:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018b70:	80 fa 3d             	cmp    dl,0x3d
c0018b73:	0f 84 88 00 00 00    	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b79:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018b7e:	80 fa 3e             	cmp    dl,0x3e
c0018b81:	74 7e                	je     c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b83:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b86:	3c 01                	cmp    al,0x1
c0018b88:	76 72                	jbe    c0018bfc <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b8a:	80 fa 3f             	cmp    dl,0x3f
c0018b8d:	74 6d                	je     c0018bfc <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b8f:	80 fa 4a             	cmp    dl,0x4a
c0018b92:	74 0a                	je     c0018b9e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b94:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c0018b99:	80 fa 4d             	cmp    dl,0x4d
c0018b9c:	75 63                	jne    c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b9e:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018ba3:	c3                   	ret    
c0018ba4:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c0018ba9:	80 f9 0b             	cmp    cl,0xb
c0018bac:	75 0a                	jne    c0018bb8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018bae:	fe ca                	dec    dl
c0018bb0:	75 4f                	jne    c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb2:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018bb7:	c3                   	ret    
c0018bb8:	80 f9 0f             	cmp    cl,0xf
c0018bbb:	75 44                	jne    c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bbd:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018bc2:	80 fa 02             	cmp    dl,0x2
c0018bc5:	76 3a                	jbe    c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bc7:	8d 42 fd             	lea    eax,[edx-0x3]
c0018bca:	3c 01                	cmp    al,0x1
c0018bcc:	76 0a                	jbe    c0018bd8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018bce:	b8 82 ba 02 c0       	mov    eax,0xc002ba82
c0018bd3:	80 fa 06             	cmp    dl,0x6
c0018bd6:	75 29                	jne    c0018c01 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bd8:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018bdd:	c3                   	ret    
c0018bde:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018be3:	c3                   	ret    
c0018be4:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018be9:	c3                   	ret    
c0018bea:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018bef:	c3                   	ret    
c0018bf0:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018bf5:	c3                   	ret    
c0018bf6:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018bfb:	c3                   	ret    
c0018bfc:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018c01:	c3                   	ret    

c0018c02 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018c02:	60                   	pusha  
c0018c03:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c0f:	9c                   	pushf  
c0018c10:	fa                   	cli    
c0018c11:	0f 09                	wbinvd 
c0018c13:	0f 30                	wrmsr  
c0018c15:	9d                   	popf   
c0018c16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c1a:	89 02                	mov    DWORD PTR [edx],eax
c0018c1c:	61                   	popa   
c0018c1d:	c3                   	ret    

c0018c1e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c1e:	60                   	pusha  
c0018c1f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c23:	9c                   	pushf  
c0018c24:	fa                   	cli    
c0018c25:	0f 09                	wbinvd 
c0018c27:	31 c0                	xor    eax,eax
c0018c29:	31 d2                	xor    edx,edx
c0018c2b:	0f 32                	rdmsr  
c0018c2d:	9d                   	popf   
c0018c2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c32:	89 02                	mov    DWORD PTR [edx],eax
c0018c34:	61                   	popa   
c0018c35:	c3                   	ret    

c0018c36 <CPU::AMD_K6_writeback(int, int, int)>:
c0018c36:	56                   	push   esi
c0018c37:	53                   	push   ebx
c0018c38:	83 ec 10             	sub    esp,0x10
c0018c3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c3f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c44:	75 5d                	jne    c0018ca3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c46:	83 f8 08             	cmp    eax,0x8
c0018c49:	75 09                	jne    c0018c54 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c4b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c50:	7e 13                	jle    c0018c65 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c52:	eb 30                	jmp    c0018c84 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c54:	83 f8 06             	cmp    eax,0x6
c0018c57:	7c 4a                	jl     c0018ca3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c59:	83 f8 07             	cmp    eax,0x7
c0018c5c:	7e 07                	jle    c0018c65 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c5e:	83 f8 09             	cmp    eax,0x9
c0018c61:	74 21                	je     c0018c84 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c63:	eb 3e                	jmp    c0018ca3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c65:	89 e6                	mov    esi,esp
c0018c67:	8b 1d 28 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e628
c0018c6d:	56                   	push   esi
c0018c6e:	c1 eb 15             	shr    ebx,0x15
c0018c71:	68 82 00 00 c0       	push   0xc0000082
c0018c76:	83 e3 7e             	and    ebx,0x7e
c0018c79:	e8 a0 ff ff ff       	call   c0018c1e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c7e:	56                   	push   esi
c0018c7f:	6a 00                	push   0x0
c0018c81:	53                   	push   ebx
c0018c82:	eb 12                	jmp    c0018c96 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c84:	89 e3                	mov    ebx,esp
c0018c86:	53                   	push   ebx
c0018c87:	68 82 00 00 c0       	push   0xc0000082
c0018c8c:	e8 8d ff ff ff       	call   c0018c1e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c91:	53                   	push   ebx
c0018c92:	6a 00                	push   0x0
c0018c94:	6a 00                	push   0x0
c0018c96:	68 82 00 00 c0       	push   0xc0000082
c0018c9b:	e8 62 ff ff ff       	call   c0018c02 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018ca0:	83 c4 18             	add    esp,0x18
c0018ca3:	83 c4 10             	add    esp,0x10
c0018ca6:	5b                   	pop    ebx
c0018ca7:	5e                   	pop    esi
c0018ca8:	c3                   	ret    
c0018ca9:	90                   	nop

c0018caa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018caa:	55                   	push   ebp
c0018cab:	57                   	push   edi
c0018cac:	56                   	push   esi
c0018cad:	53                   	push   ebx
c0018cae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cb2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018cb6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018cba:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018cbe:	39 05 00 db 02 c0    	cmp    DWORD PTR ds:0xc002db00,eax
c0018cc4:	75 23                	jne    c0018ce9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018cc6:	a1 2c 11 03 c0       	mov    eax,ds:0xc003112c
c0018ccb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018ccf:	89 06                	mov    DWORD PTR [esi],eax
c0018cd1:	a1 28 11 03 c0       	mov    eax,ds:0xc0031128
c0018cd6:	89 07                	mov    DWORD PTR [edi],eax
c0018cd8:	a1 24 11 03 c0       	mov    eax,ds:0xc0031124
c0018cdd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018ce0:	a1 20 11 03 c0       	mov    eax,ds:0xc0031120
c0018ce5:	89 02                	mov    DWORD PTR [edx],eax
c0018ce7:	eb 3f                	jmp    c0018d28 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018ce9:	31 c9                	xor    ecx,ecx
c0018ceb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cef:	0f a2                	cpuid  
c0018cf1:	89 06                	mov    DWORD PTR [esi],eax
c0018cf3:	89 1f                	mov    DWORD PTR [edi],ebx
c0018cf5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018cf9:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018cfc:	89 10                	mov    DWORD PTR [eax],edx
c0018cfe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d02:	a3 00 db 02 c0       	mov    ds:0xc002db00,eax
c0018d07:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d09:	a3 2c 11 03 c0       	mov    ds:0xc003112c,eax
c0018d0e:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d10:	a3 28 11 03 c0       	mov    ds:0xc0031128,eax
c0018d15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d18:	a3 24 11 03 c0       	mov    ds:0xc0031124,eax
c0018d1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d21:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d23:	a3 20 11 03 c0       	mov    ds:0xc0031120,eax
c0018d28:	5b                   	pop    ebx
c0018d29:	5e                   	pop    esi
c0018d2a:	5f                   	pop    edi
c0018d2b:	5d                   	pop    ebp
c0018d2c:	c3                   	ret    
c0018d2d:	90                   	nop

c0018d2e <CPU::cpuidCheckEDX(unsigned int)>:
c0018d2e:	83 ec 10             	sub    esp,0x10
c0018d31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d35:	50                   	push   eax
c0018d36:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d3a:	50                   	push   eax
c0018d3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d3f:	50                   	push   eax
c0018d40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d44:	50                   	push   eax
c0018d45:	6a 01                	push   0x1
c0018d47:	e8 5e ff ff ff       	call   c0018caa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d50:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d54:	0f 95 c0             	setne  al
c0018d57:	83 c4 24             	add    esp,0x24
c0018d5a:	c3                   	ret    
c0018d5b:	90                   	nop

c0018d5c <CPU::cpuidCheckECX(unsigned int)>:
c0018d5c:	83 ec 10             	sub    esp,0x10
c0018d5f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d63:	50                   	push   eax
c0018d64:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d68:	50                   	push   eax
c0018d69:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d6d:	50                   	push   eax
c0018d6e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d72:	50                   	push   eax
c0018d73:	6a 01                	push   0x1
c0018d75:	e8 30 ff ff ff       	call   c0018caa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d7e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d82:	0f 95 c0             	setne  al
c0018d85:	83 c4 24             	add    esp,0x24
c0018d88:	c3                   	ret    
c0018d89:	90                   	nop

c0018d8a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d8a:	83 ec 10             	sub    esp,0x10
c0018d8d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d91:	50                   	push   eax
c0018d92:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d96:	50                   	push   eax
c0018d97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d9b:	50                   	push   eax
c0018d9c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da0:	50                   	push   eax
c0018da1:	6a 07                	push   0x7
c0018da3:	e8 02 ff ff ff       	call   c0018caa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018da8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dac:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018db0:	0f 95 c0             	setne  al
c0018db3:	83 c4 24             	add    esp,0x24
c0018db6:	c3                   	ret    
c0018db7:	90                   	nop

c0018db8 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018db8:	83 ec 10             	sub    esp,0x10
c0018dbb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dbf:	50                   	push   eax
c0018dc0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc4:	50                   	push   eax
c0018dc5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc9:	50                   	push   eax
c0018dca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dce:	50                   	push   eax
c0018dcf:	6a 07                	push   0x7
c0018dd1:	e8 d4 fe ff ff       	call   c0018caa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dd6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dda:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018dde:	0f 95 c0             	setne  al
c0018de1:	83 c4 24             	add    esp,0x24
c0018de4:	c3                   	ret    
c0018de5:	90                   	nop

c0018de6 <CPU::CPU()>:
c0018de6:	83 ec 0c             	sub    esp,0xc
c0018de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ded:	83 ec 08             	sub    esp,0x8
c0018df0:	68 82 ba 02 c0       	push   0xc002ba82
c0018df5:	50                   	push   eax
c0018df6:	e8 89 b7 ff ff       	call   c0014584 <Device::Device(char const*)>
c0018dfb:	83 c4 10             	add    esp,0x10
c0018dfe:	ba 5c bb 02 c0       	mov    edx,0xc002bb5c
c0018e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e07:	89 10                	mov    DWORD PTR [eax],edx
c0018e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e0d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e1b:	05 78 01 00 00       	add    eax,0x178
c0018e20:	83 ec 0c             	sub    esp,0xc
c0018e23:	50                   	push   eax
c0018e24:	e8 2f 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018e29:	83 c4 10             	add    esp,0x10
c0018e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e30:	05 7c 09 00 00       	add    eax,0x97c
c0018e35:	83 ec 0c             	sub    esp,0xc
c0018e38:	50                   	push   eax
c0018e39:	e8 7c 64 ff ff       	call   c000f2ba <IDT::IDT()>
c0018e3e:	83 c4 10             	add    esp,0x10
c0018e41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e45:	05 7c 11 00 00       	add    eax,0x117c
c0018e4a:	83 ec 0c             	sub    esp,0xc
c0018e4d:	50                   	push   eax
c0018e4e:	e8 69 86 ff ff       	call   c00114bc <TSS::TSS()>
c0018e53:	83 c4 10             	add    esp,0x10
c0018e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e5a:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e65:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e6f:	90                   	nop
c0018e70:	83 c4 0c             	add    esp,0xc
c0018e73:	c3                   	ret    

c0018e74 <CPU::displayFeatures()>:
c0018e74:	53                   	push   ebx
c0018e75:	83 ec 10             	sub    esp,0x10
c0018e78:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018e7c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018e82:	68 90 b7 02 c0       	push   0xc002b790
c0018e87:	e8 e2 a0 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0018e8c:	59                   	pop    ecx
c0018e8d:	58                   	pop    eax
c0018e8e:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018e94:	50                   	push   eax
c0018e95:	68 a1 b7 02 c0       	push   0xc002b7a1
c0018e9a:	e8 cf a0 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0018e9f:	58                   	pop    eax
c0018ea0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ea6:	5a                   	pop    edx
c0018ea7:	c1 e8 0e             	shr    eax,0xe
c0018eaa:	0f b6 c0             	movzx  eax,al
c0018ead:	50                   	push   eax
c0018eae:	68 b2 b7 02 c0       	push   0xc002b7b2
c0018eb3:	e8 b6 a0 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0018eb8:	59                   	pop    ecx
c0018eb9:	58                   	pop    eax
c0018eba:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ec0:	66 c1 e8 06          	shr    ax,0x6
c0018ec4:	0f b6 c0             	movzx  eax,al
c0018ec7:	50                   	push   eax
c0018ec8:	68 c3 b7 02 c0       	push   0xc002b7c3
c0018ecd:	e8 9c a0 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0018ed2:	c7 04 24 70 bc 02 c0 	mov    DWORD PTR [esp],0xc002bc70
c0018ed9:	e8 90 a0 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0018ede:	83 c4 10             	add    esp,0x10
c0018ee1:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0018ee6:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018eed:	74 05                	je     c0018ef4 <CPU::displayFeatures()+0x80>
c0018eef:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0018ef4:	52                   	push   edx
c0018ef5:	52                   	push   edx
c0018ef6:	50                   	push   eax
c0018ef7:	68 d4 b7 02 c0       	push   0xc002b7d4
c0018efc:	e8 6d a0 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0018f01:	83 c4 10             	add    esp,0x10
c0018f04:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0018f09:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f10:	78 05                	js     c0018f17 <CPU::displayFeatures()+0xa3>
c0018f12:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0018f17:	51                   	push   ecx
c0018f18:	51                   	push   ecx
c0018f19:	50                   	push   eax
c0018f1a:	68 eb b7 02 c0       	push   0xc002b7eb
c0018f1f:	e8 4a a0 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0018f24:	83 c4 10             	add    esp,0x10
c0018f27:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0018f2c:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018f33:	75 05                	jne    c0018f3a <CPU::displayFeatures()+0xc6>
c0018f35:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0018f3a:	52                   	push   edx
c0018f3b:	52                   	push   edx
c0018f3c:	50                   	push   eax
c0018f3d:	68 02 b8 02 c0       	push   0xc002b802
c0018f42:	e8 27 a0 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0018f47:	83 c4 10             	add    esp,0x10
c0018f4a:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0018f4f:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018f56:	75 05                	jne    c0018f5d <CPU::displayFeatures()+0xe9>
c0018f58:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0018f5d:	51                   	push   ecx
c0018f5e:	51                   	push   ecx
c0018f5f:	50                   	push   eax
c0018f60:	68 19 b8 02 c0       	push   0xc002b819
c0018f65:	e8 04 a0 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0018f6a:	83 c4 10             	add    esp,0x10
c0018f6d:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0018f72:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018f79:	75 05                	jne    c0018f80 <CPU::displayFeatures()+0x10c>
c0018f7b:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0018f80:	52                   	push   edx
c0018f81:	52                   	push   edx
c0018f82:	50                   	push   eax
c0018f83:	68 30 b8 02 c0       	push   0xc002b830
c0018f88:	e8 e1 9f ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0018f8d:	83 c4 10             	add    esp,0x10
c0018f90:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0018f95:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018f9c:	75 05                	jne    c0018fa3 <CPU::displayFeatures()+0x12f>
c0018f9e:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0018fa3:	51                   	push   ecx
c0018fa4:	51                   	push   ecx
c0018fa5:	50                   	push   eax
c0018fa6:	68 47 b8 02 c0       	push   0xc002b847
c0018fab:	e8 be 9f ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0018fb0:	83 c4 10             	add    esp,0x10
c0018fb3:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0018fb8:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018fbf:	75 05                	jne    c0018fc6 <CPU::displayFeatures()+0x152>
c0018fc1:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0018fc6:	52                   	push   edx
c0018fc7:	52                   	push   edx
c0018fc8:	50                   	push   eax
c0018fc9:	68 5e b8 02 c0       	push   0xc002b85e
c0018fce:	e8 9b 9f ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0018fd3:	83 c4 10             	add    esp,0x10
c0018fd6:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0018fdb:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018fe2:	75 05                	jne    c0018fe9 <CPU::displayFeatures()+0x175>
c0018fe4:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0018fe9:	51                   	push   ecx
c0018fea:	51                   	push   ecx
c0018feb:	50                   	push   eax
c0018fec:	68 75 b8 02 c0       	push   0xc002b875
c0018ff1:	e8 78 9f ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0018ff6:	83 c4 10             	add    esp,0x10
c0018ff9:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0018ffe:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019005:	75 05                	jne    c001900c <CPU::displayFeatures()+0x198>
c0019007:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c001900c:	52                   	push   edx
c001900d:	52                   	push   edx
c001900e:	50                   	push   eax
c001900f:	68 8c b8 02 c0       	push   0xc002b88c
c0019014:	e8 55 9f ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0019019:	83 c4 10             	add    esp,0x10
c001901c:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0019021:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0019028:	75 05                	jne    c001902f <CPU::displayFeatures()+0x1bb>
c001902a:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c001902f:	51                   	push   ecx
c0019030:	51                   	push   ecx
c0019031:	50                   	push   eax
c0019032:	68 a3 b8 02 c0       	push   0xc002b8a3
c0019037:	e8 32 9f ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001903c:	83 c4 10             	add    esp,0x10
c001903f:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0019044:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001904b:	75 05                	jne    c0019052 <CPU::displayFeatures()+0x1de>
c001904d:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0019052:	52                   	push   edx
c0019053:	52                   	push   edx
c0019054:	50                   	push   eax
c0019055:	68 ba b8 02 c0       	push   0xc002b8ba
c001905a:	e8 0f 9f ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001905f:	83 c4 10             	add    esp,0x10
c0019062:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0019067:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001906e:	75 05                	jne    c0019075 <CPU::displayFeatures()+0x201>
c0019070:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0019075:	51                   	push   ecx
c0019076:	51                   	push   ecx
c0019077:	50                   	push   eax
c0019078:	68 d1 b8 02 c0       	push   0xc002b8d1
c001907d:	e8 ec 9e ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0019082:	83 c4 10             	add    esp,0x10
c0019085:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c001908a:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019091:	75 05                	jne    c0019098 <CPU::displayFeatures()+0x224>
c0019093:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0019098:	52                   	push   edx
c0019099:	52                   	push   edx
c001909a:	50                   	push   eax
c001909b:	68 e8 b8 02 c0       	push   0xc002b8e8
c00190a0:	e8 c9 9e ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00190a5:	83 c4 10             	add    esp,0x10
c00190a8:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c00190ad:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00190b4:	78 05                	js     c00190bb <CPU::displayFeatures()+0x247>
c00190b6:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c00190bb:	51                   	push   ecx
c00190bc:	51                   	push   ecx
c00190bd:	50                   	push   eax
c00190be:	68 ff b8 02 c0       	push   0xc002b8ff
c00190c3:	e8 a6 9e ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00190c8:	83 c4 10             	add    esp,0x10
c00190cb:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c00190d0:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00190d7:	75 05                	jne    c00190de <CPU::displayFeatures()+0x26a>
c00190d9:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c00190de:	52                   	push   edx
c00190df:	52                   	push   edx
c00190e0:	50                   	push   eax
c00190e1:	68 16 b9 02 c0       	push   0xc002b916
c00190e6:	e8 83 9e ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00190eb:	83 c4 18             	add    esp,0x18
c00190ee:	5b                   	pop    ebx
c00190ef:	c3                   	ret    

c00190f0 <CPU::detectFeatures()>:
c00190f0:	55                   	push   ebp
c00190f1:	57                   	push   edi
c00190f2:	56                   	push   esi
c00190f3:	53                   	push   ebx
c00190f4:	83 ec 50             	sub    esp,0x50
c00190f7:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00190fb:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019105:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001910c:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019112:	6a 0d                	push   0xd
c0019114:	6a 00                	push   0x0
c0019116:	57                   	push   edi
c0019117:	e8 5c 76 fe ff       	call   c0000778 <memset>
c001911c:	83 c4 10             	add    esp,0x10
c001911f:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0019124:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001912b:	0f 84 20 09 00 00    	je     c0019a51 <CPU::detectFeatures()+0x961>
c0019131:	83 ec 0c             	sub    esp,0xc
c0019134:	6a 10                	push   0x10
c0019136:	e8 f3 fb ff ff       	call   c0018d2e <CPU::cpuidCheckEDX(unsigned int)>
c001913b:	83 e0 01             	and    eax,0x1
c001913e:	8d 14 00             	lea    edx,[eax+eax*1]
c0019141:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019147:	83 e0 fd             	and    eax,0xfffffffd
c001914a:	09 d0                	or     eax,edx
c001914c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019152:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019159:	e8 d0 fb ff ff       	call   c0018d2e <CPU::cpuidCheckEDX(unsigned int)>
c001915e:	83 e0 01             	and    eax,0x1
c0019161:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019168:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001916e:	83 e0 fb             	and    eax,0xfffffffb
c0019171:	09 d0                	or     eax,edx
c0019173:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019179:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019180:	e8 a9 fb ff ff       	call   c0018d2e <CPU::cpuidCheckEDX(unsigned int)>
c0019185:	83 e0 01             	and    eax,0x1
c0019188:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001918f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019195:	83 e0 f7             	and    eax,0xfffffff7
c0019198:	09 d0                	or     eax,edx
c001919a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191a0:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00191a7:	e8 82 fb ff ff       	call   c0018d2e <CPU::cpuidCheckEDX(unsigned int)>
c00191ac:	83 e0 01             	and    eax,0x1
c00191af:	c1 e0 04             	shl    eax,0x4
c00191b2:	88 c2                	mov    dl,al
c00191b4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191ba:	83 e0 ef             	and    eax,0xffffffef
c00191bd:	09 d0                	or     eax,edx
c00191bf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191c5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00191cc:	e8 5d fb ff ff       	call   c0018d2e <CPU::cpuidCheckEDX(unsigned int)>
c00191d1:	83 e0 01             	and    eax,0x1
c00191d4:	c1 e0 05             	shl    eax,0x5
c00191d7:	88 c2                	mov    dl,al
c00191d9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191df:	83 e0 df             	and    eax,0xffffffdf
c00191e2:	09 d0                	or     eax,edx
c00191e4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00191f1:	e8 38 fb ff ff       	call   c0018d2e <CPU::cpuidCheckEDX(unsigned int)>
c00191f6:	83 e0 01             	and    eax,0x1
c00191f9:	8d 14 00             	lea    edx,[eax+eax*1]
c00191fc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019202:	83 e0 fd             	and    eax,0xfffffffd
c0019205:	09 d0                	or     eax,edx
c0019207:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001920d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019214:	e8 15 fb ff ff       	call   c0018d2e <CPU::cpuidCheckEDX(unsigned int)>
c0019219:	83 e0 01             	and    eax,0x1
c001921c:	c1 e0 06             	shl    eax,0x6
c001921f:	88 c2                	mov    dl,al
c0019221:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019227:	83 e0 bf             	and    eax,0xffffffbf
c001922a:	09 d0                	or     eax,edx
c001922c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019232:	58                   	pop    eax
c0019233:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019237:	56                   	push   esi
c0019238:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001923c:	55                   	push   ebp
c001923d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019241:	50                   	push   eax
c0019242:	8d 54 24 28          	lea    edx,[esp+0x28]
c0019246:	52                   	push   edx
c0019247:	6a 00                	push   0x0
c0019249:	e8 5c fa ff ff       	call   c0018caa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001924e:	83 c4 1c             	add    esp,0x1c
c0019251:	6a 04                	push   0x4
c0019253:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019257:	50                   	push   eax
c0019258:	57                   	push   edi
c0019259:	e8 e6 74 fe ff       	call   c0000744 <memcpy>
c001925e:	83 c4 0c             	add    esp,0xc
c0019261:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0019267:	6a 04                	push   0x4
c0019269:	56                   	push   esi
c001926a:	50                   	push   eax
c001926b:	e8 d4 74 fe ff       	call   c0000744 <memcpy>
c0019270:	83 c4 0c             	add    esp,0xc
c0019273:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019279:	6a 04                	push   0x4
c001927b:	55                   	push   ebp
c001927c:	50                   	push   eax
c001927d:	e8 c2 74 fe ff       	call   c0000744 <memcpy>
c0019282:	58                   	pop    eax
c0019283:	5a                   	pop    edx
c0019284:	68 2d b9 02 c0       	push   0xc002b92d
c0019289:	57                   	push   edi
c001928a:	e8 31 76 fe ff       	call   c00008c0 <strcmp>
c001928f:	83 c4 10             	add    esp,0x10
c0019292:	85 c0                	test   eax,eax
c0019294:	75 0f                	jne    c00192a5 <CPU::detectFeatures()+0x1b5>
c0019296:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00192a0:	e9 22 02 00 00       	jmp    c00194c7 <CPU::detectFeatures()+0x3d7>
c00192a5:	50                   	push   eax
c00192a6:	50                   	push   eax
c00192a7:	68 3a b9 02 c0       	push   0xc002b93a
c00192ac:	57                   	push   edi
c00192ad:	e8 0e 76 fe ff       	call   c00008c0 <strcmp>
c00192b2:	83 c4 10             	add    esp,0x10
c00192b5:	85 c0                	test   eax,eax
c00192b7:	74 dd                	je     c0019296 <CPU::detectFeatures()+0x1a6>
c00192b9:	51                   	push   ecx
c00192ba:	51                   	push   ecx
c00192bb:	68 47 b9 02 c0       	push   0xc002b947
c00192c0:	57                   	push   edi
c00192c1:	e8 fa 75 fe ff       	call   c00008c0 <strcmp>
c00192c6:	83 c4 10             	add    esp,0x10
c00192c9:	85 c0                	test   eax,eax
c00192cb:	74 2a                	je     c00192f7 <CPU::detectFeatures()+0x207>
c00192cd:	52                   	push   edx
c00192ce:	52                   	push   edx
c00192cf:	68 54 b9 02 c0       	push   0xc002b954
c00192d4:	57                   	push   edi
c00192d5:	e8 e6 75 fe ff       	call   c00008c0 <strcmp>
c00192da:	83 c4 10             	add    esp,0x10
c00192dd:	85 c0                	test   eax,eax
c00192df:	74 16                	je     c00192f7 <CPU::detectFeatures()+0x207>
c00192e1:	50                   	push   eax
c00192e2:	50                   	push   eax
c00192e3:	68 61 b9 02 c0       	push   0xc002b961
c00192e8:	57                   	push   edi
c00192e9:	e8 d2 75 fe ff       	call   c00008c0 <strcmp>
c00192ee:	83 c4 10             	add    esp,0x10
c00192f1:	85 c0                	test   eax,eax
c00192f3:	74 48                	je     c001933d <CPU::detectFeatures()+0x24d>
c00192f5:	eb 0f                	jmp    c0019306 <CPU::detectFeatures()+0x216>
c00192f7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019301:	e9 c1 01 00 00       	jmp    c00194c7 <CPU::detectFeatures()+0x3d7>
c0019306:	50                   	push   eax
c0019307:	50                   	push   eax
c0019308:	68 6e b9 02 c0       	push   0xc002b96e
c001930d:	57                   	push   edi
c001930e:	e8 ad 75 fe ff       	call   c00008c0 <strcmp>
c0019313:	83 c4 10             	add    esp,0x10
c0019316:	85 c0                	test   eax,eax
c0019318:	74 23                	je     c001933d <CPU::detectFeatures()+0x24d>
c001931a:	50                   	push   eax
c001931b:	50                   	push   eax
c001931c:	68 7b b9 02 c0       	push   0xc002b97b
c0019321:	57                   	push   edi
c0019322:	e8 99 75 fe ff       	call   c00008c0 <strcmp>
c0019327:	83 c4 10             	add    esp,0x10
c001932a:	85 c0                	test   eax,eax
c001932c:	75 1e                	jne    c001934c <CPU::detectFeatures()+0x25c>
c001932e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019338:	e9 8a 01 00 00       	jmp    c00194c7 <CPU::detectFeatures()+0x3d7>
c001933d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019347:	e9 7b 01 00 00       	jmp    c00194c7 <CPU::detectFeatures()+0x3d7>
c001934c:	50                   	push   eax
c001934d:	50                   	push   eax
c001934e:	68 88 b9 02 c0       	push   0xc002b988
c0019353:	57                   	push   edi
c0019354:	e8 67 75 fe ff       	call   c00008c0 <strcmp>
c0019359:	83 c4 10             	add    esp,0x10
c001935c:	85 c0                	test   eax,eax
c001935e:	75 0f                	jne    c001936f <CPU::detectFeatures()+0x27f>
c0019360:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001936a:	e9 58 01 00 00       	jmp    c00194c7 <CPU::detectFeatures()+0x3d7>
c001936f:	50                   	push   eax
c0019370:	50                   	push   eax
c0019371:	68 47 b9 02 c0       	push   0xc002b947
c0019376:	57                   	push   edi
c0019377:	e8 44 75 fe ff       	call   c00008c0 <strcmp>
c001937c:	83 c4 10             	add    esp,0x10
c001937f:	85 c0                	test   eax,eax
c0019381:	75 0f                	jne    c0019392 <CPU::detectFeatures()+0x2a2>
c0019383:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001938d:	e9 35 01 00 00       	jmp    c00194c7 <CPU::detectFeatures()+0x3d7>
c0019392:	50                   	push   eax
c0019393:	50                   	push   eax
c0019394:	68 95 b9 02 c0       	push   0xc002b995
c0019399:	57                   	push   edi
c001939a:	e8 21 75 fe ff       	call   c00008c0 <strcmp>
c001939f:	83 c4 10             	add    esp,0x10
c00193a2:	85 c0                	test   eax,eax
c00193a4:	75 0f                	jne    c00193b5 <CPU::detectFeatures()+0x2c5>
c00193a6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00193b0:	e9 12 01 00 00       	jmp    c00194c7 <CPU::detectFeatures()+0x3d7>
c00193b5:	51                   	push   ecx
c00193b6:	51                   	push   ecx
c00193b7:	68 a2 b9 02 c0       	push   0xc002b9a2
c00193bc:	57                   	push   edi
c00193bd:	e8 fe 74 fe ff       	call   c00008c0 <strcmp>
c00193c2:	83 c4 10             	add    esp,0x10
c00193c5:	85 c0                	test   eax,eax
c00193c7:	75 0f                	jne    c00193d8 <CPU::detectFeatures()+0x2e8>
c00193c9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00193d3:	e9 ef 00 00 00       	jmp    c00194c7 <CPU::detectFeatures()+0x3d7>
c00193d8:	52                   	push   edx
c00193d9:	52                   	push   edx
c00193da:	68 af b9 02 c0       	push   0xc002b9af
c00193df:	57                   	push   edi
c00193e0:	e8 db 74 fe ff       	call   c00008c0 <strcmp>
c00193e5:	83 c4 10             	add    esp,0x10
c00193e8:	85 c0                	test   eax,eax
c00193ea:	75 0f                	jne    c00193fb <CPU::detectFeatures()+0x30b>
c00193ec:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00193f6:	e9 cc 00 00 00       	jmp    c00194c7 <CPU::detectFeatures()+0x3d7>
c00193fb:	50                   	push   eax
c00193fc:	50                   	push   eax
c00193fd:	68 bc b9 02 c0       	push   0xc002b9bc
c0019402:	57                   	push   edi
c0019403:	e8 b8 74 fe ff       	call   c00008c0 <strcmp>
c0019408:	83 c4 10             	add    esp,0x10
c001940b:	85 c0                	test   eax,eax
c001940d:	75 0f                	jne    c001941e <CPU::detectFeatures()+0x32e>
c001940f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019419:	e9 a9 00 00 00       	jmp    c00194c7 <CPU::detectFeatures()+0x3d7>
c001941e:	50                   	push   eax
c001941f:	50                   	push   eax
c0019420:	68 c9 b9 02 c0       	push   0xc002b9c9
c0019425:	57                   	push   edi
c0019426:	e8 95 74 fe ff       	call   c00008c0 <strcmp>
c001942b:	83 c4 10             	add    esp,0x10
c001942e:	85 c0                	test   eax,eax
c0019430:	75 0f                	jne    c0019441 <CPU::detectFeatures()+0x351>
c0019432:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001943c:	e9 86 00 00 00       	jmp    c00194c7 <CPU::detectFeatures()+0x3d7>
c0019441:	50                   	push   eax
c0019442:	50                   	push   eax
c0019443:	68 d6 b9 02 c0       	push   0xc002b9d6
c0019448:	57                   	push   edi
c0019449:	e8 72 74 fe ff       	call   c00008c0 <strcmp>
c001944e:	83 c4 10             	add    esp,0x10
c0019451:	85 c0                	test   eax,eax
c0019453:	75 0c                	jne    c0019461 <CPU::detectFeatures()+0x371>
c0019455:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001945f:	eb 66                	jmp    c00194c7 <CPU::detectFeatures()+0x3d7>
c0019461:	50                   	push   eax
c0019462:	50                   	push   eax
c0019463:	68 e3 b9 02 c0       	push   0xc002b9e3
c0019468:	57                   	push   edi
c0019469:	e8 52 74 fe ff       	call   c00008c0 <strcmp>
c001946e:	83 c4 10             	add    esp,0x10
c0019471:	85 c0                	test   eax,eax
c0019473:	75 0c                	jne    c0019481 <CPU::detectFeatures()+0x391>
c0019475:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001947f:	eb 46                	jmp    c00194c7 <CPU::detectFeatures()+0x3d7>
c0019481:	50                   	push   eax
c0019482:	50                   	push   eax
c0019483:	68 f0 b9 02 c0       	push   0xc002b9f0
c0019488:	57                   	push   edi
c0019489:	e8 32 74 fe ff       	call   c00008c0 <strcmp>
c001948e:	83 c4 10             	add    esp,0x10
c0019491:	85 c0                	test   eax,eax
c0019493:	74 e0                	je     c0019475 <CPU::detectFeatures()+0x385>
c0019495:	50                   	push   eax
c0019496:	50                   	push   eax
c0019497:	68 fd b9 02 c0       	push   0xc002b9fd
c001949c:	57                   	push   edi
c001949d:	e8 1e 74 fe ff       	call   c00008c0 <strcmp>
c00194a2:	83 c4 10             	add    esp,0x10
c00194a5:	85 c0                	test   eax,eax
c00194a7:	74 cc                	je     c0019475 <CPU::detectFeatures()+0x385>
c00194a9:	51                   	push   ecx
c00194aa:	51                   	push   ecx
c00194ab:	68 0a ba 02 c0       	push   0xc002ba0a
c00194b0:	57                   	push   edi
c00194b1:	e8 0a 74 fe ff       	call   c00008c0 <strcmp>
c00194b6:	83 c4 10             	add    esp,0x10
c00194b9:	85 c0                	test   eax,eax
c00194bb:	74 b8                	je     c0019475 <CPU::detectFeatures()+0x385>
c00194bd:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00194c7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00194cc:	0f 86 be 00 00 00    	jbe    c0019590 <CPU::detectFeatures()+0x4a0>
c00194d2:	83 ec 0c             	sub    esp,0xc
c00194d5:	68 80 00 00 00       	push   0x80
c00194da:	e8 ab f8 ff ff       	call   c0018d8a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194df:	83 e0 01             	and    eax,0x1
c00194e2:	c1 e0 06             	shl    eax,0x6
c00194e5:	88 c2                	mov    dl,al
c00194e7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194ed:	83 e0 bf             	and    eax,0xffffffbf
c00194f0:	09 d0                	or     eax,edx
c00194f2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194f8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00194ff:	e8 86 f8 ff ff       	call   c0018d8a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019504:	83 e0 01             	and    eax,0x1
c0019507:	c1 e0 04             	shl    eax,0x4
c001950a:	88 c2                	mov    dl,al
c001950c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019512:	83 e0 ef             	and    eax,0xffffffef
c0019515:	09 d0                	or     eax,edx
c0019517:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001951d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019524:	e8 61 f8 ff ff       	call   c0018d8a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019529:	c1 e0 07             	shl    eax,0x7
c001952c:	88 c2                	mov    dl,al
c001952e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019534:	83 e0 7f             	and    eax,0x7f
c0019537:	09 d0                	or     eax,edx
c0019539:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001953f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019546:	e8 6d f8 ff ff       	call   c0018db8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001954b:	83 e0 01             	and    eax,0x1
c001954e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019555:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001955b:	83 e0 f7             	and    eax,0xfffffff7
c001955e:	09 d0                	or     eax,edx
c0019560:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019566:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001956d:	e8 46 f8 ff ff       	call   c0018db8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019572:	83 c4 10             	add    esp,0x10
c0019575:	83 e0 01             	and    eax,0x1
c0019578:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001957f:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019585:	83 e0 fb             	and    eax,0xfffffffb
c0019588:	09 d0                	or     eax,edx
c001958a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019590:	83 ec 0c             	sub    esp,0xc
c0019593:	56                   	push   esi
c0019594:	55                   	push   ebp
c0019595:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019599:	57                   	push   edi
c001959a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001959e:	50                   	push   eax
c001959f:	6a 01                	push   0x1
c00195a1:	e8 04 f7 ff ff       	call   c0018caa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00195a6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00195aa:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00195b0:	88 ca                	mov    dl,cl
c00195b2:	83 e0 f0             	and    eax,0xfffffff0
c00195b5:	83 e2 0f             	and    edx,0xf
c00195b8:	09 d0                	or     eax,edx
c00195ba:	88 ca                	mov    dl,cl
c00195bc:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00195c2:	c0 ea 04             	shr    dl,0x4
c00195c5:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00195c9:	0f b6 c2             	movzx  eax,dl
c00195cc:	83 c4 20             	add    esp,0x20
c00195cf:	c1 e0 06             	shl    eax,0x6
c00195d2:	89 c5                	mov    ebp,eax
c00195d4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195da:	66 25 3f c0          	and    ax,0xc03f
c00195de:	09 e8                	or     eax,ebp
c00195e0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195e7:	89 c8                	mov    eax,ecx
c00195e9:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00195ef:	c1 e8 08             	shr    eax,0x8
c00195f2:	83 e2 3f             	and    edx,0x3f
c00195f5:	83 e0 0f             	and    eax,0xf
c00195f8:	89 c5                	mov    ebp,eax
c00195fa:	c1 e5 06             	shl    ebp,0x6
c00195fd:	09 d5                	or     ebp,edx
c00195ff:	89 ea                	mov    edx,ebp
c0019601:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019607:	88 c2                	mov    dl,al
c0019609:	c0 ea 02             	shr    dl,0x2
c001960c:	89 d5                	mov    ebp,edx
c001960e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019614:	83 e2 c0             	and    edx,0xffffffc0
c0019617:	09 d5                	or     ebp,edx
c0019619:	89 ea                	mov    edx,ebp
c001961b:	89 cd                	mov    ebp,ecx
c001961d:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019623:	c1 ed 0c             	shr    ebp,0xc
c0019626:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001962c:	83 e5 03             	and    ebp,0x3
c001962f:	83 e2 cf             	and    edx,0xffffffcf
c0019632:	c1 e5 04             	shl    ebp,0x4
c0019635:	09 d5                	or     ebp,edx
c0019637:	3c 06                	cmp    al,0x6
c0019639:	89 ea                	mov    edx,ebp
c001963b:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019641:	74 04                	je     c0019647 <CPU::detectFeatures()+0x557>
c0019643:	3c 0f                	cmp    al,0xf
c0019645:	75 5c                	jne    c00196a3 <CPU::detectFeatures()+0x5b3>
c0019647:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001964b:	89 cd                	mov    ebp,ecx
c001964d:	c1 ed 10             	shr    ebp,0x10
c0019650:	c1 e5 04             	shl    ebp,0x4
c0019653:	09 ea                	or     edx,ebp
c0019655:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001965b:	0f b6 d2             	movzx  edx,dl
c001965e:	66 81 e5 3f c0       	and    bp,0xc03f
c0019663:	c1 e2 06             	shl    edx,0x6
c0019666:	09 ea                	or     edx,ebp
c0019668:	3c 0f                	cmp    al,0xf
c001966a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019671:	75 30                	jne    c00196a3 <CPU::detectFeatures()+0x5b3>
c0019673:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019679:	c1 e9 14             	shr    ecx,0x14
c001967c:	83 e0 3f             	and    eax,0x3f
c001967f:	83 c1 0f             	add    ecx,0xf
c0019682:	88 ca                	mov    dl,cl
c0019684:	c0 e9 02             	shr    cl,0x2
c0019687:	c1 e2 06             	shl    edx,0x6
c001968a:	09 d0                	or     eax,edx
c001968c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019692:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019698:	83 e0 c0             	and    eax,0xffffffc0
c001969b:	09 c1                	or     ecx,eax
c001969d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00196a3:	83 ec 0c             	sub    esp,0xc
c00196a6:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00196ad:	56                   	push   esi
c00196ae:	8d 44 24 28          	lea    eax,[esp+0x28]
c00196b2:	50                   	push   eax
c00196b3:	57                   	push   edi
c00196b4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00196b8:	55                   	push   ebp
c00196b9:	68 00 00 00 80       	push   0x80000000
c00196be:	e8 e7 f5 ff ff       	call   c0018caa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196c3:	83 c4 20             	add    esp,0x20
c00196c6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00196ce:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196d2:	76 1e                	jbe    c00196f2 <CPU::detectFeatures()+0x602>
c00196d4:	83 ec 0c             	sub    esp,0xc
c00196d7:	56                   	push   esi
c00196d8:	50                   	push   eax
c00196d9:	57                   	push   edi
c00196da:	55                   	push   ebp
c00196db:	68 01 00 00 80       	push   0x80000001
c00196e0:	e8 c5 f5 ff ff       	call   c0018caa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196e5:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00196ef:	83 c4 20             	add    esp,0x20
c00196f2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00196f8:	83 f8 01             	cmp    eax,0x1
c00196fb:	75 6f                	jne    c001976c <CPU::detectFeatures()+0x67c>
c00196fd:	51                   	push   ecx
c00196fe:	51                   	push   ecx
c00196ff:	68 16 ba 02 c0       	push   0xc002ba16
c0019704:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019708:	56                   	push   esi
c0019709:	e8 26 71 fe ff       	call   c0000834 <strcpy>
c001970e:	5f                   	pop    edi
c001970f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019715:	5d                   	pop    ebp
c0019716:	66 c1 e8 06          	shr    ax,0x6
c001971a:	0f b6 c0             	movzx  eax,al
c001971d:	50                   	push   eax
c001971e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019724:	c1 e8 0e             	shr    eax,0xe
c0019727:	0f b6 c0             	movzx  eax,al
c001972a:	50                   	push   eax
c001972b:	e8 24 f2 ff ff       	call   c0018954 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019730:	5a                   	pop    edx
c0019731:	59                   	pop    ecx
c0019732:	50                   	push   eax
c0019733:	56                   	push   esi
c0019734:	e8 3b 72 fe ff       	call   c0000974 <strcat>
c0019739:	5f                   	pop    edi
c001973a:	5d                   	pop    ebp
c001973b:	56                   	push   esi
c001973c:	53                   	push   ebx
c001973d:	e8 34 ae ff ff       	call   c0014576 <Device::setName(char const*)>
c0019742:	58                   	pop    eax
c0019743:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019749:	5a                   	pop    edx
c001974a:	68 1d ba 02 c0       	push   0xc002ba1d
c001974f:	50                   	push   eax
c0019750:	e8 6b 71 fe ff       	call   c00008c0 <strcmp>
c0019755:	83 c4 10             	add    esp,0x10
c0019758:	85 c0                	test   eax,eax
c001975a:	0f 85 71 03 00 00    	jne    c0019ad1 <CPU::detectFeatures()+0x9e1>
c0019760:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019767:	e9 65 03 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x9e1>
c001976c:	83 f8 02             	cmp    eax,0x2
c001976f:	0f 85 b5 00 00 00    	jne    c001982a <CPU::detectFeatures()+0x73a>
c0019775:	57                   	push   edi
c0019776:	57                   	push   edi
c0019777:	68 2f ba 02 c0       	push   0xc002ba2f
c001977c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019780:	56                   	push   esi
c0019781:	e8 ae 70 fe ff       	call   c0000834 <strcpy>
c0019786:	5d                   	pop    ebp
c0019787:	58                   	pop    eax
c0019788:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001978e:	66 c1 e8 06          	shr    ax,0x6
c0019792:	0f b6 c0             	movzx  eax,al
c0019795:	50                   	push   eax
c0019796:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001979c:	c1 e8 0e             	shr    eax,0xe
c001979f:	0f b6 c0             	movzx  eax,al
c00197a2:	50                   	push   eax
c00197a3:	e8 18 f0 ff ff       	call   c00187c0 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00197a8:	5a                   	pop    edx
c00197a9:	59                   	pop    ecx
c00197aa:	50                   	push   eax
c00197ab:	56                   	push   esi
c00197ac:	e8 c3 71 fe ff       	call   c0000974 <strcat>
c00197b1:	5f                   	pop    edi
c00197b2:	5d                   	pop    ebp
c00197b3:	56                   	push   esi
c00197b4:	53                   	push   ebx
c00197b5:	e8 bc ad ff ff       	call   c0014576 <Device::setName(char const*)>
c00197ba:	58                   	pop    eax
c00197bb:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197c1:	5a                   	pop    edx
c00197c2:	68 34 ba 02 c0       	push   0xc002ba34
c00197c7:	50                   	push   eax
c00197c8:	e8 f3 70 fe ff       	call   c00008c0 <strcmp>
c00197cd:	83 c4 10             	add    esp,0x10
c00197d0:	85 c0                	test   eax,eax
c00197d2:	75 20                	jne    c00197f4 <CPU::detectFeatures()+0x704>
c00197d4:	8b 15 e8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5e8
c00197da:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00197e0:	a8 01                	test   al,0x1
c00197e2:	74 10                	je     c00197f4 <CPU::detectFeatures()+0x704>
c00197e4:	83 e0 fe             	and    eax,0xfffffffe
c00197e7:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00197ed:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00197f4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197fa:	c1 e8 0e             	shr    eax,0xe
c00197fd:	3c 05                	cmp    al,0x5
c00197ff:	0f 85 cc 02 00 00    	jne    c0019ad1 <CPU::detectFeatures()+0x9e1>
c0019805:	56                   	push   esi
c0019806:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001980c:	83 e0 0f             	and    eax,0xf
c001980f:	50                   	push   eax
c0019810:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019816:	66 c1 e8 06          	shr    ax,0x6
c001981a:	0f b6 c0             	movzx  eax,al
c001981d:	50                   	push   eax
c001981e:	6a 05                	push   0x5
c0019820:	e8 11 f4 ff ff       	call   c0018c36 <CPU::AMD_K6_writeback(int, int, int)>
c0019825:	e9 1f 02 00 00       	jmp    c0019a49 <CPU::detectFeatures()+0x959>
c001982a:	8d 50 fd             	lea    edx,[eax-0x3]
c001982d:	83 fa 01             	cmp    edx,0x1
c0019830:	76 09                	jbe    c001983b <CPU::detectFeatures()+0x74b>
c0019832:	83 f8 06             	cmp    eax,0x6
c0019835:	0f 85 91 01 00 00    	jne    c00199cc <CPU::detectFeatures()+0x8dc>
c001983b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019841:	c1 ea 0e             	shr    edx,0xe
c0019844:	80 fa 05             	cmp    dl,0x5
c0019847:	75 7b                	jne    c00198c4 <CPU::detectFeatures()+0x7d4>
c0019849:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001984f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019854:	66 81 fa 00 01       	cmp    dx,0x100
c0019859:	75 0c                	jne    c0019867 <CPU::detectFeatures()+0x777>
c001985b:	51                   	push   ecx
c001985c:	51                   	push   ecx
c001985d:	68 3b ba 02 c0       	push   0xc002ba3b
c0019862:	e9 dc 01 00 00       	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c0019867:	66 81 fa 00 02       	cmp    dx,0x200
c001986c:	75 0c                	jne    c001987a <CPU::detectFeatures()+0x78a>
c001986e:	52                   	push   edx
c001986f:	52                   	push   edx
c0019870:	68 4e ba 02 c0       	push   0xc002ba4e
c0019875:	e9 c9 01 00 00       	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c001987a:	66 81 fa 40 02       	cmp    dx,0x240
c001987f:	75 0c                	jne    c001988d <CPU::detectFeatures()+0x79d>
c0019881:	50                   	push   eax
c0019882:	50                   	push   eax
c0019883:	68 60 ba 02 c0       	push   0xc002ba60
c0019888:	e9 b6 01 00 00       	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c001988d:	83 f8 06             	cmp    eax,0x6
c0019890:	75 0c                	jne    c001989e <CPU::detectFeatures()+0x7ae>
c0019892:	50                   	push   eax
c0019893:	50                   	push   eax
c0019894:	68 72 ba 02 c0       	push   0xc002ba72
c0019899:	e9 a5 01 00 00       	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c001989e:	83 f8 04             	cmp    eax,0x4
c00198a1:	75 0c                	jne    c00198af <CPU::detectFeatures()+0x7bf>
c00198a3:	50                   	push   eax
c00198a4:	50                   	push   eax
c00198a5:	68 7e ba 02 c0       	push   0xc002ba7e
c00198aa:	e9 94 01 00 00       	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c00198af:	83 f8 03             	cmp    eax,0x3
c00198b2:	0f 85 19 02 00 00    	jne    c0019ad1 <CPU::detectFeatures()+0x9e1>
c00198b8:	50                   	push   eax
c00198b9:	50                   	push   eax
c00198ba:	68 86 ba 02 c0       	push   0xc002ba86
c00198bf:	e9 7f 01 00 00       	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c00198c4:	80 fa 06             	cmp    dl,0x6
c00198c7:	0f 85 db 00 00 00    	jne    c00199a8 <CPU::detectFeatures()+0x8b8>
c00198cd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198d3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198d8:	66 81 fa 80 01       	cmp    dx,0x180
c00198dd:	75 0c                	jne    c00198eb <CPU::detectFeatures()+0x7fb>
c00198df:	50                   	push   eax
c00198e0:	50                   	push   eax
c00198e1:	68 91 ba 02 c0       	push   0xc002ba91
c00198e6:	e9 58 01 00 00       	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c00198eb:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00198f1:	66 f7 c1 80 ff       	test   cx,0xff80
c00198f6:	75 0c                	jne    c0019904 <CPU::detectFeatures()+0x814>
c00198f8:	50                   	push   eax
c00198f9:	50                   	push   eax
c00198fa:	68 a1 ba 02 c0       	push   0xc002baa1
c00198ff:	e9 3f 01 00 00       	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c0019904:	66 81 fa 40 02       	cmp    dx,0x240
c0019909:	75 0c                	jne    c0019917 <CPU::detectFeatures()+0x827>
c001990b:	55                   	push   ebp
c001990c:	55                   	push   ebp
c001990d:	68 a8 ba 02 c0       	push   0xc002baa8
c0019912:	e9 2c 01 00 00       	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c0019917:	66 81 fa 80 02       	cmp    dx,0x280
c001991c:	75 0c                	jne    c001992a <CPU::detectFeatures()+0x83a>
c001991e:	57                   	push   edi
c001991f:	57                   	push   edi
c0019920:	68 b1 ba 02 c0       	push   0xc002bab1
c0019925:	e9 19 01 00 00       	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c001992a:	66 81 fa 40 03       	cmp    dx,0x340
c001992f:	74 ed                	je     c001991e <CPU::detectFeatures()+0x82e>
c0019931:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019936:	75 0c                	jne    c0019944 <CPU::detectFeatures()+0x854>
c0019938:	56                   	push   esi
c0019939:	56                   	push   esi
c001993a:	68 b8 ba 02 c0       	push   0xc002bab8
c001993f:	e9 ff 00 00 00       	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c0019944:	83 f8 06             	cmp    eax,0x6
c0019947:	0f 84 45 ff ff ff    	je     c0019892 <CPU::detectFeatures()+0x7a2>
c001994d:	83 f8 04             	cmp    eax,0x4
c0019950:	0f 84 4d ff ff ff    	je     c00198a3 <CPU::detectFeatures()+0x7b3>
c0019956:	83 f8 03             	cmp    eax,0x3
c0019959:	0f 85 72 01 00 00    	jne    c0019ad1 <CPU::detectFeatures()+0x9e1>
c001995f:	51                   	push   ecx
c0019960:	51                   	push   ecx
c0019961:	68 c1 ba 02 c0       	push   0xc002bac1
c0019966:	53                   	push   ebx
c0019967:	e8 0a ac ff ff       	call   c0014576 <Device::setName(char const*)>
c001996c:	b1 c1                	mov    cl,0xc1
c001996e:	88 c8                	mov    al,cl
c0019970:	e6 22                	out    0x22,al
c0019972:	e4 23                	in     al,0x23
c0019974:	88 c2                	mov    dl,al
c0019976:	88 c8                	mov    al,cl
c0019978:	e6 22                	out    0x22,al
c001997a:	88 d0                	mov    al,dl
c001997c:	83 c8 10             	or     eax,0x10
c001997f:	e6 23                	out    0x23,al
c0019981:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019988:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001998b:	89 d0                	mov    eax,edx
c001998d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019993:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019997:	40                   	inc    eax
c0019998:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001999e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00199a3:	e9 a1 00 00 00       	jmp    c0019a49 <CPU::detectFeatures()+0x959>
c00199a8:	83 f8 06             	cmp    eax,0x6
c00199ab:	0f 84 e1 fe ff ff    	je     c0019892 <CPU::detectFeatures()+0x7a2>
c00199b1:	83 f8 04             	cmp    eax,0x4
c00199b4:	0f 84 e9 fe ff ff    	je     c00198a3 <CPU::detectFeatures()+0x7b3>
c00199ba:	83 f8 03             	cmp    eax,0x3
c00199bd:	0f 85 0e 01 00 00    	jne    c0019ad1 <CPU::detectFeatures()+0x9e1>
c00199c3:	52                   	push   edx
c00199c4:	52                   	push   edx
c00199c5:	68 cc ba 02 c0       	push   0xc002bacc
c00199ca:	eb 77                	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c00199cc:	83 f8 07             	cmp    eax,0x7
c00199cf:	75 09                	jne    c00199da <CPU::detectFeatures()+0x8ea>
c00199d1:	50                   	push   eax
c00199d2:	50                   	push   eax
c00199d3:	68 d6 ba 02 c0       	push   0xc002bad6
c00199d8:	eb 69                	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c00199da:	83 f8 0a             	cmp    eax,0xa
c00199dd:	75 09                	jne    c00199e8 <CPU::detectFeatures()+0x8f8>
c00199df:	50                   	push   eax
c00199e0:	50                   	push   eax
c00199e1:	68 e1 ba 02 c0       	push   0xc002bae1
c00199e6:	eb 5b                	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c00199e8:	83 f8 0b             	cmp    eax,0xb
c00199eb:	75 09                	jne    c00199f6 <CPU::detectFeatures()+0x906>
c00199ed:	50                   	push   eax
c00199ee:	50                   	push   eax
c00199ef:	68 e9 ba 02 c0       	push   0xc002bae9
c00199f4:	eb 4d                	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c00199f6:	83 f8 08             	cmp    eax,0x8
c00199f9:	75 09                	jne    c0019a04 <CPU::detectFeatures()+0x914>
c00199fb:	50                   	push   eax
c00199fc:	50                   	push   eax
c00199fd:	68 f2 ba 02 c0       	push   0xc002baf2
c0019a02:	eb 3f                	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c0019a04:	83 f8 09             	cmp    eax,0x9
c0019a07:	75 09                	jne    c0019a12 <CPU::detectFeatures()+0x922>
c0019a09:	50                   	push   eax
c0019a0a:	50                   	push   eax
c0019a0b:	68 fa ba 02 c0       	push   0xc002bafa
c0019a10:	eb 31                	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c0019a12:	83 f8 05             	cmp    eax,0x5
c0019a15:	75 09                	jne    c0019a20 <CPU::detectFeatures()+0x930>
c0019a17:	50                   	push   eax
c0019a18:	50                   	push   eax
c0019a19:	68 02 bb 02 c0       	push   0xc002bb02
c0019a1e:	eb 23                	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c0019a20:	83 f8 0c             	cmp    eax,0xc
c0019a23:	75 09                	jne    c0019a2e <CPU::detectFeatures()+0x93e>
c0019a25:	55                   	push   ebp
c0019a26:	55                   	push   ebp
c0019a27:	68 10 bb 02 c0       	push   0xc002bb10
c0019a2c:	eb 15                	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c0019a2e:	83 f8 0d             	cmp    eax,0xd
c0019a31:	75 09                	jne    c0019a3c <CPU::detectFeatures()+0x94c>
c0019a33:	57                   	push   edi
c0019a34:	57                   	push   edi
c0019a35:	68 1b bb 02 c0       	push   0xc002bb1b
c0019a3a:	eb 07                	jmp    c0019a43 <CPU::detectFeatures()+0x953>
c0019a3c:	56                   	push   esi
c0019a3d:	56                   	push   esi
c0019a3e:	68 2f bb 02 c0       	push   0xc002bb2f
c0019a43:	53                   	push   ebx
c0019a44:	e8 2d ab ff ff       	call   c0014576 <Device::setName(char const*)>
c0019a49:	83 c4 10             	add    esp,0x10
c0019a4c:	e9 80 00 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x9e1>
c0019a51:	51                   	push   ecx
c0019a52:	51                   	push   ecx
c0019a53:	68 7b b9 02 c0       	push   0xc002b97b
c0019a58:	57                   	push   edi
c0019a59:	e8 d6 6d fe ff       	call   c0000834 <strcpy>
c0019a5e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019a68:	e8 41 68 fe ff       	call   c00002ae <is486>
c0019a6d:	83 c4 10             	add    esp,0x10
c0019a70:	85 c0                	test   eax,eax
c0019a72:	74 2b                	je     c0019a9f <CPU::detectFeatures()+0x9af>
c0019a74:	52                   	push   edx
c0019a75:	52                   	push   edx
c0019a76:	68 3b bb 02 c0       	push   0xc002bb3b
c0019a7b:	53                   	push   ebx
c0019a7c:	e8 f5 aa ff ff       	call   c0014576 <Device::setName(char const*)>
c0019a81:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a88:	0f 20 c0             	mov    eax,cr0
c0019a8b:	83 e0 14             	and    eax,0x14
c0019a8e:	83 c4 10             	add    esp,0x10
c0019a91:	83 f8 04             	cmp    eax,0x4
c0019a94:	75 1f                	jne    c0019ab5 <CPU::detectFeatures()+0x9c5>
c0019a96:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019a9d:	eb 32                	jmp    c0019ad1 <CPU::detectFeatures()+0x9e1>
c0019a9f:	50                   	push   eax
c0019aa0:	50                   	push   eax
c0019aa1:	68 46 bb 02 c0       	push   0xc002bb46
c0019aa6:	53                   	push   ebx
c0019aa7:	e8 ca aa ff ff       	call   c0014576 <Device::setName(char const*)>
c0019aac:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019ab3:	eb d3                	jmp    c0019a88 <CPU::detectFeatures()+0x998>
c0019ab5:	e8 cf 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019aba:	83 e0 01             	and    eax,0x1
c0019abd:	8d 14 00             	lea    edx,[eax+eax*1]
c0019ac0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019ac6:	83 e0 fd             	and    eax,0xfffffffd
c0019ac9:	09 d0                	or     eax,edx
c0019acb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019ad1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019ad8:	83 c4 4c             	add    esp,0x4c
c0019adb:	5b                   	pop    ebx
c0019adc:	5e                   	pop    esi
c0019add:	5f                   	pop    edi
c0019ade:	5d                   	pop    ebp
c0019adf:	c3                   	ret    

c0019ae0 <CPU::setupSMEP()>:
c0019ae0:	0f 20 e0             	mov    eax,cr4
c0019ae3:	0d 00 00 10 00       	or     eax,0x100000
c0019ae8:	0f 22 e0             	mov    cr4,eax
c0019aeb:	c3                   	ret    

c0019aec <CPU::setupUMIP()>:
c0019aec:	0f 20 e0             	mov    eax,cr4
c0019aef:	80 cc 08             	or     ah,0x8
c0019af2:	0f 22 e0             	mov    cr4,eax
c0019af5:	c3                   	ret    

c0019af6 <CPU::setupTSC()>:
c0019af6:	0f 20 e0             	mov    eax,cr4
c0019af9:	83 c8 04             	or     eax,0x4
c0019afc:	0f 22 e0             	mov    cr4,eax
c0019aff:	c3                   	ret    

c0019b00 <CPU::setupLargePages()>:
c0019b00:	0f 20 e0             	mov    eax,cr4
c0019b03:	83 c8 10             	or     eax,0x10
c0019b06:	0f 22 e0             	mov    cr4,eax
c0019b09:	c3                   	ret    

c0019b0a <CPU::setupPAT()>:
c0019b0a:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0019b0f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b16:	74 2c                	je     c0019b44 <CPU::setupPAT()+0x3a>
c0019b18:	53                   	push   ebx
c0019b19:	83 ec 10             	sub    esp,0x10
c0019b1c:	68 77 02 00 00       	push   0x277
c0019b21:	50                   	push   eax
c0019b22:	e8 c1 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019b27:	83 e2 f8             	and    edx,0xfffffff8
c0019b2a:	83 ca 01             	or     edx,0x1
c0019b2d:	52                   	push   edx
c0019b2e:	50                   	push   eax
c0019b2f:	68 77 02 00 00       	push   0x277
c0019b34:	ff 35 e8 e5 02 c0    	push   DWORD PTR ds:0xc002e5e8
c0019b3a:	e8 d5 52 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019b3f:	83 c4 28             	add    esp,0x28
c0019b42:	5b                   	pop    ebx
c0019b43:	c3                   	ret    
c0019b44:	c3                   	ret    
c0019b45:	90                   	nop

c0019b46 <CPU::setupMTRR()>:
c0019b46:	c3                   	ret    
c0019b47:	90                   	nop

c0019b48 <CPU::setupGlobalPages()>:
c0019b48:	0f 20 e0             	mov    eax,cr4
c0019b4b:	0c 80                	or     al,0x80
c0019b4d:	0f 22 e0             	mov    cr4,eax
c0019b50:	c3                   	ret    
c0019b51:	90                   	nop

c0019b52 <CPU::allowUsermodeDataAccess()>:
c0019b52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b56:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b5d:	74 03                	je     c0019b62 <CPU::allowUsermodeDataAccess()+0x10>
c0019b5f:	0f 01 cb             	stac   
c0019b62:	c3                   	ret    
c0019b63:	90                   	nop

c0019b64 <CPU::prohibitUsermodeDataAccess()>:
c0019b64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b68:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b6f:	74 03                	je     c0019b74 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019b71:	0f 01 ca             	clac   
c0019b74:	c3                   	ret    
c0019b75:	90                   	nop

c0019b76 <CPU::setupSMAP()>:
c0019b76:	0f 20 e0             	mov    eax,cr4
c0019b79:	0d 00 00 20 00       	or     eax,0x200000
c0019b7e:	0f 22 e0             	mov    cr4,eax
c0019b81:	eb e1                	jmp    c0019b64 <CPU::prohibitUsermodeDataAccess()>
c0019b83:	90                   	nop

c0019b84 <CPU::setupFeatures()>:
c0019b84:	83 ec 0c             	sub    esp,0xc
c0019b87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b8b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019b92:	74 07                	je     c0019b9b <CPU::setupFeatures()+0x17>
c0019b94:	52                   	push   edx
c0019b95:	e8 46 ff ff ff       	call   c0019ae0 <CPU::setupSMEP()>
c0019b9a:	58                   	pop    eax
c0019b9b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019ba2:	74 07                	je     c0019bab <CPU::setupFeatures()+0x27>
c0019ba4:	52                   	push   edx
c0019ba5:	e8 cc ff ff ff       	call   c0019b76 <CPU::setupSMAP()>
c0019baa:	58                   	pop    eax
c0019bab:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019bb2:	74 07                	je     c0019bbb <CPU::setupFeatures()+0x37>
c0019bb4:	52                   	push   edx
c0019bb5:	e8 32 ff ff ff       	call   c0019aec <CPU::setupUMIP()>
c0019bba:	58                   	pop    eax
c0019bbb:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019bc2:	74 07                	je     c0019bcb <CPU::setupFeatures()+0x47>
c0019bc4:	52                   	push   edx
c0019bc5:	e8 2c ff ff ff       	call   c0019af6 <CPU::setupTSC()>
c0019bca:	58                   	pop    eax
c0019bcb:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019bd2:	74 07                	je     c0019bdb <CPU::setupFeatures()+0x57>
c0019bd4:	52                   	push   edx
c0019bd5:	e8 26 ff ff ff       	call   c0019b00 <CPU::setupLargePages()>
c0019bda:	59                   	pop    ecx
c0019bdb:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019be2:	74 07                	je     c0019beb <CPU::setupFeatures()+0x67>
c0019be4:	52                   	push   edx
c0019be5:	e8 5e ff ff ff       	call   c0019b48 <CPU::setupGlobalPages()>
c0019bea:	58                   	pop    eax
c0019beb:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019bf2:	74 0c                	je     c0019c00 <CPU::setupFeatures()+0x7c>
c0019bf4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019bf8:	83 c4 0c             	add    esp,0xc
c0019bfb:	e9 0a ff ff ff       	jmp    c0019b0a <CPU::setupPAT()>
c0019c00:	83 c4 0c             	add    esp,0xc
c0019c03:	c3                   	ret    

c0019c04 <CPU::open(int, int, void*)>:
c0019c04:	57                   	push   edi
c0019c05:	56                   	push   esi
c0019c06:	53                   	push   ebx
c0019c07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c0b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c0f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019c15:	83 ec 0c             	sub    esp,0xc
c0019c18:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019c1e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019c24:	50                   	push   eax
c0019c25:	e8 aa 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019c2a:	83 c4 0c             	add    esp,0xc
c0019c2d:	6a 00                	push   0x0
c0019c2f:	68 ef be ad de       	push   0xdeadbeef
c0019c34:	57                   	push   edi
c0019c35:	e8 c2 78 ff ff       	call   c00114fc <TSS::setup(unsigned long, unsigned long)>
c0019c3a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c3d:	e8 9a 78 ff ff       	call   c00114dc <TSS::flush()>
c0019c42:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019c48:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c4b:	e8 e0 56 ff ff       	call   c000f330 <IDT::setup()>
c0019c50:	b8 00 04 00 00       	mov    eax,0x400
c0019c55:	0f 23 f8             	mov    db7,eax
c0019c58:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019c62:	e8 7b 62 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0019c67:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019c6d:	89 30                	mov    DWORD PTR [eax],esi
c0019c6f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019c75:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019c78:	58                   	pop    eax
c0019c79:	5a                   	pop    edx
c0019c7a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c80:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c84:	e8 b1 89 ff ff       	call   c001263a <VAS::setCPUSpecific(unsigned long)>
c0019c89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c8c:	e8 5f f4 ff ff       	call   c00190f0 <CPU::detectFeatures()>
c0019c91:	e8 cf bc ff ff       	call   c0015965 <setupInterruptController()>
c0019c96:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019c9c:	a1 00 e6 02 c0       	mov    eax,ds:0xc002e600
c0019ca1:	83 e0 10             	and    eax,0x10
c0019ca4:	83 f8 01             	cmp    eax,0x1
c0019ca7:	19 c0                	sbb    eax,eax
c0019ca9:	83 e0 46             	and    eax,0x46
c0019cac:	83 c0 1e             	add    eax,0x1e
c0019caf:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cb2:	e8 bb d1 ff ff       	call   c0016e72 <setupTimer(int)>
c0019cb7:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019cbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cc0:	e8 bf fe ff ff       	call   c0019b84 <CPU::setupFeatures()>
c0019cc5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cc8:	e8 a7 f1 ff ff       	call   c0018e74 <CPU::displayFeatures()>
c0019ccd:	83 c4 10             	add    esp,0x10
c0019cd0:	31 c0                	xor    eax,eax
c0019cd2:	5b                   	pop    ebx
c0019cd3:	5e                   	pop    esi
c0019cd4:	5f                   	pop    edi
c0019cd5:	c3                   	ret    

c0019cd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019cd6:	57                   	push   edi
c0019cd7:	56                   	push   esi
c0019cd8:	53                   	push   ebx
c0019cd9:	51                   	push   ecx
c0019cda:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019cde:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019ce1:	0f 02 c0             	lar    eax,ax
c0019ce4:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019ce7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019ceb:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019cee:	88 ca                	mov    dl,cl
c0019cf0:	c0 ea 06             	shr    dl,0x6
c0019cf3:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019cf7:	89 ca                	mov    edx,ecx
c0019cf9:	66 c1 ea 03          	shr    dx,0x3
c0019cfd:	83 e2 07             	and    edx,0x7
c0019d00:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019d05:	88 17                	mov    BYTE PTR [edi],dl
c0019d07:	0f 84 a6 01 00 00    	je     c0019eb3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d0d:	83 e1 07             	and    ecx,0x7
c0019d10:	80 f9 04             	cmp    cl,0x4
c0019d13:	0f 84 98 00 00 00    	je     c0019db1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019d19:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d1e:	0f 95 c0             	setne  al
c0019d21:	80 f9 05             	cmp    cl,0x5
c0019d24:	0f 95 c2             	setne  dl
c0019d27:	08 c2                	or     dl,al
c0019d29:	74 79                	je     c0019da4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019d2b:	84 c9                	test   cl,cl
c0019d2d:	75 05                	jne    c0019d34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d2f:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d32:	eb 3c                	jmp    c0019d70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d34:	80 f9 01             	cmp    cl,0x1
c0019d37:	75 05                	jne    c0019d3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019d39:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d3c:	eb 32                	jmp    c0019d70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d3e:	80 f9 02             	cmp    cl,0x2
c0019d41:	75 05                	jne    c0019d48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019d43:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d46:	eb 28                	jmp    c0019d70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d48:	31 c0                	xor    eax,eax
c0019d4a:	80 f9 03             	cmp    cl,0x3
c0019d4d:	75 05                	jne    c0019d54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019d4f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d52:	eb 1c                	jmp    c0019d70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d54:	80 f9 05             	cmp    cl,0x5
c0019d57:	75 05                	jne    c0019d5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019d59:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d5c:	eb 12                	jmp    c0019d70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d5e:	80 f9 06             	cmp    cl,0x6
c0019d61:	75 05                	jne    c0019d68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019d63:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d66:	eb 08                	jmp    c0019d70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d68:	80 f9 07             	cmp    cl,0x7
c0019d6b:	75 03                	jne    c0019d70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d6d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d70:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d75:	75 10                	jne    c0019d87 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019d77:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019d7b:	b9 03 00 00 00       	mov    ecx,0x3
c0019d80:	01 d0                	add    eax,edx
c0019d82:	e9 37 01 00 00       	jmp    c0019ebe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d87:	b9 02 00 00 00       	mov    ecx,0x2
c0019d8c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019d91:	0f 85 27 01 00 00    	jne    c0019ebe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d97:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019d9a:	b9 06 00 00 00       	mov    ecx,0x6
c0019d9f:	e9 1a 01 00 00       	jmp    c0019ebe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019da4:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019da7:	b9 06 00 00 00       	mov    ecx,0x6
c0019dac:	e9 0f 01 00 00       	jmp    c0019ec0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019db1:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019db4:	88 ca                	mov    dl,cl
c0019db6:	c0 ea 06             	shr    dl,0x6
c0019db9:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019dbd:	89 ca                	mov    edx,ecx
c0019dbf:	66 c1 ea 03          	shr    dx,0x3
c0019dc3:	83 e2 07             	and    edx,0x7
c0019dc6:	80 e1 07             	and    cl,0x7
c0019dc9:	75 05                	jne    c0019dd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019dcb:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019dce:	eb 4c                	jmp    c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dd0:	80 f9 01             	cmp    cl,0x1
c0019dd3:	75 05                	jne    c0019dda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019dd5:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019dd8:	eb 42                	jmp    c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dda:	80 f9 02             	cmp    cl,0x2
c0019ddd:	75 05                	jne    c0019de4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019ddf:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019de2:	eb 38                	jmp    c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019de4:	80 f9 03             	cmp    cl,0x3
c0019de7:	75 05                	jne    c0019dee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019de9:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019dec:	eb 2e                	jmp    c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dee:	80 f9 04             	cmp    cl,0x4
c0019df1:	75 12                	jne    c0019e05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019df3:	f6 c4 60             	test   ah,0x60
c0019df6:	75 08                	jne    c0019e00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019df8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019dfb:	8d 78 14             	lea    edi,[eax+0x14]
c0019dfe:	eb 1c                	jmp    c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e00:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019e03:	eb 17                	jmp    c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e05:	80 f9 05             	cmp    cl,0x5
c0019e08:	75 05                	jne    c0019e0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e0a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e0d:	eb 0d                	jmp    c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e0f:	80 f9 06             	cmp    cl,0x6
c0019e12:	75 05                	jne    c0019e19 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019e14:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019e17:	eb 03                	jmp    c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e19:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019e1c:	84 d2                	test   dl,dl
c0019e1e:	75 05                	jne    c0019e25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019e20:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e23:	eb 3c                	jmp    c0019e61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e25:	80 fa 01             	cmp    dl,0x1
c0019e28:	75 05                	jne    c0019e2f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019e2a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e2d:	eb 32                	jmp    c0019e61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e2f:	80 fa 02             	cmp    dl,0x2
c0019e32:	75 05                	jne    c0019e39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019e34:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e37:	eb 28                	jmp    c0019e61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e39:	80 fa 03             	cmp    dl,0x3
c0019e3c:	75 05                	jne    c0019e43 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019e3e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e41:	eb 1e                	jmp    c0019e61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e43:	31 c0                	xor    eax,eax
c0019e45:	80 fa 04             	cmp    dl,0x4
c0019e48:	74 17                	je     c0019e61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e4a:	80 fa 05             	cmp    dl,0x5
c0019e4d:	75 05                	jne    c0019e54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019e4f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e52:	eb 0d                	jmp    c0019e61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e54:	80 fa 06             	cmp    dl,0x6
c0019e57:	75 05                	jne    c0019e5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019e59:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e5c:	eb 03                	jmp    c0019e61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e5e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e61:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e66:	0f 94 c2             	sete   dl
c0019e69:	80 f9 05             	cmp    cl,0x5
c0019e6c:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019e70:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019e75:	d3 e0                	shl    eax,cl
c0019e77:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019e7b:	74 0a                	je     c0019e87 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019e7d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e80:	b9 07 00 00 00       	mov    ecx,0x7
c0019e85:	eb 37                	jmp    c0019ebe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e87:	01 f8                	add    eax,edi
c0019e89:	b9 03 00 00 00       	mov    ecx,0x3
c0019e8e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e93:	74 2b                	je     c0019ec0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e95:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e9a:	75 0d                	jne    c0019ea9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019e9c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019ea0:	01 c8                	add    eax,ecx
c0019ea2:	b9 04 00 00 00       	mov    ecx,0x4
c0019ea7:	eb 17                	jmp    c0019ec0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ea9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019eac:	b9 07 00 00 00       	mov    ecx,0x7
c0019eb1:	eb 0d                	jmp    c0019ec0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019eb3:	b9 02 00 00 00       	mov    ecx,0x2
c0019eb8:	b2 01                	mov    dl,0x1
c0019eba:	31 c0                	xor    eax,eax
c0019ebc:	eb 02                	jmp    c0019ec0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ebe:	31 d2                	xor    edx,edx
c0019ec0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019ec4:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019ec6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019eca:	88 11                	mov    BYTE PTR [ecx],dl
c0019ecc:	5a                   	pop    edx
c0019ecd:	5b                   	pop    ebx
c0019ece:	5e                   	pop    esi
c0019ecf:	5f                   	pop    edi
c0019ed0:	c3                   	ret    

c0019ed1 <Krnl::smpEntry()>:
c0019ed1:	eb fe                	jmp    c0019ed1 <Krnl::smpEntry()>

c0019ed3 <Krnl::startCPU(int)>:
c0019ed3:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0019ed8:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019edf:	0f 84 36 01 00 00    	je     c001a01b <Krnl::startCPU(int)+0x148>
c0019ee5:	53                   	push   ebx
c0019ee6:	83 ec 08             	sub    esp,0x8
c0019ee9:	e8 46 3f 00 00       	call   c001de34 <lockScheduler()>
c0019eee:	52                   	push   edx
c0019eef:	52                   	push   edx
c0019ef0:	6a 1b                	push   0x1b
c0019ef2:	ff 35 e8 e5 02 c0    	push   DWORD PTR ds:0xc002e5e8
c0019ef8:	e8 eb 4e ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019efd:	59                   	pop    ecx
c0019efe:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019f03:	89 c3                	mov    ebx,eax
c0019f05:	58                   	pop    eax
c0019f06:	53                   	push   ebx
c0019f07:	68 80 bb 02 c0       	push   0xc002bb80
c0019f0c:	e8 5d 90 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0019f11:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f1f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f29:	c1 e0 18             	shl    eax,0x18
c0019f2c:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019f32:	83 c4 10             	add    esp,0x10
c0019f35:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f3b:	09 c2                	or     edx,eax
c0019f3d:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019f43:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019f49:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f4f:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f55:	80 cd c5             	or     ch,0xc5
c0019f58:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f5e:	f3 90                	pause  
c0019f60:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f62:	0f ba e1 0c          	bt     ecx,0xc
c0019f66:	72 f6                	jb     c0019f5e <Krnl::startCPU(int)+0x8b>
c0019f68:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f6e:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f74:	09 c1                	or     ecx,eax
c0019f76:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f7c:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f82:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f88:	80 cd 85             	or     ch,0x85
c0019f8b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f91:	f3 90                	pause  
c0019f93:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f95:	0f ba e1 0c          	bt     ecx,0xc
c0019f99:	72 f6                	jb     c0019f91 <Krnl::startCPU(int)+0xbe>
c0019f9b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fa5:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fab:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fb1:	09 c1                	or     ecx,eax
c0019fb3:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019fb9:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fbf:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019fc5:	81 c9 02 06 00 00    	or     ecx,0x602
c0019fcb:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fd1:	f3 90                	pause  
c0019fd3:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fd5:	0f ba e1 0c          	bt     ecx,0xc
c0019fd9:	72 f6                	jb     c0019fd1 <Krnl::startCPU(int)+0xfe>
c0019fdb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fe5:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019feb:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ff1:	09 c8                	or     eax,ecx
c0019ff3:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019ff9:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019fff:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a004:	0d 02 06 00 00       	or     eax,0x602
c001a009:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a00f:	f3 90                	pause  
c001a011:	8b 02                	mov    eax,DWORD PTR [edx]
c001a013:	0f ba e0 0c          	bt     eax,0xc
c001a017:	72 f6                	jb     c001a00f <Krnl::startCPU(int)+0x13c>
c001a019:	eb fe                	jmp    c001a019 <Krnl::startCPU(int)+0x146>
c001a01b:	c3                   	ret    

c001a01c <Krnl::startCPUs()>:
c001a01c:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001a021:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a027:	88 c2                	mov    dl,al
c001a029:	83 e2 0a             	and    edx,0xa
c001a02c:	80 fa 0a             	cmp    dl,0xa
c001a02f:	75 09                	jne    c001a03a <Krnl::startCPUs()+0x1e>
c001a031:	a8 01                	test   al,0x1
c001a033:	74 05                	je     c001a03a <Krnl::startCPUs()+0x1e>
c001a035:	e9 61 61 fe ff       	jmp    c000019b <prepareTramp>
c001a03a:	c3                   	ret    
c001a03b:	90                   	nop

c001a03c <EnvVarContainer::getEnv(char const*)>:
c001a03c:	57                   	push   edi
c001a03d:	56                   	push   esi
c001a03e:	53                   	push   ebx
c001a03f:	31 db                	xor    ebx,ebx
c001a041:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a045:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a047:	7e 2b                	jle    c001a074 <EnvVarContainer::getEnv(char const*)+0x38>
c001a049:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a050:	50                   	push   eax
c001a051:	50                   	push   eax
c001a052:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a055:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a058:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a05c:	e8 5f 68 fe ff       	call   c00008c0 <strcmp>
c001a061:	83 c4 10             	add    esp,0x10
c001a064:	85 c0                	test   eax,eax
c001a066:	75 09                	jne    c001a071 <EnvVarContainer::getEnv(char const*)+0x35>
c001a068:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a06b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a06f:	eb 05                	jmp    c001a076 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a071:	43                   	inc    ebx
c001a072:	eb d1                	jmp    c001a045 <EnvVarContainer::getEnv(char const*)+0x9>
c001a074:	31 c0                	xor    eax,eax
c001a076:	5b                   	pop    ebx
c001a077:	5e                   	pop    esi
c001a078:	5f                   	pop    edi
c001a079:	c3                   	ret    

c001a07a <EnvVarContainer::setEnv(char const*, char const*)>:
c001a07a:	57                   	push   edi
c001a07b:	56                   	push   esi
c001a07c:	53                   	push   ebx
c001a07d:	83 ec 1c             	sub    esp,0x1c
c001a080:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a084:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a088:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a08c:	57                   	push   edi
c001a08d:	e8 02 67 fe ff       	call   c0000794 <strlen>
c001a092:	40                   	inc    eax
c001a093:	89 04 24             	mov    DWORD PTR [esp],eax
c001a096:	e8 a5 57 ff ff       	call   c000f840 <malloc>
c001a09b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a09e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a0a2:	e8 ed 66 fe ff       	call   c0000794 <strlen>
c001a0a7:	40                   	inc    eax
c001a0a8:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0ab:	e8 90 57 ff ff       	call   c000f840 <malloc>
c001a0b0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a0b7:	e8 d8 66 fe ff       	call   c0000794 <strlen>
c001a0bc:	83 c4 0c             	add    esp,0xc
c001a0bf:	40                   	inc    eax
c001a0c0:	50                   	push   eax
c001a0c1:	6a 00                	push   0x0
c001a0c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0c7:	e8 ac 66 fe ff       	call   c0000778 <memset>
c001a0cc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0cf:	e8 c0 66 fe ff       	call   c0000794 <strlen>
c001a0d4:	83 c4 0c             	add    esp,0xc
c001a0d7:	40                   	inc    eax
c001a0d8:	50                   	push   eax
c001a0d9:	57                   	push   edi
c001a0da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0de:	e8 61 66 fe ff       	call   c0000744 <memcpy>
c001a0e3:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0e6:	e8 a9 66 fe ff       	call   c0000794 <strlen>
c001a0eb:	83 c4 0c             	add    esp,0xc
c001a0ee:	40                   	inc    eax
c001a0ef:	50                   	push   eax
c001a0f0:	6a 00                	push   0x0
c001a0f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0f6:	e8 7d 66 fe ff       	call   c0000778 <memset>
c001a0fb:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0fe:	e8 91 66 fe ff       	call   c0000794 <strlen>
c001a103:	83 c4 0c             	add    esp,0xc
c001a106:	40                   	inc    eax
c001a107:	50                   	push   eax
c001a108:	56                   	push   esi
c001a109:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a10d:	e8 32 66 fe ff       	call   c0000744 <memcpy>
c001a112:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a114:	40                   	inc    eax
c001a115:	89 03                	mov    DWORD PTR [ebx],eax
c001a117:	c1 e0 03             	shl    eax,0x3
c001a11a:	5a                   	pop    edx
c001a11b:	59                   	pop    ecx
c001a11c:	50                   	push   eax
c001a11d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a120:	e8 07 57 ff ff       	call   c000f82c <realloc>
c001a125:	83 c4 0c             	add    esp,0xc
c001a128:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a12b:	6a 08                	push   0x8
c001a12d:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a131:	52                   	push   edx
c001a132:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a134:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a138:	50                   	push   eax
c001a139:	e8 06 66 fe ff       	call   c0000744 <memcpy>
c001a13e:	83 c4 20             	add    esp,0x20
c001a141:	5b                   	pop    ebx
c001a142:	5e                   	pop    esi
c001a143:	5f                   	pop    edi
c001a144:	c3                   	ret    
c001a145:	90                   	nop

c001a146 <EnvVarContainer::deleteEnv(char const*)>:
c001a146:	c3                   	ret    
c001a147:	90                   	nop

c001a148 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a148:	55                   	push   ebp
c001a149:	57                   	push   edi
c001a14a:	56                   	push   esi
c001a14b:	53                   	push   ebx
c001a14c:	81 ec 38 01 00 00    	sub    esp,0x138
c001a152:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a159:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a160:	68 14 01 00 00       	push   0x114
c001a165:	e8 d6 56 ff ff       	call   c000f840 <malloc>
c001a16a:	83 c4 0c             	add    esp,0xc
c001a16d:	89 c7                	mov    edi,eax
c001a16f:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a172:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a179:	50                   	push   eax
c001a17a:	e8 47 93 ff ff       	call   c00134c6 <File::File(char const*, Process*)>
c001a17f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a182:	e8 11 96 ff ff       	call   c0013798 <File::exists()>
c001a187:	83 c4 10             	add    esp,0x10
c001a18a:	84 c0                	test   al,al
c001a18c:	75 31                	jne    c001a1bf <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a18e:	51                   	push   ecx
c001a18f:	51                   	push   ecx
c001a190:	6a 12                	push   0x12
c001a192:	57                   	push   edi
c001a193:	e8 92 93 ff ff       	call   c001352a <File::open(FileOpenMode)>
c001a198:	8b 07                	mov    eax,DWORD PTR [edi]
c001a19a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a19d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a1a0:	e8 ef 65 fe ff       	call   c0000794 <strlen>
c001a1a5:	5a                   	pop    edx
c001a1a6:	31 d2                	xor    edx,edx
c001a1a8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1ac:	51                   	push   ecx
c001a1ad:	55                   	push   ebp
c001a1ae:	52                   	push   edx
c001a1af:	50                   	push   eax
c001a1b0:	57                   	push   edi
c001a1b1:	ff d3                	call   ebx
c001a1b3:	83 c4 14             	add    esp,0x14
c001a1b6:	57                   	push   edi
c001a1b7:	e8 cc 93 ff ff       	call   c0013588 <File::close()>
c001a1bc:	83 c4 10             	add    esp,0x10
c001a1bf:	31 db                	xor    ebx,ebx
c001a1c1:	50                   	push   eax
c001a1c2:	31 ed                	xor    ebp,ebp
c001a1c4:	68 00 01 00 00       	push   0x100
c001a1c9:	6a 00                	push   0x0
c001a1cb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a1cf:	50                   	push   eax
c001a1d0:	e8 a3 65 fe ff       	call   c0000778 <memset>
c001a1d5:	58                   	pop    eax
c001a1d6:	5a                   	pop    edx
c001a1d7:	6a 01                	push   0x1
c001a1d9:	57                   	push   edi
c001a1da:	e8 4b 93 ff ff       	call   c001352a <File::open(FileOpenMode)>
c001a1df:	83 c4 10             	add    esp,0x10
c001a1e2:	83 ec 0c             	sub    esp,0xc
c001a1e5:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1e7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1eb:	51                   	push   ecx
c001a1ec:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a1f0:	52                   	push   edx
c001a1f1:	6a 00                	push   0x0
c001a1f3:	6a 01                	push   0x1
c001a1f5:	57                   	push   edi
c001a1f6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a1f9:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a1fd:	83 c4 20             	add    esp,0x20
c001a200:	3c 0d                	cmp    al,0xd
c001a202:	0f 84 12 01 00 00    	je     c001a31a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a208:	85 db                	test   ebx,ebx
c001a20a:	0f 84 fd 00 00 00    	je     c001a30d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a210:	3c 0a                	cmp    al,0xa
c001a212:	74 13                	je     c001a227 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a214:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a219:	74 0c                	je     c001a227 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a21b:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a221:	0f 8e e6 00 00 00    	jle    c001a30d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a227:	83 ec 0c             	sub    esp,0xc
c001a22a:	8d 53 01             	lea    edx,[ebx+0x1]
c001a22d:	29 dd                	sub    ebp,ebx
c001a22f:	52                   	push   edx
c001a230:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a234:	e8 07 56 ff ff       	call   c000f840 <malloc>
c001a239:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a23c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a240:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a243:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a247:	e8 f4 55 ff ff       	call   c000f840 <malloc>
c001a24c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a250:	83 c4 0c             	add    esp,0xc
c001a253:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a257:	52                   	push   edx
c001a258:	6a 00                	push   0x0
c001a25a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a25e:	e8 15 65 fe ff       	call   c0000778 <memset>
c001a263:	83 c4 0c             	add    esp,0xc
c001a266:	53                   	push   ebx
c001a267:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a26b:	55                   	push   ebp
c001a26c:	01 eb                	add    ebx,ebp
c001a26e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a272:	e8 cd 64 fe ff       	call   c0000744 <memcpy>
c001a277:	83 c4 0c             	add    esp,0xc
c001a27a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a27e:	51                   	push   ecx
c001a27f:	6a 00                	push   0x0
c001a281:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a285:	e8 ee 64 fe ff       	call   c0000778 <memset>
c001a28a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a28d:	e8 02 65 fe ff       	call   c0000794 <strlen>
c001a292:	83 c4 0c             	add    esp,0xc
c001a295:	50                   	push   eax
c001a296:	53                   	push   ebx
c001a297:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a29b:	e8 a4 64 fe ff       	call   c0000744 <memcpy>
c001a2a0:	5b                   	pop    ebx
c001a2a1:	58                   	pop    eax
c001a2a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2a6:	68 91 bb 02 c0       	push   0xc002bb91
c001a2ab:	e8 be 8c ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001a2b0:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2b2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a2b5:	40                   	inc    eax
c001a2b6:	83 c4 10             	add    esp,0x10
c001a2b9:	89 06                	mov    DWORD PTR [esi],eax
c001a2bb:	85 d2                	test   edx,edx
c001a2bd:	75 0c                	jne    c001a2cb <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a2bf:	83 ec 0c             	sub    esp,0xc
c001a2c2:	6a 08                	push   0x8
c001a2c4:	e8 77 55 ff ff       	call   c000f840 <malloc>
c001a2c9:	eb 0c                	jmp    c001a2d7 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a2cb:	c1 e0 03             	shl    eax,0x3
c001a2ce:	51                   	push   ecx
c001a2cf:	51                   	push   ecx
c001a2d0:	50                   	push   eax
c001a2d1:	52                   	push   edx
c001a2d2:	e8 55 55 ff ff       	call   c000f82c <realloc>
c001a2d7:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a2da:	83 c4 10             	add    esp,0x10
c001a2dd:	31 db                	xor    ebx,ebx
c001a2df:	52                   	push   edx
c001a2e0:	6a 08                	push   0x8
c001a2e2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a2e6:	50                   	push   eax
c001a2e7:	8b 16                	mov    edx,DWORD PTR [esi]
c001a2e9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2ec:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a2f0:	50                   	push   eax
c001a2f1:	e8 4e 64 fe ff       	call   c0000744 <memcpy>
c001a2f6:	83 c4 0c             	add    esp,0xc
c001a2f9:	68 00 01 00 00       	push   0x100
c001a2fe:	6a 00                	push   0x0
c001a300:	55                   	push   ebp
c001a301:	31 ed                	xor    ebp,ebp
c001a303:	e8 70 64 fe ff       	call   c0000778 <memset>
c001a308:	83 c4 10             	add    esp,0x10
c001a30b:	eb 0d                	jmp    c001a31a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a30d:	3c 3d                	cmp    al,0x3d
c001a30f:	74 07                	je     c001a318 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a311:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a315:	45                   	inc    ebp
c001a316:	eb 02                	jmp    c001a31a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a318:	89 eb                	mov    ebx,ebp
c001a31a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a31f:	0f 85 bd fe ff ff    	jne    c001a1e2 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a325:	50                   	push   eax
c001a326:	50                   	push   eax
c001a327:	ff 36                	push   DWORD PTR [esi]
c001a329:	68 9f bb 02 c0       	push   0xc002bb9f
c001a32e:	e8 3b 8c ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001a333:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a339:	5b                   	pop    ebx
c001a33a:	5e                   	pop    esi
c001a33b:	5f                   	pop    edi
c001a33c:	5d                   	pop    ebp
c001a33d:	c3                   	ret    

c001a33e <EnvVarContainer::__loadSystem()>:
c001a33e:	83 ec 10             	sub    esp,0x10
c001a341:	68 20 db 02 c0       	push   0xc002db20
c001a346:	68 ca bb 02 c0       	push   0xc002bbca
c001a34b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a34f:	e8 f4 fd ff ff       	call   c001a148 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a354:	83 c4 1c             	add    esp,0x1c
c001a357:	c3                   	ret    

c001a358 <EnvVarContainer::__loadUser()>:
c001a358:	c3                   	ret    
c001a359:	90                   	nop

c001a35a <EnvVarContainer::EnvVarContainer(Process*)>:
c001a35a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a35e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a364:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a368:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a36c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a36f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a373:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a37a:	90                   	nop
c001a37b:	c3                   	ret    

c001a37c <EnvVarContainer::~EnvVarContainer()>:
c001a37c:	83 ec 0c             	sub    esp,0xc
c001a37f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a383:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a386:	85 c0                	test   eax,eax
c001a388:	74 1d                	je     c001a3a7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a38a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a38e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a390:	85 c0                	test   eax,eax
c001a392:	74 13                	je     c001a3a7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a398:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a39b:	83 ec 0c             	sub    esp,0xc
c001a39e:	50                   	push   eax
c001a39f:	e8 ac 54 ff ff       	call   c000f850 <free>
c001a3a4:	83 c4 10             	add    esp,0x10
c001a3a7:	90                   	nop
c001a3a8:	83 c4 0c             	add    esp,0xc
c001a3ab:	c3                   	ret    

c001a3ac <Krnl::getEnv(Process*, char const*)>:
c001a3ac:	53                   	push   ebx
c001a3ad:	83 ec 08             	sub    esp,0x8
c001a3b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a3b8:	39 05 54 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b54,eax
c001a3be:	74 04                	je     c001a3c4 <Krnl::getEnv(Process*, char const*)+0x18>
c001a3c0:	85 c0                	test   eax,eax
c001a3c2:	75 0b                	jne    c001a3cf <Krnl::getEnv(Process*, char const*)+0x23>
c001a3c4:	a1 34 11 03 c0       	mov    eax,ds:0xc0031134
c001a3c9:	85 c0                	test   eax,eax
c001a3cb:	75 19                	jne    c001a3e6 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a3cd:	eb 27                	jmp    c001a3f6 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a3cf:	52                   	push   edx
c001a3d0:	52                   	push   edx
c001a3d1:	53                   	push   ebx
c001a3d2:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a3d8:	e8 5f fc ff ff       	call   c001a03c <EnvVarContainer::getEnv(char const*)>
c001a3dd:	83 c4 10             	add    esp,0x10
c001a3e0:	85 c0                	test   eax,eax
c001a3e2:	75 28                	jne    c001a40c <Krnl::getEnv(Process*, char const*)+0x60>
c001a3e4:	eb de                	jmp    c001a3c4 <Krnl::getEnv(Process*, char const*)+0x18>
c001a3e6:	52                   	push   edx
c001a3e7:	52                   	push   edx
c001a3e8:	53                   	push   ebx
c001a3e9:	50                   	push   eax
c001a3ea:	e8 4d fc ff ff       	call   c001a03c <EnvVarContainer::getEnv(char const*)>
c001a3ef:	83 c4 10             	add    esp,0x10
c001a3f2:	85 c0                	test   eax,eax
c001a3f4:	75 16                	jne    c001a40c <Krnl::getEnv(Process*, char const*)+0x60>
c001a3f6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a3fa:	a1 38 11 03 c0       	mov    eax,ds:0xc0031138
c001a3ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a403:	83 c4 08             	add    esp,0x8
c001a406:	5b                   	pop    ebx
c001a407:	e9 30 fc ff ff       	jmp    c001a03c <EnvVarContainer::getEnv(char const*)>
c001a40c:	83 c4 08             	add    esp,0x8
c001a40f:	5b                   	pop    ebx
c001a410:	c3                   	ret    

c001a411 <Krnl::setEnvSystem(char const*, char const*)>:
c001a411:	83 ec 10             	sub    esp,0x10
c001a414:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a418:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a41c:	ff 35 38 11 03 c0    	push   DWORD PTR ds:0xc0031138
c001a422:	e8 53 fc ff ff       	call   c001a07a <EnvVarContainer::setEnv(char const*, char const*)>
c001a427:	83 c4 1c             	add    esp,0x1c
c001a42a:	c3                   	ret    

c001a42b <Krnl::setEnvUser(char const*, char const*)>:
c001a42b:	a1 34 11 03 c0       	mov    eax,ds:0xc0031134
c001a430:	85 c0                	test   eax,eax
c001a432:	74 15                	je     c001a449 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a434:	83 ec 10             	sub    esp,0x10
c001a437:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a43b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a43f:	50                   	push   eax
c001a440:	e8 35 fc ff ff       	call   c001a07a <EnvVarContainer::setEnv(char const*, char const*)>
c001a445:	83 c4 1c             	add    esp,0x1c
c001a448:	c3                   	ret    
c001a449:	c3                   	ret    

c001a44a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a44a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a44e:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a454:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a458:	e9 1d fc ff ff       	jmp    c001a07a <EnvVarContainer::setEnv(char const*, char const*)>

c001a45d <Krnl::deleteEnvSystem(char const*)>:
c001a45d:	c3                   	ret    

c001a45e <Krnl::deleteEnvUser(char const*)>:
c001a45e:	c3                   	ret    

c001a45f <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a45f:	c3                   	ret    

c001a460 <Krnl::newProcessEnv(Process*)>:
c001a460:	83 ec 28             	sub    esp,0x28
c001a463:	6a 0c                	push   0xc
c001a465:	e8 d6 53 ff ff       	call   c000f840 <malloc>
c001a46a:	5a                   	pop    edx
c001a46b:	59                   	pop    ecx
c001a46c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a470:	50                   	push   eax
c001a471:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a475:	e8 e0 fe ff ff       	call   c001a35a <EnvVarContainer::EnvVarContainer(Process*)>
c001a47a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a47e:	83 c4 2c             	add    esp,0x2c
c001a481:	c3                   	ret    

c001a482 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a482:	56                   	push   esi
c001a483:	53                   	push   ebx
c001a484:	83 ec 10             	sub    esp,0x10
c001a487:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a48b:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a491:	6a 0c                	push   0xc
c001a493:	e8 a8 53 ff ff       	call   c000f840 <malloc>
c001a498:	89 c3                	mov    ebx,eax
c001a49a:	58                   	pop    eax
c001a49b:	5a                   	pop    edx
c001a49c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4a0:	53                   	push   ebx
c001a4a1:	e8 b4 fe ff ff       	call   c001a35a <EnvVarContainer::EnvVarContainer(Process*)>
c001a4a6:	8b 06                	mov    eax,DWORD PTR [esi]
c001a4a8:	89 03                	mov    DWORD PTR [ebx],eax
c001a4aa:	c1 e0 03             	shl    eax,0x3
c001a4ad:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4b0:	e8 8b 53 ff ff       	call   c000f840 <malloc>
c001a4b5:	83 c4 0c             	add    esp,0xc
c001a4b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a4bb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a4bd:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a4c4:	52                   	push   edx
c001a4c5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a4c8:	50                   	push   eax
c001a4c9:	e8 76 62 fe ff       	call   c0000744 <memcpy>
c001a4ce:	89 d8                	mov    eax,ebx
c001a4d0:	83 c4 14             	add    esp,0x14
c001a4d3:	5b                   	pop    ebx
c001a4d4:	5e                   	pop    esi
c001a4d5:	c3                   	ret    

c001a4d6 <Krnl::loadSystemEnv()>:
c001a4d6:	53                   	push   ebx
c001a4d7:	83 ec 14             	sub    esp,0x14
c001a4da:	6a 0c                	push   0xc
c001a4dc:	e8 5f 53 ff ff       	call   c000f840 <malloc>
c001a4e1:	89 c3                	mov    ebx,eax
c001a4e3:	58                   	pop    eax
c001a4e4:	5a                   	pop    edx
c001a4e5:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c001a4eb:	53                   	push   ebx
c001a4ec:	e8 69 fe ff ff       	call   c001a35a <EnvVarContainer::EnvVarContainer(Process*)>
c001a4f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4f4:	89 1d 38 11 03 c0    	mov    DWORD PTR ds:0xc0031138,ebx
c001a4fa:	e8 3f fe ff ff       	call   c001a33e <EnvVarContainer::__loadSystem()>
c001a4ff:	83 c4 18             	add    esp,0x18
c001a502:	5b                   	pop    ebx
c001a503:	c3                   	ret    

c001a504 <Krnl::loadUserEnv()>:
c001a504:	53                   	push   ebx
c001a505:	83 ec 14             	sub    esp,0x14
c001a508:	6a 0c                	push   0xc
c001a50a:	e8 31 53 ff ff       	call   c000f840 <malloc>
c001a50f:	89 c3                	mov    ebx,eax
c001a511:	58                   	pop    eax
c001a512:	5a                   	pop    edx
c001a513:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c001a519:	53                   	push   ebx
c001a51a:	e8 3b fe ff ff       	call   c001a35a <EnvVarContainer::EnvVarContainer(Process*)>
c001a51f:	89 1d 34 11 03 c0    	mov    DWORD PTR ds:0xc0031134,ebx
c001a525:	83 c4 18             	add    esp,0x18
c001a528:	5b                   	pop    ebx
c001a529:	c3                   	ret    

c001a52a <Krnl::flushEnv()>:
c001a52a:	c3                   	ret    

c001a52b <Krnl::getProcessTotalEnvCount(Process*)>:
c001a52b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a52f:	8b 15 34 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031134
c001a535:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a53b:	a1 38 11 03 c0       	mov    eax,ds:0xc0031138
c001a540:	8b 00                	mov    eax,DWORD PTR [eax]
c001a542:	03 01                	add    eax,DWORD PTR [ecx]
c001a544:	85 d2                	test   edx,edx
c001a546:	74 02                	je     c001a54a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a548:	03 02                	add    eax,DWORD PTR [edx]
c001a54a:	c3                   	ret    

c001a54b <Krnl::getProcessEnvPair(Process*, int)>:
c001a54b:	57                   	push   edi
c001a54c:	8b 0d 34 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031134
c001a552:	56                   	push   esi
c001a553:	85 c9                	test   ecx,ecx
c001a555:	53                   	push   ebx
c001a556:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a55a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a55e:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a564:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a568:	8b 02                	mov    eax,DWORD PTR [edx]
c001a56a:	75 47                	jne    c001a5b3 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a56c:	39 c3                	cmp    ebx,eax
c001a56e:	7c 47                	jl     c001a5b7 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a570:	8b 15 38 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031138
c001a576:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a578:	01 c1                	add    ecx,eax
c001a57a:	39 d9                	cmp    ecx,ebx
c001a57c:	7e 6c                	jle    c001a5ea <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a57e:	51                   	push   ecx
c001a57f:	89 d9                	mov    ecx,ebx
c001a581:	29 c1                	sub    ecx,eax
c001a583:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a586:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a58a:	53                   	push   ebx
c001a58b:	68 ec bb 02 c0       	push   0xc002bbec
c001a590:	e8 d9 89 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001a595:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a59b:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a59d:	a1 38 11 03 c0       	mov    eax,ds:0xc0031138
c001a5a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a5a5:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5a9:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5ac:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5af:	89 06                	mov    DWORD PTR [esi],eax
c001a5b1:	eb 51                	jmp    c001a604 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a5b3:	39 c3                	cmp    ebx,eax
c001a5b5:	7d 05                	jge    c001a5bc <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a5b7:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5ba:	eb 20                	jmp    c001a5dc <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a5bc:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a5be:	8d 14 07             	lea    edx,[edi+eax*1]
c001a5c1:	39 da                	cmp    edx,ebx
c001a5c3:	7e 04                	jle    c001a5c9 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a5c5:	29 c3                	sub    ebx,eax
c001a5c7:	eb 10                	jmp    c001a5d9 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a5c9:	8b 0d 38 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031138
c001a5cf:	03 11                	add    edx,DWORD PTR [ecx]
c001a5d1:	39 da                	cmp    edx,ebx
c001a5d3:	7e 15                	jle    c001a5ea <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5d5:	29 c3                	sub    ebx,eax
c001a5d7:	29 fb                	sub    ebx,edi
c001a5d9:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a5dc:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5e0:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5e3:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5e6:	89 06                	mov    DWORD PTR [esi],eax
c001a5e8:	eb 1d                	jmp    c001a607 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a5ea:	83 ec 0c             	sub    esp,0xc
c001a5ed:	68 00 bc 02 c0       	push   0xc002bc00
c001a5f2:	e8 18 00 00 00       	call   c001a60f <Krnl::panic(char const*)>
c001a5f7:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a5fd:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a604:	83 c4 10             	add    esp,0x10
c001a607:	89 f0                	mov    eax,esi
c001a609:	5b                   	pop    ebx
c001a60a:	5e                   	pop    esi
c001a60b:	5f                   	pop    edi
c001a60c:	c2 04 00             	ret    0x4

c001a60f <Krnl::panic(char const*)>:
c001a60f:	55                   	push   ebp
c001a610:	89 e5                	mov    ebp,esp
c001a612:	53                   	push   ebx
c001a613:	83 ec 0c             	sub    esp,0xc
c001a616:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a619:	fa                   	cli    
c001a61a:	c6 05 44 11 03 c0 01 	mov    BYTE PTR ds:0xc0031144,0x1
c001a621:	53                   	push   ebx
c001a622:	c6 05 24 d5 02 c0 00 	mov    BYTE PTR ds:0xc002d524,0x0
c001a629:	68 1a bc 02 c0       	push   0xc002bc1a
c001a62e:	e8 3b 89 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001a633:	58                   	pop    eax
c001a634:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a639:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a63f:	e8 f9 66 ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c001a644:	83 c4 0c             	add    esp,0xc
c001a647:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a64c:	6a 01                	push   0x1
c001a64e:	6a 0f                	push   0xf
c001a650:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a656:	e8 13 61 ff ff       	call   c001076e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a65b:	58                   	pop    eax
c001a65c:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a661:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a667:	e8 72 69 ff ff       	call   c0010fde <VgaText::clearScreen()>
c001a66c:	58                   	pop    eax
c001a66d:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a672:	5a                   	pop    edx
c001a673:	68 33 bc 02 c0       	push   0xc002bc33
c001a678:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a67e:	e8 d9 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a683:	59                   	pop    ecx
c001a684:	58                   	pop    eax
c001a685:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a68a:	68 d8 bc 02 c0       	push   0xc002bcd8
c001a68f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a695:	e8 c2 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a69a:	58                   	pop    eax
c001a69b:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a6a0:	5a                   	pop    edx
c001a6a1:	68 4f bc 02 c0       	push   0xc002bc4f
c001a6a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ac:	e8 ab 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a6b1:	59                   	pop    ecx
c001a6b2:	58                   	pop    eax
c001a6b3:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a6b8:	53                   	push   ebx
c001a6b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6bf:	e8 98 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a6c4:	58                   	pop    eax
c001a6c5:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a6ca:	5a                   	pop    edx
c001a6cb:	68 6f bc 02 c0       	push   0xc002bc6f
c001a6d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6d6:	e8 81 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a6db:	a1 40 11 03 c0       	mov    eax,ds:0xc0031140
c001a6e0:	83 c4 10             	add    esp,0x10
c001a6e3:	85 c0                	test   eax,eax
c001a6e5:	74 02                	je     c001a6e9 <Krnl::panic(char const*)+0xda>
c001a6e7:	ff d0                	call   eax
c001a6e9:	83 ec 0c             	sub    esp,0xc
c001a6ec:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a6ef:	e8 47 30 00 00       	call   c001d73b <Thr::getDriverNameFromAddress(unsigned long)>
c001a6f4:	83 c4 10             	add    esp,0x10
c001a6f7:	89 c3                	mov    ebx,eax
c001a6f9:	85 c0                	test   eax,eax
c001a6fb:	0f 84 50 02 00 00    	je     c001a951 <Krnl::panic(char const*)+0x342>
c001a701:	83 ec 08             	sub    esp,0x8
c001a704:	8b 15 54 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b54
c001a70a:	68 14 bd 02 c0       	push   0xc002bd14
c001a70f:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a715:	e8 42 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a71a:	58                   	pop    eax
c001a71b:	5a                   	pop    edx
c001a71c:	8b 15 54 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b54
c001a722:	68 4f bc 02 c0       	push   0xc002bc4f
c001a727:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a72d:	e8 2a 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a732:	59                   	pop    ecx
c001a733:	58                   	pop    eax
c001a734:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a739:	53                   	push   ebx
c001a73a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a740:	e8 17 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a745:	83 c4 10             	add    esp,0x10
c001a748:	83 ec 08             	sub    esp,0x8
c001a74b:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a750:	68 6e bc 02 c0       	push   0xc002bc6e
c001a755:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a75b:	e8 fc 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a760:	58                   	pop    eax
c001a761:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a766:	5a                   	pop    edx
c001a767:	68 6c bd 02 c0       	push   0xc002bd6c
c001a76c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a772:	e8 e5 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a777:	59                   	pop    ecx
c001a778:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a77d:	5b                   	pop    ebx
c001a77e:	68 ac bd 02 c0       	push   0xc002bdac
c001a783:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a789:	e8 ce 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a78e:	58                   	pop    eax
c001a78f:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a794:	5a                   	pop    edx
c001a795:	68 5a bc 02 c0       	push   0xc002bc5a
c001a79a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7a0:	e8 b7 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a7a5:	59                   	pop    ecx
c001a7a6:	5b                   	pop    ebx
c001a7a7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a7aa:	68 72 bc 02 c0       	push   0xc002bc72
c001a7af:	e8 ba 87 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001a7b4:	58                   	pop    eax
c001a7b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7b8:	5a                   	pop    edx
c001a7b9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7bc:	68 7b bc 02 c0       	push   0xc002bc7b
c001a7c1:	e8 a8 87 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001a7c6:	59                   	pop    ecx
c001a7c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7ca:	5b                   	pop    ebx
c001a7cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7cd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7d0:	68 84 bc 02 c0       	push   0xc002bc84
c001a7d5:	e8 94 87 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001a7da:	58                   	pop    eax
c001a7db:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a7e0:	5a                   	pop    edx
c001a7e1:	68 f0 bd 02 c0       	push   0xc002bdf0
c001a7e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7ec:	e8 6b 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a7f1:	59                   	pop    ecx
c001a7f2:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a7f7:	5b                   	pop    ebx
c001a7f8:	68 8d bc 02 c0       	push   0xc002bc8d
c001a7fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a803:	e8 54 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a808:	0f 20 c0             	mov    eax,cr0
c001a80b:	5a                   	pop    edx
c001a80c:	59                   	pop    ecx
c001a80d:	50                   	push   eax
c001a80e:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a813:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a819:	e8 64 69 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a81e:	5b                   	pop    ebx
c001a81f:	58                   	pop    eax
c001a820:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a825:	68 97 bc 02 c0       	push   0xc002bc97
c001a82a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a830:	e8 27 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a835:	0f 20 d0             	mov    eax,cr2
c001a838:	5a                   	pop    edx
c001a839:	59                   	pop    ecx
c001a83a:	50                   	push   eax
c001a83b:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a840:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a846:	e8 37 69 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a84b:	5b                   	pop    ebx
c001a84c:	58                   	pop    eax
c001a84d:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a852:	68 a1 bc 02 c0       	push   0xc002bca1
c001a857:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a85d:	e8 fa 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a862:	0f 20 d8             	mov    eax,cr3
c001a865:	5a                   	pop    edx
c001a866:	59                   	pop    ecx
c001a867:	50                   	push   eax
c001a868:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a86d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a873:	e8 0a 69 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a878:	5b                   	pop    ebx
c001a879:	58                   	pop    eax
c001a87a:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a87f:	68 b4 bc 02 c0       	push   0xc002bcb4
c001a884:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a88a:	e8 cd 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a88f:	0f 20 e0             	mov    eax,cr4
c001a892:	5a                   	pop    edx
c001a893:	59                   	pop    ecx
c001a894:	50                   	push   eax
c001a895:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a89a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8a0:	e8 dd 68 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a8a5:	5b                   	pop    ebx
c001a8a6:	58                   	pop    eax
c001a8a7:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a8ac:	68 be bc 02 c0       	push   0xc002bcbe
c001a8b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8b7:	e8 a0 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a8bc:	5a                   	pop    edx
c001a8bd:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a8c2:	59                   	pop    ecx
c001a8c3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8c9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a8cc:	50                   	push   eax
c001a8cd:	e8 b0 68 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a8d2:	5b                   	pop    ebx
c001a8d3:	58                   	pop    eax
c001a8d4:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a8d9:	68 d5 bc 02 c0       	push   0xc002bcd5
c001a8de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8e4:	e8 73 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a8e9:	5a                   	pop    edx
c001a8ea:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a8ef:	59                   	pop    ecx
c001a8f0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8f6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8f9:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8fc:	50                   	push   eax
c001a8fd:	e8 80 68 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a902:	5b                   	pop    ebx
c001a903:	58                   	pop    eax
c001a904:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a909:	68 d5 bc 02 c0       	push   0xc002bcd5
c001a90e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a914:	e8 43 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a919:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a91e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a921:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a927:	8b 12                	mov    edx,DWORD PTR [edx]
c001a929:	59                   	pop    ecx
c001a92a:	5b                   	pop    ebx
c001a92b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a92e:	50                   	push   eax
c001a92f:	e8 4e 68 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a934:	83 c4 10             	add    esp,0x10
c001a937:	b2 fe                	mov    dl,0xfe
c001a939:	e4 60                	in     al,0x60
c001a93b:	3c 1c                	cmp    al,0x1c
c001a93d:	74 04                	je     c001a943 <Krnl::panic(char const*)+0x334>
c001a93f:	3c 5a                	cmp    al,0x5a
c001a941:	75 f6                	jne    c001a939 <Krnl::panic(char const*)+0x32a>
c001a943:	e4 64                	in     al,0x64
c001a945:	a8 02                	test   al,0x2
c001a947:	75 fa                	jne    c001a943 <Krnl::panic(char const*)+0x334>
c001a949:	88 d0                	mov    al,dl
c001a94b:	e6 64                	out    0x64,al
c001a94d:	fa                   	cli    
c001a94e:	f4                   	hlt    
c001a94f:	eb e8                	jmp    c001a939 <Krnl::panic(char const*)+0x32a>
c001a951:	50                   	push   eax
c001a952:	50                   	push   eax
c001a953:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a958:	68 40 bd 02 c0       	push   0xc002bd40
c001a95d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a963:	e8 f4 67 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a968:	58                   	pop    eax
c001a969:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a96e:	5a                   	pop    edx
c001a96f:	68 4f bc 02 c0       	push   0xc002bc4f
c001a974:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a97a:	e8 dd 67 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a97f:	59                   	pop    ecx
c001a980:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a985:	5b                   	pop    ebx
c001a986:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a989:	83 c0 0c             	add    eax,0xc
c001a98c:	50                   	push   eax
c001a98d:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a992:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a998:	e8 bf 67 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a99d:	83 c4 10             	add    esp,0x10
c001a9a0:	e9 a3 fd ff ff       	jmp    c001a748 <Krnl::panic(char const*)+0x139>

c001a9a5 <Net::switchEndian16(unsigned short)>:
c001a9a5:	83 ec 04             	sub    esp,0x4
c001a9a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9ac:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a9b0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9b4:	c1 f8 08             	sar    eax,0x8
c001a9b7:	89 c2                	mov    edx,eax
c001a9b9:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9bd:	c1 e0 08             	shl    eax,0x8
c001a9c0:	09 d0                	or     eax,edx
c001a9c2:	83 c4 04             	add    esp,0x4
c001a9c5:	c3                   	ret    

c001a9c6 <Net::switchEndian32(unsigned int)>:
c001a9c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9ca:	c1 e8 18             	shr    eax,0x18
c001a9cd:	89 c2                	mov    edx,eax
c001a9cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9d3:	c1 e0 08             	shl    eax,0x8
c001a9d6:	25 00 00 ff 00       	and    eax,0xff0000
c001a9db:	09 c2                	or     edx,eax
c001a9dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9e1:	c1 e8 08             	shr    eax,0x8
c001a9e4:	25 00 ff 00 00       	and    eax,0xff00
c001a9e9:	09 c2                	or     edx,eax
c001a9eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9ef:	c1 e0 18             	shl    eax,0x18
c001a9f2:	09 d0                	or     eax,edx
c001a9f4:	c3                   	ret    

c001a9f5 <Net::crc32Calc(unsigned char*, int)>:
c001a9f5:	83 ec 10             	sub    esp,0x10
c001a9f8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a9fd:	75 07                	jne    c001aa06 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a9ff:	b8 00 00 00 00       	mov    eax,0x0
c001aa04:	eb 7c                	jmp    c001aa82 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa06:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa0b:	7f 07                	jg     c001aa14 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa0d:	b8 00 00 00 00       	mov    eax,0x0
c001aa12:	eb 6e                	jmp    c001aa82 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa14:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aa1c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa28:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa2c:	7d 4e                	jge    c001aa7c <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa36:	01 d0                	add    eax,edx
c001aa38:	8a 00                	mov    al,BYTE PTR [eax]
c001aa3a:	0f b6 c0             	movzx  eax,al
c001aa3d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aa41:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa49:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aa4e:	7f 26                	jg     c001aa76 <Net::crc32Calc(unsigned char*, int)+0x81>
c001aa50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa54:	83 e0 01             	and    eax,0x1
c001aa57:	74 0d                	je     c001aa66 <Net::crc32Calc(unsigned char*, int)+0x71>
c001aa59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa5d:	d1 e8                	shr    eax,1
c001aa5f:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa64:	eb 06                	jmp    c001aa6c <Net::crc32Calc(unsigned char*, int)+0x77>
c001aa66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa6a:	d1 e8                	shr    eax,1
c001aa6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa70:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa74:	eb d3                	jmp    c001aa49 <Net::crc32Calc(unsigned char*, int)+0x54>
c001aa76:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aa7a:	eb a8                	jmp    c001aa24 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aa7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa80:	f7 d0                	not    eax
c001aa82:	83 c4 10             	add    esp,0x10
c001aa85:	c3                   	ret    

c001aa86 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aa86:	83 ec 1c             	sub    esp,0x1c
c001aa89:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa91:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa99:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aa9e:	7f 14                	jg     c001aab4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aaa0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaa4:	8d 50 01             	lea    edx,[eax+0x1]
c001aaa7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaab:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aaae:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aab2:	eb e5                	jmp    c001aa99 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aab4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aab8:	8d 50 01             	lea    edx,[eax+0x1]
c001aabb:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aabf:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aac2:	83 ec 04             	sub    esp,0x4
c001aac5:	6a 06                	push   0x6
c001aac7:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aacb:	50                   	push   eax
c001aacc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aad0:	e8 6f 5c fe ff       	call   c0000744 <memcpy>
c001aad5:	83 c4 10             	add    esp,0x10
c001aad8:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aadd:	83 ec 04             	sub    esp,0x4
c001aae0:	6a 06                	push   0x6
c001aae2:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aae6:	50                   	push   eax
c001aae7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aaeb:	e8 54 5c fe ff       	call   c0000744 <memcpy>
c001aaf0:	83 c4 10             	add    esp,0x10
c001aaf3:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aaf8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aafc:	0f b7 c0             	movzx  eax,ax
c001aaff:	c1 f8 08             	sar    eax,0x8
c001ab02:	89 c1                	mov    ecx,eax
c001ab04:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab08:	8d 50 01             	lea    edx,[eax+0x1]
c001ab0b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab0f:	88 ca                	mov    dl,cl
c001ab11:	88 10                	mov    BYTE PTR [eax],dl
c001ab13:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab1b:	8d 48 01             	lea    ecx,[eax+0x1]
c001ab1e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ab22:	88 10                	mov    BYTE PTR [eax],dl
c001ab24:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab2c:	83 ec 04             	sub    esp,0x4
c001ab2f:	52                   	push   edx
c001ab30:	50                   	push   eax
c001ab31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab35:	e8 0a 5c fe ff       	call   c0000744 <memcpy>
c001ab3a:	83 c4 10             	add    esp,0x10
c001ab3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab41:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ab45:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab49:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ab4d:	83 ec 08             	sub    esp,0x8
c001ab50:	50                   	push   eax
c001ab51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ab55:	e8 9b fe ff ff       	call   c001a9f5 <Net::crc32Calc(unsigned char*, int)>
c001ab5a:	83 c4 10             	add    esp,0x10
c001ab5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab65:	c1 e8 18             	shr    eax,0x18
c001ab68:	89 c1                	mov    ecx,eax
c001ab6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab6e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab71:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab75:	88 ca                	mov    dl,cl
c001ab77:	88 10                	mov    BYTE PTR [eax],dl
c001ab79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab7d:	c1 e8 10             	shr    eax,0x10
c001ab80:	89 c1                	mov    ecx,eax
c001ab82:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab86:	8d 50 01             	lea    edx,[eax+0x1]
c001ab89:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab8d:	88 ca                	mov    dl,cl
c001ab8f:	88 10                	mov    BYTE PTR [eax],dl
c001ab91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab95:	c1 e8 08             	shr    eax,0x8
c001ab98:	89 c1                	mov    ecx,eax
c001ab9a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab9e:	8d 50 01             	lea    edx,[eax+0x1]
c001aba1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aba5:	88 ca                	mov    dl,cl
c001aba7:	88 10                	mov    BYTE PTR [eax],dl
c001aba9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abad:	8d 50 01             	lea    edx,[eax+0x1]
c001abb0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abb4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abb8:	88 10                	mov    BYTE PTR [eax],dl
c001abba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abbe:	83 c4 1c             	add    esp,0x1c
c001abc1:	c3                   	ret    

c001abc2 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001abc2:	83 ec 2c             	sub    esp,0x2c
c001abc5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abc9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abcd:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001abd2:	83 ec 04             	sub    esp,0x4
c001abd5:	6a 06                	push   0x6
c001abd7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abdb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abdf:	83 c0 0e             	add    eax,0xe
c001abe2:	50                   	push   eax
c001abe3:	e8 5c 5b fe ff       	call   c0000744 <memcpy>
c001abe8:	83 c4 10             	add    esp,0x10
c001abeb:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abf0:	83 ec 04             	sub    esp,0x4
c001abf3:	6a 06                	push   0x6
c001abf5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abf9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abfd:	83 c0 08             	add    eax,0x8
c001ac00:	50                   	push   eax
c001ac01:	e8 3e 5b fe ff       	call   c0000744 <memcpy>
c001ac06:	83 c4 10             	add    esp,0x10
c001ac09:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac0e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac12:	8d 50 01             	lea    edx,[eax+0x1]
c001ac15:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac19:	8a 00                	mov    al,BYTE PTR [eax]
c001ac1b:	0f b6 c0             	movzx  eax,al
c001ac1e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ac23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac27:	8d 50 01             	lea    edx,[eax+0x1]
c001ac2a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac2e:	8a 00                	mov    al,BYTE PTR [eax]
c001ac30:	0f b6 c0             	movzx  eax,al
c001ac33:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ac38:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ac3d:	c1 e0 08             	shl    eax,0x8
c001ac40:	89 c2                	mov    edx,eax
c001ac42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac46:	09 d0                	or     eax,edx
c001ac48:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac4c:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ac50:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ac55:	75 3a                	jne    c001ac91 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac5b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac5e:	66 3d dc 05          	cmp    ax,0x5dc
c001ac62:	77 10                	ja     c001ac74 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac68:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac6b:	0f b7 c0             	movzx  eax,ax
c001ac6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac72:	eb 1d                	jmp    c001ac91 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac74:	83 ec 0c             	sub    esp,0xc
c001ac77:	68 18 be 02 c0       	push   0xc002be18
c001ac7c:	e8 ed 82 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001ac81:	83 c4 10             	add    esp,0x10
c001ac84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac88:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ac8c:	e9 c0 00 00 00       	jmp    c001ad51 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ac91:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac99:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac9b:	83 ec 04             	sub    esp,0x4
c001ac9e:	52                   	push   edx
c001ac9f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aca3:	50                   	push   eax
c001aca4:	e8 9b 5a fe ff       	call   c0000744 <memcpy>
c001aca9:	83 c4 10             	add    esp,0x10
c001acac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001acb0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001acb4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acb8:	8d 50 01             	lea    edx,[eax+0x1]
c001acbb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acbf:	8a 00                	mov    al,BYTE PTR [eax]
c001acc1:	0f b6 c0             	movzx  eax,al
c001acc4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acc8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001accc:	8d 50 01             	lea    edx,[eax+0x1]
c001accf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acd3:	8a 00                	mov    al,BYTE PTR [eax]
c001acd5:	0f b6 c0             	movzx  eax,al
c001acd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001acdc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ace0:	8d 50 01             	lea    edx,[eax+0x1]
c001ace3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ace7:	8a 00                	mov    al,BYTE PTR [eax]
c001ace9:	0f b6 c0             	movzx  eax,al
c001acec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001acf0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acf4:	8d 50 01             	lea    edx,[eax+0x1]
c001acf7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acfb:	8a 00                	mov    al,BYTE PTR [eax]
c001acfd:	0f b6 c0             	movzx  eax,al
c001ad00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad08:	c1 e0 18             	shl    eax,0x18
c001ad0b:	89 c2                	mov    edx,eax
c001ad0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad11:	c1 e0 10             	shl    eax,0x10
c001ad14:	09 c2                	or     edx,eax
c001ad16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad1a:	c1 e0 08             	shl    eax,0x8
c001ad1d:	09 d0                	or     eax,edx
c001ad1f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ad23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad2b:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad2f:	83 e8 04             	sub    eax,0x4
c001ad32:	83 ec 08             	sub    esp,0x8
c001ad35:	50                   	push   eax
c001ad36:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad3a:	e8 b6 fc ff ff       	call   c001a9f5 <Net::crc32Calc(unsigned char*, int)>
c001ad3f:	83 c4 10             	add    esp,0x10
c001ad42:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ad46:	0f 94 c2             	sete   dl
c001ad49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad4d:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ad50:	90                   	nop
c001ad51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad55:	83 c4 2c             	add    esp,0x2c
c001ad58:	c2 04 00             	ret    0x4

c001ad5b <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ad5b:	55                   	push   ebp
c001ad5c:	57                   	push   edi
c001ad5d:	56                   	push   esi
c001ad5e:	53                   	push   ebx
c001ad5f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad65:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ad6c:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ad6e:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ad71:	80 fb 40             	cmp    bl,0x40
c001ad74:	75 1b                	jne    c001ad91 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ad76:	8a 16                	mov    dl,BYTE PTR [esi]
c001ad78:	84 d2                	test   dl,dl
c001ad7a:	0f 84 f1 00 00 00    	je     c001ae71 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad80:	8d 46 01             	lea    eax,[esi+0x1]
c001ad83:	80 fa 3a             	cmp    dl,0x3a
c001ad86:	74 04                	je     c001ad8c <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad88:	89 c6                	mov    esi,eax
c001ad8a:	eb ea                	jmp    c001ad76 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ad8c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad8f:	89 c6                	mov    esi,eax
c001ad91:	50                   	push   eax
c001ad92:	6a 40                	push   0x40
c001ad94:	6a 00                	push   0x0
c001ad96:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad9a:	50                   	push   eax
c001ad9b:	e8 d8 59 fe ff       	call   c0000778 <memset>
c001ada0:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ada7:	31 c0                	xor    eax,eax
c001ada9:	83 c4 10             	add    esp,0x10
c001adac:	8a 0f                	mov    cl,BYTE PTR [edi]
c001adae:	84 c9                	test   cl,cl
c001adb0:	0f 84 bb 00 00 00    	je     c001ae71 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adb6:	3d c7 00 00 00       	cmp    eax,0xc7
c001adbb:	0f 8f b0 00 00 00    	jg     c001ae71 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adc1:	80 f9 0a             	cmp    cl,0xa
c001adc4:	0f 85 98 00 00 00    	jne    c001ae62 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001adca:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001adcf:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001add3:	a8 df                	test   al,0xdf
c001add5:	0f 94 c1             	sete   cl
c001add8:	3c 23                	cmp    al,0x23
c001adda:	0f 94 c2             	sete   dl
c001addd:	08 d1                	or     cl,dl
c001addf:	75 4a                	jne    c001ae2b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ade1:	8d 50 f7             	lea    edx,[eax-0x9]
c001ade4:	80 fa 01             	cmp    dl,0x1
c001ade7:	76 42                	jbe    c001ae2b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ade9:	3c 5b                	cmp    al,0x5b
c001adeb:	75 42                	jne    c001ae2f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001aded:	80 fb 40             	cmp    bl,0x40
c001adf0:	75 39                	jne    c001ae2b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adf2:	83 ec 0c             	sub    esp,0xc
c001adf5:	8d 54 24 65          	lea    edx,[esp+0x65]
c001adf9:	52                   	push   edx
c001adfa:	e8 95 59 fe ff       	call   c0000794 <strlen>
c001adff:	83 c4 10             	add    esp,0x10
c001ae02:	83 f8 3f             	cmp    eax,0x3f
c001ae05:	77 6a                	ja     c001ae71 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae07:	50                   	push   eax
c001ae08:	50                   	push   eax
c001ae09:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ae0d:	52                   	push   edx
c001ae0e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae12:	52                   	push   edx
c001ae13:	e8 1c 5a fe ff       	call   c0000834 <strcpy>
c001ae18:	58                   	pop    eax
c001ae19:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae1d:	52                   	push   edx
c001ae1e:	e8 71 59 fe ff       	call   c0000794 <strlen>
c001ae23:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ae28:	83 c4 10             	add    esp,0x10
c001ae2b:	31 d2                	xor    edx,edx
c001ae2d:	eb 3a                	jmp    c001ae69 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae2f:	80 fb 40             	cmp    bl,0x40
c001ae32:	74 06                	je     c001ae3a <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ae34:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ae38:	eb 20                	jmp    c001ae5a <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae3a:	50                   	push   eax
c001ae3b:	50                   	push   eax
c001ae3c:	55                   	push   ebp
c001ae3d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae41:	50                   	push   eax
c001ae42:	e8 79 5a fe ff       	call   c00008c0 <strcmp>
c001ae47:	83 c4 10             	add    esp,0x10
c001ae4a:	85 c0                	test   eax,eax
c001ae4c:	75 dd                	jne    c001ae2b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae4e:	eb e4                	jmp    c001ae34 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ae50:	8d 50 01             	lea    edx,[eax+0x1]
c001ae53:	80 f9 3d             	cmp    cl,0x3d
c001ae56:	74 1d                	je     c001ae75 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ae58:	89 d0                	mov    eax,edx
c001ae5a:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae5c:	84 c9                	test   cl,cl
c001ae5e:	75 f0                	jne    c001ae50 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae60:	eb 0f                	jmp    c001ae71 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae62:	8d 50 01             	lea    edx,[eax+0x1]
c001ae65:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae69:	47                   	inc    edi
c001ae6a:	89 d0                	mov    eax,edx
c001ae6c:	e9 3b ff ff ff       	jmp    c001adac <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ae71:	31 c0                	xor    eax,eax
c001ae73:	eb 33                	jmp    c001aea8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ae75:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae79:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ae7c:	50                   	push   eax
c001ae7d:	50                   	push   eax
c001ae7e:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ae82:	50                   	push   eax
c001ae83:	56                   	push   esi
c001ae84:	e8 37 5a fe ff       	call   c00008c0 <strcmp>
c001ae89:	83 c4 10             	add    esp,0x10
c001ae8c:	85 c0                	test   eax,eax
c001ae8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae92:	75 97                	jne    c001ae2b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae94:	51                   	push   ecx
c001ae95:	51                   	push   ecx
c001ae96:	52                   	push   edx
c001ae97:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae9e:	e8 91 59 fe ff       	call   c0000834 <strcpy>
c001aea3:	83 c4 10             	add    esp,0x10
c001aea6:	b0 01                	mov    al,0x1
c001aea8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aeae:	5b                   	pop    ebx
c001aeaf:	5e                   	pop    esi
c001aeb0:	5f                   	pop    edi
c001aeb1:	5d                   	pop    ebp
c001aeb2:	c3                   	ret    

c001aeb3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001aeb3:	57                   	push   edi
c001aeb4:	56                   	push   esi
c001aeb5:	53                   	push   ebx
c001aeb6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aebc:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aec3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aeca:	53                   	push   ebx
c001aecb:	e8 c4 58 fe ff       	call   c0000794 <strlen>
c001aed0:	89 34 24             	mov    DWORD PTR [esp],esi
c001aed3:	89 c7                	mov    edi,eax
c001aed5:	e8 ba 58 fe ff       	call   c0000794 <strlen>
c001aeda:	83 c4 10             	add    esp,0x10
c001aedd:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aee1:	3d ff 00 00 00       	cmp    eax,0xff
c001aee6:	0f 87 d3 00 00 00    	ja     c001afbf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aeec:	57                   	push   edi
c001aeed:	57                   	push   edi
c001aeee:	56                   	push   esi
c001aeef:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aef3:	56                   	push   esi
c001aef4:	e8 3b 59 fe ff       	call   c0000834 <strcpy>
c001aef9:	58                   	pop    eax
c001aefa:	5a                   	pop    edx
c001aefb:	68 d4 c3 02 c0       	push   0xc002c3d4
c001af00:	56                   	push   esi
c001af01:	e8 6e 5a fe ff       	call   c0000974 <strcat>
c001af06:	59                   	pop    ecx
c001af07:	5f                   	pop    edi
c001af08:	53                   	push   ebx
c001af09:	56                   	push   esi
c001af0a:	e8 65 5a fe ff       	call   c0000974 <strcat>
c001af0f:	58                   	pop    eax
c001af10:	5a                   	pop    edx
c001af11:	68 64 be 02 c0       	push   0xc002be64
c001af16:	56                   	push   esi
c001af17:	e8 58 5a fe ff       	call   c0000974 <strcat>
c001af1c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001af23:	e8 18 49 ff ff       	call   c000f840 <malloc>
c001af28:	83 c4 0c             	add    esp,0xc
c001af2b:	89 c3                	mov    ebx,eax
c001af2d:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c001af33:	56                   	push   esi
c001af34:	50                   	push   eax
c001af35:	e8 8c 85 ff ff       	call   c00134c6 <File::File(char const*, Process*)>
c001af3a:	83 c4 10             	add    esp,0x10
c001af3d:	85 db                	test   ebx,ebx
c001af3f:	74 7e                	je     c001afbf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af41:	51                   	push   ecx
c001af42:	51                   	push   ecx
c001af43:	6a 01                	push   0x1
c001af45:	53                   	push   ebx
c001af46:	e8 df 85 ff ff       	call   c001352a <File::open(FileOpenMode)>
c001af4b:	83 c4 10             	add    esp,0x10
c001af4e:	85 c0                	test   eax,eax
c001af50:	74 08                	je     c001af5a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af52:	83 ec 0c             	sub    esp,0xc
c001af55:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af57:	53                   	push   ebx
c001af58:	eb 5f                	jmp    c001afb9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001af5a:	52                   	push   edx
c001af5b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af5f:	50                   	push   eax
c001af60:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af64:	50                   	push   eax
c001af65:	53                   	push   ebx
c001af66:	e8 6b 88 ff ff       	call   c00137d6 <File::stat(unsigned long long*, bool*)>
c001af6b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af6f:	83 c4 10             	add    esp,0x10
c001af72:	89 c1                	mov    ecx,eax
c001af74:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001af78:	74 31                	je     c001afab <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af7a:	83 ec 0c             	sub    esp,0xc
c001af7d:	50                   	push   eax
c001af7e:	e8 bd 48 ff ff       	call   c000f840 <malloc>
c001af83:	89 c6                	mov    esi,eax
c001af85:	58                   	pop    eax
c001af86:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af88:	8d 54 24 20          	lea    edx,[esp+0x20]
c001af8c:	52                   	push   edx
c001af8d:	56                   	push   esi
c001af8e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af92:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af96:	53                   	push   ebx
c001af97:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af9a:	83 c4 20             	add    esp,0x20
c001af9d:	85 c0                	test   eax,eax
c001af9f:	75 0a                	jne    c001afab <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001afa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afa5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001afa9:	74 18                	je     c001afc3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001afab:	83 ec 0c             	sub    esp,0xc
c001afae:	53                   	push   ebx
c001afaf:	e8 d4 85 ff ff       	call   c0013588 <File::close()>
c001afb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afb9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afbc:	83 c4 10             	add    esp,0x10
c001afbf:	31 c0                	xor    eax,eax
c001afc1:	eb 3b                	jmp    c001affe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001afc3:	83 ec 0c             	sub    esp,0xc
c001afc6:	53                   	push   ebx
c001afc7:	e8 bc 85 ff ff       	call   c0013588 <File::close()>
c001afcc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afd1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afd4:	83 c4 0c             	add    esp,0xc
c001afd7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afde:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afe5:	56                   	push   esi
c001afe6:	e8 70 fd ff ff       	call   c001ad5b <Reg::findLineFromLoadedData(char*, char*, char*)>
c001afeb:	89 34 24             	mov    DWORD PTR [esp],esi
c001afee:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001aff2:	e8 59 48 ff ff       	call   c000f850 <free>
c001aff7:	83 c4 10             	add    esp,0x10
c001affa:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001affe:	81 c4 20 01 00 00    	add    esp,0x120
c001b004:	5b                   	pop    ebx
c001b005:	5e                   	pop    esi
c001b006:	5f                   	pop    edi
c001b007:	c3                   	ret    

c001b008 <Reg::getLine(char*, char*, char*)>:
c001b008:	57                   	push   edi
c001b009:	56                   	push   esi
c001b00a:	53                   	push   ebx
c001b00b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b00f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b013:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b017:	57                   	push   edi
c001b018:	56                   	push   esi
c001b019:	53                   	push   ebx
c001b01a:	68 69 be 02 c0       	push   0xc002be69
c001b01f:	e8 8f fe ff ff       	call   c001aeb3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b024:	83 c4 10             	add    esp,0x10
c001b027:	84 c0                	test   al,al
c001b029:	75 10                	jne    c001b03b <Reg::getLine(char*, char*, char*)+0x33>
c001b02b:	57                   	push   edi
c001b02c:	56                   	push   esi
c001b02d:	53                   	push   ebx
c001b02e:	68 8e be 02 c0       	push   0xc002be8e
c001b033:	e8 7b fe ff ff       	call   c001aeb3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b038:	83 c4 10             	add    esp,0x10
c001b03b:	5b                   	pop    ebx
c001b03c:	5e                   	pop    esi
c001b03d:	5f                   	pop    edi
c001b03e:	c3                   	ret    

c001b03f <Reg::readInt(char*, char*, int*)>:
c001b03f:	55                   	push   ebp
c001b040:	57                   	push   edi
c001b041:	56                   	push   esi
c001b042:	53                   	push   ebx
c001b043:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b049:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b04d:	57                   	push   edi
c001b04e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b055:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b05c:	e8 a7 ff ff ff       	call   c001b008 <Reg::getLine(char*, char*, char*)>
c001b061:	83 c4 10             	add    esp,0x10
c001b064:	84 c0                	test   al,al
c001b066:	0f 84 b3 00 00 00    	je     c001b11f <Reg::readInt(char*, char*, int*)+0xe0>
c001b06c:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b070:	80 fa 2b             	cmp    dl,0x2b
c001b073:	74 0c                	je     c001b081 <Reg::readInt(char*, char*, int*)+0x42>
c001b075:	80 fa 2d             	cmp    dl,0x2d
c001b078:	75 0e                	jne    c001b088 <Reg::readInt(char*, char*, int*)+0x49>
c001b07a:	ba 01 00 00 00       	mov    edx,0x1
c001b07f:	eb 0b                	jmp    c001b08c <Reg::readInt(char*, char*, int*)+0x4d>
c001b081:	ba 01 00 00 00       	mov    edx,0x1
c001b086:	eb 02                	jmp    c001b08a <Reg::readInt(char*, char*, int*)+0x4b>
c001b088:	31 d2                	xor    edx,edx
c001b08a:	31 c0                	xor    eax,eax
c001b08c:	be 0a 00 00 00       	mov    esi,0xa
c001b091:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b096:	75 20                	jne    c001b0b8 <Reg::readInt(char*, char*, int*)+0x79>
c001b098:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b09c:	80 f9 78             	cmp    cl,0x78
c001b09f:	75 0a                	jne    c001b0ab <Reg::readInt(char*, char*, int*)+0x6c>
c001b0a1:	83 c2 02             	add    edx,0x2
c001b0a4:	be 10 00 00 00       	mov    esi,0x10
c001b0a9:	eb 0d                	jmp    c001b0b8 <Reg::readInt(char*, char*, int*)+0x79>
c001b0ab:	80 f9 62             	cmp    cl,0x62
c001b0ae:	75 08                	jne    c001b0b8 <Reg::readInt(char*, char*, int*)+0x79>
c001b0b0:	83 c2 02             	add    edx,0x2
c001b0b3:	be 02 00 00 00       	mov    esi,0x2
c001b0b8:	01 d7                	add    edi,edx
c001b0ba:	31 d2                	xor    edx,edx
c001b0bc:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b0be:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b0c2:	80 fb 0d             	cmp    bl,0xd
c001b0c5:	0f 94 c3             	sete   bl
c001b0c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b0cd:	0f 94 c1             	sete   cl
c001b0d0:	08 cb                	or     bl,cl
c001b0d2:	75 3a                	jne    c001b10e <Reg::readInt(char*, char*, int*)+0xcf>
c001b0d4:	0f af d6             	imul   edx,esi
c001b0d7:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b0dc:	83 fe 10             	cmp    esi,0x10
c001b0df:	75 26                	jne    c001b107 <Reg::readInt(char*, char*, int*)+0xc8>
c001b0e1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0e5:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b0e8:	89 e9                	mov    ecx,ebp
c001b0ea:	80 f9 05             	cmp    cl,0x5
c001b0ed:	77 06                	ja     c001b0f5 <Reg::readInt(char*, char*, int*)+0xb6>
c001b0ef:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b0f3:	eb 16                	jmp    c001b10b <Reg::readInt(char*, char*, int*)+0xcc>
c001b0f5:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0f9:	83 e9 61             	sub    ecx,0x61
c001b0fc:	80 f9 05             	cmp    cl,0x5
c001b0ff:	77 06                	ja     c001b107 <Reg::readInt(char*, char*, int*)+0xc8>
c001b101:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b105:	eb 04                	jmp    c001b10b <Reg::readInt(char*, char*, int*)+0xcc>
c001b107:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b10b:	47                   	inc    edi
c001b10c:	eb ae                	jmp    c001b0bc <Reg::readInt(char*, char*, int*)+0x7d>
c001b10e:	84 c0                	test   al,al
c001b110:	74 02                	je     c001b114 <Reg::readInt(char*, char*, int*)+0xd5>
c001b112:	f7 da                	neg    edx
c001b114:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b11b:	89 10                	mov    DWORD PTR [eax],edx
c001b11d:	88 d8                	mov    al,bl
c001b11f:	81 c4 ec 00 00 00    	add    esp,0xec
c001b125:	5b                   	pop    ebx
c001b126:	5e                   	pop    esi
c001b127:	5f                   	pop    edi
c001b128:	5d                   	pop    ebp
c001b129:	c3                   	ret    

c001b12a <Reg::readString(char*, char*, char*, int)>:
c001b12a:	57                   	push   edi
c001b12b:	56                   	push   esi
c001b12c:	53                   	push   ebx
c001b12d:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b133:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b13a:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b13e:	57                   	push   edi
c001b13f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b146:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b14d:	e8 b6 fe ff ff       	call   c001b008 <Reg::getLine(char*, char*, char*)>
c001b152:	83 c4 10             	add    esp,0x10
c001b155:	89 c6                	mov    esi,eax
c001b157:	84 c0                	test   al,al
c001b159:	74 44                	je     c001b19f <Reg::readString(char*, char*, char*, int)+0x75>
c001b15b:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b162:	31 c0                	xor    eax,eax
c001b164:	4a                   	dec    edx
c001b165:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b168:	84 c9                	test   cl,cl
c001b16a:	74 0f                	je     c001b17b <Reg::readString(char*, char*, char*, int)+0x51>
c001b16c:	39 c2                	cmp    edx,eax
c001b16e:	7e 0b                	jle    c001b17b <Reg::readString(char*, char*, char*, int)+0x51>
c001b170:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b173:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b178:	40                   	inc    eax
c001b179:	eb ea                	jmp    c001b165 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b17b:	83 ec 0c             	sub    esp,0xc
c001b17e:	53                   	push   ebx
c001b17f:	e8 10 56 fe ff       	call   c0000794 <strlen>
c001b184:	83 c4 10             	add    esp,0x10
c001b187:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b18c:	75 11                	jne    c001b19f <Reg::readString(char*, char*, char*, int)+0x75>
c001b18e:	83 ec 0c             	sub    esp,0xc
c001b191:	53                   	push   ebx
c001b192:	e8 fd 55 fe ff       	call   c0000794 <strlen>
c001b197:	83 c4 10             	add    esp,0x10
c001b19a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b19f:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b1a5:	89 f0                	mov    eax,esi
c001b1a7:	5b                   	pop    ebx
c001b1a8:	5e                   	pop    esi
c001b1a9:	5f                   	pop    edi
c001b1aa:	c3                   	ret    

c001b1ab <Reg::readBool(char*, char*, bool*)>:
c001b1ab:	83 ec 20             	sub    esp,0x20
c001b1ae:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1b2:	50                   	push   eax
c001b1b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1bb:	e8 7f fe ff ff       	call   c001b03f <Reg::readInt(char*, char*, int*)>
c001b1c0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b1c5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b1c9:	0f 95 02             	setne  BYTE PTR [edx]
c001b1cc:	83 c4 2c             	add    esp,0x2c
c001b1cf:	c3                   	ret    

c001b1d0 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b1d0:	53                   	push   ebx
c001b1d1:	83 ec 1c             	sub    esp,0x1c
c001b1d4:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b1d8:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b1dc:	50                   	push   eax
c001b1dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1e5:	e8 c1 ff ff ff       	call   c001b1ab <Reg::readBool(char*, char*, bool*)>
c001b1ea:	83 c4 10             	add    esp,0x10
c001b1ed:	84 c0                	test   al,al
c001b1ef:	74 04                	je     c001b1f5 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b1f1:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b1f5:	88 d8                	mov    al,bl
c001b1f7:	83 c4 18             	add    esp,0x18
c001b1fa:	5b                   	pop    ebx
c001b1fb:	c3                   	ret    

c001b1fc <Reg::readIntWithDefault(char*, char*, int)>:
c001b1fc:	53                   	push   ebx
c001b1fd:	83 ec 1c             	sub    esp,0x1c
c001b200:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b204:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b208:	50                   	push   eax
c001b209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b211:	e8 29 fe ff ff       	call   c001b03f <Reg::readInt(char*, char*, int*)>
c001b216:	83 c4 10             	add    esp,0x10
c001b219:	84 c0                	test   al,al
c001b21b:	74 04                	je     c001b221 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b21d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b221:	89 d8                	mov    eax,ebx
c001b223:	83 c4 18             	add    esp,0x18
c001b226:	5b                   	pop    ebx
c001b227:	c3                   	ret    

c001b228 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b228:	57                   	push   edi
c001b229:	56                   	push   esi
c001b22a:	53                   	push   ebx
c001b22b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b22f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b233:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b237:	56                   	push   esi
c001b238:	53                   	push   ebx
c001b239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b23d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b241:	e8 e4 fe ff ff       	call   c001b12a <Reg::readString(char*, char*, char*, int)>
c001b246:	83 c4 10             	add    esp,0x10
c001b249:	84 c0                	test   al,al
c001b24b:	75 1b                	jne    c001b268 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b24d:	50                   	push   eax
c001b24e:	56                   	push   esi
c001b24f:	4e                   	dec    esi
c001b250:	6a 00                	push   0x0
c001b252:	53                   	push   ebx
c001b253:	e8 20 55 fe ff       	call   c0000778 <memset>
c001b258:	83 c4 0c             	add    esp,0xc
c001b25b:	56                   	push   esi
c001b25c:	57                   	push   edi
c001b25d:	53                   	push   ebx
c001b25e:	89 fb                	mov    ebx,edi
c001b260:	e8 df 54 fe ff       	call   c0000744 <memcpy>
c001b265:	83 c4 10             	add    esp,0x10
c001b268:	89 d8                	mov    eax,ebx
c001b26a:	5b                   	pop    ebx
c001b26b:	5e                   	pop    esi
c001b26c:	5f                   	pop    edi
c001b26d:	c3                   	ret    

c001b26e <Sys::eject(regs*)>:
c001b26e:	83 ec 0c             	sub    esp,0xc
c001b271:	83 ca ff             	or     edx,0xffffffff
c001b274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b278:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b27b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b280:	83 e9 41             	sub    ecx,0x41
c001b283:	83 f9 19             	cmp    ecx,0x19
c001b286:	77 18                	ja     c001b2a0 <Sys::eject(regs*)+0x32>
c001b288:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c001b28f:	85 c9                	test   ecx,ecx
c001b291:	74 0d                	je     c001b2a0 <Sys::eject(regs*)+0x32>
c001b293:	83 ec 0c             	sub    esp,0xc
c001b296:	51                   	push   ecx
c001b297:	e8 78 b4 ff ff       	call   c0016714 <LogicalDisk::eject()>
c001b29c:	83 c4 10             	add    esp,0x10
c001b29f:	99                   	cdq    
c001b2a0:	83 c4 0c             	add    esp,0xc
c001b2a3:	c3                   	ret    

c001b2a4 <Sys::exit(regs*)>:
c001b2a4:	83 ec 18             	sub    esp,0x18
c001b2a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2ab:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2ae:	e8 c4 35 00 00       	call   c001e877 <terminateTask(int)>
c001b2b3:	83 c8 ff             	or     eax,0xffffffff
c001b2b6:	83 c4 1c             	add    esp,0x1c
c001b2b9:	89 c2                	mov    edx,eax
c001b2bb:	c3                   	ret    

c001b2bc <Sys::getCwd(regs*)>:
c001b2bc:	83 ec 10             	sub    esp,0x10
c001b2bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2c3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b2c6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2ce:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2d1:	e8 f2 7f ff ff       	call   c00132c8 <Fs::getcwd(Process*, char*, int)>
c001b2d6:	83 c4 1c             	add    esp,0x1c
c001b2d9:	99                   	cdq    
c001b2da:	c3                   	ret    

c001b2db <Sys::getPID(regs*)>:
c001b2db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2e3:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2e5:	99                   	cdq    
c001b2e6:	c3                   	ret    

c001b2e7 <Sys::getRAMData(regs*)>:
c001b2e7:	8b 0d 34 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e634
c001b2ed:	6b 05 30 e6 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e630,0x64
c001b2f4:	99                   	cdq    
c001b2f5:	f7 f9                	idiv   ecx
c001b2f7:	c1 e0 18             	shl    eax,0x18
c001b2fa:	09 c8                	or     eax,ecx
c001b2fc:	99                   	cdq    
c001b2fd:	c3                   	ret    

c001b2fe <Sys::loadDLL(regs*)>:
c001b2fe:	56                   	push   esi
c001b2ff:	53                   	push   ebx
c001b300:	31 d2                	xor    edx,edx
c001b302:	51                   	push   ecx
c001b303:	b8 01 00 00 00       	mov    eax,0x1
c001b308:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b30c:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b310:	0f 84 8c 00 00 00    	je     c001b3a2 <Sys::loadDLL(regs*)+0xa4>
c001b316:	83 ec 0c             	sub    esp,0xc
c001b319:	68 14 01 00 00       	push   0x114
c001b31e:	e8 1d 45 ff ff       	call   c000f840 <malloc>
c001b323:	83 c4 0c             	add    esp,0xc
c001b326:	89 c3                	mov    ebx,eax
c001b328:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b32d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b330:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b333:	53                   	push   ebx
c001b334:	e8 8d 81 ff ff       	call   c00134c6 <File::File(char const*, Process*)>
c001b339:	83 c4 10             	add    esp,0x10
c001b33c:	31 d2                	xor    edx,edx
c001b33e:	b8 02 00 00 00       	mov    eax,0x2
c001b343:	85 db                	test   ebx,ebx
c001b345:	74 5b                	je     c001b3a2 <Sys::loadDLL(regs*)+0xa4>
c001b347:	83 ec 0c             	sub    esp,0xc
c001b34a:	53                   	push   ebx
c001b34b:	e8 48 84 ff ff       	call   c0013798 <File::exists()>
c001b350:	83 c4 10             	add    esp,0x10
c001b353:	84 c0                	test   al,al
c001b355:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b357:	75 11                	jne    c001b36a <Sys::loadDLL(regs*)+0x6c>
c001b359:	83 ec 0c             	sub    esp,0xc
c001b35c:	53                   	push   ebx
c001b35d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b360:	83 c4 10             	add    esp,0x10
c001b363:	b8 03 00 00 00       	mov    eax,0x3
c001b368:	eb 36                	jmp    c001b3a0 <Sys::loadDLL(regs*)+0xa2>
c001b36a:	83 ec 0c             	sub    esp,0xc
c001b36d:	53                   	push   ebx
c001b36e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b371:	58                   	pop    eax
c001b372:	5a                   	pop    edx
c001b373:	6a 00                	push   0x0
c001b375:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b378:	e8 0f 24 00 00       	call   c001d78c <Thr::loadDLL(char const*, bool)>
c001b37d:	83 c4 10             	add    esp,0x10
c001b380:	89 c1                	mov    ecx,eax
c001b382:	31 d2                	xor    edx,edx
c001b384:	b8 04 00 00 00       	mov    eax,0x4
c001b389:	85 c9                	test   ecx,ecx
c001b38b:	74 15                	je     c001b3a2 <Sys::loadDLL(regs*)+0xa4>
c001b38d:	53                   	push   ebx
c001b38e:	53                   	push   ebx
c001b38f:	ff 35 e8 e5 02 c0    	push   DWORD PTR ds:0xc002e5e8
c001b395:	51                   	push   ecx
c001b396:	e8 25 26 00 00       	call   c001d9c0 <Thr::executeDLL(unsigned long, void*)>
c001b39b:	83 c4 10             	add    esp,0x10
c001b39e:	31 c0                	xor    eax,eax
c001b3a0:	31 d2                	xor    edx,edx
c001b3a2:	59                   	pop    ecx
c001b3a3:	5b                   	pop    ebx
c001b3a4:	5e                   	pop    esi
c001b3a5:	c3                   	ret    

c001b3a6 <Sys::read(regs*)>:
c001b3a6:	57                   	push   edi
c001b3a7:	56                   	push   esi
c001b3a8:	53                   	push   ebx
c001b3a9:	83 ec 10             	sub    esp,0x10
c001b3ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3b0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3b3:	83 f8 02             	cmp    eax,0x2
c001b3b6:	77 10                	ja     c001b3c8 <Sys::read(regs*)+0x22>
c001b3b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3c0:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3c6:	eb 0e                	jmp    c001b3d6 <Sys::read(regs*)+0x30>
c001b3c8:	83 ec 0c             	sub    esp,0xc
c001b3cb:	50                   	push   eax
c001b3cc:	e8 64 66 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b3d1:	83 c4 10             	add    esp,0x10
c001b3d4:	89 c1                	mov    ecx,eax
c001b3d6:	83 c8 ff             	or     eax,0xffffffff
c001b3d9:	85 c9                	test   ecx,ecx
c001b3db:	89 c2                	mov    edx,eax
c001b3dd:	74 28                	je     c001b407 <Sys::read(regs*)+0x61>
c001b3df:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3e7:	31 ff                	xor    edi,edi
c001b3e9:	83 ec 0c             	sub    esp,0xc
c001b3ec:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b3ee:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b3f2:	52                   	push   edx
c001b3f3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3f6:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b3f9:	57                   	push   edi
c001b3fa:	56                   	push   esi
c001b3fb:	51                   	push   ecx
c001b3fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b403:	83 c4 20             	add    esp,0x20
c001b406:	99                   	cdq    
c001b407:	83 c4 10             	add    esp,0x10
c001b40a:	5b                   	pop    ebx
c001b40b:	5e                   	pop    esi
c001b40c:	5f                   	pop    edi
c001b40d:	c3                   	ret    

c001b40e <Sys::sbrk(regs*)>:
c001b40e:	56                   	push   esi
c001b40f:	53                   	push   ebx
c001b410:	83 ec 0c             	sub    esp,0xc
c001b413:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b417:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b41c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b41f:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001b425:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c001b428:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b42b:	68 a9 be 02 c0       	push   0xc002bea9
c001b430:	e8 39 7b ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001b435:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b438:	83 c4 10             	add    esp,0x10
c001b43b:	85 c0                	test   eax,eax
c001b43d:	75 0a                	jne    c001b449 <Sys::sbrk(regs*)+0x3b>
c001b43f:	50                   	push   eax
c001b440:	50                   	push   eax
c001b441:	53                   	push   ebx
c001b442:	68 c5 be 02 c0       	push   0xc002bec5
c001b447:	eb 54                	jmp    c001b49d <Sys::sbrk(regs*)+0x8f>
c001b449:	79 0a                	jns    c001b455 <Sys::sbrk(regs*)+0x47>
c001b44b:	56                   	push   esi
c001b44c:	56                   	push   esi
c001b44d:	53                   	push   ebx
c001b44e:	68 d8 be 02 c0       	push   0xc002bed8
c001b453:	eb 48                	jmp    c001b49d <Sys::sbrk(regs*)+0x8f>
c001b455:	3d 00 00 00 04       	cmp    eax,0x4000000
c001b45a:	76 17                	jbe    c001b473 <Sys::sbrk(regs*)+0x65>
c001b45c:	51                   	push   ecx
c001b45d:	51                   	push   ecx
c001b45e:	53                   	push   ebx
c001b45f:	68 ea be 02 c0       	push   0xc002beea
c001b464:	e8 05 7b ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001b469:	83 c8 ff             	or     eax,0xffffffff
c001b46c:	83 c4 10             	add    esp,0x10
c001b46f:	89 c2                	mov    edx,eax
c001b471:	eb 36                	jmp    c001b4a9 <Sys::sbrk(regs*)+0x9b>
c001b473:	05 ff 0f 00 00       	add    eax,0xfff
c001b478:	56                   	push   esi
c001b479:	c1 e8 0c             	shr    eax,0xc
c001b47c:	68 07 04 00 00       	push   0x407
c001b481:	50                   	push   eax
c001b482:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b487:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b48a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b490:	e8 cd 6f ff ff       	call   c0012462 <VAS::allocatePages(int, int)>
c001b495:	58                   	pop    eax
c001b496:	5a                   	pop    edx
c001b497:	53                   	push   ebx
c001b498:	68 03 bf 02 c0       	push   0xc002bf03
c001b49d:	e8 cc 7a ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001b4a2:	89 d8                	mov    eax,ebx
c001b4a4:	31 d2                	xor    edx,edx
c001b4a6:	83 c4 10             	add    esp,0x10
c001b4a9:	59                   	pop    ecx
c001b4aa:	5b                   	pop    ebx
c001b4ab:	5e                   	pop    esi
c001b4ac:	c3                   	ret    

c001b4ad <Sys::setCwd(regs*)>:
c001b4ad:	83 ec 14             	sub    esp,0x14
c001b4b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4b4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b4b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4bc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4bf:	e8 73 83 ff ff       	call   c0013837 <Fs::setcwd(Process*, char*)>
c001b4c4:	83 c4 1c             	add    esp,0x1c
c001b4c7:	99                   	cdq    
c001b4c8:	c3                   	ret    

c001b4c9 <Sys::setTime(regs*)>:
c001b4c9:	55                   	push   ebp
c001b4ca:	31 d2                	xor    edx,edx
c001b4cc:	57                   	push   edi
c001b4cd:	bf 18 00 00 00       	mov    edi,0x18
c001b4d2:	56                   	push   esi
c001b4d3:	53                   	push   ebx
c001b4d4:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b4d9:	83 ec 30             	sub    esp,0x30
c001b4dc:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b4e0:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b4e3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4e6:	f7 f3                	div    ebx
c001b4e8:	89 d6                	mov    esi,edx
c001b4ea:	31 d2                	xor    edx,edx
c001b4ec:	f7 f3                	div    ebx
c001b4ee:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4f1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b4f5:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b4fa:	31 d2                	xor    edx,edx
c001b4fc:	f7 f3                	div    ebx
c001b4fe:	31 d2                	xor    edx,edx
c001b500:	bb 0c 00 00 00       	mov    ebx,0xc
c001b505:	f7 f7                	div    edi
c001b507:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b50a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b50e:	0f b7 cd             	movzx  ecx,bp
c001b511:	56                   	push   esi
c001b512:	89 c7                	mov    edi,eax
c001b514:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b518:	c1 e6 10             	shl    esi,0x10
c001b51b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b51f:	83 e7 1f             	and    edi,0x1f
c001b522:	51                   	push   ecx
c001b523:	47                   	inc    edi
c001b524:	c1 e8 05             	shr    eax,0x5
c001b527:	31 d2                	xor    edx,edx
c001b529:	f7 f3                	div    ebx
c001b52b:	31 db                	xor    ebx,ebx
c001b52d:	52                   	push   edx
c001b52e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b532:	57                   	push   edi
c001b533:	68 29 bf 02 c0       	push   0xc002bf29
c001b538:	e8 31 7a ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001b53d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b541:	89 f8                	mov    eax,edi
c001b543:	31 c9                	xor    ecx,ecx
c001b545:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b549:	88 c1                	mov    cl,al
c001b54b:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b551:	88 d5                	mov    ch,dl
c001b553:	c1 e0 10             	shl    eax,0x10
c001b556:	0f b7 d1             	movzx  edx,cx
c001b559:	09 c2                	or     edx,eax
c001b55b:	89 d8                	mov    eax,ebx
c001b55d:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b562:	09 f0                	or     eax,esi
c001b564:	89 c3                	mov    ebx,eax
c001b566:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b56a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b56e:	83 c4 18             	add    esp,0x18
c001b571:	53                   	push   ebx
c001b572:	52                   	push   edx
c001b573:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b577:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b57b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b57f:	e8 cd 89 ff ff       	call   c0013f51 <datetimeToSeconds(datetime_t)>
c001b584:	83 c4 0c             	add    esp,0xc
c001b587:	52                   	push   edx
c001b588:	50                   	push   eax
c001b589:	56                   	push   esi
c001b58a:	e8 49 8b ff ff       	call   c00140d8 <secondsToDatetime(unsigned long long)>
c001b58f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b593:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b597:	51                   	push   ecx
c001b598:	89 d6                	mov    esi,edx
c001b59a:	51                   	push   ecx
c001b59b:	c1 ee 10             	shr    esi,0x10
c001b59e:	89 f3                	mov    ebx,esi
c001b5a0:	0f b6 f3             	movzx  esi,bl
c001b5a3:	56                   	push   esi
c001b5a4:	0f b6 f6             	movzx  esi,dh
c001b5a7:	0f b6 d2             	movzx  edx,dl
c001b5aa:	56                   	push   esi
c001b5ab:	52                   	push   edx
c001b5ac:	89 c2                	mov    edx,eax
c001b5ae:	c1 ea 10             	shr    edx,0x10
c001b5b1:	52                   	push   edx
c001b5b2:	0f b6 d4             	movzx  edx,ah
c001b5b5:	0f b6 c0             	movzx  eax,al
c001b5b8:	52                   	push   edx
c001b5b9:	50                   	push   eax
c001b5ba:	68 45 bf 02 c0       	push   0xc002bf45
c001b5bf:	e8 aa 79 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001b5c4:	83 c4 2c             	add    esp,0x2c
c001b5c7:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001b5cc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b5d0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b5d4:	53                   	push   ebx
c001b5d5:	51                   	push   ecx
c001b5d6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b5dc:	e8 97 8a ff ff       	call   c0014078 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b5e1:	83 f0 01             	xor    eax,0x1
c001b5e4:	31 d2                	xor    edx,edx
c001b5e6:	0f b6 c0             	movzx  eax,al
c001b5e9:	83 c4 3c             	add    esp,0x3c
c001b5ec:	5b                   	pop    ebx
c001b5ed:	5e                   	pop    esi
c001b5ee:	5f                   	pop    edi
c001b5ef:	5d                   	pop    ebp
c001b5f0:	c3                   	ret    

c001b5f1 <Sys::timezone(regs*)>:
c001b5f1:	53                   	push   ebx
c001b5f2:	83 ec 08             	sub    esp,0x8
c001b5f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5f9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b5fd:	75 17                	jne    c001b616 <Sys::timezone(regs*)+0x25>
c001b5ff:	83 ec 0c             	sub    esp,0xc
c001b602:	68 61 bf 02 c0       	push   0xc002bf61
c001b607:	e8 62 79 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001b60c:	83 c8 ff             	or     eax,0xffffffff
c001b60f:	83 c4 10             	add    esp,0x10
c001b612:	89 c2                	mov    edx,eax
c001b614:	eb 20                	jmp    c001b636 <Sys::timezone(regs*)+0x45>
c001b616:	83 ec 0c             	sub    esp,0xc
c001b619:	68 99 bf 02 c0       	push   0xc002bf99
c001b61e:	e8 4b 79 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001b623:	58                   	pop    eax
c001b624:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b627:	e8 ae 87 ff ff       	call   c0013dda <User::loadClockSettings(int)>
c001b62c:	83 c4 10             	add    esp,0x10
c001b62f:	b8 01 00 00 00       	mov    eax,0x1
c001b634:	31 d2                	xor    edx,edx
c001b636:	83 c4 08             	add    esp,0x8
c001b639:	5b                   	pop    ebx
c001b63a:	c3                   	ret    

c001b63b <Sys::write(regs*)>:
c001b63b:	57                   	push   edi
c001b63c:	56                   	push   esi
c001b63d:	53                   	push   ebx
c001b63e:	83 ec 10             	sub    esp,0x10
c001b641:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b645:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b648:	83 f8 02             	cmp    eax,0x2
c001b64b:	77 10                	ja     c001b65d <Sys::write(regs*)+0x22>
c001b64d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b652:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b655:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b65b:	eb 0e                	jmp    c001b66b <Sys::write(regs*)+0x30>
c001b65d:	83 ec 0c             	sub    esp,0xc
c001b660:	50                   	push   eax
c001b661:	e8 cf 63 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b666:	83 c4 10             	add    esp,0x10
c001b669:	89 c1                	mov    ecx,eax
c001b66b:	83 c8 ff             	or     eax,0xffffffff
c001b66e:	85 c9                	test   ecx,ecx
c001b670:	89 c2                	mov    edx,eax
c001b672:	74 28                	je     c001b69c <Sys::write(regs*)+0x61>
c001b674:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b67c:	31 ff                	xor    edi,edi
c001b67e:	83 ec 0c             	sub    esp,0xc
c001b681:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b683:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b687:	52                   	push   edx
c001b688:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b68b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b68e:	57                   	push   edi
c001b68f:	56                   	push   esi
c001b690:	51                   	push   ecx
c001b691:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b694:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b698:	83 c4 20             	add    esp,0x20
c001b69b:	99                   	cdq    
c001b69c:	83 c4 10             	add    esp,0x10
c001b69f:	5b                   	pop    ebx
c001b6a0:	5e                   	pop    esi
c001b6a1:	5f                   	pop    edi
c001b6a2:	c3                   	ret    

c001b6a3 <Sys::wsbe(regs*)>:
c001b6a3:	57                   	push   edi
c001b6a4:	b9 0b 00 00 00       	mov    ecx,0xb
c001b6a9:	56                   	push   esi
c001b6aa:	be d8 bf 02 c0       	mov    esi,0xc002bfd8
c001b6af:	53                   	push   ebx
c001b6b0:	83 ec 30             	sub    esp,0x30
c001b6b3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b6b7:	fc                   	cld    
c001b6b8:	83 ec 0c             	sub    esp,0xc
c001b6bb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6bd:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b6c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6c9:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b6cf:	8b 06                	mov    eax,DWORD PTR [esi]
c001b6d1:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b6d4:	57                   	push   edi
c001b6d5:	e8 ba 50 fe ff       	call   c0000794 <strlen>
c001b6da:	5a                   	pop    edx
c001b6db:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b6df:	52                   	push   edx
c001b6e0:	31 d2                	xor    edx,edx
c001b6e2:	57                   	push   edi
c001b6e3:	52                   	push   edx
c001b6e4:	50                   	push   eax
c001b6e5:	56                   	push   esi
c001b6e6:	ff d3                	call   ebx
c001b6e8:	83 c4 14             	add    esp,0x14
c001b6eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b6ef:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6f2:	e8 80 31 00 00       	call   c001e877 <terminateTask(int)>
c001b6f7:	83 c4 40             	add    esp,0x40
c001b6fa:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6ff:	5b                   	pop    ebx
c001b700:	31 d2                	xor    edx,edx
c001b702:	5e                   	pop    esi
c001b703:	5f                   	pop    edi
c001b704:	c3                   	ret    

c001b705 <Sys::yield(regs*)>:
c001b705:	57                   	push   edi
c001b706:	56                   	push   esi
c001b707:	53                   	push   ebx
c001b708:	e8 27 27 00 00       	call   c001de34 <lockScheduler()>
c001b70d:	e8 5e 2a 00 00       	call   c001e170 <schedule()>
c001b712:	e8 1f 27 00 00       	call   c001de36 <unlockScheduler()>
c001b717:	8b 35 70 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec70
c001b71d:	8b 3d 74 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec74
c001b723:	89 f0                	mov    eax,esi
c001b725:	89 fb                	mov    ebx,edi
c001b727:	89 f1                	mov    ecx,esi
c001b729:	c1 e0 07             	shl    eax,0x7
c001b72c:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b730:	25 80 30 0f 00       	and    eax,0xf3080
c001b735:	c1 eb 17             	shr    ebx,0x17
c001b738:	31 c8                	xor    eax,ecx
c001b73a:	89 da                	mov    edx,ebx
c001b73c:	5b                   	pop    ebx
c001b73d:	5e                   	pop    esi
c001b73e:	5f                   	pop    edi
c001b73f:	c3                   	ret    

c001b740 <sysCallSeekDir(regs*)>:
c001b740:	31 c0                	xor    eax,eax
c001b742:	31 d2                	xor    edx,edx
c001b744:	c3                   	ret    

c001b745 <sysCallTellDir(regs*)>:
c001b745:	31 c0                	xor    eax,eax
c001b747:	31 d2                	xor    edx,edx
c001b749:	c3                   	ret    

c001b74a <sysCallVerify(regs*)>:
c001b74a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b74e:	31 d2                	xor    edx,edx
c001b750:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b753:	c3                   	ret    

c001b754 <sysFormatDisk(regs*)>:
c001b754:	56                   	push   esi
c001b755:	53                   	push   ebx
c001b756:	53                   	push   ebx
c001b757:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b75b:	8b 1d 6c e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e76c
c001b761:	eb 25                	jmp    c001b788 <sysFormatDisk(regs*)+0x34>
c001b763:	83 ec 0c             	sub    esp,0xc
c001b766:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b769:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b76b:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b76e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b771:	50                   	push   eax
c001b772:	ff 34 85 00 ec 02 c0 	push   DWORD PTR [eax*4-0x3ffd1400]
c001b779:	53                   	push   ebx
c001b77a:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b77d:	83 c4 20             	add    esp,0x20
c001b780:	83 f8 08             	cmp    eax,0x8
c001b783:	75 12                	jne    c001b797 <sysFormatDisk(regs*)+0x43>
c001b785:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b788:	85 db                	test   ebx,ebx
c001b78a:	75 d7                	jne    c001b763 <sysFormatDisk(regs*)+0xf>
c001b78c:	59                   	pop    ecx
c001b78d:	b8 03 00 00 00       	mov    eax,0x3
c001b792:	31 d2                	xor    edx,edx
c001b794:	5b                   	pop    ebx
c001b795:	5e                   	pop    esi
c001b796:	c3                   	ret    
c001b797:	85 c0                	test   eax,eax
c001b799:	74 1b                	je     c001b7b6 <sysFormatDisk(regs*)+0x62>
c001b79b:	83 f8 09             	cmp    eax,0x9
c001b79e:	74 0b                	je     c001b7ab <sysFormatDisk(regs*)+0x57>
c001b7a0:	59                   	pop    ecx
c001b7a1:	b8 02 00 00 00       	mov    eax,0x2
c001b7a6:	31 d2                	xor    edx,edx
c001b7a8:	5b                   	pop    ebx
c001b7a9:	5e                   	pop    esi
c001b7aa:	c3                   	ret    
c001b7ab:	59                   	pop    ecx
c001b7ac:	b8 01 00 00 00       	mov    eax,0x1
c001b7b1:	31 d2                	xor    edx,edx
c001b7b3:	5b                   	pop    ebx
c001b7b4:	5e                   	pop    esi
c001b7b5:	c3                   	ret    
c001b7b6:	59                   	pop    ecx
c001b7b7:	31 c0                	xor    eax,eax
c001b7b9:	31 d2                	xor    edx,edx
c001b7bb:	5b                   	pop    ebx
c001b7bc:	5e                   	pop    esi
c001b7bd:	c3                   	ret    

c001b7be <sysSetDiskVolumeLabel(regs*)>:
c001b7be:	56                   	push   esi
c001b7bf:	53                   	push   ebx
c001b7c0:	53                   	push   ebx
c001b7c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7c5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b7c8:	83 f8 19             	cmp    eax,0x19
c001b7cb:	77 29                	ja     c001b7f6 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7cd:	8b 0c 85 00 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1400]
c001b7d4:	85 c9                	test   ecx,ecx
c001b7d6:	74 1e                	je     c001b7f6 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7d8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b7db:	85 d2                	test   edx,edx
c001b7dd:	74 17                	je     c001b7f6 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7df:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b7e5:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b7e7:	52                   	push   edx
c001b7e8:	50                   	push   eax
c001b7e9:	51                   	push   ecx
c001b7ea:	53                   	push   ebx
c001b7eb:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b7ee:	83 c4 10             	add    esp,0x10
c001b7f1:	99                   	cdq    
c001b7f2:	59                   	pop    ecx
c001b7f3:	5b                   	pop    ebx
c001b7f4:	5e                   	pop    esi
c001b7f5:	c3                   	ret    
c001b7f6:	59                   	pop    ecx
c001b7f7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7fc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b801:	5b                   	pop    ebx
c001b802:	5e                   	pop    esi
c001b803:	c3                   	ret    

c001b804 <sysGetDiskVolumeLabel(regs*)>:
c001b804:	57                   	push   edi
c001b805:	56                   	push   esi
c001b806:	53                   	push   ebx
c001b807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b80b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b80e:	83 fa 19             	cmp    edx,0x19
c001b811:	77 34                	ja     c001b847 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b813:	8b 0c 95 00 ec 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1400]
c001b81a:	85 c9                	test   ecx,ecx
c001b81c:	74 29                	je     c001b847 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b81e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b821:	85 db                	test   ebx,ebx
c001b823:	74 22                	je     c001b847 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b825:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b828:	85 c0                	test   eax,eax
c001b82a:	74 1b                	je     c001b847 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b82c:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b832:	83 ec 0c             	sub    esp,0xc
c001b835:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b837:	50                   	push   eax
c001b838:	53                   	push   ebx
c001b839:	52                   	push   edx
c001b83a:	51                   	push   ecx
c001b83b:	56                   	push   esi
c001b83c:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b83f:	83 c4 20             	add    esp,0x20
c001b842:	99                   	cdq    
c001b843:	5b                   	pop    ebx
c001b844:	5e                   	pop    esi
c001b845:	5f                   	pop    edi
c001b846:	c3                   	ret    
c001b847:	5b                   	pop    ebx
c001b848:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b84d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b852:	5e                   	pop    esi
c001b853:	5f                   	pop    edi
c001b854:	c3                   	ret    

c001b855 <sysShutdown(regs*)>:
c001b855:	83 ec 0c             	sub    esp,0xc
c001b858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b85c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b85f:	85 c0                	test   eax,eax
c001b861:	74 18                	je     c001b87b <sysShutdown(regs*)+0x26>
c001b863:	83 f8 01             	cmp    eax,0x1
c001b866:	74 38                	je     c001b8a0 <sysShutdown(regs*)+0x4b>
c001b868:	83 f8 02             	cmp    eax,0x2
c001b86b:	74 24                	je     c001b891 <sysShutdown(regs*)+0x3c>
c001b86d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b872:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b877:	83 c4 0c             	add    esp,0xc
c001b87a:	c3                   	ret    
c001b87b:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001b880:	8b 10                	mov    edx,DWORD PTR [eax]
c001b882:	6a 00                	push   0x0
c001b884:	6a 00                	push   0x0
c001b886:	6a 00                	push   0x0
c001b888:	50                   	push   eax
c001b889:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b88c:	83 c4 10             	add    esp,0x10
c001b88f:	eb dc                	jmp    c001b86d <sysShutdown(regs*)+0x18>
c001b891:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001b896:	8b 10                	mov    edx,DWORD PTR [eax]
c001b898:	6a 00                	push   0x0
c001b89a:	6a 00                	push   0x0
c001b89c:	6a 01                	push   0x1
c001b89e:	eb e8                	jmp    c001b888 <sysShutdown(regs*)+0x33>
c001b8a0:	a1 a0 0c 03 c0       	mov    eax,ds:0xc0030ca0
c001b8a5:	85 c0                	test   eax,eax
c001b8a7:	74 02                	je     c001b8ab <sysShutdown(regs*)+0x56>
c001b8a9:	ff d0                	call   eax
c001b8ab:	31 c0                	xor    eax,eax
c001b8ad:	31 d2                	xor    edx,edx
c001b8af:	83 c4 0c             	add    esp,0xc
c001b8b2:	c3                   	ret    

c001b8b3 <sysCallRealpath(regs*)>:
c001b8b3:	83 ec 0c             	sub    esp,0xc
c001b8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8ba:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b8bd:	85 d2                	test   edx,edx
c001b8bf:	74 07                	je     c001b8c8 <sysCallRealpath(regs*)+0x15>
c001b8c1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b8c4:	85 c0                	test   eax,eax
c001b8c6:	75 0b                	jne    c001b8d3 <sysCallRealpath(regs*)+0x20>
c001b8c8:	b8 01 00 00 00       	mov    eax,0x1
c001b8cd:	31 d2                	xor    edx,edx
c001b8cf:	83 c4 0c             	add    esp,0xc
c001b8d2:	c3                   	ret    
c001b8d3:	51                   	push   ecx
c001b8d4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b8da:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b8dd:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b8e3:	51                   	push   ecx
c001b8e4:	52                   	push   edx
c001b8e5:	50                   	push   eax
c001b8e6:	e8 31 7a ff ff       	call   c001331c <Fs::standardiseFiles(char*, char const*, char const*)>
c001b8eb:	83 c4 10             	add    esp,0x10
c001b8ee:	31 c0                	xor    eax,eax
c001b8f0:	31 d2                	xor    edx,edx
c001b8f2:	83 c4 0c             	add    esp,0xc
c001b8f5:	c3                   	ret    

c001b8f6 <sysCallGetArgc(regs*)>:
c001b8f6:	83 ec 14             	sub    esp,0x14
c001b8f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b901:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b907:	68 04 c0 02 c0       	push   0xc002c004
c001b90c:	e8 5d 76 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001b911:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b916:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b919:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b91f:	83 c4 1c             	add    esp,0x1c
c001b922:	99                   	cdq    
c001b923:	c3                   	ret    

c001b924 <sysCallReadDir(regs*)>:
c001b924:	53                   	push   ebx
c001b925:	83 ec 18             	sub    esp,0x18
c001b928:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b92c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b92f:	83 f8 02             	cmp    eax,0x2
c001b932:	76 53                	jbe    c001b987 <sysCallReadDir(regs*)+0x63>
c001b934:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b937:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b93d:	77 4f                	ja     c001b98e <sysCallReadDir(regs*)+0x6a>
c001b93f:	83 ec 0c             	sub    esp,0xc
c001b942:	50                   	push   eax
c001b943:	e8 ed 60 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b948:	83 c4 10             	add    esp,0x10
c001b94b:	85 c0                	test   eax,eax
c001b94d:	74 50                	je     c001b99f <sysCallReadDir(regs*)+0x7b>
c001b94f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b957:	83 ec 0c             	sub    esp,0xc
c001b95a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b95c:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b960:	51                   	push   ecx
c001b961:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b964:	6a 00                	push   0x0
c001b966:	68 10 01 00 00       	push   0x110
c001b96b:	50                   	push   eax
c001b96c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b96f:	83 c4 20             	add    esp,0x20
c001b972:	85 c0                	test   eax,eax
c001b974:	74 38                	je     c001b9ae <sysCallReadDir(regs*)+0x8a>
c001b976:	83 f8 07             	cmp    eax,0x7
c001b979:	74 0c                	je     c001b987 <sysCallReadDir(regs*)+0x63>
c001b97b:	b8 02 00 00 00       	mov    eax,0x2
c001b980:	31 d2                	xor    edx,edx
c001b982:	83 c4 18             	add    esp,0x18
c001b985:	5b                   	pop    ebx
c001b986:	c3                   	ret    
c001b987:	b8 01 00 00 00       	mov    eax,0x1
c001b98c:	eb f2                	jmp    c001b980 <sysCallReadDir(regs*)+0x5c>
c001b98e:	83 ec 08             	sub    esp,0x8
c001b991:	52                   	push   edx
c001b992:	68 1c c1 02 c0       	push   0xc002c11c
c001b997:	e8 d2 75 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001b99c:	83 c4 10             	add    esp,0x10
c001b99f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9a9:	83 c4 18             	add    esp,0x18
c001b9ac:	5b                   	pop    ebx
c001b9ad:	c3                   	ret    
c001b9ae:	31 c0                	xor    eax,eax
c001b9b0:	eb ce                	jmp    c001b980 <sysCallReadDir(regs*)+0x5c>

c001b9b2 <sysCallIsATTY(regs*)>:
c001b9b2:	83 ec 0c             	sub    esp,0xc
c001b9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b9bc:	83 f8 02             	cmp    eax,0x2
c001b9bf:	76 07                	jbe    c001b9c8 <sysCallIsATTY(regs*)+0x16>
c001b9c1:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b9c6:	75 26                	jne    c001b9ee <sysCallIsATTY(regs*)+0x3c>
c001b9c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9d0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b9d6:	85 c0                	test   eax,eax
c001b9d8:	74 24                	je     c001b9fe <sysCallIsATTY(regs*)+0x4c>
c001b9da:	83 ec 0c             	sub    esp,0xc
c001b9dd:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9df:	50                   	push   eax
c001b9e0:	ff 12                	call   DWORD PTR [edx]
c001b9e2:	31 d2                	xor    edx,edx
c001b9e4:	0f b6 c0             	movzx  eax,al
c001b9e7:	83 c4 10             	add    esp,0x10
c001b9ea:	83 c4 0c             	add    esp,0xc
c001b9ed:	c3                   	ret    
c001b9ee:	83 ec 0c             	sub    esp,0xc
c001b9f1:	50                   	push   eax
c001b9f2:	e8 3e 60 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b9f7:	83 c4 10             	add    esp,0x10
c001b9fa:	85 c0                	test   eax,eax
c001b9fc:	75 dc                	jne    c001b9da <sysCallIsATTY(regs*)+0x28>
c001b9fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba03:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba08:	83 c4 0c             	add    esp,0xc
c001ba0b:	c3                   	ret    

c001ba0c <sysCallSeek(regs*)>:
c001ba0c:	53                   	push   ebx
c001ba0d:	83 ec 08             	sub    esp,0x8
c001ba10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba14:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba17:	83 f8 02             	cmp    eax,0x2
c001ba1a:	76 4a                	jbe    c001ba66 <sysCallSeek(regs*)+0x5a>
c001ba1c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba21:	77 32                	ja     c001ba55 <sysCallSeek(regs*)+0x49>
c001ba23:	83 ec 0c             	sub    esp,0xc
c001ba26:	50                   	push   eax
c001ba27:	e8 09 60 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001ba2c:	83 c4 0c             	add    esp,0xc
c001ba2f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba32:	31 db                	xor    ebx,ebx
c001ba34:	53                   	push   ebx
c001ba35:	51                   	push   ecx
c001ba36:	50                   	push   eax
c001ba37:	e8 ac 7b ff ff       	call   c00135e8 <File::seek(unsigned long long)>
c001ba3c:	83 c4 10             	add    esp,0x10
c001ba3f:	85 c0                	test   eax,eax
c001ba41:	0f 95 c0             	setne  al
c001ba44:	31 d2                	xor    edx,edx
c001ba46:	0f b6 c0             	movzx  eax,al
c001ba49:	f7 d8                	neg    eax
c001ba4b:	83 d2 00             	adc    edx,0x0
c001ba4e:	83 c4 08             	add    esp,0x8
c001ba51:	f7 da                	neg    edx
c001ba53:	5b                   	pop    ebx
c001ba54:	c3                   	ret    
c001ba55:	83 ec 08             	sub    esp,0x8
c001ba58:	50                   	push   eax
c001ba59:	68 0f c0 02 c0       	push   0xc002c00f
c001ba5e:	e8 0b 75 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001ba63:	83 c4 10             	add    esp,0x10
c001ba66:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba6b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba70:	83 c4 08             	add    esp,0x8
c001ba73:	5b                   	pop    ebx
c001ba74:	c3                   	ret    

c001ba75 <sysCallTell(regs*)>:
c001ba75:	53                   	push   ebx
c001ba76:	83 ec 08             	sub    esp,0x8
c001ba79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba7d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba80:	83 f8 02             	cmp    eax,0x2
c001ba83:	76 5e                	jbe    c001bae3 <sysCallTell(regs*)+0x6e>
c001ba85:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba8a:	77 2d                	ja     c001bab9 <sysCallTell(regs*)+0x44>
c001ba8c:	83 ec 0c             	sub    esp,0xc
c001ba8f:	50                   	push   eax
c001ba90:	e8 a0 5f ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001ba95:	5a                   	pop    edx
c001ba96:	59                   	pop    ecx
c001ba97:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba9a:	50                   	push   eax
c001ba9b:	e8 9e 7b ff ff       	call   c001363e <File::tell(unsigned long long*)>
c001baa0:	83 c4 10             	add    esp,0x10
c001baa3:	85 c0                	test   eax,eax
c001baa5:	0f 95 c0             	setne  al
c001baa8:	31 d2                	xor    edx,edx
c001baaa:	0f b6 c0             	movzx  eax,al
c001baad:	f7 d8                	neg    eax
c001baaf:	83 d2 00             	adc    edx,0x0
c001bab2:	83 c4 08             	add    esp,0x8
c001bab5:	f7 da                	neg    edx
c001bab7:	5b                   	pop    ebx
c001bab8:	c3                   	ret    
c001bab9:	83 ec 08             	sub    esp,0x8
c001babc:	50                   	push   eax
c001babd:	68 29 c0 02 c0       	push   0xc002c029
c001bac2:	e8 a7 74 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001bac7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001baca:	83 c4 10             	add    esp,0x10
c001bacd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bad3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bada:	31 d2                	xor    edx,edx
c001badc:	31 c0                	xor    eax,eax
c001bade:	83 c4 08             	add    esp,0x8
c001bae1:	5b                   	pop    ebx
c001bae2:	c3                   	ret    
c001bae3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bae8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001baed:	83 c4 08             	add    esp,0x8
c001baf0:	5b                   	pop    ebx
c001baf1:	c3                   	ret    

c001baf2 <sysCallSize(regs*)>:
c001baf2:	53                   	push   ebx
c001baf3:	83 ec 18             	sub    esp,0x18
c001baf6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bafa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bafd:	83 f8 02             	cmp    eax,0x2
c001bb00:	76 64                	jbe    c001bb66 <sysCallSize(regs*)+0x74>
c001bb02:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb07:	77 33                	ja     c001bb3c <sysCallSize(regs*)+0x4a>
c001bb09:	83 ec 0c             	sub    esp,0xc
c001bb0c:	50                   	push   eax
c001bb0d:	e8 23 5f ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bb12:	83 c4 0c             	add    esp,0xc
c001bb15:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bb19:	52                   	push   edx
c001bb1a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb1d:	50                   	push   eax
c001bb1e:	e8 b3 7c ff ff       	call   c00137d6 <File::stat(unsigned long long*, bool*)>
c001bb23:	83 c4 10             	add    esp,0x10
c001bb26:	85 c0                	test   eax,eax
c001bb28:	0f 95 c0             	setne  al
c001bb2b:	31 d2                	xor    edx,edx
c001bb2d:	0f b6 c0             	movzx  eax,al
c001bb30:	f7 d8                	neg    eax
c001bb32:	83 d2 00             	adc    edx,0x0
c001bb35:	83 c4 18             	add    esp,0x18
c001bb38:	f7 da                	neg    edx
c001bb3a:	5b                   	pop    ebx
c001bb3b:	c3                   	ret    
c001bb3c:	83 ec 08             	sub    esp,0x8
c001bb3f:	50                   	push   eax
c001bb40:	68 43 c0 02 c0       	push   0xc002c043
c001bb45:	e8 24 74 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001bb4a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb4d:	83 c4 10             	add    esp,0x10
c001bb50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb5d:	31 d2                	xor    edx,edx
c001bb5f:	31 c0                	xor    eax,eax
c001bb61:	83 c4 18             	add    esp,0x18
c001bb64:	5b                   	pop    ebx
c001bb65:	c3                   	ret    
c001bb66:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb6b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb70:	83 c4 18             	add    esp,0x18
c001bb73:	5b                   	pop    ebx
c001bb74:	c3                   	ret    

c001bb75 <sysCallSizeFromFilename(regs*)>:
c001bb75:	57                   	push   edi
c001bb76:	56                   	push   esi
c001bb77:	53                   	push   ebx
c001bb78:	83 ec 20             	sub    esp,0x20
c001bb7b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb7f:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb82:	83 fb 02             	cmp    ebx,0x2
c001bb85:	0f 86 99 00 00 00    	jbe    c001bc24 <sysCallSizeFromFilename(regs*)+0xaf>
c001bb8b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb91:	77 65                	ja     c001bbf8 <sysCallSizeFromFilename(regs*)+0x83>
c001bb93:	83 ec 0c             	sub    esp,0xc
c001bb96:	68 14 01 00 00       	push   0x114
c001bb9b:	e8 a0 3c ff ff       	call   c000f840 <malloc>
c001bba0:	83 c4 0c             	add    esp,0xc
c001bba3:	89 c6                	mov    esi,eax
c001bba5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbaa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbad:	53                   	push   ebx
c001bbae:	56                   	push   esi
c001bbaf:	e8 12 79 ff ff       	call   c00134c6 <File::File(char const*, Process*)>
c001bbb4:	83 c4 0c             	add    esp,0xc
c001bbb7:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bbbb:	50                   	push   eax
c001bbbc:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bbbf:	56                   	push   esi
c001bbc0:	e8 11 7c ff ff       	call   c00137d6 <File::stat(unsigned long long*, bool*)>
c001bbc5:	83 c4 10             	add    esp,0x10
c001bbc8:	85 f6                	test   esi,esi
c001bbca:	74 14                	je     c001bbe0 <sysCallSizeFromFilename(regs*)+0x6b>
c001bbcc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbd0:	8b 16                	mov    edx,DWORD PTR [esi]
c001bbd2:	83 ec 0c             	sub    esp,0xc
c001bbd5:	56                   	push   esi
c001bbd6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bbd9:	83 c4 10             	add    esp,0x10
c001bbdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbe0:	85 c0                	test   eax,eax
c001bbe2:	0f 95 c0             	setne  al
c001bbe5:	31 d2                	xor    edx,edx
c001bbe7:	0f b6 c0             	movzx  eax,al
c001bbea:	f7 d8                	neg    eax
c001bbec:	83 d2 00             	adc    edx,0x0
c001bbef:	83 c4 20             	add    esp,0x20
c001bbf2:	f7 da                	neg    edx
c001bbf4:	5b                   	pop    ebx
c001bbf5:	5e                   	pop    esi
c001bbf6:	5f                   	pop    edi
c001bbf7:	c3                   	ret    
c001bbf8:	83 ec 08             	sub    esp,0x8
c001bbfb:	53                   	push   ebx
c001bbfc:	68 43 c0 02 c0       	push   0xc002c043
c001bc01:	e8 68 73 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001bc06:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bc09:	83 c4 10             	add    esp,0x10
c001bc0c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc19:	31 d2                	xor    edx,edx
c001bc1b:	83 c4 20             	add    esp,0x20
c001bc1e:	31 c0                	xor    eax,eax
c001bc20:	5b                   	pop    ebx
c001bc21:	5e                   	pop    esi
c001bc22:	5f                   	pop    edi
c001bc23:	c3                   	ret    
c001bc24:	83 c4 20             	add    esp,0x20
c001bc27:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc2c:	5b                   	pop    ebx
c001bc2d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc32:	5e                   	pop    esi
c001bc33:	5f                   	pop    edi
c001bc34:	c3                   	ret    

c001bc35 <sysCallClose(regs*)>:
c001bc35:	53                   	push   ebx
c001bc36:	83 ec 08             	sub    esp,0x8
c001bc39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc3d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc40:	83 f8 02             	cmp    eax,0x2
c001bc43:	76 50                	jbe    c001bc95 <sysCallClose(regs*)+0x60>
c001bc45:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc4a:	74 58                	je     c001bca4 <sysCallClose(regs*)+0x6f>
c001bc4c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc51:	74 60                	je     c001bcb3 <sysCallClose(regs*)+0x7e>
c001bc53:	77 2f                	ja     c001bc84 <sysCallClose(regs*)+0x4f>
c001bc55:	83 ec 0c             	sub    esp,0xc
c001bc58:	50                   	push   eax
c001bc59:	e8 d7 5d ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bc5e:	89 c3                	mov    ebx,eax
c001bc60:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc63:	e8 20 79 ff ff       	call   c0013588 <File::close()>
c001bc68:	83 c4 10             	add    esp,0x10
c001bc6b:	85 db                	test   ebx,ebx
c001bc6d:	74 0c                	je     c001bc7b <sysCallClose(regs*)+0x46>
c001bc6f:	83 ec 0c             	sub    esp,0xc
c001bc72:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc74:	53                   	push   ebx
c001bc75:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc78:	83 c4 10             	add    esp,0x10
c001bc7b:	31 c0                	xor    eax,eax
c001bc7d:	31 d2                	xor    edx,edx
c001bc7f:	83 c4 08             	add    esp,0x8
c001bc82:	5b                   	pop    ebx
c001bc83:	c3                   	ret    
c001bc84:	83 ec 08             	sub    esp,0x8
c001bc87:	50                   	push   eax
c001bc88:	68 40 c1 02 c0       	push   0xc002c140
c001bc8d:	e8 dc 72 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001bc92:	83 c4 10             	add    esp,0x10
c001bc95:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc9a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc9f:	83 c4 08             	add    esp,0x8
c001bca2:	5b                   	pop    ebx
c001bca3:	c3                   	ret    
c001bca4:	83 ec 0c             	sub    esp,0xc
c001bca7:	68 5e c0 02 c0       	push   0xc002c05e
c001bcac:	e8 bd 72 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001bcb1:	eb c5                	jmp    c001bc78 <sysCallClose(regs*)+0x43>
c001bcb3:	83 ec 0c             	sub    esp,0xc
c001bcb6:	68 6c c0 02 c0       	push   0xc002c06c
c001bcbb:	eb ef                	jmp    c001bcac <sysCallClose(regs*)+0x77>

c001bcbd <sysCallOpenDir(regs*)>:
c001bcbd:	56                   	push   esi
c001bcbe:	53                   	push   ebx
c001bcbf:	53                   	push   ebx
c001bcc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bcc4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bcc7:	85 f6                	test   esi,esi
c001bcc9:	74 59                	je     c001bd24 <sysCallOpenDir(regs*)+0x67>
c001bccb:	83 ec 0c             	sub    esp,0xc
c001bcce:	68 14 01 00 00       	push   0x114
c001bcd3:	e8 68 3b ff ff       	call   c000f840 <malloc>
c001bcd8:	83 c4 0c             	add    esp,0xc
c001bcdb:	89 c6                	mov    esi,eax
c001bcdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bce2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bce5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bce8:	56                   	push   esi
c001bce9:	e8 84 7c ff ff       	call   c0013972 <Directory::Directory(char const*, Process*)>
c001bcee:	83 c4 10             	add    esp,0x10
c001bcf1:	85 f6                	test   esi,esi
c001bcf3:	74 2f                	je     c001bd24 <sysCallOpenDir(regs*)+0x67>
c001bcf5:	83 ec 0c             	sub    esp,0xc
c001bcf8:	56                   	push   esi
c001bcf9:	e8 d8 7c ff ff       	call   c00139d6 <Directory::open()>
c001bcfe:	83 c4 10             	add    esp,0x10
c001bd01:	85 c0                	test   eax,eax
c001bd03:	75 1f                	jne    c001bd24 <sysCallOpenDir(regs*)+0x67>
c001bd05:	83 ec 0c             	sub    esp,0xc
c001bd08:	56                   	push   esi
c001bd09:	e8 32 5a ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001bd0e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd11:	83 c4 10             	add    esp,0x10
c001bd14:	89 02                	mov    DWORD PTR [edx],eax
c001bd16:	c1 f8 1f             	sar    eax,0x1f
c001bd19:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd1c:	31 c0                	xor    eax,eax
c001bd1e:	59                   	pop    ecx
c001bd1f:	31 d2                	xor    edx,edx
c001bd21:	5b                   	pop    ebx
c001bd22:	5e                   	pop    esi
c001bd23:	c3                   	ret    
c001bd24:	59                   	pop    ecx
c001bd25:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd2a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd2f:	5b                   	pop    ebx
c001bd30:	5e                   	pop    esi
c001bd31:	c3                   	ret    

c001bd32 <sysCallCloseDir(regs*)>:
c001bd32:	53                   	push   ebx
c001bd33:	83 ec 08             	sub    esp,0x8
c001bd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd3a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd3d:	83 f8 02             	cmp    eax,0x2
c001bd40:	76 47                	jbe    c001bd89 <sysCallCloseDir(regs*)+0x57>
c001bd42:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd47:	77 2f                	ja     c001bd78 <sysCallCloseDir(regs*)+0x46>
c001bd49:	83 ec 0c             	sub    esp,0xc
c001bd4c:	50                   	push   eax
c001bd4d:	e8 e3 5c ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bd52:	89 c3                	mov    ebx,eax
c001bd54:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd57:	e8 d6 7c ff ff       	call   c0013a32 <Directory::close()>
c001bd5c:	83 c4 10             	add    esp,0x10
c001bd5f:	85 db                	test   ebx,ebx
c001bd61:	74 0c                	je     c001bd6f <sysCallCloseDir(regs*)+0x3d>
c001bd63:	83 ec 0c             	sub    esp,0xc
c001bd66:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd68:	53                   	push   ebx
c001bd69:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd6c:	83 c4 10             	add    esp,0x10
c001bd6f:	31 c0                	xor    eax,eax
c001bd71:	31 d2                	xor    edx,edx
c001bd73:	83 c4 08             	add    esp,0x8
c001bd76:	5b                   	pop    ebx
c001bd77:	c3                   	ret    
c001bd78:	83 ec 08             	sub    esp,0x8
c001bd7b:	50                   	push   eax
c001bd7c:	68 68 c1 02 c0       	push   0xc002c168
c001bd81:	e8 e8 71 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001bd86:	83 c4 10             	add    esp,0x10
c001bd89:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd8e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd93:	83 c4 08             	add    esp,0x8
c001bd96:	5b                   	pop    ebx
c001bd97:	c3                   	ret    

c001bd98 <sysCallMakeDir(regs*)>:
c001bd98:	56                   	push   esi
c001bd99:	53                   	push   ebx
c001bd9a:	83 ec 10             	sub    esp,0x10
c001bd9d:	68 14 01 00 00       	push   0x114
c001bda2:	e8 99 3a ff ff       	call   c000f840 <malloc>
c001bda7:	83 c4 0c             	add    esp,0xc
c001bdaa:	89 c3                	mov    ebx,eax
c001bdac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdb1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdb4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdb8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdbb:	53                   	push   ebx
c001bdbc:	e8 b1 7b ff ff       	call   c0013972 <Directory::Directory(char const*, Process*)>
c001bdc1:	83 c4 10             	add    esp,0x10
c001bdc4:	85 db                	test   ebx,ebx
c001bdc6:	74 32                	je     c001bdfa <sysCallMakeDir(regs*)+0x62>
c001bdc8:	83 ec 0c             	sub    esp,0xc
c001bdcb:	53                   	push   ebx
c001bdcc:	e8 e5 7d ff ff       	call   c0013bb6 <Directory::create()>
c001bdd1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdd4:	89 c6                	mov    esi,eax
c001bdd6:	e8 57 7c ff ff       	call   c0013a32 <Directory::close()>
c001bddb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bddd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bde0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bde3:	83 c4 10             	add    esp,0x10
c001bde6:	31 c0                	xor    eax,eax
c001bde8:	59                   	pop    ecx
c001bde9:	85 f6                	test   esi,esi
c001bdeb:	5b                   	pop    ebx
c001bdec:	0f 95 c0             	setne  al
c001bdef:	5e                   	pop    esi
c001bdf0:	31 d2                	xor    edx,edx
c001bdf2:	f7 d8                	neg    eax
c001bdf4:	83 d2 00             	adc    edx,0x0
c001bdf7:	f7 da                	neg    edx
c001bdf9:	c3                   	ret    
c001bdfa:	59                   	pop    ecx
c001bdfb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be00:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be05:	5b                   	pop    ebx
c001be06:	5e                   	pop    esi
c001be07:	c3                   	ret    

c001be08 <sysCallWait(regs*)>:
c001be08:	83 ec 10             	sub    esp,0x10
c001be0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be0f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001be12:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be15:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001be18:	e8 ce 24 00 00       	call   c001e2eb <waitTask(int, int*, int)>
c001be1d:	83 c4 1c             	add    esp,0x1c
c001be20:	99                   	cdq    
c001be21:	c3                   	ret    

c001be22 <sysCallNotImpl(regs*)>:
c001be22:	83 ec 18             	sub    esp,0x18
c001be25:	68 7a c0 02 c0       	push   0xc002c07a
c001be2a:	e8 e0 e7 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001be2f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be34:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be39:	83 c4 1c             	add    esp,0x1c
c001be3c:	c3                   	ret    

c001be3d <sysPanic(regs*)>:
c001be3d:	83 ec 18             	sub    esp,0x18
c001be40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be44:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be47:	e8 c3 e7 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001be4c:	c7 04 24 94 c0 02 c0 	mov    DWORD PTR [esp],0xc002c094
c001be53:	e8 b7 e7 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001be58:	b8 01 00 00 00       	mov    eax,0x1
c001be5d:	31 d2                	xor    edx,edx
c001be5f:	83 c4 1c             	add    esp,0x1c
c001be62:	c3                   	ret    

c001be63 <sysCallRmdir(regs*)>:
c001be63:	56                   	push   esi
c001be64:	53                   	push   ebx
c001be65:	83 ec 20             	sub    esp,0x20
c001be68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be6c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be6f:	68 14 01 00 00       	push   0x114
c001be74:	e8 c7 39 ff ff       	call   c000f840 <malloc>
c001be79:	83 c4 0c             	add    esp,0xc
c001be7c:	89 c3                	mov    ebx,eax
c001be7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be83:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be86:	56                   	push   esi
c001be87:	53                   	push   ebx
c001be88:	e8 39 76 ff ff       	call   c00134c6 <File::File(char const*, Process*)>
c001be8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be90:	e8 0d 78 ff ff       	call   c00136a2 <File::unlink()>
c001be95:	83 c4 10             	add    esp,0x10
c001be98:	85 db                	test   ebx,ebx
c001be9a:	74 14                	je     c001beb0 <sysCallRmdir(regs*)+0x4d>
c001be9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bea0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bea2:	83 ec 0c             	sub    esp,0xc
c001bea5:	53                   	push   ebx
c001bea6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bea9:	83 c4 10             	add    esp,0x10
c001beac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001beb0:	85 c0                	test   eax,eax
c001beb2:	0f 95 c0             	setne  al
c001beb5:	31 d2                	xor    edx,edx
c001beb7:	0f b6 c0             	movzx  eax,al
c001beba:	f7 d8                	neg    eax
c001bebc:	83 d2 00             	adc    edx,0x0
c001bebf:	83 c4 14             	add    esp,0x14
c001bec2:	f7 da                	neg    edx
c001bec4:	5b                   	pop    ebx
c001bec5:	5e                   	pop    esi
c001bec6:	c3                   	ret    

c001bec7 <sysCallUnlink(regs*)>:
c001bec7:	56                   	push   esi
c001bec8:	53                   	push   ebx
c001bec9:	83 ec 20             	sub    esp,0x20
c001becc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bed0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bed3:	68 14 01 00 00       	push   0x114
c001bed8:	e8 63 39 ff ff       	call   c000f840 <malloc>
c001bedd:	83 c4 0c             	add    esp,0xc
c001bee0:	89 c3                	mov    ebx,eax
c001bee2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bee7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001beea:	56                   	push   esi
c001beeb:	53                   	push   ebx
c001beec:	e8 d5 75 ff ff       	call   c00134c6 <File::File(char const*, Process*)>
c001bef1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bef4:	e8 a9 77 ff ff       	call   c00136a2 <File::unlink()>
c001bef9:	83 c4 10             	add    esp,0x10
c001befc:	85 db                	test   ebx,ebx
c001befe:	74 14                	je     c001bf14 <sysCallUnlink(regs*)+0x4d>
c001bf00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf04:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf06:	83 ec 0c             	sub    esp,0xc
c001bf09:	53                   	push   ebx
c001bf0a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf0d:	83 c4 10             	add    esp,0x10
c001bf10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf14:	85 c0                	test   eax,eax
c001bf16:	0f 95 c0             	setne  al
c001bf19:	31 d2                	xor    edx,edx
c001bf1b:	0f b6 c0             	movzx  eax,al
c001bf1e:	f7 d8                	neg    eax
c001bf20:	83 d2 00             	adc    edx,0x0
c001bf23:	83 c4 14             	add    esp,0x14
c001bf26:	f7 da                	neg    edx
c001bf28:	5b                   	pop    ebx
c001bf29:	5e                   	pop    esi
c001bf2a:	c3                   	ret    

c001bf2b <sysCallGetArgv(regs*)>:
c001bf2b:	83 ec 0c             	sub    esp,0xc
c001bf2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf32:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bf35:	85 c0                	test   eax,eax
c001bf37:	78 2b                	js     c001bf64 <sysCallGetArgv(regs*)+0x39>
c001bf39:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf3f:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bf42:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bf48:	7d 1a                	jge    c001bf64 <sysCallGetArgv(regs*)+0x39>
c001bf4a:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf51:	85 c0                	test   eax,eax
c001bf53:	74 17                	je     c001bf6c <sysCallGetArgv(regs*)+0x41>
c001bf55:	83 ec 08             	sub    esp,0x8
c001bf58:	50                   	push   eax
c001bf59:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf5c:	e8 d3 48 fe ff       	call   c0000834 <strcpy>
c001bf61:	83 c4 10             	add    esp,0x10
c001bf64:	31 c0                	xor    eax,eax
c001bf66:	31 d2                	xor    edx,edx
c001bf68:	83 c4 0c             	add    esp,0xc
c001bf6b:	c3                   	ret    
c001bf6c:	b8 01 00 00 00       	mov    eax,0x1
c001bf71:	31 d2                	xor    edx,edx
c001bf73:	83 c4 0c             	add    esp,0xc
c001bf76:	c3                   	ret    

c001bf77 <sysCallTTYName(regs*)>:
c001bf77:	56                   	push   esi
c001bf78:	53                   	push   ebx
c001bf79:	53                   	push   ebx
c001bf7a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf7e:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf81:	85 c0                	test   eax,eax
c001bf83:	74 5f                	je     c001bfe4 <sysCallTTYName(regs*)+0x6d>
c001bf85:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf88:	83 f8 02             	cmp    eax,0x2
c001bf8b:	77 3e                	ja     c001bfcb <sysCallTTYName(regs*)+0x54>
c001bf8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf92:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf95:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf9b:	85 db                	test   ebx,ebx
c001bf9d:	74 45                	je     c001bfe4 <sysCallTTYName(regs*)+0x6d>
c001bf9f:	83 ec 0c             	sub    esp,0xc
c001bfa2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bfa4:	53                   	push   ebx
c001bfa5:	ff 10                	call   DWORD PTR [eax]
c001bfa7:	83 c4 10             	add    esp,0x10
c001bfaa:	84 c0                	test   al,al
c001bfac:	74 41                	je     c001bfef <sysCallTTYName(regs*)+0x78>
c001bfae:	83 ec 08             	sub    esp,0x8
c001bfb1:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bfb7:	53                   	push   ebx
c001bfb8:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bfbb:	e8 74 48 fe ff       	call   c0000834 <strcpy>
c001bfc0:	83 c4 10             	add    esp,0x10
c001bfc3:	31 c0                	xor    eax,eax
c001bfc5:	59                   	pop    ecx
c001bfc6:	31 d2                	xor    edx,edx
c001bfc8:	5b                   	pop    ebx
c001bfc9:	5e                   	pop    esi
c001bfca:	c3                   	ret    
c001bfcb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bfd0:	74 bb                	je     c001bf8d <sysCallTTYName(regs*)+0x16>
c001bfd2:	83 ec 0c             	sub    esp,0xc
c001bfd5:	50                   	push   eax
c001bfd6:	e8 5a 5a ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bfdb:	83 c4 10             	add    esp,0x10
c001bfde:	89 c3                	mov    ebx,eax
c001bfe0:	85 db                	test   ebx,ebx
c001bfe2:	75 bb                	jne    c001bf9f <sysCallTTYName(regs*)+0x28>
c001bfe4:	59                   	pop    ecx
c001bfe5:	b8 01 00 00 00       	mov    eax,0x1
c001bfea:	31 d2                	xor    edx,edx
c001bfec:	5b                   	pop    ebx
c001bfed:	5e                   	pop    esi
c001bfee:	c3                   	ret    
c001bfef:	59                   	pop    ecx
c001bff0:	b8 02 00 00 00       	mov    eax,0x2
c001bff5:	31 d2                	xor    edx,edx
c001bff7:	5b                   	pop    ebx
c001bff8:	5e                   	pop    esi
c001bff9:	c3                   	ret    

c001bffa <sysCallUSleep(regs*)>:
c001bffa:	83 ec 14             	sub    esp,0x14
c001bffd:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c002:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c006:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c00d:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c010:	01 ca                	add    edx,ecx
c001c012:	52                   	push   edx
c001c013:	50                   	push   eax
c001c014:	e8 6b 23 00 00       	call   c001e384 <nanoSleep(unsigned long long)>
c001c019:	31 c0                	xor    eax,eax
c001c01b:	31 d2                	xor    edx,edx
c001c01d:	83 c4 1c             	add    esp,0x1c
c001c020:	c3                   	ret    

c001c021 <sysCallSpawn(regs*)>:
c001c021:	56                   	push   esi
c001c022:	53                   	push   ebx
c001c023:	53                   	push   ebx
c001c024:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c028:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c02b:	85 f6                	test   esi,esi
c001c02d:	75 08                	jne    c001c037 <sysCallSpawn(regs*)+0x16>
c001c02f:	59                   	pop    ecx
c001c030:	31 c0                	xor    eax,eax
c001c032:	31 d2                	xor    edx,edx
c001c034:	5b                   	pop    ebx
c001c035:	5e                   	pop    esi
c001c036:	c3                   	ret    
c001c037:	83 ec 0c             	sub    esp,0xc
c001c03a:	68 3f 07 00 00       	push   0x73f
c001c03f:	e8 fc 37 ff ff       	call   c000f840 <malloc>
c001c044:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c047:	89 c6                	mov    esi,eax
c001c049:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c04e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c051:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c054:	56                   	push   esi
c001c055:	e8 2a 1a 00 00       	call   c001da84 <Process::Process(char const*, Process*, char**)>
c001c05a:	83 c4 20             	add    esp,0x20
c001c05d:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c064:	75 c9                	jne    c001c02f <sysCallSpawn(regs*)+0xe>
c001c066:	83 ec 0c             	sub    esp,0xc
c001c069:	56                   	push   esi
c001c06a:	e8 db 1f 00 00       	call   c001e04a <Process::createUserThread()>
c001c06f:	8b 06                	mov    eax,DWORD PTR [esi]
c001c071:	83 c4 10             	add    esp,0x10
c001c074:	99                   	cdq    
c001c075:	59                   	pop    ecx
c001c076:	5b                   	pop    ebx
c001c077:	5e                   	pop    esi
c001c078:	c3                   	ret    

c001c079 <sysCallGetEnv(regs*)>:
c001c079:	55                   	push   ebp
c001c07a:	57                   	push   edi
c001c07b:	56                   	push   esi
c001c07c:	53                   	push   ebx
c001c07d:	83 ec 28             	sub    esp,0x28
c001c080:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c084:	68 a3 c0 02 c0       	push   0xc002c0a3
c001c089:	e8 e0 6e ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001c08e:	5f                   	pop    edi
c001c08f:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c092:	5d                   	pop    ebp
c001c093:	53                   	push   ebx
c001c094:	68 6c a9 02 c0       	push   0xc002a96c
c001c099:	e8 d0 6e ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001c09e:	58                   	pop    eax
c001c09f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c0a2:	5a                   	pop    edx
c001c0a3:	57                   	push   edi
c001c0a4:	68 ac c0 02 c0       	push   0xc002c0ac
c001c0a9:	e8 c0 6e ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001c0ae:	59                   	pop    ecx
c001c0af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0b4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0b7:	e8 6f e4 ff ff       	call   c001a52b <Krnl::getProcessTotalEnvCount(Process*)>
c001c0bc:	5a                   	pop    edx
c001c0bd:	89 c5                	mov    ebp,eax
c001c0bf:	59                   	pop    ecx
c001c0c0:	50                   	push   eax
c001c0c1:	68 b6 c0 02 c0       	push   0xc002c0b6
c001c0c6:	e8 a3 6e ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001c0cb:	83 c4 10             	add    esp,0x10
c001c0ce:	39 ef                	cmp    edi,ebp
c001c0d0:	7c 15                	jl     c001c0e7 <sysCallGetEnv(regs*)+0x6e>
c001c0d2:	85 db                	test   ebx,ebx
c001c0d4:	75 0c                	jne    c001c0e2 <sysCallGetEnv(regs*)+0x69>
c001c0d6:	83 c4 1c             	add    esp,0x1c
c001c0d9:	31 c0                	xor    eax,eax
c001c0db:	5b                   	pop    ebx
c001c0dc:	31 d2                	xor    edx,edx
c001c0de:	5e                   	pop    esi
c001c0df:	5f                   	pop    edi
c001c0e0:	5d                   	pop    ebp
c001c0e1:	c3                   	ret    
c001c0e2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c0e5:	eb ef                	jmp    c001c0d6 <sysCallGetEnv(regs*)+0x5d>
c001c0e7:	83 ec 0c             	sub    esp,0xc
c001c0ea:	68 c2 c0 02 c0       	push   0xc002c0c2
c001c0ef:	e8 7a 6e ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001c0f4:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0f8:	83 c4 0c             	add    esp,0xc
c001c0fb:	57                   	push   edi
c001c0fc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c102:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c105:	50                   	push   eax
c001c106:	e8 40 e4 ff ff       	call   c001a54b <Krnl::getProcessEnvPair(Process*, int)>
c001c10b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c10f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c113:	68 44 c4 02 c0       	push   0xc002c444
c001c118:	e8 51 6e ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001c11d:	83 c4 10             	add    esp,0x10
c001c120:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c123:	85 f6                	test   esi,esi
c001c125:	75 47                	jne    c001c16e <sysCallGetEnv(regs*)+0xf5>
c001c127:	83 ec 0c             	sub    esp,0xc
c001c12a:	55                   	push   ebp
c001c12b:	e8 64 46 fe ff       	call   c0000794 <strlen>
c001c130:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c133:	89 c3                	mov    ebx,eax
c001c135:	e8 5a 46 fe ff       	call   c0000794 <strlen>
c001c13a:	5a                   	pop    edx
c001c13b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c13f:	59                   	pop    ecx
c001c140:	50                   	push   eax
c001c141:	68 c5 c0 02 c0       	push   0xc002c0c5
c001c146:	e8 23 6e ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001c14b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c14e:	e8 41 46 fe ff       	call   c0000794 <strlen>
c001c153:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c156:	89 c3                	mov    ebx,eax
c001c158:	e8 37 46 fe ff       	call   c0000794 <strlen>
c001c15d:	83 c4 10             	add    esp,0x10
c001c160:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c164:	83 c4 1c             	add    esp,0x1c
c001c167:	31 d2                	xor    edx,edx
c001c169:	5b                   	pop    ebx
c001c16a:	5e                   	pop    esi
c001c16b:	5f                   	pop    edi
c001c16c:	5d                   	pop    ebp
c001c16d:	c3                   	ret    
c001c16e:	83 ec 0c             	sub    esp,0xc
c001c171:	68 5e c4 02 c0       	push   0xc002c45e
c001c176:	e8 f3 6d ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001c17b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c17e:	58                   	pop    eax
c001c17f:	5a                   	pop    edx
c001c180:	55                   	push   ebp
c001c181:	53                   	push   ebx
c001c182:	e8 ad 46 fe ff       	call   c0000834 <strcpy>
c001c187:	59                   	pop    ecx
c001c188:	5e                   	pop    esi
c001c189:	68 cf c0 02 c0       	push   0xc002c0cf
c001c18e:	53                   	push   ebx
c001c18f:	e8 e0 47 fe ff       	call   c0000974 <strcat>
c001c194:	5d                   	pop    ebp
c001c195:	58                   	pop    eax
c001c196:	57                   	push   edi
c001c197:	53                   	push   ebx
c001c198:	e8 d7 47 fe ff       	call   c0000974 <strcat>
c001c19d:	c7 04 24 78 c4 02 c0 	mov    DWORD PTR [esp],0xc002c478
c001c1a4:	e8 c5 6d ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001c1a9:	83 c4 10             	add    esp,0x10
c001c1ac:	e9 25 ff ff ff       	jmp    c001c0d6 <sysCallGetEnv(regs*)+0x5d>

c001c1b1 <sysAppSettings(regs*)>:
c001c1b1:	53                   	push   ebx
c001c1b2:	83 ec 08             	sub    esp,0x8
c001c1b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1b9:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c1bc:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c1c2:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c1c7:	66 3d c0 09          	cmp    ax,0x9c0
c001c1cb:	75 2f                	jne    c001c1fc <sysAppSettings(regs*)+0x4b>
c001c1cd:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c1d3:	83 e0 1f             	and    eax,0x1f
c001c1d6:	3c 01                	cmp    al,0x1
c001c1d8:	74 2e                	je     c001c208 <sysAppSettings(regs*)+0x57>
c001c1da:	3c 07                	cmp    al,0x7
c001c1dc:	0f 84 bd 00 00 00    	je     c001c29f <sysAppSettings(regs*)+0xee>
c001c1e2:	84 c0                	test   al,al
c001c1e4:	0f 84 dc 00 00 00    	je     c001c2c6 <sysAppSettings(regs*)+0x115>
c001c1ea:	3c 08                	cmp    al,0x8
c001c1ec:	74 6d                	je     c001c25b <sysAppSettings(regs*)+0xaa>
c001c1ee:	0f b6 c0             	movzx  eax,al
c001c1f1:	83 c4 08             	add    esp,0x8
c001c1f4:	05 e8 03 00 00       	add    eax,0x3e8
c001c1f9:	5b                   	pop    ebx
c001c1fa:	99                   	cdq    
c001c1fb:	c3                   	ret    
c001c1fc:	b8 01 00 00 00       	mov    eax,0x1
c001c201:	31 d2                	xor    edx,edx
c001c203:	83 c4 08             	add    esp,0x8
c001c206:	5b                   	pop    ebx
c001c207:	c3                   	ret    
c001c208:	51                   	push   ecx
c001c209:	68 00 01 00 00       	push   0x100
c001c20e:	6a 00                	push   0x0
c001c210:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c215:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c218:	83 c0 0c             	add    eax,0xc
c001c21b:	50                   	push   eax
c001c21c:	e8 57 45 fe ff       	call   c0000778 <memset>
c001c221:	83 c4 0c             	add    esp,0xc
c001c224:	68 ff 00 00 00       	push   0xff
c001c229:	53                   	push   ebx
c001c22a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c22f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c232:	83 c0 0c             	add    eax,0xc
c001c235:	50                   	push   eax
c001c236:	e8 09 45 fe ff       	call   c0000744 <memcpy>
c001c23b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c240:	5b                   	pop    ebx
c001c241:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c244:	5a                   	pop    edx
c001c245:	8d 50 0c             	lea    edx,[eax+0xc]
c001c248:	52                   	push   edx
c001c249:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c24f:	e8 5c 49 ff ff       	call   c0010bb0 <VgaText::setTitle(char*)>
c001c254:	83 c4 10             	add    esp,0x10
c001c257:	31 c0                	xor    eax,eax
c001c259:	eb a6                	jmp    c001c201 <sysAppSettings(regs*)+0x50>
c001c25b:	83 ec 08             	sub    esp,0x8
c001c25e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c264:	83 e0 0f             	and    eax,0xf
c001c267:	50                   	push   eax
c001c268:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c26d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c270:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c276:	e8 25 49 ff ff       	call   c0010ba0 <VgaText::setTitleColour(VgaColour)>
c001c27b:	58                   	pop    eax
c001c27c:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c282:	5a                   	pop    edx
c001c283:	c1 e8 04             	shr    eax,0x4
c001c286:	83 e0 0f             	and    eax,0xf
c001c289:	50                   	push   eax
c001c28a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c28f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c292:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c298:	e8 f3 48 ff ff       	call   c0010b90 <VgaText::setTitleTextColour(VgaColour)>
c001c29d:	eb b5                	jmp    c001c254 <sysAppSettings(regs*)+0xa3>
c001c29f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2a7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c2ad:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c2b3:	c0 e8 06             	shr    al,0x6
c001c2b6:	83 e0 01             	and    eax,0x1
c001c2b9:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c2bf:	31 c0                	xor    eax,eax
c001c2c1:	e9 3b ff ff ff       	jmp    c001c201 <sysAppSettings(regs*)+0x50>
c001c2c6:	b8 02 00 00 00       	mov    eax,0x2
c001c2cb:	e9 31 ff ff ff       	jmp    c001c201 <sysAppSettings(regs*)+0x50>

c001c2d0 <sysSetFatAttrib(regs*)>:
c001c2d0:	57                   	push   edi
c001c2d1:	56                   	push   esi
c001c2d2:	53                   	push   ebx
c001c2d3:	83 ec 1c             	sub    esp,0x1c
c001c2d6:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c2da:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c2dd:	68 14 01 00 00       	push   0x114
c001c2e2:	e8 59 35 ff ff       	call   c000f840 <malloc>
c001c2e7:	83 c4 0c             	add    esp,0xc
c001c2ea:	89 c3                	mov    ebx,eax
c001c2ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2f1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2f4:	57                   	push   edi
c001c2f5:	53                   	push   ebx
c001c2f6:	e8 cb 71 ff ff       	call   c00134c6 <File::File(char const*, Process*)>
c001c2fb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c2fe:	83 c4 0c             	add    esp,0xc
c001c301:	0f b6 d4             	movzx  edx,ah
c001c304:	0f b6 c0             	movzx  eax,al
c001c307:	52                   	push   edx
c001c308:	50                   	push   eax
c001c309:	53                   	push   ebx
c001c30a:	e8 2d 74 ff ff       	call   c001373c <File::chfatattr(unsigned char, unsigned char)>
c001c30f:	83 c4 10             	add    esp,0x10
c001c312:	85 db                	test   ebx,ebx
c001c314:	74 14                	je     c001c32a <sysSetFatAttrib(regs*)+0x5a>
c001c316:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c31a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c31c:	83 ec 0c             	sub    esp,0xc
c001c31f:	53                   	push   ebx
c001c320:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c323:	83 c4 10             	add    esp,0x10
c001c326:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c32a:	85 c0                	test   eax,eax
c001c32c:	0f 95 c0             	setne  al
c001c32f:	31 d2                	xor    edx,edx
c001c331:	0f b6 c0             	movzx  eax,al
c001c334:	f7 d8                	neg    eax
c001c336:	83 d2 00             	adc    edx,0x0
c001c339:	83 c4 10             	add    esp,0x10
c001c33c:	f7 da                	neg    edx
c001c33e:	5b                   	pop    ebx
c001c33f:	5e                   	pop    esi
c001c340:	5f                   	pop    edi
c001c341:	c3                   	ret    

c001c342 <sysPipe(regs*)>:
c001c342:	57                   	push   edi
c001c343:	56                   	push   esi
c001c344:	53                   	push   ebx
c001c345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c349:	83 ec 0c             	sub    esp,0xc
c001c34c:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c34f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c352:	6a 20                	push   0x20
c001c354:	e8 e7 34 ff ff       	call   c000f840 <malloc>
c001c359:	89 c3                	mov    ebx,eax
c001c35b:	58                   	pop    eax
c001c35c:	5a                   	pop    edx
c001c35d:	68 00 50 00 00       	push   0x5000
c001c362:	53                   	push   ebx
c001c363:	e8 78 41 ff ff       	call   c00104e0 <Pipe::Pipe(int)>
c001c368:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c36b:	e8 d0 53 ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001c370:	89 07                	mov    DWORD PTR [edi],eax
c001c372:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c375:	e8 c6 53 ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001c37a:	83 c4 10             	add    esp,0x10
c001c37d:	89 06                	mov    DWORD PTR [esi],eax
c001c37f:	31 d2                	xor    edx,edx
c001c381:	5b                   	pop    ebx
c001c382:	31 c0                	xor    eax,eax
c001c384:	5e                   	pop    esi
c001c385:	5f                   	pop    edi
c001c386:	c3                   	ret    

c001c387 <sysGetUnixTime(regs*)>:
c001c387:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001c38c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c392:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c396:	e9 15 7b ff ff       	jmp    c0013eb0 <Clock::timeInSecondsLocal()>

c001c39b <string_ends_with(char const*, char const*)>:
c001c39b:	57                   	push   edi
c001c39c:	56                   	push   esi
c001c39d:	53                   	push   ebx
c001c39e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c3a2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c3a6:	83 ec 0c             	sub    esp,0xc
c001c3a9:	53                   	push   ebx
c001c3aa:	e8 e5 43 fe ff       	call   c0000794 <strlen>
c001c3af:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3b2:	89 c6                	mov    esi,eax
c001c3b4:	e8 db 43 fe ff       	call   c0000794 <strlen>
c001c3b9:	83 c4 10             	add    esp,0x10
c001c3bc:	39 c6                	cmp    esi,eax
c001c3be:	7d 06                	jge    c001c3c6 <string_ends_with(char const*, char const*)+0x2b>
c001c3c0:	5b                   	pop    ebx
c001c3c1:	31 c0                	xor    eax,eax
c001c3c3:	5e                   	pop    esi
c001c3c4:	5f                   	pop    edi
c001c3c5:	c3                   	ret    
c001c3c6:	83 ec 08             	sub    esp,0x8
c001c3c9:	29 c6                	sub    esi,eax
c001c3cb:	57                   	push   edi
c001c3cc:	01 f3                	add    ebx,esi
c001c3ce:	53                   	push   ebx
c001c3cf:	e8 ec 44 fe ff       	call   c00008c0 <strcmp>
c001c3d4:	83 c4 10             	add    esp,0x10
c001c3d7:	85 c0                	test   eax,eax
c001c3d9:	5b                   	pop    ebx
c001c3da:	0f 94 c0             	sete   al
c001c3dd:	5e                   	pop    esi
c001c3de:	0f b6 c0             	movzx  eax,al
c001c3e1:	5f                   	pop    edi
c001c3e2:	c3                   	ret    

c001c3e3 <sysCallOpen(regs*)>:
c001c3e3:	56                   	push   esi
c001c3e4:	53                   	push   ebx
c001c3e5:	81 ec 04 01 00 00    	sub    esp,0x104
c001c3eb:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c3f2:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c3f5:	85 c9                	test   ecx,ecx
c001c3f7:	0f 84 b3 00 00 00    	je     c001c4b0 <sysCallOpen(regs*)+0xcd>
c001c3fd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c400:	85 c0                	test   eax,eax
c001c402:	0f 84 a8 00 00 00    	je     c001c4b0 <sysCallOpen(regs*)+0xcd>
c001c408:	52                   	push   edx
c001c409:	68 d1 c0 02 c0       	push   0xc002c0d1
c001c40e:	50                   	push   eax
c001c40f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c413:	56                   	push   esi
c001c414:	e8 03 6f ff ff       	call   c001331c <Fs::standardiseFiles(char*, char const*, char const*)>
c001c419:	89 34 24             	mov    DWORD PTR [esp],esi
c001c41c:	e8 73 43 fe ff       	call   c0000794 <strlen>
c001c421:	83 c4 10             	add    esp,0x10
c001c424:	48                   	dec    eax
c001c425:	74 1d                	je     c001c444 <sysCallOpen(regs*)+0x61>
c001c427:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c42a:	eb 0f                	jmp    c001c43b <sysCallOpen(regs*)+0x58>
c001c42c:	80 fa 3a             	cmp    dl,0x3a
c001c42f:	74 0f                	je     c001c440 <sysCallOpen(regs*)+0x5d>
c001c431:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c435:	48                   	dec    eax
c001c436:	74 0c                	je     c001c444 <sysCallOpen(regs*)+0x61>
c001c438:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c43b:	80 fa 2e             	cmp    dl,0x2e
c001c43e:	75 ec                	jne    c001c42c <sysCallOpen(regs*)+0x49>
c001c440:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c444:	83 ec 08             	sub    esp,0x8
c001c447:	68 d5 c0 02 c0       	push   0xc002c0d5
c001c44c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c44f:	e8 47 ff ff ff       	call   c001c39b <string_ends_with(char const*, char const*)>
c001c454:	83 c4 10             	add    esp,0x10
c001c457:	85 c0                	test   eax,eax
c001c459:	75 17                	jne    c001c472 <sysCallOpen(regs*)+0x8f>
c001c45b:	83 ec 08             	sub    esp,0x8
c001c45e:	68 f6 c0 02 c0       	push   0xc002c0f6
c001c463:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c466:	e8 30 ff ff ff       	call   c001c39b <string_ends_with(char const*, char const*)>
c001c46b:	83 c4 10             	add    esp,0x10
c001c46e:	85 c0                	test   eax,eax
c001c470:	74 51                	je     c001c4c3 <sysCallOpen(regs*)+0xe0>
c001c472:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c475:	83 ec 08             	sub    esp,0x8
c001c478:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c47e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c485:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c488:	ff 30                	push   DWORD PTR [eax]
c001c48a:	68 da c0 02 c0       	push   0xc002c0da
c001c48f:	e8 da 6a ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001c494:	c7 04 24 e9 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0e9
c001c49b:	e8 ce 6a ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001c4a0:	83 c4 10             	add    esp,0x10
c001c4a3:	81 c4 04 01 00 00    	add    esp,0x104
c001c4a9:	31 c0                	xor    eax,eax
c001c4ab:	31 d2                	xor    edx,edx
c001c4ad:	5b                   	pop    ebx
c001c4ae:	5e                   	pop    esi
c001c4af:	c3                   	ret    
c001c4b0:	81 c4 04 01 00 00    	add    esp,0x104
c001c4b6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c4bb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c4c0:	5b                   	pop    ebx
c001c4c1:	5e                   	pop    esi
c001c4c2:	c3                   	ret    
c001c4c3:	83 ec 08             	sub    esp,0x8
c001c4c6:	68 d6 c0 02 c0       	push   0xc002c0d6
c001c4cb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4ce:	e8 ed 43 fe ff       	call   c00008c0 <strcmp>
c001c4d3:	83 c4 10             	add    esp,0x10
c001c4d6:	85 c0                	test   eax,eax
c001c4d8:	74 98                	je     c001c472 <sysCallOpen(regs*)+0x8f>
c001c4da:	83 ec 08             	sub    esp,0x8
c001c4dd:	68 d5 c0 02 c0       	push   0xc002c0d5
c001c4e2:	56                   	push   esi
c001c4e3:	e8 b3 fe ff ff       	call   c001c39b <string_ends_with(char const*, char const*)>
c001c4e8:	83 c4 10             	add    esp,0x10
c001c4eb:	85 c0                	test   eax,eax
c001c4ed:	75 83                	jne    c001c472 <sysCallOpen(regs*)+0x8f>
c001c4ef:	83 ec 08             	sub    esp,0x8
c001c4f2:	68 fb c0 02 c0       	push   0xc002c0fb
c001c4f7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4fa:	e8 9c fe ff ff       	call   c001c39b <string_ends_with(char const*, char const*)>
c001c4ff:	83 c4 10             	add    esp,0x10
c001c502:	85 c0                	test   eax,eax
c001c504:	0f 85 d9 00 00 00    	jne    c001c5e3 <sysCallOpen(regs*)+0x200>
c001c50a:	83 ec 08             	sub    esp,0x8
c001c50d:	68 00 c1 02 c0       	push   0xc002c100
c001c512:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c515:	e8 81 fe ff ff       	call   c001c39b <string_ends_with(char const*, char const*)>
c001c51a:	83 c4 10             	add    esp,0x10
c001c51d:	85 c0                	test   eax,eax
c001c51f:	0f 85 be 00 00 00    	jne    c001c5e3 <sysCallOpen(regs*)+0x200>
c001c525:	83 ec 08             	sub    esp,0x8
c001c528:	68 fc c0 02 c0       	push   0xc002c0fc
c001c52d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c530:	e8 8b 43 fe ff       	call   c00008c0 <strcmp>
c001c535:	83 c4 10             	add    esp,0x10
c001c538:	85 c0                	test   eax,eax
c001c53a:	0f 84 a3 00 00 00    	je     c001c5e3 <sysCallOpen(regs*)+0x200>
c001c540:	83 ec 08             	sub    esp,0x8
c001c543:	68 fb c0 02 c0       	push   0xc002c0fb
c001c548:	56                   	push   esi
c001c549:	e8 4d fe ff ff       	call   c001c39b <string_ends_with(char const*, char const*)>
c001c54e:	83 c4 10             	add    esp,0x10
c001c551:	85 c0                	test   eax,eax
c001c553:	0f 85 8a 00 00 00    	jne    c001c5e3 <sysCallOpen(regs*)+0x200>
c001c559:	83 ec 0c             	sub    esp,0xc
c001c55c:	68 14 01 00 00       	push   0x114
c001c561:	e8 da 32 ff ff       	call   c000f840 <malloc>
c001c566:	83 c4 0c             	add    esp,0xc
c001c569:	89 c6                	mov    esi,eax
c001c56b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c570:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c573:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c576:	56                   	push   esi
c001c577:	e8 4a 6f ff ff       	call   c00134c6 <File::File(char const*, Process*)>
c001c57c:	83 c4 10             	add    esp,0x10
c001c57f:	85 f6                	test   esi,esi
c001c581:	0f 84 29 ff ff ff    	je     c001c4b0 <sysCallOpen(regs*)+0xcd>
c001c587:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c58a:	0f b6 c2             	movzx  eax,dl
c001c58d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c590:	89 d0                	mov    eax,edx
c001c592:	83 e0 01             	and    eax,0x1
c001c595:	f6 c2 02             	test   dl,0x2
c001c598:	74 03                	je     c001c59d <sysCallOpen(regs*)+0x1ba>
c001c59a:	83 c8 02             	or     eax,0x2
c001c59d:	f6 c2 04             	test   dl,0x4
c001c5a0:	74 03                	je     c001c5a5 <sysCallOpen(regs*)+0x1c2>
c001c5a2:	83 c8 04             	or     eax,0x4
c001c5a5:	f6 c2 08             	test   dl,0x8
c001c5a8:	74 03                	je     c001c5ad <sysCallOpen(regs*)+0x1ca>
c001c5aa:	83 c8 0a             	or     eax,0xa
c001c5ad:	83 e2 10             	and    edx,0x10
c001c5b0:	74 03                	je     c001c5b5 <sysCallOpen(regs*)+0x1d2>
c001c5b2:	83 c8 12             	or     eax,0x12
c001c5b5:	83 ec 08             	sub    esp,0x8
c001c5b8:	50                   	push   eax
c001c5b9:	56                   	push   esi
c001c5ba:	e8 6b 6f ff ff       	call   c001352a <File::open(FileOpenMode)>
c001c5bf:	83 c4 10             	add    esp,0x10
c001c5c2:	85 c0                	test   eax,eax
c001c5c4:	0f 85 e6 fe ff ff    	jne    c001c4b0 <sysCallOpen(regs*)+0xcd>
c001c5ca:	83 ec 0c             	sub    esp,0xc
c001c5cd:	56                   	push   esi
c001c5ce:	e8 6d 51 ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001c5d3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c5d6:	89 02                	mov    DWORD PTR [edx],eax
c001c5d8:	c1 f8 1f             	sar    eax,0x1f
c001c5db:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c5de:	e9 bd fe ff ff       	jmp    c001c4a0 <sysCallOpen(regs*)+0xbd>
c001c5e3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c5e6:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c5ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5f3:	e9 ab fe ff ff       	jmp    c001c4a3 <sysCallOpen(regs*)+0xc0>

c001c5f8 <Sys::loadSyscalls()>:
c001c5f8:	c7 05 60 11 03 c0 05 b7 01 c0 	mov    DWORD PTR ds:0xc0031160,0xc001b705
c001c602:	c7 05 64 11 03 c0 a4 b2 01 c0 	mov    DWORD PTR ds:0xc0031164,0xc001b2a4
c001c60c:	c7 05 68 11 03 c0 0e b4 01 c0 	mov    DWORD PTR ds:0xc0031168,0xc001b40e
c001c616:	c7 05 6c 11 03 c0 3b b6 01 c0 	mov    DWORD PTR ds:0xc003116c,0xc001b63b
c001c620:	c7 05 70 11 03 c0 a6 b3 01 c0 	mov    DWORD PTR ds:0xc0031170,0xc001b3a6
c001c62a:	c7 05 74 11 03 c0 db b2 01 c0 	mov    DWORD PTR ds:0xc0031174,0xc001b2db
c001c634:	c7 05 78 11 03 c0 bc b2 01 c0 	mov    DWORD PTR ds:0xc0031178,0xc001b2bc
c001c63e:	c7 05 7c 11 03 c0 ad b4 01 c0 	mov    DWORD PTR ds:0xc003117c,0xc001b4ad
c001c648:	c7 05 84 11 03 c0 35 bc 01 c0 	mov    DWORD PTR ds:0xc0031184,0xc001bc35
c001c652:	c7 05 80 11 03 c0 e3 c3 01 c0 	mov    DWORD PTR ds:0xc0031180,0xc001c3e3
c001c65c:	c7 05 88 11 03 c0 bd bc 01 c0 	mov    DWORD PTR ds:0xc0031188,0xc001bcbd
c001c666:	c7 05 8c 11 03 c0 24 b9 01 c0 	mov    DWORD PTR ds:0xc003118c,0xc001b924
c001c670:	c7 05 90 11 03 c0 40 b7 01 c0 	mov    DWORD PTR ds:0xc0031190,0xc001b740
c001c67a:	c7 05 94 11 03 c0 45 b7 01 c0 	mov    DWORD PTR ds:0xc0031194,0xc001b745
c001c684:	c7 05 98 11 03 c0 98 bd 01 c0 	mov    DWORD PTR ds:0xc0031198,0xc001bd98
c001c68e:	c7 05 9c 11 03 c0 32 bd 01 c0 	mov    DWORD PTR ds:0xc003119c,0xc001bd32
c001c698:	c7 05 a0 11 03 c0 0c ba 01 c0 	mov    DWORD PTR ds:0xc00311a0,0xc001ba0c
c001c6a2:	c7 05 a4 11 03 c0 75 ba 01 c0 	mov    DWORD PTR ds:0xc00311a4,0xc001ba75
c001c6ac:	c7 05 a8 11 03 c0 f2 ba 01 c0 	mov    DWORD PTR ds:0xc00311a8,0xc001baf2
c001c6b6:	c7 05 ac 11 03 c0 4a b7 01 c0 	mov    DWORD PTR ds:0xc00311ac,0xc001b74a
c001c6c0:	c7 05 b0 11 03 c0 08 be 01 c0 	mov    DWORD PTR ds:0xc00311b0,0xc001be08
c001c6ca:	c7 05 b4 11 03 c0 22 be 01 c0 	mov    DWORD PTR ds:0xc00311b4,0xc001be22
c001c6d4:	c7 05 b8 11 03 c0 22 be 01 c0 	mov    DWORD PTR ds:0xc00311b8,0xc001be22
c001c6de:	c7 05 bc 11 03 c0 63 be 01 c0 	mov    DWORD PTR ds:0xc00311bc,0xc001be63
c001c6e8:	c7 05 c0 11 03 c0 c7 be 01 c0 	mov    DWORD PTR ds:0xc00311c0,0xc001bec7
c001c6f2:	c7 05 c4 11 03 c0 f6 b8 01 c0 	mov    DWORD PTR ds:0xc00311c4,0xc001b8f6
c001c6fc:	c7 05 c8 11 03 c0 2b bf 01 c0 	mov    DWORD PTR ds:0xc00311c8,0xc001bf2b
c001c706:	c7 05 cc 11 03 c0 b3 b8 01 c0 	mov    DWORD PTR ds:0xc00311cc,0xc001b8b3
c001c710:	c7 05 d0 11 03 c0 77 bf 01 c0 	mov    DWORD PTR ds:0xc00311d0,0xc001bf77
c001c71a:	c7 05 d4 11 03 c0 b2 b9 01 c0 	mov    DWORD PTR ds:0xc00311d4,0xc001b9b2
c001c724:	c7 05 d8 11 03 c0 fa bf 01 c0 	mov    DWORD PTR ds:0xc00311d8,0xc001bffa
c001c72e:	c7 05 dc 11 03 c0 75 bb 01 c0 	mov    DWORD PTR ds:0xc00311dc,0xc001bb75
c001c738:	c7 05 e0 11 03 c0 21 c0 01 c0 	mov    DWORD PTR ds:0xc00311e0,0xc001c021
c001c742:	c7 05 e4 11 03 c0 79 c0 01 c0 	mov    DWORD PTR ds:0xc00311e4,0xc001c079
c001c74c:	c7 05 e8 11 03 c0 b1 c1 01 c0 	mov    DWORD PTR ds:0xc00311e8,0xc001c1b1
c001c756:	c7 05 ec 11 03 c0 54 b7 01 c0 	mov    DWORD PTR ds:0xc00311ec,0xc001b754
c001c760:	c7 05 f0 11 03 c0 be b7 01 c0 	mov    DWORD PTR ds:0xc00311f0,0xc001b7be
c001c76a:	c7 05 f4 11 03 c0 04 b8 01 c0 	mov    DWORD PTR ds:0xc00311f4,0xc001b804
c001c774:	c7 05 f8 11 03 c0 d0 c2 01 c0 	mov    DWORD PTR ds:0xc00311f8,0xc001c2d0
c001c77e:	c7 05 fc 11 03 c0 3d be 01 c0 	mov    DWORD PTR ds:0xc00311fc,0xc001be3d
c001c788:	c7 05 00 12 03 c0 55 b8 01 c0 	mov    DWORD PTR ds:0xc0031200,0xc001b855
c001c792:	c7 05 04 12 03 c0 42 c3 01 c0 	mov    DWORD PTR ds:0xc0031204,0xc001c342
c001c79c:	c7 05 08 12 03 c0 87 c3 01 c0 	mov    DWORD PTR ds:0xc0031208,0xc001c387
c001c7a6:	c7 05 0c 12 03 c0 fe b2 01 c0 	mov    DWORD PTR ds:0xc003120c,0xc001b2fe
c001c7b0:	c7 05 10 12 03 c0 c9 b4 01 c0 	mov    DWORD PTR ds:0xc0031210,0xc001b4c9
c001c7ba:	c7 05 14 12 03 c0 f1 b5 01 c0 	mov    DWORD PTR ds:0xc0031214,0xc001b5f1
c001c7c4:	c7 05 18 12 03 c0 6e b2 01 c0 	mov    DWORD PTR ds:0xc0031218,0xc001b26e
c001c7ce:	c7 05 1c 12 03 c0 a3 b6 01 c0 	mov    DWORD PTR ds:0xc003121c,0xc001b6a3
c001c7d8:	c7 05 20 12 03 c0 e7 b2 01 c0 	mov    DWORD PTR ds:0xc0031220,0xc001b2e7
c001c7e2:	c3                   	ret    

c001c7e3 <Sys::systemCall(regs*, void*)>:
c001c7e3:	53                   	push   ebx
c001c7e4:	83 ec 08             	sub    esp,0x8
c001c7e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7eb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c7ee:	83 f8 7f             	cmp    eax,0x7f
c001c7f1:	77 16                	ja     c001c809 <Sys::systemCall(regs*, void*)+0x26>
c001c7f3:	8b 14 85 60 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceea0]
c001c7fa:	85 d2                	test   edx,edx
c001c7fc:	74 0b                	je     c001c809 <Sys::systemCall(regs*, void*)+0x26>
c001c7fe:	83 ec 0c             	sub    esp,0xc
c001c801:	53                   	push   ebx
c001c802:	ff d2                	call   edx
c001c804:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c807:	eb 0d                	jmp    c001c816 <Sys::systemCall(regs*, void*)+0x33>
c001c809:	52                   	push   edx
c001c80a:	52                   	push   edx
c001c80b:	50                   	push   eax
c001c80c:	68 05 c1 02 c0       	push   0xc002c105
c001c811:	e8 58 67 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001c816:	83 c4 10             	add    esp,0x10
c001c819:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c81e:	31 d2                	xor    edx,edx
c001c820:	83 c4 08             	add    esp,0x8
c001c823:	5b                   	pop    ebx
c001c824:	c3                   	ret    

c001c825 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c825:	55                   	push   ebp
c001c826:	57                   	push   edi
c001c827:	56                   	push   esi
c001c828:	53                   	push   ebx
c001c829:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c82f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c836:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c83d:	85 c0                	test   eax,eax
c001c83f:	0f 95 c1             	setne  cl
c001c842:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c84a:	0f 94 c2             	sete   dl
c001c84d:	84 d1                	test   cl,dl
c001c84f:	74 23                	je     c001c874 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c851:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c857:	74 1b                	je     c001c874 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c859:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c85f:	89 da                	mov    edx,ebx
c001c861:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c867:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c86d:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c874:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c87b:	05 ff 0f 00 00       	add    eax,0xfff
c001c880:	83 ec 0c             	sub    esp,0xc
c001c883:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c887:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c88d:	c1 e8 0c             	shr    eax,0xc
c001c890:	89 ef                	mov    edi,ebp
c001c892:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c896:	c1 ef 0c             	shr    edi,0xc
c001c899:	6a 01                	push   0x1
c001c89b:	e8 eb 52 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c001c8a0:	89 c6                	mov    esi,eax
c001c8a2:	58                   	pop    eax
c001c8a3:	5a                   	pop    edx
c001c8a4:	57                   	push   edi
c001c8a5:	68 8b c1 02 c0       	push   0xc002c18b
c001c8aa:	e8 bf 66 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001c8af:	59                   	pop    ecx
c001c8b0:	58                   	pop    eax
c001c8b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8b5:	68 9d c1 02 c0       	push   0xc002c19d
c001c8ba:	e8 af 66 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001c8bf:	83 c4 10             	add    esp,0x10
c001c8c2:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c8c8:	0f 86 24 01 00 00    	jbe    c001c9f2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c8ce:	c1 e7 0c             	shl    edi,0xc
c001c8d1:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c8d4:	89 df                	mov    edi,ebx
c001c8d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8da:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c8e1:	01 dd                	add    ebp,ebx
c001c8e3:	29 fd                	sub    ebp,edi
c001c8e5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c8e9:	0f 84 01 01 00 00    	je     c001c9f0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c8ef:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c8f5:	76 05                	jbe    c001c8fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c8f7:	bd 00 10 00 00       	mov    ebp,0x1000
c001c8fc:	83 ec 0c             	sub    esp,0xc
c001c8ff:	31 d2                	xor    edx,edx
c001c901:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c908:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c90a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c90e:	50                   	push   eax
c001c90f:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c913:	50                   	push   eax
c001c914:	52                   	push   edx
c001c915:	55                   	push   ebp
c001c916:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c91d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c920:	83 c4 20             	add    esp,0x20
c001c923:	85 c0                	test   eax,eax
c001c925:	74 0a                	je     c001c931 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c927:	53                   	push   ebx
c001c928:	53                   	push   ebx
c001c929:	50                   	push   eax
c001c92a:	68 af c1 02 c0       	push   0xc002c1af
c001c92f:	eb 0f                	jmp    c001c940 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c931:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c935:	74 20                	je     c001c957 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c937:	51                   	push   ecx
c001c938:	51                   	push   ecx
c001c939:	6a 00                	push   0x0
c001c93b:	68 da c1 02 c0       	push   0xc002c1da
c001c940:	e8 29 66 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001c945:	89 34 24             	mov    DWORD PTR [esp],esi
c001c948:	e8 ae 56 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c001c94d:	83 c4 10             	add    esp,0x10
c001c950:	31 c0                	xor    eax,eax
c001c952:	e9 55 01 00 00       	jmp    c001caac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c957:	e8 d8 14 00 00       	call   c001de34 <lockScheduler()>
c001c95c:	e8 81 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c961:	6a 07                	push   0x7
c001c963:	89 c5                	mov    ebp,eax
c001c965:	56                   	push   esi
c001c966:	50                   	push   eax
c001c967:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c96c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c96f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c975:	e8 e8 59 ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c97a:	83 c4 0c             	add    esp,0xc
c001c97d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c984:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c98a:	6a 00                	push   0x0
c001c98c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c991:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c994:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c99a:	e8 2d 58 ff ff       	call   c00121cc <VAS::mapOtherVASIn(bool, VAS*)>
c001c99f:	58                   	pop    eax
c001c9a0:	5a                   	pop    edx
c001c9a1:	68 07 0c 00 00       	push   0xc07
c001c9a6:	57                   	push   edi
c001c9a7:	81 c7 00 10 00 00    	add    edi,0x1000
c001c9ad:	55                   	push   ebp
c001c9ae:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c9b5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9bb:	6a 00                	push   0x0
c001c9bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9c5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9cb:	e8 4c 5d ff ff       	call   c001271c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9d0:	83 c4 1c             	add    esp,0x1c
c001c9d3:	68 00 10 00 00       	push   0x1000
c001c9d8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c9dc:	50                   	push   eax
c001c9dd:	56                   	push   esi
c001c9de:	e8 61 3d fe ff       	call   c0000744 <memcpy>
c001c9e3:	e8 4e 14 00 00       	call   c001de36 <unlockScheduler()>
c001c9e8:	83 c4 10             	add    esp,0x10
c001c9eb:	e9 ea fe ff ff       	jmp    c001c8da <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c9f0:	89 fb                	mov    ebx,edi
c001c9f2:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c9fa:	0f 86 9e 00 00 00    	jbe    c001ca9e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001ca00:	e8 2f 14 00 00       	call   c001de34 <lockScheduler()>
c001ca05:	51                   	push   ecx
c001ca06:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca0d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca13:	6a 00                	push   0x0
c001ca15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca1a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca1d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca23:	e8 a4 57 ff ff       	call   c00121cc <VAS::mapOtherVASIn(bool, VAS*)>
c001ca28:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ca2c:	c1 e7 0c             	shl    edi,0xc
c001ca2f:	01 df                	add    edi,ebx
c001ca31:	83 c4 10             	add    esp,0x10
c001ca34:	39 fb                	cmp    ebx,edi
c001ca36:	74 61                	je     c001ca99 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001ca38:	e8 a5 34 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001ca3d:	6a 07                	push   0x7
c001ca3f:	89 c5                	mov    ebp,eax
c001ca41:	56                   	push   esi
c001ca42:	50                   	push   eax
c001ca43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca48:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca4b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca51:	e8 0c 59 ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca56:	58                   	pop    eax
c001ca57:	5a                   	pop    edx
c001ca58:	68 07 0c 00 00       	push   0xc07
c001ca5d:	53                   	push   ebx
c001ca5e:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca64:	55                   	push   ebp
c001ca65:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca6c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca72:	6a 00                	push   0x0
c001ca74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca79:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca7c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca82:	e8 95 5c ff ff       	call   c001271c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca87:	83 c4 1c             	add    esp,0x1c
c001ca8a:	68 00 10 00 00       	push   0x1000
c001ca8f:	6a 00                	push   0x0
c001ca91:	56                   	push   esi
c001ca92:	e8 e1 3c fe ff       	call   c0000778 <memset>
c001ca97:	eb 98                	jmp    c001ca31 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001ca99:	e8 98 13 00 00       	call   c001de36 <unlockScheduler()>
c001ca9e:	83 ec 0c             	sub    esp,0xc
c001caa1:	56                   	push   esi
c001caa2:	e8 54 55 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c001caa7:	83 c4 10             	add    esp,0x10
c001caaa:	b0 01                	mov    al,0x1
c001caac:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cab2:	5b                   	pop    ebx
c001cab3:	5e                   	pop    esi
c001cab4:	5f                   	pop    edi
c001cab5:	5d                   	pop    ebp
c001cab6:	c3                   	ret    

c001cab7 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cab7:	55                   	push   ebp
c001cab8:	57                   	push   edi
c001cab9:	56                   	push   esi
c001caba:	53                   	push   ebx
c001cabb:	83 ec 48             	sub    esp,0x48
c001cabe:	68 14 01 00 00       	push   0x114
c001cac3:	e8 78 2d ff ff       	call   c000f840 <malloc>
c001cac8:	83 c4 0c             	add    esp,0xc
c001cacb:	89 c6                	mov    esi,eax
c001cacd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cad1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cad5:	50                   	push   eax
c001cad6:	e8 eb 69 ff ff       	call   c00134c6 <File::File(char const*, Process*)>
c001cadb:	58                   	pop    eax
c001cadc:	5a                   	pop    edx
c001cadd:	6a 01                	push   0x1
c001cadf:	56                   	push   esi
c001cae0:	e8 45 6a ff ff       	call   c001352a <File::open(FileOpenMode)>
c001cae5:	83 c4 10             	add    esp,0x10
c001cae8:	85 c0                	test   eax,eax
c001caea:	0f 85 47 01 00 00    	jne    c001cc37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caf0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001caf8:	83 ec 0c             	sub    esp,0xc
c001cafb:	6a 34                	push   0x34
c001cafd:	e8 3e 2d ff ff       	call   c000f840 <malloc>
c001cb02:	89 c3                	mov    ebx,eax
c001cb04:	58                   	pop    eax
c001cb05:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb07:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cb0b:	57                   	push   edi
c001cb0c:	53                   	push   ebx
c001cb0d:	6a 00                	push   0x0
c001cb0f:	6a 34                	push   0x34
c001cb11:	56                   	push   esi
c001cb12:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb15:	83 c4 20             	add    esp,0x20
c001cb18:	85 c0                	test   eax,eax
c001cb1a:	0f 85 17 01 00 00    	jne    c001cc37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb20:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cb26:	0f 85 0b 01 00 00    	jne    c001cc37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb2c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb2f:	85 c0                	test   eax,eax
c001cb31:	0f 84 00 01 00 00    	je     c001cc37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb37:	31 d2                	xor    edx,edx
c001cb39:	55                   	push   ebp
c001cb3a:	52                   	push   edx
c001cb3b:	50                   	push   eax
c001cb3c:	56                   	push   esi
c001cb3d:	e8 a6 6a ff ff       	call   c00135e8 <File::seek(unsigned long long)>
c001cb42:	83 c4 10             	add    esp,0x10
c001cb45:	85 c0                	test   eax,eax
c001cb47:	0f 85 ea 00 00 00    	jne    c001cc37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb4d:	83 ec 0c             	sub    esp,0xc
c001cb50:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb53:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb5b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb5f:	0f af c2             	imul   eax,edx
c001cb62:	50                   	push   eax
c001cb63:	e8 d8 2c ff ff       	call   c000f840 <malloc>
c001cb68:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb6e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb71:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb75:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb79:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb7d:	0f af c2             	imul   eax,edx
c001cb80:	99                   	cdq    
c001cb81:	52                   	push   edx
c001cb82:	50                   	push   eax
c001cb83:	56                   	push   esi
c001cb84:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb87:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb8a:	83 c4 20             	add    esp,0x20
c001cb8d:	85 c0                	test   eax,eax
c001cb8f:	0f 84 a2 00 00 00    	je     c001cc37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb95:	31 d2                	xor    edx,edx
c001cb97:	51                   	push   ecx
c001cb98:	52                   	push   edx
c001cb99:	50                   	push   eax
c001cb9a:	56                   	push   esi
c001cb9b:	e8 48 6a ff ff       	call   c00135e8 <File::seek(unsigned long long)>
c001cba0:	83 c4 10             	add    esp,0x10
c001cba3:	85 c0                	test   eax,eax
c001cba5:	0f 85 8c 00 00 00    	jne    c001cc37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbab:	83 ec 0c             	sub    esp,0xc
c001cbae:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbb2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbb6:	31 ed                	xor    ebp,ebp
c001cbb8:	0f af c2             	imul   eax,edx
c001cbbb:	50                   	push   eax
c001cbbc:	e8 7f 2c ff ff       	call   c000f840 <malloc>
c001cbc1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbc3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbc7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbce:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbd2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbd6:	0f af c2             	imul   eax,edx
c001cbd9:	99                   	cdq    
c001cbda:	52                   	push   edx
c001cbdb:	50                   	push   eax
c001cbdc:	56                   	push   esi
c001cbdd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbe0:	83 c4 20             	add    esp,0x20
c001cbe3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cbeb:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cbef:	0f 86 80 00 00 00    	jbe    c001cc75 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cbf5:	0f b7 fd             	movzx  edi,bp
c001cbf8:	c1 e7 05             	shl    edi,0x5
c001cbfb:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cbff:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cc02:	75 6b                	jne    c001cc6f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc04:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cc07:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc0b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cc0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc12:	52                   	push   edx
c001cc13:	31 d2                	xor    edx,edx
c001cc15:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cc18:	52                   	push   edx
c001cc19:	50                   	push   eax
c001cc1a:	56                   	push   esi
c001cc1b:	e8 c8 69 ff ff       	call   c00135e8 <File::seek(unsigned long long)>
c001cc20:	83 c4 10             	add    esp,0x10
c001cc23:	85 c0                	test   eax,eax
c001cc25:	74 17                	je     c001cc3e <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cc27:	83 ec 0c             	sub    esp,0xc
c001cc2a:	68 06 c2 02 c0       	push   0xc002c206
c001cc2f:	e8 3a 63 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001cc34:	83 c4 10             	add    esp,0x10
c001cc37:	31 c0                	xor    eax,eax
c001cc39:	e9 87 00 00 00       	jmp    c001ccc5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc3e:	83 ec 0c             	sub    esp,0xc
c001cc41:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc44:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc47:	50                   	push   eax
c001cc48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc50:	56                   	push   esi
c001cc51:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc55:	e8 cb fb ff ff       	call   c001c825 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc5a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc5e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc62:	83 c4 20             	add    esp,0x20
c001cc65:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc69:	73 04                	jae    c001cc6f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc6f:	45                   	inc    ebp
c001cc70:	e9 76 ff ff ff       	jmp    c001cbeb <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc79:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc81:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc87:	83 ec 0c             	sub    esp,0xc
c001cc8a:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc90:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc95:	05 00 10 00 00       	add    eax,0x1000
c001cc9a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cca1:	e8 aa 2b ff ff       	call   c000f850 <free>
c001cca6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cca9:	e8 a2 2b ff ff       	call   c000f850 <free>
c001ccae:	58                   	pop    eax
c001ccaf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccb3:	e8 98 2b ff ff       	call   c000f850 <free>
c001ccb8:	89 34 24             	mov    DWORD PTR [esp],esi
c001ccbb:	e8 c8 68 ff ff       	call   c0013588 <File::close()>
c001ccc0:	83 c4 10             	add    esp,0x10
c001ccc3:	b0 01                	mov    al,0x1
c001ccc5:	83 c4 3c             	add    esp,0x3c
c001ccc8:	5b                   	pop    ebx
c001ccc9:	5e                   	pop    esi
c001ccca:	5f                   	pop    edi
c001cccb:	5d                   	pop    ebp
c001cccc:	c3                   	ret    

c001cccd <Thr::runtimeReferenceHelper()>:
c001cccd:	83 ec 18             	sub    esp,0x18
c001ccd0:	68 0e c2 02 c0       	push   0xc002c20e
c001ccd5:	e8 94 62 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001ccda:	fa                   	cli    
c001ccdb:	83 c4 10             	add    esp,0x10
c001ccde:	eb fe                	jmp    c001ccde <Thr::runtimeReferenceHelper()+0x11>

c001cce0 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cce0:	57                   	push   edi
c001cce1:	56                   	push   esi
c001cce2:	53                   	push   ebx
c001cce3:	31 db                	xor    ebx,ebx
c001cce5:	39 1d 00 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b00,ebx
c001cceb:	7e 3c                	jle    c001cd29 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cced:	8b 34 9d 80 1a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce580]
c001ccf4:	31 ff                	xor    edi,edi
c001ccf6:	39 3c 9d 80 19 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce680],edi
c001ccfd:	7e 27                	jle    c001cd26 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001ccff:	50                   	push   eax
c001cd00:	50                   	push   eax
c001cd01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd05:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd07:	03 04 9d 00 1a 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce600]
c001cd0e:	50                   	push   eax
c001cd0f:	e8 ac 3b fe ff       	call   c00008c0 <strcmp>
c001cd14:	83 c4 10             	add    esp,0x10
c001cd17:	85 c0                	test   eax,eax
c001cd19:	75 05                	jne    c001cd20 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cd1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cd1e:	eb 0b                	jmp    c001cd2b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cd20:	83 c6 10             	add    esi,0x10
c001cd23:	47                   	inc    edi
c001cd24:	eb d0                	jmp    c001ccf6 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cd26:	43                   	inc    ebx
c001cd27:	eb bc                	jmp    c001cce5 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cd29:	31 c0                	xor    eax,eax
c001cd2b:	5b                   	pop    ebx
c001cd2c:	5e                   	pop    esi
c001cd2d:	5f                   	pop    edi
c001cd2e:	c3                   	ret    

c001cd2f <Thr::loadKernelSymbolTable(char const*)>:
c001cd2f:	55                   	push   ebp
c001cd30:	57                   	push   edi
c001cd31:	56                   	push   esi
c001cd32:	53                   	push   ebx
c001cd33:	83 ec 68             	sub    esp,0x68
c001cd36:	8b 35 54 1b 03 c0    	mov    esi,DWORD PTR ds:0xc0031b54
c001cd3c:	68 14 01 00 00       	push   0x114
c001cd41:	e8 fa 2a ff ff       	call   c000f840 <malloc>
c001cd46:	83 c4 0c             	add    esp,0xc
c001cd49:	89 c3                	mov    ebx,eax
c001cd4b:	56                   	push   esi
c001cd4c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd50:	50                   	push   eax
c001cd51:	e8 70 67 ff ff       	call   c00134c6 <File::File(char const*, Process*)>
c001cd56:	5e                   	pop    esi
c001cd57:	5f                   	pop    edi
c001cd58:	6a 01                	push   0x1
c001cd5a:	53                   	push   ebx
c001cd5b:	e8 ca 67 ff ff       	call   c001352a <File::open(FileOpenMode)>
c001cd60:	83 c4 10             	add    esp,0x10
c001cd63:	85 c0                	test   eax,eax
c001cd65:	74 0a                	je     c001cd71 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd67:	83 ec 0c             	sub    esp,0xc
c001cd6a:	68 30 c2 02 c0       	push   0xc002c230
c001cd6f:	eb 34                	jmp    c001cda5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd71:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd79:	83 ec 0c             	sub    esp,0xc
c001cd7c:	6a 34                	push   0x34
c001cd7e:	e8 bd 2a ff ff       	call   c000f840 <malloc>
c001cd83:	59                   	pop    ecx
c001cd84:	89 c7                	mov    edi,eax
c001cd86:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd8c:	56                   	push   esi
c001cd8d:	57                   	push   edi
c001cd8e:	6a 00                	push   0x0
c001cd90:	6a 34                	push   0x34
c001cd92:	53                   	push   ebx
c001cd93:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd96:	83 c4 20             	add    esp,0x20
c001cd99:	85 c0                	test   eax,eax
c001cd9b:	74 17                	je     c001cdb4 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd9d:	83 ec 0c             	sub    esp,0xc
c001cda0:	68 47 c2 02 c0       	push   0xc002c247
c001cda5:	e8 65 d8 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001cdaa:	83 c4 10             	add    esp,0x10
c001cdad:	31 c0                	xor    eax,eax
c001cdaf:	e9 31 02 00 00       	jmp    c001cfe5 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cdb4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cdba:	75 e1                	jne    c001cd9d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdbc:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cdbf:	85 c0                	test   eax,eax
c001cdc1:	74 da                	je     c001cd9d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdc3:	52                   	push   edx
c001cdc4:	31 d2                	xor    edx,edx
c001cdc6:	52                   	push   edx
c001cdc7:	50                   	push   eax
c001cdc8:	53                   	push   ebx
c001cdc9:	e8 1a 68 ff ff       	call   c00135e8 <File::seek(unsigned long long)>
c001cdce:	83 c4 10             	add    esp,0x10
c001cdd1:	85 c0                	test   eax,eax
c001cdd3:	75 c8                	jne    c001cd9d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdd5:	83 ec 0c             	sub    esp,0xc
c001cdd8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cddc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cde0:	31 ed                	xor    ebp,ebp
c001cde2:	0f af c2             	imul   eax,edx
c001cde5:	50                   	push   eax
c001cde6:	e8 55 2a ff ff       	call   c000f840 <malloc>
c001cdeb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cded:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cdf1:	89 34 24             	mov    DWORD PTR [esp],esi
c001cdf4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cdf8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdfc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce00:	0f af c2             	imul   eax,edx
c001ce03:	99                   	cdq    
c001ce04:	52                   	push   edx
c001ce05:	50                   	push   eax
c001ce06:	53                   	push   ebx
c001ce07:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce0a:	83 c4 20             	add    esp,0x20
c001ce0d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce15:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce1d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce25:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ce2d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce31:	0f 86 aa 00 00 00    	jbe    c001cee1 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ce37:	0f b7 f5             	movzx  esi,bp
c001ce3a:	6b f6 28             	imul   esi,esi,0x28
c001ce3d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce41:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce48:	50                   	push   eax
c001ce49:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce4d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce51:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce53:	6b c0 28             	imul   eax,eax,0x28
c001ce56:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce5a:	89 d0                	mov    eax,edx
c001ce5c:	31 d2                	xor    edx,edx
c001ce5e:	52                   	push   edx
c001ce5f:	50                   	push   eax
c001ce60:	53                   	push   ebx
c001ce61:	e8 82 67 ff ff       	call   c00135e8 <File::seek(unsigned long long)>
c001ce66:	83 c4 0c             	add    esp,0xc
c001ce69:	6a 20                	push   0x20
c001ce6b:	6a 00                	push   0x0
c001ce6d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce71:	52                   	push   edx
c001ce72:	e8 01 39 fe ff       	call   c0000778 <memset>
c001ce77:	58                   	pop    eax
c001ce78:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce7a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce7e:	51                   	push   ecx
c001ce7f:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce83:	52                   	push   edx
c001ce84:	6a 00                	push   0x0
c001ce86:	6a 1f                	push   0x1f
c001ce88:	53                   	push   ebx
c001ce89:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce8c:	83 c4 18             	add    esp,0x18
c001ce8f:	68 5e c2 02 c0       	push   0xc002c25e
c001ce94:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce98:	52                   	push   edx
c001ce99:	e8 22 3a fe ff       	call   c00008c0 <strcmp>
c001ce9e:	83 c4 10             	add    esp,0x10
c001cea1:	85 c0                	test   eax,eax
c001cea3:	75 0f                	jne    c001ceb4 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cea5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cea8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ceac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ceb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ceb4:	50                   	push   eax
c001ceb5:	50                   	push   eax
c001ceb6:	68 66 c2 02 c0       	push   0xc002c266
c001cebb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cebf:	50                   	push   eax
c001cec0:	e8 fb 39 fe ff       	call   c00008c0 <strcmp>
c001cec5:	83 c4 10             	add    esp,0x10
c001cec8:	85 c0                	test   eax,eax
c001ceca:	75 0f                	jne    c001cedb <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cecc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cecf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ced3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ced7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cedb:	45                   	inc    ebp
c001cedc:	e9 4c ff ff ff       	jmp    c001ce2d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cee1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cee6:	75 10                	jne    c001cef8 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cee8:	83 ec 0c             	sub    esp,0xc
c001ceeb:	68 6e c2 02 c0       	push   0xc002c26e
c001cef0:	e8 1a d7 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001cef5:	83 c4 10             	add    esp,0x10
c001cef8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cefd:	75 10                	jne    c001cf0f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ceff:	83 ec 0c             	sub    esp,0xc
c001cf02:	68 6e c2 02 c0       	push   0xc002c26e
c001cf07:	e8 03 d7 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001cf0c:	83 c4 10             	add    esp,0x10
c001cf0f:	31 d2                	xor    edx,edx
c001cf11:	50                   	push   eax
c001cf12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf16:	52                   	push   edx
c001cf17:	50                   	push   eax
c001cf18:	53                   	push   ebx
c001cf19:	e8 ca 66 ff ff       	call   c00135e8 <File::seek(unsigned long long)>
c001cf1e:	5a                   	pop    edx
c001cf1f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf23:	e8 18 29 ff ff       	call   c000f840 <malloc>
c001cf28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf30:	31 c9                	xor    ecx,ecx
c001cf32:	5e                   	pop    esi
c001cf33:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf35:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf39:	55                   	push   ebp
c001cf3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf3e:	51                   	push   ecx
c001cf3f:	52                   	push   edx
c001cf40:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf44:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf48:	53                   	push   ebx
c001cf49:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf4c:	83 c4 14             	add    esp,0x14
c001cf4f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf53:	e8 e8 28 ff ff       	call   c000f840 <malloc>
c001cf58:	89 c6                	mov    esi,eax
c001cf5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf5c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf5f:	56                   	push   esi
c001cf60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf64:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf68:	51                   	push   ecx
c001cf69:	52                   	push   edx
c001cf6a:	53                   	push   ebx
c001cf6b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf6e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf72:	8b 15 00 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b00
c001cf78:	83 c4 1c             	add    esp,0x1c
c001cf7b:	c1 e8 04             	shr    eax,0x4
c001cf7e:	89 04 95 80 19 03 c0 	mov    DWORD PTR [edx*4-0x3ffce680],eax
c001cf85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf89:	31 d2                	xor    edx,edx
c001cf8b:	52                   	push   edx
c001cf8c:	50                   	push   eax
c001cf8d:	53                   	push   ebx
c001cf8e:	e8 55 66 ff ff       	call   c00135e8 <File::seek(unsigned long long)>
c001cf93:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf95:	31 d2                	xor    edx,edx
c001cf97:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf9a:	56                   	push   esi
c001cf9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf9f:	52                   	push   edx
c001cfa0:	50                   	push   eax
c001cfa1:	53                   	push   ebx
c001cfa2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfa5:	83 c4 14             	add    esp,0x14
c001cfa8:	53                   	push   ebx
c001cfa9:	e8 da 65 ff ff       	call   c0013588 <File::close()>
c001cfae:	5d                   	pop    ebp
c001cfaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cfb3:	e8 98 28 ff ff       	call   c000f850 <free>
c001cfb8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cfbb:	e8 90 28 ff ff       	call   c000f850 <free>
c001cfc0:	a1 00 1b 03 c0       	mov    eax,ds:0xc0031b00
c001cfc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cfc9:	8d 50 01             	lea    edx,[eax+0x1]
c001cfcc:	89 0c 85 80 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce580],ecx
c001cfd3:	89 34 85 00 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce600],esi
c001cfda:	89 15 00 1b 03 c0    	mov    DWORD PTR ds:0xc0031b00,edx
c001cfe0:	83 c4 10             	add    esp,0x10
c001cfe3:	b0 01                	mov    al,0x1
c001cfe5:	83 c4 5c             	add    esp,0x5c
c001cfe8:	5b                   	pop    ebx
c001cfe9:	5e                   	pop    esi
c001cfea:	5f                   	pop    edi
c001cfeb:	5d                   	pop    ebp
c001cfec:	c3                   	ret    

c001cfed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cfed:	55                   	push   ebp
c001cfee:	57                   	push   edi
c001cfef:	56                   	push   esi
c001cff0:	53                   	push   ebx
c001cff1:	81 ec 68 03 00 00    	sub    esp,0x368
c001cff7:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cffe:	8b 1d 54 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b54
c001d004:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d008:	68 14 01 00 00       	push   0x114
c001d00d:	e8 2e 28 ff ff       	call   c000f840 <malloc>
c001d012:	83 c4 0c             	add    esp,0xc
c001d015:	89 c5                	mov    ebp,eax
c001d017:	53                   	push   ebx
c001d018:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d01f:	50                   	push   eax
c001d020:	e8 a1 64 ff ff       	call   c00134c6 <File::File(char const*, Process*)>
c001d025:	5e                   	pop    esi
c001d026:	5f                   	pop    edi
c001d027:	6a 01                	push   0x1
c001d029:	55                   	push   ebp
c001d02a:	e8 fb 64 ff ff       	call   c001352a <File::open(FileOpenMode)>
c001d02f:	83 c4 10             	add    esp,0x10
c001d032:	85 c0                	test   eax,eax
c001d034:	0f 85 8d 06 00 00    	jne    c001d6c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d03a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d042:	83 ec 0c             	sub    esp,0xc
c001d045:	6a 34                	push   0x34
c001d047:	e8 f4 27 ff ff       	call   c000f840 <malloc>
c001d04c:	5b                   	pop    ebx
c001d04d:	89 c7                	mov    edi,eax
c001d04f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d053:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d056:	53                   	push   ebx
c001d057:	57                   	push   edi
c001d058:	6a 00                	push   0x0
c001d05a:	6a 34                	push   0x34
c001d05c:	55                   	push   ebp
c001d05d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d060:	83 c4 20             	add    esp,0x20
c001d063:	85 c0                	test   eax,eax
c001d065:	0f 85 5c 06 00 00    	jne    c001d6c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d06b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d071:	0f 85 50 06 00 00    	jne    c001d6c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d077:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d07a:	85 c0                	test   eax,eax
c001d07c:	0f 84 45 06 00 00    	je     c001d6c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d082:	31 d2                	xor    edx,edx
c001d084:	51                   	push   ecx
c001d085:	52                   	push   edx
c001d086:	50                   	push   eax
c001d087:	55                   	push   ebp
c001d088:	e8 5b 65 ff ff       	call   c00135e8 <File::seek(unsigned long long)>
c001d08d:	83 c4 10             	add    esp,0x10
c001d090:	85 c0                	test   eax,eax
c001d092:	0f 85 2f 06 00 00    	jne    c001d6c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d098:	83 ec 0c             	sub    esp,0xc
c001d09b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d09e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0a2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d0a6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0aa:	0f af c2             	imul   eax,edx
c001d0ad:	50                   	push   eax
c001d0ae:	e8 8d 27 ff ff       	call   c000f840 <malloc>
c001d0b3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0c1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0c5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0c9:	0f af c2             	imul   eax,edx
c001d0cc:	99                   	cdq    
c001d0cd:	52                   	push   edx
c001d0ce:	50                   	push   eax
c001d0cf:	55                   	push   ebp
c001d0d0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0d3:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d0d6:	83 c4 20             	add    esp,0x20
c001d0d9:	85 c0                	test   eax,eax
c001d0db:	0f 84 e6 05 00 00    	je     c001d6c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0e1:	52                   	push   edx
c001d0e2:	31 d2                	xor    edx,edx
c001d0e4:	52                   	push   edx
c001d0e5:	50                   	push   eax
c001d0e6:	55                   	push   ebp
c001d0e7:	e8 fc 64 ff ff       	call   c00135e8 <File::seek(unsigned long long)>
c001d0ec:	83 c4 10             	add    esp,0x10
c001d0ef:	85 c0                	test   eax,eax
c001d0f1:	0f 85 d0 05 00 00    	jne    c001d6c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0f7:	83 ec 0c             	sub    esp,0xc
c001d0fa:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0fe:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d102:	31 f6                	xor    esi,esi
c001d104:	0f af c2             	imul   eax,edx
c001d107:	50                   	push   eax
c001d108:	e8 33 27 ff ff       	call   c000f840 <malloc>
c001d10d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d114:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d117:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d11b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d11f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d123:	0f af c2             	imul   eax,edx
c001d126:	99                   	cdq    
c001d127:	52                   	push   edx
c001d128:	50                   	push   eax
c001d129:	55                   	push   ebp
c001d12a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d12d:	83 c4 20             	add    esp,0x20
c001d130:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d134:	0f 86 8a 00 00 00    	jbe    c001d1c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d13a:	0f b7 de             	movzx  ebx,si
c001d13d:	c1 e3 05             	shl    ebx,0x5
c001d140:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d144:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d147:	75 75                	jne    c001d1be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d149:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d14c:	31 d2                	xor    edx,edx
c001d14e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d152:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d155:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d159:	50                   	push   eax
c001d15a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d15d:	52                   	push   edx
c001d15e:	50                   	push   eax
c001d15f:	55                   	push   ebp
c001d160:	e8 83 64 ff ff       	call   c00135e8 <File::seek(unsigned long long)>
c001d165:	83 c4 10             	add    esp,0x10
c001d168:	85 c0                	test   eax,eax
c001d16a:	0f 85 57 05 00 00    	jne    c001d6c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d170:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d177:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d17a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d17e:	31 d2                	xor    edx,edx
c001d180:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d184:	83 ec 0c             	sub    esp,0xc
c001d187:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d18b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d192:	50                   	push   eax
c001d193:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d197:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d19b:	52                   	push   edx
c001d19c:	50                   	push   eax
c001d19d:	55                   	push   ebp
c001d19e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1a1:	83 c4 1c             	add    esp,0x1c
c001d1a4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d1a7:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d1aa:	50                   	push   eax
c001d1ab:	6a 00                	push   0x0
c001d1ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1b1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d1b5:	50                   	push   eax
c001d1b6:	e8 bd 35 fe ff       	call   c0000778 <memset>
c001d1bb:	83 c4 10             	add    esp,0x10
c001d1be:	46                   	inc    esi
c001d1bf:	e9 6c ff ff ff       	jmp    c001d130 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d1c4:	53                   	push   ebx
c001d1c5:	31 db                	xor    ebx,ebx
c001d1c7:	68 00 01 00 00       	push   0x100
c001d1cc:	6a 00                	push   0x0
c001d1ce:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d1d2:	50                   	push   eax
c001d1d3:	e8 a0 35 fe ff       	call   c0000778 <memset>
c001d1d8:	83 c4 0c             	add    esp,0xc
c001d1db:	68 00 01 00 00       	push   0x100
c001d1e0:	6a 00                	push   0x0
c001d1e2:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d1e9:	50                   	push   eax
c001d1ea:	e8 89 35 fe ff       	call   c0000778 <memset>
c001d1ef:	83 c4 10             	add    esp,0x10
c001d1f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d1fa:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d202:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d20a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d212:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d21a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d21e:	0f 86 30 01 00 00    	jbe    c001d354 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d224:	0f b7 f3             	movzx  esi,bx
c001d227:	6b f6 28             	imul   esi,esi,0x28
c001d22a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d22e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d235:	52                   	push   edx
c001d236:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d23a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d23e:	8b 06                	mov    eax,DWORD PTR [esi]
c001d240:	6b d2 28             	imul   edx,edx,0x28
c001d243:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d247:	31 d2                	xor    edx,edx
c001d249:	52                   	push   edx
c001d24a:	50                   	push   eax
c001d24b:	55                   	push   ebp
c001d24c:	e8 97 63 ff ff       	call   c00135e8 <File::seek(unsigned long long)>
c001d251:	83 c4 0c             	add    esp,0xc
c001d254:	6a 20                	push   0x20
c001d256:	6a 00                	push   0x0
c001d258:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d25f:	51                   	push   ecx
c001d260:	e8 13 35 fe ff       	call   c0000778 <memset>
c001d265:	59                   	pop    ecx
c001d266:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d269:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d26d:	52                   	push   edx
c001d26e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d275:	51                   	push   ecx
c001d276:	6a 00                	push   0x0
c001d278:	6a 1f                	push   0x1f
c001d27a:	55                   	push   ebp
c001d27b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d27e:	83 c4 1c             	add    esp,0x1c
c001d281:	6a 09                	push   0x9
c001d283:	68 88 c2 02 c0       	push   0xc002c288
c001d288:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d28f:	51                   	push   ecx
c001d290:	e8 ab 33 fe ff       	call   c0000640 <memcmp>
c001d295:	83 c4 10             	add    esp,0x10
c001d298:	85 c0                	test   eax,eax
c001d29a:	75 21                	jne    c001d2bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d29c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2a4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2ac:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2af:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2b6:	89 d0                	mov    eax,edx
c001d2b8:	40                   	inc    eax
c001d2b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2bd:	50                   	push   eax
c001d2be:	6a 09                	push   0x9
c001d2c0:	68 92 c2 02 c0       	push   0xc002c292
c001d2c5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2cc:	50                   	push   eax
c001d2cd:	e8 6e 33 fe ff       	call   c0000640 <memcmp>
c001d2d2:	83 c4 10             	add    esp,0x10
c001d2d5:	85 c0                	test   eax,eax
c001d2d7:	75 21                	jne    c001d2fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d2d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2e1:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2e9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2ec:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2f3:	89 d0                	mov    eax,edx
c001d2f5:	40                   	inc    eax
c001d2f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2fa:	50                   	push   eax
c001d2fb:	50                   	push   eax
c001d2fc:	68 5e c2 02 c0       	push   0xc002c25e
c001d301:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d308:	50                   	push   eax
c001d309:	e8 b2 35 fe ff       	call   c00008c0 <strcmp>
c001d30e:	83 c4 10             	add    esp,0x10
c001d311:	85 c0                	test   eax,eax
c001d313:	75 0f                	jne    c001d324 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d315:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d318:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d31c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d320:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d324:	50                   	push   eax
c001d325:	50                   	push   eax
c001d326:	68 66 c2 02 c0       	push   0xc002c266
c001d32b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d332:	50                   	push   eax
c001d333:	e8 88 35 fe ff       	call   c00008c0 <strcmp>
c001d338:	83 c4 10             	add    esp,0x10
c001d33b:	85 c0                	test   eax,eax
c001d33d:	75 0f                	jne    c001d34e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d33f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d342:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d346:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d34a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d34e:	43                   	inc    ebx
c001d34f:	e9 c6 fe ff ff       	jmp    c001d21a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d354:	31 d2                	xor    edx,edx
c001d356:	50                   	push   eax
c001d357:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d35b:	52                   	push   edx
c001d35c:	50                   	push   eax
c001d35d:	55                   	push   ebp
c001d35e:	e8 85 62 ff ff       	call   c00135e8 <File::seek(unsigned long long)>
c001d363:	58                   	pop    eax
c001d364:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d368:	e8 d3 24 ff ff       	call   c000f840 <malloc>
c001d36d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d370:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d374:	31 d2                	xor    edx,edx
c001d376:	58                   	pop    eax
c001d377:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d37b:	53                   	push   ebx
c001d37c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d380:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d384:	52                   	push   edx
c001d385:	50                   	push   eax
c001d386:	55                   	push   ebp
c001d387:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d38a:	83 c4 14             	add    esp,0x14
c001d38d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d391:	e8 aa 24 ff ff       	call   c000f840 <malloc>
c001d396:	31 d2                	xor    edx,edx
c001d398:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d39c:	83 c4 0c             	add    esp,0xc
c001d39f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3a3:	52                   	push   edx
c001d3a4:	50                   	push   eax
c001d3a5:	55                   	push   ebp
c001d3a6:	e8 3d 62 ff ff       	call   c00135e8 <File::seek(unsigned long long)>
c001d3ab:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3ae:	31 d2                	xor    edx,edx
c001d3b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d3b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d3bb:	52                   	push   edx
c001d3bc:	50                   	push   eax
c001d3bd:	55                   	push   ebp
c001d3be:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3c1:	83 c4 20             	add    esp,0x20
c001d3c4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d3cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d3d0:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d3d4:	0f 84 f1 02 00 00    	je     c001d6cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d3da:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d3e1:	31 d2                	xor    edx,edx
c001d3e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3e7:	c1 e8 03             	shr    eax,0x3
c001d3ea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d3ee:	51                   	push   ecx
c001d3ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3f3:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d3f7:	52                   	push   edx
c001d3f8:	50                   	push   eax
c001d3f9:	55                   	push   ebp
c001d3fa:	e8 e9 61 ff ff       	call   c00135e8 <File::seek(unsigned long long)>
c001d3ff:	5b                   	pop    ebx
c001d400:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d404:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d40b:	e8 30 24 ff ff       	call   c000f840 <malloc>
c001d410:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d413:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d417:	31 d2                	xor    edx,edx
c001d419:	5e                   	pop    esi
c001d41a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d41e:	50                   	push   eax
c001d41f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d423:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d427:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d42e:	52                   	push   edx
c001d42f:	50                   	push   eax
c001d430:	55                   	push   ebp
c001d431:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d434:	83 c4 20             	add    esp,0x20
c001d437:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d43f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d443:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d447:	0f 8d 62 02 00 00    	jge    c001d6af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d44d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d451:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d455:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d45a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d45d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d461:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d465:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d469:	89 d8                	mov    eax,ebx
c001d46b:	c1 e8 08             	shr    eax,0x8
c001d46e:	89 c6                	mov    esi,eax
c001d470:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d474:	c1 e6 04             	shl    esi,0x4
c001d477:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d47b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d47e:	85 d2                	test   edx,edx
c001d480:	0f 85 bf 00 00 00    	jne    c001d545 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d486:	83 ec 0c             	sub    esp,0xc
c001d489:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d48d:	03 06                	add    eax,DWORD PTR [esi]
c001d48f:	50                   	push   eax
c001d490:	e8 4b f8 ff ff       	call   c001cce0 <Thr::getAddressOfKernelSymbol(char const*)>
c001d495:	83 c4 10             	add    esp,0x10
c001d498:	89 c2                	mov    edx,eax
c001d49a:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d49f:	85 c0                	test   eax,eax
c001d4a1:	0f 85 9e 00 00 00    	jne    c001d545 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4a7:	83 ec 0c             	sub    esp,0xc
c001d4aa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4ae:	03 06                	add    eax,DWORD PTR [esi]
c001d4b0:	50                   	push   eax
c001d4b1:	e8 3f 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d4b6:	83 c4 10             	add    esp,0x10
c001d4b9:	89 c2                	mov    edx,eax
c001d4bb:	85 c0                	test   eax,eax
c001d4bd:	0f 85 82 00 00 00    	jne    c001d545 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4c3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d4c7:	50                   	push   eax
c001d4c8:	50                   	push   eax
c001d4c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4cd:	03 06                	add    eax,DWORD PTR [esi]
c001d4cf:	50                   	push   eax
c001d4d0:	68 9c c2 02 c0       	push   0xc002c29c
c001d4d5:	e8 94 5a ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001d4da:	58                   	pop    eax
c001d4db:	5a                   	pop    edx
c001d4dc:	68 b6 c2 02 c0       	push   0xc002c2b6
c001d4e1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4e8:	50                   	push   eax
c001d4e9:	e8 46 33 fe ff       	call   c0000834 <strcpy>
c001d4ee:	59                   	pop    ecx
c001d4ef:	58                   	pop    eax
c001d4f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4f4:	03 06                	add    eax,DWORD PTR [esi]
c001d4f6:	50                   	push   eax
c001d4f7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4fe:	50                   	push   eax
c001d4ff:	e8 70 34 fe ff       	call   c0000974 <strcat>
c001d504:	58                   	pop    eax
c001d505:	5a                   	pop    edx
c001d506:	68 4c c3 02 c0       	push   0xc002c34c
c001d50b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d512:	50                   	push   eax
c001d513:	e8 5c 34 fe ff       	call   c0000974 <strcat>
c001d518:	83 c4 10             	add    esp,0x10
c001d51b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d520:	0f 84 43 01 00 00    	je     c001d669 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d526:	83 ec 0c             	sub    esp,0xc
c001d529:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d530:	50                   	push   eax
c001d531:	e8 d9 d0 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001d536:	83 c4 10             	add    esp,0x10
c001d539:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d53d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d541:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d545:	80 fb 01             	cmp    bl,0x1
c001d548:	75 7d                	jne    c001d5c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d54a:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d551:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d555:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d559:	01 ce                	add    esi,ecx
c001d55b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d561:	0f 94 c0             	sete   al
c001d564:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d56a:	0f 94 c3             	sete   bl
c001d56d:	09 c3                	or     ebx,eax
c001d56f:	8b 06                	mov    eax,DWORD PTR [esi]
c001d571:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d576:	74 36                	je     c001d5ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d578:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d57b:	84 db                	test   bl,bl
c001d57d:	75 0a                	jne    c001d589 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d57f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d583:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d587:	76 37                	jbe    c001d5c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d589:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d58d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d592:	0f 84 d1 00 00 00    	je     c001d669 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d598:	83 ec 0c             	sub    esp,0xc
c001d59b:	68 cd c2 02 c0       	push   0xc002c2cd
c001d5a0:	e8 6a d0 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001d5a5:	83 c4 10             	add    esp,0x10
c001d5a8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d5ac:	eb 12                	jmp    c001d5c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5ae:	01 c1                	add    ecx,eax
c001d5b0:	84 db                	test   bl,bl
c001d5b2:	75 0c                	jne    c001d5c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5b4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5b8:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5bc:	77 02                	ja     c001d5c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5be:	01 d1                	add    ecx,edx
c001d5c0:	89 0e                	mov    DWORD PTR [esi],ecx
c001d5c2:	e9 df 00 00 00       	jmp    c001d6a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5c7:	80 fb 02             	cmp    bl,0x2
c001d5ca:	75 71                	jne    c001d63d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d5cc:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d5d3:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d5d7:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d5db:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5e1:	74 15                	je     c001d5f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5e3:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5e9:	74 0d                	je     c001d5f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5eb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5ef:	83 e8 04             	sub    eax,0x4
c001d5f2:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5f6:	76 1f                	jbe    c001d617 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d5f8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d5fc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d601:	74 66                	je     c001d669 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d603:	83 ec 0c             	sub    esp,0xc
c001d606:	68 e9 c2 02 c0       	push   0xc002c2e9
c001d60b:	e8 ff cf ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001d610:	83 c4 10             	add    esp,0x10
c001d613:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d617:	8b 06                	mov    eax,DWORD PTR [esi]
c001d619:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d61e:	74 13                	je     c001d633 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d620:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d624:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d62b:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d62f:	01 c8                	add    eax,ecx
c001d631:	eb 04                	jmp    c001d637 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d633:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d637:	01 c2                	add    edx,eax
c001d639:	89 16                	mov    DWORD PTR [esi],edx
c001d63b:	eb 69                	jmp    c001d6a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d63d:	0f b6 db             	movzx  ebx,bl
c001d640:	50                   	push   eax
c001d641:	50                   	push   eax
c001d642:	53                   	push   ebx
c001d643:	68 05 c3 02 c0       	push   0xc002c305
c001d648:	e8 21 59 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001d64d:	83 c4 10             	add    esp,0x10
c001d650:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d655:	74 12                	je     c001d669 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d657:	83 ec 0c             	sub    esp,0xc
c001d65a:	68 10 c3 02 c0       	push   0xc002c310
c001d65f:	e8 ab cf ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001d664:	83 c4 10             	add    esp,0x10
c001d667:	eb 3d                	jmp    c001d6a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d669:	83 ec 0c             	sub    esp,0xc
c001d66c:	55                   	push   ebp
c001d66d:	e8 16 5f ff ff       	call   c0013588 <File::close()>
c001d672:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d675:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d678:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d67b:	59                   	pop    ecx
c001d67c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d680:	e8 cb 21 ff ff       	call   c000f850 <free>
c001d685:	5b                   	pop    ebx
c001d686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d68a:	e8 c1 21 ff ff       	call   c000f850 <free>
c001d68f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d692:	e8 b9 21 ff ff       	call   c000f850 <free>
c001d697:	5e                   	pop    esi
c001d698:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d69c:	e8 af 21 ff ff       	call   c000f850 <free>
c001d6a1:	83 c4 10             	add    esp,0x10
c001d6a4:	eb 21                	jmp    c001d6c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d6a6:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d6aa:	e9 90 fd ff ff       	jmp    c001d43f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d6af:	83 ec 0c             	sub    esp,0xc
c001d6b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6b6:	e8 95 21 ff ff       	call   c000f850 <free>
c001d6bb:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d6bf:	83 c4 10             	add    esp,0x10
c001d6c2:	e9 05 fd ff ff       	jmp    c001d3cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d6c7:	31 c0                	xor    eax,eax
c001d6c9:	eb 33                	jmp    c001d6fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d6cb:	83 ec 0c             	sub    esp,0xc
c001d6ce:	55                   	push   ebp
c001d6cf:	e8 b4 5e ff ff       	call   c0013588 <File::close()>
c001d6d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6d7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6dd:	58                   	pop    eax
c001d6de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6e2:	e8 69 21 ff ff       	call   c000f850 <free>
c001d6e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6ea:	e8 61 21 ff ff       	call   c000f850 <free>
c001d6ef:	5a                   	pop    edx
c001d6f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6f4:	e8 57 21 ff ff       	call   c000f850 <free>
c001d6f9:	83 c4 10             	add    esp,0x10
c001d6fc:	b0 01                	mov    al,0x1
c001d6fe:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d704:	5b                   	pop    ebx
c001d705:	5e                   	pop    esi
c001d706:	5f                   	pop    edi
c001d707:	5d                   	pop    ebp
c001d708:	c3                   	ret    

c001d709 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d709:	56                   	push   esi
c001d70a:	31 d2                	xor    edx,edx
c001d70c:	53                   	push   ebx
c001d70d:	8b 1d 60 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031360
c001d713:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d717:	39 d3                	cmp    ebx,edx
c001d719:	7e 1b                	jle    c001d736 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d71b:	8b 04 95 80 15 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcea80]
c001d722:	39 c8                	cmp    eax,ecx
c001d724:	77 0d                	ja     c001d733 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d726:	8b 34 95 80 13 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcec80]
c001d72d:	01 c6                	add    esi,eax
c001d72f:	39 ce                	cmp    esi,ecx
c001d731:	77 05                	ja     c001d738 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d733:	42                   	inc    edx
c001d734:	eb e1                	jmp    c001d717 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d736:	31 c0                	xor    eax,eax
c001d738:	5b                   	pop    ebx
c001d739:	5e                   	pop    esi
c001d73a:	c3                   	ret    

c001d73b <Thr::getDriverNameFromAddress(unsigned long)>:
c001d73b:	53                   	push   ebx
c001d73c:	31 c0                	xor    eax,eax
c001d73e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d742:	8b 1d 60 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031360
c001d748:	39 c3                	cmp    ebx,eax
c001d74a:	7e 22                	jle    c001d76e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d74c:	8b 14 85 80 15 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcea80]
c001d753:	39 ca                	cmp    edx,ecx
c001d755:	77 14                	ja     c001d76b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d757:	03 14 85 80 13 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcec80]
c001d75e:	39 ca                	cmp    edx,ecx
c001d760:	76 09                	jbe    c001d76b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d762:	8b 04 85 80 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce880]
c001d769:	eb 05                	jmp    c001d770 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d76b:	40                   	inc    eax
c001d76c:	eb da                	jmp    c001d748 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d76e:	31 c0                	xor    eax,eax
c001d770:	5b                   	pop    ebx
c001d771:	c3                   	ret    

c001d772 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d772:	53                   	push   ebx
c001d773:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d777:	53                   	push   ebx
c001d778:	e8 8c ff ff ff       	call   c001d709 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d77d:	5a                   	pop    edx
c001d77e:	31 d2                	xor    edx,edx
c001d780:	85 c0                	test   eax,eax
c001d782:	74 04                	je     c001d788 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d784:	89 da                	mov    edx,ebx
c001d786:	29 c2                	sub    edx,eax
c001d788:	89 d0                	mov    eax,edx
c001d78a:	5b                   	pop    ebx
c001d78b:	c3                   	ret    

c001d78c <Thr::loadDLL(char const*, bool)>:
c001d78c:	55                   	push   ebp
c001d78d:	57                   	push   edi
c001d78e:	56                   	push   esi
c001d78f:	53                   	push   ebx
c001d790:	81 ec 34 01 00 00    	sub    esp,0x134
c001d796:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d79d:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d7a4:	56                   	push   esi
c001d7a5:	68 28 c3 02 c0       	push   0xc002c328
c001d7aa:	e8 bf 57 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001d7af:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d7b6:	e8 85 20 ff ff       	call   c000f840 <malloc>
c001d7bb:	83 c4 0c             	add    esp,0xc
c001d7be:	89 c3                	mov    ebx,eax
c001d7c0:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c001d7c6:	56                   	push   esi
c001d7c7:	50                   	push   eax
c001d7c8:	e8 f9 5c ff ff       	call   c00134c6 <File::File(char const*, Process*)>
c001d7cd:	83 c4 10             	add    esp,0x10
c001d7d0:	85 db                	test   ebx,ebx
c001d7d2:	75 3c                	jne    c001d810 <Thr::loadDLL(char const*, bool)+0x84>
c001d7d4:	89 e8                	mov    eax,ebp
c001d7d6:	84 c0                	test   al,al
c001d7d8:	0f 84 d5 01 00 00    	je     c001d9b3 <Thr::loadDLL(char const*, bool)+0x227>
c001d7de:	57                   	push   edi
c001d7df:	57                   	push   edi
c001d7e0:	68 39 c3 02 c0       	push   0xc002c339
c001d7e5:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d7e9:	57                   	push   edi
c001d7ea:	e8 45 30 fe ff       	call   c0000834 <strcpy>
c001d7ef:	58                   	pop    eax
c001d7f0:	5a                   	pop    edx
c001d7f1:	56                   	push   esi
c001d7f2:	57                   	push   edi
c001d7f3:	e8 7c 31 fe ff       	call   c0000974 <strcat>
c001d7f8:	59                   	pop    ecx
c001d7f9:	58                   	pop    eax
c001d7fa:	68 4c c3 02 c0       	push   0xc002c34c
c001d7ff:	57                   	push   edi
c001d800:	e8 6f 31 fe ff       	call   c0000974 <strcat>
c001d805:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d808:	e8 02 ce ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001d80d:	83 c4 10             	add    esp,0x10
c001d810:	51                   	push   ecx
c001d811:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d815:	50                   	push   eax
c001d816:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d81a:	50                   	push   eax
c001d81b:	53                   	push   ebx
c001d81c:	e8 b5 5f ff ff       	call   c00137d6 <File::stat(unsigned long long*, bool*)>
c001d821:	83 c4 10             	add    esp,0x10
c001d824:	85 db                	test   ebx,ebx
c001d826:	74 0c                	je     c001d834 <Thr::loadDLL(char const*, bool)+0xa8>
c001d828:	83 ec 0c             	sub    esp,0xc
c001d82b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d82d:	53                   	push   ebx
c001d82e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d831:	83 c4 10             	add    esp,0x10
c001d834:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d839:	75 0a                	jne    c001d845 <Thr::loadDLL(char const*, bool)+0xb9>
c001d83b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d83f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d843:	75 3c                	jne    c001d881 <Thr::loadDLL(char const*, bool)+0xf5>
c001d845:	89 e8                	mov    eax,ebp
c001d847:	84 c0                	test   al,al
c001d849:	0f 84 4c 01 00 00    	je     c001d99b <Thr::loadDLL(char const*, bool)+0x20f>
c001d84f:	51                   	push   ecx
c001d850:	51                   	push   ecx
c001d851:	68 39 c3 02 c0       	push   0xc002c339
c001d856:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d85a:	53                   	push   ebx
c001d85b:	e8 d4 2f fe ff       	call   c0000834 <strcpy>
c001d860:	5f                   	pop    edi
c001d861:	58                   	pop    eax
c001d862:	56                   	push   esi
c001d863:	53                   	push   ebx
c001d864:	e8 0b 31 fe ff       	call   c0000974 <strcat>
c001d869:	58                   	pop    eax
c001d86a:	5a                   	pop    edx
c001d86b:	68 4c c3 02 c0       	push   0xc002c34c
c001d870:	53                   	push   ebx
c001d871:	e8 fe 30 fe ff       	call   c0000974 <strcat>
c001d876:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d879:	e8 91 cd ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001d87e:	83 c4 10             	add    esp,0x10
c001d881:	e8 a0 45 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c001d886:	51                   	push   ecx
c001d887:	6a 03                	push   0x3
c001d889:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d88d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d891:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d897:	83 d3 00             	adc    ebx,0x0
c001d89a:	89 ca                	mov    edx,ecx
c001d89c:	89 d1                	mov    ecx,edx
c001d89e:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d8a2:	51                   	push   ecx
c001d8a3:	50                   	push   eax
c001d8a4:	e8 b9 4b ff ff       	call   c0012462 <VAS::allocatePages(int, int)>
c001d8a9:	5f                   	pop    edi
c001d8aa:	89 c3                	mov    ebx,eax
c001d8ac:	58                   	pop    eax
c001d8ad:	53                   	push   ebx
c001d8ae:	68 e4 a9 02 c0       	push   0xc002a9e4
c001d8b3:	e8 b6 56 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001d8b8:	89 34 24             	mov    DWORD PTR [esp],esi
c001d8bb:	e8 d4 2e fe ff       	call   c0000794 <strlen>
c001d8c0:	8b 3d 60 13 03 c0    	mov    edi,DWORD PTR ds:0xc0031360
c001d8c6:	40                   	inc    eax
c001d8c7:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8ca:	e8 71 1f ff ff       	call   c000f840 <malloc>
c001d8cf:	89 04 bd 80 17 03 c0 	mov    DWORD PTR [edi*4-0x3ffce880],eax
c001d8d6:	58                   	pop    eax
c001d8d7:	a1 60 13 03 c0       	mov    eax,ds:0xc0031360
c001d8dc:	5a                   	pop    edx
c001d8dd:	56                   	push   esi
c001d8de:	ff 34 85 80 17 03 c0 	push   DWORD PTR [eax*4-0x3ffce880]
c001d8e5:	e8 4a 2f fe ff       	call   c0000834 <strcpy>
c001d8ea:	a1 60 13 03 c0       	mov    eax,ds:0xc0031360
c001d8ef:	8d 50 01             	lea    edx,[eax+0x1]
c001d8f2:	89 1c 85 80 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffcea80],ebx
c001d8f9:	89 15 60 13 03 c0    	mov    DWORD PTR ds:0xc0031360,edx
c001d8ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d903:	83 c4 0c             	add    esp,0xc
c001d906:	89 14 85 80 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec80],edx
c001d90d:	6a 01                	push   0x1
c001d90f:	53                   	push   ebx
c001d910:	56                   	push   esi
c001d911:	e8 d7 f6 ff ff       	call   c001cfed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d916:	83 c4 10             	add    esp,0x10
c001d919:	89 c7                	mov    edi,eax
c001d91b:	84 c0                	test   al,al
c001d91d:	0f 85 8c 00 00 00    	jne    c001d9af <Thr::loadDLL(char const*, bool)+0x223>
c001d923:	89 e8                	mov    eax,ebp
c001d925:	84 c0                	test   al,al
c001d927:	74 76                	je     c001d99f <Thr::loadDLL(char const*, bool)+0x213>
c001d929:	83 ec 0c             	sub    esp,0xc
c001d92c:	68 4e c3 02 c0       	push   0xc002c34e
c001d931:	e8 d9 cc ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001d936:	83 c4 10             	add    esp,0x10
c001d939:	eb 64                	jmp    c001d99f <Thr::loadDLL(char const*, bool)+0x213>
c001d93b:	e8 e6 44 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c001d940:	89 f5                	mov    ebp,esi
c001d942:	c1 e5 0c             	shl    ebp,0xc
c001d945:	52                   	push   edx
c001d946:	01 dd                	add    ebp,ebx
c001d948:	52                   	push   edx
c001d949:	55                   	push   ebp
c001d94a:	50                   	push   eax
c001d94b:	e8 8c 46 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001d950:	83 c4 10             	add    esp,0x10
c001d953:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d956:	75 0c                	jne    c001d964 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d958:	83 ec 0c             	sub    esp,0xc
c001d95b:	55                   	push   ebp
c001d95c:	e8 f7 24 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001d961:	83 c4 10             	add    esp,0x10
c001d964:	46                   	inc    esi
c001d965:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d969:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d96d:	05 ff 0f 00 00       	add    eax,0xfff
c001d972:	83 d2 00             	adc    edx,0x0
c001d975:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d979:	c1 ea 0c             	shr    edx,0xc
c001d97c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d980:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d984:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d988:	ba 00 00 00 00       	mov    edx,0x0
c001d98d:	89 d0                	mov    eax,edx
c001d98f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d993:	72 a6                	jb     c001d93b <Thr::loadDLL(char const*, bool)+0x1af>
c001d995:	89 f8                	mov    eax,edi
c001d997:	84 c0                	test   al,al
c001d999:	75 18                	jne    c001d9b3 <Thr::loadDLL(char const*, bool)+0x227>
c001d99b:	31 db                	xor    ebx,ebx
c001d99d:	eb 14                	jmp    c001d9b3 <Thr::loadDLL(char const*, bool)+0x227>
c001d99f:	83 ec 0c             	sub    esp,0xc
c001d9a2:	68 6d c3 02 c0       	push   0xc002c36d
c001d9a7:	e8 63 cc ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001d9ac:	83 c4 10             	add    esp,0x10
c001d9af:	31 f6                	xor    esi,esi
c001d9b1:	eb b2                	jmp    c001d965 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d9b3:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d9b9:	89 d8                	mov    eax,ebx
c001d9bb:	5b                   	pop    ebx
c001d9bc:	5e                   	pop    esi
c001d9bd:	5f                   	pop    edi
c001d9be:	5d                   	pop    ebp
c001d9bf:	c3                   	ret    

c001d9c0 <Thr::executeDLL(unsigned long, void*)>:
c001d9c0:	56                   	push   esi
c001d9c1:	53                   	push   ebx
c001d9c2:	52                   	push   edx
c001d9c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d9cb:	85 db                	test   ebx,ebx
c001d9cd:	75 10                	jne    c001d9df <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d9cf:	83 ec 0c             	sub    esp,0xc
c001d9d2:	68 89 c3 02 c0       	push   0xc002c389
c001d9d7:	e8 33 cc ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001d9dc:	83 c4 10             	add    esp,0x10
c001d9df:	50                   	push   eax
c001d9e0:	50                   	push   eax
c001d9e1:	53                   	push   ebx
c001d9e2:	68 b3 c3 02 c0       	push   0xc002c3b3
c001d9e7:	e8 82 55 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001d9ec:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9f0:	89 d8                	mov    eax,ebx
c001d9f2:	83 c4 14             	add    esp,0x14
c001d9f5:	5b                   	pop    ebx
c001d9f6:	5e                   	pop    esi
c001d9f7:	ff e0                	jmp    eax
c001d9f9:	90                   	nop

c001d9fa <changeTSS>:
c001d9fa:	83 ec 14             	sub    esp,0x14
c001d9fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da02:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001da05:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001da0a:	c1 e2 15             	shl    edx,0x15
c001da0d:	29 d0                	sub    eax,edx
c001da0f:	50                   	push   eax
c001da10:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001da15:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da1b:	05 7c 11 00 00       	add    eax,0x117c
c001da20:	50                   	push   eax
c001da21:	e8 a4 3a ff ff       	call   c00114ca <TSS::setESP(unsigned long)>
c001da26:	83 c4 1c             	add    esp,0x1c
c001da29:	c3                   	ret    

c001da2a <Process::addArgs(char**)>:
c001da2a:	57                   	push   edi
c001da2b:	56                   	push   esi
c001da2c:	53                   	push   ebx
c001da2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da31:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da35:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da3f:	85 ff                	test   edi,edi
c001da41:	74 3d                	je     c001da80 <Process::addArgs(char**)+0x56>
c001da43:	8b 07                	mov    eax,DWORD PTR [edi]
c001da45:	85 c0                	test   eax,eax
c001da47:	74 37                	je     c001da80 <Process::addArgs(char**)+0x56>
c001da49:	31 db                	xor    ebx,ebx
c001da4b:	83 ec 0c             	sub    esp,0xc
c001da4e:	50                   	push   eax
c001da4f:	e8 40 2d fe ff       	call   c0000794 <strlen>
c001da54:	40                   	inc    eax
c001da55:	89 04 24             	mov    DWORD PTR [esp],eax
c001da58:	e8 e3 1d ff ff       	call   c000f840 <malloc>
c001da5d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da64:	5a                   	pop    edx
c001da65:	59                   	pop    ecx
c001da66:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da69:	43                   	inc    ebx
c001da6a:	50                   	push   eax
c001da6b:	e8 c4 2d fe ff       	call   c0000834 <strcpy>
c001da70:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da76:	83 c4 10             	add    esp,0x10
c001da79:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da7c:	85 c0                	test   eax,eax
c001da7e:	75 cb                	jne    c001da4b <Process::addArgs(char**)+0x21>
c001da80:	5b                   	pop    ebx
c001da81:	5e                   	pop    esi
c001da82:	5f                   	pop    edi
c001da83:	c3                   	ret    

c001da84 <Process::Process(char const*, Process*, char**)>:
c001da84:	56                   	push   esi
c001da85:	53                   	push   ebx
c001da86:	83 ec 14             	sub    esp,0x14
c001da89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da8d:	05 0c 02 00 00       	add    eax,0x20c
c001da92:	bb 07 00 00 00       	mov    ebx,0x7
c001da97:	89 c6                	mov    esi,eax
c001da99:	85 db                	test   ebx,ebx
c001da9b:	78 12                	js     c001daaf <Process::Process(char const*, Process*, char**)+0x2b>
c001da9d:	83 ec 0c             	sub    esp,0xc
c001daa0:	56                   	push   esi
c001daa1:	e8 1c b2 00 00       	call   c0028cc2 <ThreadControlBlock::ThreadControlBlock()>
c001daa6:	83 c4 10             	add    esp,0x10
c001daa9:	83 c6 63             	add    esi,0x63
c001daac:	4b                   	dec    ebx
c001daad:	eb ea                	jmp    c001da99 <Process::Process(char const*, Process*, char**)+0x15>
c001daaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dab3:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001daba:	83 ec 0c             	sub    esp,0xc
c001dabd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dac1:	e8 9a c9 ff ff       	call   c001a460 <Krnl::newProcessEnv(Process*)>
c001dac6:	83 c4 10             	add    esp,0x10
c001dac9:	89 c2                	mov    edx,eax
c001dacb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dacf:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dad5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dad9:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dae2:	a1 70 db 02 c0       	mov    eax,ds:0xc002db70
c001dae7:	8d 50 01             	lea    edx,[eax+0x1]
c001daea:	89 15 70 db 02 c0    	mov    DWORD PTR ds:0xc002db70,edx
c001daf0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001daf4:	89 02                	mov    DWORD PTR [edx],eax
c001daf6:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001dafe:	83 ec 0c             	sub    esp,0xc
c001db01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db05:	e8 36 1d ff ff       	call   c000f840 <malloc>
c001db0a:	83 c4 10             	add    esp,0x10
c001db0d:	89 c3                	mov    ebx,eax
c001db0f:	83 ec 08             	sub    esp,0x8
c001db12:	6a 00                	push   0x0
c001db14:	53                   	push   ebx
c001db15:	e8 f0 4c ff ff       	call   c001280a <VAS::VAS(bool)>
c001db1a:	83 c4 10             	add    esp,0x10
c001db1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db21:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db2b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db39:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db3d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db47:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db4d:	85 c0                	test   eax,eax
c001db4f:	74 42                	je     c001db93 <Process::Process(char const*, Process*, char**)+0x10f>
c001db51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db55:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db5b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db65:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db6f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db75:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db7f:	05 0c 01 00 00       	add    eax,0x10c
c001db84:	83 ec 08             	sub    esp,0x8
c001db87:	52                   	push   edx
c001db88:	50                   	push   eax
c001db89:	e8 a6 2c fe ff       	call   c0000834 <strcpy>
c001db8e:	83 c4 10             	add    esp,0x10
c001db91:	eb 63                	jmp    c001dbf6 <Process::Process(char const*, Process*, char**)+0x172>
c001db93:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001db9b:	83 ec 0c             	sub    esp,0xc
c001db9e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dba2:	e8 99 1c ff ff       	call   c000f840 <malloc>
c001dba7:	83 c4 10             	add    esp,0x10
c001dbaa:	89 c3                	mov    ebx,eax
c001dbac:	83 ec 08             	sub    esp,0x8
c001dbaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbb3:	53                   	push   ebx
c001dbb4:	e8 0f 36 ff ff       	call   c00111c8 <VgaText::VgaText(char const*)>
c001dbb9:	83 c4 10             	add    esp,0x10
c001dbbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbc0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dbc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbca:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dbd0:	83 ec 0c             	sub    esp,0xc
c001dbd3:	50                   	push   eax
c001dbd4:	e8 e2 29 ff ff       	call   c00105bb <addToTerminalCycle(VgaText*)>
c001dbd9:	83 c4 10             	add    esp,0x10
c001dbdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbe0:	05 0c 01 00 00       	add    eax,0x10c
c001dbe5:	83 ec 08             	sub    esp,0x8
c001dbe8:	68 d2 c3 02 c0       	push   0xc002c3d2
c001dbed:	50                   	push   eax
c001dbee:	e8 41 2c fe ff       	call   c0000834 <strcpy>
c001dbf3:	83 c4 10             	add    esp,0x10
c001dbf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbfa:	83 c0 0c             	add    eax,0xc
c001dbfd:	83 ec 08             	sub    esp,0x8
c001dc00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc04:	50                   	push   eax
c001dc05:	e8 2a 2c fe ff       	call   c0000834 <strcpy>
c001dc0a:	83 c4 10             	add    esp,0x10
c001dc0d:	83 ec 08             	sub    esp,0x8
c001dc10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc18:	e8 0d fe ff ff       	call   c001da2a <Process::addArgs(char**)>
c001dc1d:	83 c4 10             	add    esp,0x10
c001dc20:	83 ec 08             	sub    esp,0x8
c001dc23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc2b:	e8 87 ee ff ff       	call   c001cab7 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc30:	83 c4 10             	add    esp,0x10
c001dc33:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc37:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc3b:	83 f0 01             	xor    eax,0x1
c001dc3e:	88 c2                	mov    dl,al
c001dc40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc44:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc4a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc4f:	83 ec 08             	sub    esp,0x8
c001dc52:	50                   	push   eax
c001dc53:	68 d0 c4 02 c0       	push   0xc002c4d0
c001dc58:	e8 11 53 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001dc5d:	83 c4 10             	add    esp,0x10
c001dc60:	90                   	nop
c001dc61:	83 c4 14             	add    esp,0x14
c001dc64:	5b                   	pop    ebx
c001dc65:	5e                   	pop    esi
c001dc66:	c3                   	ret    
c001dc67:	90                   	nop

c001dc68 <Process::Process(bool, char const*, Process*, char**)>:
c001dc68:	56                   	push   esi
c001dc69:	53                   	push   ebx
c001dc6a:	83 ec 24             	sub    esp,0x24
c001dc6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc71:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc79:	05 0c 02 00 00       	add    eax,0x20c
c001dc7e:	bb 07 00 00 00       	mov    ebx,0x7
c001dc83:	89 c6                	mov    esi,eax
c001dc85:	85 db                	test   ebx,ebx
c001dc87:	78 12                	js     c001dc9b <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc89:	83 ec 0c             	sub    esp,0xc
c001dc8c:	56                   	push   esi
c001dc8d:	e8 30 b0 00 00       	call   c0028cc2 <ThreadControlBlock::ThreadControlBlock()>
c001dc92:	83 c4 10             	add    esp,0x10
c001dc95:	83 c6 63             	add    esi,0x63
c001dc98:	4b                   	dec    ebx
c001dc99:	eb ea                	jmp    c001dc85 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc9f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dca6:	83 ec 0c             	sub    esp,0xc
c001dca9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcad:	e8 ae c7 ff ff       	call   c001a460 <Krnl::newProcessEnv(Process*)>
c001dcb2:	83 c4 10             	add    esp,0x10
c001dcb5:	89 c2                	mov    edx,eax
c001dcb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcbb:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dcc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcc5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dcce:	a1 70 db 02 c0       	mov    eax,ds:0xc002db70
c001dcd3:	8d 50 01             	lea    edx,[eax+0x1]
c001dcd6:	89 15 70 db 02 c0    	mov    DWORD PTR ds:0xc002db70,edx
c001dcdc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dce0:	89 02                	mov    DWORD PTR [edx],eax
c001dce2:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dcea:	83 ec 0c             	sub    esp,0xc
c001dced:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dcf1:	e8 4a 1b ff ff       	call   c000f840 <malloc>
c001dcf6:	83 c4 10             	add    esp,0x10
c001dcf9:	89 c3                	mov    ebx,eax
c001dcfb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd00:	83 ec 08             	sub    esp,0x8
c001dd03:	50                   	push   eax
c001dd04:	53                   	push   ebx
c001dd05:	e8 00 4b ff ff       	call   c001280a <VAS::VAS(bool)>
c001dd0a:	83 c4 10             	add    esp,0x10
c001dd0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd11:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd1b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd29:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd2d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd37:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd3d:	85 c0                	test   eax,eax
c001dd3f:	74 42                	je     c001dd83 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd45:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd4b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd55:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd5f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd65:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd6f:	05 0c 01 00 00       	add    eax,0x10c
c001dd74:	83 ec 08             	sub    esp,0x8
c001dd77:	52                   	push   edx
c001dd78:	50                   	push   eax
c001dd79:	e8 b6 2a fe ff       	call   c0000834 <strcpy>
c001dd7e:	83 c4 10             	add    esp,0x10
c001dd81:	eb 63                	jmp    c001dde6 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd83:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dd8b:	83 ec 0c             	sub    esp,0xc
c001dd8e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd92:	e8 a9 1a ff ff       	call   c000f840 <malloc>
c001dd97:	83 c4 10             	add    esp,0x10
c001dd9a:	89 c3                	mov    ebx,eax
c001dd9c:	83 ec 08             	sub    esp,0x8
c001dd9f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dda3:	53                   	push   ebx
c001dda4:	e8 1f 34 ff ff       	call   c00111c8 <VgaText::VgaText(char const*)>
c001dda9:	83 c4 10             	add    esp,0x10
c001ddac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddb0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001ddb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddba:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ddc0:	83 ec 0c             	sub    esp,0xc
c001ddc3:	50                   	push   eax
c001ddc4:	e8 f2 27 ff ff       	call   c00105bb <addToTerminalCycle(VgaText*)>
c001ddc9:	83 c4 10             	add    esp,0x10
c001ddcc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddd0:	05 0c 01 00 00       	add    eax,0x10c
c001ddd5:	83 ec 08             	sub    esp,0x8
c001ddd8:	68 d2 c3 02 c0       	push   0xc002c3d2
c001dddd:	50                   	push   eax
c001ddde:	e8 51 2a fe ff       	call   c0000834 <strcpy>
c001dde3:	83 c4 10             	add    esp,0x10
c001dde6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddea:	83 c0 0c             	add    eax,0xc
c001dded:	83 ec 08             	sub    esp,0x8
c001ddf0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ddf4:	50                   	push   eax
c001ddf5:	e8 3a 2a fe ff       	call   c0000834 <strcpy>
c001ddfa:	83 c4 10             	add    esp,0x10
c001ddfd:	83 ec 08             	sub    esp,0x8
c001de00:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001de04:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de08:	e8 1d fc ff ff       	call   c001da2a <Process::addArgs(char**)>
c001de0d:	83 c4 10             	add    esp,0x10
c001de10:	90                   	nop
c001de11:	83 c4 24             	add    esp,0x24
c001de14:	5b                   	pop    ebx
c001de15:	5e                   	pop    esi
c001de16:	c3                   	ret    

c001de17 <disableIRQs()>:
c001de17:	fa                   	cli    
c001de18:	ff 05 2c 1b 03 c0    	inc    DWORD PTR ds:0xc0031b2c
c001de1e:	c3                   	ret    

c001de1f <getIRQNestingLevel()>:
c001de1f:	a1 2c 1b 03 c0       	mov    eax,ds:0xc0031b2c
c001de24:	c3                   	ret    

c001de25 <enableIRQs()>:
c001de25:	a1 2c 1b 03 c0       	mov    eax,ds:0xc0031b2c
c001de2a:	48                   	dec    eax
c001de2b:	a3 2c 1b 03 c0       	mov    ds:0xc0031b2c,eax
c001de30:	75 01                	jne    c001de33 <enableIRQs()+0xe>
c001de32:	fb                   	sti    
c001de33:	c3                   	ret    

c001de34 <lockScheduler()>:
c001de34:	eb e1                	jmp    c001de17 <disableIRQs()>

c001de36 <unlockScheduler()>:
c001de36:	eb ed                	jmp    c001de25 <enableIRQs()>

c001de38 <userModeEntryPoint(void*)>:
c001de38:	83 ec 0c             	sub    esp,0xc
c001de3b:	e8 f6 ff ff ff       	call   c001de36 <unlockScheduler()>
c001de40:	fb                   	sti    
c001de41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de46:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001de49:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001de4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de53:	83 c4 0c             	add    esp,0xc
c001de56:	e9 cf 24 fe ff       	jmp    c000032a <goToUsermode>

c001de5b <lockStuff()>:
c001de5b:	e8 b7 ff ff ff       	call   c001de17 <disableIRQs()>
c001de60:	ff 05 28 1b 03 c0    	inc    DWORD PTR ds:0xc0031b28
c001de66:	c3                   	ret    

c001de67 <taskStartupFunction>:
c001de67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de6c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de6f:	c3                   	ret    

c001de70 <updateTimeUsed()>:
c001de70:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001de75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de7b:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de82:	74 50                	je     c001ded4 <updateTimeUsed()+0x64>
c001de84:	57                   	push   edi
c001de85:	56                   	push   esi
c001de86:	53                   	push   ebx
c001de87:	0f 31                	rdtsc  
c001de89:	89 c1                	mov    ecx,eax
c001de8b:	a3 68 1b 03 c0       	mov    ds:0xc0031b68,eax
c001de90:	2b 0d 58 1b 03 c0    	sub    ecx,DWORD PTR ds:0xc0031b58
c001de96:	89 d3                	mov    ebx,edx
c001de98:	89 0d 60 1b 03 c0    	mov    DWORD PTR ds:0xc0031b60,ecx
c001de9e:	1b 1d 5c 1b 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031b5c
c001dea4:	a3 58 1b 03 c0       	mov    ds:0xc0031b58,eax
c001dea9:	89 1d 64 1b 03 c0    	mov    DWORD PTR ds:0xc0031b64,ebx
c001deaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001deb4:	89 15 6c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b6c,edx
c001deba:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001debd:	89 15 5c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b5c,edx
c001dec3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001dec6:	01 f1                	add    ecx,esi
c001dec8:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001decb:	11 fb                	adc    ebx,edi
c001decd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001ded0:	5b                   	pop    ebx
c001ded1:	5e                   	pop    esi
c001ded2:	5f                   	pop    edi
c001ded3:	c3                   	ret    
c001ded4:	c3                   	ret    

c001ded5 <switchToThread(ThreadControlBlock*)>:
c001ded5:	53                   	push   ebx
c001ded6:	83 ec 08             	sub    esp,0x8
c001ded9:	a1 28 1b 03 c0       	mov    eax,ds:0xc0031b28
c001dede:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dee2:	85 c0                	test   eax,eax
c001dee4:	75 30                	jne    c001df16 <switchToThread(ThreadControlBlock*)+0x41>
c001dee6:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001dee9:	3c ff                	cmp    al,0xff
c001deeb:	74 25                	je     c001df12 <switchToThread(ThreadControlBlock*)+0x3d>
c001deed:	0f b6 d0             	movzx  edx,al
c001def0:	b8 84 03 00 00       	mov    eax,0x384
c001def5:	29 d0                	sub    eax,edx
c001def7:	c1 e0 10             	shl    eax,0x10
c001defa:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001defd:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001df00:	e8 6b ff ff ff       	call   c001de70 <updateTimeUsed()>
c001df05:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001df09:	83 c4 08             	add    esp,0x8
c001df0c:	5b                   	pop    ebx
c001df0d:	e9 50 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001df12:	31 c0                	xor    eax,eax
c001df14:	eb e7                	jmp    c001defd <switchToThread(ThreadControlBlock*)+0x28>
c001df16:	c7 05 24 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b24,0x1
c001df20:	83 c4 08             	add    esp,0x8
c001df23:	5b                   	pop    ebx
c001df24:	c3                   	ret    
c001df25:	90                   	nop

c001df26 <Semaphore::Semaphore(int)>:
c001df26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df2e:	89 10                	mov    DWORD PTR [eax],edx
c001df30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df34:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df3f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df4a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001df51:	90                   	nop
c001df52:	c3                   	ret    
c001df53:	90                   	nop

c001df54 <Mutex::Mutex()>:
c001df54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df58:	6a 01                	push   0x1
c001df5a:	50                   	push   eax
c001df5b:	e8 c6 ff ff ff       	call   c001df26 <Semaphore::Semaphore(int)>
c001df60:	83 c4 08             	add    esp,0x8
c001df63:	90                   	nop
c001df64:	c3                   	ret    
c001df65:	90                   	nop

c001df66 <Process::createThread(void (*)(void*), void*, int)>:
c001df66:	55                   	push   ebp
c001df67:	31 c9                	xor    ecx,ecx
c001df69:	57                   	push   edi
c001df6a:	56                   	push   esi
c001df6b:	53                   	push   ebx
c001df6c:	83 ec 1c             	sub    esp,0x1c
c001df6f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df73:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df7a:	89 f2                	mov    edx,esi
c001df7c:	0f b7 c2             	movzx  eax,dx
c001df7f:	83 e2 01             	and    edx,0x1
c001df82:	74 14                	je     c001df98 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001df84:	d1 f8                	sar    eax,1
c001df86:	41                   	inc    ecx
c001df87:	89 c2                	mov    edx,eax
c001df89:	83 f9 10             	cmp    ecx,0x10
c001df8c:	75 ee                	jne    c001df7c <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df8e:	83 c4 1c             	add    esp,0x1c
c001df91:	31 c0                	xor    eax,eax
c001df93:	5b                   	pop    ebx
c001df94:	5e                   	pop    esi
c001df95:	5f                   	pop    edi
c001df96:	5d                   	pop    ebp
c001df97:	c3                   	ret    
c001df98:	83 ec 08             	sub    esp,0x8
c001df9b:	b8 01 00 00 00       	mov    eax,0x1
c001dfa0:	d3 e0                	shl    eax,cl
c001dfa2:	09 c6                	or     esi,eax
c001dfa4:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dfaa:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dfb1:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001dfb4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dfb7:	01 ce                	add    esi,ecx
c001dfb9:	89 f0                	mov    eax,esi
c001dfbb:	c1 e0 05             	shl    eax,0x5
c001dfbe:	01 c6                	add    esi,eax
c001dfc0:	8d 04 33             	lea    eax,[ebx+esi*1]
c001dfc3:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001dfc9:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dfcf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001dfd3:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dfd9:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001dfdf:	89 ca                	mov    edx,ecx
c001dfe1:	f7 da                	neg    edx
c001dfe3:	c1 e2 15             	shl    edx,0x15
c001dfe6:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001dfec:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001dff2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001dff6:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e000:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e006:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e00a:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001e010:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e01a:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e024:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001e02b:	50                   	push   eax
c001e02c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e030:	68 48 1b 03 c0       	push   0xc0031b48
c001e035:	e8 16 ab 00 00       	call   c0028b50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e03a:	83 c4 10             	add    esp,0x10
c001e03d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e041:	83 c4 1c             	add    esp,0x1c
c001e044:	5b                   	pop    ebx
c001e045:	5e                   	pop    esi
c001e046:	5f                   	pop    edi
c001e047:	5d                   	pop    ebp
c001e048:	c3                   	ret    
c001e049:	90                   	nop

c001e04a <Process::createUserThread()>:
c001e04a:	83 ec 0c             	sub    esp,0xc
c001e04d:	68 80 00 00 00       	push   0x80
c001e052:	6a 00                	push   0x0
c001e054:	68 38 de 01 c0       	push   0xc001de38
c001e059:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e05d:	e8 04 ff ff ff       	call   c001df66 <Process::createThread(void (*)(void*), void*, int)>
c001e062:	83 c4 1c             	add    esp,0x1c
c001e065:	c3                   	ret    

c001e066 <setupMultitasking(void (*)())>:
c001e066:	56                   	push   esi
c001e067:	53                   	push   ebx
c001e068:	53                   	push   ebx
c001e069:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e06d:	eb 10                	jmp    c001e07f <setupMultitasking(void (*)())+0x19>
c001e06f:	83 ec 0c             	sub    esp,0xc
c001e072:	68 48 1b 03 c0       	push   0xc0031b48
c001e077:	e8 26 aa 00 00       	call   c0028aa2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e07c:	83 c4 10             	add    esp,0x10
c001e07f:	83 ec 0c             	sub    esp,0xc
c001e082:	68 48 1b 03 c0       	push   0xc0031b48
c001e087:	e8 fa a9 00 00       	call   c0028a86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e08c:	83 c4 10             	add    esp,0x10
c001e08f:	84 c0                	test   al,al
c001e091:	74 dc                	je     c001e06f <setupMultitasking(void (*)())+0x9>
c001e093:	83 ec 0c             	sub    esp,0xc
c001e096:	68 3f 07 00 00       	push   0x73f
c001e09b:	e8 a0 17 ff ff       	call   c000f840 <malloc>
c001e0a0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e0a7:	89 c3                	mov    ebx,eax
c001e0a9:	6a 00                	push   0x0
c001e0ab:	68 d6 c3 02 c0       	push   0xc002c3d6
c001e0b0:	6a 01                	push   0x1
c001e0b2:	50                   	push   eax
c001e0b3:	e8 b0 fb ff ff       	call   c001dc68 <Process::Process(bool, char const*, Process*, char**)>
c001e0b8:	83 c4 18             	add    esp,0x18
c001e0bb:	89 1d 54 1b 03 c0    	mov    DWORD PTR ds:0xc0031b54,ebx
c001e0c1:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0c7:	68 f8 c4 02 c0       	push   0xc002c4f8
c001e0cc:	e8 9d 4e ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001e0d1:	58                   	pop    eax
c001e0d2:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0d8:	e8 60 2c ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c001e0dd:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e0e5:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e0eb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e0ee:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e0f8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e0fe:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e104:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e10e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e118:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e122:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e128:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e12e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e138:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e13e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e148:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e14e:	5a                   	pop    edx
c001e14f:	59                   	pop    ecx
c001e150:	68 d2 c3 02 c0       	push   0xc002c3d2
c001e155:	50                   	push   eax
c001e156:	e8 d9 26 fe ff       	call   c0000834 <strcpy>
c001e15b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e162:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e166:	83 c4 14             	add    esp,0x14
c001e169:	5b                   	pop    ebx
c001e16a:	5e                   	pop    esi
c001e16b:	e9 e4 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e170 <schedule()>:
c001e170:	a1 28 1b 03 c0       	mov    eax,ds:0xc0031b28
c001e175:	85 c0                	test   eax,eax
c001e177:	74 0b                	je     c001e184 <schedule()+0x14>
c001e179:	c7 05 24 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b24,0x1
c001e183:	c3                   	ret    
c001e184:	53                   	push   ebx
c001e185:	83 ec 14             	sub    esp,0x14
c001e188:	68 48 1b 03 c0       	push   0xc0031b48
c001e18d:	e8 f4 a8 00 00       	call   c0028a86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e192:	83 c4 10             	add    esp,0x10
c001e195:	84 c0                	test   al,al
c001e197:	75 38                	jne    c001e1d1 <schedule()+0x61>
c001e199:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e19e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1a1:	4a                   	dec    edx
c001e1a2:	74 32                	je     c001e1d6 <schedule()+0x66>
c001e1a4:	83 ec 0c             	sub    esp,0xc
c001e1a7:	68 48 1b 03 c0       	push   0xc0031b48
c001e1ac:	e8 cd a8 00 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1b1:	c7 04 24 48 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b48
c001e1b8:	89 c3                	mov    ebx,eax
c001e1ba:	e8 e3 a8 00 00       	call   c0028aa2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1bf:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e1c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1c9:	e8 07 fd ff ff       	call   c001ded5 <switchToThread(ThreadControlBlock*)>
c001e1ce:	83 c4 10             	add    esp,0x10
c001e1d1:	83 c4 08             	add    esp,0x8
c001e1d4:	5b                   	pop    ebx
c001e1d5:	c3                   	ret    
c001e1d6:	83 ec 08             	sub    esp,0x8
c001e1d9:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e1e0:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e1e6:	68 48 1b 03 c0       	push   0xc0031b48
c001e1eb:	e8 60 a9 00 00       	call   c0028b50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1f0:	83 c4 10             	add    esp,0x10
c001e1f3:	eb af                	jmp    c001e1a4 <schedule()+0x34>

c001e1f5 <unlockStuff()>:
c001e1f5:	a1 28 1b 03 c0       	mov    eax,ds:0xc0031b28
c001e1fa:	48                   	dec    eax
c001e1fb:	a3 28 1b 03 c0       	mov    ds:0xc0031b28,eax
c001e200:	75 09                	jne    c001e20b <unlockStuff()+0x16>
c001e202:	a1 24 1b 03 c0       	mov    eax,ds:0xc0031b24
c001e207:	85 c0                	test   eax,eax
c001e209:	75 05                	jne    c001e210 <unlockStuff()+0x1b>
c001e20b:	e9 15 fc ff ff       	jmp    c001de25 <enableIRQs()>
c001e210:	83 ec 0c             	sub    esp,0xc
c001e213:	c7 05 24 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b24,0x0
c001e21d:	e8 4e ff ff ff       	call   c001e170 <schedule()>
c001e222:	83 c4 0c             	add    esp,0xc
c001e225:	e9 fb fb ff ff       	jmp    c001de25 <enableIRQs()>

c001e22a <Semaphore::tryAcquire()>:
c001e22a:	83 ec 0c             	sub    esp,0xc
c001e22d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e231:	e8 25 fc ff ff       	call   c001de5b <lockStuff()>
c001e236:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e239:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e23b:	7c 0b                	jl     c001e248 <Semaphore::tryAcquire()+0x1e>
c001e23d:	e8 b3 ff ff ff       	call   c001e1f5 <unlockStuff()>
c001e242:	31 c0                	xor    eax,eax
c001e244:	83 c4 0c             	add    esp,0xc
c001e247:	c3                   	ret    
c001e248:	42                   	inc    edx
c001e249:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e24c:	e8 a4 ff ff ff       	call   c001e1f5 <unlockStuff()>
c001e251:	b0 01                	mov    al,0x1
c001e253:	83 c4 0c             	add    esp,0xc
c001e256:	c3                   	ret    
c001e257:	90                   	nop

c001e258 <Semaphore::assertLocked(char const*)>:
c001e258:	83 ec 0c             	sub    esp,0xc
c001e25b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e25f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e263:	e8 f3 fb ff ff       	call   c001de5b <lockStuff()>
c001e268:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e26a:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e26d:	7c 05                	jl     c001e274 <Semaphore::assertLocked(char const*)+0x1c>
c001e26f:	83 c4 0c             	add    esp,0xc
c001e272:	eb 81                	jmp    c001e1f5 <unlockStuff()>
c001e274:	83 ec 0c             	sub    esp,0xc
c001e277:	52                   	push   edx
c001e278:	e8 92 c3 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001e27d:	83 c4 10             	add    esp,0x10
c001e280:	83 c4 0c             	add    esp,0xc
c001e283:	e9 6d ff ff ff       	jmp    c001e1f5 <unlockStuff()>

c001e288 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e288:	83 ec 0c             	sub    esp,0xc
c001e28b:	e8 8f fb ff ff       	call   c001de1f <getIRQNestingLevel()>
c001e290:	83 ec 08             	sub    esp,0x8
c001e293:	50                   	push   eax
c001e294:	68 2c c5 02 c0       	push   0xc002c52c
c001e299:	e8 d0 4c ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001e29e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2a7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2aa:	e8 c1 fe ff ff       	call   c001e170 <schedule()>
c001e2af:	e8 82 fb ff ff       	call   c001de36 <unlockScheduler()>
c001e2b4:	e8 66 fb ff ff       	call   c001de1f <getIRQNestingLevel()>
c001e2b9:	5a                   	pop    edx
c001e2ba:	59                   	pop    ecx
c001e2bb:	50                   	push   eax
c001e2bc:	68 60 c5 02 c0       	push   0xc002c560
c001e2c1:	e8 a8 4c ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001e2c6:	83 c4 1c             	add    esp,0x1c
c001e2c9:	c3                   	ret    

c001e2ca <blockTask(TaskState)>:
c001e2ca:	83 ec 0c             	sub    esp,0xc
c001e2cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2d1:	e8 5e fb ff ff       	call   c001de34 <lockScheduler()>
c001e2d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2db:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2de:	e8 8d fe ff ff       	call   c001e170 <schedule()>
c001e2e3:	83 c4 0c             	add    esp,0xc
c001e2e6:	e9 4b fb ff ff       	jmp    c001de36 <unlockScheduler()>

c001e2eb <waitTask(int, int*, int)>:
c001e2eb:	83 ec 18             	sub    esp,0x18
c001e2ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e2f7:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e2fa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e303:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e306:	6a 07                	push   0x7
c001e308:	e8 bd ff ff ff       	call   c001e2ca <blockTask(TaskState)>
c001e30d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e312:	83 c4 10             	add    esp,0x10
c001e315:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e318:	85 d2                	test   edx,edx
c001e31a:	74 0a                	je     c001e326 <waitTask(int, int*, int)+0x3b>
c001e31c:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e31f:	89 02                	mov    DWORD PTR [edx],eax
c001e321:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e326:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e329:	83 c4 0c             	add    esp,0xc
c001e32c:	c3                   	ret    

c001e32d <nanoSleepUntil(unsigned long long)>:
c001e32d:	83 ec 0c             	sub    esp,0xc
c001e330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e334:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e338:	3b 05 70 ec 02 c0    	cmp    eax,DWORD PTR ds:0xc002ec70
c001e33e:	89 d1                	mov    ecx,edx
c001e340:	1b 0d 74 ec 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ec74
c001e346:	73 04                	jae    c001e34c <nanoSleepUntil(unsigned long long)+0x1f>
c001e348:	83 c4 0c             	add    esp,0xc
c001e34b:	c3                   	ret    
c001e34c:	e8 0a fb ff ff       	call   c001de5b <lockStuff()>
c001e351:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e357:	83 ec 08             	sub    esp,0x8
c001e35a:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e35d:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e360:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e366:	68 3c 1b 03 c0       	push   0xc0031b3c
c001e36b:	e8 e0 a7 00 00       	call   c0028b50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e370:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e377:	e8 4e ff ff ff       	call   c001e2ca <blockTask(TaskState)>
c001e37c:	83 c4 1c             	add    esp,0x1c
c001e37f:	e9 71 fe ff ff       	jmp    c001e1f5 <unlockStuff()>

c001e384 <nanoSleep(unsigned long long)>:
c001e384:	a1 70 ec 02 c0       	mov    eax,ds:0xc002ec70
c001e389:	8b 15 74 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec74
c001e38f:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e393:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e397:	eb 94                	jmp    c001e32d <nanoSleepUntil(unsigned long long)>

c001e399 <sleep(unsigned long long)>:
c001e399:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e3a1:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e3a6:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e3aa:	01 ca                	add    edx,ecx
c001e3ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e3b0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e3b4:	eb ce                	jmp    c001e384 <nanoSleep(unsigned long long)>

c001e3b6 <Semaphore::acquire()>:
c001e3b6:	83 ec 0c             	sub    esp,0xc
c001e3b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3bd:	e8 99 fa ff ff       	call   c001de5b <lockStuff()>
c001e3c2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e3c5:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e3c7:	7d 0c                	jge    c001e3d5 <Semaphore::acquire()+0x1f>
c001e3c9:	42                   	inc    edx
c001e3ca:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e3cd:	83 c4 0c             	add    esp,0xc
c001e3d0:	e9 20 fe ff ff       	jmp    c001e1f5 <unlockStuff()>
c001e3d5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3db:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e3e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e3e5:	85 d2                	test   edx,edx
c001e3e7:	74 2a                	je     c001e413 <Semaphore::acquire()+0x5d>
c001e3e9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e3ec:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3f2:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e3f5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3fb:	83 ec 0c             	sub    esp,0xc
c001e3fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e401:	6a 05                	push   0x5
c001e403:	e8 c2 fe ff ff       	call   c001e2ca <blockTask(TaskState)>
c001e408:	83 c4 10             	add    esp,0x10
c001e40b:	83 c4 0c             	add    esp,0xc
c001e40e:	e9 e2 fd ff ff       	jmp    c001e1f5 <unlockStuff()>
c001e413:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e419:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e41c:	eb d7                	jmp    c001e3f5 <Semaphore::acquire()+0x3f>

c001e41e <taskReturned>:
c001e41e:	83 ec 18             	sub    esp,0x18
c001e421:	68 94 c5 02 c0       	push   0xc002c594
c001e426:	e8 e4 c1 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001e42b:	83 c4 10             	add    esp,0x10
c001e42e:	83 ec 0c             	sub    esp,0xc
c001e431:	6a 02                	push   0x2
c001e433:	e8 92 fe ff ff       	call   c001e2ca <blockTask(TaskState)>
c001e438:	e8 f7 f9 ff ff       	call   c001de34 <lockScheduler()>
c001e43d:	e8 2e fd ff ff       	call   c001e170 <schedule()>
c001e442:	e8 ef f9 ff ff       	call   c001de36 <unlockScheduler()>
c001e447:	83 c4 10             	add    esp,0x10
c001e44a:	eb e2                	jmp    c001e42e <taskReturned+0x10>

c001e44c <unblockTask(ThreadControlBlock*)>:
c001e44c:	53                   	push   ebx
c001e44d:	83 ec 08             	sub    esp,0x8
c001e450:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e454:	e8 db f9 ff ff       	call   c001de34 <lockScheduler()>
c001e459:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e45c:	85 c0                	test   eax,eax
c001e45e:	74 5c                	je     c001e4bc <unblockTask(ThreadControlBlock*)+0x70>
c001e460:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e463:	48                   	dec    eax
c001e464:	74 31                	je     c001e497 <unblockTask(ThreadControlBlock*)+0x4b>
c001e466:	83 ec 0c             	sub    esp,0xc
c001e469:	68 48 1b 03 c0       	push   0xc0031b48
c001e46e:	e8 0b a6 00 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e473:	83 c4 10             	add    esp,0x10
c001e476:	85 c0                	test   eax,eax
c001e478:	75 17                	jne    c001e491 <unblockTask(ThreadControlBlock*)+0x45>
c001e47a:	eb 65                	jmp    c001e4e1 <unblockTask(ThreadControlBlock*)+0x95>
c001e47c:	83 ec 08             	sub    esp,0x8
c001e47f:	50                   	push   eax
c001e480:	68 48 1b 03 c0       	push   0xc0031b48
c001e485:	e8 ce a8 00 00       	call   c0028d58 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e48a:	83 c4 10             	add    esp,0x10
c001e48d:	85 c0                	test   eax,eax
c001e48f:	74 50                	je     c001e4e1 <unblockTask(ThreadControlBlock*)+0x95>
c001e491:	39 c3                	cmp    ebx,eax
c001e493:	75 e7                	jne    c001e47c <unblockTask(ThreadControlBlock*)+0x30>
c001e495:	eb 1c                	jmp    c001e4b3 <unblockTask(ThreadControlBlock*)+0x67>
c001e497:	83 ec 0c             	sub    esp,0xc
c001e49a:	68 84 c6 02 c0       	push   0xc002c684
c001e49f:	e8 ca 4a ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001e4a4:	c7 04 24 10 c6 02 c0 	mov    DWORD PTR [esp],0xc002c610
c001e4ab:	e8 be 4a ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001e4b0:	83 c4 10             	add    esp,0x10
c001e4b3:	83 c4 08             	add    esp,0x8
c001e4b6:	5b                   	pop    ebx
c001e4b7:	e9 7a f9 ff ff       	jmp    c001de36 <unlockScheduler()>
c001e4bc:	83 ec 0c             	sub    esp,0xc
c001e4bf:	68 c8 c5 02 c0       	push   0xc002c5c8
c001e4c4:	e8 a5 4a ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001e4c9:	c7 04 24 10 c6 02 c0 	mov    DWORD PTR [esp],0xc002c610
c001e4d0:	e8 99 4a ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001e4d5:	83 c4 10             	add    esp,0x10
c001e4d8:	83 c4 08             	add    esp,0x8
c001e4db:	5b                   	pop    ebx
c001e4dc:	e9 55 f9 ff ff       	jmp    c001de36 <unlockScheduler()>
c001e4e1:	83 ec 08             	sub    esp,0x8
c001e4e4:	53                   	push   ebx
c001e4e5:	68 48 1b 03 c0       	push   0xc0031b48
c001e4ea:	e8 61 a6 00 00       	call   c0028b50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4ef:	83 c4 10             	add    esp,0x10
c001e4f2:	83 c4 08             	add    esp,0x8
c001e4f5:	5b                   	pop    ebx
c001e4f6:	e9 3b f9 ff ff       	jmp    c001de36 <unlockScheduler()>

c001e4fb <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e4fb:	55                   	push   ebp
c001e4fc:	57                   	push   edi
c001e4fd:	56                   	push   esi
c001e4fe:	53                   	push   ebx
c001e4ff:	83 ec 1c             	sub    esp,0x1c
c001e502:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e506:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e509:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e50f:	85 ff                	test   edi,edi
c001e511:	7e 20                	jle    c001e533 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e513:	31 f6                	xor    esi,esi
c001e515:	83 ec 0c             	sub    esp,0xc
c001e518:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e51f:	46                   	inc    esi
c001e520:	e8 2b 13 ff ff       	call   c000f850 <free>
c001e525:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e528:	83 c4 10             	add    esp,0x10
c001e52b:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e531:	7f e2                	jg     c001e515 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e533:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e53d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e542:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e545:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e548:	d3 c0                	rol    eax,cl
c001e54a:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e551:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e554:	89 f7                	mov    edi,esi
c001e556:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e55e:	0f 85 74 01 00 00    	jne    c001e6d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e564:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e56a:	85 ed                	test   ebp,ebp
c001e56c:	74 1b                	je     c001e589 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e56e:	83 ec 0c             	sub    esp,0xc
c001e571:	55                   	push   ebp
c001e572:	e8 05 be ff ff       	call   c001a37c <EnvVarContainer::~EnvVarContainer()>
c001e577:	59                   	pop    ecx
c001e578:	5e                   	pop    esi
c001e579:	6a 0c                	push   0xc
c001e57b:	55                   	push   ebp
c001e57c:	e8 0d 49 ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c001e581:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e584:	83 c4 10             	add    esp,0x10
c001e587:	89 f7                	mov    edi,esi
c001e589:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e58f:	85 c0                	test   eax,eax
c001e591:	0f 84 aa 00 00 00    	je     c001e641 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e597:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e59a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e59e:	31 c9                	xor    ecx,ecx
c001e5a0:	eb 10                	jmp    c001e5b2 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e5a2:	41                   	inc    ecx
c001e5a3:	83 f9 10             	cmp    ecx,0x10
c001e5a6:	0f 84 95 00 00 00    	je     c001e641 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e5ac:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5b2:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e5b9:	d3 fa                	sar    edx,cl
c001e5bb:	83 e2 01             	and    edx,0x1
c001e5be:	74 e2                	je     c001e5a2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5c0:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e5c3:	01 ca                	add    edx,ecx
c001e5c5:	89 d5                	mov    ebp,edx
c001e5c7:	c1 e5 05             	shl    ebp,0x5
c001e5ca:	01 ea                	add    edx,ebp
c001e5cc:	01 d0                	add    eax,edx
c001e5ce:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e5d4:	83 fd 07             	cmp    ebp,0x7
c001e5d7:	75 c9                	jne    c001e5a2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5d9:	05 40 02 00 00       	add    eax,0x240
c001e5de:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e5e1:	83 fd ff             	cmp    ebp,0xffffffff
c001e5e4:	0f 8c 08 01 00 00    	jl     c001e6f2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e5ea:	0f 84 b9 01 00 00    	je     c001e7a9 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e5f0:	85 ed                	test   ebp,ebp
c001e5f2:	0f 84 a0 01 00 00    	je     c001e798 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e5f8:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e5fa:	75 a6                	jne    c001e5a2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5fc:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e602:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e606:	01 d0                	add    eax,edx
c001e608:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e60c:	83 ec 0c             	sub    esp,0xc
c001e60f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e615:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e618:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e61e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e625:	50                   	push   eax
c001e626:	e8 21 fe ff ff       	call   c001e44c <unblockTask(ThreadControlBlock*)>
c001e62b:	83 c4 10             	add    esp,0x10
c001e62e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e631:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e635:	89 f7                	mov    edi,esi
c001e637:	41                   	inc    ecx
c001e638:	83 f9 10             	cmp    ecx,0x10
c001e63b:	0f 85 6b ff ff ff    	jne    c001e5ac <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e641:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e647:	85 c0                	test   eax,eax
c001e649:	74 5d                	je     c001e6a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e64b:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e651:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e657:	74 4f                	je     c001e6a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e659:	83 ec 0c             	sub    esp,0xc
c001e65c:	68 48 1b 03 c0       	push   0xc0031b48
c001e661:	e8 18 a4 00 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e666:	c7 04 24 48 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b48
c001e66d:	89 c7                	mov    edi,eax
c001e66f:	e8 12 a4 00 00       	call   c0028a86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e674:	83 c4 10             	add    esp,0x10
c001e677:	84 c0                	test   al,al
c001e679:	0f 84 e4 00 00 00    	je     c001e763 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e67f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e682:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e688:	85 d2                	test   edx,edx
c001e68a:	74 0f                	je     c001e69b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e68c:	83 ec 0c             	sub    esp,0xc
c001e68f:	8b 02                	mov    eax,DWORD PTR [edx]
c001e691:	52                   	push   edx
c001e692:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e695:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e698:	83 c4 10             	add    esp,0x10
c001e69b:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e6a5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e6a8:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e6ae:	85 db                	test   ebx,ebx
c001e6b0:	74 16                	je     c001e6c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e6b2:	83 ec 0c             	sub    esp,0xc
c001e6b5:	53                   	push   ebx
c001e6b6:	e8 3b 3b ff ff       	call   c00121f6 <VAS::~VAS()>
c001e6bb:	58                   	pop    eax
c001e6bc:	5a                   	pop    edx
c001e6bd:	6a 10                	push   0x10
c001e6bf:	53                   	push   ebx
c001e6c0:	e8 c9 47 ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c001e6c5:	83 c4 10             	add    esp,0x10
c001e6c8:	83 ec 0c             	sub    esp,0xc
c001e6cb:	68 dd c3 02 c0       	push   0xc002c3dd
c001e6d0:	e8 99 48 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001e6d5:	83 c4 10             	add    esp,0x10
c001e6d8:	83 ec 08             	sub    esp,0x8
c001e6db:	68 3f 07 00 00       	push   0x73f
c001e6e0:	68 eb c3 02 c0       	push   0xc002c3eb
c001e6e5:	e8 84 48 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001e6ea:	83 c4 2c             	add    esp,0x2c
c001e6ed:	5b                   	pop    ebx
c001e6ee:	5e                   	pop    esi
c001e6ef:	5f                   	pop    edi
c001e6f0:	5d                   	pop    ebp
c001e6f1:	c3                   	ret    
c001e6f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6f6:	83 ec 0c             	sub    esp,0xc
c001e6f9:	68 c8 c6 02 c0       	push   0xc002c6c8
c001e6fe:	e8 0c bf ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001e703:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e706:	83 c4 10             	add    esp,0x10
c001e709:	89 f7                	mov    edi,esi
c001e70b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e70f:	e9 8e fe ff ff       	jmp    c001e5a2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e714:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e71a:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e720:	75 1c                	jne    c001e73e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e722:	83 ec 0c             	sub    esp,0xc
c001e725:	68 30 c7 02 c0       	push   0xc002c730
c001e72a:	e8 3f 48 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001e72f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e736:	e8 8f fb ff ff       	call   c001e2ca <blockTask(TaskState)>
c001e73b:	83 c4 10             	add    esp,0x10
c001e73e:	83 ec 08             	sub    esp,0x8
c001e741:	56                   	push   esi
c001e742:	68 48 1b 03 c0       	push   0xc0031b48
c001e747:	e8 04 a4 00 00       	call   c0028b50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e74c:	c7 04 24 48 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b48
c001e753:	e8 26 a3 00 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e758:	83 c4 10             	add    esp,0x10
c001e75b:	39 f8                	cmp    eax,edi
c001e75d:	0f 84 1c ff ff ff    	je     c001e67f <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e763:	83 ec 0c             	sub    esp,0xc
c001e766:	68 48 1b 03 c0       	push   0xc0031b48
c001e76b:	e8 0e a3 00 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e770:	c7 04 24 48 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b48
c001e777:	89 c6                	mov    esi,eax
c001e779:	e8 24 a3 00 00       	call   c0028aa2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e77e:	83 c4 10             	add    esp,0x10
c001e781:	39 f3                	cmp    ebx,esi
c001e783:	74 b9                	je     c001e73e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e785:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e788:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e78b:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e791:	75 ab                	jne    c001e73e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e793:	e9 7c ff ff ff       	jmp    c001e714 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e798:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e79c:	83 ec 0c             	sub    esp,0xc
c001e79f:	68 fc c6 02 c0       	push   0xc002c6fc
c001e7a4:	e9 55 ff ff ff       	jmp    c001e6fe <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e7a9:	8b 36                	mov    esi,DWORD PTR [esi]
c001e7ab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7af:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e7b2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7b5:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e7bb:	01 d7                	add    edi,edx
c001e7bd:	89 f8                	mov    eax,edi
c001e7bf:	e9 44 fe ff ff       	jmp    c001e608 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e7c4 <cleanerTaskFunction(void*)>:
c001e7c4:	53                   	push   ebx
c001e7c5:	83 ec 08             	sub    esp,0x8
c001e7c8:	e8 69 f6 ff ff       	call   c001de36 <unlockScheduler()>
c001e7cd:	e8 62 f6 ff ff       	call   c001de34 <lockScheduler()>
c001e7d2:	80 3d 0c 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b0c,0x0
c001e7d9:	0f 85 8e 00 00 00    	jne    c001e86d <cleanerTaskFunction(void*)+0xa9>
c001e7df:	83 ec 0c             	sub    esp,0xc
c001e7e2:	6a 02                	push   0x2
c001e7e4:	e8 9f fa ff ff       	call   c001e288 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e7e9:	83 c4 10             	add    esp,0x10
c001e7ec:	c6 05 0c 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b0c,0x0
c001e7f3:	e8 63 f6 ff ff       	call   c001de5b <lockStuff()>
c001e7f8:	e8 37 f6 ff ff       	call   c001de34 <lockScheduler()>
c001e7fd:	83 ec 0c             	sub    esp,0xc
c001e800:	68 30 1b 03 c0       	push   0xc0031b30
c001e805:	e8 7c a2 00 00       	call   c0028a86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e80a:	83 c4 10             	add    esp,0x10
c001e80d:	84 c0                	test   al,al
c001e80f:	75 40                	jne    c001e851 <cleanerTaskFunction(void*)+0x8d>
c001e811:	83 ec 0c             	sub    esp,0xc
c001e814:	68 30 1b 03 c0       	push   0xc0031b30
c001e819:	e8 60 a2 00 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e81e:	c7 04 24 30 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b30
c001e825:	89 c3                	mov    ebx,eax
c001e827:	e8 76 a2 00 00       	call   c0028aa2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e82c:	c7 04 24 01 c4 02 c0 	mov    DWORD PTR [esp],0xc002c401
c001e833:	e8 36 47 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001e838:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e83b:	e8 bb fc ff ff       	call   c001e4fb <cleanupTerminatedTask(ThreadControlBlock*)>
c001e840:	c7 04 24 1a c4 02 c0 	mov    DWORD PTR [esp],0xc002c41a
c001e847:	e8 22 47 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001e84c:	83 c4 10             	add    esp,0x10
c001e84f:	eb ac                	jmp    c001e7fd <cleanerTaskFunction(void*)+0x39>
c001e851:	e8 e0 f5 ff ff       	call   c001de36 <unlockScheduler()>
c001e856:	e8 9a f9 ff ff       	call   c001e1f5 <unlockStuff()>
c001e85b:	e8 d4 f5 ff ff       	call   c001de34 <lockScheduler()>
c001e860:	80 3d 0c 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b0c,0x0
c001e867:	0f 84 72 ff ff ff    	je     c001e7df <cleanerTaskFunction(void*)+0x1b>
c001e86d:	e8 c4 f5 ff ff       	call   c001de36 <unlockScheduler()>
c001e872:	e9 75 ff ff ff       	jmp    c001e7ec <cleanerTaskFunction(void*)+0x28>

c001e877 <terminateTask(int)>:
c001e877:	83 ec 14             	sub    esp,0x14
c001e87a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e87f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e882:	83 c0 0c             	add    eax,0xc
c001e885:	50                   	push   eax
c001e886:	68 58 c7 02 c0       	push   0xc002c758
c001e88b:	e8 de 46 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001e890:	e8 c6 f5 ff ff       	call   c001de5b <lockStuff()>
c001e895:	e8 9a f5 ff ff       	call   c001de34 <lockScheduler()>
c001e89a:	c7 04 24 2d c4 02 c0 	mov    DWORD PTR [esp],0xc002c42d
c001e8a1:	e8 c8 46 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001e8a6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e8aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8af:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e8b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8b7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e8ba:	5a                   	pop    edx
c001e8bb:	59                   	pop    ecx
c001e8bc:	50                   	push   eax
c001e8bd:	68 30 1b 03 c0       	push   0xc0031b30
c001e8c2:	e8 89 a2 00 00       	call   c0028b50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e8c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8cc:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e8d3:	c7 04 24 47 c4 02 c0 	mov    DWORD PTR [esp],0xc002c447
c001e8da:	e8 8f 46 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001e8df:	83 c4 10             	add    esp,0x10
c001e8e2:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c001e8e7:	85 c0                	test   eax,eax
c001e8e9:	74 5a                	je     c001e945 <terminateTask(int)+0xce>
c001e8eb:	83 ec 0c             	sub    esp,0xc
c001e8ee:	68 61 c4 02 c0       	push   0xc002c461
c001e8f3:	e8 76 46 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001e8f8:	58                   	pop    eax
c001e8f9:	c6 05 0c 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b0c,0x1
c001e900:	ff 35 08 1b 03 c0    	push   DWORD PTR ds:0xc0031b08
c001e906:	e8 41 fb ff ff       	call   c001e44c <unblockTask(ThreadControlBlock*)>
c001e90b:	c7 04 24 7b c4 02 c0 	mov    DWORD PTR [esp],0xc002c47b
c001e912:	e8 57 46 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001e917:	83 c4 10             	add    esp,0x10
c001e91a:	e8 17 f5 ff ff       	call   c001de36 <unlockScheduler()>
c001e91f:	e8 d1 f8 ff ff       	call   c001e1f5 <unlockStuff()>
c001e924:	83 ec 0c             	sub    esp,0xc
c001e927:	68 b3 c4 02 c0       	push   0xc002c4b3
c001e92c:	e8 3d 46 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001e931:	83 c4 10             	add    esp,0x10
c001e934:	e8 fb f4 ff ff       	call   c001de34 <lockScheduler()>
c001e939:	e8 32 f8 ff ff       	call   c001e170 <schedule()>
c001e93e:	e8 f3 f4 ff ff       	call   c001de36 <unlockScheduler()>
c001e943:	eb ef                	jmp    c001e934 <terminateTask(int)+0xbd>
c001e945:	83 ec 0c             	sub    esp,0xc
c001e948:	68 95 c4 02 c0       	push   0xc002c495
c001e94d:	e8 1c 46 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001e952:	83 c4 10             	add    esp,0x10
c001e955:	eb c3                	jmp    c001e91a <terminateTask(int)+0xa3>

c001e957 <Thr::terminateFromIRQ(int)>:
c001e957:	83 ec 18             	sub    esp,0x18
c001e95a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e95e:	e8 14 ff ff ff       	call   c001e877 <terminateTask(int)>
c001e963:	90                   	nop

c001e964 <Semaphore::release()>:
c001e964:	83 ec 0c             	sub    esp,0xc
c001e967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96b:	e8 eb f4 ff ff       	call   c001de5b <lockStuff()>
c001e970:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e973:	85 d2                	test   edx,edx
c001e975:	74 1a                	je     c001e991 <Semaphore::release()+0x2d>
c001e977:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e97a:	83 ec 0c             	sub    esp,0xc
c001e97d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e980:	52                   	push   edx
c001e981:	e8 c6 fa ff ff       	call   c001e44c <unblockTask(ThreadControlBlock*)>
c001e986:	83 c4 10             	add    esp,0x10
c001e989:	83 c4 0c             	add    esp,0xc
c001e98c:	e9 64 f8 ff ff       	jmp    c001e1f5 <unlockStuff()>
c001e991:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e994:	83 c4 0c             	add    esp,0xc
c001e997:	e9 59 f8 ff ff       	jmp    c001e1f5 <unlockStuff()>

c001e99c <__static_initialization_and_destruction_0(int, int)>:
c001e99c:	83 ec 0c             	sub    esp,0xc
c001e99f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e9a4:	0f 85 88 00 00 00    	jne    c001ea32 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9aa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e9b2:	75 7e                	jne    c001ea32 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9b4:	83 ec 0c             	sub    esp,0xc
c001e9b7:	68 48 1b 03 c0       	push   0xc0031b48
c001e9bc:	e8 3f a3 00 00       	call   c0028d00 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9c1:	83 c4 10             	add    esp,0x10
c001e9c4:	83 ec 04             	sub    esp,0x4
c001e9c7:	68 10 d5 02 c0       	push   0xc002d510
c001e9cc:	68 48 1b 03 c0       	push   0xc0031b48
c001e9d1:	68 c0 8c 02 c0       	push   0xc0028cc0
c001e9d6:	e8 2d 44 ff ff       	call   c0012e08 <__cxa_atexit>
c001e9db:	83 c4 10             	add    esp,0x10
c001e9de:	83 ec 0c             	sub    esp,0xc
c001e9e1:	68 3c 1b 03 c0       	push   0xc0031b3c
c001e9e6:	e8 15 a3 00 00       	call   c0028d00 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9eb:	83 c4 10             	add    esp,0x10
c001e9ee:	83 ec 04             	sub    esp,0x4
c001e9f1:	68 10 d5 02 c0       	push   0xc002d510
c001e9f6:	68 3c 1b 03 c0       	push   0xc0031b3c
c001e9fb:	68 c0 8c 02 c0       	push   0xc0028cc0
c001ea00:	e8 03 44 ff ff       	call   c0012e08 <__cxa_atexit>
c001ea05:	83 c4 10             	add    esp,0x10
c001ea08:	83 ec 0c             	sub    esp,0xc
c001ea0b:	68 30 1b 03 c0       	push   0xc0031b30
c001ea10:	e8 eb a2 00 00       	call   c0028d00 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea15:	83 c4 10             	add    esp,0x10
c001ea18:	83 ec 04             	sub    esp,0x4
c001ea1b:	68 10 d5 02 c0       	push   0xc002d510
c001ea20:	68 30 1b 03 c0       	push   0xc0031b30
c001ea25:	68 c0 8c 02 c0       	push   0xc0028cc0
c001ea2a:	e8 d9 43 ff ff       	call   c0012e08 <__cxa_atexit>
c001ea2f:	83 c4 10             	add    esp,0x10
c001ea32:	90                   	nop
c001ea33:	83 c4 0c             	add    esp,0xc
c001ea36:	c3                   	ret    

c001ea37 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ea37:	83 ec 0c             	sub    esp,0xc
c001ea3a:	83 ec 08             	sub    esp,0x8
c001ea3d:	68 ff ff 00 00       	push   0xffff
c001ea42:	6a 01                	push   0x1
c001ea44:	e8 53 ff ff ff       	call   c001e99c <__static_initialization_and_destruction_0(int, int)>
c001ea49:	83 c4 10             	add    esp,0x10
c001ea4c:	83 c4 0c             	add    esp,0xc
c001ea4f:	c3                   	ret    

c001ea50 <Vm::inbv(unsigned short)>:
c001ea50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea54:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea59:	75 06                	jne    c001ea61 <Vm::inbv(unsigned short)+0x11>
c001ea5b:	a0 8c 1b 03 c0       	mov    al,ds:0xc0031b8c
c001ea60:	c3                   	ret    
c001ea61:	ec                   	in     al,dx
c001ea62:	c3                   	ret    

c001ea63 <Vm::outbv(unsigned short, unsigned char)>:
c001ea63:	53                   	push   ebx
c001ea64:	83 ec 08             	sub    esp,0x8
c001ea67:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea6b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea6f:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea74:	75 38                	jne    c001eaae <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea76:	0f b6 c3             	movzx  eax,bl
c001ea79:	51                   	push   ecx
c001ea7a:	51                   	push   ecx
c001ea7b:	50                   	push   eax
c001ea7c:	68 77 c7 02 c0       	push   0xc002c777
c001ea81:	e8 e8 44 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001ea86:	8b 15 8c 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b8c
c001ea8c:	83 c4 10             	add    esp,0x10
c001ea8f:	8d 42 01             	lea    eax,[edx+0x1]
c001ea92:	88 9a a0 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce460],bl
c001ea98:	a3 8c 1b 03 c0       	mov    ds:0xc0031b8c,eax
c001ea9d:	83 f8 20             	cmp    eax,0x20
c001eaa0:	75 0f                	jne    c001eab1 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eaa2:	c7 05 8c 1b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031b8c,0x1f
c001eaac:	eb 03                	jmp    c001eab1 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eaae:	88 d8                	mov    al,bl
c001eab0:	ee                   	out    dx,al
c001eab1:	83 c4 08             	add    esp,0x8
c001eab4:	5b                   	pop    ebx
c001eab5:	c3                   	ret    

c001eab6 <Vm::realToLinear(unsigned short, unsigned short)>:
c001eab6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eabb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eac0:	c1 e0 04             	shl    eax,0x4
c001eac3:	01 d0                	add    eax,edx
c001eac5:	c3                   	ret    

c001eac6 <Vm::getSegment(unsigned int)>:
c001eac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaca:	c1 e8 10             	shr    eax,0x10
c001eacd:	c3                   	ret    

c001eace <Vm::getOffset(unsigned int)>:
c001eace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ead2:	c3                   	ret    

c001ead3 <Vm::mainloop2()>:
c001ead3:	83 ec 0c             	sub    esp,0xc
c001ead6:	e8 59 f3 ff ff       	call   c001de34 <lockScheduler()>
c001eadb:	83 ec 0c             	sub    esp,0xc
c001eade:	c6 05 85 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b85,0x1
c001eae5:	6a 02                	push   0x2
c001eae7:	e8 9c f7 ff ff       	call   c001e288 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eaec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eaf1:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eaf5:	52                   	push   edx
c001eaf6:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eafa:	52                   	push   edx
c001eafb:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eaff:	52                   	push   edx
c001eb00:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eb04:	50                   	push   eax
c001eb05:	e8 f0 17 fe ff       	call   c00002fa <goToVM86>
c001eb0a:	83 c4 2c             	add    esp,0x2c
c001eb0d:	c3                   	ret    

c001eb0e <Vm::mainVm8086Loop(void*)>:
c001eb0e:	83 ec 0c             	sub    esp,0xc
c001eb11:	e8 20 f3 ff ff       	call   c001de36 <unlockScheduler()>
c001eb16:	83 c4 0c             	add    esp,0xc
c001eb19:	eb b8                	jmp    c001ead3 <Vm::mainloop2()>

c001eb1b <Vm::mainloop3(unsigned long)>:
c001eb1b:	53                   	push   ebx
c001eb1c:	83 ec 08             	sub    esp,0x8
c001eb1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb23:	e8 0c f3 ff ff       	call   c001de34 <lockScheduler()>
c001eb28:	83 ec 0c             	sub    esp,0xc
c001eb2b:	89 1d 80 1b 03 c0    	mov    DWORD PTR ds:0xc0031b80,ebx
c001eb31:	6a 02                	push   0x2
c001eb33:	c6 05 84 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b84,0x1
c001eb3a:	e8 49 f7 ff ff       	call   c001e288 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb3f:	83 c4 18             	add    esp,0x18
c001eb42:	5b                   	pop    ebx
c001eb43:	eb 8e                	jmp    c001ead3 <Vm::mainloop2()>

c001eb45 <Vm::initialise8086()>:
c001eb45:	83 ec 0c             	sub    esp,0xc
c001eb48:	68 80 00 00 00       	push   0x80
c001eb4d:	6a 00                	push   0x0
c001eb4f:	68 0e eb 01 c0       	push   0xc001eb0e
c001eb54:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c001eb5a:	e8 07 f4 ff ff       	call   c001df66 <Process::createThread(void (*)(void*), void*, int)>
c001eb5f:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb66:	a3 88 1b 03 c0       	mov    ds:0xc0031b88,eax
c001eb6b:	68 00 01 00 00       	push   0x100
c001eb70:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001eb75:	6a 00                	push   0x0
c001eb77:	6a 00                	push   0x0
c001eb79:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eb7f:	e8 d2 3a ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eb84:	83 c4 2c             	add    esp,0x2c
c001eb87:	c3                   	ret    

c001eb88 <Vm::finish8086()>:
c001eb88:	53                   	push   ebx
c001eb89:	83 ec 08             	sub    esp,0x8
c001eb8c:	e8 a3 f2 ff ff       	call   c001de34 <lockScheduler()>
c001eb91:	80 3d 84 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b84,0x0
c001eb98:	75 0c                	jne    c001eba6 <Vm::finish8086()+0x1e>
c001eb9a:	e8 d1 f5 ff ff       	call   c001e170 <schedule()>
c001eb9f:	e8 92 f2 ff ff       	call   c001de36 <unlockScheduler()>
c001eba4:	eb e6                	jmp    c001eb8c <Vm::finish8086()+0x4>
c001eba6:	83 ec 0c             	sub    esp,0xc
c001eba9:	8b 1d 80 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b80
c001ebaf:	ff 35 88 1b 03 c0    	push   DWORD PTR ds:0xc0031b88
c001ebb5:	c6 05 84 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b84,0x0
c001ebbc:	e8 8b f8 ff ff       	call   c001e44c <unblockTask(ThreadControlBlock*)>
c001ebc1:	e8 70 f2 ff ff       	call   c001de36 <unlockScheduler()>
c001ebc6:	89 d8                	mov    eax,ebx
c001ebc8:	83 c4 18             	add    esp,0x18
c001ebcb:	5b                   	pop    ebx
c001ebcc:	c3                   	ret    

c001ebcd <Vm::getOutput8086(unsigned char*)>:
c001ebcd:	83 ec 10             	sub    esp,0x10
c001ebd0:	ff 35 8c 1b 03 c0    	push   DWORD PTR ds:0xc0031b8c
c001ebd6:	68 a0 1b 03 c0       	push   0xc0031ba0
c001ebdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebdf:	e8 60 1b fe ff       	call   c0000744 <memcpy>
c001ebe4:	a1 8c 1b 03 c0       	mov    eax,ds:0xc0031b8c
c001ebe9:	c7 05 8c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b8c,0x0
c001ebf3:	83 c4 1c             	add    esp,0x1c
c001ebf6:	c3                   	ret    

c001ebf7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ebf7:	55                   	push   ebp
c001ebf8:	57                   	push   edi
c001ebf9:	56                   	push   esi
c001ebfa:	53                   	push   ebx
c001ebfb:	83 ec 2c             	sub    esp,0x2c
c001ebfe:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ec02:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ec06:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ec0a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ec0e:	e8 21 f2 ff ff       	call   c001de34 <lockScheduler()>
c001ec13:	a0 85 1b 03 c0       	mov    al,ds:0xc0031b85
c001ec18:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec1c:	84 c0                	test   al,al
c001ec1e:	75 0c                	jne    c001ec2c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ec20:	e8 4b f5 ff ff       	call   c001e170 <schedule()>
c001ec25:	e8 0c f2 ff ff       	call   c001de36 <unlockScheduler()>
c001ec2a:	eb e2                	jmp    c001ec0e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ec2c:	a1 88 1b 03 c0       	mov    eax,ds:0xc0031b88
c001ec31:	c7 05 8c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b8c,0x0
c001ec3b:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ec3f:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ec43:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ec47:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ec4b:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ec4f:	50                   	push   eax
c001ec50:	6a 20                	push   0x20
c001ec52:	6a 00                	push   0x0
c001ec54:	68 a0 1b 03 c0       	push   0xc0031ba0
c001ec59:	e8 1a 1b fe ff       	call   c0000778 <memset>
c001ec5e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec65:	e8 d6 0b ff ff       	call   c000f840 <malloc>
c001ec6a:	83 c4 0c             	add    esp,0xc
c001ec6d:	89 c7                	mov    edi,eax
c001ec6f:	ff 35 54 1b 03 c0    	push   DWORD PTR ds:0xc0031b54
c001ec75:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec79:	50                   	push   eax
c001ec7a:	e8 47 48 ff ff       	call   c00134c6 <File::File(char const*, Process*)>
c001ec7f:	83 c4 10             	add    esp,0x10
c001ec82:	85 ff                	test   edi,edi
c001ec84:	75 0a                	jne    c001ec90 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ec86:	83 ec 0c             	sub    esp,0xc
c001ec89:	68 93 c7 02 c0       	push   0xc002c793
c001ec8e:	eb 27                	jmp    c001ecb7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ec90:	50                   	push   eax
c001ec91:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ec95:	50                   	push   eax
c001ec96:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec9a:	50                   	push   eax
c001ec9b:	57                   	push   edi
c001ec9c:	e8 35 4b ff ff       	call   c00137d6 <File::stat(unsigned long long*, bool*)>
c001eca1:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001eca6:	83 c4 10             	add    esp,0x10
c001eca9:	89 e8                	mov    eax,ebp
c001ecab:	84 c0                	test   al,al
c001ecad:	74 19                	je     c001ecc8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ecaf:	83 ec 0c             	sub    esp,0xc
c001ecb2:	68 a7 c7 02 c0       	push   0xc002c7a7
c001ecb7:	e8 53 b9 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001ecbc:	31 ed                	xor    ebp,ebp
c001ecbe:	e8 73 f1 ff ff       	call   c001de36 <unlockScheduler()>
c001ecc3:	83 c4 10             	add    esp,0x10
c001ecc6:	eb 75                	jmp    c001ed3d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ecc8:	50                   	push   eax
c001ecc9:	50                   	push   eax
c001ecca:	6a 01                	push   0x1
c001eccc:	57                   	push   edi
c001eccd:	e8 58 48 ff ff       	call   c001352a <File::open(FileOpenMode)>
c001ecd2:	83 c4 10             	add    esp,0x10
c001ecd5:	85 c0                	test   eax,eax
c001ecd7:	74 17                	je     c001ecf0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ecd9:	83 ec 0c             	sub    esp,0xc
c001ecdc:	68 c0 c7 02 c0       	push   0xc002c7c0
c001ece1:	e8 29 b9 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001ece6:	e8 4b f1 ff ff       	call   c001de36 <unlockScheduler()>
c001eceb:	83 c4 10             	add    esp,0x10
c001ecee:	eb 4d                	jmp    c001ed3d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ecf0:	0f b7 f6             	movzx  esi,si
c001ecf3:	50                   	push   eax
c001ecf4:	0f b7 db             	movzx  ebx,bx
c001ecf7:	50                   	push   eax
c001ecf8:	56                   	push   esi
c001ecf9:	53                   	push   ebx
c001ecfa:	e8 b7 fd ff ff       	call   c001eab6 <Vm::realToLinear(unsigned short, unsigned short)>
c001ecff:	5a                   	pop    edx
c001ed00:	8b 17                	mov    edx,DWORD PTR [edi]
c001ed02:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ed06:	51                   	push   ecx
c001ed07:	50                   	push   eax
c001ed08:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed0c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed10:	57                   	push   edi
c001ed11:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ed14:	83 c4 14             	add    esp,0x14
c001ed17:	57                   	push   edi
c001ed18:	e8 6b 48 ff ff       	call   c0013588 <File::close()>
c001ed1d:	c6 05 85 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b85,0x0
c001ed24:	e8 0d f1 ff ff       	call   c001de36 <unlockScheduler()>
c001ed29:	59                   	pop    ecx
c001ed2a:	ff 35 88 1b 03 c0    	push   DWORD PTR ds:0xc0031b88
c001ed30:	e8 17 f7 ff ff       	call   c001e44c <unblockTask(ThreadControlBlock*)>
c001ed35:	83 c4 10             	add    esp,0x10
c001ed38:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ed3d:	83 c4 2c             	add    esp,0x2c
c001ed40:	89 e8                	mov    eax,ebp
c001ed42:	5b                   	pop    ebx
c001ed43:	5e                   	pop    esi
c001ed44:	5f                   	pop    edi
c001ed45:	5d                   	pop    ebp
c001ed46:	c3                   	ret    

c001ed47 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ed47:	57                   	push   edi
c001ed48:	56                   	push   esi
c001ed49:	53                   	push   ebx
c001ed4a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed52:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed56:	83 e8 06             	sub    eax,0x6
c001ed59:	0f b7 c0             	movzx  eax,ax
c001ed5c:	50                   	push   eax
c001ed5d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed62:	50                   	push   eax
c001ed63:	e8 4e fd ff ff       	call   c001eab6 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed68:	5a                   	pop    edx
c001ed69:	5e                   	pop    esi
c001ed6a:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed6d:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed70:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed76:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed79:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed7c:	83 c2 02             	add    edx,0x2
c001ed7f:	66 89 10             	mov    WORD PTR [eax],dx
c001ed82:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed85:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed89:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed8c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ed90:	89 d6                	mov    esi,edx
c001ed92:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ed98:	66 81 e6 ff fd       	and    si,0xfdff
c001ed9d:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001eda1:	74 07                	je     c001edaa <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001eda3:	89 d6                	mov    esi,edx
c001eda5:	66 81 ce 00 02       	or     si,0x200
c001edaa:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001edae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edb3:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001edb7:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001edbf:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001edc2:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001edca:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001edcd:	5b                   	pop    ebx
c001edce:	5e                   	pop    esi
c001edcf:	5f                   	pop    edi
c001edd0:	c3                   	ret    

c001edd1 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001edd1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edd6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eddb:	c1 e0 04             	shl    eax,0x4
c001edde:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ede1:	c3                   	ret    

c001ede2 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ede2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ede7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edec:	c1 e0 04             	shl    eax,0x4
c001edef:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001edf3:	c3                   	ret    

c001edf4 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001edf4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edf9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edfe:	c1 e0 04             	shl    eax,0x4
c001ee01:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ee04:	c3                   	ret    

c001ee05 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ee05:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee0a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee0f:	c1 e0 04             	shl    eax,0x4
c001ee12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee16:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ee19:	c3                   	ret    

c001ee1a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ee1a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee1f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee24:	c1 e0 04             	shl    eax,0x4
c001ee27:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee2b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ee2f:	c3                   	ret    

c001ee30 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ee30:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee35:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee3a:	c1 e0 04             	shl    eax,0x4
c001ee3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee41:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ee44:	c3                   	ret    

c001ee45 <Vm::faultHandler(regs*)>:
c001ee45:	55                   	push   ebp
c001ee46:	57                   	push   edi
c001ee47:	56                   	push   esi
c001ee48:	53                   	push   ebx
c001ee49:	83 ec 1c             	sub    esp,0x1c
c001ee4c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee50:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ee53:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ee56:	0f b7 c1             	movzx  eax,cx
c001ee59:	50                   	push   eax
c001ee5a:	0f b7 c3             	movzx  eax,bx
c001ee5d:	c1 e3 04             	shl    ebx,0x4
c001ee60:	50                   	push   eax
c001ee61:	e8 50 fc ff ff       	call   c001eab6 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee66:	5a                   	pop    edx
c001ee67:	89 c5                	mov    ebp,eax
c001ee69:	5e                   	pop    esi
c001ee6a:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee6e:	50                   	push   eax
c001ee6f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee73:	50                   	push   eax
c001ee74:	e8 3d fc ff ff       	call   c001eab6 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee79:	01 cb                	add    ebx,ecx
c001ee7b:	89 c6                	mov    esi,eax
c001ee7d:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ee81:	50                   	push   eax
c001ee82:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee86:	50                   	push   eax
c001ee87:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee8b:	50                   	push   eax
c001ee8c:	55                   	push   ebp
c001ee8d:	53                   	push   ebx
c001ee8e:	b3 06                	mov    bl,0x6
c001ee90:	68 d9 c7 02 c0       	push   0xc002c7d9
c001ee95:	e8 d4 40 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001ee9a:	83 c4 20             	add    esp,0x20
c001ee9d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001eea2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001eea7:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eeab:	3c 9d                	cmp    al,0x9d
c001eead:	0f 84 d7 02 00 00    	je     c001f18a <Vm::faultHandler(regs*)+0x345>
c001eeb3:	0f 87 a3 00 00 00    	ja     c001ef5c <Vm::faultHandler(regs*)+0x117>
c001eeb9:	3c 66                	cmp    al,0x66
c001eebb:	0f 84 15 02 00 00    	je     c001f0d6 <Vm::faultHandler(regs*)+0x291>
c001eec1:	77 5f                	ja     c001ef22 <Vm::faultHandler(regs*)+0xdd>
c001eec3:	3c 36                	cmp    al,0x36
c001eec5:	0f 84 f1 01 00 00    	je     c001f0bc <Vm::faultHandler(regs*)+0x277>
c001eecb:	77 28                	ja     c001eef5 <Vm::faultHandler(regs*)+0xb0>
c001eecd:	3c 26                	cmp    al,0x26
c001eecf:	0f 84 99 01 00 00    	je     c001f06e <Vm::faultHandler(regs*)+0x229>
c001eed5:	3c 2e                	cmp    al,0x2e
c001eed7:	0f 85 3b 07 00 00    	jne    c001f618 <Vm::faultHandler(regs*)+0x7d3>
c001eedd:	83 ec 0c             	sub    esp,0xc
c001eee0:	31 db                	xor    ebx,ebx
c001eee2:	68 ee c7 02 c0       	push   0xc002c7ee
c001eee7:	e8 82 40 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001eeec:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eeef:	83 c4 10             	add    esp,0x10
c001eef2:	45                   	inc    ebp
c001eef3:	eb b2                	jmp    c001eea7 <Vm::faultHandler(regs*)+0x62>
c001eef5:	3c 64                	cmp    al,0x64
c001eef7:	0f 84 8b 01 00 00    	je     c001f088 <Vm::faultHandler(regs*)+0x243>
c001eefd:	0f 87 9f 01 00 00    	ja     c001f0a2 <Vm::faultHandler(regs*)+0x25d>
c001ef03:	3c 3e                	cmp    al,0x3e
c001ef05:	0f 85 0d 07 00 00    	jne    c001f618 <Vm::faultHandler(regs*)+0x7d3>
c001ef0b:	83 ec 0c             	sub    esp,0xc
c001ef0e:	b3 01                	mov    bl,0x1
c001ef10:	68 f2 c7 02 c0       	push   0xc002c7f2
c001ef15:	e8 54 40 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001ef1a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef1d:	83 c4 10             	add    esp,0x10
c001ef20:	eb d0                	jmp    c001eef2 <Vm::faultHandler(regs*)+0xad>
c001ef22:	3c 6d                	cmp    al,0x6d
c001ef24:	0f 84 af 03 00 00    	je     c001f2d9 <Vm::faultHandler(regs*)+0x494>
c001ef2a:	77 15                	ja     c001ef41 <Vm::faultHandler(regs*)+0xfc>
c001ef2c:	3c 67                	cmp    al,0x67
c001ef2e:	0f 84 bf 01 00 00    	je     c001f0f3 <Vm::faultHandler(regs*)+0x2ae>
c001ef34:	3c 6c                	cmp    al,0x6c
c001ef36:	0f 84 3f 03 00 00    	je     c001f27b <Vm::faultHandler(regs*)+0x436>
c001ef3c:	e9 d7 06 00 00       	jmp    c001f618 <Vm::faultHandler(regs*)+0x7d3>
c001ef41:	3c 6f                	cmp    al,0x6f
c001ef43:	0f 84 a4 04 00 00    	je     c001f3ed <Vm::faultHandler(regs*)+0x5a8>
c001ef49:	0f 82 11 04 00 00    	jb     c001f360 <Vm::faultHandler(regs*)+0x51b>
c001ef4f:	3c 9c                	cmp    al,0x9c
c001ef51:	0f 84 ba 01 00 00    	je     c001f111 <Vm::faultHandler(regs*)+0x2cc>
c001ef57:	e9 bc 06 00 00       	jmp    c001f618 <Vm::faultHandler(regs*)+0x7d3>
c001ef5c:	3c ec                	cmp    al,0xec
c001ef5e:	0f 84 24 06 00 00    	je     c001f588 <Vm::faultHandler(regs*)+0x743>
c001ef64:	0f 87 93 00 00 00    	ja     c001effd <Vm::faultHandler(regs*)+0x1b8>
c001ef6a:	3c e4                	cmp    al,0xe4
c001ef6c:	0f 84 5c 05 00 00    	je     c001f4ce <Vm::faultHandler(regs*)+0x689>
c001ef72:	77 6a                	ja     c001efde <Vm::faultHandler(regs*)+0x199>
c001ef74:	3c cd                	cmp    al,0xcd
c001ef76:	0f 84 7e 02 00 00    	je     c001f1fa <Vm::faultHandler(regs*)+0x3b5>
c001ef7c:	3c cf                	cmp    al,0xcf
c001ef7e:	0f 85 94 06 00 00    	jne    c001f618 <Vm::faultHandler(regs*)+0x7d3>
c001ef84:	83 ec 0c             	sub    esp,0xc
c001ef87:	68 36 c8 02 c0       	push   0xc002c836
c001ef8c:	e8 dd 3f ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001ef91:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ef94:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ef97:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ef9b:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ef9e:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001efa2:	0d 00 02 02 00       	or     eax,0x20200
c001efa7:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001efaa:	56                   	push   esi
c001efab:	53                   	push   ebx
c001efac:	52                   	push   edx
c001efad:	68 3c c8 02 c0       	push   0xc002c83c
c001efb2:	e8 b7 3f ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001efb7:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001efbb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efc1:	66 c1 e8 09          	shr    ax,0x9
c001efc5:	83 e0 01             	and    eax,0x1
c001efc8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001efcb:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001efce:	83 c0 06             	add    eax,0x6
c001efd1:	25 ff ff 00 00       	and    eax,0xffff
c001efd6:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001efd9:	e9 95 02 00 00       	jmp    c001f273 <Vm::faultHandler(regs*)+0x42e>
c001efde:	3c e6                	cmp    al,0xe6
c001efe0:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001efe4:	0f 84 4e 05 00 00    	je     c001f538 <Vm::faultHandler(regs*)+0x6f3>
c001efea:	0f 82 0a 05 00 00    	jb     c001f4fa <Vm::faultHandler(regs*)+0x6b5>
c001eff0:	3c e7                	cmp    al,0xe7
c001eff2:	0f 84 69 05 00 00    	je     c001f561 <Vm::faultHandler(regs*)+0x71c>
c001eff8:	e9 1b 06 00 00       	jmp    c001f618 <Vm::faultHandler(regs*)+0x7d3>
c001effd:	3c ef                	cmp    al,0xef
c001efff:	0f 84 e6 05 00 00    	je     c001f5eb <Vm::faultHandler(regs*)+0x7a6>
c001f005:	77 37                	ja     c001f03e <Vm::faultHandler(regs*)+0x1f9>
c001f007:	3c ed                	cmp    al,0xed
c001f009:	0f 84 a3 05 00 00    	je     c001f5b2 <Vm::faultHandler(regs*)+0x76d>
c001f00f:	3c ee                	cmp    al,0xee
c001f011:	0f 85 01 06 00 00    	jne    c001f618 <Vm::faultHandler(regs*)+0x7d3>
c001f017:	52                   	push   edx
c001f018:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f01b:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f01e:	68 d7 c8 02 c0       	push   0xc002c8d7
c001f023:	e8 46 3f ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f028:	59                   	pop    ecx
c001f029:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f02d:	5b                   	pop    ebx
c001f02e:	50                   	push   eax
c001f02f:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f033:	50                   	push   eax
c001f034:	e8 2a fa ff ff       	call   c001ea63 <Vm::outbv(unsigned short, unsigned char)>
c001f039:	e9 a5 05 00 00       	jmp    c001f5e3 <Vm::faultHandler(regs*)+0x79e>
c001f03e:	3c fa                	cmp    al,0xfa
c001f040:	0f 84 f7 01 00 00    	je     c001f23d <Vm::faultHandler(regs*)+0x3f8>
c001f046:	3c fb                	cmp    al,0xfb
c001f048:	0f 84 0a 02 00 00    	je     c001f258 <Vm::faultHandler(regs*)+0x413>
c001f04e:	3c f3                	cmp    al,0xf3
c001f050:	0f 85 c2 05 00 00    	jne    c001f618 <Vm::faultHandler(regs*)+0x7d3>
c001f056:	83 ec 0c             	sub    esp,0xc
c001f059:	68 0f c8 02 c0       	push   0xc002c80f
c001f05e:	e8 0b 3f ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f063:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f066:	83 c4 10             	add    esp,0x10
c001f069:	e9 84 fe ff ff       	jmp    c001eef2 <Vm::faultHandler(regs*)+0xad>
c001f06e:	83 ec 0c             	sub    esp,0xc
c001f071:	b3 02                	mov    bl,0x2
c001f073:	68 ea c7 02 c0       	push   0xc002c7ea
c001f078:	e8 f1 3e ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f07d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f080:	83 c4 10             	add    esp,0x10
c001f083:	e9 6a fe ff ff       	jmp    c001eef2 <Vm::faultHandler(regs*)+0xad>
c001f088:	83 ec 0c             	sub    esp,0xc
c001f08b:	b3 03                	mov    bl,0x3
c001f08d:	68 f6 c7 02 c0       	push   0xc002c7f6
c001f092:	e8 d7 3e ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f097:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f09a:	83 c4 10             	add    esp,0x10
c001f09d:	e9 50 fe ff ff       	jmp    c001eef2 <Vm::faultHandler(regs*)+0xad>
c001f0a2:	83 ec 0c             	sub    esp,0xc
c001f0a5:	b3 04                	mov    bl,0x4
c001f0a7:	68 fa c7 02 c0       	push   0xc002c7fa
c001f0ac:	e8 bd 3e ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f0b1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0b4:	83 c4 10             	add    esp,0x10
c001f0b7:	e9 36 fe ff ff       	jmp    c001eef2 <Vm::faultHandler(regs*)+0xad>
c001f0bc:	83 ec 0c             	sub    esp,0xc
c001f0bf:	b3 05                	mov    bl,0x5
c001f0c1:	68 fe c7 02 c0       	push   0xc002c7fe
c001f0c6:	e8 a3 3e ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f0cb:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0ce:	83 c4 10             	add    esp,0x10
c001f0d1:	e9 1c fe ff ff       	jmp    c001eef2 <Vm::faultHandler(regs*)+0xad>
c001f0d6:	83 ec 0c             	sub    esp,0xc
c001f0d9:	68 02 c8 02 c0       	push   0xc002c802
c001f0de:	e8 8b 3e ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f0e3:	83 c4 10             	add    esp,0x10
c001f0e6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0e9:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f0ee:	e9 ff fd ff ff       	jmp    c001eef2 <Vm::faultHandler(regs*)+0xad>
c001f0f3:	50                   	push   eax
c001f0f4:	50                   	push   eax
c001f0f5:	6a 01                	push   0x1
c001f0f7:	68 07 c8 02 c0       	push   0xc002c807
c001f0fc:	e8 6d 3e ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f101:	83 c4 10             	add    esp,0x10
c001f104:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f107:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f10c:	e9 e1 fd ff ff       	jmp    c001eef2 <Vm::faultHandler(regs*)+0xad>
c001f111:	83 ec 0c             	sub    esp,0xc
c001f114:	68 15 c8 02 c0       	push   0xc002c815
c001f119:	e8 50 3e ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f11e:	83 c4 10             	add    esp,0x10
c001f121:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f124:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f129:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f12c:	74 2f                	je     c001f15d <Vm::faultHandler(regs*)+0x318>
c001f12e:	83 ea 04             	sub    edx,0x4
c001f131:	25 ff 0d 00 00       	and    eax,0xdff
c001f136:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f13c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f13f:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f142:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f148:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f14c:	0f 84 bf 04 00 00    	je     c001f611 <Vm::faultHandler(regs*)+0x7cc>
c001f152:	80 cc 02             	or     ah,0x2
c001f155:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f158:	e9 b4 04 00 00       	jmp    c001f611 <Vm::faultHandler(regs*)+0x7cc>
c001f15d:	83 ea 02             	sub    edx,0x2
c001f160:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f166:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f169:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f16d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f173:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f177:	74 05                	je     c001f17e <Vm::faultHandler(regs*)+0x339>
c001f179:	80 cc 02             	or     ah,0x2
c001f17c:	eb 03                	jmp    c001f181 <Vm::faultHandler(regs*)+0x33c>
c001f17e:	80 e4 fd             	and    ah,0xfd
c001f181:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f185:	e9 87 04 00 00       	jmp    c001f611 <Vm::faultHandler(regs*)+0x7cc>
c001f18a:	83 ec 0c             	sub    esp,0xc
c001f18d:	68 1c c8 02 c0       	push   0xc002c81c
c001f192:	e8 d7 3d ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f197:	83 c4 10             	add    esp,0x10
c001f19a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f19f:	74 28                	je     c001f1c9 <Vm::faultHandler(regs*)+0x384>
c001f1a1:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1a3:	25 ff 0d 00 00       	and    eax,0xdff
c001f1a8:	0d 00 02 02 00       	or     eax,0x20200
c001f1ad:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1b0:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1b2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1b8:	c1 e8 09             	shr    eax,0x9
c001f1bb:	83 e0 01             	and    eax,0x1
c001f1be:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1c1:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1c4:	83 c0 04             	add    eax,0x4
c001f1c7:	eb 24                	jmp    c001f1ed <Vm::faultHandler(regs*)+0x3a8>
c001f1c9:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f1cc:	0d 00 02 02 00       	or     eax,0x20200
c001f1d1:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1d4:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f1d7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1dd:	66 c1 e8 09          	shr    ax,0x9
c001f1e1:	83 e0 01             	and    eax,0x1
c001f1e4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1e7:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1ea:	83 c0 02             	add    eax,0x2
c001f1ed:	25 ff ff 00 00       	and    eax,0xffff
c001f1f2:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f1f5:	e9 17 04 00 00       	jmp    c001f611 <Vm::faultHandler(regs*)+0x7cc>
c001f1fa:	53                   	push   ebx
c001f1fb:	53                   	push   ebx
c001f1fc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f200:	50                   	push   eax
c001f201:	68 22 c8 02 c0       	push   0xc002c822
c001f206:	e8 63 3d ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f20b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f20f:	83 c4 10             	add    esp,0x10
c001f212:	3c ee                	cmp    al,0xee
c001f214:	75 10                	jne    c001f226 <Vm::faultHandler(regs*)+0x3e1>
c001f216:	83 ec 0c             	sub    esp,0xc
c001f219:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f21c:	e8 fa f8 ff ff       	call   c001eb1b <Vm::mainloop3(unsigned long)>
c001f221:	e9 c0 03 00 00       	jmp    c001f5e6 <Vm::faultHandler(regs*)+0x7a1>
c001f226:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f22a:	83 ec 0c             	sub    esp,0xc
c001f22d:	53                   	push   ebx
c001f22e:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f232:	53                   	push   ebx
c001f233:	55                   	push   ebp
c001f234:	50                   	push   eax
c001f235:	57                   	push   edi
c001f236:	e8 0c fb ff ff       	call   c001ed47 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f23b:	eb 36                	jmp    c001f273 <Vm::faultHandler(regs*)+0x42e>
c001f23d:	83 ec 0c             	sub    esp,0xc
c001f240:	68 2c c8 02 c0       	push   0xc002c82c
c001f245:	e8 24 3d ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f24a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f24f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f253:	e9 8b 03 00 00       	jmp    c001f5e3 <Vm::faultHandler(regs*)+0x79e>
c001f258:	83 ec 0c             	sub    esp,0xc
c001f25b:	68 31 c8 02 c0       	push   0xc002c831
c001f260:	e8 09 3d ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f265:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f26a:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f26e:	e9 70 03 00 00       	jmp    c001f5e3 <Vm::faultHandler(regs*)+0x79e>
c001f273:	83 c4 20             	add    esp,0x20
c001f276:	e9 99 03 00 00       	jmp    c001f614 <Vm::faultHandler(regs*)+0x7cf>
c001f27b:	83 ec 0c             	sub    esp,0xc
c001f27e:	68 6f c8 02 c0       	push   0xc002c86f
c001f283:	e8 e6 3c ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f288:	83 c4 10             	add    esp,0x10
c001f28b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f28e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f293:	74 0d                	je     c001f2a2 <Vm::faultHandler(regs*)+0x45d>
c001f295:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f29c:	0f 87 9e 01 00 00    	ja     c001f440 <Vm::faultHandler(regs*)+0x5fb>
c001f2a2:	83 ec 0c             	sub    esp,0xc
c001f2a5:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f2a9:	0f b7 db             	movzx  ebx,bx
c001f2ac:	50                   	push   eax
c001f2ad:	e8 9e f7 ff ff       	call   c001ea50 <Vm::inbv(unsigned short)>
c001f2b2:	83 c4 0c             	add    esp,0xc
c001f2b5:	0f b6 c0             	movzx  eax,al
c001f2b8:	50                   	push   eax
c001f2b9:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f2bd:	50                   	push   eax
c001f2be:	53                   	push   ebx
c001f2bf:	e8 41 fb ff ff       	call   c001ee05 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f2c4:	83 c4 10             	add    esp,0x10
c001f2c7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2ca:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2ce:	74 03                	je     c001f2d3 <Vm::faultHandler(regs*)+0x48e>
c001f2d0:	48                   	dec    eax
c001f2d1:	eb 01                	jmp    c001f2d4 <Vm::faultHandler(regs*)+0x48f>
c001f2d3:	40                   	inc    eax
c001f2d4:	0f b7 c0             	movzx  eax,ax
c001f2d7:	eb 7f                	jmp    c001f358 <Vm::faultHandler(regs*)+0x513>
c001f2d9:	83 ec 0c             	sub    esp,0xc
c001f2dc:	68 a1 c8 02 c0       	push   0xc002c8a1
c001f2e1:	e8 88 3c ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f2e6:	83 c4 10             	add    esp,0x10
c001f2e9:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2ec:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2f1:	74 0d                	je     c001f300 <Vm::faultHandler(regs*)+0x4bb>
c001f2f3:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2fa:	0f 87 40 01 00 00    	ja     c001f440 <Vm::faultHandler(regs*)+0x5fb>
c001f300:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f303:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f307:	0f b7 db             	movzx  ebx,bx
c001f30a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f30f:	74 20                	je     c001f331 <Vm::faultHandler(regs*)+0x4ec>
c001f311:	ed                   	in     eax,dx
c001f312:	51                   	push   ecx
c001f313:	50                   	push   eax
c001f314:	56                   	push   esi
c001f315:	53                   	push   ebx
c001f316:	e8 15 fb ff ff       	call   c001ee30 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f31b:	83 c4 10             	add    esp,0x10
c001f31e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f321:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f325:	74 05                	je     c001f32c <Vm::faultHandler(regs*)+0x4e7>
c001f327:	83 e8 04             	sub    eax,0x4
c001f32a:	eb 27                	jmp    c001f353 <Vm::faultHandler(regs*)+0x50e>
c001f32c:	83 c0 04             	add    eax,0x4
c001f32f:	eb 22                	jmp    c001f353 <Vm::faultHandler(regs*)+0x50e>
c001f331:	66 ed                	in     ax,dx
c001f333:	0f b7 c0             	movzx  eax,ax
c001f336:	52                   	push   edx
c001f337:	50                   	push   eax
c001f338:	56                   	push   esi
c001f339:	53                   	push   ebx
c001f33a:	e8 db fa ff ff       	call   c001ee1a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f33f:	83 c4 10             	add    esp,0x10
c001f342:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f345:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f349:	74 05                	je     c001f350 <Vm::faultHandler(regs*)+0x50b>
c001f34b:	83 e8 02             	sub    eax,0x2
c001f34e:	eb 03                	jmp    c001f353 <Vm::faultHandler(regs*)+0x50e>
c001f350:	83 c0 02             	add    eax,0x2
c001f353:	25 ff ff 00 00       	and    eax,0xffff
c001f358:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f35b:	e9 b1 02 00 00       	jmp    c001f611 <Vm::faultHandler(regs*)+0x7cc>
c001f360:	83 ec 0c             	sub    esp,0xc
c001f363:	4b                   	dec    ebx
c001f364:	68 a7 c8 02 c0       	push   0xc002c8a7
c001f369:	e8 00 3c ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f36e:	83 c4 10             	add    esp,0x10
c001f371:	80 fb 05             	cmp    bl,0x5
c001f374:	77 0a                	ja     c001f380 <Vm::faultHandler(regs*)+0x53b>
c001f376:	0f b6 db             	movzx  ebx,bl
c001f379:	ff 24 9d 18 c9 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd36e8]
c001f380:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f384:	eb 1b                	jmp    c001f3a1 <Vm::faultHandler(regs*)+0x55c>
c001f386:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f38a:	eb 15                	jmp    c001f3a1 <Vm::faultHandler(regs*)+0x55c>
c001f38c:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f390:	eb 0f                	jmp    c001f3a1 <Vm::faultHandler(regs*)+0x55c>
c001f392:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f396:	eb 09                	jmp    c001f3a1 <Vm::faultHandler(regs*)+0x55c>
c001f398:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f39b:	eb 04                	jmp    c001f3a1 <Vm::faultHandler(regs*)+0x55c>
c001f39d:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3a1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f3a6:	74 0d                	je     c001f3b5 <Vm::faultHandler(regs*)+0x570>
c001f3a8:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f3af:	0f 87 8b 00 00 00    	ja     c001f440 <Vm::faultHandler(regs*)+0x5fb>
c001f3b5:	53                   	push   ebx
c001f3b6:	53                   	push   ebx
c001f3b7:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f3bb:	52                   	push   edx
c001f3bc:	50                   	push   eax
c001f3bd:	e8 0f fa ff ff       	call   c001edd1 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f3c2:	5e                   	pop    esi
c001f3c3:	0f b6 c0             	movzx  eax,al
c001f3c6:	5d                   	pop    ebp
c001f3c7:	50                   	push   eax
c001f3c8:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f3cc:	50                   	push   eax
c001f3cd:	e8 91 f6 ff ff       	call   c001ea63 <Vm::outbv(unsigned short, unsigned char)>
c001f3d2:	83 c4 10             	add    esp,0x10
c001f3d5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f3d8:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3dc:	74 03                	je     c001f3e1 <Vm::faultHandler(regs*)+0x59c>
c001f3de:	48                   	dec    eax
c001f3df:	eb 01                	jmp    c001f3e2 <Vm::faultHandler(regs*)+0x59d>
c001f3e1:	40                   	inc    eax
c001f3e2:	0f b7 c0             	movzx  eax,ax
c001f3e5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f3e8:	e9 24 02 00 00       	jmp    c001f611 <Vm::faultHandler(regs*)+0x7cc>
c001f3ed:	83 ec 0c             	sub    esp,0xc
c001f3f0:	4b                   	dec    ebx
c001f3f1:	68 a7 c8 02 c0       	push   0xc002c8a7
c001f3f6:	e8 73 3b ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f3fb:	83 c4 10             	add    esp,0x10
c001f3fe:	80 fb 05             	cmp    bl,0x5
c001f401:	77 0a                	ja     c001f40d <Vm::faultHandler(regs*)+0x5c8>
c001f403:	0f b6 db             	movzx  ebx,bl
c001f406:	ff 24 9d 30 c9 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd36d0]
c001f40d:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f411:	eb 1b                	jmp    c001f42e <Vm::faultHandler(regs*)+0x5e9>
c001f413:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f417:	eb 15                	jmp    c001f42e <Vm::faultHandler(regs*)+0x5e9>
c001f419:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f41d:	eb 0f                	jmp    c001f42e <Vm::faultHandler(regs*)+0x5e9>
c001f41f:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f423:	eb 09                	jmp    c001f42e <Vm::faultHandler(regs*)+0x5e9>
c001f425:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f428:	eb 04                	jmp    c001f42e <Vm::faultHandler(regs*)+0x5e9>
c001f42a:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f42e:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f431:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f436:	74 39                	je     c001f471 <Vm::faultHandler(regs*)+0x62c>
c001f438:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f43e:	76 31                	jbe    c001f471 <Vm::faultHandler(regs*)+0x62c>
c001f440:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f444:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f448:	51                   	push   ecx
c001f449:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f44d:	51                   	push   ecx
c001f44e:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f452:	51                   	push   ecx
c001f453:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f457:	51                   	push   ecx
c001f458:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f45c:	52                   	push   edx
c001f45d:	50                   	push   eax
c001f45e:	50                   	push   eax
c001f45f:	68 74 c8 02 c0       	push   0xc002c874
c001f464:	e8 05 3b ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f469:	83 c4 20             	add    esp,0x20
c001f46c:	e9 fb 01 00 00       	jmp    c001f66c <Vm::faultHandler(regs*)+0x827>
c001f471:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f474:	0f b7 d3             	movzx  edx,bx
c001f477:	81 e6 00 04 00 00    	and    esi,0x400
c001f47d:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f480:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f485:	74 1d                	je     c001f4a4 <Vm::faultHandler(regs*)+0x65f>
c001f487:	51                   	push   ecx
c001f488:	51                   	push   ecx
c001f489:	52                   	push   edx
c001f48a:	50                   	push   eax
c001f48b:	e8 64 f9 ff ff       	call   c001edf4 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f490:	83 c4 10             	add    esp,0x10
c001f493:	89 ea                	mov    edx,ebp
c001f495:	ef                   	out    dx,eax
c001f496:	85 f6                	test   esi,esi
c001f498:	74 05                	je     c001f49f <Vm::faultHandler(regs*)+0x65a>
c001f49a:	83 eb 04             	sub    ebx,0x4
c001f49d:	eb 21                	jmp    c001f4c0 <Vm::faultHandler(regs*)+0x67b>
c001f49f:	83 c3 04             	add    ebx,0x4
c001f4a2:	eb 1c                	jmp    c001f4c0 <Vm::faultHandler(regs*)+0x67b>
c001f4a4:	51                   	push   ecx
c001f4a5:	51                   	push   ecx
c001f4a6:	52                   	push   edx
c001f4a7:	50                   	push   eax
c001f4a8:	e8 35 f9 ff ff       	call   c001ede2 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f4ad:	83 c4 10             	add    esp,0x10
c001f4b0:	89 ea                	mov    edx,ebp
c001f4b2:	66 ef                	out    dx,ax
c001f4b4:	85 f6                	test   esi,esi
c001f4b6:	74 05                	je     c001f4bd <Vm::faultHandler(regs*)+0x678>
c001f4b8:	83 eb 02             	sub    ebx,0x2
c001f4bb:	eb 03                	jmp    c001f4c0 <Vm::faultHandler(regs*)+0x67b>
c001f4bd:	83 c3 02             	add    ebx,0x2
c001f4c0:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f4c6:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f4c9:	e9 43 01 00 00       	jmp    c001f611 <Vm::faultHandler(regs*)+0x7cc>
c001f4ce:	53                   	push   ebx
c001f4cf:	53                   	push   ebx
c001f4d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4d4:	50                   	push   eax
c001f4d5:	68 ad c8 02 c0       	push   0xc002c8ad
c001f4da:	e8 8f 3a ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f4df:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f4e6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4ea:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4ed:	e8 5e f5 ff ff       	call   c001ea50 <Vm::inbv(unsigned short)>
c001f4f2:	0f b6 c0             	movzx  eax,al
c001f4f5:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f4f8:	eb 5e                	jmp    c001f558 <Vm::faultHandler(regs*)+0x713>
c001f4fa:	51                   	push   ecx
c001f4fb:	51                   	push   ecx
c001f4fc:	53                   	push   ebx
c001f4fd:	68 b3 c8 02 c0       	push   0xc002c8b3
c001f502:	e8 67 3a ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f507:	83 c4 10             	add    esp,0x10
c001f50a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f50f:	74 07                	je     c001f518 <Vm::faultHandler(regs*)+0x6d3>
c001f511:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f515:	ed                   	in     eax,dx
c001f516:	eb 14                	jmp    c001f52c <Vm::faultHandler(regs*)+0x6e7>
c001f518:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f51b:	66 31 db             	xor    bx,bx
c001f51e:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f521:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f525:	66 ed                	in     ax,dx
c001f527:	0f b7 c0             	movzx  eax,ax
c001f52a:	09 d8                	or     eax,ebx
c001f52c:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f52f:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f533:	e9 dc 00 00 00       	jmp    c001f614 <Vm::faultHandler(regs*)+0x7cf>
c001f538:	50                   	push   eax
c001f539:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f53c:	53                   	push   ebx
c001f53d:	68 b9 c8 02 c0       	push   0xc002c8b9
c001f542:	e8 27 3a ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f547:	58                   	pop    eax
c001f548:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f54c:	5a                   	pop    edx
c001f54d:	50                   	push   eax
c001f54e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f552:	50                   	push   eax
c001f553:	e8 0b f5 ff ff       	call   c001ea63 <Vm::outbv(unsigned short, unsigned char)>
c001f558:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f55c:	e9 85 00 00 00       	jmp    c001f5e6 <Vm::faultHandler(regs*)+0x7a1>
c001f561:	50                   	push   eax
c001f562:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f565:	53                   	push   ebx
c001f566:	68 c2 c8 02 c0       	push   0xc002c8c2
c001f56b:	e8 fe 39 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f570:	83 c4 10             	add    esp,0x10
c001f573:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f577:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f57c:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f57f:	74 03                	je     c001f584 <Vm::faultHandler(regs*)+0x73f>
c001f581:	ef                   	out    dx,eax
c001f582:	eb ab                	jmp    c001f52f <Vm::faultHandler(regs*)+0x6ea>
c001f584:	66 ef                	out    dx,ax
c001f586:	eb a7                	jmp    c001f52f <Vm::faultHandler(regs*)+0x6ea>
c001f588:	55                   	push   ebp
c001f589:	55                   	push   ebp
c001f58a:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f58d:	68 cb c8 02 c0       	push   0xc002c8cb
c001f592:	e8 d7 39 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f597:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f59e:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f5a2:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5a5:	e8 a6 f4 ff ff       	call   c001ea50 <Vm::inbv(unsigned short)>
c001f5aa:	0f b6 c0             	movzx  eax,al
c001f5ad:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f5b0:	eb 31                	jmp    c001f5e3 <Vm::faultHandler(regs*)+0x79e>
c001f5b2:	56                   	push   esi
c001f5b3:	56                   	push   esi
c001f5b4:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5b7:	68 d1 c8 02 c0       	push   0xc002c8d1
c001f5bc:	e8 ad 39 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f5c1:	83 c4 10             	add    esp,0x10
c001f5c4:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5c7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5cc:	74 03                	je     c001f5d1 <Vm::faultHandler(regs*)+0x78c>
c001f5ce:	ed                   	in     eax,dx
c001f5cf:	eb 0d                	jmp    c001f5de <Vm::faultHandler(regs*)+0x799>
c001f5d1:	66 ed                	in     ax,dx
c001f5d3:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f5d6:	0f b7 c0             	movzx  eax,ax
c001f5d9:	66 31 d2             	xor    dx,dx
c001f5dc:	09 d0                	or     eax,edx
c001f5de:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f5e1:	eb 2e                	jmp    c001f611 <Vm::faultHandler(regs*)+0x7cc>
c001f5e3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5e6:	83 c4 10             	add    esp,0x10
c001f5e9:	eb 29                	jmp    c001f614 <Vm::faultHandler(regs*)+0x7cf>
c001f5eb:	50                   	push   eax
c001f5ec:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5ef:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5f2:	68 e0 c8 02 c0       	push   0xc002c8e0
c001f5f7:	e8 72 39 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f5fc:	83 c4 10             	add    esp,0x10
c001f5ff:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f602:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f607:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f60a:	74 03                	je     c001f60f <Vm::faultHandler(regs*)+0x7ca>
c001f60c:	ef                   	out    dx,eax
c001f60d:	eb 02                	jmp    c001f611 <Vm::faultHandler(regs*)+0x7cc>
c001f60f:	66 ef                	out    dx,ax
c001f611:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f614:	b0 01                	mov    al,0x1
c001f616:	eb 56                	jmp    c001f66e <Vm::faultHandler(regs*)+0x829>
c001f618:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f61c:	51                   	push   ecx
c001f61d:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f621:	51                   	push   ecx
c001f622:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f626:	51                   	push   ecx
c001f627:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f62b:	51                   	push   ecx
c001f62c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f630:	52                   	push   edx
c001f631:	50                   	push   eax
c001f632:	50                   	push   eax
c001f633:	68 e9 c8 02 c0       	push   0xc002c8e9
c001f638:	e8 31 39 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c001f63d:	83 c4 20             	add    esp,0x20
c001f640:	83 ec 0c             	sub    esp,0xc
c001f643:	6a 60                	push   0x60
c001f645:	e8 06 f4 ff ff       	call   c001ea50 <Vm::inbv(unsigned short)>
c001f64a:	83 c4 10             	add    esp,0x10
c001f64d:	3c 1c                	cmp    al,0x1c
c001f64f:	74 04                	je     c001f655 <Vm::faultHandler(regs*)+0x810>
c001f651:	3c 5a                	cmp    al,0x5a
c001f653:	75 eb                	jne    c001f640 <Vm::faultHandler(regs*)+0x7fb>
c001f655:	3c 1c                	cmp    al,0x1c
c001f657:	74 04                	je     c001f65d <Vm::faultHandler(regs*)+0x818>
c001f659:	3c 5a                	cmp    al,0x5a
c001f65b:	75 0f                	jne    c001f66c <Vm::faultHandler(regs*)+0x827>
c001f65d:	83 ec 0c             	sub    esp,0xc
c001f660:	6a 60                	push   0x60
c001f662:	e8 e9 f3 ff ff       	call   c001ea50 <Vm::inbv(unsigned short)>
c001f667:	83 c4 10             	add    esp,0x10
c001f66a:	eb e9                	jmp    c001f655 <Vm::faultHandler(regs*)+0x810>
c001f66c:	31 c0                	xor    eax,eax
c001f66e:	83 c4 1c             	add    esp,0x1c
c001f671:	5b                   	pop    ebx
c001f672:	5e                   	pop    esi
c001f673:	5f                   	pop    edi
c001f674:	5d                   	pop    ebp
c001f675:	c3                   	ret    

c001f676 <Vm::fpuInternalTo32(unsigned long long)>:
c001f676:	57                   	push   edi
c001f677:	56                   	push   esi
c001f678:	53                   	push   ebx
c001f679:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f67d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f681:	89 d6                	mov    esi,edx
c001f683:	89 d7                	mov    edi,edx
c001f685:	89 c1                	mov    ecx,eax
c001f687:	c1 ef 14             	shr    edi,0x14
c001f68a:	89 d3                	mov    ebx,edx
c001f68c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f692:	31 d2                	xor    edx,edx
c001f694:	89 f8                	mov    eax,edi
c001f696:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f69c:	bf ff 00 00 00       	mov    edi,0xff
c001f6a1:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f6a6:	83 d2 ff             	adc    edx,0xffffffff
c001f6a9:	39 c7                	cmp    edi,eax
c001f6ab:	bf 00 00 00 00       	mov    edi,0x0
c001f6b0:	19 d7                	sbb    edi,edx
c001f6b2:	72 15                	jb     c001f6c9 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f6b4:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f6b8:	c1 e0 17             	shl    eax,0x17
c001f6bb:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f6c1:	09 f1                	or     ecx,esi
c001f6c3:	09 c1                	or     ecx,eax
c001f6c5:	89 cf                	mov    edi,ecx
c001f6c7:	eb 02                	jmp    c001f6cb <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f6c9:	31 ff                	xor    edi,edi
c001f6cb:	89 f8                	mov    eax,edi
c001f6cd:	5b                   	pop    ebx
c001f6ce:	5e                   	pop    esi
c001f6cf:	5f                   	pop    edi
c001f6d0:	c3                   	ret    

c001f6d1 <Vm::fpuInternalTo64(unsigned long long)>:
c001f6d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6d9:	c3                   	ret    

c001f6da <Vm::fpu32ToInternal(unsigned int)>:
c001f6da:	57                   	push   edi
c001f6db:	31 ff                	xor    edi,edi
c001f6dd:	56                   	push   esi
c001f6de:	53                   	push   ebx
c001f6df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6e3:	89 cb                	mov    ebx,ecx
c001f6e5:	89 ce                	mov    esi,ecx
c001f6e7:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f6ed:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f6f3:	c1 e9 17             	shr    ecx,0x17
c001f6f6:	89 f0                	mov    eax,esi
c001f6f8:	0f b6 d1             	movzx  edx,cl
c001f6fb:	81 c2 80 03 00 00    	add    edx,0x380
c001f701:	89 d1                	mov    ecx,edx
c001f703:	89 fa                	mov    edx,edi
c001f705:	c1 e1 14             	shl    ecx,0x14
c001f708:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f70c:	c1 e0 1d             	shl    eax,0x1d
c001f70f:	89 d7                	mov    edi,edx
c001f711:	89 c6                	mov    esi,eax
c001f713:	89 ca                	mov    edx,ecx
c001f715:	89 f0                	mov    eax,esi
c001f717:	09 fa                	or     edx,edi
c001f719:	09 da                	or     edx,ebx
c001f71b:	5b                   	pop    ebx
c001f71c:	5e                   	pop    esi
c001f71d:	5f                   	pop    edi
c001f71e:	c3                   	ret    

c001f71f <Vm::fpu64ToInternal(unsigned long long)>:
c001f71f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f723:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f727:	c3                   	ret    

c001f728 <Vm::fpuFloatToLong(unsigned long long)>:
c001f728:	57                   	push   edi
c001f729:	31 c0                	xor    eax,eax
c001f72b:	56                   	push   esi
c001f72c:	31 d2                	xor    edx,edx
c001f72e:	53                   	push   ebx
c001f72f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f733:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f737:	89 d9                	mov    ecx,ebx
c001f739:	c1 e9 14             	shr    ecx,0x14
c001f73c:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f742:	89 cf                	mov    edi,ecx
c001f744:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f74a:	78 33                	js     c001f77f <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f74c:	89 d9                	mov    ecx,ebx
c001f74e:	89 f0                	mov    eax,esi
c001f750:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f756:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f75c:	89 ca                	mov    edx,ecx
c001f75e:	b9 34 00 00 00       	mov    ecx,0x34
c001f763:	29 f9                	sub    ecx,edi
c001f765:	0f ad d0             	shrd   eax,edx,cl
c001f768:	d3 fa                	sar    edx,cl
c001f76a:	f6 c1 20             	test   cl,0x20
c001f76d:	74 05                	je     c001f774 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f76f:	89 d0                	mov    eax,edx
c001f771:	c1 fa 1f             	sar    edx,0x1f
c001f774:	85 db                	test   ebx,ebx
c001f776:	79 07                	jns    c001f77f <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f778:	f7 d8                	neg    eax
c001f77a:	83 d2 00             	adc    edx,0x0
c001f77d:	f7 da                	neg    edx
c001f77f:	5b                   	pop    ebx
c001f780:	5e                   	pop    esi
c001f781:	5f                   	pop    edi
c001f782:	c3                   	ret    

c001f783 <Vm::fpuULongToFloat(unsigned long long)>:
c001f783:	57                   	push   edi
c001f784:	31 c9                	xor    ecx,ecx
c001f786:	56                   	push   esi
c001f787:	53                   	push   ebx
c001f788:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f78c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f790:	0f ba e7 14          	bt     edi,0x14
c001f794:	72 07                	jb     c001f79d <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f796:	01 f6                	add    esi,esi
c001f798:	11 ff                	adc    edi,edi
c001f79a:	41                   	inc    ecx
c001f79b:	eb f3                	jmp    c001f790 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f79d:	89 fa                	mov    edx,edi
c001f79f:	89 f0                	mov    eax,esi
c001f7a1:	bb 33 04 00 00       	mov    ebx,0x433
c001f7a6:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f7ac:	29 cb                	sub    ebx,ecx
c001f7ae:	89 d9                	mov    ecx,ebx
c001f7b0:	5b                   	pop    ebx
c001f7b1:	c1 e1 14             	shl    ecx,0x14
c001f7b4:	5e                   	pop    esi
c001f7b5:	09 ca                	or     edx,ecx
c001f7b7:	5f                   	pop    edi
c001f7b8:	c3                   	ret    

c001f7b9 <Vm::fpuLongToFloat(long long)>:
c001f7b9:	56                   	push   esi
c001f7ba:	31 c0                	xor    eax,eax
c001f7bc:	53                   	push   ebx
c001f7bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f7c5:	39 c8                	cmp    eax,ecx
c001f7c7:	19 d8                	sbb    eax,ebx
c001f7c9:	7d 04                	jge    c001f7cf <Vm::fpuLongToFloat(long long)+0x16>
c001f7cb:	31 f6                	xor    esi,esi
c001f7cd:	eb 0c                	jmp    c001f7db <Vm::fpuLongToFloat(long long)+0x22>
c001f7cf:	f7 d9                	neg    ecx
c001f7d1:	be 01 00 00 00       	mov    esi,0x1
c001f7d6:	83 d3 00             	adc    ebx,0x0
c001f7d9:	f7 db                	neg    ebx
c001f7db:	31 c0                	xor    eax,eax
c001f7dd:	0f ba e3 14          	bt     ebx,0x14
c001f7e1:	72 07                	jb     c001f7ea <Vm::fpuLongToFloat(long long)+0x31>
c001f7e3:	01 c9                	add    ecx,ecx
c001f7e5:	11 db                	adc    ebx,ebx
c001f7e7:	40                   	inc    eax
c001f7e8:	eb f3                	jmp    c001f7dd <Vm::fpuLongToFloat(long long)+0x24>
c001f7ea:	ba 33 04 00 00       	mov    edx,0x433
c001f7ef:	29 c2                	sub    edx,eax
c001f7f1:	89 c8                	mov    eax,ecx
c001f7f3:	c1 e2 14             	shl    edx,0x14
c001f7f6:	89 d9                	mov    ecx,ebx
c001f7f8:	89 f3                	mov    ebx,esi
c001f7fa:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f800:	09 ca                	or     edx,ecx
c001f802:	84 db                	test   bl,bl
c001f804:	74 06                	je     c001f80c <Vm::fpuLongToFloat(long long)+0x53>
c001f806:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f80c:	5b                   	pop    ebx
c001f80d:	5e                   	pop    esi
c001f80e:	c3                   	ret    

c001f80f <Vm::fpuGet0()>:
c001f80f:	31 c0                	xor    eax,eax
c001f811:	31 d2                	xor    edx,edx
c001f813:	c3                   	ret    

c001f814 <Vm::fpuGet1()>:
c001f814:	b8 01 00 00 00       	mov    eax,0x1
c001f819:	31 d2                	xor    edx,edx
c001f81b:	c3                   	ret    

c001f81c <Vm::fpuGetPi()>:
c001f81c:	b8 03 00 00 00       	mov    eax,0x3
c001f821:	31 d2                	xor    edx,edx
c001f823:	c3                   	ret    

c001f824 <Vm::fpuGetLog2E()>:
c001f824:	83 ec 18             	sub    esp,0x18
c001f827:	68 48 c9 02 c0       	push   0xc002c948
c001f82c:	e8 de ad ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001f831:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f836:	31 d2                	xor    edx,edx
c001f838:	83 c4 1c             	add    esp,0x1c
c001f83b:	c3                   	ret    

c001f83c <Vm::fpuGetLogE2()>:
c001f83c:	83 ec 18             	sub    esp,0x18
c001f83f:	68 54 c9 02 c0       	push   0xc002c954
c001f844:	e8 c6 ad ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001f849:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f84e:	31 d2                	xor    edx,edx
c001f850:	83 c4 1c             	add    esp,0x1c
c001f853:	c3                   	ret    

c001f854 <Vm::fpuGetLog210()>:
c001f854:	83 ec 18             	sub    esp,0x18
c001f857:	68 60 c9 02 c0       	push   0xc002c960
c001f85c:	e8 ae ad ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001f861:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f866:	31 d2                	xor    edx,edx
c001f868:	83 c4 1c             	add    esp,0x1c
c001f86b:	c3                   	ret    

c001f86c <Vm::fpuGetLog102()>:
c001f86c:	83 ec 18             	sub    esp,0x18
c001f86f:	68 6d c9 02 c0       	push   0xc002c96d
c001f874:	e8 96 ad ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001f879:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f87e:	31 d2                	xor    edx,edx
c001f880:	83 c4 1c             	add    esp,0x1c
c001f883:	c3                   	ret    

c001f884 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f884:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f888:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f88c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f890:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f894:	0f 92 c0             	setb   al
c001f897:	c3                   	ret    

c001f898 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f898:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a0:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f8a4:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f8a8:	09 c2                	or     edx,eax
c001f8aa:	0f 94 c0             	sete   al
c001f8ad:	c3                   	ret    

c001f8ae <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f8ae:	57                   	push   edi
c001f8af:	56                   	push   esi
c001f8b0:	53                   	push   ebx
c001f8b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f8b5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8b9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f8bd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f8c1:	57                   	push   edi
c001f8c2:	56                   	push   esi
c001f8c3:	53                   	push   ebx
c001f8c4:	51                   	push   ecx
c001f8c5:	e8 ce ff ff ff       	call   c001f898 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f8ca:	83 c4 10             	add    esp,0x10
c001f8cd:	88 c2                	mov    dl,al
c001f8cf:	31 c0                	xor    eax,eax
c001f8d1:	84 d2                	test   dl,dl
c001f8d3:	75 0c                	jne    c001f8e1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f8d5:	57                   	push   edi
c001f8d6:	56                   	push   esi
c001f8d7:	53                   	push   ebx
c001f8d8:	51                   	push   ecx
c001f8d9:	e8 a6 ff ff ff       	call   c001f884 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f8de:	83 c4 10             	add    esp,0x10
c001f8e1:	83 e0 01             	and    eax,0x1
c001f8e4:	5b                   	pop    ebx
c001f8e5:	88 c1                	mov    cl,al
c001f8e7:	83 e2 01             	and    edx,0x1
c001f8ea:	a0 c1 1b 03 c0       	mov    al,ds:0xc0031bc1
c001f8ef:	c1 e2 06             	shl    edx,0x6
c001f8f2:	83 e0 ba             	and    eax,0xffffffba
c001f8f5:	5e                   	pop    esi
c001f8f6:	09 c8                	or     eax,ecx
c001f8f8:	5f                   	pop    edi
c001f8f9:	09 d0                	or     eax,edx
c001f8fb:	a2 c1 1b 03 c0       	mov    ds:0xc0031bc1,al
c001f900:	c3                   	ret    

c001f901 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f905:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f909:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f90d:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f911:	c3                   	ret    

c001f912 <Vm::fpuAbs(unsigned long long)>:
c001f912:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f916:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f91a:	c3                   	ret    

c001f91b <Vm::fpuChs(unsigned long long)>:
c001f91b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f91f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f923:	f7 d8                	neg    eax
c001f925:	83 d2 00             	adc    edx,0x0
c001f928:	f7 da                	neg    edx
c001f92a:	c3                   	ret    

c001f92b <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f92b:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f92f:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f934:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f938:	eb c7                	jmp    c001f901 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f93a <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f93a:	53                   	push   ebx
c001f93b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f93f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f947:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f94b:	0f af ca             	imul   ecx,edx
c001f94e:	0f af d8             	imul   ebx,eax
c001f951:	f7 e2                	mul    edx
c001f953:	01 d9                	add    ecx,ebx
c001f955:	5b                   	pop    ebx
c001f956:	01 ca                	add    edx,ecx
c001f958:	c3                   	ret    

c001f959 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f959:	83 ec 0c             	sub    esp,0xc
c001f95c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f96c:	e8 9b 70 00 00       	call   c0026a0c <__udivdi3>
c001f971:	83 c4 1c             	add    esp,0x1c
c001f974:	c3                   	ret    

c001f975 <Vm::fpuSquare(unsigned long long)>:
c001f975:	50                   	push   eax
c001f976:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f97a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f97e:	52                   	push   edx
c001f97f:	50                   	push   eax
c001f980:	52                   	push   edx
c001f981:	50                   	push   eax
c001f982:	e8 b3 ff ff ff       	call   c001f93a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f987:	83 c4 14             	add    esp,0x14
c001f98a:	c3                   	ret    

c001f98b <Vm::fpuGetReg(int)>:
c001f98b:	83 ec 0c             	sub    esp,0xc
c001f98e:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f993:	76 10                	jbe    c001f9a5 <Vm::fpuGetReg(int)+0x1a>
c001f995:	83 ec 0c             	sub    esp,0xc
c001f998:	68 7a c9 02 c0       	push   0xc002c97a
c001f99d:	e8 6d ac ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001f9a2:	83 c4 10             	add    esp,0x10
c001f9a5:	a0 c1 1b 03 c0       	mov    al,ds:0xc0031bc1
c001f9aa:	b9 08 00 00 00       	mov    ecx,0x8
c001f9af:	c0 e8 03             	shr    al,0x3
c001f9b2:	83 e0 07             	and    eax,0x7
c001f9b5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9b9:	99                   	cdq    
c001f9ba:	f7 f9                	idiv   ecx
c001f9bc:	8b 04 d5 c4 1b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce43c]
c001f9c3:	8b 14 d5 c8 1b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce438]
c001f9ca:	83 c4 0c             	add    esp,0xc
c001f9cd:	c3                   	ret    

c001f9ce <Vm::fpuSetReg(int, unsigned long long)>:
c001f9ce:	57                   	push   edi
c001f9cf:	56                   	push   esi
c001f9d0:	52                   	push   edx
c001f9d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f9d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f9d9:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9de:	76 10                	jbe    c001f9f0 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f9e0:	83 ec 0c             	sub    esp,0xc
c001f9e3:	68 8d c9 02 c0       	push   0xc002c98d
c001f9e8:	e8 22 ac ff ff       	call   c001a60f <Krnl::panic(char const*)>
c001f9ed:	83 c4 10             	add    esp,0x10
c001f9f0:	a0 c1 1b 03 c0       	mov    al,ds:0xc0031bc1
c001f9f5:	b9 08 00 00 00       	mov    ecx,0x8
c001f9fa:	c0 e8 03             	shr    al,0x3
c001f9fd:	83 e0 07             	and    eax,0x7
c001fa00:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa04:	99                   	cdq    
c001fa05:	f7 f9                	idiv   ecx
c001fa07:	89 34 d5 c4 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce43c],esi
c001fa0e:	89 3c d5 c8 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce438],edi
c001fa15:	58                   	pop    eax
c001fa16:	5e                   	pop    esi
c001fa17:	5f                   	pop    edi
c001fa18:	c3                   	ret    

c001fa19 <Vm::fpuPush(unsigned long long)>:
c001fa19:	a0 c1 1b 03 c0       	mov    al,ds:0xc0031bc1
c001fa1e:	c0 e8 03             	shr    al,0x3
c001fa21:	83 e0 07             	and    eax,0x7
c001fa24:	83 c0 07             	add    eax,0x7
c001fa27:	88 c2                	mov    dl,al
c001fa29:	83 e0 07             	and    eax,0x7
c001fa2c:	83 e2 07             	and    edx,0x7
c001fa2f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fa36:	8a 15 c1 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031bc1
c001fa3c:	83 e2 c7             	and    edx,0xffffffc7
c001fa3f:	09 ca                	or     edx,ecx
c001fa41:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa45:	88 15 c1 1b 03 c0    	mov    BYTE PTR ds:0xc0031bc1,dl
c001fa4b:	89 0c c5 c8 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce438],ecx
c001fa52:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa56:	89 14 c5 c4 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce43c],edx
c001fa5d:	a1 04 1c 03 c0       	mov    eax,ds:0xc0031c04
c001fa62:	83 f8 08             	cmp    eax,0x8
c001fa65:	75 08                	jne    c001fa6f <Vm::fpuPush(unsigned long long)+0x56>
c001fa67:	80 0d c0 1b 03 c0 40 	or     BYTE PTR ds:0xc0031bc0,0x40
c001fa6e:	c3                   	ret    
c001fa6f:	40                   	inc    eax
c001fa70:	a3 04 1c 03 c0       	mov    ds:0xc0031c04,eax
c001fa75:	c3                   	ret    

c001fa76 <Vm::fpuPop()>:
c001fa76:	8a 0d c1 1b 03 c0    	mov    cl,BYTE PTR ds:0xc0031bc1
c001fa7c:	53                   	push   ebx
c001fa7d:	c0 e9 03             	shr    cl,0x3
c001fa80:	8a 1d c1 1b 03 c0    	mov    bl,BYTE PTR ds:0xc0031bc1
c001fa86:	83 e1 07             	and    ecx,0x7
c001fa89:	83 e3 c7             	and    ebx,0xffffffc7
c001fa8c:	8b 04 cd c4 1b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce43c]
c001fa93:	8b 14 cd c8 1b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce438]
c001fa9a:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001faa1:	83 e1 38             	and    ecx,0x38
c001faa4:	09 d9                	or     ecx,ebx
c001faa6:	88 0d c1 1b 03 c0    	mov    BYTE PTR ds:0xc0031bc1,cl
c001faac:	8b 0d 04 1c 03 c0    	mov    ecx,DWORD PTR ds:0xc0031c04
c001fab2:	85 c9                	test   ecx,ecx
c001fab4:	74 09                	je     c001fabf <Vm::fpuPop()+0x49>
c001fab6:	49                   	dec    ecx
c001fab7:	89 0d 04 1c 03 c0    	mov    DWORD PTR ds:0xc0031c04,ecx
c001fabd:	eb 07                	jmp    c001fac6 <Vm::fpuPop()+0x50>
c001fabf:	80 0d c0 1b 03 c0 40 	or     BYTE PTR ds:0xc0031bc0,0x40
c001fac6:	5b                   	pop    ebx
c001fac7:	c3                   	ret    

c001fac8 <Vm::x87Handler(regs*)>:
c001fac8:	55                   	push   ebp
c001fac9:	57                   	push   edi
c001faca:	56                   	push   esi
c001facb:	53                   	push   ebx
c001facc:	83 ec 1c             	sub    esp,0x1c
c001facf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fad3:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fad8:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fadb:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fae3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fae7:	50                   	push   eax
c001fae8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001faec:	50                   	push   eax
c001faed:	8d 44 24 14          	lea    eax,[esp+0x14]
c001faf1:	50                   	push   eax
c001faf2:	53                   	push   ebx
c001faf3:	e8 de a1 ff ff       	call   c0019cd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001faf8:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fafb:	83 c4 10             	add    esp,0x10
c001fafe:	89 c6                	mov    esi,eax
c001fb00:	80 fa d9             	cmp    dl,0xd9
c001fb03:	0f 85 52 01 00 00    	jne    c001fc5b <Vm::x87Handler(regs*)+0x193>
c001fb09:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb0d:	8d 50 20             	lea    edx,[eax+0x20]
c001fb10:	80 fa 0e             	cmp    dl,0xe
c001fb13:	0f 87 86 00 00 00    	ja     c001fb9f <Vm::x87Handler(regs*)+0xd7>
c001fb19:	0f b6 d2             	movzx  edx,dl
c001fb1c:	ff 24 95 a0 c9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3660]
c001fb23:	e8 e7 fc ff ff       	call   c001f80f <Vm::fpuGet0()>
c001fb28:	eb 05                	jmp    c001fb2f <Vm::x87Handler(regs*)+0x67>
c001fb2a:	e8 e5 fc ff ff       	call   c001f814 <Vm::fpuGet1()>
c001fb2f:	57                   	push   edi
c001fb30:	57                   	push   edi
c001fb31:	52                   	push   edx
c001fb32:	50                   	push   eax
c001fb33:	e8 e1 fe ff ff       	call   c001fa19 <Vm::fpuPush(unsigned long long)>
c001fb38:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb3c:	83 c4 10             	add    esp,0x10
c001fb3f:	b0 01                	mov    al,0x1
c001fb41:	e9 e3 09 00 00       	jmp    c0020529 <Vm::x87Handler(regs*)+0xa61>
c001fb46:	83 ec 0c             	sub    esp,0xc
c001fb49:	6a 00                	push   0x0
c001fb4b:	e8 3b fe ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fb50:	59                   	pop    ecx
c001fb51:	5e                   	pop    esi
c001fb52:	52                   	push   edx
c001fb53:	50                   	push   eax
c001fb54:	e8 c2 fd ff ff       	call   c001f91b <Vm::fpuChs(unsigned long long)>
c001fb59:	eb 13                	jmp    c001fb6e <Vm::x87Handler(regs*)+0xa6>
c001fb5b:	83 ec 0c             	sub    esp,0xc
c001fb5e:	6a 00                	push   0x0
c001fb60:	e8 26 fe ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fb65:	5f                   	pop    edi
c001fb66:	5d                   	pop    ebp
c001fb67:	52                   	push   edx
c001fb68:	50                   	push   eax
c001fb69:	e8 a4 fd ff ff       	call   c001f912 <Vm::fpuAbs(unsigned long long)>
c001fb6e:	83 c4 0c             	add    esp,0xc
c001fb71:	52                   	push   edx
c001fb72:	50                   	push   eax
c001fb73:	6a 00                	push   0x0
c001fb75:	e8 54 fe ff ff       	call   c001f9ce <Vm::fpuSetReg(int, unsigned long long)>
c001fb7a:	eb bc                	jmp    c001fb38 <Vm::x87Handler(regs*)+0x70>
c001fb7c:	e8 d3 fc ff ff       	call   c001f854 <Vm::fpuGetLog210()>
c001fb81:	eb ac                	jmp    c001fb2f <Vm::x87Handler(regs*)+0x67>
c001fb83:	e8 9c fc ff ff       	call   c001f824 <Vm::fpuGetLog2E()>
c001fb88:	eb a5                	jmp    c001fb2f <Vm::x87Handler(regs*)+0x67>
c001fb8a:	e8 8d fc ff ff       	call   c001f81c <Vm::fpuGetPi()>
c001fb8f:	eb 9e                	jmp    c001fb2f <Vm::x87Handler(regs*)+0x67>
c001fb91:	e8 d6 fc ff ff       	call   c001f86c <Vm::fpuGetLog102()>
c001fb96:	eb 97                	jmp    c001fb2f <Vm::x87Handler(regs*)+0x67>
c001fb98:	e8 9f fc ff ff       	call   c001f83c <Vm::fpuGetLogE2()>
c001fb9d:	eb 90                	jmp    c001fb2f <Vm::x87Handler(regs*)+0x67>
c001fb9f:	8d 50 40             	lea    edx,[eax+0x40]
c001fba2:	80 fa 07             	cmp    dl,0x7
c001fba5:	77 15                	ja     c001fbbc <Vm::x87Handler(regs*)+0xf4>
c001fba7:	83 ec 0c             	sub    esp,0xc
c001fbaa:	2d c0 00 00 00       	sub    eax,0xc0
c001fbaf:	50                   	push   eax
c001fbb0:	e8 d6 fd ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fbb5:	59                   	pop    ecx
c001fbb6:	5e                   	pop    esi
c001fbb7:	e9 75 ff ff ff       	jmp    c001fb31 <Vm::x87Handler(regs*)+0x69>
c001fbbc:	8d 50 38             	lea    edx,[eax+0x38]
c001fbbf:	80 fa 07             	cmp    dl,0x7
c001fbc2:	77 3c                	ja     c001fc00 <Vm::x87Handler(regs*)+0x138>
c001fbc4:	83 ec 0c             	sub    esp,0xc
c001fbc7:	2d c8 00 00 00       	sub    eax,0xc8
c001fbcc:	50                   	push   eax
c001fbcd:	e8 b9 fd ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fbd2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbd9:	89 c6                	mov    esi,eax
c001fbdb:	89 d7                	mov    edi,edx
c001fbdd:	e8 a9 fd ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fbe2:	83 c4 0c             	add    esp,0xc
c001fbe5:	52                   	push   edx
c001fbe6:	50                   	push   eax
c001fbe7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbeb:	2d c8 00 00 00       	sub    eax,0xc8
c001fbf0:	50                   	push   eax
c001fbf1:	e8 d8 fd ff ff       	call   c001f9ce <Vm::fpuSetReg(int, unsigned long long)>
c001fbf6:	83 c4 0c             	add    esp,0xc
c001fbf9:	57                   	push   edi
c001fbfa:	56                   	push   esi
c001fbfb:	e9 73 ff ff ff       	jmp    c001fb73 <Vm::x87Handler(regs*)+0xab>
c001fc00:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc04:	84 d2                	test   dl,dl
c001fc06:	75 0f                	jne    c001fc17 <Vm::x87Handler(regs*)+0x14f>
c001fc08:	83 ec 0c             	sub    esp,0xc
c001fc0b:	ff 36                	push   DWORD PTR [esi]
c001fc0d:	e8 c8 fa ff ff       	call   c001f6da <Vm::fpu32ToInternal(unsigned int)>
c001fc12:	e9 bf 00 00 00       	jmp    c001fcd6 <Vm::x87Handler(regs*)+0x20e>
c001fc17:	80 fa 03             	cmp    dl,0x3
c001fc1a:	75 13                	jne    c001fc2f <Vm::x87Handler(regs*)+0x167>
c001fc1c:	e8 55 fe ff ff       	call   c001fa76 <Vm::fpuPop()>
c001fc21:	55                   	push   ebp
c001fc22:	55                   	push   ebp
c001fc23:	52                   	push   edx
c001fc24:	50                   	push   eax
c001fc25:	e8 4c fa ff ff       	call   c001f676 <Vm::fpuInternalTo32(unsigned long long)>
c001fc2a:	e9 88 00 00 00       	jmp    c001fcb7 <Vm::x87Handler(regs*)+0x1ef>
c001fc2f:	80 fa 05             	cmp    dl,0x5
c001fc32:	75 0e                	jne    c001fc42 <Vm::x87Handler(regs*)+0x17a>
c001fc34:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc37:	66 a3 c2 1b 03 c0    	mov    ds:0xc0031bc2,ax
c001fc3d:	e9 df 00 00 00       	jmp    c001fd21 <Vm::x87Handler(regs*)+0x259>
c001fc42:	31 c0                	xor    eax,eax
c001fc44:	80 fa 07             	cmp    dl,0x7
c001fc47:	0f 85 dc 08 00 00    	jne    c0020529 <Vm::x87Handler(regs*)+0xa61>
c001fc4d:	66 a1 c2 1b 03 c0    	mov    ax,ds:0xc0031bc2
c001fc53:	66 89 06             	mov    WORD PTR [esi],ax
c001fc56:	e9 c6 00 00 00       	jmp    c001fd21 <Vm::x87Handler(regs*)+0x259>
c001fc5b:	80 fa d8             	cmp    dl,0xd8
c001fc5e:	0f 84 c9 00 00 00    	je     c001fd2d <Vm::x87Handler(regs*)+0x265>
c001fc64:	80 fa dc             	cmp    dl,0xdc
c001fc67:	0f 84 0d 02 00 00    	je     c001fe7a <Vm::x87Handler(regs*)+0x3b2>
c001fc6d:	80 fa de             	cmp    dl,0xde
c001fc70:	0f 84 cd 02 00 00    	je     c001ff43 <Vm::x87Handler(regs*)+0x47b>
c001fc76:	80 fa dd             	cmp    dl,0xdd
c001fc79:	0f 84 5f 04 00 00    	je     c00200de <Vm::x87Handler(regs*)+0x616>
c001fc7f:	80 fa da             	cmp    dl,0xda
c001fc82:	0f 84 24 05 00 00    	je     c00201ac <Vm::x87Handler(regs*)+0x6e4>
c001fc88:	80 fa df             	cmp    dl,0xdf
c001fc8b:	0f 84 68 05 00 00    	je     c00201f9 <Vm::x87Handler(regs*)+0x731>
c001fc91:	31 c0                	xor    eax,eax
c001fc93:	80 fa db             	cmp    dl,0xdb
c001fc96:	0f 85 8d 08 00 00    	jne    c0020529 <Vm::x87Handler(regs*)+0xa61>
c001fc9c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fca0:	80 fa 03             	cmp    dl,0x3
c001fca3:	0f 85 70 06 00 00    	jne    c0020319 <Vm::x87Handler(regs*)+0x851>
c001fca9:	e8 c8 fd ff ff       	call   c001fa76 <Vm::fpuPop()>
c001fcae:	55                   	push   ebp
c001fcaf:	55                   	push   ebp
c001fcb0:	52                   	push   edx
c001fcb1:	50                   	push   eax
c001fcb2:	e8 71 fa ff ff       	call   c001f728 <Vm::fpuFloatToLong(unsigned long long)>
c001fcb7:	83 c4 10             	add    esp,0x10
c001fcba:	89 06                	mov    DWORD PTR [esi],eax
c001fcbc:	eb 63                	jmp    c001fd21 <Vm::x87Handler(regs*)+0x259>
c001fcbe:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcc2:	84 d2                	test   dl,dl
c001fcc4:	0f 85 e6 05 00 00    	jne    c00202b0 <Vm::x87Handler(regs*)+0x7e8>
c001fcca:	57                   	push   edi
c001fccb:	57                   	push   edi
c001fccc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fccf:	ff 36                	push   DWORD PTR [esi]
c001fcd1:	e8 49 fa ff ff       	call   c001f71f <Vm::fpu64ToInternal(unsigned long long)>
c001fcd6:	5e                   	pop    esi
c001fcd7:	5f                   	pop    edi
c001fcd8:	52                   	push   edx
c001fcd9:	50                   	push   eax
c001fcda:	e8 3a fd ff ff       	call   c001fa19 <Vm::fpuPush(unsigned long long)>
c001fcdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fce3:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fce6:	e9 51 fe ff ff       	jmp    c001fb3c <Vm::x87Handler(regs*)+0x74>
c001fceb:	80 fa 03             	cmp    dl,0x3
c001fcee:	0f 85 d7 06 00 00    	jne    c00203cb <Vm::x87Handler(regs*)+0x903>
c001fcf4:	57                   	push   edi
c001fcf5:	57                   	push   edi
c001fcf6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcf9:	ff 36                	push   DWORD PTR [esi]
c001fcfb:	e8 1f fa ff ff       	call   c001f71f <Vm::fpu64ToInternal(unsigned long long)>
c001fd00:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd07:	89 c6                	mov    esi,eax
c001fd09:	89 d7                	mov    edi,edx
c001fd0b:	e8 7b fc ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fd10:	57                   	push   edi
c001fd11:	56                   	push   esi
c001fd12:	52                   	push   edx
c001fd13:	50                   	push   eax
c001fd14:	e8 95 fb ff ff       	call   c001f8ae <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd19:	83 c4 20             	add    esp,0x20
c001fd1c:	e8 55 fd ff ff       	call   c001fa76 <Vm::fpuPop()>
c001fd21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd25:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd28:	e9 12 fe ff ff       	jmp    c001fb3f <Vm::x87Handler(regs*)+0x77>
c001fd2d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd31:	8d 50 40             	lea    edx,[eax+0x40]
c001fd34:	80 fa 07             	cmp    dl,0x7
c001fd37:	77 29                	ja     c001fd62 <Vm::x87Handler(regs*)+0x29a>
c001fd39:	83 ec 0c             	sub    esp,0xc
c001fd3c:	2d c0 00 00 00       	sub    eax,0xc0
c001fd41:	50                   	push   eax
c001fd42:	e8 44 fc ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fd47:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd4e:	89 c6                	mov    esi,eax
c001fd50:	89 d7                	mov    edi,edx
c001fd52:	e8 34 fc ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fd57:	57                   	push   edi
c001fd58:	56                   	push   esi
c001fd59:	52                   	push   edx
c001fd5a:	50                   	push   eax
c001fd5b:	e8 a1 fb ff ff       	call   c001f901 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd60:	eb 2f                	jmp    c001fd91 <Vm::x87Handler(regs*)+0x2c9>
c001fd62:	8d 50 38             	lea    edx,[eax+0x38]
c001fd65:	80 fa 07             	cmp    dl,0x7
c001fd68:	77 2f                	ja     c001fd99 <Vm::x87Handler(regs*)+0x2d1>
c001fd6a:	83 ec 0c             	sub    esp,0xc
c001fd6d:	2d c8 00 00 00       	sub    eax,0xc8
c001fd72:	50                   	push   eax
c001fd73:	e8 13 fc ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fd78:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd7f:	89 c6                	mov    esi,eax
c001fd81:	89 d7                	mov    edi,edx
c001fd83:	e8 03 fc ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fd88:	57                   	push   edi
c001fd89:	56                   	push   esi
c001fd8a:	52                   	push   edx
c001fd8b:	50                   	push   eax
c001fd8c:	e8 a9 fb ff ff       	call   c001f93a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd91:	83 c4 1c             	add    esp,0x1c
c001fd94:	e9 d8 fd ff ff       	jmp    c001fb71 <Vm::x87Handler(regs*)+0xa9>
c001fd99:	8d 50 30             	lea    edx,[eax+0x30]
c001fd9c:	80 fa 07             	cmp    dl,0x7
c001fd9f:	77 0d                	ja     c001fdae <Vm::x87Handler(regs*)+0x2e6>
c001fda1:	83 ec 0c             	sub    esp,0xc
c001fda4:	2d d0 00 00 00       	sub    eax,0xd0
c001fda9:	e9 99 03 00 00       	jmp    c0020147 <Vm::x87Handler(regs*)+0x67f>
c001fdae:	8d 50 28             	lea    edx,[eax+0x28]
c001fdb1:	80 fa 07             	cmp    dl,0x7
c001fdb4:	77 0d                	ja     c001fdc3 <Vm::x87Handler(regs*)+0x2fb>
c001fdb6:	83 ec 0c             	sub    esp,0xc
c001fdb9:	2d d8 00 00 00       	sub    eax,0xd8
c001fdbe:	e9 c0 03 00 00       	jmp    c0020183 <Vm::x87Handler(regs*)+0x6bb>
c001fdc3:	8d 50 20             	lea    edx,[eax+0x20]
c001fdc6:	80 fa 07             	cmp    dl,0x7
c001fdc9:	77 1b                	ja     c001fde6 <Vm::x87Handler(regs*)+0x31e>
c001fdcb:	83 ec 0c             	sub    esp,0xc
c001fdce:	2d e0 00 00 00       	sub    eax,0xe0
c001fdd3:	50                   	push   eax
c001fdd4:	e8 b2 fb ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fdd9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fde0:	89 c6                	mov    esi,eax
c001fde2:	89 d7                	mov    edi,edx
c001fde4:	eb 22                	jmp    c001fe08 <Vm::x87Handler(regs*)+0x340>
c001fde6:	8d 50 18             	lea    edx,[eax+0x18]
c001fde9:	80 fa 07             	cmp    dl,0x7
c001fdec:	77 2d                	ja     c001fe1b <Vm::x87Handler(regs*)+0x353>
c001fdee:	83 ec 0c             	sub    esp,0xc
c001fdf1:	6a 00                	push   0x0
c001fdf3:	e8 93 fb ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fdf8:	89 c6                	mov    esi,eax
c001fdfa:	89 d7                	mov    edi,edx
c001fdfc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe00:	2d e8 00 00 00       	sub    eax,0xe8
c001fe05:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe08:	e8 7e fb ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fe0d:	57                   	push   edi
c001fe0e:	56                   	push   esi
c001fe0f:	52                   	push   edx
c001fe10:	50                   	push   eax
c001fe11:	e8 15 fb ff ff       	call   c001f92b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe16:	e9 76 ff ff ff       	jmp    c001fd91 <Vm::x87Handler(regs*)+0x2c9>
c001fe1b:	8d 50 10             	lea    edx,[eax+0x10]
c001fe1e:	80 fa 07             	cmp    dl,0x7
c001fe21:	77 1b                	ja     c001fe3e <Vm::x87Handler(regs*)+0x376>
c001fe23:	83 ec 0c             	sub    esp,0xc
c001fe26:	2d f0 00 00 00       	sub    eax,0xf0
c001fe2b:	50                   	push   eax
c001fe2c:	e8 5a fb ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fe31:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe38:	89 c6                	mov    esi,eax
c001fe3a:	89 d7                	mov    edi,edx
c001fe3c:	eb 22                	jmp    c001fe60 <Vm::x87Handler(regs*)+0x398>
c001fe3e:	3c f7                	cmp    al,0xf7
c001fe40:	0f 86 d1 03 00 00    	jbe    c0020217 <Vm::x87Handler(regs*)+0x74f>
c001fe46:	83 ec 0c             	sub    esp,0xc
c001fe49:	6a 00                	push   0x0
c001fe4b:	e8 3b fb ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fe50:	89 c6                	mov    esi,eax
c001fe52:	89 d7                	mov    edi,edx
c001fe54:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe58:	2d f8 00 00 00       	sub    eax,0xf8
c001fe5d:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe60:	e8 26 fb ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fe65:	57                   	push   edi
c001fe66:	56                   	push   esi
c001fe67:	52                   	push   edx
c001fe68:	50                   	push   eax
c001fe69:	e8 eb fa ff ff       	call   c001f959 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe6e:	83 c4 1c             	add    esp,0x1c
c001fe71:	52                   	push   edx
c001fe72:	50                   	push   eax
c001fe73:	6a 00                	push   0x0
c001fe75:	e9 51 02 00 00       	jmp    c00200cb <Vm::x87Handler(regs*)+0x603>
c001fe7a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe7e:	8d 50 40             	lea    edx,[eax+0x40]
c001fe81:	80 fa 07             	cmp    dl,0x7
c001fe84:	77 37                	ja     c001febd <Vm::x87Handler(regs*)+0x3f5>
c001fe86:	83 ec 0c             	sub    esp,0xc
c001fe89:	2d c0 00 00 00       	sub    eax,0xc0
c001fe8e:	50                   	push   eax
c001fe8f:	e8 f7 fa ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fe94:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe9b:	89 c6                	mov    esi,eax
c001fe9d:	89 d7                	mov    edi,edx
c001fe9f:	e8 e7 fa ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fea4:	57                   	push   edi
c001fea5:	56                   	push   esi
c001fea6:	52                   	push   edx
c001fea7:	50                   	push   eax
c001fea8:	e8 54 fa ff ff       	call   c001f901 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fead:	83 c4 1c             	add    esp,0x1c
c001feb0:	52                   	push   edx
c001feb1:	50                   	push   eax
c001feb2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feb6:	2d c0 00 00 00       	sub    eax,0xc0
c001febb:	eb 3d                	jmp    c001fefa <Vm::x87Handler(regs*)+0x432>
c001febd:	8d 50 38             	lea    edx,[eax+0x38]
c001fec0:	80 fa 07             	cmp    dl,0x7
c001fec3:	77 3b                	ja     c001ff00 <Vm::x87Handler(regs*)+0x438>
c001fec5:	83 ec 0c             	sub    esp,0xc
c001fec8:	2d c8 00 00 00       	sub    eax,0xc8
c001fecd:	50                   	push   eax
c001fece:	e8 b8 fa ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fed3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feda:	89 c6                	mov    esi,eax
c001fedc:	89 d7                	mov    edi,edx
c001fede:	e8 a8 fa ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fee3:	57                   	push   edi
c001fee4:	56                   	push   esi
c001fee5:	52                   	push   edx
c001fee6:	50                   	push   eax
c001fee7:	e8 4e fa ff ff       	call   c001f93a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001feec:	83 c4 1c             	add    esp,0x1c
c001feef:	52                   	push   edx
c001fef0:	50                   	push   eax
c001fef1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fef5:	2d c8 00 00 00       	sub    eax,0xc8
c001fefa:	50                   	push   eax
c001fefb:	e9 75 fc ff ff       	jmp    c001fb75 <Vm::x87Handler(regs*)+0xad>
c001ff00:	83 c0 18             	add    eax,0x18
c001ff03:	3c 07                	cmp    al,0x7
c001ff05:	0f 87 3b 04 00 00    	ja     c0020346 <Vm::x87Handler(regs*)+0x87e>
c001ff0b:	83 ec 0c             	sub    esp,0xc
c001ff0e:	6a 00                	push   0x0
c001ff10:	e8 76 fa ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001ff15:	89 c6                	mov    esi,eax
c001ff17:	89 d7                	mov    edi,edx
c001ff19:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff1d:	2d e8 00 00 00       	sub    eax,0xe8
c001ff22:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff25:	e8 61 fa ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001ff2a:	57                   	push   edi
c001ff2b:	56                   	push   esi
c001ff2c:	52                   	push   edx
c001ff2d:	50                   	push   eax
c001ff2e:	e8 f8 f9 ff ff       	call   c001f92b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff33:	83 c4 1c             	add    esp,0x1c
c001ff36:	52                   	push   edx
c001ff37:	50                   	push   eax
c001ff38:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff3c:	2d e8 00 00 00       	sub    eax,0xe8
c001ff41:	eb b7                	jmp    c001fefa <Vm::x87Handler(regs*)+0x432>
c001ff43:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff47:	8d 50 40             	lea    edx,[eax+0x40]
c001ff4a:	80 fa 07             	cmp    dl,0x7
c001ff4d:	77 3a                	ja     c001ff89 <Vm::x87Handler(regs*)+0x4c1>
c001ff4f:	83 ec 0c             	sub    esp,0xc
c001ff52:	2d c0 00 00 00       	sub    eax,0xc0
c001ff57:	50                   	push   eax
c001ff58:	e8 2e fa ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001ff5d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff64:	89 c6                	mov    esi,eax
c001ff66:	89 d7                	mov    edi,edx
c001ff68:	e8 1e fa ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001ff6d:	57                   	push   edi
c001ff6e:	56                   	push   esi
c001ff6f:	52                   	push   edx
c001ff70:	50                   	push   eax
c001ff71:	e8 8b f9 ff ff       	call   c001f901 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff76:	83 c4 1c             	add    esp,0x1c
c001ff79:	52                   	push   edx
c001ff7a:	50                   	push   eax
c001ff7b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff7f:	2d c0 00 00 00       	sub    eax,0xc0
c001ff84:	e9 9e 01 00 00       	jmp    c0020127 <Vm::x87Handler(regs*)+0x65f>
c001ff89:	8d 50 20             	lea    edx,[eax+0x20]
c001ff8c:	80 fa 07             	cmp    dl,0x7
c001ff8f:	77 3a                	ja     c001ffcb <Vm::x87Handler(regs*)+0x503>
c001ff91:	83 ec 0c             	sub    esp,0xc
c001ff94:	2d e0 00 00 00       	sub    eax,0xe0
c001ff99:	50                   	push   eax
c001ff9a:	e8 ec f9 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001ff9f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffa6:	89 c6                	mov    esi,eax
c001ffa8:	89 d7                	mov    edi,edx
c001ffaa:	e8 dc f9 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001ffaf:	57                   	push   edi
c001ffb0:	56                   	push   esi
c001ffb1:	52                   	push   edx
c001ffb2:	50                   	push   eax
c001ffb3:	e8 73 f9 ff ff       	call   c001f92b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffb8:	83 c4 1c             	add    esp,0x1c
c001ffbb:	52                   	push   edx
c001ffbc:	50                   	push   eax
c001ffbd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffc1:	2d e0 00 00 00       	sub    eax,0xe0
c001ffc6:	e9 5c 01 00 00       	jmp    c0020127 <Vm::x87Handler(regs*)+0x65f>
c001ffcb:	8d 50 18             	lea    edx,[eax+0x18]
c001ffce:	80 fa 07             	cmp    dl,0x7
c001ffd1:	77 3b                	ja     c002000e <Vm::x87Handler(regs*)+0x546>
c001ffd3:	83 ec 0c             	sub    esp,0xc
c001ffd6:	6a 00                	push   0x0
c001ffd8:	e8 ae f9 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001ffdd:	89 c6                	mov    esi,eax
c001ffdf:	89 d7                	mov    edi,edx
c001ffe1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffe5:	2d e8 00 00 00       	sub    eax,0xe8
c001ffea:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffed:	e8 99 f9 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c001fff2:	57                   	push   edi
c001fff3:	56                   	push   esi
c001fff4:	52                   	push   edx
c001fff5:	50                   	push   eax
c001fff6:	e8 30 f9 ff ff       	call   c001f92b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fffb:	83 c4 1c             	add    esp,0x1c
c001fffe:	52                   	push   edx
c001ffff:	50                   	push   eax
c0020000:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020004:	2d e8 00 00 00       	sub    eax,0xe8
c0020009:	e9 19 01 00 00       	jmp    c0020127 <Vm::x87Handler(regs*)+0x65f>
c002000e:	8d 50 38             	lea    edx,[eax+0x38]
c0020011:	80 fa 07             	cmp    dl,0x7
c0020014:	77 37                	ja     c002004d <Vm::x87Handler(regs*)+0x585>
c0020016:	83 ec 0c             	sub    esp,0xc
c0020019:	2d c8 00 00 00       	sub    eax,0xc8
c002001e:	50                   	push   eax
c002001f:	e8 67 f9 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c0020024:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002002b:	89 c6                	mov    esi,eax
c002002d:	89 d7                	mov    edi,edx
c002002f:	e8 57 f9 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c0020034:	57                   	push   edi
c0020035:	56                   	push   esi
c0020036:	52                   	push   edx
c0020037:	50                   	push   eax
c0020038:	e8 fd f8 ff ff       	call   c001f93a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002003d:	83 c4 1c             	add    esp,0x1c
c0020040:	52                   	push   edx
c0020041:	50                   	push   eax
c0020042:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020046:	2d c8 00 00 00       	sub    eax,0xc8
c002004b:	eb 7d                	jmp    c00200ca <Vm::x87Handler(regs*)+0x602>
c002004d:	3c f7                	cmp    al,0xf7
c002004f:	76 38                	jbe    c0020089 <Vm::x87Handler(regs*)+0x5c1>
c0020051:	83 ec 0c             	sub    esp,0xc
c0020054:	6a 00                	push   0x0
c0020056:	e8 30 f9 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c002005b:	89 c6                	mov    esi,eax
c002005d:	89 d7                	mov    edi,edx
c002005f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020063:	2d f8 00 00 00       	sub    eax,0xf8
c0020068:	89 04 24             	mov    DWORD PTR [esp],eax
c002006b:	e8 1b f9 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c0020070:	57                   	push   edi
c0020071:	56                   	push   esi
c0020072:	52                   	push   edx
c0020073:	50                   	push   eax
c0020074:	e8 e0 f8 ff ff       	call   c001f959 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020079:	83 c4 1c             	add    esp,0x1c
c002007c:	52                   	push   edx
c002007d:	50                   	push   eax
c002007e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020082:	2d f8 00 00 00       	sub    eax,0xf8
c0020087:	eb 41                	jmp    c00200ca <Vm::x87Handler(regs*)+0x602>
c0020089:	8d 50 10             	lea    edx,[eax+0x10]
c002008c:	80 fa 07             	cmp    dl,0x7
c002008f:	0f 87 5a 01 00 00    	ja     c00201ef <Vm::x87Handler(regs*)+0x727>
c0020095:	83 ec 0c             	sub    esp,0xc
c0020098:	2d f0 00 00 00       	sub    eax,0xf0
c002009d:	50                   	push   eax
c002009e:	e8 e8 f8 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c00200a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200aa:	89 c6                	mov    esi,eax
c00200ac:	89 d7                	mov    edi,edx
c00200ae:	e8 d8 f8 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c00200b3:	57                   	push   edi
c00200b4:	56                   	push   esi
c00200b5:	52                   	push   edx
c00200b6:	50                   	push   eax
c00200b7:	e8 9d f8 ff ff       	call   c001f959 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200bc:	83 c4 1c             	add    esp,0x1c
c00200bf:	52                   	push   edx
c00200c0:	50                   	push   eax
c00200c1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200c5:	2d f0 00 00 00       	sub    eax,0xf0
c00200ca:	50                   	push   eax
c00200cb:	e8 fe f8 ff ff       	call   c001f9ce <Vm::fpuSetReg(int, unsigned long long)>
c00200d0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200d4:	e8 9d f9 ff ff       	call   c001fa76 <Vm::fpuPop()>
c00200d9:	e9 5e fa ff ff       	jmp    c001fb3c <Vm::x87Handler(regs*)+0x74>
c00200de:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200e2:	8d 50 30             	lea    edx,[eax+0x30]
c00200e5:	80 fa 07             	cmp    dl,0x7
c00200e8:	77 1d                	ja     c0020107 <Vm::x87Handler(regs*)+0x63f>
c00200ea:	83 ec 0c             	sub    esp,0xc
c00200ed:	6a 00                	push   0x0
c00200ef:	e8 97 f8 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c00200f4:	83 c4 0c             	add    esp,0xc
c00200f7:	52                   	push   edx
c00200f8:	50                   	push   eax
c00200f9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200fd:	2d d0 00 00 00       	sub    eax,0xd0
c0020102:	e9 f3 fd ff ff       	jmp    c001fefa <Vm::x87Handler(regs*)+0x432>
c0020107:	8d 50 28             	lea    edx,[eax+0x28]
c002010a:	80 fa 07             	cmp    dl,0x7
c002010d:	77 28                	ja     c0020137 <Vm::x87Handler(regs*)+0x66f>
c002010f:	83 ec 0c             	sub    esp,0xc
c0020112:	6a 00                	push   0x0
c0020114:	e8 72 f8 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c0020119:	83 c4 0c             	add    esp,0xc
c002011c:	52                   	push   edx
c002011d:	50                   	push   eax
c002011e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020122:	2d d8 00 00 00       	sub    eax,0xd8
c0020127:	50                   	push   eax
c0020128:	e8 a1 f8 ff ff       	call   c001f9ce <Vm::fpuSetReg(int, unsigned long long)>
c002012d:	e8 44 f9 ff ff       	call   c001fa76 <Vm::fpuPop()>
c0020132:	e9 01 fa ff ff       	jmp    c001fb38 <Vm::x87Handler(regs*)+0x70>
c0020137:	8d 50 20             	lea    edx,[eax+0x20]
c002013a:	80 fa 07             	cmp    dl,0x7
c002013d:	77 30                	ja     c002016f <Vm::x87Handler(regs*)+0x6a7>
c002013f:	83 ec 0c             	sub    esp,0xc
c0020142:	2d e0 00 00 00       	sub    eax,0xe0
c0020147:	50                   	push   eax
c0020148:	e8 3e f8 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c002014d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020154:	89 c6                	mov    esi,eax
c0020156:	89 d7                	mov    edi,edx
c0020158:	e8 2e f8 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c002015d:	57                   	push   edi
c002015e:	56                   	push   esi
c002015f:	52                   	push   edx
c0020160:	50                   	push   eax
c0020161:	e8 48 f7 ff ff       	call   c001f8ae <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020166:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002016a:	e9 54 02 00 00       	jmp    c00203c3 <Vm::x87Handler(regs*)+0x8fb>
c002016f:	8d 50 18             	lea    edx,[eax+0x18]
c0020172:	80 fa 07             	cmp    dl,0x7
c0020175:	0f 87 43 fb ff ff    	ja     c001fcbe <Vm::x87Handler(regs*)+0x1f6>
c002017b:	83 ec 0c             	sub    esp,0xc
c002017e:	2d e8 00 00 00       	sub    eax,0xe8
c0020183:	50                   	push   eax
c0020184:	e8 02 f8 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c0020189:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020190:	89 c6                	mov    esi,eax
c0020192:	89 d7                	mov    edi,edx
c0020194:	e8 f2 f7 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c0020199:	57                   	push   edi
c002019a:	56                   	push   esi
c002019b:	52                   	push   edx
c002019c:	50                   	push   eax
c002019d:	e8 0c f7 ff ff       	call   c001f8ae <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201a2:	83 c4 20             	add    esp,0x20
c00201a5:	e8 cc f8 ff ff       	call   c001fa76 <Vm::fpuPop()>
c00201aa:	eb 62                	jmp    c002020e <Vm::x87Handler(regs*)+0x746>
c00201ac:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00201b0:	0f 85 0f 01 00 00    	jne    c00202c5 <Vm::x87Handler(regs*)+0x7fd>
c00201b6:	83 ec 0c             	sub    esp,0xc
c00201b9:	6a 01                	push   0x1
c00201bb:	e8 cb f7 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c00201c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201c7:	89 c6                	mov    esi,eax
c00201c9:	89 d7                	mov    edi,edx
c00201cb:	e8 bb f7 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c00201d0:	57                   	push   edi
c00201d1:	56                   	push   esi
c00201d2:	52                   	push   edx
c00201d3:	50                   	push   eax
c00201d4:	e8 d5 f6 ff ff       	call   c001f8ae <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201d9:	83 c4 20             	add    esp,0x20
c00201dc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201e0:	e8 91 f8 ff ff       	call   c001fa76 <Vm::fpuPop()>
c00201e5:	e8 8c f8 ff ff       	call   c001fa76 <Vm::fpuPop()>
c00201ea:	e9 50 f9 ff ff       	jmp    c001fb3f <Vm::x87Handler(regs*)+0x77>
c00201ef:	3c d9                	cmp    al,0xd9
c00201f1:	0f 85 b5 02 00 00    	jne    c00204ac <Vm::x87Handler(regs*)+0x9e4>
c00201f7:	eb bd                	jmp    c00201b6 <Vm::x87Handler(regs*)+0x6ee>
c00201f9:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00201fd:	0f 85 ea 02 00 00    	jne    c00204ed <Vm::x87Handler(regs*)+0xa25>
c0020203:	0f b7 05 c0 1b 03 c0 	movzx  eax,WORD PTR ds:0xc0031bc0
c002020a:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c002020e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020212:	e9 28 f9 ff ff       	jmp    c001fb3f <Vm::x87Handler(regs*)+0x77>
c0020217:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002021b:	84 d2                	test   dl,dl
c002021d:	75 0f                	jne    c002022e <Vm::x87Handler(regs*)+0x766>
c002021f:	83 ec 0c             	sub    esp,0xc
c0020222:	ff 36                	push   DWORD PTR [esi]
c0020224:	e8 b1 f4 ff ff       	call   c001f6da <Vm::fpu32ToInternal(unsigned int)>
c0020229:	e9 2c 01 00 00       	jmp    c002035a <Vm::x87Handler(regs*)+0x892>
c002022e:	80 fa 01             	cmp    dl,0x1
c0020231:	75 0f                	jne    c0020242 <Vm::x87Handler(regs*)+0x77a>
c0020233:	83 ec 0c             	sub    esp,0xc
c0020236:	ff 36                	push   DWORD PTR [esi]
c0020238:	e8 9d f4 ff ff       	call   c001f6da <Vm::fpu32ToInternal(unsigned int)>
c002023d:	e9 81 02 00 00       	jmp    c00204c3 <Vm::x87Handler(regs*)+0x9fb>
c0020242:	80 fa 04             	cmp    dl,0x4
c0020245:	75 0f                	jne    c0020256 <Vm::x87Handler(regs*)+0x78e>
c0020247:	83 ec 0c             	sub    esp,0xc
c002024a:	ff 36                	push   DWORD PTR [esi]
c002024c:	e8 89 f4 ff ff       	call   c001f6da <Vm::fpu32ToInternal(unsigned int)>
c0020251:	e9 86 01 00 00       	jmp    c00203dc <Vm::x87Handler(regs*)+0x914>
c0020256:	80 fa 05             	cmp    dl,0x5
c0020259:	75 1b                	jne    c0020276 <Vm::x87Handler(regs*)+0x7ae>
c002025b:	83 ec 0c             	sub    esp,0xc
c002025e:	6a 00                	push   0x0
c0020260:	e8 26 f7 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c0020265:	89 c7                	mov    edi,eax
c0020267:	89 d5                	mov    ebp,edx
c0020269:	58                   	pop    eax
c002026a:	ff 36                	push   DWORD PTR [esi]
c002026c:	e8 69 f4 ff ff       	call   c001f6da <Vm::fpu32ToInternal(unsigned int)>
c0020271:	e9 a3 01 00 00       	jmp    c0020419 <Vm::x87Handler(regs*)+0x951>
c0020276:	80 fa 06             	cmp    dl,0x6
c0020279:	75 0f                	jne    c002028a <Vm::x87Handler(regs*)+0x7c2>
c002027b:	83 ec 0c             	sub    esp,0xc
c002027e:	ff 36                	push   DWORD PTR [esi]
c0020280:	e8 55 f4 ff ff       	call   c001f6da <Vm::fpu32ToInternal(unsigned int)>
c0020285:	e9 ae 01 00 00       	jmp    c0020438 <Vm::x87Handler(regs*)+0x970>
c002028a:	31 c0                	xor    eax,eax
c002028c:	80 fa 07             	cmp    dl,0x7
c002028f:	0f 85 94 02 00 00    	jne    c0020529 <Vm::x87Handler(regs*)+0xa61>
c0020295:	83 ec 0c             	sub    esp,0xc
c0020298:	6a 00                	push   0x0
c002029a:	e8 ec f6 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c002029f:	89 c7                	mov    edi,eax
c00202a1:	89 d5                	mov    ebp,edx
c00202a3:	58                   	pop    eax
c00202a4:	ff 36                	push   DWORD PTR [esi]
c00202a6:	e8 2f f4 ff ff       	call   c001f6da <Vm::fpu32ToInternal(unsigned int)>
c00202ab:	e9 cb 01 00 00       	jmp    c002047b <Vm::x87Handler(regs*)+0x9b3>
c00202b0:	80 fa 03             	cmp    dl,0x3
c00202b3:	0f 85 d3 01 00 00    	jne    c002048c <Vm::x87Handler(regs*)+0x9c4>
c00202b9:	e8 b8 f7 ff ff       	call   c001fa76 <Vm::fpuPop()>
c00202be:	51                   	push   ecx
c00202bf:	51                   	push   ecx
c00202c0:	e9 de 01 00 00       	jmp    c00204a3 <Vm::x87Handler(regs*)+0x9db>
c00202c5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202c9:	80 fa 01             	cmp    dl,0x1
c00202cc:	75 09                	jne    c00202d7 <Vm::x87Handler(regs*)+0x80f>
c00202ce:	57                   	push   edi
c00202cf:	57                   	push   edi
c00202d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00202d2:	e9 e3 01 00 00       	jmp    c00204ba <Vm::x87Handler(regs*)+0x9f2>
c00202d7:	80 fa 04             	cmp    dl,0x4
c00202da:	75 12                	jne    c00202ee <Vm::x87Handler(regs*)+0x826>
c00202dc:	31 d2                	xor    edx,edx
c00202de:	51                   	push   ecx
c00202df:	51                   	push   ecx
c00202e0:	8b 06                	mov    eax,DWORD PTR [esi]
c00202e2:	52                   	push   edx
c00202e3:	50                   	push   eax
c00202e4:	e8 d0 f4 ff ff       	call   c001f7b9 <Vm::fpuLongToFloat(long long)>
c00202e9:	e9 ee 00 00 00       	jmp    c00203dc <Vm::x87Handler(regs*)+0x914>
c00202ee:	31 c0                	xor    eax,eax
c00202f0:	80 fa 07             	cmp    dl,0x7
c00202f3:	0f 85 30 02 00 00    	jne    c0020529 <Vm::x87Handler(regs*)+0xa61>
c00202f9:	83 ec 0c             	sub    esp,0xc
c00202fc:	6a 00                	push   0x0
c00202fe:	e8 88 f6 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c0020303:	89 c7                	mov    edi,eax
c0020305:	89 d5                	mov    ebp,edx
c0020307:	58                   	pop    eax
c0020308:	8b 06                	mov    eax,DWORD PTR [esi]
c002030a:	5a                   	pop    edx
c002030b:	31 d2                	xor    edx,edx
c002030d:	52                   	push   edx
c002030e:	50                   	push   eax
c002030f:	e8 a5 f4 ff ff       	call   c001f7b9 <Vm::fpuLongToFloat(long long)>
c0020314:	e9 62 01 00 00       	jmp    c002047b <Vm::x87Handler(regs*)+0x9b3>
c0020319:	84 d2                	test   dl,dl
c002031b:	75 0d                	jne    c002032a <Vm::x87Handler(regs*)+0x862>
c002031d:	31 d2                	xor    edx,edx
c002031f:	55                   	push   ebp
c0020320:	55                   	push   ebp
c0020321:	8b 06                	mov    eax,DWORD PTR [esi]
c0020323:	52                   	push   edx
c0020324:	50                   	push   eax
c0020325:	e9 d3 01 00 00       	jmp    c00204fd <Vm::x87Handler(regs*)+0xa35>
c002032a:	31 c0                	xor    eax,eax
c002032c:	80 fa 02             	cmp    dl,0x2
c002032f:	0f 85 f4 01 00 00    	jne    c0020529 <Vm::x87Handler(regs*)+0xa61>
c0020335:	83 ec 0c             	sub    esp,0xc
c0020338:	6a 00                	push   0x0
c002033a:	e8 4c f6 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c002033f:	59                   	pop    ecx
c0020340:	5f                   	pop    edi
c0020341:	e9 6a f9 ff ff       	jmp    c001fcb0 <Vm::x87Handler(regs*)+0x1e8>
c0020346:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002034a:	84 d2                	test   dl,dl
c002034c:	75 2a                	jne    c0020378 <Vm::x87Handler(regs*)+0x8b0>
c002034e:	50                   	push   eax
c002034f:	50                   	push   eax
c0020350:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020353:	ff 36                	push   DWORD PTR [esi]
c0020355:	e8 c5 f3 ff ff       	call   c001f71f <Vm::fpu64ToInternal(unsigned long long)>
c002035a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020361:	89 c6                	mov    esi,eax
c0020363:	89 d7                	mov    edi,edx
c0020365:	e8 21 f6 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c002036a:	57                   	push   edi
c002036b:	56                   	push   esi
c002036c:	52                   	push   edx
c002036d:	50                   	push   eax
c002036e:	e8 8e f5 ff ff       	call   c001f901 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020373:	e9 64 01 00 00       	jmp    c00204dc <Vm::x87Handler(regs*)+0xa14>
c0020378:	80 fa 01             	cmp    dl,0x1
c002037b:	75 11                	jne    c002038e <Vm::x87Handler(regs*)+0x8c6>
c002037d:	50                   	push   eax
c002037e:	50                   	push   eax
c002037f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020382:	ff 36                	push   DWORD PTR [esi]
c0020384:	e8 96 f3 ff ff       	call   c001f71f <Vm::fpu64ToInternal(unsigned long long)>
c0020389:	e9 35 01 00 00       	jmp    c00204c3 <Vm::x87Handler(regs*)+0x9fb>
c002038e:	80 fa 02             	cmp    dl,0x2
c0020391:	0f 85 54 f9 ff ff    	jne    c001fceb <Vm::x87Handler(regs*)+0x223>
c0020397:	55                   	push   ebp
c0020398:	55                   	push   ebp
c0020399:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002039c:	ff 36                	push   DWORD PTR [esi]
c002039e:	e8 7c f3 ff ff       	call   c001f71f <Vm::fpu64ToInternal(unsigned long long)>
c00203a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203aa:	89 c6                	mov    esi,eax
c00203ac:	89 d7                	mov    edi,edx
c00203ae:	e8 d8 f5 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c00203b3:	57                   	push   edi
c00203b4:	56                   	push   esi
c00203b5:	52                   	push   edx
c00203b6:	50                   	push   eax
c00203b7:	e8 f2 f4 ff ff       	call   c001f8ae <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00203bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00203c0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00203c3:	83 c4 20             	add    esp,0x20
c00203c6:	e9 74 f7 ff ff       	jmp    c001fb3f <Vm::x87Handler(regs*)+0x77>
c00203cb:	80 fa 04             	cmp    dl,0x4
c00203ce:	75 2a                	jne    c00203fa <Vm::x87Handler(regs*)+0x932>
c00203d0:	51                   	push   ecx
c00203d1:	51                   	push   ecx
c00203d2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203d5:	ff 36                	push   DWORD PTR [esi]
c00203d7:	e8 43 f3 ff ff       	call   c001f71f <Vm::fpu64ToInternal(unsigned long long)>
c00203dc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203e3:	89 c6                	mov    esi,eax
c00203e5:	89 d7                	mov    edi,edx
c00203e7:	e8 9f f5 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c00203ec:	57                   	push   edi
c00203ed:	56                   	push   esi
c00203ee:	52                   	push   edx
c00203ef:	50                   	push   eax
c00203f0:	e8 36 f5 ff ff       	call   c001f92b <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203f5:	e9 e2 00 00 00       	jmp    c00204dc <Vm::x87Handler(regs*)+0xa14>
c00203fa:	80 fa 05             	cmp    dl,0x5
c00203fd:	75 28                	jne    c0020427 <Vm::x87Handler(regs*)+0x95f>
c00203ff:	83 ec 0c             	sub    esp,0xc
c0020402:	6a 00                	push   0x0
c0020404:	e8 82 f5 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c0020409:	89 c7                	mov    edi,eax
c002040b:	89 d5                	mov    ebp,edx
c002040d:	58                   	pop    eax
c002040e:	5a                   	pop    edx
c002040f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020412:	ff 36                	push   DWORD PTR [esi]
c0020414:	e8 06 f3 ff ff       	call   c001f71f <Vm::fpu64ToInternal(unsigned long long)>
c0020419:	83 c4 10             	add    esp,0x10
c002041c:	55                   	push   ebp
c002041d:	57                   	push   edi
c002041e:	52                   	push   edx
c002041f:	50                   	push   eax
c0020420:	e8 06 f5 ff ff       	call   c001f92b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020425:	eb 60                	jmp    c0020487 <Vm::x87Handler(regs*)+0x9bf>
c0020427:	80 fa 06             	cmp    dl,0x6
c002042a:	75 2a                	jne    c0020456 <Vm::x87Handler(regs*)+0x98e>
c002042c:	51                   	push   ecx
c002042d:	51                   	push   ecx
c002042e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020431:	ff 36                	push   DWORD PTR [esi]
c0020433:	e8 e7 f2 ff ff       	call   c001f71f <Vm::fpu64ToInternal(unsigned long long)>
c0020438:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002043f:	89 c6                	mov    esi,eax
c0020441:	89 d7                	mov    edi,edx
c0020443:	e8 43 f5 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c0020448:	57                   	push   edi
c0020449:	56                   	push   esi
c002044a:	52                   	push   edx
c002044b:	50                   	push   eax
c002044c:	e8 08 f5 ff ff       	call   c001f959 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020451:	e9 86 00 00 00       	jmp    c00204dc <Vm::x87Handler(regs*)+0xa14>
c0020456:	31 c0                	xor    eax,eax
c0020458:	80 fa 07             	cmp    dl,0x7
c002045b:	0f 85 c8 00 00 00    	jne    c0020529 <Vm::x87Handler(regs*)+0xa61>
c0020461:	83 ec 0c             	sub    esp,0xc
c0020464:	6a 00                	push   0x0
c0020466:	e8 20 f5 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c002046b:	89 c7                	mov    edi,eax
c002046d:	89 d5                	mov    ebp,edx
c002046f:	58                   	pop    eax
c0020470:	5a                   	pop    edx
c0020471:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020474:	ff 36                	push   DWORD PTR [esi]
c0020476:	e8 a4 f2 ff ff       	call   c001f71f <Vm::fpu64ToInternal(unsigned long long)>
c002047b:	83 c4 10             	add    esp,0x10
c002047e:	55                   	push   ebp
c002047f:	57                   	push   edi
c0020480:	52                   	push   edx
c0020481:	50                   	push   eax
c0020482:	e8 d2 f4 ff ff       	call   c001f959 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020487:	83 c4 0c             	add    esp,0xc
c002048a:	eb 53                	jmp    c00204df <Vm::x87Handler(regs*)+0xa17>
c002048c:	31 c0                	xor    eax,eax
c002048e:	80 fa 02             	cmp    dl,0x2
c0020491:	0f 85 92 00 00 00    	jne    c0020529 <Vm::x87Handler(regs*)+0xa61>
c0020497:	83 ec 0c             	sub    esp,0xc
c002049a:	6a 00                	push   0x0
c002049c:	e8 ea f4 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c00204a1:	59                   	pop    ecx
c00204a2:	5f                   	pop    edi
c00204a3:	52                   	push   edx
c00204a4:	50                   	push   eax
c00204a5:	e8 27 f2 ff ff       	call   c001f6d1 <Vm::fpuInternalTo64(unsigned long long)>
c00204aa:	eb 70                	jmp    c002051c <Vm::x87Handler(regs*)+0xa54>
c00204ac:	31 c0                	xor    eax,eax
c00204ae:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00204b3:	75 74                	jne    c0020529 <Vm::x87Handler(regs*)+0xa61>
c00204b5:	50                   	push   eax
c00204b6:	50                   	push   eax
c00204b7:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00204ba:	31 d2                	xor    edx,edx
c00204bc:	52                   	push   edx
c00204bd:	50                   	push   eax
c00204be:	e8 f6 f2 ff ff       	call   c001f7b9 <Vm::fpuLongToFloat(long long)>
c00204c3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204ca:	89 c6                	mov    esi,eax
c00204cc:	89 d7                	mov    edi,edx
c00204ce:	e8 b8 f4 ff ff       	call   c001f98b <Vm::fpuGetReg(int)>
c00204d3:	57                   	push   edi
c00204d4:	56                   	push   esi
c00204d5:	52                   	push   edx
c00204d6:	50                   	push   eax
c00204d7:	e8 5e f4 ff ff       	call   c001f93a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00204dc:	83 c4 1c             	add    esp,0x1c
c00204df:	52                   	push   edx
c00204e0:	50                   	push   eax
c00204e1:	6a 00                	push   0x0
c00204e3:	e8 e6 f4 ff ff       	call   c001f9ce <Vm::fpuSetReg(int, unsigned long long)>
c00204e8:	e9 f2 f7 ff ff       	jmp    c001fcdf <Vm::x87Handler(regs*)+0x217>
c00204ed:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00204f1:	80 fa 05             	cmp    dl,0x5
c00204f4:	75 11                	jne    c0020507 <Vm::x87Handler(regs*)+0xa3f>
c00204f6:	55                   	push   ebp
c00204f7:	55                   	push   ebp
c00204f8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204fb:	ff 36                	push   DWORD PTR [esi]
c00204fd:	e8 81 f2 ff ff       	call   c001f783 <Vm::fpuULongToFloat(unsigned long long)>
c0020502:	e9 cf f7 ff ff       	jmp    c001fcd6 <Vm::x87Handler(regs*)+0x20e>
c0020507:	31 c0                	xor    eax,eax
c0020509:	80 fa 07             	cmp    dl,0x7
c002050c:	75 1b                	jne    c0020529 <Vm::x87Handler(regs*)+0xa61>
c002050e:	e8 63 f5 ff ff       	call   c001fa76 <Vm::fpuPop()>
c0020513:	51                   	push   ecx
c0020514:	51                   	push   ecx
c0020515:	52                   	push   edx
c0020516:	50                   	push   eax
c0020517:	e8 0c f2 ff ff       	call   c001f728 <Vm::fpuFloatToLong(unsigned long long)>
c002051c:	83 c4 10             	add    esp,0x10
c002051f:	89 06                	mov    DWORD PTR [esi],eax
c0020521:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020524:	e9 f8 f7 ff ff       	jmp    c001fd21 <Vm::x87Handler(regs*)+0x259>
c0020529:	83 c4 1c             	add    esp,0x1c
c002052c:	5b                   	pop    ebx
c002052d:	5e                   	pop    esi
c002052e:	5f                   	pop    edi
c002052f:	5d                   	pop    ebp
c0020530:	c3                   	ret    

c0020531 <__static_initialization_and_destruction_0(int, int)>:
c0020531:	83 ec 0c             	sub    esp,0xc
c0020534:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020539:	75 1a                	jne    c0020555 <__static_initialization_and_destruction_0(int, int)+0x24>
c002053b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020543:	75 10                	jne    c0020555 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020545:	83 ec 0c             	sub    esp,0xc
c0020548:	68 c0 1b 03 c0       	push   0xc0031bc0
c002054d:	e8 0e 88 00 00       	call   c0028d60 <Vm::_FPUState::_FPUState()>
c0020552:	83 c4 10             	add    esp,0x10
c0020555:	90                   	nop
c0020556:	83 c4 0c             	add    esp,0xc
c0020559:	c3                   	ret    

c002055a <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c002055a:	83 ec 0c             	sub    esp,0xc
c002055d:	83 ec 08             	sub    esp,0x8
c0020560:	68 ff ff 00 00       	push   0xffff
c0020565:	6a 01                	push   0x1
c0020567:	e8 c5 ff ff ff       	call   c0020531 <__static_initialization_and_destruction_0(int, int)>
c002056c:	83 c4 10             	add    esp,0x10
c002056f:	83 c4 0c             	add    esp,0xc
c0020572:	c3                   	ret    
c0020573:	90                   	nop

c0020574 <FAT::getName()>:
c0020574:	b8 dc c9 02 c0       	mov    eax,0xc002c9dc
c0020579:	c3                   	ret    

c002057a <FAT::tell(void*, unsigned long long*)>:
c002057a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002057f:	75 06                	jne    c0020587 <FAT::tell(void*, unsigned long long*)+0xd>
c0020581:	b8 04 00 00 00       	mov    eax,0x4
c0020586:	c3                   	ret    
c0020587:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002058c:	75 06                	jne    c0020594 <FAT::tell(void*, unsigned long long*)+0x1a>
c002058e:	b8 04 00 00 00       	mov    eax,0x4
c0020593:	c3                   	ret    
c0020594:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020598:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c002059b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002059e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00205a2:	89 01                	mov    DWORD PTR [ecx],eax
c00205a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205a7:	b8 00 00 00 00       	mov    eax,0x0
c00205ac:	c3                   	ret    
c00205ad:	90                   	nop

c00205ae <FAT::stat(void*, unsigned long long*)>:
c00205ae:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00205b3:	75 06                	jne    c00205bb <FAT::stat(void*, unsigned long long*)+0xd>
c00205b5:	b8 04 00 00 00       	mov    eax,0x4
c00205ba:	c3                   	ret    
c00205bb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205c0:	75 06                	jne    c00205c8 <FAT::stat(void*, unsigned long long*)+0x1a>
c00205c2:	b8 04 00 00 00       	mov    eax,0x4
c00205c7:	c3                   	ret    
c00205c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205cc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00205cf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00205d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00205d6:	89 01                	mov    DWORD PTR [ecx],eax
c00205d8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205db:	b8 00 00 00 00       	mov    eax,0x0
c00205e0:	c3                   	ret    
c00205e1:	90                   	nop

c00205e2 <FAT::~FAT()>:
c00205e2:	83 ec 0c             	sub    esp,0xc
c00205e5:	ba 60 ca 02 c0       	mov    edx,0xc002ca60
c00205ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205ee:	89 10                	mov    DWORD PTR [eax],edx
c00205f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205f4:	83 ec 0c             	sub    esp,0xc
c00205f7:	50                   	push   eax
c00205f8:	e8 99 2c ff ff       	call   c0013296 <Filesystem::~Filesystem()>
c00205fd:	83 c4 10             	add    esp,0x10
c0020600:	90                   	nop
c0020601:	83 c4 0c             	add    esp,0xc
c0020604:	c3                   	ret    
c0020605:	90                   	nop

c0020606 <FAT::~FAT()>:
c0020606:	83 ec 0c             	sub    esp,0xc
c0020609:	83 ec 0c             	sub    esp,0xc
c002060c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020610:	e8 cd ff ff ff       	call   c00205e2 <FAT::~FAT()>
c0020615:	83 c4 10             	add    esp,0x10
c0020618:	83 ec 08             	sub    esp,0x8
c002061b:	6a 08                	push   0x8
c002061d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020621:	e8 68 28 ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0020626:	83 c4 10             	add    esp,0x10
c0020629:	83 c4 0c             	add    esp,0xc
c002062c:	c3                   	ret    
c002062d:	90                   	nop

c002062e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002062e:	83 ec 1c             	sub    esp,0x1c
c0020631:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020638:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002063d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020641:	8b 04 85 40 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3c0]
c0020648:	83 f8 ff             	cmp    eax,0xffffffff
c002064b:	75 34                	jne    c0020681 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002064d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020651:	88 c2                	mov    dl,al
c0020653:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c0020658:	01 d0                	add    eax,edx
c002065a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002065e:	8b 15 20 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c20
c0020664:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020668:	89 14 85 40 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3c0],edx
c002066f:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c0020674:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020678:	89 14 85 c0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce340],edx
c002067f:	eb 17                	jmp    c0020698 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020681:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020685:	88 c2                	mov    dl,al
c0020687:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002068b:	8b 04 85 40 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3c0]
c0020692:	01 d0                	add    eax,edx
c0020694:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020698:	83 ec 04             	sub    esp,0x4
c002069b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002069f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206a3:	8d 44 24 15          	lea    eax,[esp+0x15]
c00206a7:	50                   	push   eax
c00206a8:	e8 8b 66 fe ff       	call   c0006d38 <f_getlabel>
c00206ad:	83 c4 10             	add    esp,0x10
c00206b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00206b9:	75 07                	jne    c00206c2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00206bb:	b8 00 00 00 00       	mov    eax,0x0
c00206c0:	eb 05                	jmp    c00206c7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00206c2:	b8 01 00 00 00       	mov    eax,0x1
c00206c7:	83 c4 1c             	add    esp,0x1c
c00206ca:	c3                   	ret    
c00206cb:	90                   	nop

c00206cc <FAT::setlabel(LogicalDisk*, int, char*)>:
c00206cc:	57                   	push   edi
c00206cd:	83 ec 58             	sub    esp,0x58
c00206d0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00206d8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00206dc:	b9 0f 00 00 00       	mov    ecx,0xf
c00206e1:	b8 00 00 00 00       	mov    eax,0x0
c00206e6:	fc                   	cld    
c00206e7:	89 d7                	mov    edi,edx
c00206e9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00206eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206ef:	8b 04 85 40 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3c0]
c00206f6:	83 f8 ff             	cmp    eax,0xffffffff
c00206f9:	75 34                	jne    c002072f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00206fb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206ff:	88 c2                	mov    dl,al
c0020701:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c0020706:	01 d0                	add    eax,edx
c0020708:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002070c:	8b 15 20 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c20
c0020712:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020716:	89 14 85 40 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3c0],edx
c002071d:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c0020722:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020726:	89 14 85 c0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce340],edx
c002072d:	eb 17                	jmp    c0020746 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002072f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020733:	88 c2                	mov    dl,al
c0020735:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020739:	8b 04 85 40 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3c0]
c0020740:	01 d0                	add    eax,edx
c0020742:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020746:	83 ec 08             	sub    esp,0x8
c0020749:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002074d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020751:	50                   	push   eax
c0020752:	e8 1d 02 fe ff       	call   c0000974 <strcat>
c0020757:	83 c4 10             	add    esp,0x10
c002075a:	83 ec 0c             	sub    esp,0xc
c002075d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020761:	50                   	push   eax
c0020762:	e8 bf 67 fe ff       	call   c0006f26 <f_setlabel>
c0020767:	83 c4 10             	add    esp,0x10
c002076a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002076e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020773:	75 07                	jne    c002077c <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020775:	b8 00 00 00 00       	mov    eax,0x0
c002077a:	eb 05                	jmp    c0020781 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002077c:	b8 01 00 00 00       	mov    eax,0x1
c0020781:	83 c4 58             	add    esp,0x58
c0020784:	5f                   	pop    edi
c0020785:	c3                   	ret    

c0020786 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020786:	83 ec 2c             	sub    esp,0x2c
c0020789:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020791:	83 ec 08             	sub    esp,0x8
c0020794:	68 00 ca 02 c0       	push   0xc002ca00
c0020799:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002079d:	e8 1e 01 fe ff       	call   c00008c0 <strcmp>
c00207a2:	83 c4 10             	add    esp,0x10
c00207a5:	85 c0                	test   eax,eax
c00207a7:	0f 94 c0             	sete   al
c00207aa:	84 c0                	test   al,al
c00207ac:	74 0d                	je     c00207bb <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00207ae:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207b6:	e9 a6 00 00 00       	jmp    c0020861 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207bb:	83 ec 08             	sub    esp,0x8
c00207be:	68 f2 c9 02 c0       	push   0xc002c9f2
c00207c3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207c7:	e8 f4 00 fe ff       	call   c00008c0 <strcmp>
c00207cc:	83 c4 10             	add    esp,0x10
c00207cf:	85 c0                	test   eax,eax
c00207d1:	0f 94 c0             	sete   al
c00207d4:	84 c0                	test   al,al
c00207d6:	74 0a                	je     c00207e2 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00207d8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207e0:	eb 7f                	jmp    c0020861 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207e2:	83 ec 08             	sub    esp,0x8
c00207e5:	68 f8 c9 02 c0       	push   0xc002c9f8
c00207ea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207ee:	e8 cd 00 fe ff       	call   c00008c0 <strcmp>
c00207f3:	83 c4 10             	add    esp,0x10
c00207f6:	85 c0                	test   eax,eax
c00207f8:	0f 94 c0             	sete   al
c00207fb:	84 c0                	test   al,al
c00207fd:	74 0a                	je     c0020809 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00207ff:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020807:	eb 58                	jmp    c0020861 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020809:	83 ec 08             	sub    esp,0x8
c002080c:	68 cc 94 02 c0       	push   0xc00294cc
c0020811:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020815:	e8 a6 00 fe ff       	call   c00008c0 <strcmp>
c002081a:	83 c4 10             	add    esp,0x10
c002081d:	85 c0                	test   eax,eax
c002081f:	0f 94 c0             	sete   al
c0020822:	84 c0                	test   al,al
c0020824:	74 0a                	je     c0020830 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020826:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002082e:	eb 31                	jmp    c0020861 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020830:	83 ec 08             	sub    esp,0x8
c0020833:	68 fe c9 02 c0       	push   0xc002c9fe
c0020838:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002083c:	e8 7f 00 fe ff       	call   c00008c0 <strcmp>
c0020841:	83 c4 10             	add    esp,0x10
c0020844:	85 c0                	test   eax,eax
c0020846:	0f 94 c0             	sete   al
c0020849:	84 c0                	test   al,al
c002084b:	74 0a                	je     c0020857 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002084d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020855:	eb 0a                	jmp    c0020861 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020857:	b8 08 00 00 00       	mov    eax,0x8
c002085c:	e9 04 01 00 00       	jmp    c0020965 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020861:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020868:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002086d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020871:	8b 04 85 40 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3c0]
c0020878:	83 f8 ff             	cmp    eax,0xffffffff
c002087b:	75 34                	jne    c00208b1 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002087d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020881:	88 c2                	mov    dl,al
c0020883:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c0020888:	01 d0                	add    eax,edx
c002088a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002088e:	8b 15 20 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c20
c0020894:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020898:	89 14 85 40 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3c0],edx
c002089f:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c00208a4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00208a8:	89 14 85 c0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce340],edx
c00208af:	eb 17                	jmp    c00208c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00208b1:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208b5:	88 c2                	mov    dl,al
c00208b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208bb:	8b 04 85 40 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3c0]
c00208c2:	01 d0                	add    eax,edx
c00208c4:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208cc:	88 04 24             	mov    BYTE PTR [esp],al
c00208cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00208d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208d7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00208df:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00208e4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00208ec:	83 ec 0c             	sub    esp,0xc
c00208ef:	68 00 20 00 00       	push   0x2000
c00208f4:	e8 47 ef fe ff       	call   c000f840 <malloc>
c00208f9:	83 c4 10             	add    esp,0x10
c00208fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020900:	68 00 20 00 00       	push   0x2000
c0020905:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020909:	8d 44 24 08          	lea    eax,[esp+0x8]
c002090d:	50                   	push   eax
c002090e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020912:	50                   	push   eax
c0020913:	e8 59 6a fe ff       	call   c0007371 <f_mkfs>
c0020918:	83 c4 10             	add    esp,0x10
c002091b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002091f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020924:	75 07                	jne    c002092d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020926:	b8 00 00 00 00       	mov    eax,0x0
c002092b:	eb 38                	jmp    c0020965 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002092d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020932:	75 17                	jne    c002094b <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020934:	83 ec 0c             	sub    esp,0xc
c0020937:	68 30 ca 02 c0       	push   0xc002ca30
c002093c:	e8 2d 26 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0020941:	83 c4 10             	add    esp,0x10
c0020944:	b8 09 00 00 00       	mov    eax,0x9
c0020949:	eb 1a                	jmp    c0020965 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002094b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002094f:	83 ec 08             	sub    esp,0x8
c0020952:	50                   	push   eax
c0020953:	68 04 ca 02 c0       	push   0xc002ca04
c0020958:	e8 11 26 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c002095d:	83 c4 10             	add    esp,0x10
c0020960:	b8 01 00 00 00       	mov    eax,0x1
c0020965:	83 c4 2c             	add    esp,0x2c
c0020968:	c3                   	ret    
c0020969:	90                   	nop

c002096a <FAT::tryMount(LogicalDisk*, int)>:
c002096a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020970:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c0020975:	83 f8 14             	cmp    eax,0x14
c0020978:	75 17                	jne    c0020991 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002097a:	83 ec 0c             	sub    esp,0xc
c002097d:	68 16 ca 02 c0       	push   0xc002ca16
c0020982:	e8 88 9c ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0020987:	83 c4 10             	add    esp,0x10
c002098a:	b0 00                	mov    al,0x0
c002098c:	e9 d7 01 00 00       	jmp    c0020b68 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020991:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020998:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002099e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00209a4:	3d 00 02 00 00       	cmp    eax,0x200
c00209a9:	74 07                	je     c00209b2 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00209ab:	b0 00                	mov    al,0x0
c00209ad:	e9 b6 01 00 00       	jmp    c0020b68 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209b2:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00209ba:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209c1:	8b 04 85 40 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3c0]
c00209c8:	83 f8 ff             	cmp    eax,0xffffffff
c00209cb:	74 07                	je     c00209d4 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00209cd:	b0 01                	mov    al,0x1
c00209cf:	e9 94 01 00 00       	jmp    c0020b68 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209d4:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00209de:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00209e6:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00209ed:	88 c2                	mov    dl,al
c00209ef:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c00209f4:	01 d0                	add    eax,edx
c00209f6:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00209fd:	8b 15 20 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c20
c0020a03:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a0a:	89 14 85 40 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3c0],edx
c0020a11:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c0020a16:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020a1d:	89 14 85 c0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce340],edx
c0020a24:	83 ec 0c             	sub    esp,0xc
c0020a27:	68 54 02 00 00       	push   0x254
c0020a2c:	e8 0f ee fe ff       	call   c000f840 <malloc>
c0020a31:	83 c4 10             	add    esp,0x10
c0020a34:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a3b:	83 ec 04             	sub    esp,0x4
c0020a3e:	6a 00                	push   0x0
c0020a40:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a47:	50                   	push   eax
c0020a48:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a4f:	e8 db 44 fe ff       	call   c0004f2f <f_mount>
c0020a54:	83 c4 10             	add    esp,0x10
c0020a57:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a5e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020a66:	74 19                	je     c0020a81 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020a68:	83 ec 0c             	sub    esp,0xc
c0020a6b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a72:	e8 e9 ed fe ff       	call   c000f860 <rfree>
c0020a77:	83 c4 10             	add    esp,0x10
c0020a7a:	b0 00                	mov    al,0x0
c0020a7c:	e9 e7 00 00 00       	jmp    c0020b68 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a81:	83 ec 04             	sub    esp,0x4
c0020a84:	68 00 01 00 00       	push   0x100
c0020a89:	6a 00                	push   0x0
c0020a8b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a92:	50                   	push   eax
c0020a93:	e8 e0 fc fd ff       	call   c0000778 <memset>
c0020a98:	83 c4 10             	add    esp,0x10
c0020a9b:	83 ec 08             	sub    esp,0x8
c0020a9e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020aa5:	50                   	push   eax
c0020aa6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020aad:	50                   	push   eax
c0020aae:	e8 c1 fe fd ff       	call   c0000974 <strcat>
c0020ab3:	83 c4 10             	add    esp,0x10
c0020ab6:	83 ec 08             	sub    esp,0x8
c0020ab9:	68 24 ca 02 c0       	push   0xc002ca24
c0020abe:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020ac5:	50                   	push   eax
c0020ac6:	e8 a9 fe fd ff       	call   c0000974 <strcat>
c0020acb:	83 c4 10             	add    esp,0x10
c0020ace:	83 ec 04             	sub    esp,0x4
c0020ad1:	6a 01                	push   0x1
c0020ad3:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020ada:	50                   	push   eax
c0020adb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020adf:	50                   	push   eax
c0020ae0:	e8 ac 44 fe ff       	call   c0004f91 <f_open>
c0020ae5:	83 c4 10             	add    esp,0x10
c0020ae8:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020aef:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020af6:	85 c0                	test   eax,eax
c0020af8:	74 0a                	je     c0020b04 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020afa:	78 2d                	js     c0020b29 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020afc:	83 e8 04             	sub    eax,0x4
c0020aff:	83 f8 01             	cmp    eax,0x1
c0020b02:	77 25                	ja     c0020b29 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b04:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020b0c:	83 ec 0c             	sub    esp,0xc
c0020b0f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b13:	50                   	push   eax
c0020b14:	e8 ca 4f fe ff       	call   c0005ae3 <f_close>
c0020b19:	83 c4 10             	add    esp,0x10
c0020b1c:	90                   	nop
c0020b1d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020b25:	74 3a                	je     c0020b61 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020b27:	eb 2d                	jmp    c0020b56 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020b29:	83 ec 0c             	sub    esp,0xc
c0020b2c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b33:	e8 28 ed fe ff       	call   c000f860 <rfree>
c0020b38:	83 c4 10             	add    esp,0x10
c0020b3b:	83 ec 04             	sub    esp,0x4
c0020b3e:	6a 00                	push   0x0
c0020b40:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b47:	50                   	push   eax
c0020b48:	6a 00                	push   0x0
c0020b4a:	e8 e0 43 fe ff       	call   c0004f2f <f_mount>
c0020b4f:	83 c4 10             	add    esp,0x10
c0020b52:	b0 00                	mov    al,0x0
c0020b54:	eb 12                	jmp    c0020b68 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b56:	a1 20 1c 03 c0       	mov    eax,ds:0xc0031c20
c0020b5b:	40                   	inc    eax
c0020b5c:	a3 20 1c 03 c0       	mov    ds:0xc0031c20,eax
c0020b61:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020b68:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020b6e:	c3                   	ret    
c0020b6f:	90                   	nop

c0020b70 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020b70:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020b76:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020b7e:	74 0a                	je     c0020b8a <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020b80:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020b88:	75 0a                	jne    c0020b94 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020b8a:	b8 04 00 00 00       	mov    eax,0x4
c0020b8f:	e9 db 00 00 00       	jmp    c0020c6f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b94:	83 ec 08             	sub    esp,0x8
c0020b97:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b9e:	50                   	push   eax
c0020b9f:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020ba6:	e8 42 55 fe ff       	call   c00060ed <f_readdir>
c0020bab:	83 c4 10             	add    esp,0x10
c0020bae:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020bb5:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020bbb:	83 ec 0c             	sub    esp,0xc
c0020bbe:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020bc5:	83 c0 1a             	add    eax,0x1a
c0020bc8:	50                   	push   eax
c0020bc9:	e8 c6 fb fd ff       	call   c0000794 <strlen>
c0020bce:	83 c4 10             	add    esp,0x10
c0020bd1:	ba 00 00 00 00       	mov    edx,0x0
c0020bd6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020bda:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020bde:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020be5:	0f b6 c0             	movzx  eax,al
c0020be8:	83 e0 10             	and    eax,0x10
c0020beb:	74 07                	je     c0020bf4 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020bed:	b8 02 00 00 00       	mov    eax,0x2
c0020bf2:	eb 05                	jmp    c0020bf9 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020bf4:	b8 01 00 00 00       	mov    eax,0x1
c0020bf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bfd:	83 ec 08             	sub    esp,0x8
c0020c00:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c07:	83 c0 1a             	add    eax,0x1a
c0020c0a:	50                   	push   eax
c0020c0b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c0f:	83 c0 10             	add    eax,0x10
c0020c12:	50                   	push   eax
c0020c13:	e8 1c fc fd ff       	call   c0000834 <strcpy>
c0020c18:	83 c4 10             	add    esp,0x10
c0020c1b:	83 ec 04             	sub    esp,0x4
c0020c1e:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020c25:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c29:	50                   	push   eax
c0020c2a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020c31:	e8 0e fb fd ff       	call   c0000744 <memcpy>
c0020c36:	83 c4 10             	add    esp,0x10
c0020c39:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020c40:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c46:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020c4d:	84 c0                	test   al,al
c0020c4f:	75 07                	jne    c0020c58 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020c51:	b8 07 00 00 00       	mov    eax,0x7
c0020c56:	eb 17                	jmp    c0020c6f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c58:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020c5f:	85 c0                	test   eax,eax
c0020c61:	75 07                	jne    c0020c6a <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020c63:	b8 00 00 00 00       	mov    eax,0x0
c0020c68:	eb 05                	jmp    c0020c6f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c6a:	b8 01 00 00 00       	mov    eax,0x1
c0020c6f:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020c75:	c3                   	ret    

c0020c76 <FAT::read(void*, unsigned long, void*, int*)>:
c0020c76:	83 ec 1c             	sub    esp,0x1c
c0020c79:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c7e:	74 07                	je     c0020c87 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c80:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c85:	75 07                	jne    c0020c8e <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c87:	b8 04 00 00 00       	mov    eax,0x4
c0020c8c:	eb 3d                	jmp    c0020ccb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c92:	50                   	push   eax
c0020c93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c9f:	e8 29 47 fe ff       	call   c00053cd <f_read>
c0020ca4:	83 c4 10             	add    esp,0x10
c0020ca7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020caf:	89 c2                	mov    edx,eax
c0020cb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020cb5:	89 10                	mov    DWORD PTR [eax],edx
c0020cb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cbb:	85 c0                	test   eax,eax
c0020cbd:	75 07                	jne    c0020cc6 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020cbf:	b8 00 00 00 00       	mov    eax,0x0
c0020cc4:	eb 05                	jmp    c0020ccb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020cc6:	b8 01 00 00 00       	mov    eax,0x1
c0020ccb:	83 c4 1c             	add    esp,0x1c
c0020cce:	c3                   	ret    
c0020ccf:	90                   	nop

c0020cd0 <FAT::write(void*, unsigned long, void*, int*)>:
c0020cd0:	83 ec 1c             	sub    esp,0x1c
c0020cd3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cd8:	74 07                	je     c0020ce1 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020cda:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020cdf:	75 07                	jne    c0020ce8 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020ce1:	b8 04 00 00 00       	mov    eax,0x4
c0020ce6:	eb 3d                	jmp    c0020d25 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020ce8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cec:	50                   	push   eax
c0020ced:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020cf1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cf5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cf9:	e8 4f 49 fe ff       	call   c000564d <f_write>
c0020cfe:	83 c4 10             	add    esp,0x10
c0020d01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d09:	89 c2                	mov    edx,eax
c0020d0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d0f:	89 10                	mov    DWORD PTR [eax],edx
c0020d11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d15:	85 c0                	test   eax,eax
c0020d17:	75 07                	jne    c0020d20 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020d19:	b8 00 00 00 00       	mov    eax,0x0
c0020d1e:	eb 05                	jmp    c0020d25 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d20:	b8 01 00 00 00       	mov    eax,0x1
c0020d25:	83 c4 1c             	add    esp,0x1c
c0020d28:	c3                   	ret    
c0020d29:	90                   	nop

c0020d2a <FAT::close(void*)>:
c0020d2a:	83 ec 1c             	sub    esp,0x1c
c0020d2d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d32:	75 07                	jne    c0020d3b <FAT::close(void*)+0x11>
c0020d34:	b8 04 00 00 00       	mov    eax,0x4
c0020d39:	eb 36                	jmp    c0020d71 <FAT::close(void*)+0x47>
c0020d3b:	83 ec 0c             	sub    esp,0xc
c0020d3e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d42:	e8 9c 4d fe ff       	call   c0005ae3 <f_close>
c0020d47:	83 c4 10             	add    esp,0x10
c0020d4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d4e:	83 ec 0c             	sub    esp,0xc
c0020d51:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d55:	e8 f6 ea fe ff       	call   c000f850 <free>
c0020d5a:	83 c4 10             	add    esp,0x10
c0020d5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d61:	85 c0                	test   eax,eax
c0020d63:	75 07                	jne    c0020d6c <FAT::close(void*)+0x42>
c0020d65:	b8 00 00 00 00       	mov    eax,0x0
c0020d6a:	eb 05                	jmp    c0020d71 <FAT::close(void*)+0x47>
c0020d6c:	b8 01 00 00 00       	mov    eax,0x1
c0020d71:	83 c4 1c             	add    esp,0x1c
c0020d74:	c3                   	ret    
c0020d75:	90                   	nop

c0020d76 <FAT::closeDir(void*)>:
c0020d76:	83 ec 1c             	sub    esp,0x1c
c0020d79:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d7e:	75 07                	jne    c0020d87 <FAT::closeDir(void*)+0x11>
c0020d80:	b8 04 00 00 00       	mov    eax,0x4
c0020d85:	eb 36                	jmp    c0020dbd <FAT::closeDir(void*)+0x47>
c0020d87:	83 ec 0c             	sub    esp,0xc
c0020d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d8e:	e8 38 53 fe ff       	call   c00060cb <f_closedir>
c0020d93:	83 c4 10             	add    esp,0x10
c0020d96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d9a:	83 ec 0c             	sub    esp,0xc
c0020d9d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020da1:	e8 aa ea fe ff       	call   c000f850 <free>
c0020da6:	83 c4 10             	add    esp,0x10
c0020da9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020dad:	85 c0                	test   eax,eax
c0020daf:	75 07                	jne    c0020db8 <FAT::closeDir(void*)+0x42>
c0020db1:	b8 00 00 00 00       	mov    eax,0x0
c0020db6:	eb 05                	jmp    c0020dbd <FAT::closeDir(void*)+0x47>
c0020db8:	b8 01 00 00 00       	mov    eax,0x1
c0020dbd:	83 c4 1c             	add    esp,0x1c
c0020dc0:	c3                   	ret    
c0020dc1:	90                   	nop

c0020dc2 <FAT::seek(void*, unsigned long long)>:
c0020dc2:	83 ec 2c             	sub    esp,0x2c
c0020dc5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020dcd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020dd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dd5:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020dda:	75 07                	jne    c0020de3 <FAT::seek(void*, unsigned long long)+0x21>
c0020ddc:	b8 04 00 00 00       	mov    eax,0x4
c0020de1:	eb 2f                	jmp    c0020e12 <FAT::seek(void*, unsigned long long)+0x50>
c0020de3:	83 ec 04             	sub    esp,0x4
c0020de6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020dea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020dee:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020df2:	e8 1b 4d fe ff       	call   c0005b12 <f_lseek>
c0020df7:	83 c4 10             	add    esp,0x10
c0020dfa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020dfe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e02:	85 c0                	test   eax,eax
c0020e04:	75 07                	jne    c0020e0d <FAT::seek(void*, unsigned long long)+0x4b>
c0020e06:	b8 00 00 00 00       	mov    eax,0x0
c0020e0b:	eb 05                	jmp    c0020e12 <FAT::seek(void*, unsigned long long)+0x50>
c0020e0d:	b8 01 00 00 00       	mov    eax,0x1
c0020e12:	83 c4 2c             	add    esp,0x2c
c0020e15:	c3                   	ret    

c0020e16 <fatWrapperReadDisk>:
c0020e16:	83 ec 1c             	sub    esp,0x1c
c0020e19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e1d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e25:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e30:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e35:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c0020e3c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e40:	83 ec 0c             	sub    esp,0xc
c0020e43:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e47:	52                   	push   edx
c0020e48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e50:	50                   	push   eax
c0020e51:	e8 28 59 ff ff       	call   c001677e <LogicalDisk::read(unsigned long long, int, void*)>
c0020e56:	83 c4 20             	add    esp,0x20
c0020e59:	83 c4 1c             	add    esp,0x1c
c0020e5c:	c3                   	ret    

c0020e5d <fatWrapperWriteDisk>:
c0020e5d:	83 ec 1c             	sub    esp,0x1c
c0020e60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e64:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e6c:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e77:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e7c:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c0020e83:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e87:	83 ec 0c             	sub    esp,0xc
c0020e8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e8e:	52                   	push   edx
c0020e8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e97:	50                   	push   eax
c0020e98:	e8 4d 59 ff ff       	call   c00167ea <LogicalDisk::write(unsigned long long, int, void*)>
c0020e9d:	83 c4 20             	add    esp,0x20
c0020ea0:	83 c4 1c             	add    esp,0x1c
c0020ea3:	c3                   	ret    

c0020ea4 <fatWrapperIoctl>:
c0020ea4:	53                   	push   ebx
c0020ea5:	83 ec 28             	sub    esp,0x28
c0020ea8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020eac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020eb0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020eb4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020eb8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020ebd:	75 31                	jne    c0020ef0 <fatWrapperIoctl+0x4c>
c0020ebf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020ec7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ecc:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c0020ed3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ed9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020edf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ee3:	66 89 02             	mov    WORD PTR [edx],ax
c0020ee6:	b8 00 00 00 00       	mov    eax,0x0
c0020eeb:	e9 b2 00 00 00       	jmp    c0020fa2 <fatWrapperIoctl+0xfe>
c0020ef0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020ef5:	75 6a                	jne    c0020f61 <fatWrapperIoctl+0xbd>
c0020ef7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020efb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020eff:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f04:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c0020f0b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f11:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020f17:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020f1d:	89 c8                	mov    eax,ecx
c0020f1f:	89 da                	mov    edx,ebx
c0020f21:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020f25:	c1 e0 0a             	shl    eax,0xa
c0020f28:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020f2d:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c0020f34:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f3a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020f40:	89 cb                	mov    ebx,ecx
c0020f42:	c1 fb 1f             	sar    ebx,0x1f
c0020f45:	53                   	push   ebx
c0020f46:	51                   	push   ecx
c0020f47:	52                   	push   edx
c0020f48:	50                   	push   eax
c0020f49:	e8 be 5a 00 00       	call   c0026a0c <__udivdi3>
c0020f4e:	83 c4 10             	add    esp,0x10
c0020f51:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f55:	89 01                	mov    DWORD PTR [ecx],eax
c0020f57:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020f5a:	b8 00 00 00 00       	mov    eax,0x0
c0020f5f:	eb 41                	jmp    c0020fa2 <fatWrapperIoctl+0xfe>
c0020f61:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f66:	75 07                	jne    c0020f6f <fatWrapperIoctl+0xcb>
c0020f68:	b8 00 00 00 00       	mov    eax,0x0
c0020f6d:	eb 33                	jmp    c0020fa2 <fatWrapperIoctl+0xfe>
c0020f6f:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f74:	75 19                	jne    c0020f8f <fatWrapperIoctl+0xeb>
c0020f76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f7a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f82:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f88:	b8 00 00 00 00       	mov    eax,0x0
c0020f8d:	eb 13                	jmp    c0020fa2 <fatWrapperIoctl+0xfe>
c0020f8f:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f94:	75 07                	jne    c0020f9d <fatWrapperIoctl+0xf9>
c0020f96:	b8 00 00 00 00       	mov    eax,0x0
c0020f9b:	eb 05                	jmp    c0020fa2 <fatWrapperIoctl+0xfe>
c0020f9d:	b8 04 00 00 00       	mov    eax,0x4
c0020fa2:	83 c4 28             	add    esp,0x28
c0020fa5:	5b                   	pop    ebx
c0020fa6:	c3                   	ret    
c0020fa7:	90                   	nop

c0020fa8 <FAT::FAT()>:
c0020fa8:	83 ec 1c             	sub    esp,0x1c
c0020fab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020faf:	83 ec 0c             	sub    esp,0xc
c0020fb2:	50                   	push   eax
c0020fb3:	e8 ba 22 ff ff       	call   c0013272 <Filesystem::Filesystem()>
c0020fb8:	83 c4 10             	add    esp,0x10
c0020fbb:	ba 60 ca 02 c0       	mov    edx,0xc002ca60
c0020fc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fc4:	89 10                	mov    DWORD PTR [eax],edx
c0020fc6:	c7 05 20 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031c20,0x0
c0020fd0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020fd8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020fdd:	7f 15                	jg     c0020ff4 <FAT::FAT()+0x4c>
c0020fdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020fe3:	c7 04 85 40 1c 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce3c0],0xffffffff
c0020fee:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020ff2:	eb e4                	jmp    c0020fd8 <FAT::FAT()+0x30>
c0020ff4:	90                   	nop
c0020ff5:	83 c4 1c             	add    esp,0x1c
c0020ff8:	c3                   	ret    
c0020ff9:	90                   	nop

c0020ffa <FAT::fixFilepath(char*)>:
c0020ffa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ffe:	8a 00                	mov    al,BYTE PTR [eax]
c0021000:	3c 40                	cmp    al,0x40
c0021002:	7e 2c                	jle    c0021030 <FAT::fixFilepath(char*)+0x36>
c0021004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021008:	8a 00                	mov    al,BYTE PTR [eax]
c002100a:	83 e8 41             	sub    eax,0x41
c002100d:	88 c2                	mov    dl,al
c002100f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021013:	88 10                	mov    BYTE PTR [eax],dl
c0021015:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021019:	8a 00                	mov    al,BYTE PTR [eax]
c002101b:	0f be c0             	movsx  eax,al
c002101e:	8b 04 85 40 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3c0]
c0021025:	83 c0 30             	add    eax,0x30
c0021028:	88 c2                	mov    dl,al
c002102a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002102e:	88 10                	mov    BYTE PTR [eax],dl
c0021030:	90                   	nop
c0021031:	c3                   	ret    

c0021032 <FAT::open(char const*, void**, FileOpenMode)>:
c0021032:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021038:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021040:	74 0a                	je     c002104c <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021042:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002104a:	75 0a                	jne    c0021056 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002104c:	b8 04 00 00 00       	mov    eax,0x4
c0021051:	e9 fd 00 00 00       	jmp    c0021153 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021056:	83 ec 08             	sub    esp,0x8
c0021059:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021060:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021064:	50                   	push   eax
c0021065:	e8 ca f7 fd ff       	call   c0000834 <strcpy>
c002106a:	83 c4 10             	add    esp,0x10
c002106d:	83 ec 08             	sub    esp,0x8
c0021070:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021074:	50                   	push   eax
c0021075:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002107c:	e8 79 ff ff ff       	call   c0020ffa <FAT::fixFilepath(char*)>
c0021081:	83 c4 10             	add    esp,0x10
c0021084:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002108c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021093:	83 e0 01             	and    eax,0x1
c0021096:	74 08                	je     c00210a0 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021098:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00210a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210a7:	83 e0 04             	and    eax,0x4
c00210aa:	74 10                	je     c00210bc <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00210ac:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00210b4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210c3:	83 e0 02             	and    eax,0x2
c00210c6:	74 08                	je     c00210d0 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00210c8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210d0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210d7:	83 e0 08             	and    eax,0x8
c00210da:	74 08                	je     c00210e4 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00210dc:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00210e4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210eb:	83 e0 10             	and    eax,0x10
c00210ee:	74 08                	je     c00210f8 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00210f0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00210f8:	83 ec 0c             	sub    esp,0xc
c00210fb:	68 50 02 00 00       	push   0x250
c0021100:	e8 3b e7 fe ff       	call   c000f840 <malloc>
c0021105:	83 c4 10             	add    esp,0x10
c0021108:	89 c2                	mov    edx,eax
c002110a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021111:	89 10                	mov    DWORD PTR [eax],edx
c0021113:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002111b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021122:	8b 00                	mov    eax,DWORD PTR [eax]
c0021124:	83 ec 04             	sub    esp,0x4
c0021127:	52                   	push   edx
c0021128:	8d 54 24 10          	lea    edx,[esp+0x10]
c002112c:	52                   	push   edx
c002112d:	50                   	push   eax
c002112e:	e8 5e 3e fe ff       	call   c0004f91 <f_open>
c0021133:	83 c4 10             	add    esp,0x10
c0021136:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002113d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021145:	74 07                	je     c002114e <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021147:	b8 01 00 00 00       	mov    eax,0x1
c002114c:	eb 05                	jmp    c0021153 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002114e:	b8 00 00 00 00       	mov    eax,0x0
c0021153:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021159:	c3                   	ret    

c002115a <FAT::openDir(char const*, void**)>:
c002115a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021160:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021168:	74 0a                	je     c0021174 <FAT::openDir(char const*, void**)+0x1a>
c002116a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021172:	75 07                	jne    c002117b <FAT::openDir(char const*, void**)+0x21>
c0021174:	b8 04 00 00 00       	mov    eax,0x4
c0021179:	eb 7d                	jmp    c00211f8 <FAT::openDir(char const*, void**)+0x9e>
c002117b:	83 ec 08             	sub    esp,0x8
c002117e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021185:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021189:	50                   	push   eax
c002118a:	e8 a5 f6 fd ff       	call   c0000834 <strcpy>
c002118f:	83 c4 10             	add    esp,0x10
c0021192:	83 ec 08             	sub    esp,0x8
c0021195:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021199:	50                   	push   eax
c002119a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211a1:	e8 54 fe ff ff       	call   c0020ffa <FAT::fixFilepath(char*)>
c00211a6:	83 c4 10             	add    esp,0x10
c00211a9:	83 ec 0c             	sub    esp,0xc
c00211ac:	6a 4c                	push   0x4c
c00211ae:	e8 8d e6 fe ff       	call   c000f840 <malloc>
c00211b3:	83 c4 10             	add    esp,0x10
c00211b6:	89 c2                	mov    edx,eax
c00211b8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211bf:	89 10                	mov    DWORD PTR [eax],edx
c00211c1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00211ca:	83 ec 08             	sub    esp,0x8
c00211cd:	8d 54 24 14          	lea    edx,[esp+0x14]
c00211d1:	52                   	push   edx
c00211d2:	50                   	push   eax
c00211d3:	e8 f1 4d fe ff       	call   c0005fc9 <f_opendir>
c00211d8:	83 c4 10             	add    esp,0x10
c00211db:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211e2:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00211ea:	74 07                	je     c00211f3 <FAT::openDir(char const*, void**)+0x99>
c00211ec:	b8 01 00 00 00       	mov    eax,0x1
c00211f1:	eb 05                	jmp    c00211f8 <FAT::openDir(char const*, void**)+0x9e>
c00211f3:	b8 00 00 00 00       	mov    eax,0x0
c00211f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211fe:	c3                   	ret    
c00211ff:	90                   	nop

c0021200 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021200:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021206:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002120e:	75 0a                	jne    c002121a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021210:	b8 04 00 00 00       	mov    eax,0x4
c0021215:	e9 c9 00 00 00       	jmp    c00212e3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002121a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021222:	75 0a                	jne    c002122e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021224:	b8 04 00 00 00       	mov    eax,0x4
c0021229:	e9 b5 00 00 00       	jmp    c00212e3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002122e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021236:	75 0a                	jne    c0021242 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021238:	b8 04 00 00 00       	mov    eax,0x4
c002123d:	e9 a1 00 00 00       	jmp    c00212e3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021242:	83 ec 08             	sub    esp,0x8
c0021245:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002124c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021253:	50                   	push   eax
c0021254:	e8 db f5 fd ff       	call   c0000834 <strcpy>
c0021259:	83 c4 10             	add    esp,0x10
c002125c:	83 ec 08             	sub    esp,0x8
c002125f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021266:	50                   	push   eax
c0021267:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002126e:	e8 87 fd ff ff       	call   c0020ffa <FAT::fixFilepath(char*)>
c0021273:	83 c4 10             	add    esp,0x10
c0021276:	83 ec 08             	sub    esp,0x8
c0021279:	8d 44 24 08          	lea    eax,[esp+0x8]
c002127d:	50                   	push   eax
c002127e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021285:	50                   	push   eax
c0021286:	e8 fd 4e fe ff       	call   c0006188 <f_stat>
c002128b:	83 c4 10             	add    esp,0x10
c002128e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021295:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002129c:	85 c0                	test   eax,eax
c002129e:	74 07                	je     c00212a7 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00212a0:	83 f8 04             	cmp    eax,0x4
c00212a3:	74 32                	je     c00212d7 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00212a5:	eb 37                	jmp    c00212de <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00212a7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00212ab:	0f b6 c0             	movzx  eax,al
c00212ae:	83 e0 10             	and    eax,0x10
c00212b1:	0f 95 c2             	setne  dl
c00212b4:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00212bb:	88 10                	mov    BYTE PTR [eax],dl
c00212bd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00212c0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00212c4:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00212cb:	89 01                	mov    DWORD PTR [ecx],eax
c00212cd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00212d0:	b8 00 00 00 00       	mov    eax,0x0
c00212d5:	eb 0c                	jmp    c00212e3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212d7:	b8 02 00 00 00       	mov    eax,0x2
c00212dc:	eb 05                	jmp    c00212e3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212de:	b8 01 00 00 00       	mov    eax,0x1
c00212e3:	81 c4 2c 02 00 00    	add    esp,0x22c
c00212e9:	c3                   	ret    

c00212ea <FAT::unlink(char const*)>:
c00212ea:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00212f0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00212f8:	75 07                	jne    c0021301 <FAT::unlink(char const*)+0x17>
c00212fa:	b8 04 00 00 00       	mov    eax,0x4
c00212ff:	eb 5c                	jmp    c002135d <FAT::unlink(char const*)+0x73>
c0021301:	83 ec 08             	sub    esp,0x8
c0021304:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002130b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002130f:	50                   	push   eax
c0021310:	e8 1f f5 fd ff       	call   c0000834 <strcpy>
c0021315:	83 c4 10             	add    esp,0x10
c0021318:	83 ec 08             	sub    esp,0x8
c002131b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002131f:	50                   	push   eax
c0021320:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021327:	e8 ce fc ff ff       	call   c0020ffa <FAT::fixFilepath(char*)>
c002132c:	83 c4 10             	add    esp,0x10
c002132f:	83 ec 0c             	sub    esp,0xc
c0021332:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021336:	50                   	push   eax
c0021337:	e8 9e 51 fe ff       	call   c00064da <f_unlink>
c002133c:	83 c4 10             	add    esp,0x10
c002133f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021346:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002134d:	85 c0                	test   eax,eax
c002134f:	75 07                	jne    c0021358 <FAT::unlink(char const*)+0x6e>
c0021351:	b8 00 00 00 00       	mov    eax,0x0
c0021356:	eb 05                	jmp    c002135d <FAT::unlink(char const*)+0x73>
c0021358:	b8 01 00 00 00       	mov    eax,0x1
c002135d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021363:	c3                   	ret    

c0021364 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021364:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002136a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021371:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021378:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002137c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021380:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021388:	75 0a                	jne    c0021394 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002138a:	b8 04 00 00 00       	mov    eax,0x4
c002138f:	e9 1c 01 00 00       	jmp    c00214b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021394:	83 ec 08             	sub    esp,0x8
c0021397:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002139e:	8d 44 24 24          	lea    eax,[esp+0x24]
c00213a2:	50                   	push   eax
c00213a3:	e8 8c f4 fd ff       	call   c0000834 <strcpy>
c00213a8:	83 c4 10             	add    esp,0x10
c00213ab:	83 ec 08             	sub    esp,0x8
c00213ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00213b2:	50                   	push   eax
c00213b3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213ba:	e8 3b fc ff ff       	call   c0020ffa <FAT::fixFilepath(char*)>
c00213bf:	83 c4 10             	add    esp,0x10
c00213c2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00213ca:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00213d2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213d7:	83 e0 01             	and    eax,0x1
c00213da:	74 08                	je     c00213e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00213dc:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00213e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213e9:	83 e0 02             	and    eax,0x2
c00213ec:	74 08                	je     c00213f6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00213ee:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00213f6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213fb:	83 e0 04             	and    eax,0x4
c00213fe:	74 08                	je     c0021408 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021400:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021408:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002140d:	83 e0 08             	and    eax,0x8
c0021410:	74 08                	je     c002141a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021412:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002141a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002141f:	83 e0 01             	and    eax,0x1
c0021422:	74 08                	je     c002142c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021424:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002142c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021431:	83 e0 02             	and    eax,0x2
c0021434:	74 08                	je     c002143e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021436:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002143e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021443:	83 e0 04             	and    eax,0x4
c0021446:	74 08                	je     c0021450 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021448:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021450:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021455:	83 e0 08             	and    eax,0x8
c0021458:	74 08                	je     c0021462 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c002145a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021462:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021469:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021470:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021478:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021480:	83 ec 04             	sub    esp,0x4
c0021483:	52                   	push   edx
c0021484:	50                   	push   eax
c0021485:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021489:	50                   	push   eax
c002148a:	e8 ed 56 fe ff       	call   c0006b7c <f_chmod>
c002148f:	83 c4 10             	add    esp,0x10
c0021492:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021499:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00214a0:	85 c0                	test   eax,eax
c00214a2:	75 07                	jne    c00214ab <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00214a4:	b8 00 00 00 00       	mov    eax,0x0
c00214a9:	eb 05                	jmp    c00214b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00214ab:	b8 01 00 00 00       	mov    eax,0x1
c00214b0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00214b6:	c3                   	ret    
c00214b7:	90                   	nop

c00214b8 <FAT::rename(char const*, char const*)>:
c00214b8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00214be:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00214c6:	74 0a                	je     c00214d2 <FAT::rename(char const*, char const*)+0x1a>
c00214c8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00214d0:	75 0a                	jne    c00214dc <FAT::rename(char const*, char const*)+0x24>
c00214d2:	b8 04 00 00 00       	mov    eax,0x4
c00214d7:	e9 98 00 00 00       	jmp    c0021574 <FAT::rename(char const*, char const*)+0xbc>
c00214dc:	83 ec 08             	sub    esp,0x8
c00214df:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214e6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214ed:	50                   	push   eax
c00214ee:	e8 41 f3 fd ff       	call   c0000834 <strcpy>
c00214f3:	83 c4 10             	add    esp,0x10
c00214f6:	83 ec 08             	sub    esp,0x8
c00214f9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021500:	50                   	push   eax
c0021501:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021508:	e8 ed fa ff ff       	call   c0020ffa <FAT::fixFilepath(char*)>
c002150d:	83 c4 10             	add    esp,0x10
c0021510:	83 ec 08             	sub    esp,0x8
c0021513:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002151a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002151e:	50                   	push   eax
c002151f:	e8 10 f3 fd ff       	call   c0000834 <strcpy>
c0021524:	83 c4 10             	add    esp,0x10
c0021527:	83 ec 08             	sub    esp,0x8
c002152a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002152e:	50                   	push   eax
c002152f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021536:	e8 bf fa ff ff       	call   c0020ffa <FAT::fixFilepath(char*)>
c002153b:	83 c4 10             	add    esp,0x10
c002153e:	83 ec 08             	sub    esp,0x8
c0021541:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021545:	50                   	push   eax
c0021546:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002154d:	50                   	push   eax
c002154e:	e8 36 53 fe ff       	call   c0006889 <f_rename>
c0021553:	83 c4 10             	add    esp,0x10
c0021556:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002155d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021564:	85 c0                	test   eax,eax
c0021566:	75 07                	jne    c002156f <FAT::rename(char const*, char const*)+0xb7>
c0021568:	b8 00 00 00 00       	mov    eax,0x0
c002156d:	eb 05                	jmp    c0021574 <FAT::rename(char const*, char const*)+0xbc>
c002156f:	b8 01 00 00 00       	mov    eax,0x1
c0021574:	81 c4 1c 02 00 00    	add    esp,0x21c
c002157a:	c3                   	ret    
c002157b:	90                   	nop

c002157c <FAT::mkdir(char const*)>:
c002157c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021582:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002158a:	75 07                	jne    c0021593 <FAT::mkdir(char const*)+0x17>
c002158c:	b8 04 00 00 00       	mov    eax,0x4
c0021591:	eb 5c                	jmp    c00215ef <FAT::mkdir(char const*)+0x73>
c0021593:	83 ec 08             	sub    esp,0x8
c0021596:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002159d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215a1:	50                   	push   eax
c00215a2:	e8 8d f2 fd ff       	call   c0000834 <strcpy>
c00215a7:	83 c4 10             	add    esp,0x10
c00215aa:	83 ec 08             	sub    esp,0x8
c00215ad:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215b1:	50                   	push   eax
c00215b2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215b9:	e8 3c fa ff ff       	call   c0020ffa <FAT::fixFilepath(char*)>
c00215be:	83 c4 10             	add    esp,0x10
c00215c1:	83 ec 0c             	sub    esp,0xc
c00215c4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215c8:	50                   	push   eax
c00215c9:	e8 8f 50 fe ff       	call   c000665d <f_mkdir>
c00215ce:	83 c4 10             	add    esp,0x10
c00215d1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00215d8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00215df:	85 c0                	test   eax,eax
c00215e1:	75 07                	jne    c00215ea <FAT::mkdir(char const*)+0x6e>
c00215e3:	b8 00 00 00 00       	mov    eax,0x0
c00215e8:	eb 05                	jmp    c00215ef <FAT::mkdir(char const*)+0x73>
c00215ea:	b8 01 00 00 00       	mov    eax,0x1
c00215ef:	81 c4 1c 01 00 00    	add    esp,0x11c
c00215f5:	c3                   	ret    

c00215f6 <FAT::exists(char const*)>:
c00215f6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00215fc:	83 ec 08             	sub    esp,0x8
c00215ff:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021606:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002160a:	50                   	push   eax
c002160b:	e8 24 f2 fd ff       	call   c0000834 <strcpy>
c0021610:	83 c4 10             	add    esp,0x10
c0021613:	83 ec 08             	sub    esp,0x8
c0021616:	8d 44 24 08          	lea    eax,[esp+0x8]
c002161a:	50                   	push   eax
c002161b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021622:	e8 d3 f9 ff ff       	call   c0020ffa <FAT::fixFilepath(char*)>
c0021627:	83 c4 10             	add    esp,0x10
c002162a:	83 ec 08             	sub    esp,0x8
c002162d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021634:	50                   	push   eax
c0021635:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021639:	50                   	push   eax
c002163a:	e8 49 4b fe ff       	call   c0006188 <f_stat>
c002163f:	83 c4 10             	add    esp,0x10
c0021642:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021649:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021650:	85 c0                	test   eax,eax
c0021652:	75 04                	jne    c0021658 <FAT::exists(char const*)+0x62>
c0021654:	b0 01                	mov    al,0x1
c0021656:	eb 02                	jmp    c002165a <FAT::exists(char const*)+0x64>
c0021658:	b0 00                	mov    al,0x0
c002165a:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021660:	c3                   	ret    
c0021661:	90                   	nop

c0021662 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021662:	b8 08 00 00 00       	mov    eax,0x8
c0021667:	c3                   	ret    

c0021668 <ISO9660::seek(void*, unsigned long long)>:
c0021668:	53                   	push   ebx
c0021669:	b8 04 00 00 00       	mov    eax,0x4
c002166e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021672:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021676:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002167a:	85 d2                	test   edx,edx
c002167c:	74 17                	je     c0021695 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002167e:	89 c8                	mov    eax,ecx
c0021680:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021683:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021686:	b8 01 00 00 00       	mov    eax,0x1
c002168b:	73 08                	jae    c0021695 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002168d:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021690:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021693:	31 c0                	xor    eax,eax
c0021695:	5b                   	pop    ebx
c0021696:	c3                   	ret    
c0021697:	90                   	nop

c0021698 <ISO9660::tell(void*, unsigned long long*)>:
c0021698:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002169c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216a0:	85 d2                	test   edx,edx
c00216a2:	74 12                	je     c00216b6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00216a4:	85 c0                	test   eax,eax
c00216a6:	74 0e                	je     c00216b6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00216a8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00216ab:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00216ae:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216b1:	89 10                	mov    DWORD PTR [eax],edx
c00216b3:	31 c0                	xor    eax,eax
c00216b5:	c3                   	ret    
c00216b6:	b8 04 00 00 00       	mov    eax,0x4
c00216bb:	c3                   	ret    

c00216bc <ISO9660::getName()>:
c00216bc:	b8 bc ca 02 c0       	mov    eax,0xc002cabc
c00216c1:	c3                   	ret    

c00216c2 <ISO9660::stat(void*, unsigned long long*)>:
c00216c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216ca:	85 d2                	test   edx,edx
c00216cc:	74 12                	je     c00216e0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216ce:	85 c0                	test   eax,eax
c00216d0:	74 0e                	je     c00216e0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216d2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00216d5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00216d8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216db:	89 10                	mov    DWORD PTR [eax],edx
c00216dd:	31 c0                	xor    eax,eax
c00216df:	c3                   	ret    
c00216e0:	b8 04 00 00 00       	mov    eax,0x4
c00216e5:	c3                   	ret    

c00216e6 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00216e6:	b8 01 00 00 00       	mov    eax,0x1
c00216eb:	c3                   	ret    

c00216ec <ISO9660::unlink(char const*)>:
c00216ec:	b8 01 00 00 00       	mov    eax,0x1
c00216f1:	c3                   	ret    

c00216f2 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00216f2:	b8 01 00 00 00       	mov    eax,0x1
c00216f7:	c3                   	ret    

c00216f8 <ISO9660::rename(char const*, char const*)>:
c00216f8:	b8 01 00 00 00       	mov    eax,0x1
c00216fd:	c3                   	ret    

c00216fe <ISO9660::mkdir(char const*)>:
c00216fe:	b8 01 00 00 00       	mov    eax,0x1
c0021703:	c3                   	ret    

c0021704 <ISO9660::close(void*)>:
c0021704:	83 ec 0c             	sub    esp,0xc
c0021707:	b8 04 00 00 00       	mov    eax,0x4
c002170c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021710:	85 d2                	test   edx,edx
c0021712:	74 0e                	je     c0021722 <ISO9660::close(void*)+0x1e>
c0021714:	83 ec 0c             	sub    esp,0xc
c0021717:	52                   	push   edx
c0021718:	e8 33 e1 fe ff       	call   c000f850 <free>
c002171d:	83 c4 10             	add    esp,0x10
c0021720:	31 c0                	xor    eax,eax
c0021722:	83 c4 0c             	add    esp,0xc
c0021725:	c3                   	ret    

c0021726 <ISO9660::closeDir(void*)>:
c0021726:	83 ec 0c             	sub    esp,0xc
c0021729:	b8 04 00 00 00       	mov    eax,0x4
c002172e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021732:	85 d2                	test   edx,edx
c0021734:	74 0e                	je     c0021744 <ISO9660::closeDir(void*)+0x1e>
c0021736:	83 ec 0c             	sub    esp,0xc
c0021739:	52                   	push   edx
c002173a:	e8 11 e1 fe ff       	call   c000f850 <free>
c002173f:	83 c4 10             	add    esp,0x10
c0021742:	31 c0                	xor    eax,eax
c0021744:	83 c4 0c             	add    esp,0xc
c0021747:	c3                   	ret    

c0021748 <ISO9660::~ISO9660()>:
c0021748:	83 ec 0c             	sub    esp,0xc
c002174b:	ba 20 cb 02 c0       	mov    edx,0xc002cb20
c0021750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021754:	89 10                	mov    DWORD PTR [eax],edx
c0021756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002175a:	83 ec 0c             	sub    esp,0xc
c002175d:	50                   	push   eax
c002175e:	e8 33 1b ff ff       	call   c0013296 <Filesystem::~Filesystem()>
c0021763:	83 c4 10             	add    esp,0x10
c0021766:	90                   	nop
c0021767:	83 c4 0c             	add    esp,0xc
c002176a:	c3                   	ret    
c002176b:	90                   	nop

c002176c <ISO9660::~ISO9660()>:
c002176c:	83 ec 0c             	sub    esp,0xc
c002176f:	83 ec 0c             	sub    esp,0xc
c0021772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021776:	e8 cd ff ff ff       	call   c0021748 <ISO9660::~ISO9660()>
c002177b:	83 c4 10             	add    esp,0x10
c002177e:	83 ec 08             	sub    esp,0x8
c0021781:	6a 08                	push   0x8
c0021783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021787:	e8 02 17 ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c002178c:	83 c4 10             	add    esp,0x10
c002178f:	83 c4 0c             	add    esp,0xc
c0021792:	c3                   	ret    

c0021793 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021793:	55                   	push   ebp
c0021794:	31 c9                	xor    ecx,ecx
c0021796:	57                   	push   edi
c0021797:	56                   	push   esi
c0021798:	53                   	push   ebx
c0021799:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002179d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00217a1:	89 eb                	mov    ebx,ebp
c00217a3:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00217a7:	39 ce                	cmp    esi,ecx
c00217a9:	7e 17                	jle    c00217c2 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00217ab:	31 d2                	xor    edx,edx
c00217ad:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00217b1:	7d 13                	jge    c00217c6 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00217b3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00217b7:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00217ba:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00217bd:	75 0d                	jne    c00217cc <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00217bf:	42                   	inc    edx
c00217c0:	eb eb                	jmp    c00217ad <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00217c2:	31 c0                	xor    eax,eax
c00217c4:	eb 0a                	jmp    c00217d0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217c6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00217ca:	eb 04                	jmp    c00217d0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217cc:	41                   	inc    ecx
c00217cd:	43                   	inc    ebx
c00217ce:	eb d7                	jmp    c00217a7 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00217d0:	5b                   	pop    ebx
c00217d1:	5e                   	pop    esi
c00217d2:	5f                   	pop    edi
c00217d3:	5d                   	pop    ebp
c00217d4:	c3                   	ret    

c00217d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00217d5:	56                   	push   esi
c00217d6:	53                   	push   ebx
c00217d7:	52                   	push   edx
c00217d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217dc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00217e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00217e4:	39 0d 20 1d 03 c0    	cmp    DWORD PTR ds:0xc0031d20,ecx
c00217ea:	75 08                	jne    c00217f4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00217ec:	38 05 74 db 02 c0    	cmp    BYTE PTR ds:0xc002db74,al
c00217f2:	74 2b                	je     c002181f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00217f4:	83 ec 0c             	sub    esp,0xc
c00217f7:	a2 74 db 02 c0       	mov    ds:0xc002db74,al
c00217fc:	68 40 1d 03 c0       	push   0xc0031d40
c0021801:	0f be c0             	movsx  eax,al
c0021804:	6a 01                	push   0x1
c0021806:	89 0d 20 1d 03 c0    	mov    DWORD PTR ds:0xc0031d20,ecx
c002180c:	31 db                	xor    ebx,ebx
c002180e:	53                   	push   ebx
c002180f:	51                   	push   ecx
c0021810:	ff 34 85 fc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1504]
c0021817:	e8 62 4f ff ff       	call   c001677e <LogicalDisk::read(unsigned long long, int, void*)>
c002181c:	83 c4 20             	add    esp,0x20
c002181f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021827:	c7 44 24 14 40 1d 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031d40
c002182f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021833:	58                   	pop    eax
c0021834:	5b                   	pop    ebx
c0021835:	5e                   	pop    esi
c0021836:	e9 09 ef fd ff       	jmp    c0000744 <memcpy>
c002183b:	90                   	nop

c002183c <ISO9660::tryMount(LogicalDisk*, int)>:
c002183c:	81 ec 10 08 00 00    	sub    esp,0x810
c0021842:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021849:	83 c0 41             	add    eax,0x41
c002184c:	0f be c0             	movsx  eax,al
c002184f:	50                   	push   eax
c0021850:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021854:	50                   	push   eax
c0021855:	6a 10                	push   0x10
c0021857:	e8 79 ff ff ff       	call   c00217d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002185c:	83 c4 10             	add    esp,0x10
c002185f:	31 c0                	xor    eax,eax
c0021861:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021866:	75 1d                	jne    c0021885 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021868:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002186d:	75 16                	jne    c0021885 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002186f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021874:	75 0f                	jne    c0021885 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021876:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002187b:	75 08                	jne    c0021885 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002187d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021882:	0f 94 c0             	sete   al
c0021885:	81 c4 0c 08 00 00    	add    esp,0x80c
c002188b:	c3                   	ret    

c002188c <ISO9660::read(void*, unsigned long, void*, int*)>:
c002188c:	55                   	push   ebp
c002188d:	57                   	push   edi
c002188e:	56                   	push   esi
c002188f:	53                   	push   ebx
c0021890:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021896:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002189d:	85 ed                	test   ebp,ebp
c002189f:	0f 84 d6 01 00 00    	je     c0021a7b <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00218a5:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00218ad:	0f 84 c8 01 00 00    	je     c0021a7b <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00218b3:	b8 01 00 00 00       	mov    eax,0x1
c00218b8:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00218bc:	0f 85 be 01 00 00    	jne    c0021a80 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00218c2:	31 d2                	xor    edx,edx
c00218c4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00218cb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00218ce:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00218d1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00218d5:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c00218d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00218db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218df:	01 f0                	add    eax,esi
c00218e1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00218e4:	11 fa                	adc    edx,edi
c00218e6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00218ea:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00218ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00218f2:	19 d1                	sbb    ecx,edx
c00218f4:	72 0a                	jb     c0021900 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c00218f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218fe:	eb 13                	jmp    c0021913 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021900:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021904:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021908:	29 f0                	sub    eax,esi
c002190a:	19 fa                	sbb    edx,edi
c002190c:	89 04 24             	mov    DWORD PTR [esp],eax
c002190f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021913:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021916:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021919:	0f a4 c2 0b          	shld   edx,eax,0xb
c002191d:	51                   	push   ecx
c002191e:	c1 e0 0b             	shl    eax,0xb
c0021921:	01 c6                	add    esi,eax
c0021923:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021927:	11 d7                	adc    edi,edx
c0021929:	50                   	push   eax
c002192a:	89 fa                	mov    edx,edi
c002192c:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021930:	89 f0                	mov    eax,esi
c0021932:	53                   	push   ebx
c0021933:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021937:	50                   	push   eax
c0021938:	e8 98 fe ff ff       	call   c00217d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002193d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021941:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021944:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021948:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002194e:	83 c4 10             	add    esp,0x10
c0021951:	b8 00 08 00 00       	mov    eax,0x800
c0021956:	29 d0                	sub    eax,edx
c0021958:	39 c1                	cmp    ecx,eax
c002195a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002195e:	83 d9 00             	sbb    ecx,0x0
c0021961:	7d 1c                	jge    c002197f <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021963:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021968:	75 12                	jne    c002197c <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c002196a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021971:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021977:	e9 fb 00 00 00       	jmp    c0021a77 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c002197c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002197f:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021982:	31 d2                	xor    edx,edx
c0021984:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021988:	39 c2                	cmp    edx,eax
c002198a:	7d 14                	jge    c00219a0 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c002198c:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021993:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021997:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002199a:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002199d:	42                   	inc    edx
c002199e:	eb e8                	jmp    c0021988 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c00219a0:	89 c3                	mov    ebx,eax
c00219a2:	85 c0                	test   eax,eax
c00219a4:	79 02                	jns    c00219a8 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c00219a6:	31 db                	xor    ebx,ebx
c00219a8:	99                   	cdq    
c00219a9:	01 c3                	add    ebx,eax
c00219ab:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c00219b2:	01 c6                	add    esi,eax
c00219b4:	11 d7                	adc    edi,edx
c00219b6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00219ba:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00219be:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00219c1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00219c5:	29 c6                	sub    esi,eax
c00219c7:	19 d7                	sbb    edi,edx
c00219c9:	89 34 24             	mov    DWORD PTR [esp],esi
c00219cc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00219d0:	b8 ff 07 00 00       	mov    eax,0x7ff
c00219d5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00219d8:	b8 00 00 00 00       	mov    eax,0x0
c00219dd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00219e1:	7d 3e                	jge    c0021a21 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c00219e3:	52                   	push   edx
c00219e4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219e8:	50                   	push   eax
c00219e9:	53                   	push   ebx
c00219ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00219ee:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00219f2:	0f ac d0 0b          	shrd   eax,edx,0xb
c00219f6:	50                   	push   eax
c00219f7:	e8 d9 fd ff ff       	call   c00217d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219fc:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021a04:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021a09:	81 c3 00 08 00 00    	add    ebx,0x800
c0021a0f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021a17:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021a1c:	83 c4 10             	add    esp,0x10
c0021a1f:	eb af                	jmp    c00219d0 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a25:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021a28:	74 32                	je     c0021a5c <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021a2a:	50                   	push   eax
c0021a2b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a2f:	50                   	push   eax
c0021a30:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a34:	50                   	push   eax
c0021a35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021a39:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021a3d:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021a41:	56                   	push   esi
c0021a42:	e8 8e fd ff ff       	call   c00217d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a47:	83 c4 0c             	add    esp,0xc
c0021a4a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021a4e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a52:	50                   	push   eax
c0021a53:	53                   	push   ebx
c0021a54:	e8 eb ec fd ff       	call   c0000744 <memcpy>
c0021a59:	83 c4 10             	add    esp,0x10
c0021a5c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a63:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a6b:	89 38                	mov    DWORD PTR [eax],edi
c0021a6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a71:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a74:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a77:	31 c0                	xor    eax,eax
c0021a79:	eb 05                	jmp    c0021a80 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021a7b:	b8 04 00 00 00       	mov    eax,0x4
c0021a80:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a86:	5b                   	pop    ebx
c0021a87:	5e                   	pop    esi
c0021a88:	5f                   	pop    edi
c0021a89:	5d                   	pop    ebp
c0021a8a:	c3                   	ret    
c0021a8b:	90                   	nop

c0021a8c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a8c:	55                   	push   ebp
c0021a8d:	57                   	push   edi
c0021a8e:	56                   	push   esi
c0021a8f:	53                   	push   ebx
c0021a90:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a96:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021a9d:	85 f6                	test   esi,esi
c0021a9f:	0f 84 64 02 00 00    	je     c0021d09 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021aa5:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021aad:	0f 84 56 02 00 00    	je     c0021d09 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021ab3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021ab6:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021ab9:	75 0a                	jne    c0021ac5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021abb:	b8 07 00 00 00       	mov    eax,0x7
c0021ac0:	e9 49 02 00 00       	jmp    c0021d0e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021ac5:	50                   	push   eax
c0021ac6:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021aca:	50                   	push   eax
c0021acb:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021ad2:	53                   	push   ebx
c0021ad3:	8b 06                	mov    eax,DWORD PTR [esi]
c0021ad5:	c1 e0 0b             	shl    eax,0xb
c0021ad8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021adb:	c1 e8 0b             	shr    eax,0xb
c0021ade:	50                   	push   eax
c0021adf:	e8 f1 fc ff ff       	call   c00217d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ae4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021ae7:	83 c4 10             	add    esp,0x10
c0021aea:	89 c1                	mov    ecx,eax
c0021aec:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021aef:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021af5:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021af8:	84 db                	test   bl,bl
c0021afa:	0f 85 90 00 00 00    	jne    c0021b90 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021b00:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021b06:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b0c:	29 c7                	sub    edi,eax
c0021b0e:	89 fb                	mov    ebx,edi
c0021b10:	c1 fb 1f             	sar    ebx,0x1f
c0021b13:	01 f8                	add    eax,edi
c0021b15:	11 da                	adc    edx,ebx
c0021b17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b1f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021b22:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021b25:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b28:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b2b:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b2e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b32:	89 d8                	mov    eax,ebx
c0021b34:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021b37:	ba 00 00 00 00       	mov    edx,0x0
c0021b3c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021b40:	b8 00 00 00 00       	mov    eax,0x0
c0021b45:	73 0b                	jae    c0021b52 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021b47:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b4a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021b4e:	29 f8                	sub    eax,edi
c0021b50:	19 da                	sbb    edx,ebx
c0021b52:	89 d3                	mov    ebx,edx
c0021b54:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b57:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b5a:	09 c3                	or     ebx,eax
c0021b5c:	0f 84 59 ff ff ff    	je     c0021abb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b62:	55                   	push   ebp
c0021b63:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b67:	50                   	push   eax
c0021b68:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b6f:	53                   	push   ebx
c0021b70:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b72:	c1 e0 0b             	shl    eax,0xb
c0021b75:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021b79:	c1 e8 0b             	shr    eax,0xb
c0021b7c:	50                   	push   eax
c0021b7d:	e8 53 fc ff ff       	call   c00217d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b82:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b85:	83 c4 10             	add    esp,0x10
c0021b88:	25 ff 07 00 00       	and    eax,0x7ff
c0021b8d:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b90:	57                   	push   edi
c0021b91:	6a 28                	push   0x28
c0021b93:	6a 00                	push   0x0
c0021b95:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b99:	50                   	push   eax
c0021b9a:	e8 d9 eb fd ff       	call   c0000778 <memset>
c0021b9f:	31 d2                	xor    edx,edx
c0021ba1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021ba4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021baa:	89 f8                	mov    eax,edi
c0021bac:	83 c0 21             	add    eax,0x21
c0021baf:	83 d2 00             	adc    edx,0x0
c0021bb2:	89 c7                	mov    edi,eax
c0021bb4:	89 d5                	mov    ebp,edx
c0021bb6:	83 c4 10             	add    esp,0x10
c0021bb9:	31 c9                	xor    ecx,ecx
c0021bbb:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021bc2:	83 f9 28             	cmp    ecx,0x28
c0021bc5:	88 04 24             	mov    BYTE PTR [esp],al
c0021bc8:	0f 94 c2             	sete   dl
c0021bcb:	88 d0                	mov    al,dl
c0021bcd:	ba ff 07 00 00       	mov    edx,0x7ff
c0021bd2:	39 fa                	cmp    edx,edi
c0021bd4:	ba 00 00 00 00       	mov    edx,0x0
c0021bd9:	19 ea                	sbb    edx,ebp
c0021bdb:	0f 92 c2             	setb   dl
c0021bde:	09 c2                	or     edx,eax
c0021be0:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021be4:	0f 94 c0             	sete   al
c0021be7:	08 d0                	or     al,dl
c0021be9:	75 16                	jne    c0021c01 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021beb:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021bef:	74 10                	je     c0021c01 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021bf1:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021bf4:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021bf8:	41                   	inc    ecx
c0021bf9:	83 c7 01             	add    edi,0x1
c0021bfc:	83 d5 00             	adc    ebp,0x0
c0021bff:	eb ba                	jmp    c0021bbb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021c01:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021c08:	83 ec 0c             	sub    esp,0xc
c0021c0b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021c0f:	57                   	push   edi
c0021c10:	e8 7f eb fd ff       	call   c0000794 <strlen>
c0021c15:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021c1d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c21:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021c28:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c2b:	5a                   	pop    edx
c0021c2c:	25 ff 07 00 00       	and    eax,0x7ff
c0021c31:	01 c8                	add    eax,ecx
c0021c33:	59                   	pop    ecx
c0021c34:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021c3a:	83 e0 02             	and    eax,0x2
c0021c3d:	3c 01                	cmp    al,0x1
c0021c3f:	19 c0                	sbb    eax,eax
c0021c41:	83 c0 02             	add    eax,0x2
c0021c44:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c48:	57                   	push   edi
c0021c49:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021c4d:	50                   	push   eax
c0021c4e:	e8 e1 eb fd ff       	call   c0000834 <strcpy>
c0021c53:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021c57:	83 c4 10             	add    esp,0x10
c0021c5a:	84 c0                	test   al,al
c0021c5c:	75 21                	jne    c0021c7f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021c5e:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c66:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c6e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c76:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c7d:	eb 28                	jmp    c0021ca7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c7f:	fe c8                	dec    al
c0021c81:	75 24                	jne    c0021ca7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c83:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c8b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c93:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c9b:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021ca2:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021ca7:	0f b6 fb             	movzx  edi,bl
c0021caa:	31 db                	xor    ebx,ebx
c0021cac:	50                   	push   eax
c0021cad:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021cb4:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021cb8:	50                   	push   eax
c0021cb9:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021cc0:	e8 7f ea fd ff       	call   c0000744 <memcpy>
c0021cc5:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021ccc:	89 f9                	mov    ecx,edi
c0021cce:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021cd4:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021cd7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021cda:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021cdd:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021ce0:	83 c4 10             	add    esp,0x10
c0021ce3:	39 c7                	cmp    edi,eax
c0021ce5:	89 df                	mov    edi,ebx
c0021ce7:	19 d7                	sbb    edi,edx
c0021ce9:	72 10                	jb     c0021cfb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021ceb:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021cf2:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021cf9:	eb 0a                	jmp    c0021d05 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021cfb:	29 c8                	sub    eax,ecx
c0021cfd:	19 da                	sbb    edx,ebx
c0021cff:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021d02:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021d05:	31 c0                	xor    eax,eax
c0021d07:	eb 05                	jmp    c0021d0e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021d09:	b8 04 00 00 00       	mov    eax,0x4
c0021d0e:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021d14:	5b                   	pop    ebx
c0021d15:	5e                   	pop    esi
c0021d16:	5f                   	pop    edi
c0021d17:	5d                   	pop    ebp
c0021d18:	c3                   	ret    

c0021d19 <readRoot(unsigned int*, unsigned int*, char)>:
c0021d19:	81 ec 40 08 00 00    	sub    esp,0x840
c0021d1f:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021d27:	50                   	push   eax
c0021d28:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021d2c:	50                   	push   eax
c0021d2d:	6a 10                	push   0x10
c0021d2f:	e8 a1 fa ff ff       	call   c00217d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d34:	83 c4 0c             	add    esp,0xc
c0021d37:	6a 22                	push   0x22
c0021d39:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021d40:	50                   	push   eax
c0021d41:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021d45:	50                   	push   eax
c0021d46:	e8 f9 e9 fd ff       	call   c0000744 <memcpy>
c0021d4b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d52:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021d56:	89 10                	mov    DWORD PTR [eax],edx
c0021d58:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d5f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d63:	89 10                	mov    DWORD PTR [eax],edx
c0021d65:	b0 01                	mov    al,0x1
c0021d67:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021d6d:	c3                   	ret    

c0021d6e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d6e:	55                   	push   ebp
c0021d6f:	57                   	push   edi
c0021d70:	56                   	push   esi
c0021d71:	53                   	push   ebx
c0021d72:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d78:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d7f:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d8a:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d8e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d92:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d96:	75 03                	jne    c0021d9b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d98:	83 c3 02             	add    ebx,0x2
c0021d9b:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d9e:	75 03                	jne    c0021da3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021da0:	43                   	inc    ebx
c0021da1:	eb f8                	jmp    c0021d9b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021da3:	51                   	push   ecx
c0021da4:	68 00 01 00 00       	push   0x100
c0021da9:	6a 00                	push   0x0
c0021dab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021daf:	50                   	push   eax
c0021db0:	e8 c3 e9 fd ff       	call   c0000778 <memset>
c0021db5:	83 c4 10             	add    esp,0x10
c0021db8:	31 d2                	xor    edx,edx
c0021dba:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021dbd:	84 c0                	test   al,al
c0021dbf:	74 21                	je     c0021de2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021dc1:	3c 2f                	cmp    al,0x2f
c0021dc3:	75 0b                	jne    c0021dd0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021dc5:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021dc9:	bd 01 00 00 00       	mov    ebp,0x1
c0021dce:	eb 14                	jmp    c0021de4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021dd0:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021dd3:	80 f9 19             	cmp    cl,0x19
c0021dd6:	77 03                	ja     c0021ddb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021dd8:	83 e8 20             	sub    eax,0x20
c0021ddb:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021ddf:	42                   	inc    edx
c0021de0:	eb d8                	jmp    c0021dba <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021de2:	31 ed                	xor    ebp,ebp
c0021de4:	83 ec 0c             	sub    esp,0xc
c0021de7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021dee:	e8 4d da fe ff       	call   c000f840 <malloc>
c0021df3:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021dfa:	89 c6                	mov    esi,eax
c0021dfc:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021e02:	c1 ef 0b             	shr    edi,0xb
c0021e05:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021e0c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021e10:	83 c4 10             	add    esp,0x10
c0021e13:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021e18:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021e1c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021e23:	74 28                	je     c0021e4d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021e25:	52                   	push   edx
c0021e26:	57                   	push   edi
c0021e27:	50                   	push   eax
c0021e28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e2c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021e33:	e8 9d f9 ff ff       	call   c00217d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e3c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021e43:	05 00 08 00 00       	add    eax,0x800
c0021e48:	83 c4 10             	add    esp,0x10
c0021e4b:	eb cb                	jmp    c0021e18 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021e4d:	83 ec 0c             	sub    esp,0xc
c0021e50:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021e54:	57                   	push   edi
c0021e55:	e8 3a e9 fd ff       	call   c0000794 <strlen>
c0021e5a:	50                   	push   eax
c0021e5b:	57                   	push   edi
c0021e5c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e63:	56                   	push   esi
c0021e64:	e8 2a f9 ff ff       	call   c0021793 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e69:	83 c4 20             	add    esp,0x20
c0021e6c:	85 c0                	test   eax,eax
c0021e6e:	75 13                	jne    c0021e83 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e70:	83 ec 0c             	sub    esp,0xc
c0021e73:	56                   	push   esi
c0021e74:	e8 d7 d9 fe ff       	call   c000f850 <free>
c0021e79:	83 c4 10             	add    esp,0x10
c0021e7c:	31 c0                	xor    eax,eax
c0021e7e:	e9 b3 00 00 00       	jmp    c0021f36 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e83:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e87:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e8b:	c1 e7 08             	shl    edi,0x8
c0021e8e:	c1 e2 10             	shl    edx,0x10
c0021e91:	09 d7                	or     edi,edx
c0021e93:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e97:	09 d7                	or     edi,edx
c0021e99:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e9d:	c1 e2 18             	shl    edx,0x18
c0021ea0:	09 d7                	or     edi,edx
c0021ea2:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021ea6:	89 d1                	mov    ecx,edx
c0021ea8:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021eac:	c1 e1 08             	shl    ecx,0x8
c0021eaf:	c1 e2 10             	shl    edx,0x10
c0021eb2:	09 ca                	or     edx,ecx
c0021eb4:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021eb8:	09 ca                	or     edx,ecx
c0021eba:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021ebe:	c1 e1 18             	shl    ecx,0x18
c0021ec1:	09 ca                	or     edx,ecx
c0021ec3:	89 e9                	mov    ecx,ebp
c0021ec5:	84 c9                	test   cl,cl
c0021ec7:	74 3c                	je     c0021f05 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021ec9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021ecd:	83 ec 0c             	sub    esp,0xc
c0021ed0:	56                   	push   esi
c0021ed1:	e8 7a d9 fe ff       	call   c000f850 <free>
c0021ed6:	83 c4 0c             	add    esp,0xc
c0021ed9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ee0:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021ee5:	50                   	push   eax
c0021ee6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021eed:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ef4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021ef8:	52                   	push   edx
c0021ef9:	57                   	push   edi
c0021efa:	53                   	push   ebx
c0021efb:	e8 6e fe ff ff       	call   c0021d6e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f00:	83 c4 20             	add    esp,0x20
c0021f03:	eb 31                	jmp    c0021f36 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f05:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021f08:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021f0f:	d0 e8                	shr    al,1
c0021f11:	89 3b                	mov    DWORD PTR [ebx],edi
c0021f13:	83 e0 01             	and    eax,0x1
c0021f16:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021f1d:	83 ec 0c             	sub    esp,0xc
c0021f20:	89 13                	mov    DWORD PTR [ebx],edx
c0021f22:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021f29:	89 03                	mov    DWORD PTR [ebx],eax
c0021f2b:	56                   	push   esi
c0021f2c:	e8 1f d9 fe ff       	call   c000f850 <free>
c0021f31:	83 c4 10             	add    esp,0x10
c0021f34:	b0 01                	mov    al,0x1
c0021f36:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f3c:	5b                   	pop    ebx
c0021f3d:	5e                   	pop    esi
c0021f3e:	5f                   	pop    edi
c0021f3f:	5d                   	pop    ebp
c0021f40:	c3                   	ret    

c0021f41 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021f41:	55                   	push   ebp
c0021f42:	57                   	push   edi
c0021f43:	56                   	push   esi
c0021f44:	53                   	push   ebx
c0021f45:	83 ec 20             	sub    esp,0x20
c0021f48:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f4c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021f50:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021f54:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f5c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f64:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f69:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f6f:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f75:	57                   	push   edi
c0021f76:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f7a:	50                   	push   eax
c0021f7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f7f:	50                   	push   eax
c0021f80:	e8 94 fd ff ff       	call   c0021d19 <readRoot(unsigned int*, unsigned int*, char)>
c0021f85:	5a                   	pop    edx
c0021f86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f8a:	e8 05 e8 fd ff       	call   c0000794 <strlen>
c0021f8f:	83 c4 10             	add    esp,0x10
c0021f92:	83 f8 03             	cmp    eax,0x3
c0021f95:	77 17                	ja     c0021fae <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f9b:	89 03                	mov    DWORD PTR [ebx],eax
c0021f9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fa1:	89 06                	mov    DWORD PTR [esi],eax
c0021fa3:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021faa:	b0 01                	mov    al,0x1
c0021fac:	eb 19                	jmp    c0021fc7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021fae:	50                   	push   eax
c0021faf:	55                   	push   ebp
c0021fb0:	57                   	push   edi
c0021fb1:	56                   	push   esi
c0021fb2:	53                   	push   ebx
c0021fb3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021fb7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021fbb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021fbf:	e8 aa fd ff ff       	call   c0021d6e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021fc4:	83 c4 20             	add    esp,0x20
c0021fc7:	83 c4 1c             	add    esp,0x1c
c0021fca:	5b                   	pop    ebx
c0021fcb:	5e                   	pop    esi
c0021fcc:	5f                   	pop    edi
c0021fcd:	5d                   	pop    ebp
c0021fce:	c3                   	ret    
c0021fcf:	90                   	nop

c0021fd0 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021fd0:	57                   	push   edi
c0021fd1:	56                   	push   esi
c0021fd2:	53                   	push   ebx
c0021fd3:	83 ec 10             	sub    esp,0x10
c0021fd6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021fda:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021fde:	85 ff                	test   edi,edi
c0021fe0:	0f 84 9d 00 00 00    	je     c0022083 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021fe6:	85 f6                	test   esi,esi
c0021fe8:	0f 84 95 00 00 00    	je     c0022083 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021fee:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021ff3:	74 17                	je     c002200c <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021ff5:	83 ec 0c             	sub    esp,0xc
c0021ff8:	68 d7 ca 02 c0       	push   0xc002cad7
c0021ffd:	e8 6c 0f ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0022002:	83 c4 10             	add    esp,0x10
c0022005:	b8 03 00 00 00       	mov    eax,0x3
c002200a:	eb 7c                	jmp    c0022088 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002200c:	83 ec 0c             	sub    esp,0xc
c002200f:	6a 1c                	push   0x1c
c0022011:	e8 2a d8 fe ff       	call   c000f840 <malloc>
c0022016:	89 07                	mov    DWORD PTR [edi],eax
c0022018:	89 c3                	mov    ebx,eax
c002201a:	58                   	pop    eax
c002201b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002201f:	50                   	push   eax
c0022020:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022023:	50                   	push   eax
c0022024:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022028:	50                   	push   eax
c0022029:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002202d:	50                   	push   eax
c002202e:	56                   	push   esi
c002202f:	e8 0d ff ff ff       	call   c0021f41 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022034:	83 c4 20             	add    esp,0x20
c0022037:	84 c0                	test   al,al
c0022039:	74 07                	je     c0022042 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002203b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022040:	74 0b                	je     c002204d <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022042:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022046:	b8 01 00 00 00       	mov    eax,0x1
c002204b:	eb 3b                	jmp    c0022088 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002204d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022051:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022055:	89 03                	mov    DWORD PTR [ebx],eax
c0022057:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002205e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022062:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022069:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022070:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022073:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002207a:	8a 06                	mov    al,BYTE PTR [esi]
c002207c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002207f:	31 c0                	xor    eax,eax
c0022081:	eb 05                	jmp    c0022088 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022083:	b8 04 00 00 00       	mov    eax,0x4
c0022088:	83 c4 10             	add    esp,0x10
c002208b:	5b                   	pop    ebx
c002208c:	5e                   	pop    esi
c002208d:	5f                   	pop    edi
c002208e:	c3                   	ret    
c002208f:	90                   	nop

c0022090 <ISO9660::exists(char const*)>:
c0022090:	83 ec 28             	sub    esp,0x28
c0022093:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022097:	8d 54 24 18          	lea    edx,[esp+0x18]
c002209b:	52                   	push   edx
c002209c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002209f:	52                   	push   edx
c00220a0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00220a4:	52                   	push   edx
c00220a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00220a9:	52                   	push   edx
c00220aa:	50                   	push   eax
c00220ab:	e8 91 fe ff ff       	call   c0021f41 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220b0:	83 c4 3c             	add    esp,0x3c
c00220b3:	c3                   	ret    

c00220b4 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00220b4:	56                   	push   esi
c00220b5:	53                   	push   ebx
c00220b6:	83 ec 14             	sub    esp,0x14
c00220b9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00220bd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00220c1:	85 db                	test   ebx,ebx
c00220c3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00220c7:	0f 94 c2             	sete   dl
c00220ca:	85 f6                	test   esi,esi
c00220cc:	0f 94 c0             	sete   al
c00220cf:	08 c2                	or     dl,al
c00220d1:	75 68                	jne    c002213b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220d3:	85 c9                	test   ecx,ecx
c00220d5:	74 64                	je     c002213b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220d7:	83 ec 0c             	sub    esp,0xc
c00220da:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00220dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220e1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220e7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220ee:	50                   	push   eax
c00220ef:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00220f2:	50                   	push   eax
c00220f3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220f7:	50                   	push   eax
c00220f8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220fc:	50                   	push   eax
c00220fd:	51                   	push   ecx
c00220fe:	e8 3e fe ff ff       	call   c0021f41 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022103:	83 c4 20             	add    esp,0x20
c0022106:	ba 01 00 00 00       	mov    edx,0x1
c002210b:	84 c0                	test   al,al
c002210d:	74 31                	je     c0022140 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002210f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022113:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002211a:	89 03                	mov    DWORD PTR [ebx],eax
c002211c:	ba 00 00 00 00       	mov    edx,0x0
c0022121:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022125:	85 c0                	test   eax,eax
c0022127:	0f 95 06             	setne  BYTE PTR [esi]
c002212a:	74 14                	je     c0022140 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002212c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022132:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022139:	eb 05                	jmp    c0022140 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002213b:	ba 04 00 00 00       	mov    edx,0x4
c0022140:	83 c4 14             	add    esp,0x14
c0022143:	89 d0                	mov    eax,edx
c0022145:	5b                   	pop    ebx
c0022146:	5e                   	pop    esi
c0022147:	c3                   	ret    

c0022148 <ISO9660::openDir(char const*, void**)>:
c0022148:	57                   	push   edi
c0022149:	56                   	push   esi
c002214a:	53                   	push   ebx
c002214b:	83 ec 10             	sub    esp,0x10
c002214e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022152:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022156:	85 ff                	test   edi,edi
c0022158:	0f 84 95 00 00 00    	je     c00221f3 <ISO9660::openDir(char const*, void**)+0xab>
c002215e:	85 f6                	test   esi,esi
c0022160:	0f 84 8d 00 00 00    	je     c00221f3 <ISO9660::openDir(char const*, void**)+0xab>
c0022166:	83 ec 0c             	sub    esp,0xc
c0022169:	6a 1c                	push   0x1c
c002216b:	e8 d0 d6 fe ff       	call   c000f840 <malloc>
c0022170:	89 07                	mov    DWORD PTR [edi],eax
c0022172:	89 c3                	mov    ebx,eax
c0022174:	59                   	pop    ecx
c0022175:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022179:	50                   	push   eax
c002217a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002217d:	50                   	push   eax
c002217e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022182:	50                   	push   eax
c0022183:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022187:	50                   	push   eax
c0022188:	56                   	push   esi
c0022189:	e8 b3 fd ff ff       	call   c0021f41 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002218e:	83 c4 20             	add    esp,0x20
c0022191:	84 c0                	test   al,al
c0022193:	74 07                	je     c002219c <ISO9660::openDir(char const*, void**)+0x54>
c0022195:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002219a:	75 21                	jne    c00221bd <ISO9660::openDir(char const*, void**)+0x75>
c002219c:	0f b6 c0             	movzx  eax,al
c002219f:	52                   	push   edx
c00221a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00221a4:	50                   	push   eax
c00221a5:	68 fd ca 02 c0       	push   0xc002cafd
c00221aa:	e8 bf 0d ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00221af:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00221b3:	83 c4 10             	add    esp,0x10
c00221b6:	b8 01 00 00 00       	mov    eax,0x1
c00221bb:	eb 3b                	jmp    c00221f8 <ISO9660::openDir(char const*, void**)+0xb0>
c00221bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221c1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00221c5:	89 03                	mov    DWORD PTR [ebx],eax
c00221c7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00221ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221d2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00221d9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221e0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00221e3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00221ea:	8a 06                	mov    al,BYTE PTR [esi]
c00221ec:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00221ef:	31 c0                	xor    eax,eax
c00221f1:	eb 05                	jmp    c00221f8 <ISO9660::openDir(char const*, void**)+0xb0>
c00221f3:	b8 04 00 00 00       	mov    eax,0x4
c00221f8:	83 c4 10             	add    esp,0x10
c00221fb:	5b                   	pop    ebx
c00221fc:	5e                   	pop    esi
c00221fd:	5f                   	pop    edi
c00221fe:	c3                   	ret    
c00221ff:	90                   	nop

c0022200 <ISO9660::ISO9660()>:
c0022200:	83 ec 0c             	sub    esp,0xc
c0022203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022207:	83 ec 0c             	sub    esp,0xc
c002220a:	50                   	push   eax
c002220b:	e8 62 10 ff ff       	call   c0013272 <Filesystem::Filesystem()>
c0022210:	83 c4 10             	add    esp,0x10
c0022213:	ba 20 cb 02 c0       	mov    edx,0xc002cb20
c0022218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002221c:	89 10                	mov    DWORD PTR [eax],edx
c002221e:	90                   	nop
c002221f:	83 c4 0c             	add    esp,0xc
c0022222:	c3                   	ret    
c0022223:	90                   	nop

c0022224 <SoundChannel::~SoundChannel()>:
c0022224:	83 ec 0c             	sub    esp,0xc
c0022227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002222b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002222e:	83 ec 0c             	sub    esp,0xc
c0022231:	50                   	push   eax
c0022232:	e8 19 d6 fe ff       	call   c000f850 <free>
c0022237:	83 c4 10             	add    esp,0x10
c002223a:	90                   	nop
c002223b:	83 c4 0c             	add    esp,0xc
c002223e:	c3                   	ret    
c002223f:	90                   	nop

c0022240 <SoundChannel::setSpeed(float)>:
c0022240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022244:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022248:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002224b:	c3                   	ret    

c002224c <SoundChannel::getSpeed()>:
c002224c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022250:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022253:	c3                   	ret    

c0022254 <SoundChannel::setVolume(int)>:
c0022254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022258:	83 f8 64             	cmp    eax,0x64
c002225b:	7e 05                	jle    c0022262 <SoundChannel::setVolume(int)+0xe>
c002225d:	b8 64 00 00 00       	mov    eax,0x64
c0022262:	85 c0                	test   eax,eax
c0022264:	79 02                	jns    c0022268 <SoundChannel::setVolume(int)+0x14>
c0022266:	31 c0                	xor    eax,eax
c0022268:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002226c:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002226f:	c3                   	ret    

c0022270 <SoundChannel::getVolume()>:
c0022270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022274:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022277:	c3                   	ret    

c0022278 <SoundChannel::pause()>:
c0022278:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002227c:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022280:	c3                   	ret    
c0022281:	90                   	nop

c0022282 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022282:	83 ec 1c             	sub    esp,0x1c
c0022285:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022289:	e8 ea ff ff ff       	call   c0022278 <SoundChannel::pause()>
c002228e:	83 c4 04             	add    esp,0x4
c0022291:	6a 50                	push   0x50
c0022293:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022297:	e8 b8 ff ff ff       	call   c0022254 <SoundChannel::setVolume(int)>
c002229c:	83 c4 08             	add    esp,0x8
c002229f:	a1 98 cb 02 c0       	mov    eax,ds:0xc002cb98
c00222a4:	50                   	push   eax
c00222a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00222a9:	e8 92 ff ff ff       	call   c0022240 <SoundChannel::setSpeed(float)>
c00222ae:	83 c4 08             	add    esp,0x8
c00222b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222b5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00222b9:	89 10                	mov    DWORD PTR [eax],edx
c00222bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222bf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00222c3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00222c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00222ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00222d1:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00222d6:	75 23                	jne    c00222fb <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00222d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00222de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222e5:	0f af c2             	imul   eax,edx
c00222e8:	85 c0                	test   eax,eax
c00222ea:	79 03                	jns    c00222ef <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00222ec:	83 c0 03             	add    eax,0x3
c00222ef:	c1 f8 02             	sar    eax,0x2
c00222f2:	05 a0 0f 00 00       	add    eax,0xfa0
c00222f7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00222fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ff:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022303:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022306:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002230a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022311:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022315:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002231c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022320:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022323:	c1 e0 02             	shl    eax,0x2
c0022326:	83 ec 0c             	sub    esp,0xc
c0022329:	50                   	push   eax
c002232a:	e8 11 d5 fe ff       	call   c000f840 <malloc>
c002232f:	83 c4 10             	add    esp,0x10
c0022332:	89 c2                	mov    edx,eax
c0022334:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022338:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002233b:	83 ec 04             	sub    esp,0x4
c002233e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022342:	50                   	push   eax
c0022343:	6a 01                	push   0x1
c0022345:	6a 04                	push   0x4
c0022347:	e8 53 68 fe ff       	call   c0008b9f <src_new>
c002234c:	83 c4 10             	add    esp,0x10
c002234f:	89 c2                	mov    edx,eax
c0022351:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022355:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002235c:	85 c0                	test   eax,eax
c002235e:	74 10                	je     c0022370 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022360:	83 ec 0c             	sub    esp,0xc
c0022363:	68 7c cb 02 c0       	push   0xc002cb7c
c0022368:	e8 a2 82 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c002236d:	83 c4 10             	add    esp,0x10
c0022370:	a0 40 29 03 c0       	mov    al,ds:0xc0032940
c0022375:	83 f0 01             	xor    eax,0x1
c0022378:	84 c0                	test   al,al
c002237a:	74 57                	je     c00223d3 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c002237c:	a1 9c cb 02 c0       	mov    eax,ds:0xc002cb9c
c0022381:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022385:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002238d:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022395:	7f 35                	jg     c00223cc <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022397:	83 ec 0c             	sub    esp,0xc
c002239a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002239e:	e8 94 4f 00 00       	call   c0027337 <__floatsisf>
c00223a3:	83 c4 10             	add    esp,0x10
c00223a6:	8b 15 9c cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb9c
c00223ac:	83 ec 08             	sub    esp,0x8
c00223af:	52                   	push   edx
c00223b0:	50                   	push   eax
c00223b1:	e8 93 4b 00 00       	call   c0026f49 <__mulsf3>
c00223b6:	83 c4 10             	add    esp,0x10
c00223b9:	89 c2                	mov    edx,eax
c00223bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223bf:	89 14 85 40 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdac0],edx
c00223c6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00223ca:	eb c1                	jmp    c002238d <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00223cc:	c6 05 40 29 03 c0 01 	mov    BYTE PTR ds:0xc0032940,0x1
c00223d3:	90                   	nop
c00223d4:	83 c4 1c             	add    esp,0x1c
c00223d7:	c3                   	ret    

c00223d8 <SoundChannel::play()>:
c00223d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223dc:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00223e0:	c3                   	ret    
c00223e1:	90                   	nop

c00223e2 <SoundChannel::paused()>:
c00223e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223e6:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00223e9:	c3                   	ret    

c00223ea <SoundChannel::getSampleRate()>:
c00223ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00223f0:	c3                   	ret    
c00223f1:	90                   	nop

c00223f2 <SoundChannel::getBits()>:
c00223f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223f9:	c3                   	ret    

c00223fa <SoundChannel::getBufferUsed()>:
c00223fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223fe:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022401:	c3                   	ret    

c0022402 <SoundChannel::getBufferSize()>:
c0022402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022406:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022409:	c3                   	ret    

c002240a <SoundChannel::unbuffer(float*, int, int)>:
c002240a:	56                   	push   esi
c002240b:	53                   	push   ebx
c002240c:	83 ec 40             	sub    esp,0x40
c002240f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022413:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022416:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002241a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002241d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022421:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022425:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022429:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002242d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022431:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022435:	e8 fd 4e 00 00       	call   c0027337 <__floatsisf>
c002243a:	5a                   	pop    edx
c002243b:	89 c6                	mov    esi,eax
c002243d:	ff 33                	push   DWORD PTR [ebx]
c002243f:	e8 f3 4e 00 00       	call   c0027337 <__floatsisf>
c0022444:	59                   	pop    ecx
c0022445:	5a                   	pop    edx
c0022446:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022449:	50                   	push   eax
c002244a:	e8 fa 4a 00 00       	call   c0026f49 <__mulsf3>
c002244f:	59                   	pop    ecx
c0022450:	5a                   	pop    edx
c0022451:	50                   	push   eax
c0022452:	56                   	push   esi
c0022453:	e8 b4 4c 00 00       	call   c002710c <__divsf3>
c0022458:	89 04 24             	mov    DWORD PTR [esp],eax
c002245b:	e8 a7 61 00 00       	call   c0028607 <__extendsfdf2>
c0022460:	59                   	pop    ecx
c0022461:	5e                   	pop    esi
c0022462:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022466:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002246a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022472:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022476:	50                   	push   eax
c0022477:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002247a:	e8 15 63 fe ff       	call   c0008794 <src_process>
c002247f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022483:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022486:	83 c4 0c             	add    esp,0xc
c0022489:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002248c:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002248f:	29 d0                	sub    eax,edx
c0022491:	c1 e0 02             	shl    eax,0x2
c0022494:	50                   	push   eax
c0022495:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022498:	50                   	push   eax
c0022499:	51                   	push   ecx
c002249a:	e8 dd e1 fd ff       	call   c000067c <memmove>
c002249f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00224a3:	83 c4 44             	add    esp,0x44
c00224a6:	5b                   	pop    ebx
c00224a7:	5e                   	pop    esi
c00224a8:	c3                   	ret    
c00224a9:	90                   	nop

c00224aa <SoundChannel::buffer8(unsigned char*, int)>:
c00224aa:	55                   	push   ebp
c00224ab:	57                   	push   edi
c00224ac:	56                   	push   esi
c00224ad:	53                   	push   ebx
c00224ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224b2:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00224b6:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224b9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00224bd:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224c0:	74 7a                	je     c002253c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224c2:	85 ff                	test   edi,edi
c00224c4:	7e 76                	jle    c002253c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224c6:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00224ca:	8d 70 01             	lea    esi,[eax+0x1]
c00224cd:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224d0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224d3:	8b 1c 9d 40 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdac0]
c00224da:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224dd:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224e0:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224e3:	74 5e                	je     c0022543 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00224e5:	83 ff 01             	cmp    edi,0x1
c00224e8:	74 4b                	je     c0022535 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00224ea:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00224ee:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224f1:	8d 70 01             	lea    esi,[eax+0x1]
c00224f4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224f7:	8b 1c 9d 40 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdac0]
c00224fe:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022501:	b8 02 00 00 00       	mov    eax,0x2
c0022506:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022509:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002250c:	75 23                	jne    c0022531 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002250e:	eb 27                	jmp    c0022537 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022510:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022515:	8d 71 01             	lea    esi,[ecx+0x1]
c0022518:	40                   	inc    eax
c0022519:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002251c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002251f:	8b 1c 9d 40 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdac0]
c0022526:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022529:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002252c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002252f:	74 06                	je     c0022537 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022531:	39 c7                	cmp    edi,eax
c0022533:	75 db                	jne    c0022510 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022535:	89 f8                	mov    eax,edi
c0022537:	5b                   	pop    ebx
c0022538:	5e                   	pop    esi
c0022539:	5f                   	pop    edi
c002253a:	5d                   	pop    ebp
c002253b:	c3                   	ret    
c002253c:	5b                   	pop    ebx
c002253d:	31 c0                	xor    eax,eax
c002253f:	5e                   	pop    esi
c0022540:	5f                   	pop    edi
c0022541:	5d                   	pop    ebp
c0022542:	c3                   	ret    
c0022543:	b8 01 00 00 00       	mov    eax,0x1
c0022548:	eb ed                	jmp    c0022537 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002254a <SoundDevice::SoundDevice(char const*)>:
c002254a:	83 ec 1c             	sub    esp,0x1c
c002254d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022551:	83 ec 08             	sub    esp,0x8
c0022554:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022558:	50                   	push   eax
c0022559:	e8 26 20 ff ff       	call   c0014584 <Device::Device(char const*)>
c002255e:	83 c4 10             	add    esp,0x10
c0022561:	ba a8 cb 02 c0       	mov    edx,0xc002cba8
c0022566:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002256a:	89 10                	mov    DWORD PTR [eax],edx
c002256c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022570:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002257a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002257e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022588:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022590:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022595:	7f 19                	jg     c00225b0 <SoundDevice::SoundDevice(char const*)+0x66>
c0022597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002259b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002259f:	83 c2 54             	add    edx,0x54
c00225a2:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00225aa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225ae:	eb e0                	jmp    c0022590 <SoundDevice::SoundDevice(char const*)+0x46>
c00225b0:	90                   	nop
c00225b1:	83 c4 1c             	add    esp,0x1c
c00225b4:	c3                   	ret    
c00225b5:	90                   	nop

c00225b6 <SoundDevice::~SoundDevice()>:
c00225b6:	53                   	push   ebx
c00225b7:	83 ec 18             	sub    esp,0x18
c00225ba:	ba a8 cb 02 c0       	mov    edx,0xc002cba8
c00225bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225c3:	89 10                	mov    DWORD PTR [eax],edx
c00225c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225cd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225d2:	7f 46                	jg     c002261a <SoundDevice::~SoundDevice()+0x64>
c00225d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225dc:	83 c2 54             	add    edx,0x54
c00225df:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00225e3:	85 c0                	test   eax,eax
c00225e5:	74 2d                	je     c0022614 <SoundDevice::~SoundDevice()+0x5e>
c00225e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225ef:	83 c2 54             	add    edx,0x54
c00225f2:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00225f6:	85 db                	test   ebx,ebx
c00225f8:	74 1a                	je     c0022614 <SoundDevice::~SoundDevice()+0x5e>
c00225fa:	83 ec 0c             	sub    esp,0xc
c00225fd:	53                   	push   ebx
c00225fe:	e8 21 fc ff ff       	call   c0022224 <SoundChannel::~SoundChannel()>
c0022603:	83 c4 10             	add    esp,0x10
c0022606:	83 ec 08             	sub    esp,0x8
c0022609:	6a 2c                	push   0x2c
c002260b:	53                   	push   ebx
c002260c:	e8 7d 08 ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0022611:	83 c4 10             	add    esp,0x10
c0022614:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022618:	eb b3                	jmp    c00225cd <SoundDevice::~SoundDevice()+0x17>
c002261a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002261e:	83 ec 0c             	sub    esp,0xc
c0022621:	50                   	push   eax
c0022622:	e8 3f 1c ff ff       	call   c0014266 <Device::~Device()>
c0022627:	83 c4 10             	add    esp,0x10
c002262a:	90                   	nop
c002262b:	83 c4 18             	add    esp,0x18
c002262e:	5b                   	pop    ebx
c002262f:	c3                   	ret    

c0022630 <SoundDevice::~SoundDevice()>:
c0022630:	83 ec 0c             	sub    esp,0xc
c0022633:	83 ec 0c             	sub    esp,0xc
c0022636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002263a:	e8 77 ff ff ff       	call   c00225b6 <SoundDevice::~SoundDevice()>
c002263f:	83 c4 10             	add    esp,0x10
c0022642:	83 ec 08             	sub    esp,0x8
c0022645:	68 e4 01 00 00       	push   0x1e4
c002264a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002264e:	e8 3b 08 ff ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0022653:	83 c4 10             	add    esp,0x10
c0022656:	83 c4 0c             	add    esp,0xc
c0022659:	c3                   	ret    

c002265a <SoundDevice::getFreeChannelNum()>:
c002265a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002265e:	31 c0                	xor    eax,eax
c0022660:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022668:	74 09                	je     c0022673 <SoundDevice::getFreeChannelNum()+0x19>
c002266a:	40                   	inc    eax
c002266b:	83 f8 20             	cmp    eax,0x20
c002266e:	75 f0                	jne    c0022660 <SoundDevice::getFreeChannelNum()+0x6>
c0022670:	83 c8 ff             	or     eax,0xffffffff
c0022673:	c3                   	ret    

c0022674 <SoundDevice::addChannel(SoundChannel*)>:
c0022674:	56                   	push   esi
c0022675:	53                   	push   ebx
c0022676:	51                   	push   ecx
c0022677:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002267b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002267f:	53                   	push   ebx
c0022680:	e8 d5 ff ff ff       	call   c002265a <SoundDevice::getFreeChannelNum()>
c0022685:	5a                   	pop    edx
c0022686:	83 f8 ff             	cmp    eax,0xffffffff
c0022689:	74 51                	je     c00226dc <SoundDevice::addChannel(SoundChannel*)+0x68>
c002268b:	85 f6                	test   esi,esi
c002268d:	74 4d                	je     c00226dc <SoundDevice::addChannel(SoundChannel*)+0x68>
c002268f:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022696:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002269d:	75 30                	jne    c00226cf <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002269f:	83 ec 0c             	sub    esp,0xc
c00226a2:	56                   	push   esi
c00226a3:	e8 42 fd ff ff       	call   c00223ea <SoundChannel::getSampleRate()>
c00226a8:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00226ae:	89 34 24             	mov    DWORD PTR [esp],esi
c00226b1:	e8 3c fd ff ff       	call   c00223f2 <SoundChannel::getBits()>
c00226b6:	83 c4 0c             	add    esp,0xc
c00226b9:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00226bf:	8b 13                	mov    edx,DWORD PTR [ebx]
c00226c1:	50                   	push   eax
c00226c2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00226c8:	53                   	push   ebx
c00226c9:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00226cc:	83 c4 10             	add    esp,0x10
c00226cf:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00226d5:	b8 01 00 00 00       	mov    eax,0x1
c00226da:	eb 03                	jmp    c00226df <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00226dc:	83 c8 ff             	or     eax,0xffffffff
c00226df:	5a                   	pop    edx
c00226e0:	5b                   	pop    ebx
c00226e1:	5e                   	pop    esi
c00226e2:	c3                   	ret    
c00226e3:	90                   	nop

c00226e4 <SoundDevice::removeChannel(int)>:
c00226e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00226e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226ec:	83 fa 1f             	cmp    edx,0x1f
c00226ef:	77 23                	ja     c0022714 <SoundDevice::removeChannel(int)+0x30>
c00226f1:	8d 14 90             	lea    edx,[eax+edx*4]
c00226f4:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00226fb:	74 17                	je     c0022714 <SoundDevice::removeChannel(int)+0x30>
c00226fd:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022707:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002270d:	75 05                	jne    c0022714 <SoundDevice::removeChannel(int)+0x30>
c002270f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022711:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022714:	c3                   	ret    
c0022715:	90                   	nop

c0022716 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022716:	57                   	push   edi
c0022717:	56                   	push   esi
c0022718:	53                   	push   ebx
c0022719:	31 db                	xor    ebx,ebx
c002271b:	83 ec 10             	sub    esp,0x10
c002271e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022722:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022726:	0f 8d cb 00 00 00    	jge    c00227f7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002272c:	83 ec 0c             	sub    esp,0xc
c002272f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022733:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022736:	e8 cc 5e 00 00       	call   c0028607 <__extendsfdf2>
c002273b:	83 c4 10             	add    esp,0x10
c002273e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022742:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022746:	68 00 00 f0 3f       	push   0x3ff00000
c002274b:	6a 00                	push   0x0
c002274d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022755:	e8 39 4e 00 00       	call   c0027593 <__adddf3>
c002275a:	83 c4 10             	add    esp,0x10
c002275d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022761:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022765:	68 00 00 e0 3f       	push   0x3fe00000
c002276a:	6a 00                	push   0x0
c002276c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022770:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022774:	e8 97 54 00 00       	call   c0027c10 <__muldf3>
c0022779:	83 c4 10             	add    esp,0x10
c002277c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022780:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022784:	68 00 00 60 40       	push   0x40600000
c0022789:	6a 00                	push   0x0
c002278b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002278f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022793:	e8 78 54 00 00       	call   c0027c10 <__muldf3>
c0022798:	59                   	pop    ecx
c0022799:	5f                   	pop    edi
c002279a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002279e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00227a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227aa:	e8 34 5d 00 00       	call   c00284e3 <__truncdfsf2>
c00227af:	5a                   	pop    edx
c00227b0:	89 c7                	mov    edi,eax
c00227b2:	59                   	pop    ecx
c00227b3:	68 00 00 fe 42       	push   0x42fe0000
c00227b8:	50                   	push   eax
c00227b9:	e8 cf 4d 00 00       	call   c002758d <__gesf2>
c00227be:	83 c4 10             	add    esp,0x10
c00227c1:	85 c0                	test   eax,eax
c00227c3:	78 06                	js     c00227cb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00227c5:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00227c9:	eb 26                	jmp    c00227f1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227cb:	50                   	push   eax
c00227cc:	50                   	push   eax
c00227cd:	6a 00                	push   0x0
c00227cf:	57                   	push   edi
c00227d0:	e8 bc 4d 00 00       	call   c0027591 <__lesf2>
c00227d5:	83 c4 10             	add    esp,0x10
c00227d8:	85 c0                	test   eax,eax
c00227da:	7f 06                	jg     c00227e2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00227dc:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00227e0:	eb 0f                	jmp    c00227f1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227e2:	83 ec 0c             	sub    esp,0xc
c00227e5:	57                   	push   edi
c00227e6:	e8 b1 5e 00 00       	call   c002869c <lrintf>
c00227eb:	83 c4 10             	add    esp,0x10
c00227ee:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00227f1:	43                   	inc    ebx
c00227f2:	e9 2b ff ff ff       	jmp    c0022722 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00227f7:	83 c4 10             	add    esp,0x10
c00227fa:	5b                   	pop    ebx
c00227fb:	5e                   	pop    esi
c00227fc:	5f                   	pop    edi
c00227fd:	c3                   	ret    

c00227fe <SoundDevice::getAudio(int, float*, float*)>:
c00227fe:	55                   	push   ebp
c00227ff:	57                   	push   edi
c0022800:	56                   	push   esi
c0022801:	53                   	push   ebx
c0022802:	31 db                	xor    ebx,ebx
c0022804:	83 ec 20             	sub    esp,0x20
c0022807:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002280b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002280f:	c1 e0 02             	shl    eax,0x2
c0022812:	50                   	push   eax
c0022813:	6a 00                	push   0x0
c0022815:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022819:	e8 5a df fd ff       	call   c0000778 <memset>
c002281e:	83 c4 10             	add    esp,0x10
c0022821:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022825:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002282c:	85 c0                	test   eax,eax
c002282e:	0f 84 d7 00 00 00    	je     c002290b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022834:	83 ec 0c             	sub    esp,0xc
c0022837:	50                   	push   eax
c0022838:	e8 a5 fb ff ff       	call   c00223e2 <SoundChannel::paused()>
c002283d:	83 c4 10             	add    esp,0x10
c0022840:	84 c0                	test   al,al
c0022842:	0f 85 c3 00 00 00    	jne    c002290b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022848:	83 ec 0c             	sub    esp,0xc
c002284b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022852:	e8 19 fa ff ff       	call   c0022270 <SoundChannel::getVolume()>
c0022857:	83 c4 10             	add    esp,0x10
c002285a:	85 c0                	test   eax,eax
c002285c:	0f 84 a9 00 00 00    	je     c002290b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022862:	83 ec 0c             	sub    esp,0xc
c0022865:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002286c:	e8 ff f9 ff ff       	call   c0022270 <SoundChannel::getVolume()>
c0022871:	83 ec 0c             	sub    esp,0xc
c0022874:	50                   	push   eax
c0022875:	e8 bd 4a 00 00       	call   c0027337 <__floatsisf>
c002287a:	59                   	pop    ecx
c002287b:	5d                   	pop    ebp
c002287c:	31 ed                	xor    ebp,ebp
c002287e:	68 00 00 c8 42       	push   0x42c80000
c0022883:	50                   	push   eax
c0022884:	e8 83 48 00 00       	call   c002710c <__divsf3>
c0022889:	83 c4 10             	add    esp,0x10
c002288c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022890:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022894:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002289a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002289e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228a5:	e8 60 fb ff ff       	call   c002240a <SoundChannel::unbuffer(float*, int, int)>
c00228aa:	83 c4 20             	add    esp,0x20
c00228ad:	89 c1                	mov    ecx,eax
c00228af:	39 cd                	cmp    ebp,ecx
c00228b1:	7d 52                	jge    c0022905 <SoundDevice::getAudio(int, float*, float*)+0x107>
c00228b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00228b7:	50                   	push   eax
c00228b8:	50                   	push   eax
c00228b9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00228bd:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00228c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00228c4:	e8 80 46 00 00       	call   c0026f49 <__mulsf3>
c00228c9:	5a                   	pop    edx
c00228ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228ce:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00228d4:	e8 5e 4a 00 00       	call   c0027337 <__floatsisf>
c00228d9:	59                   	pop    ecx
c00228da:	5a                   	pop    edx
c00228db:	50                   	push   eax
c00228dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228e0:	e8 27 48 00 00       	call   c002710c <__divsf3>
c00228e5:	59                   	pop    ecx
c00228e6:	5a                   	pop    edx
c00228e7:	50                   	push   eax
c00228e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00228ec:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00228ef:	e8 32 43 00 00       	call   c0026c26 <__addsf3>
c00228f4:	83 c4 10             	add    esp,0x10
c00228f7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00228fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00228ff:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022902:	45                   	inc    ebp
c0022903:	eb aa                	jmp    c00228af <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022905:	39 cf                	cmp    edi,ecx
c0022907:	7e 02                	jle    c002290b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022909:	89 cf                	mov    edi,ecx
c002290b:	43                   	inc    ebx
c002290c:	83 fb 20             	cmp    ebx,0x20
c002290f:	0f 85 10 ff ff ff    	jne    c0022825 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022915:	83 c4 1c             	add    esp,0x1c
c0022918:	89 f8                	mov    eax,edi
c002291a:	5b                   	pop    ebx
c002291b:	5e                   	pop    esi
c002291c:	5f                   	pop    edi
c002291d:	5d                   	pop    ebp
c002291e:	c3                   	ret    
c002291f:	90                   	nop

c0022920 <PCI::open(int, int, void*)>:
c0022920:	83 ec 18             	sub    esp,0x18
c0022923:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022927:	8b 10                	mov    edx,DWORD PTR [eax]
c0022929:	50                   	push   eax
c002292a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002292d:	31 c0                	xor    eax,eax
c002292f:	83 c4 1c             	add    esp,0x1c
c0022932:	c3                   	ret    
c0022933:	90                   	nop

c0022934 <PCI::close(int, int, void*)>:
c0022934:	31 c0                	xor    eax,eax
c0022936:	c3                   	ret    
c0022937:	90                   	nop

c0022938 <PCI::PCI()>:
c0022938:	83 ec 0c             	sub    esp,0xc
c002293b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002293f:	83 ec 08             	sub    esp,0x8
c0022942:	68 d8 cb 02 c0       	push   0xc002cbd8
c0022947:	50                   	push   eax
c0022948:	e8 bb 12 ff ff       	call   c0013c08 <Bus::Bus(char const*)>
c002294d:	83 c4 10             	add    esp,0x10
c0022950:	ba 44 cc 02 c0       	mov    edx,0xc002cc44
c0022955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022959:	89 10                	mov    DWORD PTR [eax],edx
c002295b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002295f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022965:	0f b6 d0             	movzx  edx,al
c0022968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002296c:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022977:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002297d:	0f b6 d0             	movzx  edx,al
c0022980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022984:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002298d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022993:	8d 50 01             	lea    edx,[eax+0x1]
c0022996:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002299a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00229a0:	0f b6 d0             	movzx  edx,al
c00229a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229a7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00229ab:	83 c9 c0             	or     ecx,0xffffffc0
c00229ae:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00229b2:	90                   	nop
c00229b3:	83 c4 0c             	add    esp,0xc
c00229b6:	c3                   	ret    
c00229b7:	90                   	nop

c00229b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00229b8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00229bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00229c1:	89 ca                	mov    edx,ecx
c00229c3:	c1 e0 10             	shl    eax,0x10
c00229c6:	81 e2 fc 00 00 00    	and    edx,0xfc
c00229cc:	09 d0                	or     eax,edx
c00229ce:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00229d3:	c1 e2 08             	shl    edx,0x8
c00229d6:	09 d0                	or     eax,edx
c00229d8:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00229dd:	c1 e2 0b             	shl    edx,0xb
c00229e0:	09 d0                	or     eax,edx
c00229e2:	ba f8 0c 00 00       	mov    edx,0xcf8
c00229e7:	0d 00 00 00 80       	or     eax,0x80000000
c00229ec:	ef                   	out    dx,eax
c00229ed:	ba fc 0c 00 00       	mov    edx,0xcfc
c00229f2:	ed                   	in     eax,dx
c00229f3:	83 e1 02             	and    ecx,0x2
c00229f6:	0f b6 c9             	movzx  ecx,cl
c00229f9:	c1 e1 03             	shl    ecx,0x3
c00229fc:	d3 e8                	shr    eax,cl
c00229fe:	c3                   	ret    
c00229ff:	90                   	nop

c0022a00 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022a00:	6a 00                	push   0x0
c0022a02:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a07:	50                   	push   eax
c0022a08:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a0d:	50                   	push   eax
c0022a0e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a13:	50                   	push   eax
c0022a14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a18:	e8 9b ff ff ff       	call   c00229b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a1d:	83 c4 14             	add    esp,0x14
c0022a20:	c3                   	ret    
c0022a21:	90                   	nop

c0022a22 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022a22:	6a 0e                	push   0xe
c0022a24:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a29:	50                   	push   eax
c0022a2a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a2f:	50                   	push   eax
c0022a30:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a35:	50                   	push   eax
c0022a36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a3a:	e8 79 ff ff ff       	call   c00229b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a3f:	83 c4 14             	add    esp,0x14
c0022a42:	0f b6 c0             	movzx  eax,al
c0022a45:	c3                   	ret    

c0022a46 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022a46:	55                   	push   ebp
c0022a47:	57                   	push   edi
c0022a48:	56                   	push   esi
c0022a49:	53                   	push   ebx
c0022a4a:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022a4f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022a54:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022a59:	6a 0a                	push   0xa
c0022a5b:	56                   	push   esi
c0022a5c:	55                   	push   ebp
c0022a5d:	57                   	push   edi
c0022a5e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a62:	e8 51 ff ff ff       	call   c00229b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a67:	6a 0a                	push   0xa
c0022a69:	89 c3                	mov    ebx,eax
c0022a6b:	56                   	push   esi
c0022a6c:	0f b6 db             	movzx  ebx,bl
c0022a6f:	55                   	push   ebp
c0022a70:	57                   	push   edi
c0022a71:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a75:	e8 3e ff ff ff       	call   c00229b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a7a:	83 c4 28             	add    esp,0x28
c0022a7d:	25 00 ff 00 00       	and    eax,0xff00
c0022a82:	09 d8                	or     eax,ebx
c0022a84:	5b                   	pop    ebx
c0022a85:	5e                   	pop    esi
c0022a86:	5f                   	pop    edi
c0022a87:	5d                   	pop    ebp
c0022a88:	c3                   	ret    
c0022a89:	90                   	nop

c0022a8a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a8a:	6a 08                	push   0x8
c0022a8c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a91:	50                   	push   eax
c0022a92:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a97:	50                   	push   eax
c0022a98:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a9d:	50                   	push   eax
c0022a9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aa2:	e8 11 ff ff ff       	call   c00229b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aa7:	83 c4 14             	add    esp,0x14
c0022aaa:	0f b6 c4             	movzx  eax,ah
c0022aad:	c3                   	ret    

c0022aae <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022aae:	6a 08                	push   0x8
c0022ab0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ab5:	50                   	push   eax
c0022ab6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022abb:	50                   	push   eax
c0022abc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ac1:	50                   	push   eax
c0022ac2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ac6:	e8 ed fe ff ff       	call   c00229b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022acb:	83 c4 14             	add    esp,0x14
c0022ace:	c3                   	ret    
c0022acf:	90                   	nop

c0022ad0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022ad0:	6a 3c                	push   0x3c
c0022ad2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ad7:	50                   	push   eax
c0022ad8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022add:	50                   	push   eax
c0022ade:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ae3:	50                   	push   eax
c0022ae4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ae8:	e8 cb fe ff ff       	call   c00229b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aed:	83 c4 14             	add    esp,0x14
c0022af0:	c3                   	ret    
c0022af1:	90                   	nop

c0022af2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022af2:	6a 18                	push   0x18
c0022af4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022af9:	50                   	push   eax
c0022afa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aff:	50                   	push   eax
c0022b00:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b05:	50                   	push   eax
c0022b06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b0a:	e8 a9 fe ff ff       	call   c00229b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b0f:	83 c4 14             	add    esp,0x14
c0022b12:	0f b6 c4             	movzx  eax,ah
c0022b15:	c3                   	ret    

c0022b16 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b16:	55                   	push   ebp
c0022b17:	57                   	push   edi
c0022b18:	56                   	push   esi
c0022b19:	53                   	push   ebx
c0022b1a:	50                   	push   eax
c0022b1b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022b1f:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022b24:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022b29:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022b2e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022b35:	8d 43 12             	lea    eax,[ebx+0x12]
c0022b38:	83 c3 10             	add    ebx,0x10
c0022b3b:	0f b6 c0             	movzx  eax,al
c0022b3e:	0f b6 db             	movzx  ebx,bl
c0022b41:	50                   	push   eax
c0022b42:	51                   	push   ecx
c0022b43:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022b47:	57                   	push   edi
c0022b48:	55                   	push   ebp
c0022b49:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022b4d:	e8 66 fe ff ff       	call   c00229b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b52:	53                   	push   ebx
c0022b53:	89 c6                	mov    esi,eax
c0022b55:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022b59:	c1 e6 10             	shl    esi,0x10
c0022b5c:	51                   	push   ecx
c0022b5d:	57                   	push   edi
c0022b5e:	55                   	push   ebp
c0022b5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b63:	e8 50 fe ff ff       	call   c00229b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b68:	83 c4 2c             	add    esp,0x2c
c0022b6b:	0f b7 c0             	movzx  eax,ax
c0022b6e:	5b                   	pop    ebx
c0022b6f:	09 f0                	or     eax,esi
c0022b71:	5e                   	pop    esi
c0022b72:	5f                   	pop    edi
c0022b73:	5d                   	pop    ebp
c0022b74:	c3                   	ret    
c0022b75:	90                   	nop

c0022b76 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b76:	53                   	push   ebx
c0022b77:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b7c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022b81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b85:	c1 e1 10             	shl    ecx,0x10
c0022b88:	25 fc 00 00 00       	and    eax,0xfc
c0022b8d:	09 c1                	or     ecx,eax
c0022b8f:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b94:	c1 e0 08             	shl    eax,0x8
c0022b97:	09 c1                	or     ecx,eax
c0022b99:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022b9e:	c1 e0 0b             	shl    eax,0xb
c0022ba1:	09 c1                	or     ecx,eax
c0022ba3:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022ba9:	89 c8                	mov    eax,ecx
c0022bab:	ef                   	out    dx,eax
c0022bac:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022bb1:	ed                   	in     eax,dx
c0022bb2:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022bb7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022bbc:	74 0a                	je     c0022bc8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022bbe:	0f b7 d8             	movzx  ebx,ax
c0022bc1:	89 d0                	mov    eax,edx
c0022bc3:	c1 e0 10             	shl    eax,0x10
c0022bc6:	eb 05                	jmp    c0022bcd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022bc8:	66 31 c0             	xor    ax,ax
c0022bcb:	89 d3                	mov    ebx,edx
c0022bcd:	09 c3                	or     ebx,eax
c0022bcf:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022bd4:	89 c8                	mov    eax,ecx
c0022bd6:	ef                   	out    dx,eax
c0022bd7:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022bdc:	89 d8                	mov    eax,ebx
c0022bde:	ef                   	out    dx,eax
c0022bdf:	5b                   	pop    ebx
c0022be0:	c3                   	ret    
c0022be1:	90                   	nop

c0022be2 <PCI::checkBus(unsigned char)>:
c0022be2:	56                   	push   esi
c0022be3:	53                   	push   ebx
c0022be4:	31 db                	xor    ebx,ebx
c0022be6:	51                   	push   ecx
c0022be7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022bec:	52                   	push   edx
c0022bed:	53                   	push   ebx
c0022bee:	43                   	inc    ebx
c0022bef:	56                   	push   esi
c0022bf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022bf4:	e8 2b 03 00 00       	call   c0022f24 <PCI::checkDevice(unsigned char, unsigned char)>
c0022bf9:	83 c4 10             	add    esp,0x10
c0022bfc:	83 fb 20             	cmp    ebx,0x20
c0022bff:	75 eb                	jne    c0022bec <PCI::checkBus(unsigned char)+0xa>
c0022c01:	58                   	pop    eax
c0022c02:	5b                   	pop    ebx
c0022c03:	5e                   	pop    esi
c0022c04:	c3                   	ret    
c0022c05:	90                   	nop

c0022c06 <PCI::foundDevice(PCIDeviceInfo)>:
c0022c06:	55                   	push   ebp
c0022c07:	57                   	push   edi
c0022c08:	56                   	push   esi
c0022c09:	53                   	push   ebx
c0022c0a:	83 ec 1c             	sub    esp,0x1c
c0022c0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c11:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022c17:	0f 84 52 01 00 00    	je     c0022d6f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c1d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022c21:	66 81 f9 06 04       	cmp    cx,0x406
c0022c26:	75 2c                	jne    c0022c54 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022c28:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022c2d:	50                   	push   eax
c0022c2e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022c33:	50                   	push   eax
c0022c34:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022c39:	50                   	push   eax
c0022c3a:	56                   	push   esi
c0022c3b:	e8 b2 fe ff ff       	call   c0022af2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022c40:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022c44:	0f b6 c0             	movzx  eax,al
c0022c47:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022c4b:	83 c4 2c             	add    esp,0x2c
c0022c4e:	5b                   	pop    ebx
c0022c4f:	5e                   	pop    esi
c0022c50:	5f                   	pop    edi
c0022c51:	5d                   	pop    ebp
c0022c52:	eb 8e                	jmp    c0022be2 <PCI::checkBus(unsigned char)>
c0022c54:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022c58:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c62:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c66:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c6a:	88 d3                	mov    bl,dl
c0022c6c:	85 c0                	test   eax,eax
c0022c6e:	74 33                	je     c0022ca3 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c70:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c73:	85 d2                	test   edx,edx
c0022c75:	74 28                	je     c0022c9f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c77:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c7d:	31 ef                	xor    edi,ebp
c0022c7f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c85:	75 18                	jne    c0022c9f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c8b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c91:	75 0c                	jne    c0022c9f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c93:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c99:	0f 84 d0 00 00 00    	je     c0022d6f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ca1:	eb c9                	jmp    c0022c6c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022ca3:	66 81 f9 01 06       	cmp    cx,0x601
c0022ca8:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022cac:	75 19                	jne    c0022cc7 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022cae:	83 ec 0c             	sub    esp,0xc
c0022cb1:	68 64 01 00 00       	push   0x164
c0022cb6:	e8 85 cb fe ff       	call   c000f840 <malloc>
c0022cbb:	89 c5                	mov    ebp,eax
c0022cbd:	89 04 24             	mov    DWORD PTR [esp],eax
c0022cc0:	e8 95 0f 00 00       	call   c0023c5a <SATABus::SATABus()>
c0022cc5:	eb 1e                	jmp    c0022ce5 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022cc7:	66 81 f9 01 01       	cmp    cx,0x101
c0022ccc:	75 60                	jne    c0022d2e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022cce:	83 ec 0c             	sub    esp,0xc
c0022cd1:	68 70 02 00 00       	push   0x270
c0022cd6:	e8 65 cb fe ff       	call   c000f840 <malloc>
c0022cdb:	89 c5                	mov    ebp,eax
c0022cdd:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ce0:	e8 03 03 00 00       	call   c0022fe8 <IDE::IDE()>
c0022ce5:	58                   	pop    eax
c0022ce6:	5a                   	pop    edx
c0022ce7:	55                   	push   ebp
c0022ce8:	56                   	push   esi
c0022ce9:	e8 a6 16 ff ff       	call   c0014394 <Device::addChild(Device*)>
c0022cee:	83 ec 1c             	sub    esp,0x1c
c0022cf1:	b9 09 00 00 00       	mov    ecx,0x9
c0022cf6:	fc                   	cld    
c0022cf7:	89 e7                	mov    edi,esp
c0022cf9:	89 de                	mov    esi,ebx
c0022cfb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022cfd:	55                   	push   ebp
c0022cfe:	e8 9b 15 ff ff       	call   c001429e <Device::preOpenPCI(PCIDeviceInfo)>
c0022d03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022d06:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022d0a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022d12:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022d1a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022d22:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d25:	83 c4 4c             	add    esp,0x4c
c0022d28:	5b                   	pop    ebx
c0022d29:	5e                   	pop    esi
c0022d2a:	5f                   	pop    edi
c0022d2b:	5d                   	pop    ebp
c0022d2c:	ff e0                	jmp    eax
c0022d2e:	83 ec 0c             	sub    esp,0xc
c0022d31:	68 58 01 00 00       	push   0x158
c0022d36:	e8 05 cb fe ff       	call   c000f840 <malloc>
c0022d3b:	89 c5                	mov    ebp,eax
c0022d3d:	58                   	pop    eax
c0022d3e:	5a                   	pop    edx
c0022d3f:	68 e0 cb 02 c0       	push   0xc002cbe0
c0022d44:	55                   	push   ebp
c0022d45:	e8 40 19 ff ff       	call   c001468a <DriverlessDevice::DriverlessDevice(char const*)>
c0022d4a:	59                   	pop    ecx
c0022d4b:	5f                   	pop    edi
c0022d4c:	55                   	push   ebp
c0022d4d:	56                   	push   esi
c0022d4e:	e8 41 16 ff ff       	call   c0014394 <Device::addChild(Device*)>
c0022d53:	b9 09 00 00 00       	mov    ecx,0x9
c0022d58:	fc                   	cld    
c0022d59:	89 df                	mov    edi,ebx
c0022d5b:	89 de                	mov    esi,ebx
c0022d5d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d5f:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d63:	83 c4 2c             	add    esp,0x2c
c0022d66:	5b                   	pop    ebx
c0022d67:	5e                   	pop    esi
c0022d68:	5f                   	pop    edi
c0022d69:	5d                   	pop    ebp
c0022d6a:	e9 2f 15 ff ff       	jmp    c001429e <Device::preOpenPCI(PCIDeviceInfo)>
c0022d6f:	83 c4 1c             	add    esp,0x1c
c0022d72:	5b                   	pop    ebx
c0022d73:	5e                   	pop    esi
c0022d74:	5f                   	pop    edi
c0022d75:	5d                   	pop    ebp
c0022d76:	c3                   	ret    
c0022d77:	90                   	nop

c0022d78 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d78:	55                   	push   ebp
c0022d79:	57                   	push   edi
c0022d7a:	56                   	push   esi
c0022d7b:	53                   	push   ebx
c0022d7c:	83 ec 5c             	sub    esp,0x5c
c0022d7f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022d83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d87:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022d8b:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022d90:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022d94:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022d98:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022d9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022da1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022da6:	6a 0c                	push   0xc
c0022da8:	55                   	push   ebp
c0022da9:	53                   	push   ebx
c0022daa:	57                   	push   edi
c0022dab:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022db2:	e8 01 fc ff ff       	call   c00229b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022db7:	55                   	push   ebp
c0022db8:	53                   	push   ebx
c0022db9:	57                   	push   edi
c0022dba:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022dc1:	e8 80 fc ff ff       	call   c0022a46 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022dc6:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022dcb:	83 c4 24             	add    esp,0x24
c0022dce:	55                   	push   ebp
c0022dcf:	53                   	push   ebx
c0022dd0:	57                   	push   edi
c0022dd1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022dd5:	e8 f6 fc ff ff       	call   c0022ad0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022dda:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022dde:	6a 3c                	push   0x3c
c0022de0:	55                   	push   ebp
c0022de1:	53                   	push   ebx
c0022de2:	57                   	push   edi
c0022de3:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022dea:	e8 c9 fb ff ff       	call   c00229b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022def:	0f b6 c4             	movzx  eax,ah
c0022df2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022df6:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022dfa:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022dfe:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0022e03:	83 c4 24             	add    esp,0x24
c0022e06:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022e0c:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022e13:	74 6c                	je     c0022e81 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e15:	31 f6                	xor    esi,esi
c0022e17:	8b 15 e8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5e8
c0022e1d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e23:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022e29:	7e 56                	jle    c0022e81 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e2b:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022e2e:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022e35:	39 cb                	cmp    ebx,ecx
c0022e37:	75 45                	jne    c0022e7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e39:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022e40:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022e44:	75 38                	jne    c0022e7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e46:	83 ec 0c             	sub    esp,0xc
c0022e49:	68 fa cb 02 c0       	push   0xc002cbfa
c0022e4e:	e8 1b 01 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0022e53:	8b 15 e8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5e8
c0022e59:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e5f:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022e67:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022e6b:	52                   	push   edx
c0022e6c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022e70:	53                   	push   ebx
c0022e71:	68 1f cc 02 c0       	push   0xc002cc1f
c0022e76:	e8 f3 00 ff ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0022e7b:	83 c4 20             	add    esp,0x20
c0022e7e:	46                   	inc    esi
c0022e7f:	eb 96                	jmp    c0022e17 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e81:	31 d2                	xor    edx,edx
c0022e83:	83 ec 0c             	sub    esp,0xc
c0022e86:	55                   	push   ebp
c0022e87:	53                   	push   ebx
c0022e88:	57                   	push   edi
c0022e89:	52                   	push   edx
c0022e8a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022e8e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e95:	e8 7c fc ff ff       	call   c0022b16 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e9a:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022e9e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022ea2:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022ea6:	42                   	inc    edx
c0022ea7:	83 c4 20             	add    esp,0x20
c0022eaa:	83 fa 06             	cmp    edx,0x6
c0022ead:	75 d4                	jne    c0022e83 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022eaf:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022eb3:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022eb7:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022ebb:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022ebf:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022ec3:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022ec7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022ecc:	86 e0                	xchg   al,ah
c0022ece:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022ed3:	55                   	push   ebp
c0022ed4:	53                   	push   ebx
c0022ed5:	57                   	push   edi
c0022ed6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022eda:	e8 ab fb ff ff       	call   c0022a8a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022edf:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022ee3:	55                   	push   ebp
c0022ee4:	53                   	push   ebx
c0022ee5:	57                   	push   edi
c0022ee6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022eed:	e8 0e fb ff ff       	call   c0022a00 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ef2:	83 ec 0c             	sub    esp,0xc
c0022ef5:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022efa:	b9 09 00 00 00       	mov    ecx,0x9
c0022eff:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022f03:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022f07:	fc                   	cld    
c0022f08:	89 e7                	mov    edi,esp
c0022f0a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022f0c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022f13:	e8 ee fc ff ff       	call   c0022c06 <PCI::foundDevice(PCIDeviceInfo)>
c0022f18:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022f1e:	5b                   	pop    ebx
c0022f1f:	5e                   	pop    esi
c0022f20:	5f                   	pop    edi
c0022f21:	5d                   	pop    ebp
c0022f22:	c3                   	ret    
c0022f23:	90                   	nop

c0022f24 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022f24:	55                   	push   ebp
c0022f25:	57                   	push   edi
c0022f26:	56                   	push   esi
c0022f27:	53                   	push   ebx
c0022f28:	83 ec 0c             	sub    esp,0xc
c0022f2b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022f2f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022f34:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022f39:	6a 00                	push   0x0
c0022f3b:	56                   	push   esi
c0022f3c:	57                   	push   edi
c0022f3d:	55                   	push   ebp
c0022f3e:	e8 bd fa ff ff       	call   c0022a00 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f43:	6a 00                	push   0x0
c0022f45:	56                   	push   esi
c0022f46:	57                   	push   edi
c0022f47:	55                   	push   ebp
c0022f48:	e8 2b fe ff ff       	call   c0022d78 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f4d:	83 c4 20             	add    esp,0x20
c0022f50:	6a 00                	push   0x0
c0022f52:	56                   	push   esi
c0022f53:	57                   	push   edi
c0022f54:	55                   	push   ebp
c0022f55:	e8 c8 fa ff ff       	call   c0022a22 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f5a:	83 c4 10             	add    esp,0x10
c0022f5d:	84 c0                	test   al,al
c0022f5f:	79 27                	jns    c0022f88 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f61:	bb 01 00 00 00       	mov    ebx,0x1
c0022f66:	53                   	push   ebx
c0022f67:	56                   	push   esi
c0022f68:	57                   	push   edi
c0022f69:	55                   	push   ebp
c0022f6a:	e8 91 fa ff ff       	call   c0022a00 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f6f:	83 c4 10             	add    esp,0x10
c0022f72:	66 40                	inc    ax
c0022f74:	74 0c                	je     c0022f82 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f76:	53                   	push   ebx
c0022f77:	56                   	push   esi
c0022f78:	57                   	push   edi
c0022f79:	55                   	push   ebp
c0022f7a:	e8 f9 fd ff ff       	call   c0022d78 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f7f:	83 c4 10             	add    esp,0x10
c0022f82:	43                   	inc    ebx
c0022f83:	83 fb 08             	cmp    ebx,0x8
c0022f86:	75 de                	jne    c0022f66 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f88:	83 c4 0c             	add    esp,0xc
c0022f8b:	5b                   	pop    ebx
c0022f8c:	5e                   	pop    esi
c0022f8d:	5f                   	pop    edi
c0022f8e:	5d                   	pop    ebp
c0022f8f:	c3                   	ret    

c0022f90 <PCI::detect()>:
c0022f90:	56                   	push   esi
c0022f91:	53                   	push   ebx
c0022f92:	53                   	push   ebx
c0022f93:	31 db                	xor    ebx,ebx
c0022f95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f99:	6a 00                	push   0x0
c0022f9b:	6a 00                	push   0x0
c0022f9d:	6a 00                	push   0x0
c0022f9f:	56                   	push   esi
c0022fa0:	e8 7d fa ff ff       	call   c0022a22 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022fa5:	83 c4 10             	add    esp,0x10
c0022fa8:	a8 80                	test   al,0x80
c0022faa:	75 21                	jne    c0022fcd <PCI::detect()+0x3d>
c0022fac:	51                   	push   ecx
c0022fad:	51                   	push   ecx
c0022fae:	6a 00                	push   0x0
c0022fb0:	56                   	push   esi
c0022fb1:	e8 2c fc ff ff       	call   c0022be2 <PCI::checkBus(unsigned char)>
c0022fb6:	83 c4 10             	add    esp,0x10
c0022fb9:	eb 24                	jmp    c0022fdf <PCI::detect()+0x4f>
c0022fbb:	52                   	push   edx
c0022fbc:	52                   	push   edx
c0022fbd:	53                   	push   ebx
c0022fbe:	43                   	inc    ebx
c0022fbf:	56                   	push   esi
c0022fc0:	e8 1d fc ff ff       	call   c0022be2 <PCI::checkBus(unsigned char)>
c0022fc5:	83 c4 10             	add    esp,0x10
c0022fc8:	83 fb 08             	cmp    ebx,0x8
c0022fcb:	74 12                	je     c0022fdf <PCI::detect()+0x4f>
c0022fcd:	53                   	push   ebx
c0022fce:	6a 00                	push   0x0
c0022fd0:	6a 00                	push   0x0
c0022fd2:	56                   	push   esi
c0022fd3:	e8 28 fa ff ff       	call   c0022a00 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fd8:	83 c4 10             	add    esp,0x10
c0022fdb:	66 40                	inc    ax
c0022fdd:	74 dc                	je     c0022fbb <PCI::detect()+0x2b>
c0022fdf:	58                   	pop    eax
c0022fe0:	5b                   	pop    ebx
c0022fe1:	5e                   	pop    esi
c0022fe2:	c3                   	ret    
c0022fe3:	90                   	nop

c0022fe4 <IDE::close(int, int, void*)>:
c0022fe4:	83 c8 ff             	or     eax,0xffffffff
c0022fe7:	c3                   	ret    

c0022fe8 <IDE::IDE()>:
c0022fe8:	83 ec 0c             	sub    esp,0xc
c0022feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fef:	83 ec 08             	sub    esp,0x8
c0022ff2:	68 68 cc 02 c0       	push   0xc002cc68
c0022ff7:	50                   	push   eax
c0022ff8:	e8 23 17 ff ff       	call   c0014720 <HardDiskController::HardDiskController(char const*)>
c0022ffd:	83 c4 10             	add    esp,0x10
c0023000:	ba a8 ce 02 c0       	mov    edx,0xc002cea8
c0023005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023009:	89 10                	mov    DWORD PTR [eax],edx
c002300b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002300f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023016:	90                   	nop
c0023017:	83 c4 0c             	add    esp,0xc
c002301a:	c3                   	ret    
c002301b:	90                   	nop

c002301c <IDE::prepareInterrupt(unsigned char)>:
c002301c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023021:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023025:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002302d:	c3                   	ret    

c002302e <selectDrive(unsigned char, unsigned char)>:
c002302e:	c3                   	ret    
c002302f:	90                   	nop

c0023030 <IDE::getBase(unsigned char)>:
c0023030:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023035:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023039:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023041:	c3                   	ret    

c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023042:	55                   	push   ebp
c0023043:	57                   	push   edi
c0023044:	56                   	push   esi
c0023045:	53                   	push   ebx
c0023046:	83 ec 1c             	sub    esp,0x1c
c0023049:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002304d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023051:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023054:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023058:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002305c:	80 f9 03             	cmp    cl,0x3
c002305f:	77 51                	ja     c00230b2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023065:	0f b6 f2             	movzx  esi,dl
c0023068:	0f b6 db             	movzx  ebx,bl
c002306b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002306e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023072:	83 ca 80             	or     edx,0xffffff80
c0023075:	0f b6 d2             	movzx  edx,dl
c0023078:	52                   	push   edx
c0023079:	6a 0c                	push   0xc
c002307b:	56                   	push   esi
c002307c:	57                   	push   edi
c002307d:	e8 c0 ff ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023082:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023087:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002308b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002308f:	ee                   	out    dx,al
c0023090:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023095:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023099:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002309d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00230a1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00230a9:	83 c4 2c             	add    esp,0x2c
c00230ac:	5b                   	pop    ebx
c00230ad:	5e                   	pop    esi
c00230ae:	5f                   	pop    edi
c00230af:	5d                   	pop    ebp
c00230b0:	eb 90                	jmp    c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230b2:	80 fb 07             	cmp    bl,0x7
c00230b5:	77 12                	ja     c00230c9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00230b7:	0f b6 d2             	movzx  edx,dl
c00230ba:	0f b6 db             	movzx  ebx,bl
c00230bd:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00230c5:	89 da                	mov    edx,ebx
c00230c7:	eb 2f                	jmp    c00230f8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00230c9:	80 fb 0d             	cmp    bl,0xd
c00230cc:	77 13                	ja     c00230e1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00230ce:	0f b6 d2             	movzx  edx,dl
c00230d1:	0f b6 db             	movzx  ebx,bl
c00230d4:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00230db:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00230df:	eb 17                	jmp    c00230f8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00230e1:	80 fb 15             	cmp    bl,0x15
c00230e4:	77 13                	ja     c00230f9 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00230e6:	0f b6 d2             	movzx  edx,dl
c00230e9:	0f b6 db             	movzx  ebx,bl
c00230ec:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00230f4:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00230f8:	ee                   	out    dx,al
c00230f9:	83 c4 1c             	add    esp,0x1c
c00230fc:	5b                   	pop    ebx
c00230fd:	5e                   	pop    esi
c00230fe:	5f                   	pop    edi
c00230ff:	5d                   	pop    ebp
c0023100:	c3                   	ret    
c0023101:	90                   	nop

c0023102 <IDE::read(unsigned char, unsigned char)>:
c0023102:	55                   	push   ebp
c0023103:	57                   	push   edi
c0023104:	56                   	push   esi
c0023105:	53                   	push   ebx
c0023106:	83 ec 1c             	sub    esp,0x1c
c0023109:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002310d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023111:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023114:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023118:	3c 03                	cmp    al,0x3
c002311a:	77 43                	ja     c002315f <IDE::read(unsigned char, unsigned char)+0x5d>
c002311c:	0f b6 f2             	movzx  esi,dl
c002311f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023122:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023126:	83 c8 80             	or     eax,0xffffff80
c0023129:	0f b6 c0             	movzx  eax,al
c002312c:	50                   	push   eax
c002312d:	6a 0c                	push   0xc
c002312f:	56                   	push   esi
c0023130:	57                   	push   edi
c0023131:	e8 0c ff ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023136:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002313b:	0f b6 c3             	movzx  eax,bl
c002313e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023142:	ec                   	in     al,dx
c0023143:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023147:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002314c:	52                   	push   edx
c002314d:	6a 0c                	push   0xc
c002314f:	56                   	push   esi
c0023150:	57                   	push   edi
c0023151:	e8 ec fe ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023156:	83 c4 20             	add    esp,0x20
c0023159:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002315d:	eb 49                	jmp    c00231a8 <IDE::read(unsigned char, unsigned char)+0xa6>
c002315f:	80 fb 07             	cmp    bl,0x7
c0023162:	77 12                	ja     c0023176 <IDE::read(unsigned char, unsigned char)+0x74>
c0023164:	0f b6 d2             	movzx  edx,dl
c0023167:	0f b6 c3             	movzx  eax,bl
c002316a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023172:	89 c2                	mov    edx,eax
c0023174:	eb 31                	jmp    c00231a7 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023176:	80 fb 0d             	cmp    bl,0xd
c0023179:	77 13                	ja     c002318e <IDE::read(unsigned char, unsigned char)+0x8c>
c002317b:	0f b6 d2             	movzx  edx,dl
c002317e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023185:	0f b6 d3             	movzx  edx,bl
c0023188:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002318c:	eb 19                	jmp    c00231a7 <IDE::read(unsigned char, unsigned char)+0xa5>
c002318e:	31 c0                	xor    eax,eax
c0023190:	80 fb 15             	cmp    bl,0x15
c0023193:	77 13                	ja     c00231a8 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023195:	0f b6 d2             	movzx  edx,dl
c0023198:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00231a0:	0f b6 d3             	movzx  edx,bl
c00231a3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00231a7:	ec                   	in     al,dx
c00231a8:	83 c4 1c             	add    esp,0x1c
c00231ab:	5b                   	pop    ebx
c00231ac:	5e                   	pop    esi
c00231ad:	5f                   	pop    edi
c00231ae:	5d                   	pop    ebp
c00231af:	c3                   	ret    

c00231b0 <IDE::waitInterrupt(unsigned char)>:
c00231b0:	55                   	push   ebp
c00231b1:	57                   	push   edi
c00231b2:	56                   	push   esi
c00231b3:	53                   	push   ebx
c00231b4:	31 db                	xor    ebx,ebx
c00231b6:	83 ec 0c             	sub    esp,0xc
c00231b9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00231bd:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00231c2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00231ca:	89 e8                	mov    eax,ebp
c00231cc:	84 c0                	test   al,al
c00231ce:	75 34                	jne    c0023204 <IDE::waitInterrupt(unsigned char)+0x54>
c00231d0:	52                   	push   edx
c00231d1:	6a 0c                	push   0xc
c00231d3:	56                   	push   esi
c00231d4:	57                   	push   edi
c00231d5:	e8 28 ff ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c00231da:	83 c4 10             	add    esp,0x10
c00231dd:	a8 01                	test   al,0x1
c00231df:	75 2b                	jne    c002320c <IDE::waitInterrupt(unsigned char)+0x5c>
c00231e1:	f6 c3 04             	test   bl,0x4
c00231e4:	75 16                	jne    c00231fc <IDE::waitInterrupt(unsigned char)+0x4c>
c00231e6:	83 fb 32             	cmp    ebx,0x32
c00231e9:	7e 11                	jle    c00231fc <IDE::waitInterrupt(unsigned char)+0x4c>
c00231eb:	50                   	push   eax
c00231ec:	50                   	push   eax
c00231ed:	6a 00                	push   0x0
c00231ef:	68 80 96 98 00       	push   0x989680
c00231f4:	e8 8b b1 ff ff       	call   c001e384 <nanoSleep(unsigned long long)>
c00231f9:	83 c4 10             	add    esp,0x10
c00231fc:	83 fb 3c             	cmp    ebx,0x3c
c00231ff:	74 0b                	je     c002320c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023201:	43                   	inc    ebx
c0023202:	eb be                	jmp    c00231c2 <IDE::waitInterrupt(unsigned char)+0x12>
c0023204:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002320c:	83 c4 0c             	add    esp,0xc
c002320f:	89 e8                	mov    eax,ebp
c0023211:	5b                   	pop    ebx
c0023212:	5e                   	pop    esi
c0023213:	5f                   	pop    edi
c0023214:	5d                   	pop    ebp
c0023215:	c3                   	ret    

c0023216 <ideChannel0IRQHandler(regs*, void*)>:
c0023216:	83 ec 10             	sub    esp,0x10
c0023219:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002321d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023224:	6a 07                	push   0x7
c0023226:	6a 00                	push   0x0
c0023228:	50                   	push   eax
c0023229:	e8 d4 fe ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c002322e:	83 c4 1c             	add    esp,0x1c
c0023231:	c3                   	ret    

c0023232 <ideChannel1IRQHandler(regs*, void*)>:
c0023232:	83 ec 10             	sub    esp,0x10
c0023235:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023239:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023240:	6a 07                	push   0x7
c0023242:	6a 01                	push   0x1
c0023244:	50                   	push   eax
c0023245:	e8 b8 fe ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c002324a:	83 c4 1c             	add    esp,0x1c
c002324d:	c3                   	ret    

c002324e <IDE::enableIRQs(unsigned char, bool)>:
c002324e:	57                   	push   edi
c002324f:	56                   	push   esi
c0023250:	be 04 00 00 00       	mov    esi,0x4
c0023255:	53                   	push   ebx
c0023256:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002325b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002325f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023264:	0f 94 c0             	sete   al
c0023267:	d1 e0                	shl    eax,1
c0023269:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023270:	0f b6 c0             	movzx  eax,al
c0023273:	50                   	push   eax
c0023274:	6a 0c                	push   0xc
c0023276:	57                   	push   edi
c0023277:	53                   	push   ebx
c0023278:	e8 c5 fd ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002327d:	83 c4 10             	add    esp,0x10
c0023280:	50                   	push   eax
c0023281:	6a 0c                	push   0xc
c0023283:	57                   	push   edi
c0023284:	53                   	push   ebx
c0023285:	e8 78 fe ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c002328a:	83 c4 10             	add    esp,0x10
c002328d:	4e                   	dec    esi
c002328e:	75 f0                	jne    c0023280 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023290:	5b                   	pop    ebx
c0023291:	5e                   	pop    esi
c0023292:	5f                   	pop    edi
c0023293:	c3                   	ret    

c0023294 <IDE::open(int, int, void*)>:
c0023294:	55                   	push   ebp
c0023295:	57                   	push   edi
c0023296:	56                   	push   esi
c0023297:	53                   	push   ebx
c0023298:	83 ec 1c             	sub    esp,0x1c
c002329b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002329f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00232a8:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00232b1:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00232b8:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00232bf:	0f 85 b0 02 00 00    	jne    c0023575 <IDE::open(int, int, void*)+0x2e1>
c00232c5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00232cb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00232cf:	83 e0 7f             	and    eax,0x7f
c00232d2:	3c 05                	cmp    al,0x5
c00232d4:	74 04                	je     c00232da <IDE::open(int, int, void*)+0x46>
c00232d6:	3c 0f                	cmp    al,0xf
c00232d8:	75 32                	jne    c002330c <IDE::open(int, int, void*)+0x78>
c00232da:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00232e0:	83 e0 fc             	and    eax,0xfffffffc
c00232e3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00232ea:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00232f0:	83 e0 fc             	and    eax,0xfffffffc
c00232f3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00232fa:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023300:	83 e0 fc             	and    eax,0xfffffffc
c0023303:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002330a:	eb 14                	jmp    c0023320 <IDE::open(int, int, void*)+0x8c>
c002330c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023316:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023320:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023327:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002332e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023332:	89 c6                	mov    esi,eax
c0023334:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023339:	c1 e6 10             	shl    esi,0x10
c002333c:	89 e8                	mov    eax,ebp
c002333e:	89 fa                	mov    edx,edi
c0023340:	c1 e0 0b             	shl    eax,0xb
c0023343:	09 f0                	or     eax,esi
c0023345:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002334c:	c1 e6 08             	shl    esi,0x8
c002334f:	09 c6                	or     esi,eax
c0023351:	89 f0                	mov    eax,esi
c0023353:	0d 08 00 00 80       	or     eax,0x80000008
c0023358:	ef                   	out    dx,eax
c0023359:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002335e:	89 ca                	mov    edx,ecx
c0023360:	ed                   	in     eax,dx
c0023361:	c1 e8 10             	shr    eax,0x10
c0023364:	3d ff ff 00 00       	cmp    eax,0xffff
c0023369:	0f 84 f5 00 00 00    	je     c0023464 <IDE::open(int, int, void*)+0x1d0>
c002336f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023375:	89 fa                	mov    edx,edi
c0023377:	89 f0                	mov    eax,esi
c0023379:	ef                   	out    dx,eax
c002337a:	b0 fe                	mov    al,0xfe
c002337c:	89 ca                	mov    edx,ecx
c002337e:	ee                   	out    dx,al
c002337f:	89 f0                	mov    eax,esi
c0023381:	89 fa                	mov    edx,edi
c0023383:	ef                   	out    dx,eax
c0023384:	89 ca                	mov    edx,ecx
c0023386:	ed                   	in     eax,dx
c0023387:	3c fe                	cmp    al,0xfe
c0023389:	0f 85 a9 00 00 00    	jne    c0023438 <IDE::open(int, int, void*)+0x1a4>
c002338f:	8b 15 e8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5e8
c0023395:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002339c:	74 33                	je     c00233d1 <IDE::open(int, int, void*)+0x13d>
c002339e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00233a4:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00233a8:	40                   	inc    eax
c00233a9:	83 ec 0c             	sub    esp,0xc
c00233ac:	0f b6 c0             	movzx  eax,al
c00233af:	50                   	push   eax
c00233b0:	55                   	push   ebp
c00233b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00233b5:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00233bb:	51                   	push   ecx
c00233bc:	e8 a7 4e ff ff       	call   c0018268 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00233c1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00233c6:	83 c4 1c             	add    esp,0x1c
c00233c9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00233cf:	eb 0a                	jmp    c00233db <IDE::open(int, int, void*)+0x147>
c00233d1:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00233db:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00233e2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00233e9:	c1 e1 10             	shl    ecx,0x10
c00233ec:	c1 e0 08             	shl    eax,0x8
c00233ef:	bf f8 0c 00 00       	mov    edi,0xcf8
c00233f4:	09 c1                	or     ecx,eax
c00233f6:	89 fa                	mov    edx,edi
c00233f8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00233ff:	c1 e0 0b             	shl    eax,0xb
c0023402:	09 c1                	or     ecx,eax
c0023404:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002340a:	89 c8                	mov    eax,ecx
c002340c:	ef                   	out    dx,eax
c002340d:	be fc 0c 00 00       	mov    esi,0xcfc
c0023412:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023418:	89 f2                	mov    edx,esi
c002341a:	ee                   	out    dx,al
c002341b:	89 c8                	mov    eax,ecx
c002341d:	89 fa                	mov    edx,edi
c002341f:	ef                   	out    dx,eax
c0023420:	89 f2                	mov    edx,esi
c0023422:	ed                   	in     eax,dx
c0023423:	0f b6 c0             	movzx  eax,al
c0023426:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002342c:	74 46                	je     c0023474 <IDE::open(int, int, void*)+0x1e0>
c002342e:	83 ec 0c             	sub    esp,0xc
c0023431:	68 80 cc 02 c0       	push   0xc002cc80
c0023436:	eb 34                	jmp    c002346c <IDE::open(int, int, void*)+0x1d8>
c0023438:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023441:	75 17                	jne    c002345a <IDE::open(int, int, void*)+0x1c6>
c0023443:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023448:	74 07                	je     c0023451 <IDE::open(int, int, void*)+0x1bd>
c002344a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002344f:	75 09                	jne    c002345a <IDE::open(int, int, void*)+0x1c6>
c0023451:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023458:	eb 1a                	jmp    c0023474 <IDE::open(int, int, void*)+0x1e0>
c002345a:	83 ec 0c             	sub    esp,0xc
c002345d:	68 88 cc 02 c0       	push   0xc002cc88
c0023462:	eb 08                	jmp    c002346c <IDE::open(int, int, void*)+0x1d8>
c0023464:	83 ec 0c             	sub    esp,0xc
c0023467:	68 b9 cc 02 c0       	push   0xc002ccb9
c002346c:	e8 9e 71 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0023471:	83 c4 10             	add    esp,0x10
c0023474:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002347b:	79 1a                	jns    c0023497 <IDE::open(int, int, void*)+0x203>
c002347d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023483:	83 e0 fc             	and    eax,0xfffffffc
c0023486:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002348d:	83 c0 08             	add    eax,0x8
c0023490:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023497:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002349d:	89 c2                	mov    edx,eax
c002349f:	83 e2 0f             	and    edx,0xf
c00234a2:	66 83 fa 08          	cmp    dx,0x8
c00234a6:	75 0a                	jne    c00234b2 <IDE::open(int, int, void*)+0x21e>
c00234a8:	83 e8 02             	sub    eax,0x2
c00234ab:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00234b2:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00234b8:	89 c2                	mov    edx,eax
c00234ba:	83 e2 0f             	and    edx,0xf
c00234bd:	66 83 fa 08          	cmp    dx,0x8
c00234c1:	75 0a                	jne    c00234cd <IDE::open(int, int, void*)+0x239>
c00234c3:	83 e8 02             	sub    eax,0x2
c00234c6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00234cd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00234d4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00234db:	89 d0                	mov    eax,edx
c00234dd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234e0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234e4:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00234e8:	8d 4a 01             	lea    ecx,[edx+0x1]
c00234eb:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234f0:	0f b6 c9             	movzx  ecx,cl
c00234f3:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00234fa:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234fd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023501:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023505:	8d 50 02             	lea    edx,[eax+0x2]
c0023508:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002350d:	0f b6 d2             	movzx  edx,dl
c0023510:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023516:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023519:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002351d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023521:	8d 48 03             	lea    ecx,[eax+0x3]
c0023524:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023529:	0f b6 c9             	movzx  ecx,cl
c002352c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023532:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023535:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023539:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002353d:	8d 50 04             	lea    edx,[eax+0x4]
c0023540:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023546:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002354b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023552:	66 85 f6             	test   si,si
c0023555:	74 3e                	je     c0023595 <IDE::open(int, int, void*)+0x301>
c0023557:	0f b6 d2             	movzx  edx,dl
c002355a:	83 c0 05             	add    eax,0x5
c002355d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023560:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023564:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023568:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002356e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023573:	eb 20                	jmp    c0023595 <IDE::open(int, int, void*)+0x301>
c0023575:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002357f:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023589:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023590:	e9 02 ff ff ff       	jmp    c0023497 <IDE::open(int, int, void*)+0x203>
c0023595:	52                   	push   edx
c0023596:	52                   	push   edx
c0023597:	6a 00                	push   0x0
c0023599:	53                   	push   ebx
c002359a:	e8 7d fa ff ff       	call   c002301c <IDE::prepareInterrupt(unsigned char)>
c002359f:	59                   	pop    ecx
c00235a0:	5e                   	pop    esi
c00235a1:	6a 01                	push   0x1
c00235a3:	53                   	push   ebx
c00235a4:	e8 73 fa ff ff       	call   c002301c <IDE::prepareInterrupt(unsigned char)>
c00235a9:	83 c4 0c             	add    esp,0xc
c00235ac:	6a 00                	push   0x0
c00235ae:	6a 00                	push   0x0
c00235b0:	53                   	push   ebx
c00235b1:	e8 98 fc ff ff       	call   c002324e <IDE::enableIRQs(unsigned char, bool)>
c00235b6:	83 c4 0c             	add    esp,0xc
c00235b9:	6a 00                	push   0x0
c00235bb:	6a 01                	push   0x1
c00235bd:	53                   	push   ebx
c00235be:	e8 8b fc ff ff       	call   c002324e <IDE::enableIRQs(unsigned char, bool)>
c00235c3:	83 c4 10             	add    esp,0x10
c00235c6:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00235cd:	74 40                	je     c002360f <IDE::open(int, int, void*)+0x37b>
c00235cf:	83 ec 0c             	sub    esp,0xc
c00235d2:	68 e3 cc 02 c0       	push   0xc002cce3
c00235d7:	e8 92 f9 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00235dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235df:	6a 01                	push   0x1
c00235e1:	68 16 32 02 c0       	push   0xc0023216
c00235e6:	6a 0e                	push   0xe
c00235e8:	53                   	push   ebx
c00235e9:	e8 2a 0d ff ff       	call   c0014318 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235ee:	83 c4 14             	add    esp,0x14
c00235f1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00235f7:	53                   	push   ebx
c00235f8:	6a 01                	push   0x1
c00235fa:	68 32 32 02 c0       	push   0xc0023232
c00235ff:	6a 0f                	push   0xf
c0023601:	53                   	push   ebx
c0023602:	e8 11 0d ff ff       	call   c0014318 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023607:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002360d:	eb 4a                	jmp    c0023659 <IDE::open(int, int, void*)+0x3c5>
c002360f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023619:	50                   	push   eax
c002361a:	6a 0f                	push   0xf
c002361c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023622:	68 ff cc 02 c0       	push   0xc002ccff
c0023627:	e8 42 f9 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c002362c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002362f:	6a 00                	push   0x0
c0023631:	68 16 32 02 c0       	push   0xc0023216
c0023636:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002363c:	53                   	push   ebx
c002363d:	e8 d6 0c ff ff       	call   c0014318 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023642:	83 c4 14             	add    esp,0x14
c0023645:	53                   	push   ebx
c0023646:	6a 00                	push   0x0
c0023648:	68 32 32 02 c0       	push   0xc0023232
c002364d:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023653:	53                   	push   ebx
c0023654:	e8 bf 0c ff ff       	call   c0014318 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023659:	8b 03                	mov    eax,DWORD PTR [ebx]
c002365b:	83 c4 20             	add    esp,0x20
c002365e:	83 ec 0c             	sub    esp,0xc
c0023661:	53                   	push   ebx
c0023662:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023665:	83 c4 0c             	add    esp,0xc
c0023668:	6a 07                	push   0x7
c002366a:	6a 00                	push   0x0
c002366c:	53                   	push   ebx
c002366d:	e8 90 fa ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c0023672:	83 c4 0c             	add    esp,0xc
c0023675:	6a 07                	push   0x7
c0023677:	6a 01                	push   0x1
c0023679:	53                   	push   ebx
c002367a:	e8 83 fa ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c002367f:	83 c4 0c             	add    esp,0xc
c0023682:	6a 01                	push   0x1
c0023684:	6a 00                	push   0x0
c0023686:	53                   	push   ebx
c0023687:	e8 c2 fb ff ff       	call   c002324e <IDE::enableIRQs(unsigned char, bool)>
c002368c:	83 c4 0c             	add    esp,0xc
c002368f:	6a 01                	push   0x1
c0023691:	6a 01                	push   0x1
c0023693:	53                   	push   ebx
c0023694:	e8 b5 fb ff ff       	call   c002324e <IDE::enableIRQs(unsigned char, bool)>
c0023699:	83 c4 2c             	add    esp,0x2c
c002369c:	31 c0                	xor    eax,eax
c002369e:	5b                   	pop    ebx
c002369f:	5e                   	pop    esi
c00236a0:	5f                   	pop    edi
c00236a1:	5d                   	pop    ebp
c00236a2:	c3                   	ret    
c00236a3:	90                   	nop

c00236a4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00236a4:	55                   	push   ebp
c00236a5:	57                   	push   edi
c00236a6:	56                   	push   esi
c00236a7:	53                   	push   ebx
c00236a8:	83 ec 1c             	sub    esp,0x1c
c00236ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00236af:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00236b3:	8d 50 f8             	lea    edx,[eax-0x8]
c00236b6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00236ba:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00236be:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00236c2:	80 fa 03             	cmp    dl,0x3
c00236c5:	77 5d                	ja     c0023724 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00236c7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00236cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00236cf:	0f b6 db             	movzx  ebx,bl
c00236d2:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00236d5:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00236d9:	83 ca 80             	or     edx,0xffffff80
c00236dc:	0f b6 d2             	movzx  edx,dl
c00236df:	52                   	push   edx
c00236e0:	6a 0c                	push   0xc
c00236e2:	53                   	push   ebx
c00236e3:	56                   	push   esi
c00236e4:	e8 59 f9 ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236e9:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00236ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00236f2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00236f6:	0f b6 c0             	movzx  eax,al
c00236f9:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00236fd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236ff:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023704:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023708:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002370c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023710:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023718:	83 c4 2c             	add    esp,0x2c
c002371b:	5b                   	pop    ebx
c002371c:	5e                   	pop    esi
c002371d:	5f                   	pop    edi
c002371e:	5d                   	pop    ebp
c002371f:	e9 1e f9 ff ff       	jmp    c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023724:	3c 07                	cmp    al,0x7
c0023726:	77 10                	ja     c0023738 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023728:	0f b6 db             	movzx  ebx,bl
c002372b:	0f b6 d0             	movzx  edx,al
c002372e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023736:	eb 2d                	jmp    c0023765 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023738:	3c 0d                	cmp    al,0xd
c002373a:	77 13                	ja     c002374f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002373c:	0f b6 db             	movzx  ebx,bl
c002373f:	0f b6 c0             	movzx  eax,al
c0023742:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023749:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002374d:	eb 16                	jmp    c0023765 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002374f:	3c 15                	cmp    al,0x15
c0023751:	77 14                	ja     c0023767 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023753:	0f b6 db             	movzx  ebx,bl
c0023756:	0f b6 c0             	movzx  eax,al
c0023759:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023761:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023765:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023767:	83 c4 1c             	add    esp,0x1c
c002376a:	5b                   	pop    ebx
c002376b:	5e                   	pop    esi
c002376c:	5f                   	pop    edi
c002376d:	5d                   	pop    ebp
c002376e:	c3                   	ret    
c002376f:	90                   	nop

c0023770 <IDE::detect()>:
c0023770:	55                   	push   ebp
c0023771:	57                   	push   edi
c0023772:	56                   	push   esi
c0023773:	53                   	push   ebx
c0023774:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002377a:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023781:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023788:	0f 85 be 02 00 00    	jne    c0023a4c <IDE::detect()+0x2dc>
c002378e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023795:	31 f6                	xor    esi,esi
c0023797:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002379f:	31 ed                	xor    ebp,ebp
c00237a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237a5:	c1 e0 06             	shl    eax,0x6
c00237a8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00237b0:	89 e8                	mov    eax,ebp
c00237b2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00237b6:	c1 e0 04             	shl    eax,0x4
c00237b9:	83 c8 a0             	or     eax,0xffffffa0
c00237bc:	0f b6 c0             	movzx  eax,al
c00237bf:	50                   	push   eax
c00237c0:	6a 06                	push   0x6
c00237c2:	56                   	push   esi
c00237c3:	53                   	push   ebx
c00237c4:	e8 79 f8 ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237c9:	83 c4 0c             	add    esp,0xc
c00237cc:	6a 0c                	push   0xc
c00237ce:	56                   	push   esi
c00237cf:	53                   	push   ebx
c00237d0:	e8 2d f9 ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c00237d5:	83 c4 0c             	add    esp,0xc
c00237d8:	6a 0c                	push   0xc
c00237da:	56                   	push   esi
c00237db:	53                   	push   ebx
c00237dc:	e8 21 f9 ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c00237e1:	83 c4 0c             	add    esp,0xc
c00237e4:	6a 0c                	push   0xc
c00237e6:	56                   	push   esi
c00237e7:	53                   	push   ebx
c00237e8:	e8 15 f9 ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c00237ed:	83 c4 0c             	add    esp,0xc
c00237f0:	6a 0c                	push   0xc
c00237f2:	56                   	push   esi
c00237f3:	53                   	push   ebx
c00237f4:	e8 09 f9 ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c00237f9:	68 ec 00 00 00       	push   0xec
c00237fe:	6a 07                	push   0x7
c0023800:	56                   	push   esi
c0023801:	53                   	push   ebx
c0023802:	e8 3b f8 ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023807:	83 c4 1c             	add    esp,0x1c
c002380a:	6a 0c                	push   0xc
c002380c:	56                   	push   esi
c002380d:	53                   	push   ebx
c002380e:	e8 ef f8 ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c0023813:	83 c4 0c             	add    esp,0xc
c0023816:	6a 0c                	push   0xc
c0023818:	56                   	push   esi
c0023819:	53                   	push   ebx
c002381a:	e8 e3 f8 ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c002381f:	83 c4 0c             	add    esp,0xc
c0023822:	6a 0c                	push   0xc
c0023824:	56                   	push   esi
c0023825:	53                   	push   ebx
c0023826:	e8 d7 f8 ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c002382b:	83 c4 0c             	add    esp,0xc
c002382e:	6a 0c                	push   0xc
c0023830:	56                   	push   esi
c0023831:	53                   	push   ebx
c0023832:	e8 cb f8 ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c0023837:	83 c4 0c             	add    esp,0xc
c002383a:	6a 0c                	push   0xc
c002383c:	56                   	push   esi
c002383d:	53                   	push   ebx
c002383e:	e8 bf f8 ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c0023843:	83 c4 10             	add    esp,0x10
c0023846:	84 c0                	test   al,al
c0023848:	0f 84 8b 01 00 00    	je     c00239d9 <IDE::detect()+0x269>
c002384e:	31 ff                	xor    edi,edi
c0023850:	50                   	push   eax
c0023851:	6a 0c                	push   0xc
c0023853:	56                   	push   esi
c0023854:	53                   	push   ebx
c0023855:	e8 a8 f8 ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c002385a:	83 c4 10             	add    esp,0x10
c002385d:	a8 01                	test   al,0x1
c002385f:	0f 85 8e 01 00 00    	jne    c00239f3 <IDE::detect()+0x283>
c0023865:	84 c0                	test   al,al
c0023867:	78 04                	js     c002386d <IDE::detect()+0xfd>
c0023869:	a8 08                	test   al,0x8
c002386b:	75 27                	jne    c0023894 <IDE::detect()+0x124>
c002386d:	47                   	inc    edi
c002386e:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023874:	7e da                	jle    c0023850 <IDE::detect()+0xe0>
c0023876:	50                   	push   eax
c0023877:	50                   	push   eax
c0023878:	6a 00                	push   0x0
c002387a:	68 40 4b 4c 00       	push   0x4c4b40
c002387f:	e8 00 ab ff ff       	call   c001e384 <nanoSleep(unsigned long long)>
c0023884:	83 c4 10             	add    esp,0x10
c0023887:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002388d:	75 c1                	jne    c0023850 <IDE::detect()+0xe0>
c002388f:	e9 5f 01 00 00       	jmp    c00239f3 <IDE::detect()+0x283>
c0023894:	31 c9                	xor    ecx,ecx
c0023896:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002389a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002389e:	83 ec 0c             	sub    esp,0xc
c00238a1:	68 80 00 00 00       	push   0x80
c00238a6:	57                   	push   edi
c00238a7:	6a 00                	push   0x0
c00238a9:	56                   	push   esi
c00238aa:	53                   	push   ebx
c00238ab:	e8 f4 fd ff ff       	call   c00236a4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00238b0:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00238b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00238b9:	89 d1                	mov    ecx,edx
c00238bb:	c1 e0 06             	shl    eax,0x6
c00238be:	01 d8                	add    eax,ebx
c00238c0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00238c7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00238ce:	89 f2                	mov    edx,esi
c00238d0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00238d6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00238da:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00238e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00238e4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00238eb:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00238f3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00238fa:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023902:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023908:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002390f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023915:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023919:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002391d:	83 c4 20             	add    esp,0x20
c0023920:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023923:	83 c0 02             	add    eax,0x2
c0023926:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002392c:	83 c7 02             	add    edi,0x2
c002392f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023932:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023938:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002393c:	75 e2                	jne    c0023920 <IDE::detect()+0x1b0>
c002393e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023942:	c1 e0 06             	shl    eax,0x6
c0023945:	01 d8                	add    eax,ebx
c0023947:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002394d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023954:	66 c1 ea 09          	shr    dx,0x9
c0023958:	83 e2 01             	and    edx,0x1
c002395b:	84 c9                	test   cl,cl
c002395d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023963:	75 2f                	jne    c0023994 <IDE::detect()+0x224>
c0023965:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002396b:	85 c0                	test   eax,eax
c002396d:	74 66                	je     c00239d5 <IDE::detect()+0x265>
c002396f:	50                   	push   eax
c0023970:	55                   	push   ebp
c0023971:	56                   	push   esi
c0023972:	68 1b cd 02 c0       	push   0xc002cd1b
c0023977:	e8 f2 f5 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c002397c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023983:	e8 b8 be fe ff       	call   c000f840 <malloc>
c0023988:	89 c7                	mov    edi,eax
c002398a:	89 04 24             	mov    DWORD PTR [esp],eax
c002398d:	e8 78 06 00 00       	call   c002400a <ATA::ATA()>
c0023992:	eb 28                	jmp    c00239bc <IDE::detect()+0x24c>
c0023994:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002399a:	55                   	push   ebp
c002399b:	56                   	push   esi
c002399c:	68 4a cd 02 c0       	push   0xc002cd4a
c00239a1:	e8 c8 f5 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00239a6:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00239ad:	e8 8e be fe ff       	call   c000f840 <malloc>
c00239b2:	89 c7                	mov    edi,eax
c00239b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00239b7:	e8 8e 0c 00 00       	call   c002464a <ATAPI::ATAPI()>
c00239bc:	5a                   	pop    edx
c00239bd:	59                   	pop    ecx
c00239be:	57                   	push   edi
c00239bf:	53                   	push   ebx
c00239c0:	e8 cf 09 ff ff       	call   c0014394 <Device::addChild(Device*)>
c00239c5:	8b 07                	mov    eax,DWORD PTR [edi]
c00239c7:	53                   	push   ebx
c00239c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00239cc:	6a 00                	push   0x0
c00239ce:	57                   	push   edi
c00239cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00239d2:	83 c4 20             	add    esp,0x20
c00239d5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00239d9:	4d                   	dec    ebp
c00239da:	74 0a                	je     c00239e6 <IDE::detect()+0x276>
c00239dc:	bd 01 00 00 00       	mov    ebp,0x1
c00239e1:	e9 bb fd ff ff       	jmp    c00237a1 <IDE::detect()+0x31>
c00239e6:	4e                   	dec    esi
c00239e7:	74 63                	je     c0023a4c <IDE::detect()+0x2dc>
c00239e9:	be 01 00 00 00       	mov    esi,0x1
c00239ee:	e9 ac fd ff ff       	jmp    c002379f <IDE::detect()+0x2f>
c00239f3:	50                   	push   eax
c00239f4:	6a 04                	push   0x4
c00239f6:	56                   	push   esi
c00239f7:	53                   	push   ebx
c00239f8:	e8 05 f7 ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c00239fd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a01:	83 c4 0c             	add    esp,0xc
c0023a04:	6a 05                	push   0x5
c0023a06:	56                   	push   esi
c0023a07:	53                   	push   ebx
c0023a08:	e8 f5 f6 ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c0023a0d:	83 c4 10             	add    esp,0x10
c0023a10:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023a14:	80 fa 14             	cmp    dl,0x14
c0023a17:	75 04                	jne    c0023a1d <IDE::detect()+0x2ad>
c0023a19:	3c eb                	cmp    al,0xeb
c0023a1b:	eb 07                	jmp    c0023a24 <IDE::detect()+0x2b4>
c0023a1d:	3c 96                	cmp    al,0x96
c0023a1f:	75 b8                	jne    c00239d9 <IDE::detect()+0x269>
c0023a21:	80 fa 69             	cmp    dl,0x69
c0023a24:	75 b3                	jne    c00239d9 <IDE::detect()+0x269>
c0023a26:	68 a1 00 00 00       	push   0xa1
c0023a2b:	6a 07                	push   0x7
c0023a2d:	56                   	push   esi
c0023a2e:	53                   	push   ebx
c0023a2f:	e8 0e f6 ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a34:	5f                   	pop    edi
c0023a35:	58                   	pop    eax
c0023a36:	6a 00                	push   0x0
c0023a38:	68 40 42 0f 00       	push   0xf4240
c0023a3d:	e8 42 a9 ff ff       	call   c001e384 <nanoSleep(unsigned long long)>
c0023a42:	83 c4 10             	add    esp,0x10
c0023a45:	b1 01                	mov    cl,0x1
c0023a47:	e9 4a fe ff ff       	jmp    c0023896 <IDE::detect()+0x126>
c0023a4c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023a52:	5b                   	pop    ebx
c0023a53:	5e                   	pop    esi
c0023a54:	5f                   	pop    edi
c0023a55:	5d                   	pop    ebp
c0023a56:	c3                   	ret    
c0023a57:	90                   	nop

c0023a58 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023a58:	55                   	push   ebp
c0023a59:	57                   	push   edi
c0023a5a:	56                   	push   esi
c0023a5b:	53                   	push   ebx
c0023a5c:	83 ec 1c             	sub    esp,0x1c
c0023a5f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a63:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a67:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a6b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a6f:	88 c3                	mov    bl,al
c0023a71:	84 c0                	test   al,al
c0023a73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a77:	0f 84 67 01 00 00    	je     c0023be4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023a7d:	83 ec 0c             	sub    esp,0xc
c0023a80:	68 7b cd 02 c0       	push   0xc002cd7b
c0023a85:	e8 e4 f4 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0023a8a:	83 c4 10             	add    esp,0x10
c0023a8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a91:	3c 01                	cmp    al,0x1
c0023a93:	75 17                	jne    c0023aac <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023a95:	83 ec 0c             	sub    esp,0xc
c0023a98:	b3 13                	mov    bl,0x13
c0023a9a:	68 87 cd 02 c0       	push   0xc002cd87
c0023a9f:	e8 ca f4 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0023aa4:	83 c4 10             	add    esp,0x10
c0023aa7:	e9 25 01 00 00       	jmp    c0023bd1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023aac:	3c 02                	cmp    al,0x2
c0023aae:	0f 85 ef 00 00 00    	jne    c0023ba3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023ab4:	d1 e6                	shl    esi,1
c0023ab6:	09 ee                	or     esi,ebp
c0023ab8:	52                   	push   edx
c0023ab9:	89 f0                	mov    eax,esi
c0023abb:	6a 01                	push   0x1
c0023abd:	0f b6 f0             	movzx  esi,al
c0023ac0:	c1 e6 06             	shl    esi,0x6
c0023ac3:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023acb:	50                   	push   eax
c0023acc:	57                   	push   edi
c0023acd:	e8 30 f6 ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c0023ad2:	83 c4 10             	add    esp,0x10
c0023ad5:	89 c6                	mov    esi,eax
c0023ad7:	a8 01                	test   al,0x1
c0023ad9:	74 12                	je     c0023aed <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023adb:	83 ec 0c             	sub    esp,0xc
c0023ade:	b3 07                	mov    bl,0x7
c0023ae0:	68 9c cd 02 c0       	push   0xc002cd9c
c0023ae5:	e8 84 f4 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0023aea:	83 c4 10             	add    esp,0x10
c0023aed:	f7 c6 02 00 00 00    	test   esi,0x2
c0023af3:	74 12                	je     c0023b07 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023af5:	83 ec 0c             	sub    esp,0xc
c0023af8:	b3 03                	mov    bl,0x3
c0023afa:	68 ba cd 02 c0       	push   0xc002cdba
c0023aff:	e8 6a f4 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0023b04:	83 c4 10             	add    esp,0x10
c0023b07:	f7 c6 04 00 00 00    	test   esi,0x4
c0023b0d:	74 12                	je     c0023b21 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023b0f:	83 ec 0c             	sub    esp,0xc
c0023b12:	b3 14                	mov    bl,0x14
c0023b14:	68 da cd 02 c0       	push   0xc002cdda
c0023b19:	e8 50 f4 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0023b1e:	83 c4 10             	add    esp,0x10
c0023b21:	f7 c6 08 00 00 00    	test   esi,0x8
c0023b27:	74 12                	je     c0023b3b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023b29:	83 ec 0c             	sub    esp,0xc
c0023b2c:	b3 03                	mov    bl,0x3
c0023b2e:	68 ba cd 02 c0       	push   0xc002cdba
c0023b33:	e8 36 f4 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0023b38:	83 c4 10             	add    esp,0x10
c0023b3b:	f7 c6 10 00 00 00    	test   esi,0x10
c0023b41:	74 12                	je     c0023b55 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023b43:	83 ec 0c             	sub    esp,0xc
c0023b46:	b3 15                	mov    bl,0x15
c0023b48:	68 f2 cd 02 c0       	push   0xc002cdf2
c0023b4d:	e8 1c f4 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0023b52:	83 c4 10             	add    esp,0x10
c0023b55:	f7 c6 20 00 00 00    	test   esi,0x20
c0023b5b:	74 12                	je     c0023b6f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023b5d:	83 ec 0c             	sub    esp,0xc
c0023b60:	b3 03                	mov    bl,0x3
c0023b62:	68 ba cd 02 c0       	push   0xc002cdba
c0023b67:	e8 02 f4 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0023b6c:	83 c4 10             	add    esp,0x10
c0023b6f:	f7 c6 40 00 00 00    	test   esi,0x40
c0023b75:	74 12                	je     c0023b89 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023b77:	83 ec 0c             	sub    esp,0xc
c0023b7a:	b3 16                	mov    bl,0x16
c0023b7c:	68 0c ce 02 c0       	push   0xc002ce0c
c0023b81:	e8 e8 f3 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0023b86:	83 c4 10             	add    esp,0x10
c0023b89:	89 f0                	mov    eax,esi
c0023b8b:	84 c0                	test   al,al
c0023b8d:	79 42                	jns    c0023bd1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b8f:	83 ec 0c             	sub    esp,0xc
c0023b92:	b3 0d                	mov    bl,0xd
c0023b94:	68 2d ce 02 c0       	push   0xc002ce2d
c0023b99:	e8 d0 f3 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0023b9e:	83 c4 10             	add    esp,0x10
c0023ba1:	eb 2e                	jmp    c0023bd1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023ba3:	3c 03                	cmp    al,0x3
c0023ba5:	75 14                	jne    c0023bbb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023ba7:	83 ec 0c             	sub    esp,0xc
c0023baa:	b3 17                	mov    bl,0x17
c0023bac:	68 41 ce 02 c0       	push   0xc002ce41
c0023bb1:	e8 b8 f3 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0023bb6:	83 c4 10             	add    esp,0x10
c0023bb9:	eb 16                	jmp    c0023bd1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bbb:	3c 04                	cmp    al,0x4
c0023bbd:	75 12                	jne    c0023bd1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bbf:	83 ec 0c             	sub    esp,0xc
c0023bc2:	b3 08                	mov    bl,0x8
c0023bc4:	68 57 ce 02 c0       	push   0xc002ce57
c0023bc9:	e8 a0 f3 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0023bce:	83 c4 10             	add    esp,0x10
c0023bd1:	50                   	push   eax
c0023bd2:	50                   	push   eax
c0023bd3:	0f b6 c3             	movzx  eax,bl
c0023bd6:	50                   	push   eax
c0023bd7:	68 6f ce 02 c0       	push   0xc002ce6f
c0023bdc:	e8 8d f3 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0023be1:	83 c4 10             	add    esp,0x10
c0023be4:	83 c4 1c             	add    esp,0x1c
c0023be7:	88 d8                	mov    al,bl
c0023be9:	5b                   	pop    ebx
c0023bea:	5e                   	pop    esi
c0023beb:	5f                   	pop    edi
c0023bec:	5d                   	pop    ebp
c0023bed:	c3                   	ret    

c0023bee <IDE::polling(unsigned char, unsigned int)>:
c0023bee:	57                   	push   edi
c0023bef:	56                   	push   esi
c0023bf0:	53                   	push   ebx
c0023bf1:	bb 04 00 00 00       	mov    ebx,0x4
c0023bf6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023bfa:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023bff:	52                   	push   edx
c0023c00:	6a 0c                	push   0xc
c0023c02:	56                   	push   esi
c0023c03:	57                   	push   edi
c0023c04:	e8 f9 f4 ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c0023c09:	83 c4 10             	add    esp,0x10
c0023c0c:	4b                   	dec    ebx
c0023c0d:	75 f0                	jne    c0023bff <IDE::polling(unsigned char, unsigned int)+0x11>
c0023c0f:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023c14:	50                   	push   eax
c0023c15:	6a 0c                	push   0xc
c0023c17:	56                   	push   esi
c0023c18:	57                   	push   edi
c0023c19:	e8 e4 f4 ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c0023c1e:	83 c4 10             	add    esp,0x10
c0023c21:	a8 01                	test   al,0x1
c0023c23:	74 12                	je     c0023c37 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023c25:	83 ec 0c             	sub    esp,0xc
c0023c28:	68 89 ce 02 c0       	push   0xc002ce89
c0023c2d:	e8 3c f3 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0023c32:	83 c4 10             	add    esp,0x10
c0023c35:	eb 17                	jmp    c0023c4e <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c37:	a8 20                	test   al,0x20
c0023c39:	75 0f                	jne    c0023c4a <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023c3b:	4b                   	dec    ebx
c0023c3c:	74 10                	je     c0023c4e <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c3e:	84 c0                	test   al,al
c0023c40:	78 d2                	js     c0023c14 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c42:	a8 08                	test   al,0x8
c0023c44:	74 ce                	je     c0023c14 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c46:	31 c0                	xor    eax,eax
c0023c48:	eb 06                	jmp    c0023c50 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c4a:	b0 01                	mov    al,0x1
c0023c4c:	eb 02                	jmp    c0023c50 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c4e:	b0 02                	mov    al,0x2
c0023c50:	5b                   	pop    ebx
c0023c51:	5e                   	pop    esi
c0023c52:	5f                   	pop    edi
c0023c53:	c3                   	ret    

c0023c54 <SATABus::close(int, int, void*)>:
c0023c54:	31 c0                	xor    eax,eax
c0023c56:	c3                   	ret    
c0023c57:	90                   	nop

c0023c58 <SATABus::detect()>:
c0023c58:	c3                   	ret    
c0023c59:	90                   	nop

c0023c5a <SATABus::SATABus()>:
c0023c5a:	83 ec 0c             	sub    esp,0xc
c0023c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c61:	83 ec 08             	sub    esp,0x8
c0023c64:	68 cc ce 02 c0       	push   0xc002cecc
c0023c69:	50                   	push   eax
c0023c6a:	e8 b1 0a ff ff       	call   c0014720 <HardDiskController::HardDiskController(char const*)>
c0023c6f:	83 c4 10             	add    esp,0x10
c0023c72:	ba 88 cf 02 c0       	mov    edx,0xc002cf88
c0023c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c7b:	89 10                	mov    DWORD PTR [eax],edx
c0023c7d:	83 ec 0c             	sub    esp,0xc
c0023c80:	6a 50                	push   0x50
c0023c82:	e8 8a c3 fe ff       	call   c0010011 <Phys::allocateContiguousPages(int)>
c0023c87:	83 c4 10             	add    esp,0x10
c0023c8a:	89 c2                	mov    edx,eax
c0023c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c90:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023c96:	83 ec 0c             	sub    esp,0xc
c0023c99:	6a 50                	push   0x50
c0023c9b:	e8 eb de fe ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0023ca0:	83 c4 10             	add    esp,0x10
c0023ca3:	89 c2                	mov    edx,eax
c0023ca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ca9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023caf:	e8 72 e1 fe ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0023cb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023cb8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023cbe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023cc2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023cc8:	83 ec 0c             	sub    esp,0xc
c0023ccb:	6a 03                	push   0x3
c0023ccd:	6a 50                	push   0x50
c0023ccf:	51                   	push   ecx
c0023cd0:	52                   	push   edx
c0023cd1:	50                   	push   eax
c0023cd2:	e8 7f e9 fe ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023cd7:	83 c4 20             	add    esp,0x20
c0023cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cde:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ce8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023cee:	83 ec 04             	sub    esp,0x4
c0023cf1:	52                   	push   edx
c0023cf2:	50                   	push   eax
c0023cf3:	68 f0 ce 02 c0       	push   0xc002cef0
c0023cf8:	e8 71 f2 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0023cfd:	83 c4 10             	add    esp,0x10
c0023d00:	90                   	nop
c0023d01:	83 c4 0c             	add    esp,0xc
c0023d04:	c3                   	ret    
c0023d05:	90                   	nop

c0023d06 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023d06:	83 ec 0c             	sub    esp,0xc
c0023d09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d0d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023d10:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023d13:	09 c2                	or     edx,eax
c0023d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d19:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023d1f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023d21:	31 c0                	xor    eax,eax
c0023d23:	c1 e9 08             	shr    ecx,0x8
c0023d26:	83 e1 0f             	and    ecx,0xf
c0023d29:	39 c8                	cmp    eax,ecx
c0023d2b:	74 0a                	je     c0023d37 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023d2d:	f6 c2 01             	test   dl,0x1
c0023d30:	74 18                	je     c0023d4a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d32:	d1 ea                	shr    edx,1
c0023d34:	40                   	inc    eax
c0023d35:	eb f2                	jmp    c0023d29 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023d37:	83 ec 0c             	sub    esp,0xc
c0023d3a:	68 14 cf 02 c0       	push   0xc002cf14
c0023d3f:	e8 cb 68 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0023d44:	83 c4 10             	add    esp,0x10
c0023d47:	83 c8 ff             	or     eax,0xffffffff
c0023d4a:	83 c4 0c             	add    esp,0xc
c0023d4d:	c3                   	ret    

c0023d4e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023d4e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d52:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023d55:	89 c2                	mov    edx,eax
c0023d57:	c1 ea 08             	shr    edx,0x8
c0023d5a:	83 e2 0f             	and    edx,0xf
c0023d5d:	fe ca                	dec    dl
c0023d5f:	75 31                	jne    c0023d92 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d61:	83 e0 0f             	and    eax,0xf
c0023d64:	3c 03                	cmp    al,0x3
c0023d66:	75 2a                	jne    c0023d92 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d68:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023d6b:	b8 02 00 00 00       	mov    eax,0x2
c0023d70:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023d76:	74 1c                	je     c0023d94 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d78:	b8 04 00 00 00       	mov    eax,0x4
c0023d7d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023d83:	74 0f                	je     c0023d94 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d85:	31 c0                	xor    eax,eax
c0023d87:	83 fa 03             	cmp    edx,0x3
c0023d8a:	0f 94 c0             	sete   al
c0023d8d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023d91:	c3                   	ret    
c0023d92:	31 c0                	xor    eax,eax
c0023d94:	c3                   	ret    
c0023d95:	90                   	nop

c0023d96 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d9a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d9d:	0f ba e2 0f          	bt     edx,0xf
c0023da1:	72 f7                	jb     c0023d9a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023da3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023da6:	83 ca 10             	or     edx,0x10
c0023da9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023dac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023daf:	83 ca 01             	or     edx,0x1
c0023db2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023db5:	c3                   	ret    

c0023db6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023db6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023dba:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dbd:	83 e2 fe             	and    edx,0xfffffffe
c0023dc0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023dc3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dc6:	83 e2 ef             	and    edx,0xffffffef
c0023dc9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023dcc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dcf:	0f ba e2 0e          	bt     edx,0xe
c0023dd3:	72 f7                	jb     c0023dcc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023dd5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dd8:	0f ba e2 0f          	bt     edx,0xf
c0023ddc:	72 ee                	jb     c0023dcc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023dde:	c3                   	ret    
c0023ddf:	90                   	nop

c0023de0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023de0:	55                   	push   ebp
c0023de1:	57                   	push   edi
c0023de2:	56                   	push   esi
c0023de3:	53                   	push   ebx
c0023de4:	83 ec 1c             	sub    esp,0x1c
c0023de7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023deb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023def:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023df3:	53                   	push   ebx
c0023df4:	89 fd                	mov    ebp,edi
c0023df6:	56                   	push   esi
c0023df7:	c1 e5 0a             	shl    ebp,0xa
c0023dfa:	e8 b7 ff ff ff       	call   c0023db6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023dff:	83 ec 0c             	sub    esp,0xc
c0023e02:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023e08:	01 e8                	add    eax,ebp
c0023e0a:	89 03                	mov    DWORD PTR [ebx],eax
c0023e0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e0e:	68 00 04 00 00       	push   0x400
c0023e13:	6a 00                	push   0x0
c0023e15:	50                   	push   eax
c0023e16:	e8 5d c9 fd ff       	call   c0000778 <memset>
c0023e1b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023e21:	89 fa                	mov    edx,edi
c0023e23:	01 e8                	add    eax,ebp
c0023e25:	c1 e7 0d             	shl    edi,0xd
c0023e28:	89 03                	mov    DWORD PTR [ebx],eax
c0023e2a:	c1 e2 08             	shl    edx,0x8
c0023e2d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023e34:	81 c2 00 80 00 00    	add    edx,0x8000
c0023e3a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023e3e:	89 d0                	mov    eax,edx
c0023e40:	83 c4 1c             	add    esp,0x1c
c0023e43:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e49:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023e4c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023e4f:	68 00 01 00 00       	push   0x100
c0023e54:	6a 00                	push   0x0
c0023e56:	50                   	push   eax
c0023e57:	e8 1c c9 fd ff       	call   c0000778 <memset>
c0023e5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023e60:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023e66:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023e6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e70:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023e73:	83 c4 10             	add    esp,0x10
c0023e76:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023e7d:	31 ff                	xor    edi,edi
c0023e7f:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023e85:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023e8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e8f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e95:	83 c5 20             	add    ebp,0x20
c0023e98:	01 f8                	add    eax,edi
c0023e9a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e9d:	52                   	push   edx
c0023e9e:	68 00 01 00 00       	push   0x100
c0023ea3:	6a 00                	push   0x0
c0023ea5:	50                   	push   eax
c0023ea6:	e8 cd c8 fd ff       	call   c0000778 <memset>
c0023eab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023eaf:	83 c4 10             	add    esp,0x10
c0023eb2:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023eb8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023ebf:	01 f8                	add    eax,edi
c0023ec1:	81 c7 00 01 00 00    	add    edi,0x100
c0023ec7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023eca:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023ed0:	75 b3                	jne    c0023e85 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023ed2:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023ed6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023eda:	83 c4 1c             	add    esp,0x1c
c0023edd:	5b                   	pop    ebx
c0023ede:	5e                   	pop    esi
c0023edf:	5f                   	pop    edi
c0023ee0:	5d                   	pop    ebp
c0023ee1:	e9 b0 fe ff ff       	jmp    c0023d96 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023ee6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023ee6:	55                   	push   ebp
c0023ee7:	57                   	push   edi
c0023ee8:	56                   	push   esi
c0023ee9:	53                   	push   ebx
c0023eea:	31 db                	xor    ebx,ebx
c0023eec:	83 ec 0c             	sub    esp,0xc
c0023eef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023ef3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023ef7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023efa:	f7 c7 01 00 00 00    	test   edi,0x1
c0023f00:	0f 84 aa 00 00 00    	je     c0023fb0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023f0a:	89 d8                	mov    eax,ebx
c0023f0c:	c1 e0 07             	shl    eax,0x7
c0023f0f:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023f16:	55                   	push   ebp
c0023f17:	56                   	push   esi
c0023f18:	e8 31 fe ff ff       	call   c0023d4e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023f1d:	5a                   	pop    edx
c0023f1e:	83 f8 01             	cmp    eax,0x1
c0023f21:	59                   	pop    ecx
c0023f22:	75 30                	jne    c0023f54 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023f24:	50                   	push   eax
c0023f25:	50                   	push   eax
c0023f26:	53                   	push   ebx
c0023f27:	68 39 cf 02 c0       	push   0xc002cf39
c0023f2c:	e8 3d f0 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0023f31:	83 c4 0c             	add    esp,0xc
c0023f34:	53                   	push   ebx
c0023f35:	55                   	push   ebp
c0023f36:	56                   	push   esi
c0023f37:	e8 a4 fe ff ff       	call   c0023de0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f3c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023f43:	e8 f8 b8 fe ff       	call   c000f840 <malloc>
c0023f48:	89 c5                	mov    ebp,eax
c0023f4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f4d:	e8 60 0d 00 00       	call   c0024cb2 <SATA::SATA()>
c0023f52:	eb 33                	jmp    c0023f87 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023f54:	83 f8 04             	cmp    eax,0x4
c0023f57:	75 47                	jne    c0023fa0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023f59:	50                   	push   eax
c0023f5a:	50                   	push   eax
c0023f5b:	53                   	push   ebx
c0023f5c:	68 50 cf 02 c0       	push   0xc002cf50
c0023f61:	e8 08 f0 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0023f66:	83 c4 0c             	add    esp,0xc
c0023f69:	53                   	push   ebx
c0023f6a:	55                   	push   ebp
c0023f6b:	56                   	push   esi
c0023f6c:	e8 6f fe ff ff       	call   c0023de0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f71:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023f78:	e8 c3 b8 fe ff       	call   c000f840 <malloc>
c0023f7d:	89 c5                	mov    ebp,eax
c0023f7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f82:	e8 d7 10 00 00       	call   c002505e <SATAPI::SATAPI()>
c0023f87:	5a                   	pop    edx
c0023f88:	59                   	pop    ecx
c0023f89:	55                   	push   ebp
c0023f8a:	56                   	push   esi
c0023f8b:	e8 04 04 ff ff       	call   c0014394 <Device::addChild(Device*)>
c0023f90:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023f93:	56                   	push   esi
c0023f94:	6a 00                	push   0x0
c0023f96:	53                   	push   ebx
c0023f97:	55                   	push   ebp
c0023f98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f9b:	83 c4 20             	add    esp,0x20
c0023f9e:	eb 10                	jmp    c0023fb0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023fa0:	50                   	push   eax
c0023fa1:	50                   	push   eax
c0023fa2:	53                   	push   ebx
c0023fa3:	68 69 cf 02 c0       	push   0xc002cf69
c0023fa8:	e8 c1 ef fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0023fad:	83 c4 10             	add    esp,0x10
c0023fb0:	d1 ef                	shr    edi,1
c0023fb2:	43                   	inc    ebx
c0023fb3:	83 fb 20             	cmp    ebx,0x20
c0023fb6:	0f 85 3e ff ff ff    	jne    c0023efa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023fbc:	83 c4 0c             	add    esp,0xc
c0023fbf:	5b                   	pop    ebx
c0023fc0:	5e                   	pop    esi
c0023fc1:	5f                   	pop    edi
c0023fc2:	5d                   	pop    ebp
c0023fc3:	c3                   	ret    

c0023fc4 <SATABus::open(int, int, void*)>:
c0023fc4:	83 ec 14             	sub    esp,0x14
c0023fc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023fcb:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023fd1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023fd7:	52                   	push   edx
c0023fd8:	50                   	push   eax
c0023fd9:	e8 08 ff ff ff       	call   c0023ee6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023fde:	31 c0                	xor    eax,eax
c0023fe0:	83 c4 1c             	add    esp,0x1c
c0023fe3:	c3                   	ret    

c0023fe4 <ATA::close(int, int, void*)>:
c0023fe4:	83 ec 0c             	sub    esp,0xc
c0023fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023feb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023ff1:	85 c0                	test   eax,eax
c0023ff3:	74 0c                	je     c0024001 <ATA::close(int, int, void*)+0x1d>
c0023ff5:	83 ec 0c             	sub    esp,0xc
c0023ff8:	8b 10                	mov    edx,DWORD PTR [eax]
c0023ffa:	50                   	push   eax
c0023ffb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023ffe:	83 c4 10             	add    esp,0x10
c0024001:	31 c0                	xor    eax,eax
c0024003:	83 c4 0c             	add    esp,0xc
c0024006:	c3                   	ret    
c0024007:	90                   	nop

c0024008 <ATA::powerSaving(PowerSavingLevel)>:
c0024008:	c3                   	ret    
c0024009:	90                   	nop

c002400a <ATA::ATA()>:
c002400a:	83 ec 0c             	sub    esp,0xc
c002400d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024011:	83 ec 04             	sub    esp,0x4
c0024014:	68 00 02 00 00       	push   0x200
c0024019:	68 51 d0 02 c0       	push   0xc002d051
c002401e:	50                   	push   eax
c002401f:	e8 94 07 ff ff       	call   c00147b8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024024:	83 c4 10             	add    esp,0x10
c0024027:	ba d4 cf 02 c0       	mov    edx,0xc002cfd4
c002402c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024030:	89 10                	mov    DWORD PTR [eax],edx
c0024032:	90                   	nop
c0024033:	83 c4 0c             	add    esp,0xc
c0024036:	c3                   	ret    
c0024037:	90                   	nop

c0024038 <ATA::flush(bool)>:
c0024038:	53                   	push   ebx
c0024039:	83 ec 08             	sub    esp,0x8
c002403c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024041:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024045:	19 c0                	sbb    eax,eax
c0024047:	83 e0 fd             	and    eax,0xfffffffd
c002404a:	05 ea 00 00 00       	add    eax,0xea
c002404f:	50                   	push   eax
c0024050:	6a 07                	push   0x7
c0024052:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024059:	50                   	push   eax
c002405a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024060:	e8 dd ef ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024065:	83 c4 0c             	add    esp,0xc
c0024068:	6a 00                	push   0x0
c002406a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024071:	50                   	push   eax
c0024072:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024078:	e8 71 fb ff ff       	call   c0023bee <IDE::polling(unsigned char, unsigned int)>
c002407d:	83 c4 18             	add    esp,0x18
c0024080:	5b                   	pop    ebx
c0024081:	c3                   	ret    

c0024082 <ATA::readyForCommand()>:
c0024082:	56                   	push   esi
c0024083:	53                   	push   ebx
c0024084:	31 db                	xor    ebx,ebx
c0024086:	50                   	push   eax
c0024087:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002408b:	50                   	push   eax
c002408c:	6a 0c                	push   0xc
c002408e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024095:	50                   	push   eax
c0024096:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002409c:	e8 61 f0 ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c00240a1:	83 c4 10             	add    esp,0x10
c00240a4:	a8 88                	test   al,0x88
c00240a6:	74 23                	je     c00240cb <ATA::readyForCommand()+0x49>
c00240a8:	43                   	inc    ebx
c00240a9:	83 fb 63             	cmp    ebx,0x63
c00240ac:	7e dd                	jle    c002408b <ATA::readyForCommand()+0x9>
c00240ae:	51                   	push   ecx
c00240af:	51                   	push   ecx
c00240b0:	6a 00                	push   0x0
c00240b2:	68 40 42 0f 00       	push   0xf4240
c00240b7:	e8 c8 a2 ff ff       	call   c001e384 <nanoSleep(unsigned long long)>
c00240bc:	83 c4 10             	add    esp,0x10
c00240bf:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00240c5:	75 c4                	jne    c002408b <ATA::readyForCommand()+0x9>
c00240c7:	31 c0                	xor    eax,eax
c00240c9:	eb 02                	jmp    c00240cd <ATA::readyForCommand()+0x4b>
c00240cb:	b0 01                	mov    al,0x1
c00240cd:	5a                   	pop    edx
c00240ce:	5b                   	pop    ebx
c00240cf:	5e                   	pop    esi
c00240d0:	c3                   	ret    
c00240d1:	90                   	nop

c00240d2 <ATA::access(unsigned long long, int, void*, bool)>:
c00240d2:	55                   	push   ebp
c00240d3:	57                   	push   edi
c00240d4:	56                   	push   esi
c00240d5:	53                   	push   ebx
c00240d6:	83 ec 2c             	sub    esp,0x2c
c00240d9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00240dd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00240e1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00240e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00240e9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00240ed:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00240f1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00240f5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00240fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00240ff:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024105:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024109:	c1 e0 06             	shl    eax,0x6
c002410c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024114:	74 5d                	je     c0024173 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024116:	89 fa                	mov    edx,edi
c0024118:	89 f0                	mov    eax,esi
c002411a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002411e:	c1 ea 1c             	shr    edx,0x1c
c0024121:	89 d1                	mov    ecx,edx
c0024123:	09 c1                	or     ecx,eax
c0024125:	74 25                	je     c002414c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024127:	31 ed                	xor    ebp,ebp
c0024129:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024130:	89 fa                	mov    edx,edi
c0024132:	89 f0                	mov    eax,esi
c0024134:	0f ad d0             	shrd   eax,edx,cl
c0024137:	d3 ea                	shr    edx,cl
c0024139:	f6 c1 20             	test   cl,0x20
c002413c:	74 02                	je     c0024140 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002413e:	89 d0                	mov    eax,edx
c0024140:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024144:	45                   	inc    ebp
c0024145:	83 fd 06             	cmp    ebp,0x6
c0024148:	75 df                	jne    c0024129 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002414a:	eb 76                	jmp    c00241c2 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002414c:	89 f0                	mov    eax,esi
c002414e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024153:	89 fa                	mov    edx,edi
c0024155:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002415c:	0f ac d0 10          	shrd   eax,edx,0x10
c0024160:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024165:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024169:	c1 ee 18             	shr    esi,0x18
c002416c:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024171:	eb 56                	jmp    c00241c9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024173:	6a 00                	push   0x0
c0024175:	6a 3f                	push   0x3f
c0024177:	57                   	push   edi
c0024178:	56                   	push   esi
c0024179:	e8 8e 29 00 00       	call   c0026b0c <__umoddi3>
c002417e:	83 c4 10             	add    esp,0x10
c0024181:	40                   	inc    eax
c0024182:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024186:	6a 00                	push   0x0
c0024188:	68 f0 03 00 00       	push   0x3f0
c002418d:	57                   	push   edi
c002418e:	56                   	push   esi
c002418f:	e8 78 28 00 00       	call   c0026a0c <__udivdi3>
c0024194:	83 c4 10             	add    esp,0x10
c0024197:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002419c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00241a3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00241a8:	6a 00                	push   0x0
c00241aa:	6a 3f                	push   0x3f
c00241ac:	57                   	push   edi
c00241ad:	56                   	push   esi
c00241ae:	e8 59 28 00 00       	call   c0026a0c <__udivdi3>
c00241b3:	83 c4 10             	add    esp,0x10
c00241b6:	89 c6                	mov    esi,eax
c00241b8:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00241bd:	83 e6 0f             	and    esi,0xf
c00241c0:	eb 07                	jmp    c00241c9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00241c2:	31 f6                	xor    esi,esi
c00241c4:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00241c9:	bf 01 00 00 00       	mov    edi,0x1
c00241ce:	50                   	push   eax
c00241cf:	6a 00                	push   0x0
c00241d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241d8:	50                   	push   eax
c00241d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00241dd:	e8 6c f0 ff ff       	call   c002324e <IDE::enableIRQs(unsigned char, bool)>
c00241e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241e5:	e8 98 fe ff ff       	call   c0024082 <ATA::readyForCommand()>
c00241ea:	83 c4 10             	add    esp,0x10
c00241ed:	84 c0                	test   al,al
c00241ef:	0f 84 5a 02 00 00    	je     c002444f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00241f5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00241fb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024201:	c1 e0 04             	shl    eax,0x4
c0024204:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002420b:	09 c6                	or     esi,eax
c002420d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024212:	75 05                	jne    c0024219 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024214:	83 ce a0             	or     esi,0xffffffa0
c0024217:	eb 03                	jmp    c002421c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024219:	83 ce e0             	or     esi,0xffffffe0
c002421c:	89 f0                	mov    eax,esi
c002421e:	0f b6 f0             	movzx  esi,al
c0024221:	56                   	push   esi
c0024222:	6a 06                	push   0x6
c0024224:	51                   	push   ecx
c0024225:	52                   	push   edx
c0024226:	e8 17 ee ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002422b:	83 c4 10             	add    esp,0x10
c002422e:	6a 00                	push   0x0
c0024230:	6a 01                	push   0x1
c0024232:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024239:	50                   	push   eax
c002423a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024240:	e8 fd ed ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024245:	83 c4 10             	add    esp,0x10
c0024248:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002424d:	75 6e                	jne    c00242bd <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002424f:	6a 00                	push   0x0
c0024251:	6a 08                	push   0x8
c0024253:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002425a:	50                   	push   eax
c002425b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024261:	e8 dc ed ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024266:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002426b:	50                   	push   eax
c002426c:	6a 09                	push   0x9
c002426e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024275:	50                   	push   eax
c0024276:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002427c:	e8 c1 ed ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024281:	83 c4 20             	add    esp,0x20
c0024284:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024289:	50                   	push   eax
c002428a:	6a 0a                	push   0xa
c002428c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024293:	50                   	push   eax
c0024294:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002429a:	e8 a3 ed ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002429f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00242a4:	50                   	push   eax
c00242a5:	6a 0b                	push   0xb
c00242a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242ae:	50                   	push   eax
c00242af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242b5:	e8 88 ed ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ba:	83 c4 20             	add    esp,0x20
c00242bd:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00242c2:	50                   	push   eax
c00242c3:	6a 02                	push   0x2
c00242c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242cc:	50                   	push   eax
c00242cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242d3:	e8 6a ed ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242d8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00242dd:	50                   	push   eax
c00242de:	6a 03                	push   0x3
c00242e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242e7:	50                   	push   eax
c00242e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242ee:	e8 4f ed ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242f3:	83 c4 20             	add    esp,0x20
c00242f6:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00242fb:	50                   	push   eax
c00242fc:	6a 04                	push   0x4
c00242fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024305:	50                   	push   eax
c0024306:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002430c:	e8 31 ed ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024311:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024316:	50                   	push   eax
c0024317:	6a 05                	push   0x5
c0024319:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024320:	50                   	push   eax
c0024321:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024327:	e8 16 ed ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002432c:	83 c4 20             	add    esp,0x20
c002432f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024334:	0f 94 c0             	sete   al
c0024337:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002433c:	74 09                	je     c0024347 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002433e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024345:	eb 07                	jmp    c002434e <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024347:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002434e:	0f b6 c0             	movzx  eax,al
c0024351:	50                   	push   eax
c0024352:	6a 07                	push   0x7
c0024354:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002435b:	50                   	push   eax
c002435c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024362:	e8 db ec ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024367:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002436b:	83 c4 10             	add    esp,0x10
c002436e:	85 f6                	test   esi,esi
c0024370:	0f 84 ba 00 00 00    	je     c0024430 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024376:	50                   	push   eax
c0024377:	6a 01                	push   0x1
c0024379:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024380:	50                   	push   eax
c0024381:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024387:	e8 62 f8 ff ff       	call   c0023bee <IDE::polling(unsigned char, unsigned int)>
c002438c:	83 c4 10             	add    esp,0x10
c002438f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024395:	84 c0                	test   al,al
c0024397:	74 2c                	je     c00243c5 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024399:	0f b6 f8             	movzx  edi,al
c002439c:	0f b6 d2             	movzx  edx,dl
c002439f:	57                   	push   edi
c00243a0:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00243a7:	50                   	push   eax
c00243a8:	52                   	push   edx
c00243a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243af:	e8 a4 f6 ff ff       	call   c0023a58 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00243b4:	c7 04 24 ac cf 02 c0 	mov    DWORD PTR [esp],0xc002cfac
c00243bb:	e8 ae eb fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00243c0:	e9 87 00 00 00       	jmp    c002444c <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00243c5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00243ca:	74 33                	je     c00243ff <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00243cc:	31 ed                	xor    ebp,ebp
c00243ce:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00243d2:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00243d6:	50                   	push   eax
c00243d7:	50                   	push   eax
c00243d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243df:	50                   	push   eax
c00243e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243e6:	e8 45 ec ff ff       	call   c0023030 <IDE::getBase(unsigned char)>
c00243eb:	89 c2                	mov    edx,eax
c00243ed:	89 f8                	mov    eax,edi
c00243ef:	66 ef                	out    dx,ax
c00243f1:	45                   	inc    ebp
c00243f2:	83 c4 10             	add    esp,0x10
c00243f5:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00243fb:	75 d1                	jne    c00243ce <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00243fd:	eb 23                	jmp    c0024422 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00243ff:	0f b6 d2             	movzx  edx,dl
c0024402:	51                   	push   ecx
c0024403:	51                   	push   ecx
c0024404:	52                   	push   edx
c0024405:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002440b:	e8 20 ec ff ff       	call   c0023030 <IDE::getBase(unsigned char)>
c0024410:	b9 00 01 00 00       	mov    ecx,0x100
c0024415:	89 c2                	mov    edx,eax
c0024417:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002441b:	fc                   	cld    
c002441c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002441f:	83 c4 10             	add    esp,0x10
c0024422:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002442a:	4e                   	dec    esi
c002442b:	e9 3e ff ff ff       	jmp    c002436e <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024430:	31 ff                	xor    edi,edi
c0024432:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024437:	74 16                	je     c002444f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024439:	50                   	push   eax
c002443a:	50                   	push   eax
c002443b:	31 c0                	xor    eax,eax
c002443d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024442:	0f 94 c0             	sete   al
c0024445:	50                   	push   eax
c0024446:	53                   	push   ebx
c0024447:	e8 ec fb ff ff       	call   c0024038 <ATA::flush(bool)>
c002444c:	83 c4 10             	add    esp,0x10
c002444f:	83 c4 2c             	add    esp,0x2c
c0024452:	89 f8                	mov    eax,edi
c0024454:	5b                   	pop    ebx
c0024455:	5e                   	pop    esi
c0024456:	5f                   	pop    edi
c0024457:	5d                   	pop    ebp
c0024458:	c3                   	ret    
c0024459:	90                   	nop

c002445a <ATA::read(unsigned long long, int, void*)>:
c002445a:	57                   	push   edi
c002445b:	b8 04 00 00 00       	mov    eax,0x4
c0024460:	56                   	push   esi
c0024461:	53                   	push   ebx
c0024462:	83 ec 10             	sub    esp,0x10
c0024465:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024469:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002446d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024470:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024474:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024478:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002447e:	77 3b                	ja     c00244bb <ATA::read(unsigned long long, int, void*)+0x61>
c0024480:	b8 06 00 00 00       	mov    eax,0x6
c0024485:	85 d2                	test   edx,edx
c0024487:	74 32                	je     c00244bb <ATA::read(unsigned long long, int, void*)+0x61>
c0024489:	50                   	push   eax
c002448a:	50                   	push   eax
c002448b:	6a 00                	push   0x0
c002448d:	52                   	push   edx
c002448e:	53                   	push   ebx
c002448f:	57                   	push   edi
c0024490:	56                   	push   esi
c0024491:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024495:	e8 38 fc ff ff       	call   c00240d2 <ATA::access(unsigned long long, int, void*, bool)>
c002449a:	83 c4 20             	add    esp,0x20
c002449d:	85 c0                	test   eax,eax
c002449f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244a3:	75 11                	jne    c00244b6 <ATA::read(unsigned long long, int, void*)+0x5c>
c00244a5:	01 1d 48 29 03 c0    	add    DWORD PTR ds:0xc0032948,ebx
c00244ab:	e8 30 c5 fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c00244b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244b4:	eb 05                	jmp    c00244bb <ATA::read(unsigned long long, int, void*)+0x61>
c00244b6:	b8 01 00 00 00       	mov    eax,0x1
c00244bb:	83 c4 10             	add    esp,0x10
c00244be:	5b                   	pop    ebx
c00244bf:	5e                   	pop    esi
c00244c0:	5f                   	pop    edi
c00244c1:	c3                   	ret    

c00244c2 <ATA::write(unsigned long long, int, void*)>:
c00244c2:	57                   	push   edi
c00244c3:	b8 04 00 00 00       	mov    eax,0x4
c00244c8:	56                   	push   esi
c00244c9:	53                   	push   ebx
c00244ca:	83 ec 10             	sub    esp,0x10
c00244cd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00244d1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00244d5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244d8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00244dc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244e0:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00244e6:	77 3b                	ja     c0024523 <ATA::write(unsigned long long, int, void*)+0x61>
c00244e8:	b8 06 00 00 00       	mov    eax,0x6
c00244ed:	85 d2                	test   edx,edx
c00244ef:	74 32                	je     c0024523 <ATA::write(unsigned long long, int, void*)+0x61>
c00244f1:	50                   	push   eax
c00244f2:	50                   	push   eax
c00244f3:	6a 01                	push   0x1
c00244f5:	52                   	push   edx
c00244f6:	53                   	push   ebx
c00244f7:	57                   	push   edi
c00244f8:	56                   	push   esi
c00244f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244fd:	e8 d0 fb ff ff       	call   c00240d2 <ATA::access(unsigned long long, int, void*, bool)>
c0024502:	83 c4 20             	add    esp,0x20
c0024505:	85 c0                	test   eax,eax
c0024507:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002450b:	75 11                	jne    c002451e <ATA::write(unsigned long long, int, void*)+0x5c>
c002450d:	01 1d 44 29 03 c0    	add    DWORD PTR ds:0xc0032944,ebx
c0024513:	e8 c8 c4 fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c0024518:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002451c:	eb 05                	jmp    c0024523 <ATA::write(unsigned long long, int, void*)+0x61>
c002451e:	b8 01 00 00 00       	mov    eax,0x1
c0024523:	83 c4 10             	add    esp,0x10
c0024526:	5b                   	pop    ebx
c0024527:	5e                   	pop    esi
c0024528:	5f                   	pop    edi
c0024529:	c3                   	ret    

c002452a <ATA::detectCHS()>:
c002452a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002452e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024534:	c1 e0 06             	shl    eax,0x6
c0024537:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002453d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024547:	c7 44 24 04 b7 cf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cfb7
c002454f:	e9 bb 60 ff ff       	jmp    c001a60f <Krnl::panic(char const*)>

c0024554 <ATA::open(int, int, void*)>:
c0024554:	53                   	push   ebx
c0024555:	83 ec 08             	sub    esp,0x8
c0024558:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002455c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024560:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024564:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002456a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024570:	c1 e0 06             	shl    eax,0x6
c0024573:	01 d0                	add    eax,edx
c0024575:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002457c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024582:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024589:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024593:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024599:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00245a0:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00245a7:	75 0c                	jne    c00245b5 <ATA::open(int, int, void*)+0x61>
c00245a9:	83 ec 0c             	sub    esp,0xc
c00245ac:	53                   	push   ebx
c00245ad:	e8 78 ff ff ff       	call   c002452a <ATA::detectCHS()>
c00245b2:	83 c4 10             	add    esp,0x10
c00245b5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00245bb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00245c1:	c1 e0 06             	shl    eax,0x6
c00245c4:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00245cb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00245d5:	d1 e8                	shr    eax,1
c00245d7:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00245dd:	6a 04                	push   0x4
c00245df:	6a 0c                	push   0xc
c00245e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245e8:	50                   	push   eax
c00245e9:	52                   	push   edx
c00245ea:	e8 53 ea ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245ef:	90                   	nop
c00245f0:	90                   	nop
c00245f1:	6a 00                	push   0x0
c00245f3:	6a 0c                	push   0xc
c00245f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245fc:	50                   	push   eax
c00245fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024603:	e8 3a ea ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024608:	83 c4 14             	add    esp,0x14
c002460b:	53                   	push   ebx
c002460c:	e8 0f 02 ff ff       	call   c0014820 <PhysicalDisk::startCache()>
c0024611:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024614:	e8 7d 23 ff ff       	call   c0016996 <createPartitionsForDisk(PhysicalDisk*)>
c0024619:	31 c0                	xor    eax,eax
c002461b:	83 c4 18             	add    esp,0x18
c002461e:	5b                   	pop    ebx
c002461f:	c3                   	ret    

c0024620 <ATAPI::write(unsigned long long, int, void*)>:
c0024620:	b8 03 00 00 00       	mov    eax,0x3
c0024625:	c3                   	ret    

c0024626 <ATAPI::close(int, int, void*)>:
c0024626:	83 ec 0c             	sub    esp,0xc
c0024629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002462d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024633:	85 c0                	test   eax,eax
c0024635:	74 0c                	je     c0024643 <ATAPI::close(int, int, void*)+0x1d>
c0024637:	83 ec 0c             	sub    esp,0xc
c002463a:	8b 10                	mov    edx,DWORD PTR [eax]
c002463c:	50                   	push   eax
c002463d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024640:	83 c4 10             	add    esp,0x10
c0024643:	31 c0                	xor    eax,eax
c0024645:	83 c4 0c             	add    esp,0xc
c0024648:	c3                   	ret    
c0024649:	90                   	nop

c002464a <ATAPI::ATAPI()>:
c002464a:	83 ec 0c             	sub    esp,0xc
c002464d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024651:	83 ec 04             	sub    esp,0x4
c0024654:	68 00 08 00 00       	push   0x800
c0024659:	68 f1 d0 02 c0       	push   0xc002d0f1
c002465e:	50                   	push   eax
c002465f:	e8 54 01 ff ff       	call   c00147b8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024664:	83 c4 10             	add    esp,0x10
c0024667:	ba 0c d0 02 c0       	mov    edx,0xc002d00c
c002466c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024670:	89 10                	mov    DWORD PTR [eax],edx
c0024672:	90                   	nop
c0024673:	83 c4 0c             	add    esp,0xc
c0024676:	c3                   	ret    
c0024677:	90                   	nop

c0024678 <ATAPI::readyForCommand()>:
c0024678:	56                   	push   esi
c0024679:	53                   	push   ebx
c002467a:	31 db                	xor    ebx,ebx
c002467c:	50                   	push   eax
c002467d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024681:	50                   	push   eax
c0024682:	6a 0c                	push   0xc
c0024684:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002468b:	50                   	push   eax
c002468c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024692:	e8 6b ea ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c0024697:	83 c4 10             	add    esp,0x10
c002469a:	a8 88                	test   al,0x88
c002469c:	74 23                	je     c00246c1 <ATAPI::readyForCommand()+0x49>
c002469e:	43                   	inc    ebx
c002469f:	83 fb 63             	cmp    ebx,0x63
c00246a2:	7e dd                	jle    c0024681 <ATAPI::readyForCommand()+0x9>
c00246a4:	51                   	push   ecx
c00246a5:	51                   	push   ecx
c00246a6:	6a 00                	push   0x0
c00246a8:	68 40 42 0f 00       	push   0xf4240
c00246ad:	e8 d2 9c ff ff       	call   c001e384 <nanoSleep(unsigned long long)>
c00246b2:	83 c4 10             	add    esp,0x10
c00246b5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00246bb:	75 c4                	jne    c0024681 <ATAPI::readyForCommand()+0x9>
c00246bd:	31 c0                	xor    eax,eax
c00246bf:	eb 02                	jmp    c00246c3 <ATAPI::readyForCommand()+0x4b>
c00246c1:	b0 01                	mov    al,0x1
c00246c3:	5a                   	pop    edx
c00246c4:	5b                   	pop    ebx
c00246c5:	5e                   	pop    esi
c00246c6:	c3                   	ret    
c00246c7:	90                   	nop

c00246c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00246c8:	55                   	push   ebp
c00246c9:	57                   	push   edi
c00246ca:	56                   	push   esi
c00246cb:	53                   	push   ebx
c00246cc:	83 ec 20             	sub    esp,0x20
c00246cf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00246d3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00246d7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00246db:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00246df:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00246e3:	6a 01                	push   0x1
c00246e5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246ec:	50                   	push   eax
c00246ed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246f3:	e8 56 eb ff ff       	call   c002324e <IDE::enableIRQs(unsigned char, bool)>
c00246f8:	5e                   	pop    esi
c00246f9:	58                   	pop    eax
c00246fa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024701:	50                   	push   eax
c0024702:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024708:	e8 0f e9 ff ff       	call   c002301c <IDE::prepareInterrupt(unsigned char)>
c002470d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024710:	e8 63 ff ff ff       	call   c0024678 <ATAPI::readyForCommand()>
c0024715:	83 c4 10             	add    esp,0x10
c0024718:	84 c0                	test   al,al
c002471a:	75 0a                	jne    c0024726 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002471c:	bb 01 00 00 00       	mov    ebx,0x1
c0024721:	e9 57 02 00 00       	jmp    c002497d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024726:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002472c:	c1 e0 04             	shl    eax,0x4
c002472f:	0f b6 c0             	movzx  eax,al
c0024732:	50                   	push   eax
c0024733:	6a 06                	push   0x6
c0024735:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002473c:	50                   	push   eax
c002473d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024743:	e8 fa e8 ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024748:	6a 00                	push   0x0
c002474a:	6a 01                	push   0x1
c002474c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024753:	50                   	push   eax
c0024754:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002475a:	e8 e3 e8 ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002475f:	83 c4 20             	add    esp,0x20
c0024762:	0f b6 c3             	movzx  eax,bl
c0024765:	0f b6 df             	movzx  ebx,bh
c0024768:	50                   	push   eax
c0024769:	6a 04                	push   0x4
c002476b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024772:	50                   	push   eax
c0024773:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024779:	e8 c4 e8 ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002477e:	53                   	push   ebx
c002477f:	6a 05                	push   0x5
c0024781:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024788:	50                   	push   eax
c0024789:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002478f:	e8 ae e8 ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024794:	83 c4 20             	add    esp,0x20
c0024797:	68 a0 00 00 00       	push   0xa0
c002479c:	6a 07                	push   0x7
c002479e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247a5:	50                   	push   eax
c00247a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247ac:	e8 91 e8 ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247b1:	83 c4 0c             	add    esp,0xc
c00247b4:	6a 01                	push   0x1
c00247b6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247bd:	50                   	push   eax
c00247be:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247c4:	e8 25 f4 ff ff       	call   c0023bee <IDE::polling(unsigned char, unsigned int)>
c00247c9:	83 c4 10             	add    esp,0x10
c00247cc:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00247d2:	84 c0                	test   al,al
c00247d4:	74 23                	je     c00247f9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00247d6:	0f b6 d8             	movzx  ebx,al
c00247d9:	0f b6 d2             	movzx  edx,dl
c00247dc:	53                   	push   ebx
c00247dd:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00247e4:	50                   	push   eax
c00247e5:	52                   	push   edx
c00247e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247ec:	e8 67 f2 ff ff       	call   c0023a58 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00247f1:	83 c4 10             	add    esp,0x10
c00247f4:	e9 84 01 00 00       	jmp    c002497d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247f9:	0f b6 d2             	movzx  edx,dl
c00247fc:	53                   	push   ebx
c00247fd:	53                   	push   ebx
c00247fe:	52                   	push   edx
c00247ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024805:	e8 26 e8 ff ff       	call   c0023030 <IDE::getBase(unsigned char)>
c002480a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002480e:	b9 06 00 00 00       	mov    ecx,0x6
c0024813:	89 c2                	mov    edx,eax
c0024815:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024818:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002481c:	83 c4 10             	add    esp,0x10
c002481f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024825:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002482c:	85 db                	test   ebx,ebx
c002482e:	0f 84 ec 00 00 00    	je     c0024920 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024834:	51                   	push   ecx
c0024835:	51                   	push   ecx
c0024836:	52                   	push   edx
c0024837:	50                   	push   eax
c0024838:	e8 73 e9 ff ff       	call   c00231b0 <IDE::waitInterrupt(unsigned char)>
c002483d:	83 c4 10             	add    esp,0x10
c0024840:	84 c0                	test   al,al
c0024842:	0f 84 d4 fe ff ff    	je     c002471c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024848:	56                   	push   esi
c0024849:	56                   	push   esi
c002484a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024851:	50                   	push   eax
c0024852:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024858:	e8 bf e7 ff ff       	call   c002301c <IDE::prepareInterrupt(unsigned char)>
c002485d:	83 c4 0c             	add    esp,0xc
c0024860:	6a 04                	push   0x4
c0024862:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024869:	50                   	push   eax
c002486a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024870:	e8 8d e8 ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c0024875:	83 c4 0c             	add    esp,0xc
c0024878:	89 c6                	mov    esi,eax
c002487a:	6a 05                	push   0x5
c002487c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024883:	50                   	push   eax
c0024884:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002488a:	e8 73 e8 ff ff       	call   c0023102 <IDE::read(unsigned char, unsigned char)>
c002488f:	89 f1                	mov    ecx,esi
c0024891:	0f b6 c0             	movzx  eax,al
c0024894:	0f b6 f1             	movzx  esi,cl
c0024897:	c1 e0 08             	shl    eax,0x8
c002489a:	09 c6                	or     esi,eax
c002489c:	d1 fe                	sar    esi,1
c002489e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00248a2:	83 c4 10             	add    esp,0x10
c00248a5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00248aa:	74 41                	je     c00248ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00248ac:	31 c9                	xor    ecx,ecx
c00248ae:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248b4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248bb:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00248bf:	75 0a                	jne    c00248cb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00248c1:	01 c9                	add    ecx,ecx
c00248c3:	01 cd                	add    ebp,ecx
c00248c5:	4b                   	dec    ebx
c00248c6:	e9 54 ff ff ff       	jmp    c002481f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00248cb:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00248d0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00248d4:	51                   	push   ecx
c00248d5:	51                   	push   ecx
c00248d6:	52                   	push   edx
c00248d7:	50                   	push   eax
c00248d8:	e8 53 e7 ff ff       	call   c0023030 <IDE::getBase(unsigned char)>
c00248dd:	89 c2                	mov    edx,eax
c00248df:	89 f0                	mov    eax,esi
c00248e1:	66 ef                	out    dx,ax
c00248e3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00248e7:	83 c4 10             	add    esp,0x10
c00248ea:	41                   	inc    ecx
c00248eb:	eb c1                	jmp    c00248ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00248ed:	31 f6                	xor    esi,esi
c00248ef:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248f5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248fc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024900:	75 06                	jne    c0024908 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024902:	01 f6                	add    esi,esi
c0024904:	01 f5                	add    ebp,esi
c0024906:	eb bd                	jmp    c00248c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024908:	51                   	push   ecx
c0024909:	51                   	push   ecx
c002490a:	52                   	push   edx
c002490b:	50                   	push   eax
c002490c:	e8 1f e7 ff ff       	call   c0023030 <IDE::getBase(unsigned char)>
c0024911:	89 c2                	mov    edx,eax
c0024913:	66 ed                	in     ax,dx
c0024915:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002491a:	83 c4 10             	add    esp,0x10
c002491d:	46                   	inc    esi
c002491e:	eb cf                	jmp    c00248ef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024920:	51                   	push   ecx
c0024921:	51                   	push   ecx
c0024922:	52                   	push   edx
c0024923:	50                   	push   eax
c0024924:	e8 87 e8 ff ff       	call   c00231b0 <IDE::waitInterrupt(unsigned char)>
c0024929:	83 c4 10             	add    esp,0x10
c002492c:	84 c0                	test   al,al
c002492e:	0f 84 e8 fd ff ff    	je     c002471c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024934:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024939:	52                   	push   edx
c002493a:	52                   	push   edx
c002493b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024942:	50                   	push   eax
c0024943:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024949:	e8 ce e6 ff ff       	call   c002301c <IDE::prepareInterrupt(unsigned char)>
c002494e:	83 c4 10             	add    esp,0x10
c0024951:	50                   	push   eax
c0024952:	50                   	push   eax
c0024953:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002495a:	50                   	push   eax
c002495b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024961:	e8 ca e6 ff ff       	call   c0023030 <IDE::getBase(unsigned char)>
c0024966:	8d 50 07             	lea    edx,[eax+0x7]
c0024969:	ec                   	in     al,dx
c002496a:	83 c4 10             	add    esp,0x10
c002496d:	a8 88                	test   al,0x88
c002496f:	74 0a                	je     c002497b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024971:	4b                   	dec    ebx
c0024972:	75 dd                	jne    c0024951 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024974:	bb 02 00 00 00       	mov    ebx,0x2
c0024979:	eb 02                	jmp    c002497d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002497b:	31 db                	xor    ebx,ebx
c002497d:	83 c4 1c             	add    esp,0x1c
c0024980:	89 d8                	mov    eax,ebx
c0024982:	5b                   	pop    ebx
c0024983:	5e                   	pop    esi
c0024984:	5f                   	pop    edi
c0024985:	5d                   	pop    ebp
c0024986:	c3                   	ret    
c0024987:	90                   	nop

c0024988 <ATAPI::diskRemoved()>:
c0024988:	83 ec 18             	sub    esp,0x18
c002498b:	68 fd d0 02 c0       	push   0xc002d0fd
c0024990:	e8 d9 e5 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0024995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024999:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00249a0:	83 c4 1c             	add    esp,0x1c
c00249a3:	c3                   	ret    

c00249a4 <ATAPI::eject()>:
c00249a4:	57                   	push   edi
c00249a5:	b9 03 00 00 00       	mov    ecx,0x3
c00249aa:	53                   	push   ebx
c00249ab:	83 ec 14             	sub    esp,0x14
c00249ae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00249b2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00249b6:	fc                   	cld    
c00249b7:	31 c0                	xor    eax,eax
c00249b9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00249bb:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00249c0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00249c5:	50                   	push   eax
c00249c6:	50                   	push   eax
c00249c7:	6a 00                	push   0x0
c00249c9:	6a 00                	push   0x0
c00249cb:	6a 00                	push   0x0
c00249cd:	6a 02                	push   0x2
c00249cf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00249d3:	50                   	push   eax
c00249d4:	53                   	push   ebx
c00249d5:	e8 ee fc ff ff       	call   c00246c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249da:	83 c4 14             	add    esp,0x14
c00249dd:	53                   	push   ebx
c00249de:	e8 a5 ff ff ff       	call   c0024988 <ATAPI::diskRemoved()>
c00249e3:	83 c4 24             	add    esp,0x24
c00249e6:	31 c0                	xor    eax,eax
c00249e8:	5b                   	pop    ebx
c00249e9:	5f                   	pop    edi
c00249ea:	c3                   	ret    
c00249eb:	90                   	nop

c00249ec <ATAPI::diskInserted()>:
c00249ec:	53                   	push   ebx
c00249ed:	83 ec 14             	sub    esp,0x14
c00249f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00249f4:	68 14 d1 02 c0       	push   0xc002d114
c00249f9:	e8 70 e5 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00249fe:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024a05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a08:	e8 13 fe fe ff       	call   c0014820 <PhysicalDisk::startCache()>
c0024a0d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024a11:	83 c4 18             	add    esp,0x18
c0024a14:	5b                   	pop    ebx
c0024a15:	e9 7c 1f ff ff       	jmp    c0016996 <createPartitionsForDisk(PhysicalDisk*)>

c0024a1a <ATAPI::detectMedia()>:
c0024a1a:	56                   	push   esi
c0024a1b:	53                   	push   ebx
c0024a1c:	83 ec 28             	sub    esp,0x28
c0024a1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a23:	6a 0c                	push   0xc
c0024a25:	6a 00                	push   0x0
c0024a27:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024a2b:	56                   	push   esi
c0024a2c:	e8 47 bd fd ff       	call   c0000778 <memset>
c0024a31:	58                   	pop    eax
c0024a32:	5a                   	pop    edx
c0024a33:	6a 00                	push   0x0
c0024a35:	6a 00                	push   0x0
c0024a37:	6a 00                	push   0x0
c0024a39:	6a 00                	push   0x0
c0024a3b:	56                   	push   esi
c0024a3c:	53                   	push   ebx
c0024a3d:	e8 86 fc ff ff       	call   c00246c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a42:	83 c4 1c             	add    esp,0x1c
c0024a45:	6a 0c                	push   0xc
c0024a47:	6a 00                	push   0x0
c0024a49:	56                   	push   esi
c0024a4a:	e8 29 bd fd ff       	call   c0000778 <memset>
c0024a4f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024a54:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024a59:	59                   	pop    ecx
c0024a5a:	58                   	pop    eax
c0024a5b:	6a 01                	push   0x1
c0024a5d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024a61:	50                   	push   eax
c0024a62:	6a 00                	push   0x0
c0024a64:	6a 12                	push   0x12
c0024a66:	56                   	push   esi
c0024a67:	53                   	push   ebx
c0024a68:	e8 5b fc ff ff       	call   c00246c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a6d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024a71:	83 c4 20             	add    esp,0x20
c0024a74:	83 e0 7f             	and    eax,0x7f
c0024a77:	3c 70                	cmp    al,0x70
c0024a79:	74 15                	je     c0024a90 <ATAPI::detectMedia()+0x76>
c0024a7b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a82:	75 0c                	jne    c0024a90 <ATAPI::detectMedia()+0x76>
c0024a84:	83 ec 0c             	sub    esp,0xc
c0024a87:	53                   	push   ebx
c0024a88:	e8 5f ff ff ff       	call   c00249ec <ATAPI::diskInserted()>
c0024a8d:	83 c4 10             	add    esp,0x10
c0024a90:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024a94:	83 e0 0f             	and    eax,0xf
c0024a97:	3c 02                	cmp    al,0x2
c0024a99:	75 1b                	jne    c0024ab6 <ATAPI::detectMedia()+0x9c>
c0024a9b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024aa0:	75 2d                	jne    c0024acf <ATAPI::detectMedia()+0xb5>
c0024aa2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024aa9:	74 24                	je     c0024acf <ATAPI::detectMedia()+0xb5>
c0024aab:	83 ec 0c             	sub    esp,0xc
c0024aae:	53                   	push   ebx
c0024aaf:	e8 d4 fe ff ff       	call   c0024988 <ATAPI::diskRemoved()>
c0024ab4:	eb 16                	jmp    c0024acc <ATAPI::detectMedia()+0xb2>
c0024ab6:	84 c0                	test   al,al
c0024ab8:	75 15                	jne    c0024acf <ATAPI::detectMedia()+0xb5>
c0024aba:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024ac1:	75 0c                	jne    c0024acf <ATAPI::detectMedia()+0xb5>
c0024ac3:	83 ec 0c             	sub    esp,0xc
c0024ac6:	53                   	push   ebx
c0024ac7:	e8 20 ff ff ff       	call   c00249ec <ATAPI::diskInserted()>
c0024acc:	83 c4 10             	add    esp,0x10
c0024acf:	83 c4 24             	add    esp,0x24
c0024ad2:	5b                   	pop    ebx
c0024ad3:	5e                   	pop    esi
c0024ad4:	c3                   	ret    
c0024ad5:	90                   	nop

c0024ad6 <ATAPI::open(int, int, void*)>:
c0024ad6:	53                   	push   ebx
c0024ad7:	83 ec 08             	sub    esp,0x8
c0024ada:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024ade:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024ae2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024ae6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024aec:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024af2:	c1 e0 06             	shl    eax,0x6
c0024af5:	01 d0                	add    eax,edx
c0024af7:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024afe:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024b04:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024b0b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024b15:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024b1b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024b22:	6a 04                	push   0x4
c0024b24:	6a 0c                	push   0xc
c0024b26:	51                   	push   ecx
c0024b27:	52                   	push   edx
c0024b28:	e8 15 e5 ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b2d:	90                   	nop
c0024b2e:	90                   	nop
c0024b2f:	6a 00                	push   0x0
c0024b31:	6a 0c                	push   0xc
c0024b33:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b3a:	50                   	push   eax
c0024b3b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b41:	e8 fc e4 ff ff       	call   c0023042 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b46:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024b4d:	83 c4 14             	add    esp,0x14
c0024b50:	53                   	push   ebx
c0024b51:	e8 c4 fe ff ff       	call   c0024a1a <ATAPI::detectMedia()>
c0024b56:	31 c0                	xor    eax,eax
c0024b58:	83 c4 18             	add    esp,0x18
c0024b5b:	5b                   	pop    ebx
c0024b5c:	c3                   	ret    
c0024b5d:	90                   	nop

c0024b5e <ATAPI::read(unsigned long long, int, void*)>:
c0024b5e:	55                   	push   ebp
c0024b5f:	57                   	push   edi
c0024b60:	56                   	push   esi
c0024b61:	53                   	push   ebx
c0024b62:	83 ec 1c             	sub    esp,0x1c
c0024b65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024b69:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b6d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b71:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b78:	74 41                	je     c0024bbb <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024b7a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b7e:	b9 03 00 00 00       	mov    ecx,0x3
c0024b83:	fc                   	cld    
c0024b84:	31 c0                	xor    eax,eax
c0024b86:	86 fb                	xchg   bl,bh
c0024b88:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b8a:	c1 c3 10             	rol    ebx,0x10
c0024b8d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024b92:	89 e8                	mov    eax,ebp
c0024b94:	86 fb                	xchg   bl,bh
c0024b96:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b9a:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b9e:	50                   	push   eax
c0024b9f:	50                   	push   eax
c0024ba0:	55                   	push   ebp
c0024ba1:	c1 e5 0b             	shl    ebp,0xb
c0024ba4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024ba8:	6a 00                	push   0x0
c0024baa:	55                   	push   ebp
c0024bab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024baf:	50                   	push   eax
c0024bb0:	56                   	push   esi
c0024bb1:	e8 12 fb ff ff       	call   c00246c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024bb6:	83 c4 20             	add    esp,0x20
c0024bb9:	eb 1a                	jmp    c0024bd5 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024bbb:	83 ec 0c             	sub    esp,0xc
c0024bbe:	56                   	push   esi
c0024bbf:	e8 56 fe ff ff       	call   c0024a1a <ATAPI::detectMedia()>
c0024bc4:	83 c4 10             	add    esp,0x10
c0024bc7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024bce:	75 aa                	jne    c0024b7a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024bd0:	b8 02 00 00 00       	mov    eax,0x2
c0024bd5:	83 c4 1c             	add    esp,0x1c
c0024bd8:	5b                   	pop    ebx
c0024bd9:	5e                   	pop    esi
c0024bda:	5f                   	pop    edi
c0024bdb:	5d                   	pop    ebp
c0024bdc:	c3                   	ret    
c0024bdd:	90                   	nop

c0024bde <SATA::close(int, int, void*)>:
c0024bde:	83 ec 0c             	sub    esp,0xc
c0024be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024be5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024beb:	85 c0                	test   eax,eax
c0024bed:	74 0c                	je     c0024bfb <SATA::close(int, int, void*)+0x1d>
c0024bef:	83 ec 0c             	sub    esp,0xc
c0024bf2:	8b 10                	mov    edx,DWORD PTR [eax]
c0024bf4:	50                   	push   eax
c0024bf5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024bf8:	83 c4 10             	add    esp,0x10
c0024bfb:	31 c0                	xor    eax,eax
c0024bfd:	83 c4 0c             	add    esp,0xc
c0024c00:	c3                   	ret    
c0024c01:	90                   	nop

c0024c02 <SATA::powerSaving(PowerSavingLevel)>:
c0024c02:	c3                   	ret    
c0024c03:	90                   	nop

c0024c04 <SATA::open(int, int, void*)>:
c0024c04:	56                   	push   esi
c0024c05:	53                   	push   ebx
c0024c06:	50                   	push   eax
c0024c07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c0f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024c19:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024c1f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024c29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c2d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024c37:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024c3d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024c44:	e8 99 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024c49:	89 c6                	mov    esi,eax
c0024c4b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024c51:	81 c6 00 10 00 00    	add    esi,0x1000
c0024c57:	e8 86 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024c5c:	39 c6                	cmp    esi,eax
c0024c5e:	74 10                	je     c0024c70 <SATA::open(int, int, void*)+0x6c>
c0024c60:	83 ec 0c             	sub    esp,0xc
c0024c63:	68 3c d0 02 c0       	push   0xc002d03c
c0024c68:	e8 a2 59 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0024c6d:	83 c4 10             	add    esp,0x10
c0024c70:	83 ec 0c             	sub    esp,0xc
c0024c73:	6a 02                	push   0x2
c0024c75:	e8 11 cf fe ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0024c7a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c80:	e8 a1 d1 fe ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0024c85:	6a 03                	push   0x3
c0024c87:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024c8d:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024c93:	50                   	push   eax
c0024c94:	e8 c9 d6 fe ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024c99:	83 c4 14             	add    esp,0x14
c0024c9c:	53                   	push   ebx
c0024c9d:	e8 7e fb fe ff       	call   c0014820 <PhysicalDisk::startCache()>
c0024ca2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024ca5:	e8 ec 1c ff ff       	call   c0016996 <createPartitionsForDisk(PhysicalDisk*)>
c0024caa:	83 c4 14             	add    esp,0x14
c0024cad:	31 c0                	xor    eax,eax
c0024caf:	5b                   	pop    ebx
c0024cb0:	5e                   	pop    esi
c0024cb1:	c3                   	ret    

c0024cb2 <SATA::SATA()>:
c0024cb2:	83 ec 0c             	sub    esp,0xc
c0024cb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cb9:	83 ec 04             	sub    esp,0x4
c0024cbc:	68 00 02 00 00       	push   0x200
c0024cc1:	68 50 d0 02 c0       	push   0xc002d050
c0024cc6:	50                   	push   eax
c0024cc7:	e8 ec fa fe ff       	call   c00147b8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024ccc:	83 c4 10             	add    esp,0x10
c0024ccf:	ba c0 d0 02 c0       	mov    edx,0xc002d0c0
c0024cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cd8:	89 10                	mov    DWORD PTR [eax],edx
c0024cda:	90                   	nop
c0024cdb:	83 c4 0c             	add    esp,0xc
c0024cde:	c3                   	ret    
c0024cdf:	90                   	nop

c0024ce0 <SATA::access(unsigned long long, int, void*, bool)>:
c0024ce0:	55                   	push   ebp
c0024ce1:	57                   	push   edi
c0024ce2:	56                   	push   esi
c0024ce3:	53                   	push   ebx
c0024ce4:	83 ec 2c             	sub    esp,0x2c
c0024ce7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024ceb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024cef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024cf3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024cf7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024cfb:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024d00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024d04:	7e 10                	jle    c0024d16 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024d06:	83 ec 0c             	sub    esp,0xc
c0024d09:	68 60 d0 02 c0       	push   0xc002d060
c0024d0e:	e8 fc 58 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0024d13:	83 c4 10             	add    esp,0x10
c0024d16:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024d1c:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024d22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d2c:	89 f0                	mov    eax,esi
c0024d2e:	c1 e0 07             	shl    eax,0x7
c0024d31:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d35:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d3f:	53                   	push   ebx
c0024d40:	8d 46 02             	lea    eax,[esi+0x2]
c0024d43:	53                   	push   ebx
c0024d44:	c1 e0 07             	shl    eax,0x7
c0024d47:	bb 01 00 00 00       	mov    ebx,0x1
c0024d4c:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024d50:	50                   	push   eax
c0024d51:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024d57:	e8 aa ef ff ff       	call   c0023d06 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024d60:	83 c4 10             	add    esp,0x10
c0024d63:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024d68:	0f 84 ce 01 00 00    	je     c0024f3c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d6e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d72:	c1 e0 09             	shl    eax,0x9
c0024d75:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d7e:	74 17                	je     c0024d97 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024d80:	51                   	push   ecx
c0024d81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d85:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024d89:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d8f:	e8 b0 b9 fd ff       	call   c0000744 <memcpy>
c0024d94:	83 c4 10             	add    esp,0x10
c0024d97:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d9d:	8d 46 02             	lea    eax,[esi+0x2]
c0024da0:	c1 e0 07             	shl    eax,0x7
c0024da3:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024da7:	8b 00                	mov    eax,DWORD PTR [eax]
c0024da9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024daf:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024db5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024db9:	c1 e1 05             	shl    ecx,0x5
c0024dbc:	01 c8                	add    eax,ecx
c0024dbe:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024dc2:	8a 18                	mov    bl,BYTE PTR [eax]
c0024dc4:	83 e1 01             	and    ecx,0x1
c0024dc7:	83 e3 bf             	and    ebx,0xffffffbf
c0024dca:	c1 e1 06             	shl    ecx,0x6
c0024dcd:	09 d9                	or     ecx,ebx
c0024dcf:	88 08                	mov    BYTE PTR [eax],cl
c0024dd1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024dd3:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024dd9:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024ddf:	89 08                	mov    DWORD PTR [eax],ecx
c0024de1:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024de7:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024ded:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024df3:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024df6:	52                   	push   edx
c0024df7:	68 90 00 00 00       	push   0x90
c0024dfc:	6a 00                	push   0x0
c0024dfe:	53                   	push   ebx
c0024dff:	e8 74 b9 fd ff       	call   c0000778 <memset>
c0024e04:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024e0a:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024e0e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024e14:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024e18:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024e1c:	83 c4 10             	add    esp,0x10
c0024e1f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024e22:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024e28:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024e2e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024e33:	09 c8                	or     eax,ecx
c0024e35:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e3b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e3e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024e45:	66 25 00 7f          	and    ax,0x7f00
c0024e49:	66 0d 27 80          	or     ax,0x8027
c0024e4d:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024e52:	66 89 03             	mov    WORD PTR [ebx],ax
c0024e55:	19 c0                	sbb    eax,eax
c0024e57:	83 e0 f0             	and    eax,0xfffffff0
c0024e5a:	83 c0 35             	add    eax,0x35
c0024e5d:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024e60:	89 f8                	mov    eax,edi
c0024e62:	c1 e8 10             	shr    eax,0x10
c0024e65:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e68:	89 f8                	mov    eax,edi
c0024e6a:	c1 e8 18             	shr    eax,0x18
c0024e6d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024e70:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e74:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e7b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e7e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e82:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e86:	89 f3                	mov    ebx,esi
c0024e88:	31 c0                	xor    eax,eax
c0024e8a:	c1 e3 07             	shl    ebx,0x7
c0024e8d:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024e91:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024e97:	80 e1 88             	and    cl,0x88
c0024e9a:	74 0a                	je     c0024ea6 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024e9c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ea1:	74 0a                	je     c0024ead <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024ea3:	40                   	inc    eax
c0024ea4:	eb eb                	jmp    c0024e91 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024ea6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024eab:	75 0a                	jne    c0024eb7 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024ead:	83 ec 0c             	sub    esp,0xc
c0024eb0:	68 99 d0 02 c0       	push   0xc002d099
c0024eb5:	eb 56                	jmp    c0024f0d <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024eb7:	b8 01 00 00 00       	mov    eax,0x1
c0024ebc:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024ec0:	c1 e6 07             	shl    esi,0x7
c0024ec3:	d3 e0                	shl    eax,cl
c0024ec5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024ec9:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024ecf:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024ed5:	85 c8                	test   eax,ecx
c0024ed7:	74 20                	je     c0024ef9 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024ed9:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024edf:	0f ba e1 1e          	bt     ecx,0x1e
c0024ee3:	73 ea                	jae    c0024ecf <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024ee5:	83 ec 0c             	sub    esp,0xc
c0024ee8:	31 db                	xor    ebx,ebx
c0024eea:	68 a7 d0 02 c0       	push   0xc002d0a7
c0024eef:	e8 1b 57 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0024ef4:	83 c4 10             	add    esp,0x10
c0024ef7:	eb 43                	jmp    c0024f3c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ef9:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024eff:	0f ba e0 1e          	bt     eax,0x1e
c0024f03:	73 17                	jae    c0024f1c <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024f05:	83 ec 0c             	sub    esp,0xc
c0024f08:	68 a7 d0 02 c0       	push   0xc002d0a7
c0024f0d:	e8 fd 56 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0024f12:	bb 01 00 00 00       	mov    ebx,0x1
c0024f17:	83 c4 10             	add    esp,0x10
c0024f1a:	eb 20                	jmp    c0024f3c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f1c:	31 db                	xor    ebx,ebx
c0024f1e:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024f23:	75 17                	jne    c0024f3c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f25:	50                   	push   eax
c0024f26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f2a:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024f30:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024f34:	e8 0b b8 fd ff       	call   c0000744 <memcpy>
c0024f39:	83 c4 10             	add    esp,0x10
c0024f3c:	83 c4 2c             	add    esp,0x2c
c0024f3f:	89 d8                	mov    eax,ebx
c0024f41:	5b                   	pop    ebx
c0024f42:	5e                   	pop    esi
c0024f43:	5f                   	pop    edi
c0024f44:	5d                   	pop    ebp
c0024f45:	c3                   	ret    

c0024f46 <SATA::read(unsigned long long, int, void*)>:
c0024f46:	57                   	push   edi
c0024f47:	b8 04 00 00 00       	mov    eax,0x4
c0024f4c:	56                   	push   esi
c0024f4d:	53                   	push   ebx
c0024f4e:	83 ec 10             	sub    esp,0x10
c0024f51:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f55:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024f59:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f5c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f60:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f64:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f6a:	77 3b                	ja     c0024fa7 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f6c:	b8 06 00 00 00       	mov    eax,0x6
c0024f71:	85 d2                	test   edx,edx
c0024f73:	74 32                	je     c0024fa7 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f75:	50                   	push   eax
c0024f76:	50                   	push   eax
c0024f77:	6a 00                	push   0x0
c0024f79:	52                   	push   edx
c0024f7a:	53                   	push   ebx
c0024f7b:	57                   	push   edi
c0024f7c:	56                   	push   esi
c0024f7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f81:	e8 5a fd ff ff       	call   c0024ce0 <SATA::access(unsigned long long, int, void*, bool)>
c0024f86:	83 c4 20             	add    esp,0x20
c0024f89:	85 c0                	test   eax,eax
c0024f8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f8f:	75 11                	jne    c0024fa2 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024f91:	01 1d 48 29 03 c0    	add    DWORD PTR ds:0xc0032948,ebx
c0024f97:	e8 44 ba fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c0024f9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024fa0:	eb 05                	jmp    c0024fa7 <SATA::read(unsigned long long, int, void*)+0x61>
c0024fa2:	b8 01 00 00 00       	mov    eax,0x1
c0024fa7:	83 c4 10             	add    esp,0x10
c0024faa:	5b                   	pop    ebx
c0024fab:	5e                   	pop    esi
c0024fac:	5f                   	pop    edi
c0024fad:	c3                   	ret    

c0024fae <SATA::write(unsigned long long, int, void*)>:
c0024fae:	55                   	push   ebp
c0024faf:	b8 04 00 00 00       	mov    eax,0x4
c0024fb4:	57                   	push   edi
c0024fb5:	56                   	push   esi
c0024fb6:	53                   	push   ebx
c0024fb7:	83 ec 1c             	sub    esp,0x1c
c0024fba:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024fbe:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024fc2:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024fc5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024fc9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024fcd:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024fd3:	77 56                	ja     c002502b <SATA::write(unsigned long long, int, void*)+0x7d>
c0024fd5:	b8 06 00 00 00       	mov    eax,0x6
c0024fda:	85 ff                	test   edi,edi
c0024fdc:	74 4d                	je     c002502b <SATA::write(unsigned long long, int, void*)+0x7d>
c0024fde:	89 ee                	mov    esi,ebp
c0024fe0:	c1 e6 09             	shl    esi,0x9
c0024fe3:	01 fe                	add    esi,edi
c0024fe5:	89 c8                	mov    eax,ecx
c0024fe7:	89 da                	mov    edx,ebx
c0024fe9:	83 c0 01             	add    eax,0x1
c0024fec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024ff0:	83 d2 00             	adc    edx,0x0
c0024ff3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024ff7:	50                   	push   eax
c0024ff8:	50                   	push   eax
c0024ff9:	6a 01                	push   0x1
c0024ffb:	57                   	push   edi
c0024ffc:	81 c7 00 02 00 00    	add    edi,0x200
c0025002:	6a 01                	push   0x1
c0025004:	53                   	push   ebx
c0025005:	51                   	push   ecx
c0025006:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002500a:	e8 d1 fc ff ff       	call   c0024ce0 <SATA::access(unsigned long long, int, void*, bool)>
c002500f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025013:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025017:	83 c4 20             	add    esp,0x20
c002501a:	39 f7                	cmp    edi,esi
c002501c:	75 c7                	jne    c0024fe5 <SATA::write(unsigned long long, int, void*)+0x37>
c002501e:	01 2d 44 29 03 c0    	add    DWORD PTR ds:0xc0032944,ebp
c0025024:	e8 b7 b9 fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c0025029:	31 c0                	xor    eax,eax
c002502b:	83 c4 1c             	add    esp,0x1c
c002502e:	5b                   	pop    ebx
c002502f:	5e                   	pop    esi
c0025030:	5f                   	pop    edi
c0025031:	5d                   	pop    ebp
c0025032:	c3                   	ret    
c0025033:	90                   	nop

c0025034 <SATAPI::write(unsigned long long, int, void*)>:
c0025034:	b8 03 00 00 00       	mov    eax,0x3
c0025039:	c3                   	ret    

c002503a <SATAPI::close(int, int, void*)>:
c002503a:	83 ec 0c             	sub    esp,0xc
c002503d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025041:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025047:	85 c0                	test   eax,eax
c0025049:	74 0c                	je     c0025057 <SATAPI::close(int, int, void*)+0x1d>
c002504b:	83 ec 0c             	sub    esp,0xc
c002504e:	8b 10                	mov    edx,DWORD PTR [eax]
c0025050:	50                   	push   eax
c0025051:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025054:	83 c4 10             	add    esp,0x10
c0025057:	31 c0                	xor    eax,eax
c0025059:	83 c4 0c             	add    esp,0xc
c002505c:	c3                   	ret    
c002505d:	90                   	nop

c002505e <SATAPI::SATAPI()>:
c002505e:	83 ec 0c             	sub    esp,0xc
c0025061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025065:	83 ec 04             	sub    esp,0x4
c0025068:	68 00 08 00 00       	push   0x800
c002506d:	68 f0 d0 02 c0       	push   0xc002d0f0
c0025072:	50                   	push   eax
c0025073:	e8 40 f7 fe ff       	call   c00147b8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	ba 9c d1 02 c0       	mov    edx,0xc002d19c
c0025080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025084:	89 10                	mov    DWORD PTR [eax],edx
c0025086:	90                   	nop
c0025087:	83 c4 0c             	add    esp,0xc
c002508a:	c3                   	ret    
c002508b:	90                   	nop

c002508c <SATAPI::diskRemoved()>:
c002508c:	83 ec 18             	sub    esp,0x18
c002508f:	68 fc d0 02 c0       	push   0xc002d0fc
c0025094:	e8 d5 de fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0025099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002509d:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00250a4:	83 c4 1c             	add    esp,0x1c
c00250a7:	c3                   	ret    

c00250a8 <SATAPI::diskInserted()>:
c00250a8:	53                   	push   ebx
c00250a9:	83 ec 14             	sub    esp,0x14
c00250ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00250b0:	68 13 d1 02 c0       	push   0xc002d113
c00250b5:	e8 b4 de fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c00250ba:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00250c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00250c4:	e8 57 f7 fe ff       	call   c0014820 <PhysicalDisk::startCache()>
c00250c9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00250cd:	83 c4 18             	add    esp,0x18
c00250d0:	5b                   	pop    ebx
c00250d1:	e9 c0 18 ff ff       	jmp    c0016996 <createPartitionsForDisk(PhysicalDisk*)>

c00250d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00250d6:	55                   	push   ebp
c00250d7:	57                   	push   edi
c00250d8:	56                   	push   esi
c00250d9:	53                   	push   ebx
c00250da:	83 ec 24             	sub    esp,0x24
c00250dd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00250e1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00250e5:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c00250eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250ef:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00250f3:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c00250f9:	8d 5f 02             	lea    ebx,[edi+0x2]
c00250fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025102:	c1 e3 07             	shl    ebx,0x7
c0025105:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025109:	89 f8                	mov    eax,edi
c002510b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002510f:	c1 e0 07             	shl    eax,0x7
c0025112:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025116:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002511a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025124:	53                   	push   ebx
c0025125:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c002512b:	e8 d6 eb ff ff       	call   c0023d06 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025130:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025134:	83 c4 10             	add    esp,0x10
c0025137:	b8 01 00 00 00       	mov    eax,0x1
c002513c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025141:	0f 84 8a 01 00 00    	je     c00252d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025147:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002514d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002514f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025155:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002515b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002515f:	c1 e1 05             	shl    ecx,0x5
c0025162:	01 c8                	add    eax,ecx
c0025164:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025166:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002516c:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025172:	89 08                	mov    DWORD PTR [eax],ecx
c0025174:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002517a:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025180:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025186:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025189:	52                   	push   edx
c002518a:	68 90 00 00 00       	push   0x90
c002518f:	6a 00                	push   0x0
c0025191:	53                   	push   ebx
c0025192:	e8 e1 b5 fd ff       	call   c0000778 <memset>
c0025197:	83 c4 0c             	add    esp,0xc
c002519a:	8d 43 40             	lea    eax,[ebx+0x40]
c002519d:	6a 0c                	push   0xc
c002519f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00251a3:	50                   	push   eax
c00251a4:	e8 9b b5 fd ff       	call   c0000744 <memcpy>
c00251a9:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c00251af:	89 ea                	mov    edx,ebp
c00251b1:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00251b7:	c1 ea 18             	shr    edx,0x18
c00251ba:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00251be:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00251c1:	8d 48 ff             	lea    ecx,[eax-0x1]
c00251c4:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00251c8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00251ce:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00251d4:	25 00 00 c0 ff       	and    eax,0xffc00000
c00251d9:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c00251dd:	09 c8                	or     eax,ecx
c00251df:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00251e3:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00251e9:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00251ec:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00251f3:	66 25 00 7f          	and    ax,0x7f00
c00251f7:	66 0d 27 80          	or     ax,0x8027
c00251fb:	66 89 03             	mov    WORD PTR [ebx],ax
c00251fe:	89 e8                	mov    eax,ebp
c0025200:	c1 e8 10             	shr    eax,0x10
c0025203:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025206:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002520a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002520d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025211:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025214:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025218:	83 c4 10             	add    esp,0x10
c002521b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002521f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025223:	31 c0                	xor    eax,eax
c0025225:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002522b:	80 e1 88             	and    cl,0x88
c002522e:	74 0a                	je     c002523a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025230:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025235:	74 0a                	je     c0025241 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025237:	40                   	inc    eax
c0025238:	eb eb                	jmp    c0025225 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c002523a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002523f:	75 0f                	jne    c0025250 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025241:	83 ec 0c             	sub    esp,0xc
c0025244:	68 99 d0 02 c0       	push   0xc002d099
c0025249:	e8 c1 53 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c002524e:	eb 3a                	jmp    c002528a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0025250:	b8 01 00 00 00       	mov    eax,0x1
c0025255:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0025259:	c1 e7 07             	shl    edi,0x7
c002525c:	d3 e0                	shl    eax,cl
c002525e:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025261:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025267:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c002526d:	85 d0                	test   eax,edx
c002526f:	74 23                	je     c0025294 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025271:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025277:	0f ba e2 1e          	bt     edx,0x1e
c002527b:	73 ea                	jae    c0025267 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c002527d:	83 ec 0c             	sub    esp,0xc
c0025280:	68 2b d1 02 c0       	push   0xc002d12b
c0025285:	e8 e4 dc fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c002528a:	83 c4 10             	add    esp,0x10
c002528d:	b8 01 00 00 00       	mov    eax,0x1
c0025292:	eb 3d                	jmp    c00252d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025294:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002529a:	0f ba e0 1e          	bt     eax,0x1e
c002529e:	73 0a                	jae    c00252aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c00252a0:	83 ec 0c             	sub    esp,0xc
c00252a3:	68 3e d1 02 c0       	push   0xc002d13e
c00252a8:	eb db                	jmp    c0025285 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c00252aa:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00252af:	74 1e                	je     c00252cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00252b1:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00252b6:	74 17                	je     c00252cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00252b8:	50                   	push   eax
c00252b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00252bd:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c00252c3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00252c7:	e8 78 b4 fd ff       	call   c0000744 <memcpy>
c00252cc:	83 c4 10             	add    esp,0x10
c00252cf:	31 c0                	xor    eax,eax
c00252d1:	83 c4 1c             	add    esp,0x1c
c00252d4:	5b                   	pop    ebx
c00252d5:	5e                   	pop    esi
c00252d6:	5f                   	pop    edi
c00252d7:	5d                   	pop    ebp
c00252d8:	c3                   	ret    
c00252d9:	90                   	nop

c00252da <SATAPI::eject()>:
c00252da:	57                   	push   edi
c00252db:	b9 03 00 00 00       	mov    ecx,0x3
c00252e0:	53                   	push   ebx
c00252e1:	83 ec 14             	sub    esp,0x14
c00252e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00252e8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00252ec:	fc                   	cld    
c00252ed:	31 c0                	xor    eax,eax
c00252ef:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00252f1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00252f6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00252fb:	50                   	push   eax
c00252fc:	6a 00                	push   0x0
c00252fe:	6a 00                	push   0x0
c0025300:	6a 00                	push   0x0
c0025302:	6a 00                	push   0x0
c0025304:	6a 02                	push   0x2
c0025306:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002530a:	50                   	push   eax
c002530b:	53                   	push   ebx
c002530c:	e8 c5 fd ff ff       	call   c00250d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025311:	83 c4 14             	add    esp,0x14
c0025314:	53                   	push   ebx
c0025315:	e8 72 fd ff ff       	call   c002508c <SATAPI::diskRemoved()>
c002531a:	83 c4 24             	add    esp,0x24
c002531d:	31 c0                	xor    eax,eax
c002531f:	5b                   	pop    ebx
c0025320:	5f                   	pop    edi
c0025321:	c3                   	ret    

c0025322 <SATAPI::detectMedia()>:
c0025322:	56                   	push   esi
c0025323:	53                   	push   ebx
c0025324:	83 ec 28             	sub    esp,0x28
c0025327:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002532b:	6a 0c                	push   0xc
c002532d:	6a 00                	push   0x0
c002532f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025333:	56                   	push   esi
c0025334:	e8 3f b4 fd ff       	call   c0000778 <memset>
c0025339:	83 c4 0c             	add    esp,0xc
c002533c:	6a 00                	push   0x0
c002533e:	6a 00                	push   0x0
c0025340:	6a 00                	push   0x0
c0025342:	6a 00                	push   0x0
c0025344:	6a 00                	push   0x0
c0025346:	56                   	push   esi
c0025347:	53                   	push   ebx
c0025348:	e8 89 fd ff ff       	call   c00250d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002534d:	83 c4 1c             	add    esp,0x1c
c0025350:	6a 0c                	push   0xc
c0025352:	6a 00                	push   0x0
c0025354:	56                   	push   esi
c0025355:	e8 1e b4 fd ff       	call   c0000778 <memset>
c002535a:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002535f:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025364:	83 c4 0c             	add    esp,0xc
c0025367:	6a 01                	push   0x1
c0025369:	8d 44 24 16          	lea    eax,[esp+0x16]
c002536d:	50                   	push   eax
c002536e:	6a 00                	push   0x0
c0025370:	6a 00                	push   0x0
c0025372:	6a 12                	push   0x12
c0025374:	56                   	push   esi
c0025375:	53                   	push   ebx
c0025376:	e8 5b fd ff ff       	call   c00250d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002537b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002537f:	83 c4 20             	add    esp,0x20
c0025382:	83 e0 7f             	and    eax,0x7f
c0025385:	3c 70                	cmp    al,0x70
c0025387:	74 15                	je     c002539e <SATAPI::detectMedia()+0x7c>
c0025389:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025390:	75 0c                	jne    c002539e <SATAPI::detectMedia()+0x7c>
c0025392:	83 ec 0c             	sub    esp,0xc
c0025395:	53                   	push   ebx
c0025396:	e8 0d fd ff ff       	call   c00250a8 <SATAPI::diskInserted()>
c002539b:	83 c4 10             	add    esp,0x10
c002539e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00253a2:	83 e0 0f             	and    eax,0xf
c00253a5:	3c 02                	cmp    al,0x2
c00253a7:	75 1b                	jne    c00253c4 <SATAPI::detectMedia()+0xa2>
c00253a9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00253ae:	75 2d                	jne    c00253dd <SATAPI::detectMedia()+0xbb>
c00253b0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253b7:	74 24                	je     c00253dd <SATAPI::detectMedia()+0xbb>
c00253b9:	83 ec 0c             	sub    esp,0xc
c00253bc:	53                   	push   ebx
c00253bd:	e8 ca fc ff ff       	call   c002508c <SATAPI::diskRemoved()>
c00253c2:	eb 16                	jmp    c00253da <SATAPI::detectMedia()+0xb8>
c00253c4:	84 c0                	test   al,al
c00253c6:	75 15                	jne    c00253dd <SATAPI::detectMedia()+0xbb>
c00253c8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253cf:	75 0c                	jne    c00253dd <SATAPI::detectMedia()+0xbb>
c00253d1:	83 ec 0c             	sub    esp,0xc
c00253d4:	53                   	push   ebx
c00253d5:	e8 ce fc ff ff       	call   c00250a8 <SATAPI::diskInserted()>
c00253da:	83 c4 10             	add    esp,0x10
c00253dd:	83 c4 24             	add    esp,0x24
c00253e0:	5b                   	pop    ebx
c00253e1:	5e                   	pop    esi
c00253e2:	c3                   	ret    
c00253e3:	90                   	nop

c00253e4 <SATAPI::open(int, int, void*)>:
c00253e4:	56                   	push   esi
c00253e5:	53                   	push   ebx
c00253e6:	50                   	push   eax
c00253e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00253ef:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00253f9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253ff:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025409:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002540d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025417:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002541d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025424:	e8 b9 aa fe ff       	call   c000fee2 <Phys::allocatePage()>
c0025429:	89 c6                	mov    esi,eax
c002542b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025431:	81 c6 00 10 00 00    	add    esi,0x1000
c0025437:	e8 a6 aa fe ff       	call   c000fee2 <Phys::allocatePage()>
c002543c:	39 c6                	cmp    esi,eax
c002543e:	74 10                	je     c0025450 <SATAPI::open(int, int, void*)+0x6c>
c0025440:	83 ec 0c             	sub    esp,0xc
c0025443:	68 53 d1 02 c0       	push   0xc002d153
c0025448:	e8 c2 51 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c002544d:	83 c4 10             	add    esp,0x10
c0025450:	83 ec 0c             	sub    esp,0xc
c0025453:	6a 02                	push   0x2
c0025455:	e8 31 c7 fe ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c002545a:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025460:	e8 c1 c9 fe ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0025465:	6a 03                	push   0x3
c0025467:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002546d:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025473:	50                   	push   eax
c0025474:	e8 e9 ce fe ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025479:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025480:	83 c4 14             	add    esp,0x14
c0025483:	53                   	push   ebx
c0025484:	e8 99 fe ff ff       	call   c0025322 <SATAPI::detectMedia()>
c0025489:	83 c4 14             	add    esp,0x14
c002548c:	31 c0                	xor    eax,eax
c002548e:	5b                   	pop    ebx
c002548f:	5e                   	pop    esi
c0025490:	c3                   	ret    
c0025491:	90                   	nop

c0025492 <SATAPI::read(unsigned long long, int, void*)>:
c0025492:	55                   	push   ebp
c0025493:	57                   	push   edi
c0025494:	56                   	push   esi
c0025495:	53                   	push   ebx
c0025496:	83 ec 1c             	sub    esp,0x1c
c0025499:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002549d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00254a1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00254a5:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00254ac:	74 19                	je     c00254c7 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00254ae:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00254b3:	7e 2e                	jle    c00254e3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00254b5:	83 ec 0c             	sub    esp,0xc
c00254b8:	68 69 d1 02 c0       	push   0xc002d169
c00254bd:	e8 4d 51 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c00254c2:	83 c4 10             	add    esp,0x10
c00254c5:	eb 1c                	jmp    c00254e3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00254c7:	83 ec 0c             	sub    esp,0xc
c00254ca:	55                   	push   ebp
c00254cb:	e8 52 fe ff ff       	call   c0025322 <SATAPI::detectMedia()>
c00254d0:	83 c4 10             	add    esp,0x10
c00254d3:	b8 02 00 00 00       	mov    eax,0x2
c00254d8:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00254df:	75 cd                	jne    c00254ae <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00254e1:	eb 49                	jmp    c002552c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00254e3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00254e7:	b9 03 00 00 00       	mov    ecx,0x3
c00254ec:	fc                   	cld    
c00254ed:	31 c0                	xor    eax,eax
c00254ef:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00254f1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00254f6:	89 d8                	mov    eax,ebx
c00254f8:	86 e0                	xchg   al,ah
c00254fa:	c1 c0 10             	rol    eax,0x10
c00254fd:	86 e0                	xchg   al,ah
c00254ff:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025503:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025507:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002550b:	50                   	push   eax
c002550c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025510:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025514:	56                   	push   esi
c0025515:	53                   	push   ebx
c0025516:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002551a:	c1 e0 0b             	shl    eax,0xb
c002551d:	50                   	push   eax
c002551e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025522:	50                   	push   eax
c0025523:	55                   	push   ebp
c0025524:	e8 ad fb ff ff       	call   c00250d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025529:	83 c4 20             	add    esp,0x20
c002552c:	83 c4 1c             	add    esp,0x1c
c002552f:	5b                   	pop    ebx
c0025530:	5e                   	pop    esi
c0025531:	5f                   	pop    edi
c0025532:	5d                   	pop    ebp
c0025533:	c3                   	ret    

c0025534 <AVX::open(int, int, void*)>:
c0025534:	83 ec 0c             	sub    esp,0xc
c0025537:	e8 3c 11 00 00       	call   c0026678 <avxInit>
c002553c:	b8 00 00 00 00       	mov    eax,0x0
c0025541:	83 c4 0c             	add    esp,0xc
c0025544:	c3                   	ret    
c0025545:	90                   	nop

c0025546 <AVX::close(int, int, void*)>:
c0025546:	83 ec 0c             	sub    esp,0xc
c0025549:	e8 2b 11 00 00       	call   c0026679 <avxClose>
c002554e:	b8 00 00 00 00       	mov    eax,0x0
c0025553:	83 c4 0c             	add    esp,0xc
c0025556:	c3                   	ret    
c0025557:	90                   	nop

c0025558 <AVX::available()>:
c0025558:	83 ec 0c             	sub    esp,0xc
c002555b:	e8 10 11 00 00       	call   c0026670 <avxDetect>
c0025560:	85 c0                	test   eax,eax
c0025562:	0f 95 c0             	setne  al
c0025565:	83 c4 0c             	add    esp,0xc
c0025568:	c3                   	ret    
c0025569:	90                   	nop

c002556a <AVX::save(void*)>:
c002556a:	83 ec 0c             	sub    esp,0xc
c002556d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025571:	83 ec 0c             	sub    esp,0xc
c0025574:	50                   	push   eax
c0025575:	e8 fc 10 00 00       	call   c0026676 <avxSave>
c002557a:	83 c4 10             	add    esp,0x10
c002557d:	90                   	nop
c002557e:	83 c4 0c             	add    esp,0xc
c0025581:	c3                   	ret    

c0025582 <AVX::load(void*)>:
c0025582:	83 ec 0c             	sub    esp,0xc
c0025585:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025589:	83 ec 0c             	sub    esp,0xc
c002558c:	50                   	push   eax
c002558d:	e8 e5 10 00 00       	call   c0026677 <avxLoad>
c0025592:	83 c4 10             	add    esp,0x10
c0025595:	90                   	nop
c0025596:	83 c4 0c             	add    esp,0xc
c0025599:	c3                   	ret    

c002559a <AVX::AVX()>:
c002559a:	83 ec 0c             	sub    esp,0xc
c002559d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255a1:	83 ec 08             	sub    esp,0x8
c00255a4:	68 cc d1 02 c0       	push   0xc002d1cc
c00255a9:	50                   	push   eax
c00255aa:	e8 e7 f2 fe ff       	call   c0014896 <FPU::FPU(char const*)>
c00255af:	83 c4 10             	add    esp,0x10
c00255b2:	ba dc d1 02 c0       	mov    edx,0xc002d1dc
c00255b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255bb:	89 10                	mov    DWORD PTR [eax],edx
c00255bd:	90                   	nop
c00255be:	83 c4 0c             	add    esp,0xc
c00255c1:	c3                   	ret    

c00255c2 <MMX::available()>:
c00255c2:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00255c7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00255cd:	83 e0 20             	and    eax,0x20
c00255d0:	84 c0                	test   al,al
c00255d2:	0f 95 c0             	setne  al
c00255d5:	c3                   	ret    

c00255d6 <MMX::open(int, int, void*)>:
c00255d6:	83 ec 0c             	sub    esp,0xc
c00255d9:	e8 1e 11 00 00       	call   c00266fc <x87Init>
c00255de:	b8 00 00 00 00       	mov    eax,0x0
c00255e3:	83 c4 0c             	add    esp,0xc
c00255e6:	c3                   	ret    
c00255e7:	90                   	nop

c00255e8 <MMX::close(int, int, void*)>:
c00255e8:	83 ec 0c             	sub    esp,0xc
c00255eb:	e8 26 11 00 00       	call   c0026716 <x87Close>
c00255f0:	b8 00 00 00 00       	mov    eax,0x0
c00255f5:	83 c4 0c             	add    esp,0xc
c00255f8:	c3                   	ret    
c00255f9:	90                   	nop

c00255fa <MMX::save(void*)>:
c00255fa:	83 ec 0c             	sub    esp,0xc
c00255fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025601:	83 ec 0c             	sub    esp,0xc
c0025604:	50                   	push   eax
c0025605:	e8 e7 10 00 00       	call   c00266f1 <x87Save>
c002560a:	83 c4 10             	add    esp,0x10
c002560d:	90                   	nop
c002560e:	83 c4 0c             	add    esp,0xc
c0025611:	c3                   	ret    

c0025612 <MMX::load(void*)>:
c0025612:	83 ec 0c             	sub    esp,0xc
c0025615:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025619:	83 ec 0c             	sub    esp,0xc
c002561c:	50                   	push   eax
c002561d:	e8 d5 10 00 00       	call   c00266f7 <x87Load>
c0025622:	83 c4 10             	add    esp,0x10
c0025625:	90                   	nop
c0025626:	83 c4 0c             	add    esp,0xc
c0025629:	c3                   	ret    

c002562a <MMX::MMX()>:
c002562a:	83 ec 0c             	sub    esp,0xc
c002562d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025631:	83 ec 08             	sub    esp,0x8
c0025634:	68 0c d2 02 c0       	push   0xc002d20c
c0025639:	50                   	push   eax
c002563a:	e8 57 f2 fe ff       	call   c0014896 <FPU::FPU(char const*)>
c002563f:	83 c4 10             	add    esp,0x10
c0025642:	ba 1c d2 02 c0       	mov    edx,0xc002d21c
c0025647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002564b:	89 10                	mov    DWORD PTR [eax],edx
c002564d:	90                   	nop
c002564e:	83 c4 0c             	add    esp,0xc
c0025651:	c3                   	ret    

c0025652 <SSE::open(int, int, void*)>:
c0025652:	83 ec 0c             	sub    esp,0xc
c0025655:	e8 5a 10 00 00       	call   c00266b4 <sseInit>
c002565a:	b8 00 00 00 00       	mov    eax,0x0
c002565f:	83 c4 0c             	add    esp,0xc
c0025662:	c3                   	ret    
c0025663:	90                   	nop

c0025664 <SSE::close(int, int, void*)>:
c0025664:	83 ec 0c             	sub    esp,0xc
c0025667:	e8 58 10 00 00       	call   c00266c4 <sseClose>
c002566c:	b8 00 00 00 00       	mov    eax,0x0
c0025671:	83 c4 0c             	add    esp,0xc
c0025674:	c3                   	ret    
c0025675:	90                   	nop

c0025676 <SSE::available()>:
c0025676:	83 ec 1c             	sub    esp,0x1c
c0025679:	e8 12 10 00 00       	call   c0026690 <absolutelyNoChanceInHell>
c002567e:	85 c0                	test   eax,eax
c0025680:	0f 95 c0             	setne  al
c0025683:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025687:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002568b:	83 c4 1c             	add    esp,0x1c
c002568e:	c3                   	ret    
c002568f:	90                   	nop

c0025690 <SSE::save(void*)>:
c0025690:	83 ec 0c             	sub    esp,0xc
c0025693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025697:	83 ec 0c             	sub    esp,0xc
c002569a:	50                   	push   eax
c002569b:	e8 08 10 00 00       	call   c00266a8 <sseSave>
c00256a0:	83 c4 10             	add    esp,0x10
c00256a3:	90                   	nop
c00256a4:	83 c4 0c             	add    esp,0xc
c00256a7:	c3                   	ret    

c00256a8 <SSE::load(void*)>:
c00256a8:	83 ec 0c             	sub    esp,0xc
c00256ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256af:	83 ec 0c             	sub    esp,0xc
c00256b2:	50                   	push   eax
c00256b3:	e8 f6 0f 00 00       	call   c00266ae <sseLoad>
c00256b8:	83 c4 10             	add    esp,0x10
c00256bb:	90                   	nop
c00256bc:	83 c4 0c             	add    esp,0xc
c00256bf:	c3                   	ret    

c00256c0 <SSE::SSE()>:
c00256c0:	83 ec 0c             	sub    esp,0xc
c00256c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256c7:	83 ec 08             	sub    esp,0x8
c00256ca:	68 4c d2 02 c0       	push   0xc002d24c
c00256cf:	50                   	push   eax
c00256d0:	e8 c1 f1 fe ff       	call   c0014896 <FPU::FPU(char const*)>
c00256d5:	83 c4 10             	add    esp,0x10
c00256d8:	ba 5c d2 02 c0       	mov    edx,0xc002d25c
c00256dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256e1:	89 10                	mov    DWORD PTR [eax],edx
c00256e3:	90                   	nop
c00256e4:	83 c4 0c             	add    esp,0xc
c00256e7:	c3                   	ret    

c00256e8 <x87::open(int, int, void*)>:
c00256e8:	83 ec 0c             	sub    esp,0xc
c00256eb:	e8 0c 10 00 00       	call   c00266fc <x87Init>
c00256f0:	b8 00 00 00 00       	mov    eax,0x0
c00256f5:	83 c4 0c             	add    esp,0xc
c00256f8:	c3                   	ret    
c00256f9:	90                   	nop

c00256fa <x87::close(int, int, void*)>:
c00256fa:	83 ec 0c             	sub    esp,0xc
c00256fd:	e8 14 10 00 00       	call   c0026716 <x87Close>
c0025702:	b8 00 00 00 00       	mov    eax,0x0
c0025707:	83 c4 0c             	add    esp,0xc
c002570a:	c3                   	ret    
c002570b:	90                   	nop

c002570c <x87::available()>:
c002570c:	83 ec 0c             	sub    esp,0xc
c002570f:	e8 c2 0f 00 00       	call   c00266d6 <x87Detect>
c0025714:	85 c0                	test   eax,eax
c0025716:	0f 95 c0             	setne  al
c0025719:	83 c4 0c             	add    esp,0xc
c002571c:	c3                   	ret    
c002571d:	90                   	nop

c002571e <x87::save(void*)>:
c002571e:	83 ec 0c             	sub    esp,0xc
c0025721:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025725:	83 ec 0c             	sub    esp,0xc
c0025728:	50                   	push   eax
c0025729:	e8 c3 0f 00 00       	call   c00266f1 <x87Save>
c002572e:	83 c4 10             	add    esp,0x10
c0025731:	90                   	nop
c0025732:	83 c4 0c             	add    esp,0xc
c0025735:	c3                   	ret    

c0025736 <x87::load(void*)>:
c0025736:	83 ec 0c             	sub    esp,0xc
c0025739:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002573d:	83 ec 0c             	sub    esp,0xc
c0025740:	50                   	push   eax
c0025741:	e8 b1 0f 00 00       	call   c00266f7 <x87Load>
c0025746:	83 c4 10             	add    esp,0x10
c0025749:	90                   	nop
c002574a:	83 c4 0c             	add    esp,0xc
c002574d:	c3                   	ret    

c002574e <x87::x87()>:
c002574e:	83 ec 0c             	sub    esp,0xc
c0025751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025755:	83 ec 08             	sub    esp,0x8
c0025758:	68 8c d2 02 c0       	push   0xc002d28c
c002575d:	50                   	push   eax
c002575e:	e8 33 f1 fe ff       	call   c0014896 <FPU::FPU(char const*)>
c0025763:	83 c4 10             	add    esp,0x10
c0025766:	ba 9c d2 02 c0       	mov    edx,0xc002d29c
c002576b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002576f:	89 10                	mov    DWORD PTR [eax],edx
c0025771:	90                   	nop
c0025772:	83 c4 0c             	add    esp,0xc
c0025775:	c3                   	ret    

c0025776 <APIC::disable()>:
c0025776:	90                   	nop
c0025777:	c3                   	ret    

c0025778 <APIC::close(int, int, void*)>:
c0025778:	55                   	push   ebp
c0025779:	89 e5                	mov    ebp,esp
c002577b:	83 ec 08             	sub    esp,0x8
c002577e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025781:	8b 00                	mov    eax,DWORD PTR [eax]
c0025783:	83 c0 3c             	add    eax,0x3c
c0025786:	8b 00                	mov    eax,DWORD PTR [eax]
c0025788:	83 ec 0c             	sub    esp,0xc
c002578b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002578e:	ff d0                	call   eax
c0025790:	83 c4 10             	add    esp,0x10
c0025793:	b8 00 00 00 00       	mov    eax,0x0
c0025798:	c9                   	leave  
c0025799:	c3                   	ret    

c002579a <IOAPIC::close(int, int, void*)>:
c002579a:	b8 00 00 00 00       	mov    eax,0x0
c002579f:	c3                   	ret    

c00257a0 <APIC::io_wait()>:
c00257a0:	eb 00                	jmp    c00257a2 <APIC::io_wait()+0x2>
c00257a2:	eb 00                	jmp    c00257a4 <APIC::io_wait()+0x4>
c00257a4:	90                   	nop
c00257a5:	c3                   	ret    

c00257a6 <APIC::getBase()>:
c00257a6:	55                   	push   ebp
c00257a7:	89 e5                	mov    ebp,esp
c00257a9:	83 ec 18             	sub    esp,0x18
c00257ac:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00257b1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00257b7:	83 e0 08             	and    eax,0x8
c00257ba:	84 c0                	test   al,al
c00257bc:	75 07                	jne    c00257c5 <APIC::getBase()+0x1f>
c00257be:	b8 00 00 00 00       	mov    eax,0x0
c00257c3:	eb 21                	jmp    c00257e6 <APIC::getBase()+0x40>
c00257c5:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00257ca:	83 ec 08             	sub    esp,0x8
c00257cd:	6a 1b                	push   0x1b
c00257cf:	50                   	push   eax
c00257d0:	e8 13 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c00257d5:	83 c4 10             	add    esp,0x10
c00257d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00257db:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00257de:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00257e6:	c9                   	leave  
c00257e7:	c3                   	ret    

c00257e8 <APIC::eoi(unsigned char)>:
c00257e8:	55                   	push   ebp
c00257e9:	89 e5                	mov    ebp,esp
c00257eb:	83 ec 28             	sub    esp,0x28
c00257ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257f1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00257f4:	83 ec 0c             	sub    esp,0xc
c00257f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257fa:	e8 a7 ff ff ff       	call   c00257a6 <APIC::getBase()>
c00257ff:	83 c4 10             	add    esp,0x10
c0025802:	05 b0 00 00 00       	add    eax,0xb0
c0025807:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002580a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002580d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025813:	90                   	nop
c0025814:	c9                   	leave  
c0025815:	c3                   	ret    

c0025816 <APIC::open(int, int, void*)>:
c0025816:	55                   	push   ebp
c0025817:	89 e5                	mov    ebp,esp
c0025819:	57                   	push   edi
c002581a:	56                   	push   esi
c002581b:	53                   	push   ebx
c002581c:	83 ec 2c             	sub    esp,0x2c
c002581f:	83 ec 0c             	sub    esp,0xc
c0025822:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025825:	e8 7c ff ff ff       	call   c00257a6 <APIC::getBase()>
c002582a:	83 c4 10             	add    esp,0x10
c002582d:	89 c2                	mov    edx,eax
c002582f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025832:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025838:	0f b6 f8             	movzx  edi,al
c002583b:	89 d0                	mov    eax,edx
c002583d:	ba 00 00 00 00       	mov    edx,0x0
c0025842:	89 c1                	mov    ecx,eax
c0025844:	80 e5 ff             	and    ch,0xff
c0025847:	89 cb                	mov    ebx,ecx
c0025849:	0f b6 f2             	movzx  esi,dl
c002584c:	89 d8                	mov    eax,ebx
c002584e:	89 f2                	mov    edx,esi
c0025850:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025853:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025856:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002585a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002585e:	83 e0 00             	and    eax,0x0
c0025861:	09 d0                	or     eax,edx
c0025863:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025867:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002586a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025870:	8d 50 01             	lea    edx,[eax+0x1]
c0025873:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025876:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002587c:	0f b6 d0             	movzx  edx,al
c002587f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025882:	83 c2 08             	add    edx,0x8
c0025885:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025889:	0f b6 c9             	movzx  ecx,cl
c002588c:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025892:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025896:	83 ec 0c             	sub    esp,0xc
c0025899:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002589c:	e8 05 ff ff ff       	call   c00257a6 <APIC::getBase()>
c00258a1:	83 c4 10             	add    esp,0x10
c00258a4:	05 f0 00 00 00       	add    eax,0xf0
c00258a9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00258ac:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258af:	8b 00                	mov    eax,DWORD PTR [eax]
c00258b1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00258b4:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00258bb:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00258c2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258c5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00258c8:	89 10                	mov    DWORD PTR [eax],edx
c00258ca:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00258d1:	a1 d0 0e 03 c0       	mov    eax,ds:0xc0030ed0
c00258d6:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00258d9:	7d 7c                	jge    c0025957 <APIC::open(int, int, void*)+0x141>
c00258db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258de:	8b 04 85 e0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf120]
c00258e5:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00258e8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258eb:	8b 04 85 e0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf120]
c00258f2:	c1 e8 08             	shr    eax,0x8
c00258f5:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00258f9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258fc:	8b 04 85 e0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf120]
c0025903:	c1 e8 18             	shr    eax,0x18
c0025906:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025909:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002590d:	75 40                	jne    c002594f <APIC::open(int, int, void*)+0x139>
c002590f:	83 ec 0c             	sub    esp,0xc
c0025912:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025915:	e8 8c fe ff ff       	call   c00257a6 <APIC::getBase()>
c002591a:	83 c4 10             	add    esp,0x10
c002591d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025921:	75 07                	jne    c002592a <APIC::open(int, int, void*)+0x114>
c0025923:	ba 60 03 00 00       	mov    edx,0x360
c0025928:	eb 05                	jmp    c002592f <APIC::open(int, int, void*)+0x119>
c002592a:	ba 50 03 00 00       	mov    edx,0x350
c002592f:	01 d0                	add    eax,edx
c0025931:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025934:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025937:	8b 00                	mov    eax,DWORD PTR [eax]
c0025939:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002593c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025943:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025947:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002594a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002594d:	89 10                	mov    DWORD PTR [eax],edx
c002594f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025952:	e9 7a ff ff ff       	jmp    c00258d1 <APIC::open(int, int, void*)+0xbb>
c0025957:	b8 00 00 00 00       	mov    eax,0x0
c002595c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002595f:	5b                   	pop    ebx
c0025960:	5e                   	pop    esi
c0025961:	5f                   	pop    edi
c0025962:	5d                   	pop    ebp
c0025963:	c3                   	ret    

c0025964 <IOAPIC::IOAPIC()>:
c0025964:	83 ec 0c             	sub    esp,0xc
c0025967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002596b:	83 ec 08             	sub    esp,0x8
c002596e:	68 cc d2 02 c0       	push   0xc002d2cc
c0025973:	50                   	push   eax
c0025974:	e8 0b ec fe ff       	call   c0014584 <Device::Device(char const*)>
c0025979:	83 c4 10             	add    esp,0x10
c002597c:	ba f4 d3 02 c0       	mov    edx,0xc002d3f4
c0025981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025985:	89 10                	mov    DWORD PTR [eax],edx
c0025987:	90                   	nop
c0025988:	83 c4 0c             	add    esp,0xc
c002598b:	c3                   	ret    

c002598c <APIC::APIC()>:
c002598c:	53                   	push   ebx
c002598d:	83 ec 18             	sub    esp,0x18
c0025990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025994:	83 ec 08             	sub    esp,0x8
c0025997:	68 d4 d2 02 c0       	push   0xc002d2d4
c002599c:	50                   	push   eax
c002599d:	e8 4e f3 fe ff       	call   c0014cf0 <InterruptController::InterruptController(char const*)>
c00259a2:	83 c4 10             	add    esp,0x10
c00259a5:	ba ac d3 02 c0       	mov    edx,0xc002d3ac
c00259aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00259ae:	89 10                	mov    DWORD PTR [eax],edx
c00259b0:	a0 a0 29 03 c0       	mov    al,ds:0xc00329a0
c00259b5:	83 f0 01             	xor    eax,0x1
c00259b8:	84 c0                	test   al,al
c00259ba:	0f 84 a1 00 00 00    	je     c0025a61 <APIC::APIC()+0xd5>
c00259c0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00259c5:	a0 80 0f 03 c0       	mov    al,ds:0xc0030f80
c00259ca:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00259ce:	0f 83 86 00 00 00    	jae    c0025a5a <APIC::APIC()+0xce>
c00259d4:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00259dc:	83 ec 0c             	sub    esp,0xc
c00259df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259e3:	e8 58 9e fe ff       	call   c000f840 <malloc>
c00259e8:	83 c4 10             	add    esp,0x10
c00259eb:	89 c3                	mov    ebx,eax
c00259ed:	83 ec 0c             	sub    esp,0xc
c00259f0:	53                   	push   ebx
c00259f1:	e8 6e ff ff ff       	call   c0025964 <IOAPIC::IOAPIC()>
c00259f6:	83 c4 10             	add    esp,0x10
c00259f9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00259fd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025a02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025a06:	89 14 85 80 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd680],edx
c0025a0d:	a1 60 29 03 c0       	mov    eax,ds:0xc0032960
c0025a12:	40                   	inc    eax
c0025a13:	a3 60 29 03 c0       	mov    ds:0xc0032960,eax
c0025a18:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0025a1d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025a23:	83 ec 08             	sub    esp,0x8
c0025a26:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a2a:	50                   	push   eax
c0025a2b:	e8 64 e9 fe ff       	call   c0014394 <Device::addChild(Device*)>
c0025a30:	83 c4 10             	add    esp,0x10
c0025a33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025a37:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a39:	83 c0 08             	add    eax,0x8
c0025a3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a3e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025a43:	6a 00                	push   0x0
c0025a45:	6a 00                	push   0x0
c0025a47:	52                   	push   edx
c0025a48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025a4c:	ff d0                	call   eax
c0025a4e:	83 c4 10             	add    esp,0x10
c0025a51:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025a55:	e9 6b ff ff ff       	jmp    c00259c5 <APIC::APIC()+0x39>
c0025a5a:	c6 05 a0 29 03 c0 01 	mov    BYTE PTR ds:0xc00329a0,0x1
c0025a61:	90                   	nop
c0025a62:	83 c4 18             	add    esp,0x18
c0025a65:	5b                   	pop    ebx
c0025a66:	c3                   	ret    
c0025a67:	90                   	nop

c0025a68 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025a68:	55                   	push   ebp
c0025a69:	89 e5                	mov    ebp,esp
c0025a6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a6e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a74:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a77:	72 1d                	jb     c0025a96 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a7c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025a82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a85:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025a8b:	01 d0                	add    eax,edx
c0025a8d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a90:	73 04                	jae    c0025a96 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a92:	b0 01                	mov    al,0x1
c0025a94:	eb 02                	jmp    c0025a98 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025a96:	b0 00                	mov    al,0x0
c0025a98:	5d                   	pop    ebp
c0025a99:	c3                   	ret    

c0025a9a <IOAPIC::read(int)>:
c0025a9a:	55                   	push   ebp
c0025a9b:	89 e5                	mov    ebp,esp
c0025a9d:	83 ec 10             	sub    esp,0x10
c0025aa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025aa9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025aac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025aaf:	0f b6 d0             	movzx  edx,al
c0025ab2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ab5:	89 10                	mov    DWORD PTR [eax],edx
c0025ab7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025aba:	83 c0 10             	add    eax,0x10
c0025abd:	8b 00                	mov    eax,DWORD PTR [eax]
c0025abf:	c9                   	leave  
c0025ac0:	c3                   	ret    
c0025ac1:	90                   	nop

c0025ac2 <IOAPIC::open(int, int, void*)>:
c0025ac2:	55                   	push   ebp
c0025ac3:	89 e5                	mov    ebp,esp
c0025ac5:	57                   	push   edi
c0025ac6:	56                   	push   esi
c0025ac7:	53                   	push   ebx
c0025ac8:	83 ec 0c             	sub    esp,0xc
c0025acb:	83 ec 0c             	sub    esp,0xc
c0025ace:	68 ff d2 02 c0       	push   0xc002d2ff
c0025ad3:	e8 96 d4 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0025ad8:	83 c4 10             	add    esp,0x10
c0025adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ade:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ae1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025ae7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aea:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025af0:	8b 14 85 c0 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf040]
c0025af7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025afa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b03:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b09:	8b 14 85 40 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcefc0]
c0025b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b13:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025b19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b1c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025b22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b25:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b2b:	0f b6 f8             	movzx  edi,al
c0025b2e:	89 d0                	mov    eax,edx
c0025b30:	ba 00 00 00 00       	mov    edx,0x0
c0025b35:	89 c1                	mov    ecx,eax
c0025b37:	80 e5 ff             	and    ch,0xff
c0025b3a:	89 cb                	mov    ebx,ecx
c0025b3c:	0f b6 f2             	movzx  esi,dl
c0025b3f:	89 d8                	mov    eax,ebx
c0025b41:	89 f2                	mov    edx,esi
c0025b43:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b46:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b49:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b4d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025b51:	83 e0 00             	and    eax,0x0
c0025b54:	09 d0                	or     eax,edx
c0025b56:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b5d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b63:	8d 50 01             	lea    edx,[eax+0x1]
c0025b66:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b69:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b6f:	0f b6 d0             	movzx  edx,al
c0025b72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b75:	83 c2 08             	add    edx,0x8
c0025b78:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b7c:	0f b6 c9             	movzx  ecx,cl
c0025b7f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025b85:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b89:	83 ec 08             	sub    esp,0x8
c0025b8c:	6a 01                	push   0x1
c0025b8e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b91:	e8 04 ff ff ff       	call   c0025a9a <IOAPIC::read(int)>
c0025b96:	83 c4 10             	add    esp,0x10
c0025b99:	c1 f8 10             	sar    eax,0x10
c0025b9c:	0f b6 c0             	movzx  eax,al
c0025b9f:	8d 50 01             	lea    edx,[eax+0x1]
c0025ba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ba5:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025bab:	b8 00 00 00 00       	mov    eax,0x0
c0025bb0:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025bb3:	5b                   	pop    ebx
c0025bb4:	5e                   	pop    esi
c0025bb5:	5f                   	pop    edi
c0025bb6:	5d                   	pop    ebp
c0025bb7:	c3                   	ret    

c0025bb8 <IOAPIC::write(int, int)>:
c0025bb8:	55                   	push   ebp
c0025bb9:	89 e5                	mov    ebp,esp
c0025bbb:	83 ec 10             	sub    esp,0x10
c0025bbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bc1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025bc7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025bca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bcd:	0f b6 d0             	movzx  edx,al
c0025bd0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025bd3:	89 10                	mov    DWORD PTR [eax],edx
c0025bd5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025bd8:	8d 50 10             	lea    edx,[eax+0x10]
c0025bdb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025bde:	89 02                	mov    DWORD PTR [edx],eax
c0025be0:	90                   	nop
c0025be1:	c9                   	leave  
c0025be2:	c3                   	ret    
c0025be3:	90                   	nop

c0025be4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025be4:	55                   	push   ebp
c0025be5:	89 e5                	mov    ebp,esp
c0025be7:	53                   	push   ebx
c0025be8:	83 ec 2c             	sub    esp,0x2c
c0025beb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bee:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025bf1:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025bf4:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025bf7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025bfa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025bfd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025c00:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c03:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c06:	88 d8                	mov    al,bl
c0025c08:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025c0b:	88 c8                	mov    al,cl
c0025c0d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c10:	88 d0                	mov    al,dl
c0025c12:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025c15:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c19:	83 c0 08             	add    eax,0x8
c0025c1c:	01 c0                	add    eax,eax
c0025c1e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025c21:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c25:	83 c0 08             	add    eax,0x8
c0025c28:	01 c0                	add    eax,eax
c0025c2a:	40                   	inc    eax
c0025c2b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025c2e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c31:	50                   	push   eax
c0025c32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c35:	e8 60 fe ff ff       	call   c0025a9a <IOAPIC::read(int)>
c0025c3a:	83 c4 08             	add    esp,0x8
c0025c3d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025c40:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025c47:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025c4a:	c1 e0 18             	shl    eax,0x18
c0025c4d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025c50:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025c53:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c56:	52                   	push   edx
c0025c57:	50                   	push   eax
c0025c58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c5b:	e8 58 ff ff ff       	call   c0025bb8 <IOAPIC::write(int, int)>
c0025c60:	83 c4 0c             	add    esp,0xc
c0025c63:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c66:	50                   	push   eax
c0025c67:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c6a:	e8 2b fe ff ff       	call   c0025a9a <IOAPIC::read(int)>
c0025c6f:	83 c4 08             	add    esp,0x8
c0025c72:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c75:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025c7c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025c83:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025c8a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c8e:	74 09                	je     c0025c99 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025c90:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025c97:	eb 07                	jmp    c0025ca0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025c99:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025ca0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025ca4:	74 09                	je     c0025caf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025ca6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025cad:	eb 07                	jmp    c0025cb6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025caf:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025cb6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025cbd:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025cc1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025cc4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025cc7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025cca:	52                   	push   edx
c0025ccb:	50                   	push   eax
c0025ccc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ccf:	e8 e4 fe ff ff       	call   c0025bb8 <IOAPIC::write(int, int)>
c0025cd4:	83 c4 0c             	add    esp,0xc
c0025cd7:	90                   	nop
c0025cd8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025cdb:	c9                   	leave  
c0025cdc:	c3                   	ret    
c0025cdd:	90                   	nop

c0025cde <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025cde:	55                   	push   ebp
c0025cdf:	89 e5                	mov    ebp,esp
c0025ce1:	57                   	push   edi
c0025ce2:	56                   	push   esi
c0025ce3:	53                   	push   ebx
c0025ce4:	83 ec 2c             	sub    esp,0x2c
c0025ce7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025cea:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025ced:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025cf1:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025cf5:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025cf9:	74 5a                	je     c0025d55 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025cfb:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025cff:	7f 44                	jg     c0025d45 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025d01:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d04:	05 40 d8 02 c0       	add    eax,0xc002d840
c0025d09:	8a 00                	mov    al,BYTE PTR [eax]
c0025d0b:	0f b6 c0             	movzx  eax,al
c0025d0e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025d11:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d14:	66 8b 84 00 60 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf0a0]
c0025d1c:	0f b7 c0             	movzx  eax,ax
c0025d1f:	83 e0 02             	and    eax,0x2
c0025d22:	85 c0                	test   eax,eax
c0025d24:	74 04                	je     c0025d2a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025d26:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025d2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d2d:	66 8b 84 00 60 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf0a0]
c0025d35:	0f b7 c0             	movzx  eax,ax
c0025d38:	83 e0 08             	and    eax,0x8
c0025d3b:	85 c0                	test   eax,eax
c0025d3d:	74 16                	je     c0025d55 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d3f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d43:	eb 10                	jmp    c0025d55 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d45:	83 ec 0c             	sub    esp,0xc
c0025d48:	68 10 d3 02 c0       	push   0xc002d310
c0025d4d:	e8 bd 48 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0025d52:	83 c4 10             	add    esp,0x10
c0025d55:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025d59:	a1 60 29 03 c0       	mov    eax,ds:0xc0032960
c0025d5e:	83 ec 08             	sub    esp,0x8
c0025d61:	50                   	push   eax
c0025d62:	68 48 d3 02 c0       	push   0xc002d348
c0025d67:	e8 02 d2 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0025d6c:	83 c4 10             	add    esp,0x10
c0025d6f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025d76:	a1 60 29 03 c0       	mov    eax,ds:0xc0032960
c0025d7b:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025d7e:	7d 67                	jge    c0025de7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d80:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d83:	8b 04 85 80 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd680]
c0025d8a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d8d:	83 ec 08             	sub    esp,0x8
c0025d90:	52                   	push   edx
c0025d91:	50                   	push   eax
c0025d92:	e8 d1 fc ff ff       	call   c0025a68 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025d97:	83 c4 10             	add    esp,0x10
c0025d9a:	84 c0                	test   al,al
c0025d9c:	74 44                	je     c0025de2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025d9e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025da1:	8b 1c 85 80 29 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd680]
c0025da8:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025dac:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025daf:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025db3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025db6:	83 c0 20             	add    eax,0x20
c0025db9:	0f b6 f0             	movzx  esi,al
c0025dbc:	b8 00 00 00 00       	mov    eax,0x0
c0025dc1:	99                   	cdq    
c0025dc2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025dc5:	0f b6 c9             	movzx  ecx,cl
c0025dc8:	83 ec 04             	sub    esp,0x4
c0025dcb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025dce:	57                   	push   edi
c0025dcf:	56                   	push   esi
c0025dd0:	52                   	push   edx
c0025dd1:	50                   	push   eax
c0025dd2:	51                   	push   ecx
c0025dd3:	53                   	push   ebx
c0025dd4:	e8 0b fe ff ff       	call   c0025be4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025dd9:	83 c4 20             	add    esp,0x20
c0025ddc:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025de0:	eb 05                	jmp    c0025de7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025de2:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025de5:	eb 8f                	jmp    c0025d76 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025de7:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025dea:	83 f0 01             	xor    eax,0x1
c0025ded:	84 c0                	test   al,al
c0025def:	74 10                	je     c0025e01 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025df1:	83 ec 0c             	sub    esp,0xc
c0025df4:	68 5f d3 02 c0       	push   0xc002d35f
c0025df9:	e8 11 48 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0025dfe:	83 c4 10             	add    esp,0x10
c0025e01:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025e05:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025e0c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025e10:	7f 65                	jg     c0025e77 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025e12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e15:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e18:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e1f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e22:	01 ca                	add    edx,ecx
c0025e24:	83 c2 54             	add    edx,0x54
c0025e27:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025e2b:	85 c0                	test   eax,eax
c0025e2d:	75 43                	jne    c0025e72 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025e2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e32:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e35:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e3c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e3f:	01 ca                	add    edx,ecx
c0025e41:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025e44:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025e47:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e4e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e51:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e58:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e5b:	01 ca                	add    edx,ecx
c0025e5d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025e63:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025e66:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e6a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e6d:	83 e8 20             	sub    eax,0x20
c0025e70:	eb 1a                	jmp    c0025e8c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025e72:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025e75:	eb 95                	jmp    c0025e0c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025e77:	83 ec 0c             	sub    esp,0xc
c0025e7a:	68 6c d3 02 c0       	push   0xc002d36c
c0025e7f:	e8 8b 47 ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0025e84:	83 c4 10             	add    esp,0x10
c0025e87:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e8c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e8f:	5b                   	pop    ebx
c0025e90:	5e                   	pop    esi
c0025e91:	5f                   	pop    edi
c0025e92:	5d                   	pop    ebp
c0025e93:	c3                   	ret    

c0025e94 <PIC::disable()>:
c0025e94:	55                   	push   ebp
c0025e95:	89 e5                	mov    ebp,esp
c0025e97:	83 ec 10             	sub    esp,0x10
c0025e9a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025ea0:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025ea4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ea7:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025eab:	ee                   	out    dx,al
c0025eac:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025eb2:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025eb6:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025eb9:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025ebd:	ee                   	out    dx,al
c0025ebe:	90                   	nop
c0025ebf:	c9                   	leave  
c0025ec0:	c3                   	ret    
c0025ec1:	90                   	nop

c0025ec2 <PIC::close(int, int, void*)>:
c0025ec2:	55                   	push   ebp
c0025ec3:	89 e5                	mov    ebp,esp
c0025ec5:	83 ec 08             	sub    esp,0x8
c0025ec8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ecb:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ecd:	83 c0 3c             	add    eax,0x3c
c0025ed0:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ed2:	83 ec 0c             	sub    esp,0xc
c0025ed5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ed8:	ff d0                	call   eax
c0025eda:	83 c4 10             	add    esp,0x10
c0025edd:	b8 00 00 00 00       	mov    eax,0x0
c0025ee2:	c9                   	leave  
c0025ee3:	c3                   	ret    

c0025ee4 <PIC::PIC()>:
c0025ee4:	83 ec 0c             	sub    esp,0xc
c0025ee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eeb:	83 ec 08             	sub    esp,0x8
c0025eee:	68 18 d4 02 c0       	push   0xc002d418
c0025ef3:	50                   	push   eax
c0025ef4:	e8 f7 ed fe ff       	call   c0014cf0 <InterruptController::InterruptController(char const*)>
c0025ef9:	83 c4 10             	add    esp,0x10
c0025efc:	ba 44 d4 02 c0       	mov    edx,0xc002d444
c0025f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f05:	89 10                	mov    DWORD PTR [eax],edx
c0025f07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f0b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f11:	0f b6 d0             	movzx  edx,al
c0025f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f18:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025f1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f23:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f29:	0f b6 d0             	movzx  edx,al
c0025f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f30:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f39:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f3f:	8d 50 01             	lea    edx,[eax+0x1]
c0025f42:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f46:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f4c:	0f b6 d0             	movzx  edx,al
c0025f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f53:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f57:	83 e1 3f             	and    ecx,0x3f
c0025f5a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f68:	0f b6 d0             	movzx  edx,al
c0025f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f6f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f7a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f80:	0f b6 d0             	movzx  edx,al
c0025f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f87:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f90:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f96:	8d 50 01             	lea    edx,[eax+0x1]
c0025f99:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f9d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025fa3:	0f b6 d0             	movzx  edx,al
c0025fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025faa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025fae:	83 e1 3f             	and    ecx,0x3f
c0025fb1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025fb5:	90                   	nop
c0025fb6:	83 c4 0c             	add    esp,0xc
c0025fb9:	c3                   	ret    

c0025fba <PIC::ioWait()>:
c0025fba:	eb 00                	jmp    c0025fbc <PIC::ioWait()+0x2>
c0025fbc:	eb 00                	jmp    c0025fbe <PIC::ioWait()+0x4>
c0025fbe:	90                   	nop
c0025fbf:	c3                   	ret    

c0025fc0 <PIC::getIRQReg(int)>:
c0025fc0:	55                   	push   ebp
c0025fc1:	89 e5                	mov    ebp,esp
c0025fc3:	83 ec 10             	sub    esp,0x10
c0025fc6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fc9:	0f b6 c0             	movzx  eax,al
c0025fcc:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025fd2:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025fd5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025fd8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025fdc:	ee                   	out    dx,al
c0025fdd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fe0:	0f b6 c0             	movzx  eax,al
c0025fe3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025fe9:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025fec:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025fef:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025ff3:	ee                   	out    dx,al
c0025ff4:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025ffa:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025ffe:	89 c2                	mov    edx,eax
c0026000:	ec                   	in     al,dx
c0026001:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026004:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026007:	0f b6 c0             	movzx  eax,al
c002600a:	c1 e0 08             	shl    eax,0x8
c002600d:	89 c1                	mov    ecx,eax
c002600f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026015:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026019:	89 c2                	mov    edx,eax
c002601b:	ec                   	in     al,dx
c002601c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002601f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026022:	0f b6 c0             	movzx  eax,al
c0026025:	09 c8                	or     eax,ecx
c0026027:	c9                   	leave  
c0026028:	c3                   	ret    
c0026029:	90                   	nop

c002602a <PIC::eoi(unsigned char)>:
c002602a:	55                   	push   ebp
c002602b:	89 e5                	mov    ebp,esp
c002602d:	83 ec 14             	sub    esp,0x14
c0026030:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026033:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026036:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002603a:	75 1e                	jne    c002605a <PIC::eoi(unsigned char)+0x30>
c002603c:	6a 0b                	push   0xb
c002603e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026041:	e8 7a ff ff ff       	call   c0025fc0 <PIC::getIRQReg(int)>
c0026046:	83 c4 08             	add    esp,0x8
c0026049:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002604d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026051:	25 80 00 00 00       	and    eax,0x80
c0026056:	85 c0                	test   eax,eax
c0026058:	74 5f                	je     c00260b9 <PIC::eoi(unsigned char)+0x8f>
c002605a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002605e:	75 2d                	jne    c002608d <PIC::eoi(unsigned char)+0x63>
c0026060:	6a 0b                	push   0xb
c0026062:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026065:	e8 56 ff ff ff       	call   c0025fc0 <PIC::getIRQReg(int)>
c002606a:	83 c4 08             	add    esp,0x8
c002606d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026071:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026074:	66 85 c0             	test   ax,ax
c0026077:	78 14                	js     c002608d <PIC::eoi(unsigned char)+0x63>
c0026079:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002607f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026083:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026086:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002608a:	ee                   	out    dx,al
c002608b:	eb 2d                	jmp    c00260ba <PIC::eoi(unsigned char)+0x90>
c002608d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026091:	76 12                	jbe    c00260a5 <PIC::eoi(unsigned char)+0x7b>
c0026093:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026099:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002609d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00260a0:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00260a4:	ee                   	out    dx,al
c00260a5:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00260ab:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00260af:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00260b2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00260b6:	ee                   	out    dx,al
c00260b7:	eb 01                	jmp    c00260ba <PIC::eoi(unsigned char)+0x90>
c00260b9:	90                   	nop
c00260ba:	c9                   	leave  
c00260bb:	c3                   	ret    

c00260bc <PIC::remap()>:
c00260bc:	55                   	push   ebp
c00260bd:	89 e5                	mov    ebp,esp
c00260bf:	83 ec 48             	sub    esp,0x48
c00260c2:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00260c9:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00260d0:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00260d6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00260d9:	89 c2                	mov    edx,eax
c00260db:	ec                   	in     al,dx
c00260dc:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00260df:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00260e2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00260e5:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00260eb:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00260ee:	89 c2                	mov    edx,eax
c00260f0:	ec                   	in     al,dx
c00260f1:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00260f4:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00260f7:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00260fa:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026100:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026104:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026107:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002610a:	ee                   	out    dx,al
c002610b:	83 ec 0c             	sub    esp,0xc
c002610e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026111:	e8 a4 fe ff ff       	call   c0025fba <PIC::ioWait()>
c0026116:	83 c4 10             	add    esp,0x10
c0026119:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002611f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026123:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026126:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026129:	ee                   	out    dx,al
c002612a:	83 ec 0c             	sub    esp,0xc
c002612d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026130:	e8 85 fe ff ff       	call   c0025fba <PIC::ioWait()>
c0026135:	83 c4 10             	add    esp,0x10
c0026138:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002613b:	0f b6 c0             	movzx  eax,al
c002613e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026144:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026147:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002614a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002614d:	ee                   	out    dx,al
c002614e:	83 ec 0c             	sub    esp,0xc
c0026151:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026154:	e8 61 fe ff ff       	call   c0025fba <PIC::ioWait()>
c0026159:	83 c4 10             	add    esp,0x10
c002615c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002615f:	0f b6 c0             	movzx  eax,al
c0026162:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026168:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002616b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002616e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026171:	ee                   	out    dx,al
c0026172:	83 ec 0c             	sub    esp,0xc
c0026175:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026178:	e8 3d fe ff ff       	call   c0025fba <PIC::ioWait()>
c002617d:	83 c4 10             	add    esp,0x10
c0026180:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026186:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002618a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002618d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026190:	ee                   	out    dx,al
c0026191:	83 ec 0c             	sub    esp,0xc
c0026194:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026197:	e8 1e fe ff ff       	call   c0025fba <PIC::ioWait()>
c002619c:	83 c4 10             	add    esp,0x10
c002619f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00261a5:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00261a9:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00261ac:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00261af:	ee                   	out    dx,al
c00261b0:	83 ec 0c             	sub    esp,0xc
c00261b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261b6:	e8 ff fd ff ff       	call   c0025fba <PIC::ioWait()>
c00261bb:	83 c4 10             	add    esp,0x10
c00261be:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00261c4:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00261c8:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00261cb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00261ce:	ee                   	out    dx,al
c00261cf:	83 ec 0c             	sub    esp,0xc
c00261d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261d5:	e8 e0 fd ff ff       	call   c0025fba <PIC::ioWait()>
c00261da:	83 c4 10             	add    esp,0x10
c00261dd:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00261e3:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00261e7:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00261ea:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00261ed:	ee                   	out    dx,al
c00261ee:	83 ec 0c             	sub    esp,0xc
c00261f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261f4:	e8 c1 fd ff ff       	call   c0025fba <PIC::ioWait()>
c00261f9:	83 c4 10             	add    esp,0x10
c00261fc:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026200:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026206:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026209:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002620c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002620f:	ee                   	out    dx,al
c0026210:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026214:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002621a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002621d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026220:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026223:	ee                   	out    dx,al
c0026224:	90                   	nop
c0026225:	c9                   	leave  
c0026226:	c3                   	ret    
c0026227:	90                   	nop

c0026228 <PIC::open(int, int, void*)>:
c0026228:	55                   	push   ebp
c0026229:	89 e5                	mov    ebp,esp
c002622b:	83 ec 18             	sub    esp,0x18
c002622e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026234:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026238:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002623b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002623f:	ee                   	out    dx,al
c0026240:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026246:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002624a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002624d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026251:	ee                   	out    dx,al
c0026252:	83 ec 0c             	sub    esp,0xc
c0026255:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026258:	e8 5f fe ff ff       	call   c00260bc <PIC::remap()>
c002625d:	83 c4 10             	add    esp,0x10
c0026260:	b8 00 00 00 00       	mov    eax,0x0
c0026265:	c9                   	leave  
c0026266:	c3                   	ret    
c0026267:	90                   	nop

c0026268 <APICTimer::close(int, int, void*)>:
c0026268:	b8 00 00 00 00       	mov    eax,0x0
c002626d:	c3                   	ret    

c002626e <apicTimerHandler(regs*, void*)>:
c002626e:	83 ec 0c             	sub    esp,0xc
c0026271:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026275:	8b 00                	mov    eax,DWORD PTR [eax]
c0026277:	99                   	cdq    
c0026278:	52                   	push   edx
c0026279:	50                   	push   eax
c002627a:	6a 00                	push   0x0
c002627c:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026281:	e8 86 07 00 00       	call   c0026a0c <__udivdi3>
c0026286:	83 c4 10             	add    esp,0x10
c0026289:	83 ec 08             	sub    esp,0x8
c002628c:	52                   	push   edx
c002628d:	50                   	push   eax
c002628e:	e8 a8 0a ff ff       	call   c0016d3b <timerHandler(unsigned long long)>
c0026293:	83 c4 10             	add    esp,0x10
c0026296:	90                   	nop
c0026297:	83 c4 0c             	add    esp,0xc
c002629a:	c3                   	ret    
c002629b:	90                   	nop

c002629c <APICTimer::write(int)>:
c002629c:	53                   	push   ebx
c002629d:	83 ec 28             	sub    esp,0x28
c00262a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00262a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00262a8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00262ae:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00262b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00262b9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00262bf:	83 ec 0c             	sub    esp,0xc
c00262c2:	50                   	push   eax
c00262c3:	e8 de f4 ff ff       	call   c00257a6 <APIC::getBase()>
c00262c8:	83 c4 10             	add    esp,0x10
c00262cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00262cf:	a1 70 ec 02 c0       	mov    eax,ds:0xc002ec70
c00262d4:	8b 15 74 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec74
c00262da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00262de:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00262e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262e6:	05 e0 03 00 00       	add    eax,0x3e0
c00262eb:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00262f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262f5:	05 80 03 00 00       	add    eax,0x380
c00262fa:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026300:	fb                   	sti    
c0026301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026305:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026309:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002630e:	83 d2 00             	adc    edx,0x0
c0026311:	89 c1                	mov    ecx,eax
c0026313:	89 d3                	mov    ebx,edx
c0026315:	a1 70 ec 02 c0       	mov    eax,ds:0xc002ec70
c002631a:	8b 15 74 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec74
c0026320:	39 c8                	cmp    eax,ecx
c0026322:	89 d0                	mov    eax,edx
c0026324:	19 d8                	sbb    eax,ebx
c0026326:	73 02                	jae    c002632a <APICTimer::write(int)+0x8e>
c0026328:	eb d7                	jmp    c0026301 <APICTimer::write(int)+0x65>
c002632a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002632e:	05 20 03 00 00       	add    eax,0x320
c0026333:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026339:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002633d:	05 90 03 00 00       	add    eax,0x390
c0026342:	8b 00                	mov    eax,DWORD PTR [eax]
c0026344:	f7 d0                	not    eax
c0026346:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002634a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002634e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026352:	ba 00 00 00 00       	mov    edx,0x0
c0026357:	f7 f3                	div    ebx
c0026359:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002635d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026361:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026367:	0d 00 00 02 00       	or     eax,0x20000
c002636c:	89 c2                	mov    edx,eax
c002636e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026372:	05 20 03 00 00       	add    eax,0x320
c0026377:	89 10                	mov    DWORD PTR [eax],edx
c0026379:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002637d:	05 e0 03 00 00       	add    eax,0x3e0
c0026382:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026388:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002638c:	05 80 03 00 00       	add    eax,0x380
c0026391:	89 c2                	mov    edx,eax
c0026393:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026397:	89 02                	mov    DWORD PTR [edx],eax
c0026399:	90                   	nop
c002639a:	83 c4 28             	add    esp,0x28
c002639d:	5b                   	pop    ebx
c002639e:	c3                   	ret    
c002639f:	90                   	nop

c00263a0 <APICTimer::open(int, int, void*)>:
c00263a0:	57                   	push   edi
c00263a1:	56                   	push   esi
c00263a2:	53                   	push   ebx
c00263a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00263a9:	83 c0 24             	add    eax,0x24
c00263ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00263ae:	83 ec 08             	sub    esp,0x8
c00263b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263b9:	ff d0                	call   eax
c00263bb:	83 c4 10             	add    esp,0x10
c00263be:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c00263c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00263c9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00263cf:	83 ec 0c             	sub    esp,0xc
c00263d2:	50                   	push   eax
c00263d3:	e8 ce f3 ff ff       	call   c00257a6 <APIC::getBase()>
c00263d8:	83 c4 10             	add    esp,0x10
c00263db:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00263e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263e5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263eb:	0f b6 f8             	movzx  edi,al
c00263ee:	89 d0                	mov    eax,edx
c00263f0:	ba 00 00 00 00       	mov    edx,0x0
c00263f5:	89 c1                	mov    ecx,eax
c00263f7:	80 e5 ff             	and    ch,0xff
c00263fa:	89 cb                	mov    ebx,ecx
c00263fc:	0f b6 f2             	movzx  esi,dl
c00263ff:	89 d8                	mov    eax,ebx
c0026401:	89 f2                	mov    edx,esi
c0026403:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026407:	8d 5f 08             	lea    ebx,[edi+0x8]
c002640a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002640e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026412:	83 e0 00             	and    eax,0x0
c0026415:	09 d0                	or     eax,edx
c0026417:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002641b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002641f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026425:	8d 50 01             	lea    edx,[eax+0x1]
c0026428:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002642c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026432:	0f b6 d0             	movzx  edx,al
c0026435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026439:	83 c2 08             	add    edx,0x8
c002643c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026440:	0f b6 c9             	movzx  ecx,cl
c0026443:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026449:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002644d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026451:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026455:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002645b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002645f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026463:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026469:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002646d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026473:	83 ec 0c             	sub    esp,0xc
c0026476:	51                   	push   ecx
c0026477:	6a 01                	push   0x1
c0026479:	68 6e 62 02 c0       	push   0xc002626e
c002647e:	52                   	push   edx
c002647f:	50                   	push   eax
c0026480:	e8 93 de fe ff       	call   c0014318 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026485:	83 c4 20             	add    esp,0x20
c0026488:	89 c2                	mov    edx,eax
c002648a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002648e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026494:	b8 00 00 00 00       	mov    eax,0x0
c0026499:	5b                   	pop    ebx
c002649a:	5e                   	pop    esi
c002649b:	5f                   	pop    edi
c002649c:	c3                   	ret    
c002649d:	90                   	nop

c002649e <APICTimer::APICTimer()>:
c002649e:	83 ec 0c             	sub    esp,0xc
c00264a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264a5:	83 ec 08             	sub    esp,0x8
c00264a8:	68 84 d4 02 c0       	push   0xc002d484
c00264ad:	50                   	push   eax
c00264ae:	e8 f9 07 ff ff       	call   c0016cac <Timer::Timer(char const*)>
c00264b3:	83 c4 10             	add    esp,0x10
c00264b6:	ba 98 d4 02 c0       	mov    edx,0xc002d498
c00264bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264bf:	89 10                	mov    DWORD PTR [eax],edx
c00264c1:	90                   	nop
c00264c2:	83 c4 0c             	add    esp,0xc
c00264c5:	c3                   	ret    

c00264c6 <PIT::write(int)>:
c00264c6:	83 ec 10             	sub    esp,0x10
c00264c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00264cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264d1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00264d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00264db:	a3 a4 29 03 c0       	mov    ds:0xc00329a4,eax
c00264e0:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00264e5:	99                   	cdq    
c00264e6:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00264ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00264ee:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00264f5:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00264fa:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00264fe:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026503:	ee                   	out    dx,al
c0026504:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026508:	0f b6 c0             	movzx  eax,al
c002650b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026512:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026516:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002651a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002651f:	ee                   	out    dx,al
c0026520:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026524:	c1 f8 08             	sar    eax,0x8
c0026527:	0f b6 c0             	movzx  eax,al
c002652a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026531:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026535:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026539:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002653e:	ee                   	out    dx,al
c002653f:	90                   	nop
c0026540:	83 c4 10             	add    esp,0x10
c0026543:	c3                   	ret    

c0026544 <pitHandler(regs*, void*)>:
c0026544:	83 ec 0c             	sub    esp,0xc
c0026547:	a1 a4 29 03 c0       	mov    eax,ds:0xc00329a4
c002654c:	99                   	cdq    
c002654d:	52                   	push   edx
c002654e:	50                   	push   eax
c002654f:	6a 00                	push   0x0
c0026551:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026556:	e8 b1 04 00 00       	call   c0026a0c <__udivdi3>
c002655b:	83 c4 10             	add    esp,0x10
c002655e:	83 ec 08             	sub    esp,0x8
c0026561:	52                   	push   edx
c0026562:	50                   	push   eax
c0026563:	e8 d3 07 ff ff       	call   c0016d3b <timerHandler(unsigned long long)>
c0026568:	83 c4 10             	add    esp,0x10
c002656b:	90                   	nop
c002656c:	83 c4 0c             	add    esp,0xc
c002656f:	c3                   	ret    

c0026570 <PIT::open(int, int, void*)>:
c0026570:	83 ec 0c             	sub    esp,0xc
c0026573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026577:	8b 00                	mov    eax,DWORD PTR [eax]
c0026579:	83 c0 24             	add    eax,0x24
c002657c:	8b 00                	mov    eax,DWORD PTR [eax]
c002657e:	83 ec 08             	sub    esp,0x8
c0026581:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026589:	ff d0                	call   eax
c002658b:	83 c4 10             	add    esp,0x10
c002658e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026592:	83 ec 0c             	sub    esp,0xc
c0026595:	6a 00                	push   0x0
c0026597:	6a 01                	push   0x1
c0026599:	68 44 65 02 c0       	push   0xc0026544
c002659e:	6a 00                	push   0x0
c00265a0:	50                   	push   eax
c00265a1:	e8 72 dd fe ff       	call   c0014318 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00265a6:	83 c4 20             	add    esp,0x20
c00265a9:	89 c2                	mov    edx,eax
c00265ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265af:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00265b5:	b8 00 00 00 00       	mov    eax,0x0
c00265ba:	83 c4 0c             	add    esp,0xc
c00265bd:	c3                   	ret    

c00265be <PIT::close(int, int, void*)>:
c00265be:	83 ec 0c             	sub    esp,0xc
c00265c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265c5:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00265cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d3:	6a 01                	push   0x1
c00265d5:	68 44 65 02 c0       	push   0xc0026544
c00265da:	6a 00                	push   0x0
c00265dc:	50                   	push   eax
c00265dd:	e8 74 dd fe ff       	call   c0014356 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00265e2:	83 c4 10             	add    esp,0x10
c00265e5:	b8 00 00 00 00       	mov    eax,0x0
c00265ea:	83 c4 0c             	add    esp,0xc
c00265ed:	c3                   	ret    

c00265ee <PIT::PIT()>:
c00265ee:	83 ec 0c             	sub    esp,0xc
c00265f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f5:	83 ec 08             	sub    esp,0x8
c00265f8:	68 c0 d4 02 c0       	push   0xc002d4c0
c00265fd:	50                   	push   eax
c00265fe:	e8 a9 06 ff ff       	call   c0016cac <Timer::Timer(char const*)>
c0026603:	83 c4 10             	add    esp,0x10
c0026606:	ba e8 d4 02 c0       	mov    edx,0xc002d4e8
c002660b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002660f:	89 10                	mov    DWORD PTR [eax],edx
c0026611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026615:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002661b:	0f b6 d0             	movzx  edx,al
c002661e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026622:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002662d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026633:	0f b6 d0             	movzx  edx,al
c0026636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002663a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002663f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026643:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026649:	8d 50 01             	lea    edx,[eax+0x1]
c002664c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026650:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026656:	0f b6 d0             	movzx  edx,al
c0026659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002665d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026661:	83 e1 3f             	and    ecx,0x3f
c0026664:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026668:	90                   	nop
c0026669:	83 c4 0c             	add    esp,0xc
c002666c:	c3                   	ret    
c002666d:	66 90                	xchg   ax,ax
c002666f:	90                   	nop

c0026670 <avxDetect>:
c0026670:	b8 00 00 00 00       	mov    eax,0x0
c0026675:	c3                   	ret    

c0026676 <avxSave>:
c0026676:	c3                   	ret    

c0026677 <avxLoad>:
c0026677:	c3                   	ret    

c0026678 <avxInit>:
c0026678:	c3                   	ret    

c0026679 <avxClose>:
c0026679:	c3                   	ret    

c002667a <wouldSheSayYes>:
c002667a:	c3                   	ret    
c002667b:	49                   	dec    ecx
c002667c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026680:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026684:	75 20                	jne    c00266a6 <sseDetect.noSSE+0x1>
c0026686:	4e                   	dec    esi
c0026687:	79 61                	jns    c00266ea <x87Detect+0x14>
c0026689:	68 2e 2e 2e 00       	push   0x2e2e2e
c002668e:	66 90                	xchg   ax,ax

c0026690 <absolutelyNoChanceInHell>:
c0026690:	b8 01 00 00 00       	mov    eax,0x1
c0026695:	0f a2                	cpuid  
c0026697:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002669d:	74 06                	je     c00266a5 <sseDetect.noSSE>
c002669f:	b8 01 00 00 00       	mov    eax,0x1
c00266a4:	c3                   	ret    

c00266a5 <sseDetect.noSSE>:
c00266a5:	31 c0                	xor    eax,eax
c00266a7:	c3                   	ret    

c00266a8 <sseSave>:
c00266a8:	0f ae 44 24 08       	fxsave [esp+0x8]
c00266ad:	c3                   	ret    

c00266ae <sseLoad>:
c00266ae:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00266b3:	c3                   	ret    

c00266b4 <sseInit>:
c00266b4:	e8 43 00 00 00       	call   c00266fc <x87Init>
c00266b9:	0f 20 e0             	mov    eax,cr4
c00266bc:	66 0d 00 06          	or     ax,0x600
c00266c0:	0f 22 e0             	mov    cr4,eax
c00266c3:	c3                   	ret    

c00266c4 <sseClose>:
c00266c4:	c3                   	ret    
c00266c5:	66 90                	xchg   ax,ax
c00266c7:	66 90                	xchg   ax,ax
c00266c9:	66 90                	xchg   ax,ax
c00266cb:	66 90                	xchg   ax,ax
c00266cd:	66 90                	xchg   ax,ax
c00266cf:	90                   	nop

c00266d0 <value_37F>:
c00266d0:	7f 03                	jg     c00266d5 <value_37A+0x1>

c00266d2 <value_37E>:
c00266d2:	7e 03                	jle    c00266d7 <x87Detect+0x1>

c00266d4 <value_37A>:
c00266d4:	7a 03                	jp     c00266d9 <x87Detect+0x3>

c00266d6 <x87Detect>:
c00266d6:	b8 01 00 00 00       	mov    eax,0x1
c00266db:	0f a2                	cpuid  
c00266dd:	f7 c2 01 00 00 00    	test   edx,0x1
c00266e3:	74 06                	je     c00266eb <x87Detect.nox87>
c00266e5:	b8 01 00 00 00       	mov    eax,0x1
c00266ea:	c3                   	ret    

c00266eb <x87Detect.nox87>:
c00266eb:	b8 00 00 00 00       	mov    eax,0x0
c00266f0:	c3                   	ret    

c00266f1 <x87Save>:
c00266f1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00266f6:	c3                   	ret    

c00266f7 <x87Load>:
c00266f7:	dd 64 24 08          	frstor [esp+0x8]
c00266fb:	c3                   	ret    

c00266fc <x87Init>:
c00266fc:	9b db e3             	finit  
c00266ff:	0f 20 c0             	mov    eax,cr0
c0026702:	66 25 fb ff          	and    ax,0xfffb
c0026706:	66 0d 22 00          	or     ax,0x22
c002670a:	0f 22 c0             	mov    cr0,eax
c002670d:	0f 06                	clts   
c002670f:	d9 2d d4 66 02 c0    	fldcw  WORD PTR ds:0xc00266d4
c0026715:	c3                   	ret    

c0026716 <x87Close>:
c0026716:	c3                   	ret    
c0026717:	90                   	nop

c0026718 <__do_global_ctors_aux>:
c0026718:	a1 5c 92 02 c0       	mov    eax,ds:0xc002925c
c002671d:	83 f8 ff             	cmp    eax,0xffffffff
c0026720:	74 1a                	je     c002673c <__do_global_ctors_aux+0x24>
c0026722:	55                   	push   ebp
c0026723:	89 e5                	mov    ebp,esp
c0026725:	53                   	push   ebx
c0026726:	52                   	push   edx
c0026727:	bb 5c 92 02 c0       	mov    ebx,0xc002925c
c002672c:	ff d0                	call   eax
c002672e:	83 eb 04             	sub    ebx,0x4
c0026731:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026733:	83 f8 ff             	cmp    eax,0xffffffff
c0026736:	75 f4                	jne    c002672c <__do_global_ctors_aux+0x14>
c0026738:	58                   	pop    eax
c0026739:	5b                   	pop    ebx
c002673a:	5d                   	pop    ebp
c002673b:	c3                   	ret    
c002673c:	c3                   	ret    
c002673d:	66 90                	xchg   ax,ax
c002673f:	90                   	nop

c0026740 <__divdi3>:
c0026740:	55                   	push   ebp
c0026741:	57                   	push   edi
c0026742:	56                   	push   esi
c0026743:	53                   	push   ebx
c0026744:	83 ec 1c             	sub    esp,0x1c
c0026747:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002674b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002674f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026752:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026756:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002675a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002675e:	85 db                	test   ebx,ebx
c0026760:	0f 88 8e 00 00 00    	js     c00267f4 <__divdi3+0xb4>
c0026766:	89 dd                	mov    ebp,ebx
c0026768:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026770:	89 d3                	mov    ebx,edx
c0026772:	85 d2                	test   edx,edx
c0026774:	79 0d                	jns    c0026783 <__divdi3+0x43>
c0026776:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002677a:	f7 d8                	neg    eax
c002677c:	83 d2 00             	adc    edx,0x0
c002677f:	f7 da                	neg    edx
c0026781:	89 d3                	mov    ebx,edx
c0026783:	89 c7                	mov    edi,eax
c0026785:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026788:	85 db                	test   ebx,ebx
c002678a:	75 48                	jne    c00267d4 <__divdi3+0x94>
c002678c:	39 ef                	cmp    edi,ebp
c002678e:	76 24                	jbe    c00267b4 <__divdi3+0x74>
c0026790:	89 ea                	mov    edx,ebp
c0026792:	f7 f7                	div    edi
c0026794:	89 c1                	mov    ecx,eax
c0026796:	31 f6                	xor    esi,esi
c0026798:	89 c8                	mov    eax,ecx
c002679a:	89 f2                	mov    edx,esi
c002679c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00267a0:	85 c9                	test   ecx,ecx
c00267a2:	74 07                	je     c00267ab <__divdi3+0x6b>
c00267a4:	f7 d8                	neg    eax
c00267a6:	83 d2 00             	adc    edx,0x0
c00267a9:	f7 da                	neg    edx
c00267ab:	83 c4 1c             	add    esp,0x1c
c00267ae:	5b                   	pop    ebx
c00267af:	5e                   	pop    esi
c00267b0:	5f                   	pop    edi
c00267b1:	5d                   	pop    ebp
c00267b2:	c3                   	ret    
c00267b3:	90                   	nop
c00267b4:	85 ff                	test   edi,edi
c00267b6:	75 0b                	jne    c00267c3 <__divdi3+0x83>
c00267b8:	b8 01 00 00 00       	mov    eax,0x1
c00267bd:	31 d2                	xor    edx,edx
c00267bf:	f7 f3                	div    ebx
c00267c1:	89 c7                	mov    edi,eax
c00267c3:	31 d2                	xor    edx,edx
c00267c5:	89 e8                	mov    eax,ebp
c00267c7:	f7 f7                	div    edi
c00267c9:	89 c6                	mov    esi,eax
c00267cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00267ce:	f7 f7                	div    edi
c00267d0:	89 c1                	mov    ecx,eax
c00267d2:	eb c4                	jmp    c0026798 <__divdi3+0x58>
c00267d4:	39 eb                	cmp    ebx,ebp
c00267d6:	77 3c                	ja     c0026814 <__divdi3+0xd4>
c00267d8:	0f bd f3             	bsr    esi,ebx
c00267db:	83 f6 1f             	xor    esi,0x1f
c00267de:	75 40                	jne    c0026820 <__divdi3+0xe0>
c00267e0:	39 eb                	cmp    ebx,ebp
c00267e2:	72 09                	jb     c00267ed <__divdi3+0xad>
c00267e4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00267e7:	0f 87 97 00 00 00    	ja     c0026884 <__divdi3+0x144>
c00267ed:	b9 01 00 00 00       	mov    ecx,0x1
c00267f2:	eb a4                	jmp    c0026798 <__divdi3+0x58>
c00267f4:	f7 d9                	neg    ecx
c00267f6:	83 d3 00             	adc    ebx,0x0
c00267f9:	f7 db                	neg    ebx
c00267fb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267fe:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026802:	89 dd                	mov    ebp,ebx
c0026804:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002680c:	e9 5f ff ff ff       	jmp    c0026770 <__divdi3+0x30>
c0026811:	8d 76 00             	lea    esi,[esi+0x0]
c0026814:	31 f6                	xor    esi,esi
c0026816:	31 c9                	xor    ecx,ecx
c0026818:	e9 7b ff ff ff       	jmp    c0026798 <__divdi3+0x58>
c002681d:	8d 76 00             	lea    esi,[esi+0x0]
c0026820:	b8 20 00 00 00       	mov    eax,0x20
c0026825:	29 f0                	sub    eax,esi
c0026827:	89 f1                	mov    ecx,esi
c0026829:	d3 e3                	shl    ebx,cl
c002682b:	89 fa                	mov    edx,edi
c002682d:	88 c1                	mov    cl,al
c002682f:	d3 ea                	shr    edx,cl
c0026831:	09 da                	or     edx,ebx
c0026833:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026837:	89 f1                	mov    ecx,esi
c0026839:	d3 e7                	shl    edi,cl
c002683b:	89 eb                	mov    ebx,ebp
c002683d:	88 c1                	mov    cl,al
c002683f:	d3 eb                	shr    ebx,cl
c0026841:	89 f1                	mov    ecx,esi
c0026843:	d3 e5                	shl    ebp,cl
c0026845:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026848:	88 c1                	mov    cl,al
c002684a:	d3 ea                	shr    edx,cl
c002684c:	09 d5                	or     ebp,edx
c002684e:	89 e8                	mov    eax,ebp
c0026850:	89 da                	mov    edx,ebx
c0026852:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026856:	89 d3                	mov    ebx,edx
c0026858:	89 c5                	mov    ebp,eax
c002685a:	f7 e7                	mul    edi
c002685c:	39 d3                	cmp    ebx,edx
c002685e:	72 18                	jb     c0026878 <__divdi3+0x138>
c0026860:	74 0a                	je     c002686c <__divdi3+0x12c>
c0026862:	89 e9                	mov    ecx,ebp
c0026864:	31 f6                	xor    esi,esi
c0026866:	e9 2d ff ff ff       	jmp    c0026798 <__divdi3+0x58>
c002686b:	90                   	nop
c002686c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002686f:	89 f1                	mov    ecx,esi
c0026871:	d3 e7                	shl    edi,cl
c0026873:	39 c7                	cmp    edi,eax
c0026875:	73 eb                	jae    c0026862 <__divdi3+0x122>
c0026877:	90                   	nop
c0026878:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002687b:	31 f6                	xor    esi,esi
c002687d:	e9 16 ff ff ff       	jmp    c0026798 <__divdi3+0x58>
c0026882:	66 90                	xchg   ax,ax
c0026884:	31 c9                	xor    ecx,ecx
c0026886:	e9 0d ff ff ff       	jmp    c0026798 <__divdi3+0x58>
c002688b:	90                   	nop

c002688c <__moddi3>:
c002688c:	55                   	push   ebp
c002688d:	57                   	push   edi
c002688e:	56                   	push   esi
c002688f:	53                   	push   ebx
c0026890:	83 ec 2c             	sub    esp,0x2c
c0026893:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026897:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002689b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002689f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00268a3:	85 db                	test   ebx,ebx
c00268a5:	0f 88 85 00 00 00    	js     c0026930 <__moddi3+0xa4>
c00268ab:	89 de                	mov    esi,ebx
c00268ad:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00268b5:	89 d7                	mov    edi,edx
c00268b7:	85 d2                	test   edx,edx
c00268b9:	79 09                	jns    c00268c4 <__moddi3+0x38>
c00268bb:	f7 d8                	neg    eax
c00268bd:	83 d2 00             	adc    edx,0x0
c00268c0:	f7 da                	neg    edx
c00268c2:	89 d7                	mov    edi,edx
c00268c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268c8:	89 cd                	mov    ebp,ecx
c00268ca:	85 ff                	test   edi,edi
c00268cc:	75 52                	jne    c0026920 <__moddi3+0x94>
c00268ce:	89 c3                	mov    ebx,eax
c00268d0:	39 f0                	cmp    eax,esi
c00268d2:	76 24                	jbe    c00268f8 <__moddi3+0x6c>
c00268d4:	89 c8                	mov    eax,ecx
c00268d6:	89 f2                	mov    edx,esi
c00268d8:	f7 f3                	div    ebx
c00268da:	89 d6                	mov    esi,edx
c00268dc:	89 f0                	mov    eax,esi
c00268de:	31 d2                	xor    edx,edx
c00268e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00268e4:	85 c9                	test   ecx,ecx
c00268e6:	74 07                	je     c00268ef <__moddi3+0x63>
c00268e8:	f7 d8                	neg    eax
c00268ea:	83 d2 00             	adc    edx,0x0
c00268ed:	f7 da                	neg    edx
c00268ef:	83 c4 2c             	add    esp,0x2c
c00268f2:	5b                   	pop    ebx
c00268f3:	5e                   	pop    esi
c00268f4:	5f                   	pop    edi
c00268f5:	5d                   	pop    ebp
c00268f6:	c3                   	ret    
c00268f7:	90                   	nop
c00268f8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00268fc:	85 db                	test   ebx,ebx
c00268fe:	75 0d                	jne    c002690d <__moddi3+0x81>
c0026900:	b8 01 00 00 00       	mov    eax,0x1
c0026905:	31 d2                	xor    edx,edx
c0026907:	f7 f7                	div    edi
c0026909:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002690d:	89 f0                	mov    eax,esi
c002690f:	31 d2                	xor    edx,edx
c0026911:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026915:	f7 f7                	div    edi
c0026917:	89 e8                	mov    eax,ebp
c0026919:	f7 f7                	div    edi
c002691b:	89 d6                	mov    esi,edx
c002691d:	eb bd                	jmp    c00268dc <__moddi3+0x50>
c002691f:	90                   	nop
c0026920:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026924:	39 f7                	cmp    edi,esi
c0026926:	76 20                	jbe    c0026948 <__moddi3+0xbc>
c0026928:	89 c8                	mov    eax,ecx
c002692a:	89 f2                	mov    edx,esi
c002692c:	eb b2                	jmp    c00268e0 <__moddi3+0x54>
c002692e:	66 90                	xchg   ax,ax
c0026930:	f7 d9                	neg    ecx
c0026932:	83 d3 00             	adc    ebx,0x0
c0026935:	f7 db                	neg    ebx
c0026937:	89 de                	mov    esi,ebx
c0026939:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026941:	e9 6f ff ff ff       	jmp    c00268b5 <__moddi3+0x29>
c0026946:	66 90                	xchg   ax,ax
c0026948:	0f bd c7             	bsr    eax,edi
c002694b:	83 f0 1f             	xor    eax,0x1f
c002694e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026952:	75 24                	jne    c0026978 <__moddi3+0xec>
c0026954:	39 f7                	cmp    edi,esi
c0026956:	72 06                	jb     c002695e <__moddi3+0xd2>
c0026958:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002695c:	77 0c                	ja     c002696a <__moddi3+0xde>
c002695e:	89 e9                	mov    ecx,ebp
c0026960:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026964:	19 fe                	sbb    esi,edi
c0026966:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002696a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002696e:	89 f2                	mov    edx,esi
c0026970:	e9 6b ff ff ff       	jmp    c00268e0 <__moddi3+0x54>
c0026975:	8d 76 00             	lea    esi,[esi+0x0]
c0026978:	b8 20 00 00 00       	mov    eax,0x20
c002697d:	89 c2                	mov    edx,eax
c002697f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026983:	29 da                	sub    edx,ebx
c0026985:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026989:	88 d9                	mov    cl,bl
c002698b:	d3 e7                	shl    edi,cl
c002698d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026991:	88 d1                	mov    cl,dl
c0026993:	d3 e8                	shr    eax,cl
c0026995:	09 c7                	or     edi,eax
c0026997:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002699b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002699f:	89 d8                	mov    eax,ebx
c00269a1:	88 d9                	mov    cl,bl
c00269a3:	d3 e7                	shl    edi,cl
c00269a5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00269a9:	89 f3                	mov    ebx,esi
c00269ab:	88 d1                	mov    cl,dl
c00269ad:	d3 eb                	shr    ebx,cl
c00269af:	89 c7                	mov    edi,eax
c00269b1:	88 c1                	mov    cl,al
c00269b3:	d3 e6                	shl    esi,cl
c00269b5:	89 e8                	mov    eax,ebp
c00269b7:	88 d1                	mov    cl,dl
c00269b9:	d3 e8                	shr    eax,cl
c00269bb:	09 f0                	or     eax,esi
c00269bd:	89 f9                	mov    ecx,edi
c00269bf:	d3 e5                	shl    ebp,cl
c00269c1:	89 da                	mov    edx,ebx
c00269c3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00269c7:	89 d3                	mov    ebx,edx
c00269c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00269cd:	89 c6                	mov    esi,eax
c00269cf:	89 d1                	mov    ecx,edx
c00269d1:	39 d3                	cmp    ebx,edx
c00269d3:	72 27                	jb     c00269fc <__moddi3+0x170>
c00269d5:	74 21                	je     c00269f8 <__moddi3+0x16c>
c00269d7:	29 f5                	sub    ebp,esi
c00269d9:	19 cb                	sbb    ebx,ecx
c00269db:	89 de                	mov    esi,ebx
c00269dd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00269e1:	d3 e6                	shl    esi,cl
c00269e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00269e7:	89 f9                	mov    ecx,edi
c00269e9:	d3 ed                	shr    ebp,cl
c00269eb:	09 ee                	or     esi,ebp
c00269ed:	89 f0                	mov    eax,esi
c00269ef:	d3 eb                	shr    ebx,cl
c00269f1:	89 da                	mov    edx,ebx
c00269f3:	e9 e8 fe ff ff       	jmp    c00268e0 <__moddi3+0x54>
c00269f8:	39 c5                	cmp    ebp,eax
c00269fa:	73 db                	jae    c00269d7 <__moddi3+0x14b>
c00269fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026a00:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026a04:	89 d1                	mov    ecx,edx
c0026a06:	89 c6                	mov    esi,eax
c0026a08:	eb cd                	jmp    c00269d7 <__moddi3+0x14b>
c0026a0a:	66 90                	xchg   ax,ax

c0026a0c <__udivdi3>:
c0026a0c:	55                   	push   ebp
c0026a0d:	57                   	push   edi
c0026a0e:	56                   	push   esi
c0026a0f:	53                   	push   ebx
c0026a10:	83 ec 1c             	sub    esp,0x1c
c0026a13:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026a17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026a1b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a1f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026a23:	85 d2                	test   edx,edx
c0026a25:	75 41                	jne    c0026a68 <__udivdi3+0x5c>
c0026a27:	39 f7                	cmp    edi,esi
c0026a29:	76 15                	jbe    c0026a40 <__udivdi3+0x34>
c0026a2b:	89 e8                	mov    eax,ebp
c0026a2d:	89 f2                	mov    edx,esi
c0026a2f:	f7 f7                	div    edi
c0026a31:	31 db                	xor    ebx,ebx
c0026a33:	89 da                	mov    edx,ebx
c0026a35:	83 c4 1c             	add    esp,0x1c
c0026a38:	5b                   	pop    ebx
c0026a39:	5e                   	pop    esi
c0026a3a:	5f                   	pop    edi
c0026a3b:	5d                   	pop    ebp
c0026a3c:	c3                   	ret    
c0026a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0026a40:	89 f9                	mov    ecx,edi
c0026a42:	85 ff                	test   edi,edi
c0026a44:	75 0b                	jne    c0026a51 <__udivdi3+0x45>
c0026a46:	b8 01 00 00 00       	mov    eax,0x1
c0026a4b:	31 d2                	xor    edx,edx
c0026a4d:	f7 f7                	div    edi
c0026a4f:	89 c1                	mov    ecx,eax
c0026a51:	31 d2                	xor    edx,edx
c0026a53:	89 f0                	mov    eax,esi
c0026a55:	f7 f1                	div    ecx
c0026a57:	89 c3                	mov    ebx,eax
c0026a59:	89 e8                	mov    eax,ebp
c0026a5b:	f7 f1                	div    ecx
c0026a5d:	89 da                	mov    edx,ebx
c0026a5f:	83 c4 1c             	add    esp,0x1c
c0026a62:	5b                   	pop    ebx
c0026a63:	5e                   	pop    esi
c0026a64:	5f                   	pop    edi
c0026a65:	5d                   	pop    ebp
c0026a66:	c3                   	ret    
c0026a67:	90                   	nop
c0026a68:	39 f2                	cmp    edx,esi
c0026a6a:	77 1c                	ja     c0026a88 <__udivdi3+0x7c>
c0026a6c:	0f bd da             	bsr    ebx,edx
c0026a6f:	83 f3 1f             	xor    ebx,0x1f
c0026a72:	75 24                	jne    c0026a98 <__udivdi3+0x8c>
c0026a74:	39 f2                	cmp    edx,esi
c0026a76:	72 08                	jb     c0026a80 <__udivdi3+0x74>
c0026a78:	39 ef                	cmp    edi,ebp
c0026a7a:	0f 87 84 00 00 00    	ja     c0026b04 <__udivdi3+0xf8>
c0026a80:	b8 01 00 00 00       	mov    eax,0x1
c0026a85:	eb ac                	jmp    c0026a33 <__udivdi3+0x27>
c0026a87:	90                   	nop
c0026a88:	31 db                	xor    ebx,ebx
c0026a8a:	31 c0                	xor    eax,eax
c0026a8c:	89 da                	mov    edx,ebx
c0026a8e:	83 c4 1c             	add    esp,0x1c
c0026a91:	5b                   	pop    ebx
c0026a92:	5e                   	pop    esi
c0026a93:	5f                   	pop    edi
c0026a94:	5d                   	pop    ebp
c0026a95:	c3                   	ret    
c0026a96:	66 90                	xchg   ax,ax
c0026a98:	b8 20 00 00 00       	mov    eax,0x20
c0026a9d:	29 d8                	sub    eax,ebx
c0026a9f:	88 d9                	mov    cl,bl
c0026aa1:	d3 e2                	shl    edx,cl
c0026aa3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026aa7:	89 fa                	mov    edx,edi
c0026aa9:	88 c1                	mov    cl,al
c0026aab:	d3 ea                	shr    edx,cl
c0026aad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026ab1:	09 d1                	or     ecx,edx
c0026ab3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026ab7:	88 d9                	mov    cl,bl
c0026ab9:	d3 e7                	shl    edi,cl
c0026abb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026abf:	89 f7                	mov    edi,esi
c0026ac1:	88 c1                	mov    cl,al
c0026ac3:	d3 ef                	shr    edi,cl
c0026ac5:	88 d9                	mov    cl,bl
c0026ac7:	d3 e6                	shl    esi,cl
c0026ac9:	89 ea                	mov    edx,ebp
c0026acb:	88 c1                	mov    cl,al
c0026acd:	d3 ea                	shr    edx,cl
c0026acf:	09 d6                	or     esi,edx
c0026ad1:	89 f0                	mov    eax,esi
c0026ad3:	89 fa                	mov    edx,edi
c0026ad5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026ad9:	89 d7                	mov    edi,edx
c0026adb:	89 c6                	mov    esi,eax
c0026add:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026ae1:	39 d7                	cmp    edi,edx
c0026ae3:	72 13                	jb     c0026af8 <__udivdi3+0xec>
c0026ae5:	74 09                	je     c0026af0 <__udivdi3+0xe4>
c0026ae7:	89 f0                	mov    eax,esi
c0026ae9:	31 db                	xor    ebx,ebx
c0026aeb:	e9 43 ff ff ff       	jmp    c0026a33 <__udivdi3+0x27>
c0026af0:	88 d9                	mov    cl,bl
c0026af2:	d3 e5                	shl    ebp,cl
c0026af4:	39 c5                	cmp    ebp,eax
c0026af6:	73 ef                	jae    c0026ae7 <__udivdi3+0xdb>
c0026af8:	8d 46 ff             	lea    eax,[esi-0x1]
c0026afb:	31 db                	xor    ebx,ebx
c0026afd:	e9 31 ff ff ff       	jmp    c0026a33 <__udivdi3+0x27>
c0026b02:	66 90                	xchg   ax,ax
c0026b04:	31 c0                	xor    eax,eax
c0026b06:	e9 28 ff ff ff       	jmp    c0026a33 <__udivdi3+0x27>
c0026b0b:	90                   	nop

c0026b0c <__umoddi3>:
c0026b0c:	55                   	push   ebp
c0026b0d:	57                   	push   edi
c0026b0e:	56                   	push   esi
c0026b0f:	53                   	push   ebx
c0026b10:	83 ec 1c             	sub    esp,0x1c
c0026b13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026b17:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b1b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026b1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026b23:	89 da                	mov    edx,ebx
c0026b25:	85 c0                	test   eax,eax
c0026b27:	75 37                	jne    c0026b60 <__umoddi3+0x54>
c0026b29:	39 df                	cmp    edi,ebx
c0026b2b:	76 13                	jbe    c0026b40 <__umoddi3+0x34>
c0026b2d:	89 f0                	mov    eax,esi
c0026b2f:	f7 f7                	div    edi
c0026b31:	89 d0                	mov    eax,edx
c0026b33:	31 d2                	xor    edx,edx
c0026b35:	83 c4 1c             	add    esp,0x1c
c0026b38:	5b                   	pop    ebx
c0026b39:	5e                   	pop    esi
c0026b3a:	5f                   	pop    edi
c0026b3b:	5d                   	pop    ebp
c0026b3c:	c3                   	ret    
c0026b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0026b40:	89 fd                	mov    ebp,edi
c0026b42:	85 ff                	test   edi,edi
c0026b44:	75 0b                	jne    c0026b51 <__umoddi3+0x45>
c0026b46:	b8 01 00 00 00       	mov    eax,0x1
c0026b4b:	31 d2                	xor    edx,edx
c0026b4d:	f7 f7                	div    edi
c0026b4f:	89 c5                	mov    ebp,eax
c0026b51:	89 d8                	mov    eax,ebx
c0026b53:	31 d2                	xor    edx,edx
c0026b55:	f7 f5                	div    ebp
c0026b57:	89 f0                	mov    eax,esi
c0026b59:	f7 f5                	div    ebp
c0026b5b:	89 d0                	mov    eax,edx
c0026b5d:	eb d4                	jmp    c0026b33 <__umoddi3+0x27>
c0026b5f:	90                   	nop
c0026b60:	89 f1                	mov    ecx,esi
c0026b62:	39 d8                	cmp    eax,ebx
c0026b64:	76 0a                	jbe    c0026b70 <__umoddi3+0x64>
c0026b66:	89 f0                	mov    eax,esi
c0026b68:	83 c4 1c             	add    esp,0x1c
c0026b6b:	5b                   	pop    ebx
c0026b6c:	5e                   	pop    esi
c0026b6d:	5f                   	pop    edi
c0026b6e:	5d                   	pop    ebp
c0026b6f:	c3                   	ret    
c0026b70:	0f bd e8             	bsr    ebp,eax
c0026b73:	83 f5 1f             	xor    ebp,0x1f
c0026b76:	75 1c                	jne    c0026b94 <__umoddi3+0x88>
c0026b78:	39 d8                	cmp    eax,ebx
c0026b7a:	72 04                	jb     c0026b80 <__umoddi3+0x74>
c0026b7c:	39 f7                	cmp    edi,esi
c0026b7e:	77 08                	ja     c0026b88 <__umoddi3+0x7c>
c0026b80:	89 da                	mov    edx,ebx
c0026b82:	29 fe                	sub    esi,edi
c0026b84:	19 c2                	sbb    edx,eax
c0026b86:	89 f1                	mov    ecx,esi
c0026b88:	89 c8                	mov    eax,ecx
c0026b8a:	83 c4 1c             	add    esp,0x1c
c0026b8d:	5b                   	pop    ebx
c0026b8e:	5e                   	pop    esi
c0026b8f:	5f                   	pop    edi
c0026b90:	5d                   	pop    ebp
c0026b91:	c3                   	ret    
c0026b92:	66 90                	xchg   ax,ax
c0026b94:	ba 20 00 00 00       	mov    edx,0x20
c0026b99:	29 ea                	sub    edx,ebp
c0026b9b:	89 e9                	mov    ecx,ebp
c0026b9d:	d3 e0                	shl    eax,cl
c0026b9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026ba3:	89 f8                	mov    eax,edi
c0026ba5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026ba9:	88 d1                	mov    cl,dl
c0026bab:	d3 e8                	shr    eax,cl
c0026bad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026bb1:	09 c1                	or     ecx,eax
c0026bb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026bb7:	89 e9                	mov    ecx,ebp
c0026bb9:	d3 e7                	shl    edi,cl
c0026bbb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026bbf:	89 d8                	mov    eax,ebx
c0026bc1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026bc5:	88 d1                	mov    cl,dl
c0026bc7:	d3 e8                	shr    eax,cl
c0026bc9:	89 c7                	mov    edi,eax
c0026bcb:	89 e9                	mov    ecx,ebp
c0026bcd:	d3 e3                	shl    ebx,cl
c0026bcf:	89 f0                	mov    eax,esi
c0026bd1:	88 d1                	mov    cl,dl
c0026bd3:	d3 e8                	shr    eax,cl
c0026bd5:	09 d8                	or     eax,ebx
c0026bd7:	89 e9                	mov    ecx,ebp
c0026bd9:	d3 e6                	shl    esi,cl
c0026bdb:	89 f3                	mov    ebx,esi
c0026bdd:	89 fa                	mov    edx,edi
c0026bdf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026be3:	89 d1                	mov    ecx,edx
c0026be5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026be9:	89 c6                	mov    esi,eax
c0026beb:	89 d7                	mov    edi,edx
c0026bed:	39 d1                	cmp    ecx,edx
c0026bef:	72 27                	jb     c0026c18 <__umoddi3+0x10c>
c0026bf1:	74 21                	je     c0026c14 <__umoddi3+0x108>
c0026bf3:	89 ca                	mov    edx,ecx
c0026bf5:	29 f3                	sub    ebx,esi
c0026bf7:	19 fa                	sbb    edx,edi
c0026bf9:	89 d0                	mov    eax,edx
c0026bfb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026bff:	d3 e0                	shl    eax,cl
c0026c01:	89 e9                	mov    ecx,ebp
c0026c03:	d3 eb                	shr    ebx,cl
c0026c05:	09 d8                	or     eax,ebx
c0026c07:	d3 ea                	shr    edx,cl
c0026c09:	83 c4 1c             	add    esp,0x1c
c0026c0c:	5b                   	pop    ebx
c0026c0d:	5e                   	pop    esi
c0026c0e:	5f                   	pop    edi
c0026c0f:	5d                   	pop    ebp
c0026c10:	c3                   	ret    
c0026c11:	8d 76 00             	lea    esi,[esi+0x0]
c0026c14:	39 c3                	cmp    ebx,eax
c0026c16:	73 db                	jae    c0026bf3 <__umoddi3+0xe7>
c0026c18:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026c1c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026c20:	89 d7                	mov    edi,edx
c0026c22:	89 c6                	mov    esi,eax
c0026c24:	eb cd                	jmp    c0026bf3 <__umoddi3+0xe7>

c0026c26 <__addsf3>:
c0026c26:	55                   	push   ebp
c0026c27:	89 e5                	mov    ebp,esp
c0026c29:	57                   	push   edi
c0026c2a:	56                   	push   esi
c0026c2b:	53                   	push   ebx
c0026c2c:	83 ec 08             	sub    esp,0x8
c0026c2f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026c32:	89 fa                	mov    edx,edi
c0026c34:	89 f8                	mov    eax,edi
c0026c36:	c1 f8 17             	sar    eax,0x17
c0026c39:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c3c:	c1 e2 08             	shl    edx,0x8
c0026c3f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026c45:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026c48:	89 de                	mov    esi,ebx
c0026c4a:	c1 fe 17             	sar    esi,0x17
c0026c4d:	c1 e3 08             	shl    ebx,0x8
c0026c50:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c56:	31 f0                	xor    eax,esi
c0026c58:	0f 88 3b 01 00 00    	js     c0026d99 <__addsf3+0x173>
c0026c5e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026c61:	29 f1                	sub    ecx,esi
c0026c63:	85 c9                	test   ecx,ecx
c0026c65:	7e 54                	jle    c0026cbb <__addsf3+0x95>
c0026c67:	89 f0                	mov    eax,esi
c0026c69:	84 c0                	test   al,al
c0026c6b:	75 10                	jne    c0026c7d <__addsf3+0x57>
c0026c6d:	85 db                	test   ebx,ebx
c0026c6f:	0f 84 aa 02 00 00    	je     c0026f1f <__addsf3+0x2f9>
c0026c75:	49                   	dec    ecx
c0026c76:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c79:	74 38                	je     c0026cb3 <__addsf3+0x8d>
c0026c7b:	eb 13                	jmp    c0026c90 <__addsf3+0x6a>
c0026c7d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c80:	f7 d0                	not    eax
c0026c82:	84 c0                	test   al,al
c0026c84:	0f 84 95 02 00 00    	je     c0026f1f <__addsf3+0x2f9>
c0026c8a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c90:	83 f9 1f             	cmp    ecx,0x1f
c0026c93:	0f 8f 86 02 00 00    	jg     c0026f1f <__addsf3+0x2f9>
c0026c99:	89 de                	mov    esi,ebx
c0026c9b:	d3 ee                	shr    esi,cl
c0026c9d:	b8 20 00 00 00       	mov    eax,0x20
c0026ca2:	29 c8                	sub    eax,ecx
c0026ca4:	89 c1                	mov    ecx,eax
c0026ca6:	d3 e3                	shl    ebx,cl
c0026ca8:	31 c0                	xor    eax,eax
c0026caa:	85 db                	test   ebx,ebx
c0026cac:	0f 95 c0             	setne  al
c0026caf:	09 f0                	or     eax,esi
c0026cb1:	01 d0                	add    eax,edx
c0026cb3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026cb6:	e9 b6 00 00 00       	jmp    c0026d71 <__addsf3+0x14b>
c0026cbb:	74 5c                	je     c0026d19 <__addsf3+0xf3>
c0026cbd:	89 f1                	mov    ecx,esi
c0026cbf:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026cc2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cc5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026cc9:	75 14                	jne    c0026cdf <__addsf3+0xb9>
c0026ccb:	85 d2                	test   edx,edx
c0026ccd:	0f 84 4c 02 00 00    	je     c0026f1f <__addsf3+0x2f9>
c0026cd3:	49                   	dec    ecx
c0026cd4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026cd7:	0f 84 94 00 00 00    	je     c0026d71 <__addsf3+0x14b>
c0026cdd:	eb 12                	jmp    c0026cf1 <__addsf3+0xcb>
c0026cdf:	89 f0                	mov    eax,esi
c0026ce1:	f7 d0                	not    eax
c0026ce3:	84 c0                	test   al,al
c0026ce5:	0f 84 34 02 00 00    	je     c0026f1f <__addsf3+0x2f9>
c0026ceb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026cf1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cf4:	83 f9 1f             	cmp    ecx,0x1f
c0026cf7:	0f 8f 22 02 00 00    	jg     c0026f1f <__addsf3+0x2f9>
c0026cfd:	89 d7                	mov    edi,edx
c0026cff:	d3 ef                	shr    edi,cl
c0026d01:	b8 20 00 00 00       	mov    eax,0x20
c0026d06:	29 c8                	sub    eax,ecx
c0026d08:	89 c1                	mov    ecx,eax
c0026d0a:	d3 e2                	shl    edx,cl
c0026d0c:	31 c0                	xor    eax,eax
c0026d0e:	85 d2                	test   edx,edx
c0026d10:	0f 95 c0             	setne  al
c0026d13:	09 f8                	or     eax,edi
c0026d15:	01 d8                	add    eax,ebx
c0026d17:	eb 58                	jmp    c0026d71 <__addsf3+0x14b>
c0026d19:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d1c:	8d 70 01             	lea    esi,[eax+0x1]
c0026d1f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026d25:	75 32                	jne    c0026d59 <__addsf3+0x133>
c0026d27:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d2b:	75 1f                	jne    c0026d4c <__addsf3+0x126>
c0026d2d:	85 d2                	test   edx,edx
c0026d2f:	0f 84 e0 01 00 00    	je     c0026f15 <__addsf3+0x2ef>
c0026d35:	85 db                	test   ebx,ebx
c0026d37:	0f 84 e2 01 00 00    	je     c0026f1f <__addsf3+0x2f9>
c0026d3d:	89 d0                	mov    eax,edx
c0026d3f:	01 d8                	add    eax,ebx
c0026d41:	0f 89 a9 01 00 00    	jns    c0026ef0 <__addsf3+0x2ca>
c0026d47:	e9 9d 01 00 00       	jmp    c0026ee9 <__addsf3+0x2c3>
c0026d4c:	85 d2                	test   edx,edx
c0026d4e:	0f 85 cb 01 00 00    	jne    c0026f1f <__addsf3+0x2f9>
c0026d54:	e9 bc 01 00 00       	jmp    c0026f15 <__addsf3+0x2ef>
c0026d59:	31 c0                	xor    eax,eax
c0026d5b:	89 f1                	mov    ecx,esi
c0026d5d:	f7 d1                	not    ecx
c0026d5f:	84 c9                	test   cl,cl
c0026d61:	0f 84 90 01 00 00    	je     c0026ef7 <__addsf3+0x2d1>
c0026d67:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d6a:	d1 e8                	shr    eax,1
c0026d6c:	e9 86 01 00 00       	jmp    c0026ef7 <__addsf3+0x2d1>
c0026d71:	85 c0                	test   eax,eax
c0026d73:	0f 89 7e 01 00 00    	jns    c0026ef7 <__addsf3+0x2d1>
c0026d79:	46                   	inc    esi
c0026d7a:	89 f2                	mov    edx,esi
c0026d7c:	f7 d2                	not    edx
c0026d7e:	84 d2                	test   dl,dl
c0026d80:	0f 84 6f 01 00 00    	je     c0026ef5 <__addsf3+0x2cf>
c0026d86:	89 c2                	mov    edx,eax
c0026d88:	83 e2 01             	and    edx,0x1
c0026d8b:	d1 e8                	shr    eax,1
c0026d8d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d92:	09 d0                	or     eax,edx
c0026d94:	e9 5e 01 00 00       	jmp    c0026ef7 <__addsf3+0x2d1>
c0026d99:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026d9d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026da0:	89 f0                	mov    eax,esi
c0026da2:	0f b6 c0             	movzx  eax,al
c0026da5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026da8:	29 c1                	sub    ecx,eax
c0026daa:	85 c9                	test   ecx,ecx
c0026dac:	7e 55                	jle    c0026e03 <__addsf3+0x1dd>
c0026dae:	85 c0                	test   eax,eax
c0026db0:	75 11                	jne    c0026dc3 <__addsf3+0x19d>
c0026db2:	85 db                	test   ebx,ebx
c0026db4:	0f 84 65 01 00 00    	je     c0026f1f <__addsf3+0x2f9>
c0026dba:	49                   	dec    ecx
c0026dbb:	75 19                	jne    c0026dd6 <__addsf3+0x1b0>
c0026dbd:	89 d0                	mov    eax,edx
c0026dbf:	29 d8                	sub    eax,ebx
c0026dc1:	eb 38                	jmp    c0026dfb <__addsf3+0x1d5>
c0026dc3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026dc6:	f7 d0                	not    eax
c0026dc8:	84 c0                	test   al,al
c0026dca:	0f 84 4f 01 00 00    	je     c0026f1f <__addsf3+0x2f9>
c0026dd0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026dd6:	83 f9 1f             	cmp    ecx,0x1f
c0026dd9:	0f 8f 40 01 00 00    	jg     c0026f1f <__addsf3+0x2f9>
c0026ddf:	89 de                	mov    esi,ebx
c0026de1:	d3 ee                	shr    esi,cl
c0026de3:	b8 20 00 00 00       	mov    eax,0x20
c0026de8:	29 c8                	sub    eax,ecx
c0026dea:	89 c1                	mov    ecx,eax
c0026dec:	d3 e3                	shl    ebx,cl
c0026dee:	31 c0                	xor    eax,eax
c0026df0:	85 db                	test   ebx,ebx
c0026df2:	0f 95 c0             	setne  al
c0026df5:	09 f0                	or     eax,esi
c0026df7:	29 c2                	sub    edx,eax
c0026df9:	89 d0                	mov    eax,edx
c0026dfb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026dfe:	e9 af 00 00 00       	jmp    c0026eb2 <__addsf3+0x28c>
c0026e03:	74 5c                	je     c0026e61 <__addsf3+0x23b>
c0026e05:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026e08:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e0b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e0f:	75 14                	jne    c0026e25 <__addsf3+0x1ff>
c0026e11:	85 d2                	test   edx,edx
c0026e13:	0f 84 06 01 00 00    	je     c0026f1f <__addsf3+0x2f9>
c0026e19:	48                   	dec    eax
c0026e1a:	75 1b                	jne    c0026e37 <__addsf3+0x211>
c0026e1c:	89 d8                	mov    eax,ebx
c0026e1e:	29 d0                	sub    eax,edx
c0026e20:	e9 8d 00 00 00       	jmp    c0026eb2 <__addsf3+0x28c>
c0026e25:	89 f1                	mov    ecx,esi
c0026e27:	f7 d1                	not    ecx
c0026e29:	84 c9                	test   cl,cl
c0026e2b:	0f 84 ee 00 00 00    	je     c0026f1f <__addsf3+0x2f9>
c0026e31:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e37:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e3a:	83 f8 1f             	cmp    eax,0x1f
c0026e3d:	0f 8f dc 00 00 00    	jg     c0026f1f <__addsf3+0x2f9>
c0026e43:	89 d7                	mov    edi,edx
c0026e45:	88 c1                	mov    cl,al
c0026e47:	d3 ef                	shr    edi,cl
c0026e49:	b9 20 00 00 00       	mov    ecx,0x20
c0026e4e:	29 c1                	sub    ecx,eax
c0026e50:	d3 e2                	shl    edx,cl
c0026e52:	31 c0                	xor    eax,eax
c0026e54:	85 d2                	test   edx,edx
c0026e56:	0f 95 c0             	setne  al
c0026e59:	09 f8                	or     eax,edi
c0026e5b:	29 c3                	sub    ebx,eax
c0026e5d:	89 d8                	mov    eax,ebx
c0026e5f:	eb 51                	jmp    c0026eb2 <__addsf3+0x28c>
c0026e61:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e64:	40                   	inc    eax
c0026e65:	a8 fe                	test   al,0xfe
c0026e67:	75 3d                	jne    c0026ea6 <__addsf3+0x280>
c0026e69:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e6d:	0f 85 a7 00 00 00    	jne    c0026f1a <__addsf3+0x2f4>
c0026e73:	85 d2                	test   edx,edx
c0026e75:	75 12                	jne    c0026e89 <__addsf3+0x263>
c0026e77:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e7a:	85 db                	test   ebx,ebx
c0026e7c:	0f 85 9d 00 00 00    	jne    c0026f1f <__addsf3+0x2f9>
c0026e82:	31 ff                	xor    edi,edi
c0026e84:	e9 96 00 00 00       	jmp    c0026f1f <__addsf3+0x2f9>
c0026e89:	85 db                	test   ebx,ebx
c0026e8b:	0f 84 8e 00 00 00    	je     c0026f1f <__addsf3+0x2f9>
c0026e91:	89 d0                	mov    eax,edx
c0026e93:	29 d8                	sub    eax,ebx
c0026e95:	79 06                	jns    c0026e9d <__addsf3+0x277>
c0026e97:	89 d8                	mov    eax,ebx
c0026e99:	29 d0                	sub    eax,edx
c0026e9b:	eb 5a                	jmp    c0026ef7 <__addsf3+0x2d1>
c0026e9d:	bf 00 00 00 00       	mov    edi,0x0
c0026ea2:	74 7b                	je     c0026f1f <__addsf3+0x2f9>
c0026ea4:	eb 4a                	jmp    c0026ef0 <__addsf3+0x2ca>
c0026ea6:	89 d0                	mov    eax,edx
c0026ea8:	29 d8                	sub    eax,ebx
c0026eaa:	79 12                	jns    c0026ebe <__addsf3+0x298>
c0026eac:	89 d8                	mov    eax,ebx
c0026eae:	29 d0                	sub    eax,edx
c0026eb0:	eb 09                	jmp    c0026ebb <__addsf3+0x295>
c0026eb2:	85 c0                	test   eax,eax
c0026eb4:	79 41                	jns    c0026ef7 <__addsf3+0x2d1>
c0026eb6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ebb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026ebe:	31 f6                	xor    esi,esi
c0026ec0:	85 c0                	test   eax,eax
c0026ec2:	74 33                	je     c0026ef7 <__addsf3+0x2d1>
c0026ec4:	0f bd c8             	bsr    ecx,eax
c0026ec7:	83 f1 1f             	xor    ecx,0x1f
c0026eca:	d3 e0                	shl    eax,cl
c0026ecc:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026ed0:	39 ca                	cmp    edx,ecx
c0026ed2:	7f 10                	jg     c0026ee4 <__addsf3+0x2be>
c0026ed4:	29 d1                	sub    ecx,edx
c0026ed6:	41                   	inc    ecx
c0026ed7:	d3 e8                	shr    eax,cl
c0026ed9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026edc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026ee2:	eb 13                	jmp    c0026ef7 <__addsf3+0x2d1>
c0026ee4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ee7:	29 ce                	sub    esi,ecx
c0026ee9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026eee:	eb 07                	jmp    c0026ef7 <__addsf3+0x2d1>
c0026ef0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ef3:	eb 02                	jmp    c0026ef7 <__addsf3+0x2d1>
c0026ef5:	31 c0                	xor    eax,eax
c0026ef7:	89 c2                	mov    edx,eax
c0026ef9:	c1 ea 08             	shr    edx,0x8
c0026efc:	a8 7f                	test   al,0x7f
c0026efe:	0f 95 c1             	setne  cl
c0026f01:	09 d1                	or     ecx,edx
c0026f03:	83 e1 01             	and    ecx,0x1
c0026f06:	c1 e8 07             	shr    eax,0x7
c0026f09:	21 c8                	and    eax,ecx
c0026f0b:	c1 e6 17             	shl    esi,0x17
c0026f0e:	09 d6                	or     esi,edx
c0026f10:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026f13:	eb 0a                	jmp    c0026f1f <__addsf3+0x2f9>
c0026f15:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f18:	eb 05                	jmp    c0026f1f <__addsf3+0x2f9>
c0026f1a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026f1f:	89 f8                	mov    eax,edi
c0026f21:	5a                   	pop    edx
c0026f22:	59                   	pop    ecx
c0026f23:	5b                   	pop    ebx
c0026f24:	5e                   	pop    esi
c0026f25:	5f                   	pop    edi
c0026f26:	5d                   	pop    ebp
c0026f27:	c3                   	ret    

c0026f28 <__subsf3>:
c0026f28:	55                   	push   ebp
c0026f29:	89 e5                	mov    ebp,esp
c0026f2b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f2e:	05 00 00 00 80       	add    eax,0x80000000
c0026f33:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026f36:	5d                   	pop    ebp
c0026f37:	e9 ea fc ff ff       	jmp    c0026c26 <__addsf3>

c0026f3c <__negsf2>:
c0026f3c:	55                   	push   ebp
c0026f3d:	89 e5                	mov    ebp,esp
c0026f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026f42:	05 00 00 00 80       	add    eax,0x80000000
c0026f47:	5d                   	pop    ebp
c0026f48:	c3                   	ret    

c0026f49 <__mulsf3>:
c0026f49:	55                   	push   ebp
c0026f4a:	89 e5                	mov    ebp,esp
c0026f4c:	57                   	push   edi
c0026f4d:	56                   	push   esi
c0026f4e:	53                   	push   ebx
c0026f4f:	83 ec 1c             	sub    esp,0x1c
c0026f52:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026f55:	89 f0                	mov    eax,esi
c0026f57:	89 f1                	mov    ecx,esi
c0026f59:	c1 f9 17             	sar    ecx,0x17
c0026f5c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f5f:	c1 e0 08             	shl    eax,0x8
c0026f62:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f67:	89 c1                	mov    ecx,eax
c0026f69:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f6c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f6f:	89 c7                	mov    edi,eax
c0026f71:	c1 ff 17             	sar    edi,0x17
c0026f74:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f78:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f7b:	89 f8                	mov    eax,edi
c0026f7d:	0f b6 c0             	movzx  eax,al
c0026f80:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026f83:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026f87:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f8a:	42                   	inc    edx
c0026f8b:	80 e2 fe             	and    dl,0xfe
c0026f8e:	75 7b                	jne    c002700b <__mulsf3+0xc2>
c0026f90:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f94:	74 54                	je     c0026fea <__mulsf3+0xa1>
c0026f96:	85 c9                	test   ecx,ecx
c0026f98:	0f 85 64 01 00 00    	jne    c0027102 <__mulsf3+0x1b9>
c0026f9e:	8d 57 01             	lea    edx,[edi+0x1]
c0026fa1:	80 e2 fe             	and    dl,0xfe
c0026fa4:	75 1f                	jne    c0026fc5 <__mulsf3+0x7c>
c0026fa6:	85 c0                	test   eax,eax
c0026fa8:	b8 00 00 00 00       	mov    eax,0x0
c0026fad:	74 29                	je     c0026fd8 <__mulsf3+0x8f>
c0026faf:	53                   	push   ebx
c0026fb0:	53                   	push   ebx
c0026fb1:	50                   	push   eax
c0026fb2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fb5:	e8 96 05 00 00       	call   c0027550 <__nesf2>
c0026fba:	83 c4 10             	add    esp,0x10
c0026fbd:	85 c0                	test   eax,eax
c0026fbf:	0f 85 3a 01 00 00    	jne    c00270ff <__mulsf3+0x1b6>
c0026fc5:	85 ff                	test   edi,edi
c0026fc7:	0f 89 35 01 00 00    	jns    c0027102 <__mulsf3+0x1b9>
c0026fcd:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026fd3:	e9 2a 01 00 00       	jmp    c0027102 <__mulsf3+0x1b9>
c0026fd8:	51                   	push   ecx
c0026fd9:	51                   	push   ecx
c0026fda:	50                   	push   eax
c0026fdb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fde:	e8 6d 05 00 00       	call   c0027550 <__nesf2>
c0026fe3:	83 c4 10             	add    esp,0x10
c0026fe6:	85 c0                	test   eax,eax
c0026fe8:	eb 15                	jmp    c0026fff <__mulsf3+0xb6>
c0026fea:	85 c9                	test   ecx,ecx
c0026fec:	74 0b                	je     c0026ff9 <__mulsf3+0xb0>
c0026fee:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026ff1:	01 c9                	add    ecx,ecx
c0026ff3:	78 16                	js     c002700b <__mulsf3+0xc2>
c0026ff5:	89 d3                	mov    ebx,edx
c0026ff7:	eb f5                	jmp    c0026fee <__mulsf3+0xa5>
c0026ff9:	89 f8                	mov    eax,edi
c0026ffb:	f7 d0                	not    eax
c0026ffd:	84 c0                	test   al,al
c0026fff:	75 c4                	jne    c0026fc5 <__mulsf3+0x7c>
c0027001:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027006:	e9 f7 00 00 00       	jmp    c0027102 <__mulsf3+0x1b9>
c002700b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002700e:	c1 e6 08             	shl    esi,0x8
c0027011:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027017:	8d 57 01             	lea    edx,[edi+0x1]
c002701a:	80 e2 fe             	and    dl,0xfe
c002701d:	75 63                	jne    c0027082 <__mulsf3+0x139>
c002701f:	85 c0                	test   eax,eax
c0027021:	74 2f                	je     c0027052 <__mulsf3+0x109>
c0027023:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027027:	0f 89 d2 00 00 00    	jns    c00270ff <__mulsf3+0x1b6>
c002702d:	52                   	push   edx
c002702e:	52                   	push   edx
c002702f:	6a 00                	push   0x0
c0027031:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027034:	e8 dc 04 00 00       	call   c0027515 <__eqsf2>
c0027039:	83 c4 10             	add    esp,0x10
c002703c:	85 c0                	test   eax,eax
c002703e:	0f 85 bb 00 00 00    	jne    c00270ff <__mulsf3+0x1b6>
c0027044:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027047:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002704d:	e9 b0 00 00 00       	jmp    c0027102 <__mulsf3+0x1b9>
c0027052:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027055:	50                   	push   eax
c0027056:	50                   	push   eax
c0027057:	6a 00                	push   0x0
c0027059:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002705c:	e8 b4 04 00 00       	call   c0027515 <__eqsf2>
c0027061:	83 c4 10             	add    esp,0x10
c0027064:	85 c0                	test   eax,eax
c0027066:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027069:	75 0c                	jne    c0027077 <__mulsf3+0x12e>
c002706b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002706f:	0f 89 8a 00 00 00    	jns    c00270ff <__mulsf3+0x1b6>
c0027075:	eb cd                	jmp    c0027044 <__mulsf3+0xfb>
c0027077:	8d 43 ff             	lea    eax,[ebx-0x1]
c002707a:	01 f6                	add    esi,esi
c002707c:	78 04                	js     c0027082 <__mulsf3+0x139>
c002707e:	89 c3                	mov    ebx,eax
c0027080:	eb f5                	jmp    c0027077 <__mulsf3+0x12e>
c0027082:	89 c8                	mov    eax,ecx
c0027084:	0d 00 00 00 80       	or     eax,0x80000000
c0027089:	81 ce 00 00 00 80    	or     esi,0x80000000
c002708f:	f7 e6                	mul    esi
c0027091:	85 c0                	test   eax,eax
c0027093:	0f 95 c0             	setne  al
c0027096:	0f b6 c0             	movzx  eax,al
c0027099:	09 c2                	or     edx,eax
c002709b:	78 03                	js     c00270a0 <__mulsf3+0x157>
c002709d:	01 d2                	add    edx,edx
c002709f:	4b                   	dec    ebx
c00270a0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00270a6:	7f 22                	jg     c00270ca <__mulsf3+0x181>
c00270a8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00270ae:	85 db                	test   ebx,ebx
c00270b0:	7f 23                	jg     c00270d5 <__mulsf3+0x18c>
c00270b2:	83 fb e9             	cmp    ebx,0xffffffe9
c00270b5:	7c 1a                	jl     c00270d1 <__mulsf3+0x188>
c00270b7:	81 ca 00 00 00 80    	or     edx,0x80000000
c00270bd:	b9 01 00 00 00       	mov    ecx,0x1
c00270c2:	29 d9                	sub    ecx,ebx
c00270c4:	d3 ea                	shr    edx,cl
c00270c6:	31 db                	xor    ebx,ebx
c00270c8:	eb 0b                	jmp    c00270d5 <__mulsf3+0x18c>
c00270ca:	bb ff 00 00 00       	mov    ebx,0xff
c00270cf:	eb 02                	jmp    c00270d3 <__mulsf3+0x18a>
c00270d1:	31 db                	xor    ebx,ebx
c00270d3:	31 d2                	xor    edx,edx
c00270d5:	89 d0                	mov    eax,edx
c00270d7:	c1 e8 08             	shr    eax,0x8
c00270da:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00270dd:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00270e3:	09 fb                	or     ebx,edi
c00270e5:	c1 e3 17             	shl    ebx,0x17
c00270e8:	09 c3                	or     ebx,eax
c00270ea:	f6 c2 7f             	test   dl,0x7f
c00270ed:	0f 95 c1             	setne  cl
c00270f0:	09 c8                	or     eax,ecx
c00270f2:	83 e0 01             	and    eax,0x1
c00270f5:	c1 ea 07             	shr    edx,0x7
c00270f8:	21 c2                	and    edx,eax
c00270fa:	8d 34 13             	lea    esi,[ebx+edx*1]
c00270fd:	eb 03                	jmp    c0027102 <__mulsf3+0x1b9>
c00270ff:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027102:	89 f0                	mov    eax,esi
c0027104:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027107:	5b                   	pop    ebx
c0027108:	5e                   	pop    esi
c0027109:	5f                   	pop    edi
c002710a:	5d                   	pop    ebp
c002710b:	c3                   	ret    

c002710c <__divsf3>:
c002710c:	55                   	push   ebp
c002710d:	89 e5                	mov    ebp,esp
c002710f:	57                   	push   edi
c0027110:	56                   	push   esi
c0027111:	53                   	push   ebx
c0027112:	83 ec 1c             	sub    esp,0x1c
c0027115:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027118:	89 d8                	mov    eax,ebx
c002711a:	89 d9                	mov    ecx,ebx
c002711c:	c1 f9 17             	sar    ecx,0x17
c002711f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027122:	c1 e0 08             	shl    eax,0x8
c0027125:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002712a:	89 c1                	mov    ecx,eax
c002712c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002712f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027132:	89 c7                	mov    edi,eax
c0027134:	c1 ff 17             	sar    edi,0x17
c0027137:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002713b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002713e:	89 f8                	mov    eax,edi
c0027140:	0f b6 c0             	movzx  eax,al
c0027143:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027146:	29 c6                	sub    esi,eax
c0027148:	83 c6 7f             	add    esi,0x7f
c002714b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002714e:	42                   	inc    edx
c002714f:	80 e2 fe             	and    dl,0xfe
c0027152:	0f 85 9c 00 00 00    	jne    c00271f4 <__divsf3+0xe8>
c0027158:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002715c:	74 33                	je     c0027191 <__divsf3+0x85>
c002715e:	85 c9                	test   ecx,ecx
c0027160:	0f 85 c7 01 00 00    	jne    c002732d <__divsf3+0x221>
c0027166:	8d 57 01             	lea    edx,[edi+0x1]
c0027169:	80 e2 fe             	and    dl,0xfe
c002716c:	75 2f                	jne    c002719d <__divsf3+0x91>
c002716e:	85 c0                	test   eax,eax
c0027170:	74 2b                	je     c002719d <__divsf3+0x91>
c0027172:	51                   	push   ecx
c0027173:	51                   	push   ecx
c0027174:	6a 00                	push   0x0
c0027176:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027179:	e8 d2 03 00 00       	call   c0027550 <__nesf2>
c002717e:	83 c4 10             	add    esp,0x10
c0027181:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027184:	85 c0                	test   eax,eax
c0027186:	0f 85 a1 01 00 00    	jne    c002732d <__divsf3+0x221>
c002718c:	e9 92 01 00 00       	jmp    c0027323 <__divsf3+0x217>
c0027191:	85 c9                	test   ecx,ecx
c0027193:	75 1b                	jne    c00271b0 <__divsf3+0xa4>
c0027195:	8d 57 01             	lea    edx,[edi+0x1]
c0027198:	80 e2 fe             	and    dl,0xfe
c002719b:	74 1e                	je     c00271bb <__divsf3+0xaf>
c002719d:	85 ff                	test   edi,edi
c002719f:	0f 89 88 01 00 00    	jns    c002732d <__divsf3+0x221>
c00271a5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00271ab:	e9 7d 01 00 00       	jmp    c002732d <__divsf3+0x221>
c00271b0:	8d 56 ff             	lea    edx,[esi-0x1]
c00271b3:	01 c9                	add    ecx,ecx
c00271b5:	78 3d                	js     c00271f4 <__divsf3+0xe8>
c00271b7:	89 d6                	mov    esi,edx
c00271b9:	eb f5                	jmp    c00271b0 <__divsf3+0xa4>
c00271bb:	85 c0                	test   eax,eax
c00271bd:	b8 00 00 00 00       	mov    eax,0x0
c00271c2:	74 18                	je     c00271dc <__divsf3+0xd0>
c00271c4:	52                   	push   edx
c00271c5:	52                   	push   edx
c00271c6:	50                   	push   eax
c00271c7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271ca:	e8 81 03 00 00       	call   c0027550 <__nesf2>
c00271cf:	83 c4 10             	add    esp,0x10
c00271d2:	85 c0                	test   eax,eax
c00271d4:	0f 85 50 01 00 00    	jne    c002732a <__divsf3+0x21e>
c00271da:	eb c1                	jmp    c002719d <__divsf3+0x91>
c00271dc:	56                   	push   esi
c00271dd:	56                   	push   esi
c00271de:	50                   	push   eax
c00271df:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271e2:	e8 69 03 00 00       	call   c0027550 <__nesf2>
c00271e7:	83 c4 10             	add    esp,0x10
c00271ea:	85 c0                	test   eax,eax
c00271ec:	0f 84 31 01 00 00    	je     c0027323 <__divsf3+0x217>
c00271f2:	eb a9                	jmp    c002719d <__divsf3+0x91>
c00271f4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00271f7:	c1 e3 08             	shl    ebx,0x8
c00271fa:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027200:	8d 57 01             	lea    edx,[edi+0x1]
c0027203:	80 e2 fe             	and    dl,0xfe
c0027206:	75 71                	jne    c0027279 <__divsf3+0x16d>
c0027208:	85 c0                	test   eax,eax
c002720a:	ba 00 00 00 00       	mov    edx,0x0
c002720f:	74 2f                	je     c0027240 <__divsf3+0x134>
c0027211:	51                   	push   ecx
c0027212:	51                   	push   ecx
c0027213:	52                   	push   edx
c0027214:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027217:	e8 f9 02 00 00       	call   c0027515 <__eqsf2>
c002721c:	83 c4 10             	add    esp,0x10
c002721f:	85 c0                	test   eax,eax
c0027221:	0f 85 03 01 00 00    	jne    c002732a <__divsf3+0x21e>
c0027227:	31 d2                	xor    edx,edx
c0027229:	89 d3                	mov    ebx,edx
c002722b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002722e:	31 f8                	xor    eax,edi
c0027230:	0f 89 f7 00 00 00    	jns    c002732d <__divsf3+0x221>
c0027236:	bb 00 00 00 80       	mov    ebx,0x80000000
c002723b:	e9 ed 00 00 00       	jmp    c002732d <__divsf3+0x221>
c0027240:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027243:	50                   	push   eax
c0027244:	50                   	push   eax
c0027245:	52                   	push   edx
c0027246:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027249:	e8 c7 02 00 00       	call   c0027515 <__eqsf2>
c002724e:	83 c4 10             	add    esp,0x10
c0027251:	85 c0                	test   eax,eax
c0027253:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027256:	75 16                	jne    c002726e <__divsf3+0x162>
c0027258:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002725b:	31 fb                	xor    ebx,edi
c002725d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027263:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027269:	e9 bf 00 00 00       	jmp    c002732d <__divsf3+0x221>
c002726e:	8d 46 01             	lea    eax,[esi+0x1]
c0027271:	01 db                	add    ebx,ebx
c0027273:	78 04                	js     c0027279 <__divsf3+0x16d>
c0027275:	89 c6                	mov    esi,eax
c0027277:	eb f5                	jmp    c002726e <__divsf3+0x162>
c0027279:	89 c8                	mov    eax,ecx
c002727b:	0d 00 00 00 80       	or     eax,0x80000000
c0027280:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027286:	31 d2                	xor    edx,edx
c0027288:	39 d8                	cmp    eax,ebx
c002728a:	72 07                	jb     c0027293 <__divsf3+0x187>
c002728c:	29 d8                	sub    eax,ebx
c002728e:	ba 01 00 00 00       	mov    edx,0x1
c0027293:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002729a:	01 d2                	add    edx,edx
c002729c:	89 c1                	mov    ecx,eax
c002729e:	01 c0                	add    eax,eax
c00272a0:	85 c9                	test   ecx,ecx
c00272a2:	78 04                	js     c00272a8 <__divsf3+0x19c>
c00272a4:	39 c3                	cmp    ebx,eax
c00272a6:	77 05                	ja     c00272ad <__divsf3+0x1a1>
c00272a8:	29 d8                	sub    eax,ebx
c00272aa:	83 ca 01             	or     edx,0x1
c00272ad:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00272b0:	75 e8                	jne    c002729a <__divsf3+0x18e>
c00272b2:	85 c0                	test   eax,eax
c00272b4:	0f 95 c0             	setne  al
c00272b7:	0f b6 c0             	movzx  eax,al
c00272ba:	c1 e2 06             	shl    edx,0x6
c00272bd:	09 c2                	or     edx,eax
c00272bf:	78 03                	js     c00272c4 <__divsf3+0x1b8>
c00272c1:	01 d2                	add    edx,edx
c00272c3:	4e                   	dec    esi
c00272c4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00272ca:	7f 22                	jg     c00272ee <__divsf3+0x1e2>
c00272cc:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00272d2:	85 f6                	test   esi,esi
c00272d4:	7f 23                	jg     c00272f9 <__divsf3+0x1ed>
c00272d6:	83 fe e9             	cmp    esi,0xffffffe9
c00272d9:	7c 1a                	jl     c00272f5 <__divsf3+0x1e9>
c00272db:	81 ca 00 00 00 80    	or     edx,0x80000000
c00272e1:	b9 01 00 00 00       	mov    ecx,0x1
c00272e6:	29 f1                	sub    ecx,esi
c00272e8:	d3 ea                	shr    edx,cl
c00272ea:	31 f6                	xor    esi,esi
c00272ec:	eb 0b                	jmp    c00272f9 <__divsf3+0x1ed>
c00272ee:	be ff 00 00 00       	mov    esi,0xff
c00272f3:	eb 02                	jmp    c00272f7 <__divsf3+0x1eb>
c00272f5:	31 f6                	xor    esi,esi
c00272f7:	31 d2                	xor    edx,edx
c00272f9:	89 d0                	mov    eax,edx
c00272fb:	c1 e8 08             	shr    eax,0x8
c00272fe:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027301:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027307:	09 fe                	or     esi,edi
c0027309:	c1 e6 17             	shl    esi,0x17
c002730c:	09 c6                	or     esi,eax
c002730e:	f6 c2 7f             	test   dl,0x7f
c0027311:	0f 95 c1             	setne  cl
c0027314:	09 c8                	or     eax,ecx
c0027316:	83 e0 01             	and    eax,0x1
c0027319:	c1 ea 07             	shr    edx,0x7
c002731c:	21 c2                	and    edx,eax
c002731e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027321:	eb 0a                	jmp    c002732d <__divsf3+0x221>
c0027323:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027328:	eb 03                	jmp    c002732d <__divsf3+0x221>
c002732a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002732d:	89 d8                	mov    eax,ebx
c002732f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027332:	5b                   	pop    ebx
c0027333:	5e                   	pop    esi
c0027334:	5f                   	pop    edi
c0027335:	5d                   	pop    ebp
c0027336:	c3                   	ret    

c0027337 <__floatsisf>:
c0027337:	55                   	push   ebp
c0027338:	89 e5                	mov    ebp,esp
c002733a:	53                   	push   ebx
c002733b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002733e:	85 d2                	test   edx,edx
c0027340:	7e 2b                	jle    c002736d <__floatsisf+0x36>
c0027342:	0f bd ca             	bsr    ecx,edx
c0027345:	83 f1 1f             	xor    ecx,0x1f
c0027348:	d3 e2                	shl    edx,cl
c002734a:	89 d0                	mov    eax,edx
c002734c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027351:	89 c3                	mov    ebx,eax
c0027353:	c1 eb 08             	shr    ebx,0x8
c0027356:	80 e2 7f             	and    dl,0x7f
c0027359:	0f 95 c2             	setne  dl
c002735c:	09 da                	or     edx,ebx
c002735e:	83 e2 01             	and    edx,0x1
c0027361:	c1 e8 07             	shr    eax,0x7
c0027364:	21 c2                	and    edx,eax
c0027366:	b8 9e 00 00 00       	mov    eax,0x9e
c002736b:	eb 32                	jmp    c002739f <__floatsisf+0x68>
c002736d:	b8 00 00 00 00       	mov    eax,0x0
c0027372:	74 34                	je     c00273a8 <__floatsisf+0x71>
c0027374:	f7 da                	neg    edx
c0027376:	0f bd ca             	bsr    ecx,edx
c0027379:	83 f1 1f             	xor    ecx,0x1f
c002737c:	d3 e2                	shl    edx,cl
c002737e:	89 d0                	mov    eax,edx
c0027380:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027385:	89 c3                	mov    ebx,eax
c0027387:	c1 eb 08             	shr    ebx,0x8
c002738a:	80 e2 7f             	and    dl,0x7f
c002738d:	0f 95 c2             	setne  dl
c0027390:	09 da                	or     edx,ebx
c0027392:	83 e2 01             	and    edx,0x1
c0027395:	c1 e8 07             	shr    eax,0x7
c0027398:	21 c2                	and    edx,eax
c002739a:	b8 9e 01 00 00       	mov    eax,0x19e
c002739f:	29 c8                	sub    eax,ecx
c00273a1:	c1 e0 17             	shl    eax,0x17
c00273a4:	09 d8                	or     eax,ebx
c00273a6:	01 d0                	add    eax,edx
c00273a8:	5b                   	pop    ebx
c00273a9:	5d                   	pop    ebp
c00273aa:	c3                   	ret    

c00273ab <__floatunsisf>:
c00273ab:	55                   	push   ebp
c00273ac:	89 e5                	mov    ebp,esp
c00273ae:	53                   	push   ebx
c00273af:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273b2:	31 c0                	xor    eax,eax
c00273b4:	85 d2                	test   edx,edx
c00273b6:	74 32                	je     c00273ea <__floatunsisf+0x3f>
c00273b8:	0f bd ca             	bsr    ecx,edx
c00273bb:	83 f1 1f             	xor    ecx,0x1f
c00273be:	d3 e2                	shl    edx,cl
c00273c0:	89 d0                	mov    eax,edx
c00273c2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273c7:	89 c3                	mov    ebx,eax
c00273c9:	c1 eb 08             	shr    ebx,0x8
c00273cc:	80 e2 7f             	and    dl,0x7f
c00273cf:	0f 95 c2             	setne  dl
c00273d2:	09 da                	or     edx,ebx
c00273d4:	83 e2 01             	and    edx,0x1
c00273d7:	c1 e8 07             	shr    eax,0x7
c00273da:	21 c2                	and    edx,eax
c00273dc:	b8 9e 00 00 00       	mov    eax,0x9e
c00273e1:	29 c8                	sub    eax,ecx
c00273e3:	c1 e0 17             	shl    eax,0x17
c00273e6:	09 d8                	or     eax,ebx
c00273e8:	01 d0                	add    eax,edx
c00273ea:	5b                   	pop    ebx
c00273eb:	5d                   	pop    ebp
c00273ec:	c3                   	ret    

c00273ed <__fixsfsi>:
c00273ed:	55                   	push   ebp
c00273ee:	89 e5                	mov    ebp,esp
c00273f0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273f3:	89 d1                	mov    ecx,edx
c00273f5:	c1 e1 08             	shl    ecx,0x8
c00273f8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00273fe:	c1 fa 17             	sar    edx,0x17
c0027401:	78 1c                	js     c002741f <__fixsfsi+0x32>
c0027403:	83 ea 7f             	sub    edx,0x7f
c0027406:	31 c0                	xor    eax,eax
c0027408:	83 fa 1e             	cmp    edx,0x1e
c002740b:	77 40                	ja     c002744d <__fixsfsi+0x60>
c002740d:	89 c8                	mov    eax,ecx
c002740f:	0d 00 00 00 80       	or     eax,0x80000000
c0027414:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027419:	29 d1                	sub    ecx,edx
c002741b:	d3 e8                	shr    eax,cl
c002741d:	eb 2e                	jmp    c002744d <__fixsfsi+0x60>
c002741f:	31 c0                	xor    eax,eax
c0027421:	81 c2 81 00 00 00    	add    edx,0x81
c0027427:	78 24                	js     c002744d <__fixsfsi+0x60>
c0027429:	83 fa 1e             	cmp    edx,0x1e
c002742c:	7e 09                	jle    c0027437 <__fixsfsi+0x4a>
c002742e:	83 fa 1f             	cmp    edx,0x1f
c0027431:	75 18                	jne    c002744b <__fixsfsi+0x5e>
c0027433:	85 c9                	test   ecx,ecx
c0027435:	75 14                	jne    c002744b <__fixsfsi+0x5e>
c0027437:	89 c8                	mov    eax,ecx
c0027439:	0d 00 00 00 80       	or     eax,0x80000000
c002743e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027443:	29 d1                	sub    ecx,edx
c0027445:	d3 e8                	shr    eax,cl
c0027447:	f7 d8                	neg    eax
c0027449:	eb 02                	jmp    c002744d <__fixsfsi+0x60>
c002744b:	31 c0                	xor    eax,eax
c002744d:	5d                   	pop    ebp
c002744e:	c3                   	ret    

c002744f <__fixunssfsi>:
c002744f:	55                   	push   ebp
c0027450:	89 e5                	mov    ebp,esp
c0027452:	53                   	push   ebx
c0027453:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027456:	89 d3                	mov    ebx,edx
c0027458:	c1 fb 17             	sar    ebx,0x17
c002745b:	83 eb 7f             	sub    ebx,0x7f
c002745e:	31 c0                	xor    eax,eax
c0027460:	83 fb 1f             	cmp    ebx,0x1f
c0027463:	77 18                	ja     c002747d <__fixunssfsi+0x2e>
c0027465:	89 d0                	mov    eax,edx
c0027467:	c1 e0 08             	shl    eax,0x8
c002746a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002746f:	0d 00 00 00 80       	or     eax,0x80000000
c0027474:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027479:	29 d9                	sub    ecx,ebx
c002747b:	d3 e8                	shr    eax,cl
c002747d:	5b                   	pop    ebx
c002747e:	5d                   	pop    ebp
c002747f:	c3                   	ret    

c0027480 <__cmpsf2>:
c0027480:	55                   	push   ebp
c0027481:	89 e5                	mov    ebp,esp
c0027483:	57                   	push   edi
c0027484:	56                   	push   esi
c0027485:	53                   	push   ebx
c0027486:	83 ec 24             	sub    esp,0x24
c0027489:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002748c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002748f:	e8 4f 10 00 00       	call   c00284e3 <__truncdfsf2>
c0027494:	5a                   	pop    edx
c0027495:	59                   	pop    ecx
c0027496:	89 c3                	mov    ebx,eax
c0027498:	c1 e8 17             	shr    eax,0x17
c002749b:	0f b6 f0             	movzx  esi,al
c002749e:	89 d8                	mov    eax,ebx
c00274a0:	c1 e8 1f             	shr    eax,0x1f
c00274a3:	31 c6                	xor    esi,eax
c00274a5:	c1 e3 08             	shl    ebx,0x8
c00274a8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00274ab:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00274ae:	e8 30 10 00 00       	call   c00284e3 <__truncdfsf2>
c00274b3:	83 c4 10             	add    esp,0x10
c00274b6:	89 c1                	mov    ecx,eax
c00274b8:	c1 e9 17             	shr    ecx,0x17
c00274bb:	0f b6 c9             	movzx  ecx,cl
c00274be:	89 c7                	mov    edi,eax
c00274c0:	c1 ef 1f             	shr    edi,0x1f
c00274c3:	89 ca                	mov    edx,ecx
c00274c5:	31 fa                	xor    edx,edi
c00274c7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00274ca:	c1 e0 08             	shl    eax,0x8
c00274cd:	89 c2                	mov    edx,eax
c00274cf:	89 d8                	mov    eax,ebx
c00274d1:	09 d0                	or     eax,edx
c00274d3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274d8:	09 f0                	or     eax,esi
c00274da:	75 08                	jne    c00274e4 <__cmpsf2+0x64>
c00274dc:	31 c0                	xor    eax,eax
c00274de:	39 f9                	cmp    ecx,edi
c00274e0:	75 0c                	jne    c00274ee <__cmpsf2+0x6e>
c00274e2:	eb 29                	jmp    c002750d <__cmpsf2+0x8d>
c00274e4:	b8 01 00 00 00       	mov    eax,0x1
c00274e9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274ec:	7f 1f                	jg     c002750d <__cmpsf2+0x8d>
c00274ee:	83 c8 ff             	or     eax,0xffffffff
c00274f1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274f4:	7c 17                	jl     c002750d <__cmpsf2+0x8d>
c00274f6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00274fc:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027502:	b8 01 00 00 00       	mov    eax,0x1
c0027507:	39 d3                	cmp    ebx,edx
c0027509:	77 02                	ja     c002750d <__cmpsf2+0x8d>
c002750b:	19 c0                	sbb    eax,eax
c002750d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027510:	5b                   	pop    ebx
c0027511:	5e                   	pop    esi
c0027512:	5f                   	pop    edi
c0027513:	5d                   	pop    ebp
c0027514:	c3                   	ret    

c0027515 <__eqsf2>:
c0027515:	55                   	push   ebp
c0027516:	89 e5                	mov    ebp,esp
c0027518:	83 ec 24             	sub    esp,0x24
c002751b:	6a 01                	push   0x1
c002751d:	83 ec 0c             	sub    esp,0xc
c0027520:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027523:	e8 df 10 00 00       	call   c0028607 <__extendsfdf2>
c0027528:	83 c4 10             	add    esp,0x10
c002752b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002752e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027531:	52                   	push   edx
c0027532:	50                   	push   eax
c0027533:	50                   	push   eax
c0027534:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027537:	e8 cb 10 00 00       	call   c0028607 <__extendsfdf2>
c002753c:	59                   	pop    ecx
c002753d:	59                   	pop    ecx
c002753e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027541:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027544:	52                   	push   edx
c0027545:	50                   	push   eax
c0027546:	e8 35 ff ff ff       	call   c0027480 <__cmpsf2>
c002754b:	83 c4 20             	add    esp,0x20
c002754e:	c9                   	leave  
c002754f:	c3                   	ret    

c0027550 <__nesf2>:
c0027550:	eb c3                	jmp    c0027515 <__eqsf2>

c0027552 <__gtsf2>:
c0027552:	55                   	push   ebp
c0027553:	89 e5                	mov    ebp,esp
c0027555:	83 ec 24             	sub    esp,0x24
c0027558:	6a ff                	push   0xffffffff
c002755a:	83 ec 0c             	sub    esp,0xc
c002755d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027560:	e8 a2 10 00 00       	call   c0028607 <__extendsfdf2>
c0027565:	83 c4 10             	add    esp,0x10
c0027568:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002756b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002756e:	52                   	push   edx
c002756f:	50                   	push   eax
c0027570:	50                   	push   eax
c0027571:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027574:	e8 8e 10 00 00       	call   c0028607 <__extendsfdf2>
c0027579:	59                   	pop    ecx
c002757a:	59                   	pop    ecx
c002757b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002757e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027581:	52                   	push   edx
c0027582:	50                   	push   eax
c0027583:	e8 f8 fe ff ff       	call   c0027480 <__cmpsf2>
c0027588:	83 c4 20             	add    esp,0x20
c002758b:	c9                   	leave  
c002758c:	c3                   	ret    

c002758d <__gesf2>:
c002758d:	eb c3                	jmp    c0027552 <__gtsf2>

c002758f <__ltsf2>:
c002758f:	eb 84                	jmp    c0027515 <__eqsf2>

c0027591 <__lesf2>:
c0027591:	eb 82                	jmp    c0027515 <__eqsf2>

c0027593 <__adddf3>:
c0027593:	55                   	push   ebp
c0027594:	89 e5                	mov    ebp,esp
c0027596:	57                   	push   edi
c0027597:	56                   	push   esi
c0027598:	53                   	push   ebx
c0027599:	83 ec 24             	sub    esp,0x24
c002759c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002759f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00275a2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00275a5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00275a8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00275ab:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00275ae:	89 c8                	mov    eax,ecx
c00275b0:	89 ce                	mov    esi,ecx
c00275b2:	c1 fe 14             	sar    esi,0x14
c00275b5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00275b8:	89 fb                	mov    ebx,edi
c00275ba:	89 fa                	mov    edx,edi
c00275bc:	c1 e2 0b             	shl    edx,0xb
c00275bf:	c1 e0 0b             	shl    eax,0xb
c00275c2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00275c7:	c1 eb 15             	shr    ebx,0x15
c00275ca:	09 d8                	or     eax,ebx
c00275cc:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00275cf:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00275d2:	c1 fe 14             	sar    esi,0x14
c00275d5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00275d8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00275db:	89 f3                	mov    ebx,esi
c00275dd:	c1 e3 0b             	shl    ebx,0xb
c00275e0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00275e3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00275e6:	c1 e3 0b             	shl    ebx,0xb
c00275e9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00275ef:	c1 ee 15             	shr    esi,0x15
c00275f2:	09 f3                	or     ebx,esi
c00275f4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00275f7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275fa:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00275fd:	0f 88 5f 02 00 00    	js     c0027862 <__adddf3+0x2cf>
c0027603:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027606:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027609:	85 db                	test   ebx,ebx
c002760b:	0f 8e c7 00 00 00    	jle    c00276d8 <__adddf3+0x145>
c0027611:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027618:	75 1a                	jne    c0027634 <__adddf3+0xa1>
c002761a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002761d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027620:	0f 84 b2 05 00 00    	je     c0027bd8 <__adddf3+0x645>
c0027626:	4b                   	dec    ebx
c0027627:	75 23                	jne    c002764c <__adddf3+0xb9>
c0027629:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002762c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002762f:	e9 99 00 00 00       	jmp    c00276cd <__adddf3+0x13a>
c0027634:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027637:	f7 d6                	not    esi
c0027639:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002763f:	0f 84 93 05 00 00    	je     c0027bd8 <__adddf3+0x645>
c0027645:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002764c:	83 fb 1f             	cmp    ebx,0x1f
c002764f:	7e 42                	jle    c0027693 <__adddf3+0x100>
c0027651:	83 fb 3f             	cmp    ebx,0x3f
c0027654:	0f 8f 7e 05 00 00    	jg     c0027bd8 <__adddf3+0x645>
c002765a:	83 e3 1f             	and    ebx,0x1f
c002765d:	89 d9                	mov    ecx,ebx
c002765f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027662:	d3 ef                	shr    edi,cl
c0027664:	31 db                	xor    ebx,ebx
c0027666:	85 c9                	test   ecx,ecx
c0027668:	74 15                	je     c002767f <__adddf3+0xec>
c002766a:	be 20 00 00 00       	mov    esi,0x20
c002766f:	29 ce                	sub    esi,ecx
c0027671:	89 f1                	mov    ecx,esi
c0027673:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027676:	d3 e6                	shl    esi,cl
c0027678:	31 db                	xor    ebx,ebx
c002767a:	85 f6                	test   esi,esi
c002767c:	0f 95 c3             	setne  bl
c002767f:	31 c9                	xor    ecx,ecx
c0027681:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027685:	0f 95 c1             	setne  cl
c0027688:	09 cf                	or     edi,ecx
c002768a:	09 fb                	or     ebx,edi
c002768c:	01 da                	add    edx,ebx
c002768e:	83 d0 00             	adc    eax,0x0
c0027691:	eb 3a                	jmp    c00276cd <__adddf3+0x13a>
c0027693:	bf 20 00 00 00       	mov    edi,0x20
c0027698:	29 df                	sub    edi,ebx
c002769a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002769d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276a0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276a3:	d3 e6                	shl    esi,cl
c00276a5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276a8:	88 d9                	mov    cl,bl
c00276aa:	d3 ef                	shr    edi,cl
c00276ac:	09 fe                	or     esi,edi
c00276ae:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276b1:	88 d9                	mov    cl,bl
c00276b3:	d3 ef                	shr    edi,cl
c00276b5:	89 fb                	mov    ebx,edi
c00276b7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276ba:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276bd:	d3 e7                	shl    edi,cl
c00276bf:	85 ff                	test   edi,edi
c00276c1:	0f 95 c1             	setne  cl
c00276c4:	0f b6 c9             	movzx  ecx,cl
c00276c7:	09 ce                	or     esi,ecx
c00276c9:	01 f2                	add    edx,esi
c00276cb:	11 d8                	adc    eax,ebx
c00276cd:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276d0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276d3:	e9 52 01 00 00       	jmp    c002782a <__adddf3+0x297>
c00276d8:	0f 84 d5 00 00 00    	je     c00277b3 <__adddf3+0x220>
c00276de:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00276e1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00276e4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276e7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276ea:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00276f1:	75 20                	jne    c0027713 <__adddf3+0x180>
c00276f3:	89 d6                	mov    esi,edx
c00276f5:	09 c6                	or     esi,eax
c00276f7:	0f 84 db 04 00 00    	je     c0027bd8 <__adddf3+0x645>
c00276fd:	4b                   	dec    ebx
c00276fe:	75 29                	jne    c0027729 <__adddf3+0x196>
c0027700:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027703:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027706:	01 d1                	add    ecx,edx
c0027708:	11 c6                	adc    esi,eax
c002770a:	89 f0                	mov    eax,esi
c002770c:	89 ca                	mov    edx,ecx
c002770e:	e9 17 01 00 00       	jmp    c002782a <__adddf3+0x297>
c0027713:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027716:	f7 d6                	not    esi
c0027718:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002771e:	0f 84 b4 04 00 00    	je     c0027bd8 <__adddf3+0x645>
c0027724:	0d 00 00 00 80       	or     eax,0x80000000
c0027729:	83 fb 1f             	cmp    ebx,0x1f
c002772c:	7e 48                	jle    c0027776 <__adddf3+0x1e3>
c002772e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027731:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027734:	83 fb 3f             	cmp    ebx,0x3f
c0027737:	0f 8f 9b 04 00 00    	jg     c0027bd8 <__adddf3+0x645>
c002773d:	83 e3 1f             	and    ebx,0x1f
c0027740:	89 d9                	mov    ecx,ebx
c0027742:	89 c7                	mov    edi,eax
c0027744:	d3 ef                	shr    edi,cl
c0027746:	31 db                	xor    ebx,ebx
c0027748:	85 c9                	test   ecx,ecx
c002774a:	74 12                	je     c002775e <__adddf3+0x1cb>
c002774c:	be 20 00 00 00       	mov    esi,0x20
c0027751:	29 ce                	sub    esi,ecx
c0027753:	89 f1                	mov    ecx,esi
c0027755:	d3 e0                	shl    eax,cl
c0027757:	31 db                	xor    ebx,ebx
c0027759:	85 c0                	test   eax,eax
c002775b:	0f 95 c3             	setne  bl
c002775e:	31 c0                	xor    eax,eax
c0027760:	85 d2                	test   edx,edx
c0027762:	0f 95 c0             	setne  al
c0027765:	09 c7                	or     edi,eax
c0027767:	09 fb                	or     ebx,edi
c0027769:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002776c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002776f:	01 da                	add    edx,ebx
c0027771:	83 d6 00             	adc    esi,0x0
c0027774:	eb 39                	jmp    c00277af <__adddf3+0x21c>
c0027776:	be 20 00 00 00       	mov    esi,0x20
c002777b:	29 de                	sub    esi,ebx
c002777d:	89 c7                	mov    edi,eax
c002777f:	89 f1                	mov    ecx,esi
c0027781:	d3 e7                	shl    edi,cl
c0027783:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027786:	89 d7                	mov    edi,edx
c0027788:	88 d9                	mov    cl,bl
c002778a:	d3 ef                	shr    edi,cl
c002778c:	89 f9                	mov    ecx,edi
c002778e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027791:	09 cf                	or     edi,ecx
c0027793:	88 d9                	mov    cl,bl
c0027795:	d3 e8                	shr    eax,cl
c0027797:	89 f1                	mov    ecx,esi
c0027799:	d3 e2                	shl    edx,cl
c002779b:	85 d2                	test   edx,edx
c002779d:	0f 95 c2             	setne  dl
c00277a0:	0f b6 d2             	movzx  edx,dl
c00277a3:	09 d7                	or     edi,edx
c00277a5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277a8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277ab:	01 fa                	add    edx,edi
c00277ad:	11 c6                	adc    esi,eax
c00277af:	89 f0                	mov    eax,esi
c00277b1:	eb 77                	jmp    c002782a <__adddf3+0x297>
c00277b3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00277b6:	46                   	inc    esi
c00277b7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00277ba:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00277c0:	75 41                	jne    c0027803 <__adddf3+0x270>
c00277c2:	89 d3                	mov    ebx,edx
c00277c4:	09 c3                	or     ebx,eax
c00277c6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00277cd:	75 27                	jne    c00277f6 <__adddf3+0x263>
c00277cf:	85 db                	test   ebx,ebx
c00277d1:	0f 84 fb 03 00 00    	je     c0027bd2 <__adddf3+0x63f>
c00277d7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00277da:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00277dd:	0f 84 f5 03 00 00    	je     c0027bd8 <__adddf3+0x645>
c00277e3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277e6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277e9:	85 c0                	test   eax,eax
c00277eb:	0f 89 91 03 00 00    	jns    c0027b82 <__adddf3+0x5ef>
c00277f1:	e9 85 03 00 00       	jmp    c0027b7b <__adddf3+0x5e8>
c00277f6:	85 db                	test   ebx,ebx
c00277f8:	0f 85 da 03 00 00    	jne    c0027bd8 <__adddf3+0x645>
c00277fe:	e9 cf 03 00 00       	jmp    c0027bd2 <__adddf3+0x63f>
c0027803:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027806:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027809:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002780c:	f7 d1                	not    ecx
c002780e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027814:	0f 84 70 03 00 00    	je     c0027b8a <__adddf3+0x5f7>
c002781a:	d1 ea                	shr    edx,1
c002781c:	89 c1                	mov    ecx,eax
c002781e:	c1 e1 1f             	shl    ecx,0x1f
c0027821:	09 ca                	or     edx,ecx
c0027823:	d1 e8                	shr    eax,1
c0027825:	e9 6f 03 00 00       	jmp    c0027b99 <__adddf3+0x606>
c002782a:	85 c0                	test   eax,eax
c002782c:	0f 89 67 03 00 00    	jns    c0027b99 <__adddf3+0x606>
c0027832:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027835:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027838:	f7 d1                	not    ecx
c002783a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027840:	0f 84 44 03 00 00    	je     c0027b8a <__adddf3+0x5f7>
c0027846:	89 d1                	mov    ecx,edx
c0027848:	d1 e9                	shr    ecx,1
c002784a:	83 e2 01             	and    edx,0x1
c002784d:	09 ca                	or     edx,ecx
c002784f:	89 c1                	mov    ecx,eax
c0027851:	c1 e1 1f             	shl    ecx,0x1f
c0027854:	09 ca                	or     edx,ecx
c0027856:	d1 e8                	shr    eax,1
c0027858:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002785d:	e9 37 03 00 00       	jmp    c0027b99 <__adddf3+0x606>
c0027862:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027865:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002786b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002786e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027871:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027877:	29 de                	sub    esi,ebx
c0027879:	85 f6                	test   esi,esi
c002787b:	0f 8e bd 00 00 00    	jle    c002793e <__adddf3+0x3ab>
c0027881:	85 db                	test   ebx,ebx
c0027883:	75 17                	jne    c002789c <__adddf3+0x309>
c0027885:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027888:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002788b:	0f 84 47 03 00 00    	je     c0027bd8 <__adddf3+0x645>
c0027891:	4e                   	dec    esi
c0027892:	75 20                	jne    c00278b4 <__adddf3+0x321>
c0027894:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027897:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002789a:	eb 5b                	jmp    c00278f7 <__adddf3+0x364>
c002789c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002789f:	f7 d3                	not    ebx
c00278a1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00278a7:	0f 84 2b 03 00 00    	je     c0027bd8 <__adddf3+0x645>
c00278ad:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00278b4:	83 fe 1f             	cmp    esi,0x1f
c00278b7:	7e 49                	jle    c0027902 <__adddf3+0x36f>
c00278b9:	83 fe 3f             	cmp    esi,0x3f
c00278bc:	0f 8f 16 03 00 00    	jg     c0027bd8 <__adddf3+0x645>
c00278c2:	83 e6 1f             	and    esi,0x1f
c00278c5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278c8:	89 f1                	mov    ecx,esi
c00278ca:	d3 ef                	shr    edi,cl
c00278cc:	31 db                	xor    ebx,ebx
c00278ce:	85 f6                	test   esi,esi
c00278d0:	74 13                	je     c00278e5 <__adddf3+0x352>
c00278d2:	b9 20 00 00 00       	mov    ecx,0x20
c00278d7:	29 f1                	sub    ecx,esi
c00278d9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278dc:	d3 e6                	shl    esi,cl
c00278de:	31 db                	xor    ebx,ebx
c00278e0:	85 f6                	test   esi,esi
c00278e2:	0f 95 c3             	setne  bl
c00278e5:	31 c9                	xor    ecx,ecx
c00278e7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00278eb:	0f 95 c1             	setne  cl
c00278ee:	09 cf                	or     edi,ecx
c00278f0:	09 fb                	or     ebx,edi
c00278f2:	29 da                	sub    edx,ebx
c00278f4:	83 d8 00             	sbb    eax,0x0
c00278f7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278fa:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278fd:	e9 aa 01 00 00       	jmp    c0027aac <__adddf3+0x519>
c0027902:	bf 20 00 00 00       	mov    edi,0x20
c0027907:	29 f7                	sub    edi,esi
c0027909:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002790c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002790f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027912:	d3 e3                	shl    ebx,cl
c0027914:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027917:	89 f1                	mov    ecx,esi
c0027919:	d3 ef                	shr    edi,cl
c002791b:	09 fb                	or     ebx,edi
c002791d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027920:	89 f1                	mov    ecx,esi
c0027922:	d3 ef                	shr    edi,cl
c0027924:	89 fe                	mov    esi,edi
c0027926:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027929:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002792c:	d3 e7                	shl    edi,cl
c002792e:	85 ff                	test   edi,edi
c0027930:	0f 95 c1             	setne  cl
c0027933:	0f b6 c9             	movzx  ecx,cl
c0027936:	09 cb                	or     ebx,ecx
c0027938:	29 da                	sub    edx,ebx
c002793a:	19 f0                	sbb    eax,esi
c002793c:	eb b9                	jmp    c00278f7 <__adddf3+0x364>
c002793e:	0f 84 cd 00 00 00    	je     c0027a11 <__adddf3+0x47e>
c0027944:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027947:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002794a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002794d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027951:	75 1b                	jne    c002796e <__adddf3+0x3db>
c0027953:	89 d6                	mov    esi,edx
c0027955:	09 c6                	or     esi,eax
c0027957:	0f 84 7b 02 00 00    	je     c0027bd8 <__adddf3+0x645>
c002795d:	4b                   	dec    ebx
c002795e:	75 24                	jne    c0027984 <__adddf3+0x3f1>
c0027960:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027963:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027966:	29 d1                	sub    ecx,edx
c0027968:	19 c6                	sbb    esi,eax
c002796a:	89 ca                	mov    edx,ecx
c002796c:	eb 61                	jmp    c00279cf <__adddf3+0x43c>
c002796e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027971:	f7 d6                	not    esi
c0027973:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027979:	0f 84 59 02 00 00    	je     c0027bd8 <__adddf3+0x645>
c002797f:	0d 00 00 00 80       	or     eax,0x80000000
c0027984:	83 fb 1f             	cmp    ebx,0x1f
c0027987:	7e 4d                	jle    c00279d6 <__adddf3+0x443>
c0027989:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002798c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002798f:	83 fb 3f             	cmp    ebx,0x3f
c0027992:	0f 8f 40 02 00 00    	jg     c0027bd8 <__adddf3+0x645>
c0027998:	83 e3 1f             	and    ebx,0x1f
c002799b:	89 d9                	mov    ecx,ebx
c002799d:	89 c7                	mov    edi,eax
c002799f:	d3 ef                	shr    edi,cl
c00279a1:	31 db                	xor    ebx,ebx
c00279a3:	85 c9                	test   ecx,ecx
c00279a5:	74 12                	je     c00279b9 <__adddf3+0x426>
c00279a7:	be 20 00 00 00       	mov    esi,0x20
c00279ac:	29 ce                	sub    esi,ecx
c00279ae:	89 f1                	mov    ecx,esi
c00279b0:	d3 e0                	shl    eax,cl
c00279b2:	31 db                	xor    ebx,ebx
c00279b4:	85 c0                	test   eax,eax
c00279b6:	0f 95 c3             	setne  bl
c00279b9:	31 c0                	xor    eax,eax
c00279bb:	85 d2                	test   edx,edx
c00279bd:	0f 95 c0             	setne  al
c00279c0:	09 c7                	or     edi,eax
c00279c2:	09 fb                	or     ebx,edi
c00279c4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279c7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279ca:	29 da                	sub    edx,ebx
c00279cc:	83 de 00             	sbb    esi,0x0
c00279cf:	89 f0                	mov    eax,esi
c00279d1:	e9 d6 00 00 00       	jmp    c0027aac <__adddf3+0x519>
c00279d6:	be 20 00 00 00       	mov    esi,0x20
c00279db:	29 de                	sub    esi,ebx
c00279dd:	89 c7                	mov    edi,eax
c00279df:	89 f1                	mov    ecx,esi
c00279e1:	d3 e7                	shl    edi,cl
c00279e3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00279e6:	89 d7                	mov    edi,edx
c00279e8:	88 d9                	mov    cl,bl
c00279ea:	d3 ef                	shr    edi,cl
c00279ec:	89 f9                	mov    ecx,edi
c00279ee:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279f1:	09 cf                	or     edi,ecx
c00279f3:	88 d9                	mov    cl,bl
c00279f5:	d3 e8                	shr    eax,cl
c00279f7:	89 f1                	mov    ecx,esi
c00279f9:	d3 e2                	shl    edx,cl
c00279fb:	85 d2                	test   edx,edx
c00279fd:	0f 95 c2             	setne  dl
c0027a00:	0f b6 d2             	movzx  edx,dl
c0027a03:	09 d7                	or     edi,edx
c0027a05:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a08:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a0b:	29 fa                	sub    edx,edi
c0027a0d:	19 c6                	sbb    esi,eax
c0027a0f:	eb be                	jmp    c00279cf <__adddf3+0x43c>
c0027a11:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027a14:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027a17:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027a1d:	75 6a                	jne    c0027a89 <__adddf3+0x4f6>
c0027a1f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a23:	75 58                	jne    c0027a7d <__adddf3+0x4ea>
c0027a25:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027a28:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027a2b:	89 d6                	mov    esi,edx
c0027a2d:	09 c6                	or     esi,eax
c0027a2f:	75 17                	jne    c0027a48 <__adddf3+0x4b5>
c0027a31:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a34:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a37:	85 db                	test   ebx,ebx
c0027a39:	0f 85 99 01 00 00    	jne    c0027bd8 <__adddf3+0x645>
c0027a3f:	31 ff                	xor    edi,edi
c0027a41:	31 c9                	xor    ecx,ecx
c0027a43:	e9 90 01 00 00       	jmp    c0027bd8 <__adddf3+0x645>
c0027a48:	85 db                	test   ebx,ebx
c0027a4a:	0f 84 88 01 00 00    	je     c0027bd8 <__adddf3+0x645>
c0027a50:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027a53:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027a56:	85 c0                	test   eax,eax
c0027a58:	79 10                	jns    c0027a6a <__adddf3+0x4d7>
c0027a5a:	31 c9                	xor    ecx,ecx
c0027a5c:	f7 da                	neg    edx
c0027a5e:	0f 95 c1             	setne  cl
c0027a61:	01 c8                	add    eax,ecx
c0027a63:	f7 d8                	neg    eax
c0027a65:	e9 2f 01 00 00       	jmp    c0027b99 <__adddf3+0x606>
c0027a6a:	31 ff                	xor    edi,edi
c0027a6c:	31 c9                	xor    ecx,ecx
c0027a6e:	89 c3                	mov    ebx,eax
c0027a70:	09 d3                	or     ebx,edx
c0027a72:	0f 84 60 01 00 00    	je     c0027bd8 <__adddf3+0x645>
c0027a78:	e9 05 01 00 00       	jmp    c0027b82 <__adddf3+0x5ef>
c0027a7d:	31 ff                	xor    edi,edi
c0027a7f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027a84:	e9 4f 01 00 00       	jmp    c0027bd8 <__adddf3+0x645>
c0027a89:	89 c1                	mov    ecx,eax
c0027a8b:	89 d0                	mov    eax,edx
c0027a8d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027a90:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027a93:	89 ca                	mov    edx,ecx
c0027a95:	85 c9                	test   ecx,ecx
c0027a97:	79 2c                	jns    c0027ac5 <__adddf3+0x532>
c0027a99:	31 c9                	xor    ecx,ecx
c0027a9b:	f7 d8                	neg    eax
c0027a9d:	0f 95 c1             	setne  cl
c0027aa0:	01 ca                	add    edx,ecx
c0027aa2:	f7 da                	neg    edx
c0027aa4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027aa7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027aaa:	eb 19                	jmp    c0027ac5 <__adddf3+0x532>
c0027aac:	85 c0                	test   eax,eax
c0027aae:	0f 89 e5 00 00 00    	jns    c0027b99 <__adddf3+0x606>
c0027ab4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ab9:	89 c1                	mov    ecx,eax
c0027abb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027abe:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027ac1:	89 d0                	mov    eax,edx
c0027ac3:	89 ca                	mov    edx,ecx
c0027ac5:	85 d2                	test   edx,edx
c0027ac7:	74 59                	je     c0027b22 <__adddf3+0x58f>
c0027ac9:	0f bd da             	bsr    ebx,edx
c0027acc:	83 f3 1f             	xor    ebx,0x1f
c0027acf:	88 d9                	mov    cl,bl
c0027ad1:	d3 e2                	shl    edx,cl
c0027ad3:	bf 20 00 00 00       	mov    edi,0x20
c0027ad8:	89 f9                	mov    ecx,edi
c0027ada:	29 d9                	sub    ecx,ebx
c0027adc:	89 c6                	mov    esi,eax
c0027ade:	d3 ee                	shr    esi,cl
c0027ae0:	09 d6                	or     esi,edx
c0027ae2:	88 d9                	mov    cl,bl
c0027ae4:	d3 e0                	shl    eax,cl
c0027ae6:	89 c2                	mov    edx,eax
c0027ae8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027aeb:	25 ff 07 00 00       	and    eax,0x7ff
c0027af0:	39 d8                	cmp    eax,ebx
c0027af2:	7f 22                	jg     c0027b16 <__adddf3+0x583>
c0027af4:	29 c3                	sub    ebx,eax
c0027af6:	43                   	inc    ebx
c0027af7:	88 d9                	mov    cl,bl
c0027af9:	d3 ea                	shr    edx,cl
c0027afb:	29 df                	sub    edi,ebx
c0027afd:	89 f9                	mov    ecx,edi
c0027aff:	89 f0                	mov    eax,esi
c0027b01:	d3 e0                	shl    eax,cl
c0027b03:	09 c2                	or     edx,eax
c0027b05:	89 f0                	mov    eax,esi
c0027b07:	88 d9                	mov    cl,bl
c0027b09:	d3 e8                	shr    eax,cl
c0027b0b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b0e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027b14:	eb 6f                	jmp    c0027b85 <__adddf3+0x5f2>
c0027b16:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b19:	29 d8                	sub    eax,ebx
c0027b1b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b1e:	89 f0                	mov    eax,esi
c0027b20:	eb 59                	jmp    c0027b7b <__adddf3+0x5e8>
c0027b22:	85 c0                	test   eax,eax
c0027b24:	74 6a                	je     c0027b90 <__adddf3+0x5fd>
c0027b26:	0f bd c8             	bsr    ecx,eax
c0027b29:	83 f1 1f             	xor    ecx,0x1f
c0027b2c:	d3 e0                	shl    eax,cl
c0027b2e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b31:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b37:	83 c1 20             	add    ecx,0x20
c0027b3a:	39 cb                	cmp    ebx,ecx
c0027b3c:	7f 35                	jg     c0027b73 <__adddf3+0x5e0>
c0027b3e:	29 d9                	sub    ecx,ebx
c0027b40:	8d 71 01             	lea    esi,[ecx+0x1]
c0027b43:	83 fe 1f             	cmp    esi,0x1f
c0027b46:	7e 09                	jle    c0027b51 <__adddf3+0x5be>
c0027b48:	83 e9 1f             	sub    ecx,0x1f
c0027b4b:	d3 e8                	shr    eax,cl
c0027b4d:	89 c3                	mov    ebx,eax
c0027b4f:	eb 11                	jmp    c0027b62 <__adddf3+0x5cf>
c0027b51:	b9 20 00 00 00       	mov    ecx,0x20
c0027b56:	29 f1                	sub    ecx,esi
c0027b58:	89 c3                	mov    ebx,eax
c0027b5a:	d3 e3                	shl    ebx,cl
c0027b5c:	89 f1                	mov    ecx,esi
c0027b5e:	d3 e8                	shr    eax,cl
c0027b60:	89 c2                	mov    edx,eax
c0027b62:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b65:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b6a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b6d:	89 d0                	mov    eax,edx
c0027b6f:	89 da                	mov    edx,ebx
c0027b71:	eb 26                	jmp    c0027b99 <__adddf3+0x606>
c0027b73:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b76:	29 cf                	sub    edi,ecx
c0027b78:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b7b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b80:	eb 17                	jmp    c0027b99 <__adddf3+0x606>
c0027b82:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b85:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b88:	eb 0f                	jmp    c0027b99 <__adddf3+0x606>
c0027b8a:	31 d2                	xor    edx,edx
c0027b8c:	31 c0                	xor    eax,eax
c0027b8e:	eb 09                	jmp    c0027b99 <__adddf3+0x606>
c0027b90:	89 c2                	mov    edx,eax
c0027b92:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027b99:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b9c:	c1 e1 14             	shl    ecx,0x14
c0027b9f:	89 c3                	mov    ebx,eax
c0027ba1:	c1 eb 0b             	shr    ebx,0xb
c0027ba4:	09 d9                	or     ecx,ebx
c0027ba6:	89 d3                	mov    ebx,edx
c0027ba8:	c1 eb 0b             	shr    ebx,0xb
c0027bab:	c1 e0 15             	shl    eax,0x15
c0027bae:	09 d8                	or     eax,ebx
c0027bb0:	89 c7                	mov    edi,eax
c0027bb2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027bb8:	0f 95 c0             	setne  al
c0027bbb:	89 c6                	mov    esi,eax
c0027bbd:	09 f3                	or     ebx,esi
c0027bbf:	83 e3 01             	and    ebx,0x1
c0027bc2:	c1 ea 0a             	shr    edx,0xa
c0027bc5:	21 da                	and    edx,ebx
c0027bc7:	89 f8                	mov    eax,edi
c0027bc9:	01 d0                	add    eax,edx
c0027bcb:	83 d1 00             	adc    ecx,0x0
c0027bce:	89 c7                	mov    edi,eax
c0027bd0:	eb 06                	jmp    c0027bd8 <__adddf3+0x645>
c0027bd2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027bd5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027bd8:	89 f8                	mov    eax,edi
c0027bda:	89 ca                	mov    edx,ecx
c0027bdc:	83 c4 24             	add    esp,0x24
c0027bdf:	5b                   	pop    ebx
c0027be0:	5e                   	pop    esi
c0027be1:	5f                   	pop    edi
c0027be2:	5d                   	pop    ebp
c0027be3:	c3                   	ret    

c0027be4 <__subdf3>:
c0027be4:	55                   	push   ebp
c0027be5:	89 e5                	mov    ebp,esp
c0027be7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bea:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027bed:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bf3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027bf6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027bf9:	5d                   	pop    ebp
c0027bfa:	e9 94 f9 ff ff       	jmp    c0027593 <__adddf3>

c0027bff <__negdf2>:
c0027bff:	55                   	push   ebp
c0027c00:	89 e5                	mov    ebp,esp
c0027c02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027c05:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c08:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c0e:	5d                   	pop    ebp
c0027c0f:	c3                   	ret    

c0027c10 <__muldf3>:
c0027c10:	55                   	push   ebp
c0027c11:	89 e5                	mov    ebp,esp
c0027c13:	57                   	push   edi
c0027c14:	56                   	push   esi
c0027c15:	53                   	push   ebx
c0027c16:	83 ec 24             	sub    esp,0x24
c0027c19:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c1f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c22:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c25:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027c28:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027c2b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c2e:	89 c8                	mov    eax,ecx
c0027c30:	c1 f8 14             	sar    eax,0x14
c0027c33:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c36:	89 f8                	mov    eax,edi
c0027c38:	89 fb                	mov    ebx,edi
c0027c3a:	c1 e3 0b             	shl    ebx,0xb
c0027c3d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027c40:	c1 e1 0b             	shl    ecx,0xb
c0027c43:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027c49:	c1 e8 15             	shr    eax,0x15
c0027c4c:	09 c1                	or     ecx,eax
c0027c4e:	89 d6                	mov    esi,edx
c0027c50:	89 d0                	mov    eax,edx
c0027c52:	c1 f8 14             	sar    eax,0x14
c0027c55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027c58:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027c5b:	89 c3                	mov    ebx,eax
c0027c5d:	c1 e3 0b             	shl    ebx,0xb
c0027c60:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027c63:	c1 e6 0b             	shl    esi,0xb
c0027c66:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c6c:	c1 e8 15             	shr    eax,0x15
c0027c6f:	09 c6                	or     esi,eax
c0027c71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c74:	25 ff 07 00 00       	and    eax,0x7ff
c0027c79:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c7c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c7f:	25 ff 07 00 00       	and    eax,0x7ff
c0027c84:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c87:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c8a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c8d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027c94:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c97:	40                   	inc    eax
c0027c98:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c9d:	0f 85 8d 00 00 00    	jne    c0027d30 <__muldf3+0x120>
c0027ca3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ca6:	09 c8                	or     eax,ecx
c0027ca8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027cac:	74 44                	je     c0027cf2 <__muldf3+0xe2>
c0027cae:	85 c0                	test   eax,eax
c0027cb0:	0f 85 31 02 00 00    	jne    c0027ee7 <__muldf3+0x2d7>
c0027cb6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cb9:	40                   	inc    eax
c0027cba:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cbf:	75 13                	jne    c0027cd4 <__muldf3+0xc4>
c0027cc1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027cc4:	09 f1                	or     ecx,esi
c0027cc6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027cca:	74 22                	je     c0027cee <__muldf3+0xde>
c0027ccc:	85 c9                	test   ecx,ecx
c0027cce:	0f 85 0d 02 00 00    	jne    c0027ee1 <__muldf3+0x2d1>
c0027cd4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027cd8:	0f 89 09 02 00 00    	jns    c0027ee7 <__muldf3+0x2d7>
c0027cde:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027ce1:	05 00 00 00 80       	add    eax,0x80000000
c0027ce6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ce9:	e9 f9 01 00 00       	jmp    c0027ee7 <__muldf3+0x2d7>
c0027cee:	85 c9                	test   ecx,ecx
c0027cf0:	eb 2e                	jmp    c0027d20 <__muldf3+0x110>
c0027cf2:	85 c0                	test   eax,eax
c0027cf4:	74 20                	je     c0027d16 <__muldf3+0x106>
c0027cf6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027cf9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cfc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027cff:	c1 ef 1f             	shr    edi,0x1f
c0027d02:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027d05:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027d08:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d0b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d0e:	09 f9                	or     ecx,edi
c0027d10:	78 1e                	js     c0027d30 <__muldf3+0x120>
c0027d12:	89 c3                	mov    ebx,eax
c0027d14:	eb e0                	jmp    c0027cf6 <__muldf3+0xe6>
c0027d16:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d19:	f7 d0                	not    eax
c0027d1b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027d20:	75 b2                	jne    c0027cd4 <__muldf3+0xc4>
c0027d22:	31 ff                	xor    edi,edi
c0027d24:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027d2b:	e9 b7 01 00 00       	jmp    c0027ee7 <__muldf3+0x2d7>
c0027d30:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d33:	40                   	inc    eax
c0027d34:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d39:	75 57                	jne    c0027d92 <__muldf3+0x182>
c0027d3b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027d3e:	09 f0                	or     eax,esi
c0027d40:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d44:	74 23                	je     c0027d69 <__muldf3+0x159>
c0027d46:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d4a:	0f 89 91 01 00 00    	jns    c0027ee1 <__muldf3+0x2d1>
c0027d50:	85 c0                	test   eax,eax
c0027d52:	0f 85 89 01 00 00    	jne    c0027ee1 <__muldf3+0x2d1>
c0027d58:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d5b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027d61:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d64:	e9 7e 01 00 00       	jmp    c0027ee7 <__muldf3+0x2d7>
c0027d69:	85 c0                	test   eax,eax
c0027d6b:	75 0c                	jne    c0027d79 <__muldf3+0x169>
c0027d6d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d71:	0f 89 6a 01 00 00    	jns    c0027ee1 <__muldf3+0x2d1>
c0027d77:	eb df                	jmp    c0027d58 <__muldf3+0x148>
c0027d79:	01 f6                	add    esi,esi
c0027d7b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d7e:	c1 ea 1f             	shr    edx,0x1f
c0027d81:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d84:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027d87:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d8a:	09 d6                	or     esi,edx
c0027d8c:	78 04                	js     c0027d92 <__muldf3+0x182>
c0027d8e:	89 c3                	mov    ebx,eax
c0027d90:	eb e7                	jmp    c0027d79 <__muldf3+0x169>
c0027d92:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027d98:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d9e:	89 c8                	mov    eax,ecx
c0027da0:	f7 e6                	mul    esi
c0027da2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027da5:	89 c7                	mov    edi,eax
c0027da7:	89 c8                	mov    eax,ecx
c0027da9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027dac:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027daf:	89 c1                	mov    ecx,eax
c0027db1:	89 f0                	mov    eax,esi
c0027db3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027db6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027db9:	89 c6                	mov    esi,eax
c0027dbb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027dbe:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027dc1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027dc4:	31 c0                	xor    eax,eax
c0027dc6:	01 f1                	add    ecx,esi
c0027dc8:	0f 92 c0             	setb   al
c0027dcb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027dce:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027dd1:	83 d6 00             	adc    esi,0x0
c0027dd4:	01 c7                	add    edi,eax
c0027dd6:	83 d6 00             	adc    esi,0x0
c0027dd9:	01 ca                	add    edx,ecx
c0027ddb:	0f 92 c1             	setb   cl
c0027dde:	0f b6 c9             	movzx  ecx,cl
c0027de1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027de4:	83 d6 00             	adc    esi,0x0
c0027de7:	01 cf                	add    edi,ecx
c0027de9:	83 d6 00             	adc    esi,0x0
c0027dec:	31 c9                	xor    ecx,ecx
c0027dee:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027df1:	0f 95 c1             	setne  cl
c0027df4:	09 cf                	or     edi,ecx
c0027df6:	85 f6                	test   esi,esi
c0027df8:	78 0c                	js     c0027e06 <__muldf3+0x1f6>
c0027dfa:	01 f6                	add    esi,esi
c0027dfc:	89 f8                	mov    eax,edi
c0027dfe:	c1 e8 1f             	shr    eax,0x1f
c0027e01:	09 c6                	or     esi,eax
c0027e03:	01 ff                	add    edi,edi
c0027e05:	4b                   	dec    ebx
c0027e06:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027e0c:	0f 8f 85 00 00 00    	jg     c0027e97 <__muldf3+0x287>
c0027e12:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027e18:	85 db                	test   ebx,ebx
c0027e1a:	0f 8f 84 00 00 00    	jg     c0027ea4 <__muldf3+0x294>
c0027e20:	83 fb cc             	cmp    ebx,0xffffffcc
c0027e23:	7c 79                	jl     c0027e9e <__muldf3+0x28e>
c0027e25:	ba 01 00 00 00       	mov    edx,0x1
c0027e2a:	29 da                	sub    edx,ebx
c0027e2c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e32:	83 fa 1f             	cmp    edx,0x1f
c0027e35:	7e 30                	jle    c0027e67 <__muldf3+0x257>
c0027e37:	83 fa 20             	cmp    edx,0x20
c0027e3a:	75 0b                	jne    c0027e47 <__muldf3+0x237>
c0027e3c:	31 c0                	xor    eax,eax
c0027e3e:	85 ff                	test   edi,edi
c0027e40:	0f 95 c0             	setne  al
c0027e43:	89 c7                	mov    edi,eax
c0027e45:	eb 1a                	jmp    c0027e61 <__muldf3+0x251>
c0027e47:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027e4a:	89 f0                	mov    eax,esi
c0027e4c:	d3 e0                	shl    eax,cl
c0027e4e:	09 f8                	or     eax,edi
c0027e50:	0f 95 c0             	setne  al
c0027e53:	0f b6 c0             	movzx  eax,al
c0027e56:	89 c7                	mov    edi,eax
c0027e58:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e5d:	29 d9                	sub    ecx,ebx
c0027e5f:	d3 ee                	shr    esi,cl
c0027e61:	09 f7                	or     edi,esi
c0027e63:	31 db                	xor    ebx,ebx
c0027e65:	eb 3b                	jmp    c0027ea2 <__muldf3+0x292>
c0027e67:	83 c3 1f             	add    ebx,0x1f
c0027e6a:	89 f0                	mov    eax,esi
c0027e6c:	88 d9                	mov    cl,bl
c0027e6e:	d3 e0                	shl    eax,cl
c0027e70:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e73:	89 f8                	mov    eax,edi
c0027e75:	88 d1                	mov    cl,dl
c0027e77:	d3 e8                	shr    eax,cl
c0027e79:	89 c1                	mov    ecx,eax
c0027e7b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e7e:	09 c8                	or     eax,ecx
c0027e80:	88 d9                	mov    cl,bl
c0027e82:	d3 e7                	shl    edi,cl
c0027e84:	31 db                	xor    ebx,ebx
c0027e86:	85 ff                	test   edi,edi
c0027e88:	0f 95 c3             	setne  bl
c0027e8b:	89 df                	mov    edi,ebx
c0027e8d:	09 c7                	or     edi,eax
c0027e8f:	88 d1                	mov    cl,dl
c0027e91:	d3 ee                	shr    esi,cl
c0027e93:	31 db                	xor    ebx,ebx
c0027e95:	eb 0d                	jmp    c0027ea4 <__muldf3+0x294>
c0027e97:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027e9c:	eb 02                	jmp    c0027ea0 <__muldf3+0x290>
c0027e9e:	31 db                	xor    ebx,ebx
c0027ea0:	31 ff                	xor    edi,edi
c0027ea2:	31 f6                	xor    esi,esi
c0027ea4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ea7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027eaa:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027eaf:	09 c3                	or     ebx,eax
c0027eb1:	c1 e3 14             	shl    ebx,0x14
c0027eb4:	89 f0                	mov    eax,esi
c0027eb6:	c1 e8 0b             	shr    eax,0xb
c0027eb9:	09 c3                	or     ebx,eax
c0027ebb:	89 f8                	mov    eax,edi
c0027ebd:	c1 e8 0b             	shr    eax,0xb
c0027ec0:	c1 e6 15             	shl    esi,0x15
c0027ec3:	09 c6                	or     esi,eax
c0027ec5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027ecb:	0f 95 c1             	setne  cl
c0027ece:	09 c8                	or     eax,ecx
c0027ed0:	83 e0 01             	and    eax,0x1
c0027ed3:	c1 ef 0a             	shr    edi,0xa
c0027ed6:	21 c7                	and    edi,eax
c0027ed8:	01 f7                	add    edi,esi
c0027eda:	83 d3 00             	adc    ebx,0x0
c0027edd:	89 da                	mov    edx,ebx
c0027edf:	eb 03                	jmp    c0027ee4 <__muldf3+0x2d4>
c0027ee1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027ee4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027ee7:	89 f8                	mov    eax,edi
c0027ee9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027eec:	83 c4 24             	add    esp,0x24
c0027eef:	5b                   	pop    ebx
c0027ef0:	5e                   	pop    esi
c0027ef1:	5f                   	pop    edi
c0027ef2:	5d                   	pop    ebp
c0027ef3:	c3                   	ret    

c0027ef4 <__divdf3>:
c0027ef4:	55                   	push   ebp
c0027ef5:	89 e5                	mov    ebp,esp
c0027ef7:	57                   	push   edi
c0027ef8:	56                   	push   esi
c0027ef9:	53                   	push   ebx
c0027efa:	83 ec 2c             	sub    esp,0x2c
c0027efd:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027f00:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f03:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f06:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027f09:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027f0c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027f0f:	89 ce                	mov    esi,ecx
c0027f11:	89 c8                	mov    eax,ecx
c0027f13:	c1 f8 14             	sar    eax,0x14
c0027f16:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027f19:	89 f8                	mov    eax,edi
c0027f1b:	89 fb                	mov    ebx,edi
c0027f1d:	c1 e3 0b             	shl    ebx,0xb
c0027f20:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027f23:	c1 e6 0b             	shl    esi,0xb
c0027f26:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027f2c:	c1 e8 15             	shr    eax,0x15
c0027f2f:	09 c6                	or     esi,eax
c0027f31:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027f34:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027f37:	89 c2                	mov    edx,eax
c0027f39:	c1 fa 14             	sar    edx,0x14
c0027f3c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027f3f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027f42:	89 de                	mov    esi,ebx
c0027f44:	c1 e6 0b             	shl    esi,0xb
c0027f47:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027f4a:	c1 e0 0b             	shl    eax,0xb
c0027f4d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f52:	c1 eb 15             	shr    ebx,0x15
c0027f55:	09 d8                	or     eax,ebx
c0027f57:	89 c2                	mov    edx,eax
c0027f59:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f5c:	25 ff 07 00 00       	and    eax,0x7ff
c0027f61:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027f64:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f67:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f6d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027f70:	29 d8                	sub    eax,ebx
c0027f72:	05 ff 03 00 00       	add    eax,0x3ff
c0027f77:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f7a:	46                   	inc    esi
c0027f7b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f81:	0f 85 a5 00 00 00    	jne    c002802c <__divdf3+0x138>
c0027f87:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f8a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027f8d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027f91:	74 2a                	je     c0027fbd <__divdf3+0xc9>
c0027f93:	85 f6                	test   esi,esi
c0027f95:	0f 85 cc 02 00 00    	jne    c0028267 <__divdf3+0x373>
c0027f9b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f9e:	40                   	inc    eax
c0027f9f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027fa4:	75 26                	jne    c0027fcc <__divdf3+0xd8>
c0027fa6:	85 db                	test   ebx,ebx
c0027fa8:	74 22                	je     c0027fcc <__divdf3+0xd8>
c0027faa:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fad:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fb0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fb3:	09 d0                	or     eax,edx
c0027fb5:	0f 85 ac 02 00 00    	jne    c0028267 <__divdf3+0x373>
c0027fbb:	eb 63                	jmp    c0028020 <__divdf3+0x12c>
c0027fbd:	85 f6                	test   esi,esi
c0027fbf:	75 22                	jne    c0027fe3 <__divdf3+0xef>
c0027fc1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027fc4:	40                   	inc    eax
c0027fc5:	a9 fe 07 00 00       	test   eax,0x7fe
c0027fca:	74 36                	je     c0028002 <__divdf3+0x10e>
c0027fcc:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027fd0:	0f 89 91 02 00 00    	jns    c0028267 <__divdf3+0x373>
c0027fd6:	89 f8                	mov    eax,edi
c0027fd8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027fde:	e9 80 02 00 00       	jmp    c0028263 <__divdf3+0x36f>
c0027fe3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027fe6:	01 f6                	add    esi,esi
c0027fe8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027feb:	c1 ef 1f             	shr    edi,0x1f
c0027fee:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027ff1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027ff4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027ff7:	09 f7                	or     edi,esi
c0027ff9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027ffc:	78 2e                	js     c002802c <__divdf3+0x138>
c0027ffe:	89 c8                	mov    eax,ecx
c0028000:	eb e1                	jmp    c0027fe3 <__divdf3+0xef>
c0028002:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028005:	09 d0                	or     eax,edx
c0028007:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002800b:	74 0f                	je     c002801c <__divdf3+0x128>
c002800d:	85 c0                	test   eax,eax
c002800f:	74 bb                	je     c0027fcc <__divdf3+0xd8>
c0028011:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028014:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028017:	e9 4b 02 00 00       	jmp    c0028267 <__divdf3+0x373>
c002801c:	85 c0                	test   eax,eax
c002801e:	75 ac                	jne    c0027fcc <__divdf3+0xd8>
c0028020:	31 ff                	xor    edi,edi
c0028022:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028027:	e9 3b 02 00 00       	jmp    c0028267 <__divdf3+0x373>
c002802c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002802f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028032:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028038:	75 6b                	jne    c00280a5 <__divdf3+0x1b1>
c002803a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002803d:	09 d6                	or     esi,edx
c002803f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028043:	74 28                	je     c002806d <__divdf3+0x179>
c0028045:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028048:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002804b:	85 f6                	test   esi,esi
c002804d:	0f 85 14 02 00 00    	jne    c0028267 <__divdf3+0x373>
c0028053:	31 ff                	xor    edi,edi
c0028055:	31 c9                	xor    ecx,ecx
c0028057:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002805a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002805d:	0f 89 04 02 00 00    	jns    c0028267 <__divdf3+0x373>
c0028063:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028068:	e9 fa 01 00 00       	jmp    c0028267 <__divdf3+0x373>
c002806d:	85 f6                	test   esi,esi
c002806f:	75 1b                	jne    c002808c <__divdf3+0x198>
c0028071:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028074:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028077:	25 00 00 00 80       	and    eax,0x80000000
c002807c:	31 c9                	xor    ecx,ecx
c002807e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028083:	89 cf                	mov    edi,ecx
c0028085:	89 c1                	mov    ecx,eax
c0028087:	e9 db 01 00 00       	jmp    c0028267 <__divdf3+0x373>
c002808c:	01 d2                	add    edx,edx
c002808e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028091:	c1 eb 1f             	shr    ebx,0x1f
c0028094:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028097:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002809a:	8d 48 01             	lea    ecx,[eax+0x1]
c002809d:	09 da                	or     edx,ebx
c002809f:	78 04                	js     c00280a5 <__divdf3+0x1b1>
c00280a1:	89 c8                	mov    eax,ecx
c00280a3:	eb e7                	jmp    c002808c <__divdf3+0x198>
c00280a5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00280a8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00280ae:	81 ca 00 00 00 80    	or     edx,0x80000000
c00280b4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00280b7:	39 d6                	cmp    esi,edx
c00280b9:	77 0d                	ja     c00280c8 <__divdf3+0x1d4>
c00280bb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00280be:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00280c1:	72 1b                	jb     c00280de <__divdf3+0x1ea>
c00280c3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00280c6:	75 16                	jne    c00280de <__divdf3+0x1ea>
c00280c8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280cb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280ce:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00280d1:	83 de 00             	sbb    esi,0x0
c00280d4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00280d7:	ba 01 00 00 00       	mov    edx,0x1
c00280dc:	eb 02                	jmp    c00280e0 <__divdf3+0x1ec>
c00280de:	31 d2                	xor    edx,edx
c00280e0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00280e7:	31 ff                	xor    edi,edi
c00280e9:	01 ff                	add    edi,edi
c00280eb:	89 d1                	mov    ecx,edx
c00280ed:	c1 e9 1f             	shr    ecx,0x1f
c00280f0:	09 cf                	or     edi,ecx
c00280f2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00280f5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00280f8:	89 da                	mov    edx,ebx
c00280fa:	89 f3                	mov    ebx,esi
c00280fc:	8d 34 36             	lea    esi,[esi+esi*1]
c00280ff:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028102:	c1 e9 1f             	shr    ecx,0x1f
c0028105:	09 ce                	or     esi,ecx
c0028107:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002810a:	01 c9                	add    ecx,ecx
c002810c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002810f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028112:	85 db                	test   ebx,ebx
c0028114:	78 29                	js     c002813f <__divdf3+0x24b>
c0028116:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028119:	72 07                	jb     c0028122 <__divdf3+0x22e>
c002811b:	75 3c                	jne    c0028159 <__divdf3+0x265>
c002811d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028120:	77 37                	ja     c0028159 <__divdf3+0x265>
c0028122:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028125:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028128:	31 d2                	xor    edx,edx
c002812a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002812d:	0f 97 c2             	seta   dl
c0028130:	29 d6                	sub    esi,edx
c0028132:	89 d9                	mov    ecx,ebx
c0028134:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028137:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002813a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002813d:	eb 17                	jmp    c0028156 <__divdf3+0x262>
c002813f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028142:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028145:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028148:	0f 97 c1             	seta   cl
c002814b:	0f b6 c9             	movzx  ecx,cl
c002814e:	29 ce                	sub    esi,ecx
c0028150:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028153:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028156:	83 ca 01             	or     edx,0x1
c0028159:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002815c:	75 8b                	jne    c00280e9 <__divdf3+0x1f5>
c002815e:	c1 e7 09             	shl    edi,0x9
c0028161:	89 d1                	mov    ecx,edx
c0028163:	c1 e9 17             	shr    ecx,0x17
c0028166:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028169:	09 f3                	or     ebx,esi
c002816b:	0f 95 c3             	setne  bl
c002816e:	0f b6 db             	movzx  ebx,bl
c0028171:	c1 e2 09             	shl    edx,0x9
c0028174:	09 d3                	or     ebx,edx
c0028176:	89 ca                	mov    edx,ecx
c0028178:	09 fa                	or     edx,edi
c002817a:	78 0c                	js     c0028188 <__divdf3+0x294>
c002817c:	01 d2                	add    edx,edx
c002817e:	89 d9                	mov    ecx,ebx
c0028180:	c1 e9 1f             	shr    ecx,0x1f
c0028183:	09 ca                	or     edx,ecx
c0028185:	01 db                	add    ebx,ebx
c0028187:	48                   	dec    eax
c0028188:	3d fe 07 00 00       	cmp    eax,0x7fe
c002818d:	0f 8f 83 00 00 00    	jg     c0028216 <__divdf3+0x322>
c0028193:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028199:	85 c0                	test   eax,eax
c002819b:	0f 8f 82 00 00 00    	jg     c0028223 <__divdf3+0x32f>
c00281a1:	83 f8 cc             	cmp    eax,0xffffffcc
c00281a4:	7c 77                	jl     c002821d <__divdf3+0x329>
c00281a6:	be 01 00 00 00       	mov    esi,0x1
c00281ab:	29 c6                	sub    esi,eax
c00281ad:	81 ca 00 00 00 80    	or     edx,0x80000000
c00281b3:	83 fe 1f             	cmp    esi,0x1f
c00281b6:	7e 2f                	jle    c00281e7 <__divdf3+0x2f3>
c00281b8:	83 fe 20             	cmp    esi,0x20
c00281bb:	75 0a                	jne    c00281c7 <__divdf3+0x2d3>
c00281bd:	85 db                	test   ebx,ebx
c00281bf:	0f 95 c3             	setne  bl
c00281c2:	0f b6 db             	movzx  ebx,bl
c00281c5:	eb 1a                	jmp    c00281e1 <__divdf3+0x2ed>
c00281c7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00281ca:	89 d7                	mov    edi,edx
c00281cc:	d3 e7                	shl    edi,cl
c00281ce:	89 f9                	mov    ecx,edi
c00281d0:	09 d9                	or     ecx,ebx
c00281d2:	0f 95 c3             	setne  bl
c00281d5:	0f b6 db             	movzx  ebx,bl
c00281d8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00281dd:	29 c1                	sub    ecx,eax
c00281df:	d3 ea                	shr    edx,cl
c00281e1:	09 d3                	or     ebx,edx
c00281e3:	31 c0                	xor    eax,eax
c00281e5:	eb 3a                	jmp    c0028221 <__divdf3+0x32d>
c00281e7:	83 c0 1f             	add    eax,0x1f
c00281ea:	89 d7                	mov    edi,edx
c00281ec:	88 c1                	mov    cl,al
c00281ee:	d3 e7                	shl    edi,cl
c00281f0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281f3:	89 df                	mov    edi,ebx
c00281f5:	89 f1                	mov    ecx,esi
c00281f7:	d3 ef                	shr    edi,cl
c00281f9:	89 f9                	mov    ecx,edi
c00281fb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00281fe:	09 cf                	or     edi,ecx
c0028200:	88 c1                	mov    cl,al
c0028202:	d3 e3                	shl    ebx,cl
c0028204:	85 db                	test   ebx,ebx
c0028206:	0f 95 c3             	setne  bl
c0028209:	0f b6 db             	movzx  ebx,bl
c002820c:	09 fb                	or     ebx,edi
c002820e:	89 f1                	mov    ecx,esi
c0028210:	d3 ea                	shr    edx,cl
c0028212:	31 c0                	xor    eax,eax
c0028214:	eb 0d                	jmp    c0028223 <__divdf3+0x32f>
c0028216:	b8 ff 07 00 00       	mov    eax,0x7ff
c002821b:	eb 02                	jmp    c002821f <__divdf3+0x32b>
c002821d:	31 c0                	xor    eax,eax
c002821f:	31 db                	xor    ebx,ebx
c0028221:	31 d2                	xor    edx,edx
c0028223:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028226:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028229:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002822f:	09 c8                	or     eax,ecx
c0028231:	c1 e0 14             	shl    eax,0x14
c0028234:	89 d1                	mov    ecx,edx
c0028236:	c1 e9 0b             	shr    ecx,0xb
c0028239:	09 c8                	or     eax,ecx
c002823b:	89 c6                	mov    esi,eax
c002823d:	89 d9                	mov    ecx,ebx
c002823f:	c1 e9 0b             	shr    ecx,0xb
c0028242:	c1 e2 15             	shl    edx,0x15
c0028245:	09 ca                	or     edx,ecx
c0028247:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002824d:	0f 95 c0             	setne  al
c0028250:	09 c1                	or     ecx,eax
c0028252:	83 e1 01             	and    ecx,0x1
c0028255:	c1 eb 0a             	shr    ebx,0xa
c0028258:	21 cb                	and    ebx,ecx
c002825a:	01 d3                	add    ebx,edx
c002825c:	89 d8                	mov    eax,ebx
c002825e:	83 d6 00             	adc    esi,0x0
c0028261:	89 f2                	mov    edx,esi
c0028263:	89 c7                	mov    edi,eax
c0028265:	89 d1                	mov    ecx,edx
c0028267:	89 f8                	mov    eax,edi
c0028269:	89 ca                	mov    edx,ecx
c002826b:	83 c4 2c             	add    esp,0x2c
c002826e:	5b                   	pop    ebx
c002826f:	5e                   	pop    esi
c0028270:	5f                   	pop    edi
c0028271:	5d                   	pop    ebp
c0028272:	c3                   	ret    

c0028273 <__floatsidf>:
c0028273:	55                   	push   ebp
c0028274:	89 e5                	mov    ebp,esp
c0028276:	56                   	push   esi
c0028277:	53                   	push   ebx
c0028278:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002827b:	85 db                	test   ebx,ebx
c002827d:	7e 15                	jle    c0028294 <__floatsidf+0x21>
c002827f:	0f bd cb             	bsr    ecx,ebx
c0028282:	83 f1 1f             	xor    ecx,0x1f
c0028285:	d3 e3                	shl    ebx,cl
c0028287:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002828d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028292:	eb 21                	jmp    c00282b5 <__floatsidf+0x42>
c0028294:	b8 00 00 00 00       	mov    eax,0x0
c0028299:	ba 00 00 00 00       	mov    edx,0x0
c002829e:	74 2a                	je     c00282ca <__floatsidf+0x57>
c00282a0:	f7 db                	neg    ebx
c00282a2:	0f bd cb             	bsr    ecx,ebx
c00282a5:	83 f1 1f             	xor    ecx,0x1f
c00282a8:	d3 e3                	shl    ebx,cl
c00282aa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282b0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00282b5:	29 c8                	sub    eax,ecx
c00282b7:	c1 e0 14             	shl    eax,0x14
c00282ba:	89 c1                	mov    ecx,eax
c00282bc:	89 de                	mov    esi,ebx
c00282be:	c1 ee 0b             	shr    esi,0xb
c00282c1:	09 f1                	or     ecx,esi
c00282c3:	89 ca                	mov    edx,ecx
c00282c5:	c1 e3 15             	shl    ebx,0x15
c00282c8:	89 d8                	mov    eax,ebx
c00282ca:	5b                   	pop    ebx
c00282cb:	5e                   	pop    esi
c00282cc:	5d                   	pop    ebp
c00282cd:	c3                   	ret    

c00282ce <__floatunsidf>:
c00282ce:	55                   	push   ebp
c00282cf:	89 e5                	mov    ebp,esp
c00282d1:	56                   	push   esi
c00282d2:	53                   	push   ebx
c00282d3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282d6:	85 db                	test   ebx,ebx
c00282d8:	74 2a                	je     c0028304 <__floatunsidf+0x36>
c00282da:	0f bd cb             	bsr    ecx,ebx
c00282dd:	83 f1 1f             	xor    ecx,0x1f
c00282e0:	d3 e3                	shl    ebx,cl
c00282e2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282e8:	b8 1e 04 00 00       	mov    eax,0x41e
c00282ed:	29 c8                	sub    eax,ecx
c00282ef:	c1 e0 14             	shl    eax,0x14
c00282f2:	89 c1                	mov    ecx,eax
c00282f4:	89 de                	mov    esi,ebx
c00282f6:	c1 ee 0b             	shr    esi,0xb
c00282f9:	09 f1                	or     ecx,esi
c00282fb:	89 ca                	mov    edx,ecx
c00282fd:	c1 e3 15             	shl    ebx,0x15
c0028300:	89 d8                	mov    eax,ebx
c0028302:	eb 04                	jmp    c0028308 <__floatunsidf+0x3a>
c0028304:	31 c0                	xor    eax,eax
c0028306:	31 d2                	xor    edx,edx
c0028308:	5b                   	pop    ebx
c0028309:	5e                   	pop    esi
c002830a:	5d                   	pop    ebp
c002830b:	c3                   	ret    

c002830c <__fixdfsi>:
c002830c:	55                   	push   ebp
c002830d:	89 e5                	mov    ebp,esp
c002830f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028312:	89 d1                	mov    ecx,edx
c0028314:	c1 e1 0b             	shl    ecx,0xb
c0028317:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002831d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028320:	c1 e8 15             	shr    eax,0x15
c0028323:	09 c1                	or     ecx,eax
c0028325:	c1 fa 14             	sar    edx,0x14
c0028328:	78 1f                	js     c0028349 <__fixdfsi+0x3d>
c002832a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028330:	31 c0                	xor    eax,eax
c0028332:	83 fa 1e             	cmp    edx,0x1e
c0028335:	77 40                	ja     c0028377 <__fixdfsi+0x6b>
c0028337:	89 c8                	mov    eax,ecx
c0028339:	0d 00 00 00 80       	or     eax,0x80000000
c002833e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028343:	29 d1                	sub    ecx,edx
c0028345:	d3 e8                	shr    eax,cl
c0028347:	eb 2e                	jmp    c0028377 <__fixdfsi+0x6b>
c0028349:	31 c0                	xor    eax,eax
c002834b:	81 c2 01 04 00 00    	add    edx,0x401
c0028351:	78 24                	js     c0028377 <__fixdfsi+0x6b>
c0028353:	83 fa 1e             	cmp    edx,0x1e
c0028356:	7e 09                	jle    c0028361 <__fixdfsi+0x55>
c0028358:	83 fa 1f             	cmp    edx,0x1f
c002835b:	75 18                	jne    c0028375 <__fixdfsi+0x69>
c002835d:	85 c9                	test   ecx,ecx
c002835f:	75 14                	jne    c0028375 <__fixdfsi+0x69>
c0028361:	89 c8                	mov    eax,ecx
c0028363:	0d 00 00 00 80       	or     eax,0x80000000
c0028368:	b9 1f 00 00 00       	mov    ecx,0x1f
c002836d:	29 d1                	sub    ecx,edx
c002836f:	d3 e8                	shr    eax,cl
c0028371:	f7 d8                	neg    eax
c0028373:	eb 02                	jmp    c0028377 <__fixdfsi+0x6b>
c0028375:	31 c0                	xor    eax,eax
c0028377:	5d                   	pop    ebp
c0028378:	c3                   	ret    

c0028379 <__fixunsdfsi>:
c0028379:	55                   	push   ebp
c002837a:	89 e5                	mov    ebp,esp
c002837c:	53                   	push   ebx
c002837d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028380:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028383:	89 d3                	mov    ebx,edx
c0028385:	c1 fb 14             	sar    ebx,0x14
c0028388:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002838e:	31 c0                	xor    eax,eax
c0028390:	83 fb 1f             	cmp    ebx,0x1f
c0028393:	77 1d                	ja     c00283b2 <__fixunsdfsi+0x39>
c0028395:	89 d0                	mov    eax,edx
c0028397:	c1 e0 0b             	shl    eax,0xb
c002839a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002839f:	c1 e9 15             	shr    ecx,0x15
c00283a2:	09 c8                	or     eax,ecx
c00283a4:	0d 00 00 00 80       	or     eax,0x80000000
c00283a9:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283ae:	29 d9                	sub    ecx,ebx
c00283b0:	d3 e8                	shr    eax,cl
c00283b2:	5b                   	pop    ebx
c00283b3:	5d                   	pop    ebp
c00283b4:	c3                   	ret    

c00283b5 <__cmpdf2>:
c00283b5:	55                   	push   ebp
c00283b6:	89 e5                	mov    ebp,esp
c00283b8:	57                   	push   edi
c00283b9:	56                   	push   esi
c00283ba:	53                   	push   ebx
c00283bb:	83 ec 0c             	sub    esp,0xc
c00283be:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00283c1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00283c4:	89 ca                	mov    edx,ecx
c00283c6:	c1 ea 14             	shr    edx,0x14
c00283c9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00283cf:	89 cb                	mov    ebx,ecx
c00283d1:	c1 fb 1f             	sar    ebx,0x1f
c00283d4:	31 da                	xor    edx,ebx
c00283d6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00283d9:	89 df                	mov    edi,ebx
c00283db:	c1 e7 0b             	shl    edi,0xb
c00283de:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00283e1:	c1 e1 0b             	shl    ecx,0xb
c00283e4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283ea:	c1 eb 15             	shr    ebx,0x15
c00283ed:	09 d9                	or     ecx,ebx
c00283ef:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00283f2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283f5:	89 ce                	mov    esi,ecx
c00283f7:	c1 ee 14             	shr    esi,0x14
c00283fa:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028400:	89 cb                	mov    ebx,ecx
c0028402:	c1 fb 1f             	sar    ebx,0x1f
c0028405:	31 de                	xor    esi,ebx
c0028407:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002840a:	89 df                	mov    edi,ebx
c002840c:	c1 e7 0b             	shl    edi,0xb
c002840f:	c1 e1 0b             	shl    ecx,0xb
c0028412:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028418:	c1 eb 15             	shr    ebx,0x15
c002841b:	09 d9                	or     ecx,ebx
c002841d:	89 d3                	mov    ebx,edx
c002841f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028425:	43                   	inc    ebx
c0028426:	83 fb 01             	cmp    ebx,0x1
c0028429:	77 08                	ja     c0028433 <__cmpdf2+0x7e>
c002842b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002842e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028431:	75 68                	jne    c002849b <__cmpdf2+0xe6>
c0028433:	89 f3                	mov    ebx,esi
c0028435:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002843b:	43                   	inc    ebx
c002843c:	83 fb 01             	cmp    ebx,0x1
c002843f:	77 06                	ja     c0028447 <__cmpdf2+0x92>
c0028441:	89 fb                	mov    ebx,edi
c0028443:	09 cb                	or     ebx,ecx
c0028445:	75 54                	jne    c002849b <__cmpdf2+0xe6>
c0028447:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002844a:	09 f8                	or     eax,edi
c002844c:	09 c8                	or     eax,ecx
c002844e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028451:	75 12                	jne    c0028465 <__cmpdf2+0xb0>
c0028453:	8d 42 01             	lea    eax,[edx+0x1]
c0028456:	83 f8 01             	cmp    eax,0x1
c0028459:	77 0a                	ja     c0028465 <__cmpdf2+0xb0>
c002845b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002845e:	31 c0                	xor    eax,eax
c0028460:	83 fb 01             	cmp    ebx,0x1
c0028463:	76 36                	jbe    c002849b <__cmpdf2+0xe6>
c0028465:	b8 01 00 00 00       	mov    eax,0x1
c002846a:	39 f2                	cmp    edx,esi
c002846c:	7f 2d                	jg     c002849b <__cmpdf2+0xe6>
c002846e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028473:	7c 26                	jl     c002849b <__cmpdf2+0xe6>
c0028475:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028478:	77 07                	ja     c0028481 <__cmpdf2+0xcc>
c002847a:	72 16                	jb     c0028492 <__cmpdf2+0xdd>
c002847c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002847f:	76 0a                	jbe    c002848b <__cmpdf2+0xd6>
c0028481:	89 d0                	mov    eax,edx
c0028483:	c1 f8 1f             	sar    eax,0x1f
c0028486:	83 c8 01             	or     eax,0x1
c0028489:	eb 10                	jmp    c002849b <__cmpdf2+0xe6>
c002848b:	b8 00 00 00 00       	mov    eax,0x0
c0028490:	73 09                	jae    c002849b <__cmpdf2+0xe6>
c0028492:	89 d0                	mov    eax,edx
c0028494:	c1 f8 1f             	sar    eax,0x1f
c0028497:	83 e0 02             	and    eax,0x2
c002849a:	48                   	dec    eax
c002849b:	83 c4 0c             	add    esp,0xc
c002849e:	5b                   	pop    ebx
c002849f:	5e                   	pop    esi
c00284a0:	5f                   	pop    edi
c00284a1:	5d                   	pop    ebp
c00284a2:	c3                   	ret    

c00284a3 <__eqdf2>:
c00284a3:	55                   	push   ebp
c00284a4:	89 e5                	mov    ebp,esp
c00284a6:	50                   	push   eax
c00284a7:	6a 01                	push   0x1
c00284a9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00284ac:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00284af:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00284b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00284b5:	e8 fb fe ff ff       	call   c00283b5 <__cmpdf2>
c00284ba:	83 c4 18             	add    esp,0x18
c00284bd:	c9                   	leave  
c00284be:	c3                   	ret    

c00284bf <__nedf2>:
c00284bf:	eb e2                	jmp    c00284a3 <__eqdf2>

c00284c1 <__gtdf2>:
c00284c1:	55                   	push   ebp
c00284c2:	89 e5                	mov    ebp,esp
c00284c4:	50                   	push   eax
c00284c5:	6a ff                	push   0xffffffff
c00284c7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00284ca:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00284cd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00284d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00284d3:	e8 dd fe ff ff       	call   c00283b5 <__cmpdf2>
c00284d8:	83 c4 18             	add    esp,0x18
c00284db:	c9                   	leave  
c00284dc:	c3                   	ret    

c00284dd <__gedf2>:
c00284dd:	eb e2                	jmp    c00284c1 <__gtdf2>

c00284df <__ltdf2>:
c00284df:	eb c2                	jmp    c00284a3 <__eqdf2>

c00284e1 <__ledf2>:
c00284e1:	eb c0                	jmp    c00284a3 <__eqdf2>

c00284e3 <__truncdfsf2>:
c00284e3:	55                   	push   ebp
c00284e4:	89 e5                	mov    ebp,esp
c00284e6:	57                   	push   edi
c00284e7:	56                   	push   esi
c00284e8:	53                   	push   ebx
c00284e9:	83 ec 0c             	sub    esp,0xc
c00284ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00284ef:	89 d1                	mov    ecx,edx
c00284f1:	c1 f9 14             	sar    ecx,0x14
c00284f4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00284f7:	89 df                	mov    edi,ebx
c00284f9:	c1 e7 0b             	shl    edi,0xb
c00284fc:	89 d0                	mov    eax,edx
c00284fe:	c1 e0 0b             	shl    eax,0xb
c0028501:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028506:	c1 eb 15             	shr    ebx,0x15
c0028509:	09 d8                	or     eax,ebx
c002850b:	89 cb                	mov    ebx,ecx
c002850d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028513:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028519:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002851f:	0f 86 9e 00 00 00    	jbe    c00285c3 <__truncdfsf2+0xe0>
c0028525:	85 db                	test   ebx,ebx
c0028527:	75 0a                	jne    c0028533 <__truncdfsf2+0x50>
c0028529:	c1 fa 17             	sar    edx,0x17
c002852c:	30 d2                	xor    dl,dl
c002852e:	e9 84 00 00 00       	jmp    c00285b7 <__truncdfsf2+0xd4>
c0028533:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028539:	83 fe 83             	cmp    esi,0xffffff83
c002853c:	7d 4b                	jge    c0028589 <__truncdfsf2+0xa6>
c002853e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028543:	29 f1                	sub    ecx,esi
c0028545:	83 f9 1f             	cmp    ecx,0x1f
c0028548:	7f 6b                	jg     c00285b5 <__truncdfsf2+0xd2>
c002854a:	0d 00 00 00 80       	or     eax,0x80000000
c002854f:	89 c3                	mov    ebx,eax
c0028551:	d3 eb                	shr    ebx,cl
c0028553:	be 01 00 00 00       	mov    esi,0x1
c0028558:	d3 e6                	shl    esi,cl
c002855a:	4e                   	dec    esi
c002855b:	21 f0                	and    eax,esi
c002855d:	09 f8                	or     eax,edi
c002855f:	0f 95 c0             	setne  al
c0028562:	0f b6 c0             	movzx  eax,al
c0028565:	09 c3                	or     ebx,eax
c0028567:	89 d9                	mov    ecx,ebx
c0028569:	c1 e9 08             	shr    ecx,0x8
c002856c:	f6 c3 7f             	test   bl,0x7f
c002856f:	0f 95 c0             	setne  al
c0028572:	09 c8                	or     eax,ecx
c0028574:	83 e0 01             	and    eax,0x1
c0028577:	c1 eb 07             	shr    ebx,0x7
c002857a:	21 c3                	and    ebx,eax
c002857c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028582:	09 d1                	or     ecx,edx
c0028584:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028587:	eb 76                	jmp    c00285ff <__truncdfsf2+0x11c>
c0028589:	83 c6 80             	add    esi,0xffffff80
c002858c:	7e 1d                	jle    c00285ab <__truncdfsf2+0xc8>
c002858e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028594:	75 0b                	jne    c00285a1 <__truncdfsf2+0xbe>
c0028596:	09 f8                	or     eax,edi
c0028598:	74 09                	je     c00285a3 <__truncdfsf2+0xc0>
c002859a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002859f:	eb 02                	jmp    c00285a3 <__truncdfsf2+0xc0>
c00285a1:	31 c0                	xor    eax,eax
c00285a3:	c1 fa 17             	sar    edx,0x17
c00285a6:	80 ca ff             	or     dl,0xff
c00285a9:	eb 0e                	jmp    c00285b9 <__truncdfsf2+0xd6>
c00285ab:	c1 fa 1f             	sar    edx,0x1f
c00285ae:	c1 e2 08             	shl    edx,0x8
c00285b1:	09 ca                	or     edx,ecx
c00285b3:	eb 04                	jmp    c00285b9 <__truncdfsf2+0xd6>
c00285b5:	31 d2                	xor    edx,edx
c00285b7:	31 c0                	xor    eax,eax
c00285b9:	c1 e2 17             	shl    edx,0x17
c00285bc:	c1 e8 08             	shr    eax,0x8
c00285bf:	09 d0                	or     eax,edx
c00285c1:	eb 3c                	jmp    c00285ff <__truncdfsf2+0x11c>
c00285c3:	81 e9 80 03 00 00    	sub    ecx,0x380
c00285c9:	89 ca                	mov    edx,ecx
c00285cb:	c1 fa 0b             	sar    edx,0xb
c00285ce:	c1 e2 08             	shl    edx,0x8
c00285d1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00285d4:	31 db                	xor    ebx,ebx
c00285d6:	85 ff                	test   edi,edi
c00285d8:	0f 95 c3             	setne  bl
c00285db:	09 d8                	or     eax,ebx
c00285dd:	89 c3                	mov    ebx,eax
c00285df:	c1 eb 08             	shr    ebx,0x8
c00285e2:	a8 7f                	test   al,0x7f
c00285e4:	0f 95 c2             	setne  dl
c00285e7:	89 d6                	mov    esi,edx
c00285e9:	09 de                	or     esi,ebx
c00285eb:	83 e6 01             	and    esi,0x1
c00285ee:	c1 e8 07             	shr    eax,0x7
c00285f1:	21 f0                	and    eax,esi
c00285f3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00285f6:	09 ca                	or     edx,ecx
c00285f8:	c1 e2 17             	shl    edx,0x17
c00285fb:	09 da                	or     edx,ebx
c00285fd:	01 d0                	add    eax,edx
c00285ff:	83 c4 0c             	add    esp,0xc
c0028602:	5b                   	pop    ebx
c0028603:	5e                   	pop    esi
c0028604:	5f                   	pop    edi
c0028605:	5d                   	pop    ebp
c0028606:	c3                   	ret    

c0028607 <__extendsfdf2>:
c0028607:	55                   	push   ebp
c0028608:	89 e5                	mov    ebp,esp
c002860a:	57                   	push   edi
c002860b:	56                   	push   esi
c002860c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002860f:	89 d1                	mov    ecx,edx
c0028611:	c1 f9 17             	sar    ecx,0x17
c0028614:	c1 e2 08             	shl    edx,0x8
c0028617:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002861d:	89 c8                	mov    eax,ecx
c002861f:	80 e4 f8             	and    ah,0xf8
c0028622:	8d 71 01             	lea    esi,[ecx+0x1]
c0028625:	81 e6 fe 00 00 00    	and    esi,0xfe
c002862b:	75 27                	jne    c0028654 <__extendsfdf2+0x4d>
c002862d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028633:	75 18                	jne    c002864d <__extendsfdf2+0x46>
c0028635:	85 d2                	test   edx,edx
c0028637:	74 20                	je     c0028659 <__extendsfdf2+0x52>
c0028639:	41                   	inc    ecx
c002863a:	01 d2                	add    edx,edx
c002863c:	79 fb                	jns    c0028639 <__extendsfdf2+0x32>
c002863e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028644:	29 c8                	sub    eax,ecx
c0028646:	05 81 03 00 00       	add    eax,0x381
c002864b:	eb 0c                	jmp    c0028659 <__extendsfdf2+0x52>
c002864d:	05 00 07 00 00       	add    eax,0x700
c0028652:	eb 05                	jmp    c0028659 <__extendsfdf2+0x52>
c0028654:	05 80 03 00 00       	add    eax,0x380
c0028659:	c1 e0 14             	shl    eax,0x14
c002865c:	89 c1                	mov    ecx,eax
c002865e:	89 d0                	mov    eax,edx
c0028660:	c1 e8 0b             	shr    eax,0xb
c0028663:	09 c1                	or     ecx,eax
c0028665:	c1 e2 15             	shl    edx,0x15
c0028668:	89 d0                	mov    eax,edx
c002866a:	89 ca                	mov    edx,ecx
c002866c:	5e                   	pop    esi
c002866d:	5f                   	pop    edi
c002866e:	5d                   	pop    ebp
c002866f:	c3                   	ret    

c0028670 <fabs>:
c0028670:	83 ec 0c             	sub    esp,0xc
c0028673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028677:	89 04 24             	mov    DWORD PTR [esp],eax
c002867a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002867e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028683:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028687:	dd 04 24             	fld    QWORD PTR [esp]
c002868a:	83 c4 0c             	add    esp,0xc
c002868d:	c3                   	ret    
c002868e:	66 90                	xchg   ax,ax

c0028690 <lrint>:
c0028690:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028694:	83 ec 04             	sub    esp,0x4
c0028697:	db 1c 24             	fistp  DWORD PTR [esp]
c002869a:	58                   	pop    eax
c002869b:	c3                   	ret    

c002869c <lrintf>:
c002869c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00286a0:	83 ec 04             	sub    esp,0x4
c00286a3:	db 1c 24             	fistp  DWORD PTR [esp]
c00286a6:	58                   	pop    eax
c00286a7:	c3                   	ret    

Disassembly of section .init:

c00286a8 <_init>:
c00286a8:	55                   	push   ebp
c00286a9:	89 e5                	mov    ebp,esp
c00286ab:	e8 68 7a fd ff       	call   c0000118 <frame_dummy>
c00286b0:	e8 63 e0 ff ff       	call   c0026718 <__do_global_ctors_aux>
c00286b5:	5d                   	pop    ebp
c00286b6:	c3                   	ret    

Disassembly of section .fini:

c00286b7 <_fini>:
c00286b7:	55                   	push   ebp
c00286b8:	89 e5                	mov    ebp,esp
c00286ba:	e8 e9 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00286bf:	5d                   	pop    ebp
c00286c0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00286c2 <Computer::~Computer()>:
c00286c2:	83 ec 0c             	sub    esp,0xc
c00286c5:	ba 08 a2 02 c0       	mov    edx,0xc002a208
c00286ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ce:	89 10                	mov    DWORD PTR [eax],edx
c00286d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d4:	83 ec 0c             	sub    esp,0xc
c00286d7:	50                   	push   eax
c00286d8:	e8 89 bb fe ff       	call   c0014266 <Device::~Device()>
c00286dd:	83 c4 10             	add    esp,0x10
c00286e0:	90                   	nop
c00286e1:	83 c4 0c             	add    esp,0xc
c00286e4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00286e6 <Computer::~Computer()>:
c00286e6:	83 ec 0c             	sub    esp,0xc
c00286e9:	83 ec 0c             	sub    esp,0xc
c00286ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286f0:	e8 cd ff ff ff       	call   c00286c2 <Computer::~Computer()>
c00286f5:	83 c4 10             	add    esp,0x10
c00286f8:	83 ec 08             	sub    esp,0x8
c00286fb:	68 ec 01 00 00       	push   0x1ec
c0028700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028704:	e8 85 a7 fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0028709:	83 c4 10             	add    esp,0x10
c002870c:	83 c4 0c             	add    esp,0xc
c002870f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028710 <idleCommon()>:
c0028710:	83 ec 0c             	sub    esp,0xc
c0028713:	e8 1c 57 ff ff       	call   c001de34 <lockScheduler()>
c0028718:	e8 53 5a ff ff       	call   c001e170 <schedule()>
c002871d:	83 c4 0c             	add    esp,0xc
c0028720:	e9 11 57 ff ff       	jmp    c001de36 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028726 <LinkedList<UnixFile>::~LinkedList()>:
c0028726:	90                   	nop
c0028727:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028728 <LinkedList<UnixFile>::LinkedList()>:
c0028728:	83 ec 0c             	sub    esp,0xc
c002872b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028739:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028744:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002874b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028759:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028764:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002876b:	83 ec 0c             	sub    esp,0xc
c002876e:	68 da a4 02 c0       	push   0xc002a4da
c0028773:	e8 f6 a7 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0028778:	83 c4 10             	add    esp,0x10
c002877b:	90                   	nop
c002877c:	83 c4 0c             	add    esp,0xc
c002877f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028780 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028780:	83 ec 0c             	sub    esp,0xc
c0028783:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028788:	75 10                	jne    c002879a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002878a:	83 ec 0c             	sub    esp,0xc
c002878d:	68 f4 a4 02 c0       	push   0xc002a4f4
c0028792:	e8 78 1e ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0028797:	83 c4 10             	add    esp,0x10
c002879a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879e:	8b 00                	mov    eax,DWORD PTR [eax]
c00287a0:	85 c0                	test   eax,eax
c00287a2:	74 34                	je     c00287d8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00287a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287ab:	85 c0                	test   eax,eax
c00287ad:	74 29                	je     c00287d8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00287af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287c5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287d6:	eb 65                	jmp    c002883d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00287de:	85 c0                	test   eax,eax
c00287e0:	75 4b                	jne    c002882d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287e9:	85 c0                	test   eax,eax
c00287eb:	75 40                	jne    c002882d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287f5:	89 10                	mov    DWORD PTR [eax],edx
c00287f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028806:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028809:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028814:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028817:	85 c0                	test   eax,eax
c0028819:	74 22                	je     c002883d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002881b:	83 ec 0c             	sub    esp,0xc
c002881e:	68 16 a5 02 c0       	push   0xc002a516
c0028823:	e8 e7 1d ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0028828:	83 c4 10             	add    esp,0x10
c002882b:	eb 10                	jmp    c002883d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002882d:	83 ec 0c             	sub    esp,0xc
c0028830:	68 20 a5 02 c0       	push   0xc002a520
c0028835:	e8 d5 1d ff ff       	call   c001a60f <Krnl::panic(char const*)>
c002883a:	83 c4 10             	add    esp,0x10
c002883d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028841:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028844:	8d 50 01             	lea    edx,[eax+0x1]
c0028847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002884e:	90                   	nop
c002884f:	83 c4 0c             	add    esp,0xc
c0028852:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028854 <LinkedList<UnixFile>::getFirstElement()>:
c0028854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028858:	8b 00                	mov    eax,DWORD PTR [eax]
c002885a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002885c <LinkedList<UnixFile>::removeFirst()>:
c002885c:	83 ec 0c             	sub    esp,0xc
c002885f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028863:	8b 00                	mov    eax,DWORD PTR [eax]
c0028865:	85 c0                	test   eax,eax
c0028867:	75 12                	jne    c002887b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028869:	83 ec 0c             	sub    esp,0xc
c002886c:	68 2c a5 02 c0       	push   0xc002a52c
c0028871:	e8 99 1d ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0028876:	83 c4 10             	add    esp,0x10
c0028879:	eb 7e                	jmp    c00288f9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002887b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028882:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028885:	85 c0                	test   eax,eax
c0028887:	74 10                	je     c0028899 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028889:	83 ec 0c             	sub    esp,0xc
c002888c:	68 77 a5 02 c0       	push   0xc002a577
c0028891:	e8 79 1d ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0028896:	83 c4 10             	add    esp,0x10
c0028899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889d:	8b 00                	mov    eax,DWORD PTR [eax]
c002889f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288a2:	85 c0                	test   eax,eax
c00288a4:	75 33                	jne    c00288d9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00288a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288c2:	83 f8 01             	cmp    eax,0x1
c00288c5:	74 21                	je     c00288e8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00288c7:	83 ec 0c             	sub    esp,0xc
c00288ca:	68 50 a5 02 c0       	push   0xc002a550
c00288cf:	e8 3b 1d ff ff       	call   c001a60f <Krnl::panic(char const*)>
c00288d4:	83 c4 10             	add    esp,0x10
c00288d7:	eb 0f                	jmp    c00288e8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00288d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00288df:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00288e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e6:	89 10                	mov    DWORD PTR [eax],edx
c00288e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288ef:	8d 50 ff             	lea    edx,[eax-0x1]
c00288f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288f9:	83 c4 0c             	add    esp,0xc
c00288fc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00288fe <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00288fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028902:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028905:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028906 <DriverlessDevice::~DriverlessDevice()>:
c0028906:	ba 24 ae 02 c0       	mov    edx,0xc002ae24
c002890b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002890f:	89 10                	mov    DWORD PTR [eax],edx
c0028911:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028915:	50                   	push   eax
c0028916:	e8 4b b9 fe ff       	call   c0014266 <Device::~Device()>
c002891b:	83 c4 04             	add    esp,0x4
c002891e:	90                   	nop
c002891f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028920 <DriverlessDevice::~DriverlessDevice()>:
c0028920:	83 ec 0c             	sub    esp,0xc
c0028923:	83 ec 0c             	sub    esp,0xc
c0028926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002892a:	e8 d7 ff ff ff       	call   c0028906 <DriverlessDevice::~DriverlessDevice()>
c002892f:	83 c4 10             	add    esp,0x10
c0028932:	83 ec 08             	sub    esp,0x8
c0028935:	68 58 01 00 00       	push   0x158
c002893a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002893e:	e8 4b a5 fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0028943:	83 c4 10             	add    esp,0x10
c0028946:	83 c4 0c             	add    esp,0xc
c0028949:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002894a <LinkedList<Device>::addElement(Device*)>:
c002894a:	83 ec 0c             	sub    esp,0xc
c002894d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028952:	75 10                	jne    c0028964 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028954:	83 ec 0c             	sub    esp,0xc
c0028957:	68 f4 a4 02 c0       	push   0xc002a4f4
c002895c:	e8 ae 1c ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0028961:	83 c4 10             	add    esp,0x10
c0028964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028968:	8b 00                	mov    eax,DWORD PTR [eax]
c002896a:	85 c0                	test   eax,eax
c002896c:	74 3a                	je     c00289a8 <LinkedList<Device>::addElement(Device*)+0x5e>
c002896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028972:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028975:	85 c0                	test   eax,eax
c0028977:	74 2f                	je     c00289a8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028980:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028984:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002898a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028992:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028999:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002899c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00289a6:	eb 68                	jmp    c0028a10 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00289ae:	85 c0                	test   eax,eax
c00289b0:	75 4e                	jne    c0028a00 <LinkedList<Device>::addElement(Device*)+0xb6>
c00289b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289b9:	85 c0                	test   eax,eax
c00289bb:	75 43                	jne    c0028a00 <LinkedList<Device>::addElement(Device*)+0xb6>
c00289bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289c5:	89 10                	mov    DWORD PTR [eax],edx
c00289c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289d9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00289e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289ea:	85 c0                	test   eax,eax
c00289ec:	74 22                	je     c0028a10 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289ee:	83 ec 0c             	sub    esp,0xc
c00289f1:	68 16 a5 02 c0       	push   0xc002a516
c00289f6:	e8 14 1c ff ff       	call   c001a60f <Krnl::panic(char const*)>
c00289fb:	83 c4 10             	add    esp,0x10
c00289fe:	eb 10                	jmp    c0028a10 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a00:	83 ec 0c             	sub    esp,0xc
c0028a03:	68 20 a5 02 c0       	push   0xc002a520
c0028a08:	e8 02 1c ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0028a0d:	83 c4 10             	add    esp,0x10
c0028a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a17:	8d 50 01             	lea    edx,[eax+0x1]
c0028a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a21:	90                   	nop
c0028a22:	83 c4 0c             	add    esp,0xc
c0028a25:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028a26 <LinkedList<Device>::LinkedList()>:
c0028a26:	83 ec 0c             	sub    esp,0xc
c0028a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a42:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a62:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a69:	83 ec 0c             	sub    esp,0xc
c0028a6c:	68 da a4 02 c0       	push   0xc002a4da
c0028a71:	e8 f8 a4 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0028a76:	83 c4 10             	add    esp,0x10
c0028a79:	90                   	nop
c0028a7a:	83 c4 0c             	add    esp,0xc
c0028a7d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028a7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a82:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a84:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028a86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028a86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a8c:	85 c0                	test   eax,eax
c0028a8e:	75 0e                	jne    c0028a9e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a97:	85 c0                	test   eax,eax
c0028a99:	75 03                	jne    c0028a9e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a9b:	b0 01                	mov    al,0x1
c0028a9d:	c3                   	ret    
c0028a9e:	b0 00                	mov    al,0x0
c0028aa0:	90                   	nop
c0028aa1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028aa2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028aa2:	83 ec 0c             	sub    esp,0xc
c0028aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aab:	85 c0                	test   eax,eax
c0028aad:	75 15                	jne    c0028ac4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028aaf:	83 ec 0c             	sub    esp,0xc
c0028ab2:	68 2c a5 02 c0       	push   0xc002a52c
c0028ab7:	e8 53 1b ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0028abc:	83 c4 10             	add    esp,0x10
c0028abf:	e9 88 00 00 00       	jmp    c0028b4c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028acb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ace:	85 c0                	test   eax,eax
c0028ad0:	0f 95 c0             	setne  al
c0028ad3:	84 c0                	test   al,al
c0028ad5:	74 10                	je     c0028ae7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028ad7:	83 ec 0c             	sub    esp,0xc
c0028ada:	68 77 a5 02 c0       	push   0xc002a577
c0028adf:	e8 2b 1b ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0028ae4:	83 c4 10             	add    esp,0x10
c0028ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028af0:	85 c0                	test   eax,eax
c0028af2:	0f 94 c0             	sete   al
c0028af5:	84 c0                	test   al,al
c0028af7:	74 33                	je     c0028b2c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028af9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028afd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b15:	83 f8 01             	cmp    eax,0x1
c0028b18:	74 21                	je     c0028b3b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b1a:	83 ec 0c             	sub    esp,0xc
c0028b1d:	68 50 a5 02 c0       	push   0xc002a550
c0028b22:	e8 e8 1a ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0028b27:	83 c4 10             	add    esp,0x10
c0028b2a:	eb 0f                	jmp    c0028b3b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b30:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b32:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b39:	89 10                	mov    DWORD PTR [eax],edx
c0028b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b42:	8d 50 ff             	lea    edx,[eax-0x1]
c0028b45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b49:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b4c:	83 c4 0c             	add    esp,0xc
c0028b4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028b50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028b50:	83 ec 0c             	sub    esp,0xc
c0028b53:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b58:	75 10                	jne    c0028b6a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028b5a:	83 ec 0c             	sub    esp,0xc
c0028b5d:	68 f4 a4 02 c0       	push   0xc002a4f4
c0028b62:	e8 a8 1a ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0028b67:	83 c4 10             	add    esp,0x10
c0028b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b70:	85 c0                	test   eax,eax
c0028b72:	74 34                	je     c0028ba8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b7b:	85 c0                	test   eax,eax
c0028b7d:	74 29                	je     c0028ba8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b8a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028b8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b95:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b9f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028ba6:	eb 65                	jmp    c0028c0d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bac:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bae:	85 c0                	test   eax,eax
c0028bb0:	75 4b                	jne    c0028bfd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bb9:	85 c0                	test   eax,eax
c0028bbb:	75 40                	jne    c0028bfd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bc5:	89 10                	mov    DWORD PTR [eax],edx
c0028bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bcb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bcf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bd9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028be7:	85 c0                	test   eax,eax
c0028be9:	74 22                	je     c0028c0d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028beb:	83 ec 0c             	sub    esp,0xc
c0028bee:	68 16 a5 02 c0       	push   0xc002a516
c0028bf3:	e8 17 1a ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0028bf8:	83 c4 10             	add    esp,0x10
c0028bfb:	eb 10                	jmp    c0028c0d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bfd:	83 ec 0c             	sub    esp,0xc
c0028c00:	68 20 a5 02 c0       	push   0xc002a520
c0028c05:	e8 05 1a ff ff       	call   c001a60f <Krnl::panic(char const*)>
c0028c0a:	83 c4 10             	add    esp,0x10
c0028c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c11:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c14:	8d 50 01             	lea    edx,[eax+0x1]
c0028c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c1e:	90                   	nop
c0028c1f:	83 c4 0c             	add    esp,0xc
c0028c22:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028c24 <ACPI::~ACPI()>:
c0028c24:	83 ec 0c             	sub    esp,0xc
c0028c27:	ba 6c b7 02 c0       	mov    edx,0xc002b76c
c0028c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c30:	89 10                	mov    DWORD PTR [eax],edx
c0028c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c36:	83 ec 0c             	sub    esp,0xc
c0028c39:	50                   	push   eax
c0028c3a:	e8 27 b6 fe ff       	call   c0014266 <Device::~Device()>
c0028c3f:	83 c4 10             	add    esp,0x10
c0028c42:	90                   	nop
c0028c43:	83 c4 0c             	add    esp,0xc
c0028c46:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028c48 <ACPI::~ACPI()>:
c0028c48:	83 ec 0c             	sub    esp,0xc
c0028c4b:	83 ec 0c             	sub    esp,0xc
c0028c4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c52:	e8 cd ff ff ff       	call   c0028c24 <ACPI::~ACPI()>
c0028c57:	83 c4 10             	add    esp,0x10
c0028c5a:	83 ec 08             	sub    esp,0x8
c0028c5d:	68 68 12 00 00       	push   0x1268
c0028c62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c66:	e8 23 a2 fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0028c6b:	83 c4 10             	add    esp,0x10
c0028c6e:	83 c4 0c             	add    esp,0xc
c0028c71:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c72 <CPU::~CPU()>:
c0028c72:	83 ec 0c             	sub    esp,0xc
c0028c75:	ba 5c bb 02 c0       	mov    edx,0xc002bb5c
c0028c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c7e:	89 10                	mov    DWORD PTR [eax],edx
c0028c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c84:	83 ec 0c             	sub    esp,0xc
c0028c87:	50                   	push   eax
c0028c88:	e8 d9 b5 fe ff       	call   c0014266 <Device::~Device()>
c0028c8d:	83 c4 10             	add    esp,0x10
c0028c90:	90                   	nop
c0028c91:	83 c4 0c             	add    esp,0xc
c0028c94:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c96 <CPU::~CPU()>:
c0028c96:	83 ec 0c             	sub    esp,0xc
c0028c99:	83 ec 0c             	sub    esp,0xc
c0028c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca0:	e8 cd ff ff ff       	call   c0028c72 <CPU::~CPU()>
c0028ca5:	83 c4 10             	add    esp,0x10
c0028ca8:	83 ec 08             	sub    esp,0x8
c0028cab:	68 98 11 00 00       	push   0x1198
c0028cb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cb4:	e8 d5 a1 fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0028cb9:	83 c4 10             	add    esp,0x10
c0028cbc:	83 c4 0c             	add    esp,0xc
c0028cbf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028cc0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028cc0:	90                   	nop
c0028cc1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028cc2 <ThreadControlBlock::ThreadControlBlock()>:
c0028cc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cc6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028ccd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cd1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cdc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028ce3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ce7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028cee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cf2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028cf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cfa:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028cfe:	90                   	nop
c0028cff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028d00 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028d00:	83 ec 0c             	sub    esp,0xc
c0028d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d07:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d11:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d1c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d3c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d43:	83 ec 0c             	sub    esp,0xc
c0028d46:	68 da a4 02 c0       	push   0xc002a4da
c0028d4b:	e8 1e a2 fe ff       	call   c0012f6e <Dbg::kprintf(char const*, ...)>
c0028d50:	83 c4 10             	add    esp,0x10
c0028d53:	90                   	nop
c0028d54:	83 c4 0c             	add    esp,0xc
c0028d57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028d58 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028d58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d5c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d5f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d60 <Vm::_FPUState::_FPUState()>:
c0028d60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d64:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d6b:	90                   	nop
c0028d6c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d6e <PCI::~PCI()>:
c0028d6e:	83 ec 0c             	sub    esp,0xc
c0028d71:	ba 44 cc 02 c0       	mov    edx,0xc002cc44
c0028d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7a:	89 10                	mov    DWORD PTR [eax],edx
c0028d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d80:	83 ec 0c             	sub    esp,0xc
c0028d83:	50                   	push   eax
c0028d84:	e8 b5 ae fe ff       	call   c0013c3e <Bus::~Bus()>
c0028d89:	83 c4 10             	add    esp,0x10
c0028d8c:	90                   	nop
c0028d8d:	83 c4 0c             	add    esp,0xc
c0028d90:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d92 <PCI::~PCI()>:
c0028d92:	83 ec 0c             	sub    esp,0xc
c0028d95:	83 ec 0c             	sub    esp,0xc
c0028d98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d9c:	e8 cd ff ff ff       	call   c0028d6e <PCI::~PCI()>
c0028da1:	83 c4 10             	add    esp,0x10
c0028da4:	83 ec 08             	sub    esp,0x8
c0028da7:	68 58 01 00 00       	push   0x158
c0028dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028db0:	e8 d9 a0 fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0028db5:	83 c4 10             	add    esp,0x10
c0028db8:	83 c4 0c             	add    esp,0xc
c0028dbb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028dbc <IDE::~IDE()>:
c0028dbc:	83 ec 0c             	sub    esp,0xc
c0028dbf:	ba a8 ce 02 c0       	mov    edx,0xc002cea8
c0028dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc8:	89 10                	mov    DWORD PTR [eax],edx
c0028dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dce:	83 ec 0c             	sub    esp,0xc
c0028dd1:	50                   	push   eax
c0028dd2:	e8 7f b9 fe ff       	call   c0014756 <HardDiskController::~HardDiskController()>
c0028dd7:	83 c4 10             	add    esp,0x10
c0028dda:	90                   	nop
c0028ddb:	83 c4 0c             	add    esp,0xc
c0028dde:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028de0 <IDE::~IDE()>:
c0028de0:	83 ec 0c             	sub    esp,0xc
c0028de3:	83 ec 0c             	sub    esp,0xc
c0028de6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dea:	e8 cd ff ff ff       	call   c0028dbc <IDE::~IDE()>
c0028def:	83 c4 10             	add    esp,0x10
c0028df2:	83 ec 08             	sub    esp,0x8
c0028df5:	68 70 02 00 00       	push   0x270
c0028dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dfe:	e8 8b a0 fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0028e03:	83 c4 10             	add    esp,0x10
c0028e06:	83 c4 0c             	add    esp,0xc
c0028e09:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028e0a <SATABus::~SATABus()>:
c0028e0a:	83 ec 0c             	sub    esp,0xc
c0028e0d:	ba 88 cf 02 c0       	mov    edx,0xc002cf88
c0028e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e16:	89 10                	mov    DWORD PTR [eax],edx
c0028e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e1c:	83 ec 0c             	sub    esp,0xc
c0028e1f:	50                   	push   eax
c0028e20:	e8 31 b9 fe ff       	call   c0014756 <HardDiskController::~HardDiskController()>
c0028e25:	83 c4 10             	add    esp,0x10
c0028e28:	90                   	nop
c0028e29:	83 c4 0c             	add    esp,0xc
c0028e2c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028e2e <SATABus::~SATABus()>:
c0028e2e:	83 ec 0c             	sub    esp,0xc
c0028e31:	83 ec 0c             	sub    esp,0xc
c0028e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e38:	e8 cd ff ff ff       	call   c0028e0a <SATABus::~SATABus()>
c0028e3d:	83 c4 10             	add    esp,0x10
c0028e40:	83 ec 08             	sub    esp,0x8
c0028e43:	68 64 01 00 00       	push   0x164
c0028e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e4c:	e8 3d a0 fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0028e51:	83 c4 10             	add    esp,0x10
c0028e54:	83 c4 0c             	add    esp,0xc
c0028e57:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028e58 <ATA::~ATA()>:
c0028e58:	83 ec 0c             	sub    esp,0xc
c0028e5b:	ba d4 cf 02 c0       	mov    edx,0xc002cfd4
c0028e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e64:	89 10                	mov    DWORD PTR [eax],edx
c0028e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e6a:	83 ec 0c             	sub    esp,0xc
c0028e6d:	50                   	push   eax
c0028e6e:	e8 d5 b9 fe ff       	call   c0014848 <PhysicalDisk::~PhysicalDisk()>
c0028e73:	83 c4 10             	add    esp,0x10
c0028e76:	90                   	nop
c0028e77:	83 c4 0c             	add    esp,0xc
c0028e7a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e7c <ATA::~ATA()>:
c0028e7c:	83 ec 0c             	sub    esp,0xc
c0028e7f:	83 ec 0c             	sub    esp,0xc
c0028e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e86:	e8 cd ff ff ff       	call   c0028e58 <ATA::~ATA()>
c0028e8b:	83 c4 10             	add    esp,0x10
c0028e8e:	83 ec 08             	sub    esp,0x8
c0028e91:	68 7c 01 00 00       	push   0x17c
c0028e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e9a:	e8 ef 9f fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0028e9f:	83 c4 10             	add    esp,0x10
c0028ea2:	83 c4 0c             	add    esp,0xc
c0028ea5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028ea6 <ATAPI::~ATAPI()>:
c0028ea6:	83 ec 0c             	sub    esp,0xc
c0028ea9:	ba 0c d0 02 c0       	mov    edx,0xc002d00c
c0028eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb2:	89 10                	mov    DWORD PTR [eax],edx
c0028eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb8:	83 ec 0c             	sub    esp,0xc
c0028ebb:	50                   	push   eax
c0028ebc:	e8 87 b9 fe ff       	call   c0014848 <PhysicalDisk::~PhysicalDisk()>
c0028ec1:	83 c4 10             	add    esp,0x10
c0028ec4:	90                   	nop
c0028ec5:	83 c4 0c             	add    esp,0xc
c0028ec8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028eca <ATAPI::~ATAPI()>:
c0028eca:	83 ec 0c             	sub    esp,0xc
c0028ecd:	83 ec 0c             	sub    esp,0xc
c0028ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed4:	e8 cd ff ff ff       	call   c0028ea6 <ATAPI::~ATAPI()>
c0028ed9:	83 c4 10             	add    esp,0x10
c0028edc:	83 ec 08             	sub    esp,0x8
c0028edf:	68 80 01 00 00       	push   0x180
c0028ee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee8:	e8 a1 9f fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0028eed:	83 c4 10             	add    esp,0x10
c0028ef0:	83 c4 0c             	add    esp,0xc
c0028ef3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028ef4 <SATA::~SATA()>:
c0028ef4:	83 ec 0c             	sub    esp,0xc
c0028ef7:	ba c0 d0 02 c0       	mov    edx,0xc002d0c0
c0028efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f00:	89 10                	mov    DWORD PTR [eax],edx
c0028f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f06:	83 ec 0c             	sub    esp,0xc
c0028f09:	50                   	push   eax
c0028f0a:	e8 39 b9 fe ff       	call   c0014848 <PhysicalDisk::~PhysicalDisk()>
c0028f0f:	83 c4 10             	add    esp,0x10
c0028f12:	90                   	nop
c0028f13:	83 c4 0c             	add    esp,0xc
c0028f16:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028f18 <SATA::~SATA()>:
c0028f18:	83 ec 0c             	sub    esp,0xc
c0028f1b:	83 ec 0c             	sub    esp,0xc
c0028f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f22:	e8 cd ff ff ff       	call   c0028ef4 <SATA::~SATA()>
c0028f27:	83 c4 10             	add    esp,0x10
c0028f2a:	83 ec 08             	sub    esp,0x8
c0028f2d:	68 7c 01 00 00       	push   0x17c
c0028f32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f36:	e8 53 9f fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0028f3b:	83 c4 10             	add    esp,0x10
c0028f3e:	83 c4 0c             	add    esp,0xc
c0028f41:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028f42 <SATAPI::~SATAPI()>:
c0028f42:	83 ec 0c             	sub    esp,0xc
c0028f45:	ba 9c d1 02 c0       	mov    edx,0xc002d19c
c0028f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4e:	89 10                	mov    DWORD PTR [eax],edx
c0028f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f54:	83 ec 0c             	sub    esp,0xc
c0028f57:	50                   	push   eax
c0028f58:	e8 eb b8 fe ff       	call   c0014848 <PhysicalDisk::~PhysicalDisk()>
c0028f5d:	83 c4 10             	add    esp,0x10
c0028f60:	90                   	nop
c0028f61:	83 c4 0c             	add    esp,0xc
c0028f64:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f66 <SATAPI::~SATAPI()>:
c0028f66:	83 ec 0c             	sub    esp,0xc
c0028f69:	83 ec 0c             	sub    esp,0xc
c0028f6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f70:	e8 cd ff ff ff       	call   c0028f42 <SATAPI::~SATAPI()>
c0028f75:	83 c4 10             	add    esp,0x10
c0028f78:	83 ec 08             	sub    esp,0x8
c0028f7b:	68 80 01 00 00       	push   0x180
c0028f80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f84:	e8 05 9f fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0028f89:	83 c4 10             	add    esp,0x10
c0028f8c:	83 c4 0c             	add    esp,0xc
c0028f8f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f90 <AVX::~AVX()>:
c0028f90:	83 ec 0c             	sub    esp,0xc
c0028f93:	ba dc d1 02 c0       	mov    edx,0xc002d1dc
c0028f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9c:	89 10                	mov    DWORD PTR [eax],edx
c0028f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa2:	83 ec 0c             	sub    esp,0xc
c0028fa5:	50                   	push   eax
c0028fa6:	e8 21 b9 fe ff       	call   c00148cc <FPU::~FPU()>
c0028fab:	83 c4 10             	add    esp,0x10
c0028fae:	90                   	nop
c0028faf:	83 c4 0c             	add    esp,0xc
c0028fb2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028fb4 <AVX::~AVX()>:
c0028fb4:	83 ec 0c             	sub    esp,0xc
c0028fb7:	83 ec 0c             	sub    esp,0xc
c0028fba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fbe:	e8 cd ff ff ff       	call   c0028f90 <AVX::~AVX()>
c0028fc3:	83 c4 10             	add    esp,0x10
c0028fc6:	83 ec 08             	sub    esp,0x8
c0028fc9:	68 58 01 00 00       	push   0x158
c0028fce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd2:	e8 b7 9e fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0028fd7:	83 c4 10             	add    esp,0x10
c0028fda:	83 c4 0c             	add    esp,0xc
c0028fdd:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028fde <MMX::~MMX()>:
c0028fde:	83 ec 0c             	sub    esp,0xc
c0028fe1:	ba 1c d2 02 c0       	mov    edx,0xc002d21c
c0028fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fea:	89 10                	mov    DWORD PTR [eax],edx
c0028fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff0:	83 ec 0c             	sub    esp,0xc
c0028ff3:	50                   	push   eax
c0028ff4:	e8 d3 b8 fe ff       	call   c00148cc <FPU::~FPU()>
c0028ff9:	83 c4 10             	add    esp,0x10
c0028ffc:	90                   	nop
c0028ffd:	83 c4 0c             	add    esp,0xc
c0029000:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029002 <MMX::~MMX()>:
c0029002:	83 ec 0c             	sub    esp,0xc
c0029005:	83 ec 0c             	sub    esp,0xc
c0029008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002900c:	e8 cd ff ff ff       	call   c0028fde <MMX::~MMX()>
c0029011:	83 c4 10             	add    esp,0x10
c0029014:	83 ec 08             	sub    esp,0x8
c0029017:	68 58 01 00 00       	push   0x158
c002901c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029020:	e8 69 9e fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0029025:	83 c4 10             	add    esp,0x10
c0029028:	83 c4 0c             	add    esp,0xc
c002902b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002902c <SSE::~SSE()>:
c002902c:	83 ec 0c             	sub    esp,0xc
c002902f:	ba 5c d2 02 c0       	mov    edx,0xc002d25c
c0029034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029038:	89 10                	mov    DWORD PTR [eax],edx
c002903a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903e:	83 ec 0c             	sub    esp,0xc
c0029041:	50                   	push   eax
c0029042:	e8 85 b8 fe ff       	call   c00148cc <FPU::~FPU()>
c0029047:	83 c4 10             	add    esp,0x10
c002904a:	90                   	nop
c002904b:	83 c4 0c             	add    esp,0xc
c002904e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029050 <SSE::~SSE()>:
c0029050:	83 ec 0c             	sub    esp,0xc
c0029053:	83 ec 0c             	sub    esp,0xc
c0029056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002905a:	e8 cd ff ff ff       	call   c002902c <SSE::~SSE()>
c002905f:	83 c4 10             	add    esp,0x10
c0029062:	83 ec 08             	sub    esp,0x8
c0029065:	68 58 01 00 00       	push   0x158
c002906a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002906e:	e8 1b 9e fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0029073:	83 c4 10             	add    esp,0x10
c0029076:	83 c4 0c             	add    esp,0xc
c0029079:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002907a <x87::~x87()>:
c002907a:	83 ec 0c             	sub    esp,0xc
c002907d:	ba 9c d2 02 c0       	mov    edx,0xc002d29c
c0029082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029086:	89 10                	mov    DWORD PTR [eax],edx
c0029088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002908c:	83 ec 0c             	sub    esp,0xc
c002908f:	50                   	push   eax
c0029090:	e8 37 b8 fe ff       	call   c00148cc <FPU::~FPU()>
c0029095:	83 c4 10             	add    esp,0x10
c0029098:	90                   	nop
c0029099:	83 c4 0c             	add    esp,0xc
c002909c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002909e <x87::~x87()>:
c002909e:	83 ec 0c             	sub    esp,0xc
c00290a1:	83 ec 0c             	sub    esp,0xc
c00290a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290a8:	e8 cd ff ff ff       	call   c002907a <x87::~x87()>
c00290ad:	83 c4 10             	add    esp,0x10
c00290b0:	83 ec 08             	sub    esp,0x8
c00290b3:	68 58 01 00 00       	push   0x158
c00290b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290bc:	e8 cd 9d fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c00290c1:	83 c4 10             	add    esp,0x10
c00290c4:	83 c4 0c             	add    esp,0xc
c00290c7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00290c8 <IOAPIC::~IOAPIC()>:
c00290c8:	83 ec 0c             	sub    esp,0xc
c00290cb:	ba f4 d3 02 c0       	mov    edx,0xc002d3f4
c00290d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d4:	89 10                	mov    DWORD PTR [eax],edx
c00290d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290da:	83 ec 0c             	sub    esp,0xc
c00290dd:	50                   	push   eax
c00290de:	e8 83 b1 fe ff       	call   c0014266 <Device::~Device()>
c00290e3:	83 c4 10             	add    esp,0x10
c00290e6:	90                   	nop
c00290e7:	83 c4 0c             	add    esp,0xc
c00290ea:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00290ec <IOAPIC::~IOAPIC()>:
c00290ec:	83 ec 0c             	sub    esp,0xc
c00290ef:	83 ec 0c             	sub    esp,0xc
c00290f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290f6:	e8 cd ff ff ff       	call   c00290c8 <IOAPIC::~IOAPIC()>
c00290fb:	83 c4 10             	add    esp,0x10
c00290fe:	83 ec 08             	sub    esp,0x8
c0029101:	68 68 01 00 00       	push   0x168
c0029106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002910a:	e8 7f 9d fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c002910f:	83 c4 10             	add    esp,0x10
c0029112:	83 c4 0c             	add    esp,0xc
c0029115:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029116 <APIC::~APIC()>:
c0029116:	83 ec 0c             	sub    esp,0xc
c0029119:	ba ac d3 02 c0       	mov    edx,0xc002d3ac
c002911e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029122:	89 10                	mov    DWORD PTR [eax],edx
c0029124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029128:	83 ec 0c             	sub    esp,0xc
c002912b:	50                   	push   eax
c002912c:	e8 65 bc fe ff       	call   c0014d96 <InterruptController::~InterruptController()>
c0029131:	83 c4 10             	add    esp,0x10
c0029134:	90                   	nop
c0029135:	83 c4 0c             	add    esp,0xc
c0029138:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002913a <APIC::~APIC()>:
c002913a:	83 ec 0c             	sub    esp,0xc
c002913d:	83 ec 0c             	sub    esp,0xc
c0029140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029144:	e8 cd ff ff ff       	call   c0029116 <APIC::~APIC()>
c0029149:	83 c4 10             	add    esp,0x10
c002914c:	83 ec 08             	sub    esp,0x8
c002914f:	68 58 21 00 00       	push   0x2158
c0029154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029158:	e8 31 9d fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c002915d:	83 c4 10             	add    esp,0x10
c0029160:	83 c4 0c             	add    esp,0xc
c0029163:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029164 <PIC::~PIC()>:
c0029164:	83 ec 0c             	sub    esp,0xc
c0029167:	ba 44 d4 02 c0       	mov    edx,0xc002d444
c002916c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029170:	89 10                	mov    DWORD PTR [eax],edx
c0029172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029176:	83 ec 0c             	sub    esp,0xc
c0029179:	50                   	push   eax
c002917a:	e8 17 bc fe ff       	call   c0014d96 <InterruptController::~InterruptController()>
c002917f:	83 c4 10             	add    esp,0x10
c0029182:	90                   	nop
c0029183:	83 c4 0c             	add    esp,0xc
c0029186:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029188 <PIC::~PIC()>:
c0029188:	83 ec 0c             	sub    esp,0xc
c002918b:	83 ec 0c             	sub    esp,0xc
c002918e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029192:	e8 cd ff ff ff       	call   c0029164 <PIC::~PIC()>
c0029197:	83 c4 10             	add    esp,0x10
c002919a:	83 ec 08             	sub    esp,0x8
c002919d:	68 58 21 00 00       	push   0x2158
c00291a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291a6:	e8 e3 9c fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c00291ab:	83 c4 10             	add    esp,0x10
c00291ae:	83 c4 0c             	add    esp,0xc
c00291b1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00291b2 <APICTimer::~APICTimer()>:
c00291b2:	83 ec 0c             	sub    esp,0xc
c00291b5:	ba 98 d4 02 c0       	mov    edx,0xc002d498
c00291ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291be:	89 10                	mov    DWORD PTR [eax],edx
c00291c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c4:	83 ec 0c             	sub    esp,0xc
c00291c7:	50                   	push   eax
c00291c8:	e8 15 db fe ff       	call   c0016ce2 <Timer::~Timer()>
c00291cd:	83 c4 10             	add    esp,0x10
c00291d0:	90                   	nop
c00291d1:	83 c4 0c             	add    esp,0xc
c00291d4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00291d6 <APICTimer::~APICTimer()>:
c00291d6:	83 ec 0c             	sub    esp,0xc
c00291d9:	83 ec 0c             	sub    esp,0xc
c00291dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291e0:	e8 cd ff ff ff       	call   c00291b2 <APICTimer::~APICTimer()>
c00291e5:	83 c4 10             	add    esp,0x10
c00291e8:	83 ec 08             	sub    esp,0x8
c00291eb:	68 60 01 00 00       	push   0x160
c00291f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291f4:	e8 95 9c fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c00291f9:	83 c4 10             	add    esp,0x10
c00291fc:	83 c4 0c             	add    esp,0xc
c00291ff:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029200 <PIT::~PIT()>:
c0029200:	83 ec 0c             	sub    esp,0xc
c0029203:	ba e8 d4 02 c0       	mov    edx,0xc002d4e8
c0029208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002920c:	89 10                	mov    DWORD PTR [eax],edx
c002920e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029212:	83 ec 0c             	sub    esp,0xc
c0029215:	50                   	push   eax
c0029216:	e8 c7 da fe ff       	call   c0016ce2 <Timer::~Timer()>
c002921b:	83 c4 10             	add    esp,0x10
c002921e:	90                   	nop
c002921f:	83 c4 0c             	add    esp,0xc
c0029222:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029224 <PIT::~PIT()>:
c0029224:	83 ec 0c             	sub    esp,0xc
c0029227:	83 ec 0c             	sub    esp,0xc
c002922a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002922e:	e8 cd ff ff ff       	call   c0029200 <PIT::~PIT()>
c0029233:	83 c4 10             	add    esp,0x10
c0029236:	83 ec 08             	sub    esp,0x8
c0029239:	68 5c 01 00 00       	push   0x15c
c002923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029242:	e8 47 9c fe ff       	call   c0012e8e <operator delete(void*, unsigned long)>
c0029247:	83 c4 10             	add    esp,0x10
c002924a:	83 c4 0c             	add    esp,0xc
c002924d:	c3                   	ret    
