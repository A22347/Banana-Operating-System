
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 24 42 02 c0       	mov    eax,0xc0024224
c0000025:	3d 24 42 02 c0       	cmp    eax,0xc0024224
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 24 42 02 c0       	push   0xc0024224
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 24 42 02 c0       	mov    eax,0xc0024224
c0000051:	2d 24 42 02 c0       	sub    eax,0xc0024224
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 24 42 02 c0       	push   0xc0024224
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 4c 04 02 c0       	mov    ebx,0xc002044c
c0000097:	81 eb 48 04 02 c0    	sub    ebx,0xc0020448
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 48 04 02 c0       	mov    esi,0xc0020448
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 24 42 02 c0       	push   0xc0024224
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 24 42 02 c0       	push   0xc0024224
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 8b 56 01 00       	call   c0015938 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 69 56 01 00       	call   c0015938 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 76 5b 01 00       	call   c0015e64 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 35 62 01 00       	call   c001652c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 8b 12 01 00       	jmp    c001160a <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 60 04 02 c0 02 	test   BYTE PTR [edx-0x3ffdfba0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 60 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfba0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 60 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfba0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 60 04 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfba0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 60 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfba0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001176:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011b2:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011b7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011c5:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001216:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c0001231:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c00012eb:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c00012f1:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c00012f8:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013be:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013c4:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c00013cb:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 64 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfa9c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 32 7d 01 00       	jmp    c0019ad4 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 5c 7d 01 00       	jmp    c0019b14 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 7d 7d 01 00       	jmp    c0019b54 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 c0 06 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf940]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 c0 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf940]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 40 2e 02 c0       	mov    edx,0xc0022e40
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 7c 05 02 c0       	mov    edx,0xc002057c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 82 05 02 c0       	mov    eax,0xc0020582
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 40 06 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf9c0]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 8b 05 02 c0       	mov    eax,0xc002058b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 c0 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf940]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 10 06 02 c0       	mov    eax,0xc0020610
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 00 06 02 c0       	mov    ebx,0xc0020600
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 e0 05 02 c0       	mov    eax,0xc00205e0
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 f0 05 02 c0       	mov    eax,0xc00205f0
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 92 05 02 c0       	mov    edx,0xc0020592
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 9e 05 02 c0       	mov    edx,0xc002059e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba b2 05 02 c0       	mov    edx,0xc00205b2
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c e0 09 02 c0 	mov    DWORD PTR [esp+0xc],0xc00209e0
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 e0 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc00209e0
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 e0 07 02 c0       	mov    eax,0xc00207e0
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 20 07 02 c0       	mov    eax,0xc0020720
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 e0 06 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf920]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 e0 0a 02 c0       	push   0xc0020ae0
c000611b:	e8 50 43 01 00       	call   c001a470 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 ee 0a 02 c0       	push   0xc0020aee
c0006153:	e8 18 43 01 00       	call   c001a470 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 81 42 01 00       	call   c001a414 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 fd 0a 02 c0       	push   0xc0020afd
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000655e:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c0006564:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006580:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00065f9:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00066f1:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000672f:	05 40 65 02 c0       	add    eax,0xc0026540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00067ee:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 00 0b 02 c0       	push   0xc0020b00
c0006812:	e8 59 3c 01 00       	call   c001a470 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 6d 3c 01 00       	call   c001a48c <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 05 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b05
c000682c:	e8 3f 3c 01 00       	call   c001a470 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006838:	e8 4f 3c 01 00       	call   c001a48c <iso_kprintfd>
c000683d:	c7 04 24 0b 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b0b
c0006844:	e8 27 3c 01 00       	call   c001a470 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006850:	e8 37 3c 01 00       	call   c001a48c <iso_kprintfd>
c0006855:	c7 04 24 11 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b11
c000685c:	e8 0f 3c 01 00       	call   c001a470 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006868:	e8 1f 3c 01 00       	call   c001a48c <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068ce:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c000692a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 fd 0a 02 c0       	push   0xc0020afd
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a06:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a0c:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 65 02 c0       	add    eax,0xc0026550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 1a 0b 02 c0       	push   0xc0020b1a
c0006a31:	e8 3a 3a 01 00       	call   c001a470 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a66:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 25 0b 02 c0       	push   0xc0020b25
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 2c 0b 02 c0       	push   0xc0020b2c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b27:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 33 0b 02 c0       	push   0xc0020b33
c0006b48:	e8 23 39 01 00       	call   c001a470 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 3e 0b 02 c0       	push   0xc0020b3e
c0006b63:	e8 08 39 01 00       	call   c001a470 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 65 02 c0       	push   0xc0026540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c4d:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 ce a1 00 00       	call   c0010e40 <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 63 5e 00 00       	call   c000cae4 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 4f 0b 02 c0       	push   0xc0020b4f
c0006cb2:	e8 68 a2 00 00       	call   c0010f1f <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 68 0b 02 c0       	push   0xc0020b68
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 b1 ef 00 00       	call   c0015c90 <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 c0 f1 00 00       	call   c0015eb4 <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 9c 69 01 c0       	push   0xc001699c
c0006d03:	52                   	push   edx
c0006d04:	e8 ab f1 00 00       	call   c0015eb4 <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d11:	68 64 0c 02 c0       	push   0xc0020c64
c0006d16:	e8 04 a2 00 00       	call   c0010f1f <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d22:	e8 b1 aa 00 00       	call   c00117d8 <KeInitRand()>
c0006d27:	e8 93 00 01 00       	call   c0016dbf <Vm::initialise8086()>
c0006d2c:	e8 f9 4a 00 00       	call   c000b82a <Fs::initVFS()>
c0006d31:	c7 04 24 75 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b75
c0006d38:	e8 e2 a1 00 00       	call   c0010f1f <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 64 0c 02 c0       	push   0xc0020c64
c0006d5c:	e8 be a1 00 00       	call   c0010f1f <KeSetBootMessage(char const*)>
c0006d61:	e8 5e 42 00 00       	call   c000afc4 <KeInitialiseSymlinks()>
c0006d66:	e8 17 a7 00 00       	call   c0011482 <KeLoadSystemEnv()>
c0006d6b:	e8 74 a9 00 00       	call   c00116e4 <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 8f 0b 02 c0       	push   0xc0020b8f
c0006d7a:	68 98 0b 02 c0       	push   0xc0020b98
c0006d7f:	e8 e4 d0 00 00       	call   c0013e68 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 b8 56 00 00       	call   c000c444 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 88 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c88
c0006d93:	e8 87 a1 00 00       	call   c0010f1f <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 38 5d 00 00       	call   c000cae2 <Device::loadDriversForAll()>
c0006daa:	c7 04 24 a0 0b 02 c0 	mov    DWORD PTR [esp],0xc0020ba0
c0006db1:	e8 69 a1 00 00       	call   c0010f1f <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 b1 0b 02 c0       	push   0xc0020bb1
c0006dc5:	e8 db e8 00 00       	call   c00156a5 <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 03 eb 00 00       	call   c00158d6 <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 38 f5 00 00       	call   c0016318 <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 cd 0b 02 c0       	push   0xc0020bcd
c0006df5:	50                   	push   eax
c0006df6:	e8 63 5d 00 00       	call   c000cb5e <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba d4 0c 02 c0       	mov    edx,0xc0020cd4
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 51 85 01 00       	call   c001f446 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 25 94 00 00       	call   c0010358 <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 fe 93 00 00       	call   c0010358 <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 dc 93 00 00       	call   c0010358 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 ba 93 00 00       	call   c0010358 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 c7 92 00 00       	call   c00102d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 a2 92 00 00       	call   c00102d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 b0 83 01 00       	call   c001f400 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 fe 7f 01 00       	call   c001f070 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 b8 92 00 00       	call   c0010358 <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 d6 0b 02 c0       	push   0xc0020bd6
c00070e2:	e8 38 a5 00 00       	call   c001161f <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 dc 0b 02 c0       	push   0xc0020bdc
c000711e:	e8 fc a4 00 00       	call   c001161f <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 05 8c 00 00       	jmp    c000fd70 <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071be:	68 e2 0b 02 c0       	push   0xc0020be2
c00071c3:	0f 94 05 80 36 02 c0 	sete   BYTE PTR ds:0xc0023680
c00071ca:	e8 50 9d 00 00       	call   c0010f1f <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 ff 86 00 00       	call   c000f8e4 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 d2 57 00 00       	call   c000c9c6 <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 fa 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bfa
c000720d:	e8 0d 9d 00 00       	call   c0010f1f <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 e8 91 00 00       	call   c0010410 <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 8f 57 00 00       	call   c000c9c6 <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 a8 0c 02 c0       	push   0xc0020ca8
c0007254:	e8 c6 9c 00 00       	call   c0010f1f <KeSetBootMessage(char const*)>
c0007259:	e8 9e 0d 01 00       	call   c0017ffc <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 14 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c14
c0007265:	e8 b5 9c 00 00       	call   c0010f1f <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 6a ed 00 00       	call   c0015fe0 <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 2f 0c 02 c0       	push   0xc0020c2f
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 40 0c 02 c0       	push   0xc0020c40
c00072ed:	e8 2d a3 00 00       	call   c001161f <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 4d 0c 02 c0       	push   0xc0020c4d
c0007302:	e8 18 a3 00 00       	call   c001161f <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 57 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020c57
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 fe a2 00 00       	jmp    c001161f <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073b1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 b5 07 01 00       	call   c0017cc8 <HalSystemIdle()>
c0007513:	e8 ea 84 01 00       	call   c001fa02 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007615:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000761a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 00 f1 01 c0       	push   0xc001f100
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 10 f1 01 c0       	push   0xc001f110
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 1a f1 01 c0       	push   0xc001f11a
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 24 f1 01 c0       	push   0xc001f124
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 2e f1 01 c0       	push   0xc001f12e
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 38 f1 01 c0       	push   0xc001f138
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 42 f1 01 c0       	push   0xc001f142
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 4c f1 01 c0       	push   0xc001f14c
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 56 f1 01 c0       	push   0xc001f156
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 5e f1 01 c0       	push   0xc001f15e
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 68 f1 01 c0       	push   0xc001f168
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 70 f1 01 c0       	push   0xc001f170
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 78 f1 01 c0       	push   0xc001f178
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 80 f1 01 c0       	push   0xc001f180
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 9a f1 01 c0       	push   0xc001f19a
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 a2 f1 01 c0       	push   0xc001f1a2
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 ac f1 01 c0       	push   0xc001f1ac
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 b6 f1 01 c0       	push   0xc001f1b6
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 c0 f1 01 c0       	push   0xc001f1c0
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 5a f2 01 c0       	push   0xc001f25a
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 61 f2 01 c0       	push   0xc001f261
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 4c f2 01 c0       	push   0xc001f24c
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 53 f2 01 c0       	push   0xc001f253
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 ca f1 01 c0       	push   0xc001f1ca
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 d4 f1 01 c0       	push   0xc001f1d4
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 de f1 01 c0       	push   0xc001f1de
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 e8 f1 01 c0       	push   0xc001f1e8
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 f2 f1 01 c0       	push   0xc001f1f2
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 fc f1 01 c0       	push   0xc001f1fc
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 06 f2 01 c0       	push   0xc001f206
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 10 f2 01 c0       	push   0xc001f210
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 1a f2 01 c0       	push   0xc001f21a
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 24 f2 01 c0       	push   0xc001f224
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 2e f2 01 c0       	push   0xc001f22e
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 38 f2 01 c0       	push   0xc001f238
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 42 f2 01 c0       	push   0xc001f242
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 9c f3 01 c0       	push   0xc001f39c
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 a6 f3 01 c0       	push   0xc001f3a6
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 b0 f3 01 c0       	push   0xc001f3b0
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 ba f3 01 c0       	push   0xc001f3ba
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 c4 f3 01 c0       	push   0xc001f3c4
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 ce f3 01 c0       	push   0xc001f3ce
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 d8 f3 01 c0       	push   0xc001f3d8
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 e2 f3 01 c0       	push   0xc001f3e2
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 56 f1 01 c0       	push   0xc001f156
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 70 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023670
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079ba:	8b 3d 70 36 02 c0    	mov    edi,DWORD PTR ds:0xc0023670
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 70 36 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023670,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 70 36 02 c0       	mov    eax,ds:0xc0023670
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 f8 0c 02 c0       	push   0xc0020cf8
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 28 0d 02 c0       	push   0xc0020d28
c0007a27:	e8 f3 9b 00 00       	call   c001161f <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 2d 0d 02 c0       	push   0xc0020d2d
c0007a3d:	e8 dd 9b 00 00       	call   c001161f <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 34 0d 02 c0       	push   0xc0020d34
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 3a 93 00 00       	call   c0010ea3 <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 63 92 00 00       	call   c0010ded <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007b9b:	e8 fa 7d 01 00       	call   c001f99a <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 4c 0d 02 c0       	push   0xc0020d4c
c0007c31:	e8 e9 99 00 00       	call   c001161f <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 6e 02 c0    	lea    edx,[ebp-0x3ffd9114]
c0007c75:	8d 84 05 ed 6e 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 4c 0d 02 c0       	push   0xc0020d4c
c0007ca2:	e8 78 99 00 00       	call   c001161f <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 74 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023674
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d 74 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023674
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 74 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023674
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 f1 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020df1
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 72 98 00 00       	jmp    c001161f <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 74 0d 02 c0       	push   0xc0020d74
c0007e31:	e8 e9 97 00 00       	call   c001161f <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e58:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 07 0e 02 c0       	push   0xc0020e07
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 a4 0d 02 c0       	push   0xc0020da4
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 c8 0d 02 c0       	push   0xc0020dc8
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 2d 0e 02 c0       	push   0xc0020e2d
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 1f 0e 02 c0       	push   0xc0020e1f
c000813c:	e8 de 94 00 00       	call   c001161f <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba 8c 0e 02 c0       	mov    edx,0xc0020e8c
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 49 0e 02 c0       	push   0xc0020e49
c0008311:	e8 09 93 00 00       	call   c001161f <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000835a:	e8 a5 dd 00 00       	call   c0016104 <schedule()>
c000835f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 89 74 01 00       	call   c001f880 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 66 0e 02 c0       	push   0xc0020e66
c000840c:	e8 0e 92 00 00       	call   c001161f <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 8c 0e 02 c0       	mov    edx,0xc0020e8c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba d4 0e 02 c0       	mov    edx,0xc0020ed4
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 aa 53 00 00       	call   c000d8a0 <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 a0 09 01 00       	call   c0018ebc <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d a0 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc960]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d a0 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc960]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 58 35 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcaa8]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 30 35 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcad0]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 d2 06 01 00       	call   c0018d50 <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 2f 07 01 00       	jmp    c0018e58 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 a0 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ea0
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 a9 8e 00 00       	jmp    c001161f <KePanic(char const*)>
c0008776:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 18 3b 00 00       	jmp    c000c3eb <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be ae 0e 02 c0       	mov    esi,0xc0020eae
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 36 02 01 00       	call   c0018e58 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba d4 0e 02 c0       	mov    edx,0xc0020ed4
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 bf 0e 02 c0       	push   0xc0020ebf
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 c5 0e 02 c0       	push   0xc0020ec5
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba 9c 0f 02 c0       	mov    edx,0xc0020f9c
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 e0 36 02 c0       	mov    eax,ds:0xc00236e0
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 e0 36 02 c0    	mov    DWORD PTR ds:0xc00236e0,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 6f 02 c0       	push   0xc0026f98
c00091fc:	e8 67 68 01 00       	call   c001fa68 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba b8 0f 02 c0       	mov    edx,0xc0020fb8
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba 9c 0f 02 c0       	mov    edx,0xc0020f9c
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 6f 02 c0       	push   0xc0026f98
c00093d0:	e8 67 67 01 00       	call   c001fb3c <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 6f 02 c0       	push   0xc0026f98
c00093e4:	e8 5b 67 01 00       	call   c001fb44 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 6f 02 c0       	push   0xc0026f98
c0009402:	e8 61 66 01 00       	call   c001fa68 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 74 0f 02 c0       	push   0xc0020f74
c000942c:	e8 ee 81 00 00       	call   c001161f <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba b8 0f 02 c0       	mov    edx,0xc0020fb8
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 6f 02 c0       	push   0xc0026f98
c00094d1:	e8 66 66 01 00       	call   c001fb3c <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 6f 02 c0       	push   0xc0026f98
c00094ee:	e8 f3 66 01 00       	call   c001fbe6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 6f 02 c0       	push   0xc0026f98
c0009570:	e8 b1 64 01 00       	call   c001fa26 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 6c 36 02 c0       	push   0xc002366c
c0009580:	68 98 6f 02 c0       	push   0xc0026f98
c0009585:	68 24 fa 01 c0       	push   0xc001fa24
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 e8 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236e8
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d e8 36 02 c0    	mov    ecx,DWORD PTR ds:0xc00236e8
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 e4 36 02 c0    	mov    esi,DWORD PTR ds:0xc00236e4
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 e4 36 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00236e4,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 e4 36 02 c0    	mov    DWORD PTR ds:0xc00236e4,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 cc 0f 02 c0       	push   0xc0020fcc
c0009689:	e8 91 7f 00 00       	call   c001161f <KePanic(char const*)>
c000968e:	8b 35 e4 36 02 c0    	mov    esi,DWORD PTR ds:0xc00236e4
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d e4 36 02 c0    	mov    DWORD PTR ds:0xc00236e4,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 e4 36 02 c0       	mov    eax,ds:0xc00236e4
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 e4 36 02 c0    	mov    DWORD PTR ds:0xc00236e4,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 e4 36 02 c0       	mov    ds:0xc00236e4,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 ec 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236ec
c000975f:	8b 0d f4 36 02 c0    	mov    ecx,DWORD PTR ds:0xc00236f4
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d ec 36 02 c0    	mov    ecx,DWORD PTR ds:0xc00236ec
c000977a:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d f0 36 02 c0    	cmp    DWORD PTR ds:0xc00236f0,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 60 12 02 c0       	push   0xc0021260
c00097c0:	e8 5a 7e 00 00       	call   c001161f <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 77 12 02 c0       	push   0xc0021277
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d f0 36 02 c0    	mov    DWORD PTR ds:0xc00236f0,ebx
c0009864:	c6 05 f8 36 02 c0 43 	mov    BYTE PTR ds:0xc00236f8,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 f4 36 02 c0       	mov    ds:0xc00236f4,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 ec 36 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00236ec,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0009896:	f7 35 ec 36 02 c0    	div    DWORD PTR ds:0xc00236ec
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 ec 0f 02 c0       	push   0xc0020fec
c00098d1:	e8 49 7d 00 00       	call   c001161f <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 8e 12 02 c0       	push   0xc002128e
c00099a3:	e8 77 7c 00 00       	call   c001161f <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 10 10 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021010
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 14 7c 00 00       	jmp    c001161f <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 aa 12 02 c0       	push   0xc00212aa
c0009a18:	e8 02 7c 00 00       	call   c001161f <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 c6 12 02 c0 	mov    DWORD PTR [esp+0x30],0xc00212c6
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 b8 7b 00 00       	jmp    c001161f <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 34 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021034
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b26:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d10:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 58 10 02 c0       	push   0xc0021058
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 c0 10 02 c0       	push   0xc00210c0
c0009dad:	e8 6d 78 00 00       	call   c001161f <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 e4 10 02 c0       	push   0xc00210e4
c0009e99:	e8 81 77 00 00       	call   c001161f <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 10 11 02 c0       	push   0xc0021110
c0009fed:	e8 2d 76 00 00       	call   c001161f <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 36 2a 00 00       	call   c000cc5a <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 e0 12 02 c0       	push   0xc00212e0
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 ec 36 02 c0       	mov    eax,ds:0xc00236ec
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 f8 36 02 c0 	movsx  eax,BYTE PTR ds:0xc00236f8
c000a2fd:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a304:	50                   	push   eax
c000a305:	e8 0a 3b 00 00       	call   c000de14 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d ec 36 02 c0    	cmp    DWORD PTR ds:0xc00236ec,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 34 11 02 c0       	push   0xc0021134
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a36f:	c7 44 24 50 ee 12 02 c0 	mov    DWORD PTR [esp+0x50],0xc00212ee
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 11 13 02 c0       	push   0xc0021311
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 ff 12 02 c0       	push   0xc00212ff
c000a3db:	e8 3f 72 00 00       	call   c001161f <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 11 13 02 c0       	push   0xc0021311
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 ec 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236ec
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 f8 36 02 c0 	movsx  eax,BYTE PTR ds:0xc00236f8
c000a47a:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a481:	50                   	push   eax
c000a482:	e8 21 39 00 00       	call   c000dda8 <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 ec 36 02 c0    	cmp    DWORD PTR ds:0xc00236ec,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 24 13 02 c0       	push   0xc0021324
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 64 11 02 c0       	push   0xc0021164
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 84 11 02 c0       	push   0xc0021184
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 e4 11 02 c0 	mov    DWORD PTR [esp],0xc00211e4
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 39 13 02 c0       	push   0xc0021339
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 4d 13 02 c0       	push   0xc002134d
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 60 13 02 c0       	push   0xc0021360
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 50 02 c0       	push   0xc0025000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 50 02 c0       	push   0xc0025000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 6d 13 02 c0       	push   0xc002136d
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 86 13 02 c0       	push   0xc0021386
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 86 13 02 c0       	push   0xc0021386
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 8e 13 02 c0 	mov    DWORD PTR [esp],0xc002138e
c000a7f8:	e8 22 6e 00 00       	call   c001161f <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 a6 13 02 c0       	push   0xc00213a6
c000a80a:	e8 10 6e 00 00       	call   c001161f <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be af 0e 02 c0       	mov    esi,0xc0020eaf
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 ae 0e 02 c0       	mov    al,ds:0xc0020eae
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 bc 13 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdec44]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 0c 15 02 c0       	push   0xc002150c
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 20 15 02 c0       	push   0xc0021520
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 2a 15 02 c0       	push   0xc002152a
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 34 15 02 c0       	push   0xc0021534
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 78 16 02 c0       	push   0xc0021678
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 3e 15 02 c0       	push   0xc002153e
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 98 16 02 c0       	push   0xc0021698
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 53 15 02 c0       	push   0xc0021553
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 6d 15 02 c0       	push   0xc002156d
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 00 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc900]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 c0 16 02 c0       	push   0xc00216c0
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 78 16 02 c0       	push   0xc0021678
c000abb4:	e8 66 6a 00 00       	call   c001161f <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 08 17 02 c0       	push   0xc0021708
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 08 17 02 c0       	push   0xc0021708
c000abe3:	e8 37 6a 00 00       	call   c001161f <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 78 15 02 c0       	push   0xc0021578
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 78 15 02 c0       	push   0xc0021578
c000ac0f:	e8 0b 6a 00 00       	call   c001161f <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 95 15 02 c0       	push   0xc0021595
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 95 15 02 c0       	push   0xc0021595
c000ac3b:	e8 df 69 00 00       	call   c001161f <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 28 17 02 c0       	push   0xc0021728
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 28 17 02 c0       	push   0xc0021728
c000ac67:	e8 b3 69 00 00       	call   c001161f <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 4c 17 02 c0       	push   0xc002174c
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 4c 17 02 c0       	push   0xc002174c
c000ac93:	e8 87 69 00 00       	call   c001161f <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 b1 15 02 c0       	push   0xc00215b1
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 b1 15 02 c0       	push   0xc00215b1
c000acbf:	e8 5b 69 00 00       	call   c001161f <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 cd 15 02 c0       	push   0xc00215cd
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 cd 15 02 c0       	push   0xc00215cd
c000aceb:	e8 2f 69 00 00       	call   c001161f <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 6c 17 02 c0       	push   0xc002176c
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 6c 17 02 c0       	push   0xc002176c
c000ad17:	e8 03 69 00 00       	call   c001161f <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 90 17 02 c0       	push   0xc0021790
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 90 17 02 c0       	push   0xc0021790
c000ad43:	e8 d7 68 00 00       	call   c001161f <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiIsHashInTable(unsigned short)>:
c000ad50:	0f b7 d0             	movzx  edx,ax
c000ad53:	83 e0 07             	and    eax,0x7
c000ad56:	c1 fa 03             	sar    edx,0x3
c000ad59:	88 c1                	mov    cl,al
c000ad5b:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad62:	d3 fa                	sar    edx,cl
c000ad64:	89 d0                	mov    eax,edx
c000ad66:	83 e0 01             	and    eax,0x1
c000ad69:	c3                   	ret    

c000ad6a <KiSetHashInTable(unsigned short, bool)>:
c000ad6a:	56                   	push   esi
c000ad6b:	53                   	push   ebx
c000ad6c:	0f b7 d8             	movzx  ebx,ax
c000ad6f:	83 e0 07             	and    eax,0x7
c000ad72:	c1 fb 03             	sar    ebx,0x3
c000ad75:	89 c1                	mov    ecx,eax
c000ad77:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad7e:	b8 01 00 00 00       	mov    eax,0x1
c000ad83:	d3 e0                	shl    eax,cl
c000ad85:	84 d2                	test   dl,dl
c000ad87:	74 04                	je     c000ad8d <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad89:	09 f0                	or     eax,esi
c000ad8b:	eb 04                	jmp    c000ad91 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad8d:	f7 d0                	not    eax
c000ad8f:	21 f0                	and    eax,esi
c000ad91:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad97:	5b                   	pop    ebx
c000ad98:	5e                   	pop    esi
c000ad99:	c3                   	ret    

c000ad9a <KiFlushSymlinkChanges()>:
c000ad9a:	57                   	push   edi
c000ad9b:	56                   	push   esi
c000ad9c:	53                   	push   ebx
c000ad9d:	83 ec 1c             	sub    esp,0x1c
c000ada0:	68 14 01 00 00       	push   0x114
c000ada5:	e8 0c cd ff ff       	call   c0007ab6 <malloc>
c000adaa:	83 c4 0c             	add    esp,0xc
c000adad:	89 c3                	mov    ebx,eax
c000adaf:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000adb5:	68 af 17 02 c0       	push   0xc00217af
c000adba:	50                   	push   eax
c000adbb:	e8 8c 0d 00 00       	call   c000bb4c <File::File(char const*, Process*)>
c000adc0:	83 c4 10             	add    esp,0x10
c000adc3:	85 db                	test   ebx,ebx
c000adc5:	75 10                	jne    c000add7 <KiFlushSymlinkChanges()+0x3d>
c000adc7:	83 ec 0c             	sub    esp,0xc
c000adca:	68 cd 17 02 c0       	push   0xc00217cd
c000adcf:	e8 4b 68 00 00       	call   c001161f <KePanic(char const*)>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	50                   	push   eax
c000add8:	50                   	push   eax
c000add9:	6a 06                	push   0x6
c000addb:	53                   	push   ebx
c000addc:	e8 89 0d 00 00       	call   c000bb6a <File::open(FileOpenMode)>
c000ade1:	83 c4 10             	add    esp,0x10
c000ade4:	85 c0                	test   eax,eax
c000ade6:	74 10                	je     c000adf8 <KiFlushSymlinkChanges()+0x5e>
c000ade8:	83 ec 0c             	sub    esp,0xc
c000adeb:	68 e7 17 02 c0       	push   0xc00217e7
c000adf0:	e8 2a 68 00 00       	call   c001161f <KePanic(char const*)>
c000adf5:	83 c4 10             	add    esp,0x10
c000adf8:	31 f6                	xor    esi,esi
c000adfa:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000ae00:	7e 70                	jle    c000ae72 <KiFlushSymlinkChanges()+0xd8>
c000ae02:	83 ec 0c             	sub    esp,0xc
c000ae05:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae07:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ae0b:	89 f0                	mov    eax,esi
c000ae0d:	57                   	push   edi
c000ae0e:	c1 e0 08             	shl    eax,0x8
c000ae11:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae16:	50                   	push   eax
c000ae17:	6a 00                	push   0x0
c000ae19:	68 00 01 00 00       	push   0x100
c000ae1e:	53                   	push   ebx
c000ae1f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae22:	83 c4 20             	add    esp,0x20
c000ae25:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae2d:	74 10                	je     c000ae3f <KiFlushSymlinkChanges()+0xa5>
c000ae2f:	83 ec 0c             	sub    esp,0xc
c000ae32:	68 01 18 02 c0       	push   0xc0021801
c000ae37:	e8 e3 67 00 00       	call   c001161f <KePanic(char const*)>
c000ae3c:	83 c4 10             	add    esp,0x10
c000ae3f:	83 ec 0c             	sub    esp,0xc
c000ae42:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae44:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae4b:	57                   	push   edi
c000ae4c:	52                   	push   edx
c000ae4d:	6a 00                	push   0x0
c000ae4f:	6a 08                	push   0x8
c000ae51:	53                   	push   ebx
c000ae52:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae55:	83 c4 20             	add    esp,0x20
c000ae58:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae5d:	74 10                	je     c000ae6f <KiFlushSymlinkChanges()+0xd5>
c000ae5f:	83 ec 0c             	sub    esp,0xc
c000ae62:	68 1b 18 02 c0       	push   0xc002181b
c000ae67:	e8 b3 67 00 00       	call   c001161f <KePanic(char const*)>
c000ae6c:	83 c4 10             	add    esp,0x10
c000ae6f:	46                   	inc    esi
c000ae70:	eb 88                	jmp    c000adfa <KiFlushSymlinkChanges()+0x60>
c000ae72:	83 ec 0c             	sub    esp,0xc
c000ae75:	53                   	push   ebx
c000ae76:	e8 4d 0d 00 00       	call   c000bbc8 <File::close()>
c000ae7b:	83 c4 10             	add    esp,0x10
c000ae7e:	85 db                	test   ebx,ebx
c000ae80:	74 0c                	je     c000ae8e <KiFlushSymlinkChanges()+0xf4>
c000ae82:	83 ec 0c             	sub    esp,0xc
c000ae85:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae87:	53                   	push   ebx
c000ae88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae8b:	83 c4 10             	add    esp,0x10
c000ae8e:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae98:	83 c4 10             	add    esp,0x10
c000ae9b:	5b                   	pop    ebx
c000ae9c:	5e                   	pop    esi
c000ae9d:	5f                   	pop    edi
c000ae9e:	c3                   	ret    

c000ae9f <KiDeinitialiseSymlinks(void*)>:
c000ae9f:	e9 f6 fe ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>

c000aea4 <KiGetSymlinkHash(char const*)>:
c000aea4:	53                   	push   ebx
c000aea5:	89 c3                	mov    ebx,eax
c000aea7:	83 ec 14             	sub    esp,0x14
c000aeaa:	50                   	push   eax
c000aeab:	e8 c0 56 ff ff       	call   c0000570 <strlen>
c000aeb0:	5a                   	pop    edx
c000aeb1:	59                   	pop    ecx
c000aeb2:	50                   	push   eax
c000aeb3:	53                   	push   ebx
c000aeb4:	e8 e8 60 00 00       	call   c0010fa1 <KeCalculateCRC32(unsigned char*, int)>
c000aeb9:	83 c4 18             	add    esp,0x18
c000aebc:	89 c2                	mov    edx,eax
c000aebe:	5b                   	pop    ebx
c000aebf:	c1 ea 10             	shr    edx,0x10
c000aec2:	31 d0                	xor    eax,edx
c000aec4:	c3                   	ret    

c000aec5 <KiCreateSymlinkID()>:
c000aec5:	55                   	push   ebp
c000aec6:	57                   	push   edi
c000aec7:	56                   	push   esi
c000aec8:	53                   	push   ebx
c000aec9:	31 db                	xor    ebx,ebx
c000aecb:	83 ec 1c             	sub    esp,0x1c
c000aece:	e8 9a 68 00 00       	call   c001176d <KeRand()>
c000aed3:	43                   	inc    ebx
c000aed4:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000aeda:	31 d2                	xor    edx,edx
c000aedc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aedf:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000aee3:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aee9:	c1 e0 1f             	shl    eax,0x1f
c000aeec:	89 d7                	mov    edi,edx
c000aeee:	89 c6                	mov    esi,eax
c000aef0:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000aef4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aefc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000af02:	75 10                	jne    c000af14 <KiCreateSymlinkID()+0x4f>
c000af04:	83 ec 0c             	sub    esp,0xc
c000af07:	68 35 18 02 c0       	push   0xc0021835
c000af0c:	e8 0e 67 00 00       	call   c001161f <KePanic(char const*)>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000af18:	75 04                	jne    c000af1e <KiCreateSymlinkID()+0x59>
c000af1a:	39 f5                	cmp    ebp,esi
c000af1c:	74 b0                	je     c000aece <KiCreateSymlinkID()+0x9>
c000af1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af26:	31 f0                	xor    eax,esi
c000af28:	83 c4 1c             	add    esp,0x1c
c000af2b:	31 fa                	xor    edx,edi
c000af2d:	5b                   	pop    ebx
c000af2e:	5e                   	pop    esi
c000af2f:	5f                   	pop    edi
c000af30:	5d                   	pop    ebp
c000af31:	c3                   	ret    

c000af32 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af32:	53                   	push   ebx
c000af33:	83 ec 0c             	sub    esp,0xc
c000af36:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af3a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af3e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af42:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af47:	68 00 01 00 00       	push   0x100
c000af4c:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af53:	6a 00                	push   0x0
c000af55:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af5c:	c1 e0 08             	shl    eax,0x8
c000af5f:	05 00 70 02 c0       	add    eax,0xc0027000
c000af64:	50                   	push   eax
c000af65:	e8 86 55 ff ff       	call   c00004f0 <memset>
c000af6a:	58                   	pop    eax
c000af6b:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af70:	5a                   	pop    edx
c000af71:	c1 e0 08             	shl    eax,0x8
c000af74:	53                   	push   ebx
c000af75:	05 00 70 02 c0       	add    eax,0xc0027000
c000af7a:	50                   	push   eax
c000af7b:	e8 c0 56 ff ff       	call   c0000640 <strcpy>
c000af80:	89 d8                	mov    eax,ebx
c000af82:	e8 1d ff ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000af87:	59                   	pop    ecx
c000af88:	0f b7 d8             	movzx  ebx,ax
c000af8b:	58                   	pop    eax
c000af8c:	53                   	push   ebx
c000af8d:	68 3e 18 02 c0       	push   0xc002183e
c000af92:	e8 ae f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af97:	89 d8                	mov    eax,ebx
c000af99:	ba 01 00 00 00       	mov    edx,0x1
c000af9e:	e8 c7 fd ff ff       	call   c000ad6a <KiSetHashInTable(unsigned short, bool)>
c000afa3:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afa8:	83 c4 10             	add    esp,0x10
c000afab:	40                   	inc    eax
c000afac:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000afb1:	83 f8 03             	cmp    eax,0x3
c000afb4:	7e 09                	jle    c000afbf <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c000afb6:	83 c4 08             	add    esp,0x8
c000afb9:	5b                   	pop    ebx
c000afba:	e9 db fd ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>
c000afbf:	83 c4 08             	add    esp,0x8
c000afc2:	5b                   	pop    ebx
c000afc3:	c3                   	ret    

c000afc4 <KeInitialiseSymlinks()>:
c000afc4:	57                   	push   edi
c000afc5:	56                   	push   esi
c000afc6:	53                   	push   ebx
c000afc7:	81 ec 14 01 00 00    	sub    esp,0x114
c000afcd:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c000afd7:	68 00 20 00 00       	push   0x2000
c000afdc:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000afe6:	6a 00                	push   0x0
c000afe8:	68 00 74 02 c0       	push   0xc0027400
c000afed:	e8 fe 54 ff ff       	call   c00004f0 <memset>
c000aff2:	59                   	pop    ecx
c000aff3:	5b                   	pop    ebx
c000aff4:	ff 35 00 94 02 c0    	push   DWORD PTR ds:0xc0029400
c000affa:	68 52 18 02 c0       	push   0xc0021852
c000afff:	e8 41 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b004:	5e                   	pop    esi
c000b005:	5f                   	pop    edi
c000b006:	6a 00                	push   0x0
c000b008:	68 9f ae 00 c0       	push   0xc000ae9f
c000b00d:	e8 fa 5d 00 00       	call   c0010e0c <KeRegisterAtexit(void (*)(void*), void*)>
c000b012:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b019:	e8 98 ca ff ff       	call   c0007ab6 <malloc>
c000b01e:	83 c4 0c             	add    esp,0xc
c000b021:	89 c3                	mov    ebx,eax
c000b023:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b029:	68 af 17 02 c0       	push   0xc00217af
c000b02e:	50                   	push   eax
c000b02f:	e8 18 0b 00 00       	call   c000bb4c <File::File(char const*, Process*)>
c000b034:	83 c4 10             	add    esp,0x10
c000b037:	85 db                	test   ebx,ebx
c000b039:	75 10                	jne    c000b04b <KeInitialiseSymlinks()+0x87>
c000b03b:	83 ec 0c             	sub    esp,0xc
c000b03e:	68 6f 18 02 c0       	push   0xc002186f
c000b043:	e8 d7 65 00 00       	call   c001161f <KePanic(char const*)>
c000b048:	83 c4 10             	add    esp,0x10
c000b04b:	83 ec 0c             	sub    esp,0xc
c000b04e:	53                   	push   ebx
c000b04f:	e8 da 0d 00 00       	call   c000be2e <File::exists()>
c000b054:	83 c4 10             	add    esp,0x10
c000b057:	84 c0                	test   al,al
c000b059:	75 3a                	jne    c000b095 <KeInitialiseSymlinks()+0xd1>
c000b05b:	52                   	push   edx
c000b05c:	52                   	push   edx
c000b05d:	6a 12                	push   0x12
c000b05f:	53                   	push   ebx
c000b060:	e8 05 0b 00 00       	call   c000bb6a <File::open(FileOpenMode)>
c000b065:	83 c4 10             	add    esp,0x10
c000b068:	85 c0                	test   eax,eax
c000b06a:	74 10                	je     c000b07c <KeInitialiseSymlinks()+0xb8>
c000b06c:	83 ec 0c             	sub    esp,0xc
c000b06f:	68 8c 18 02 c0       	push   0xc002188c
c000b074:	e8 a6 65 00 00       	call   c001161f <KePanic(char const*)>
c000b079:	83 c4 10             	add    esp,0x10
c000b07c:	83 ec 0c             	sub    esp,0xc
c000b07f:	53                   	push   ebx
c000b080:	e8 43 0b 00 00       	call   c000bbc8 <File::close()>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	85 db                	test   ebx,ebx
c000b08a:	0f 84 9e 00 00 00    	je     c000b12e <KeInitialiseSymlinks()+0x16a>
c000b090:	e9 8d 00 00 00       	jmp    c000b122 <KeInitialiseSymlinks()+0x15e>
c000b095:	50                   	push   eax
c000b096:	50                   	push   eax
c000b097:	6a 01                	push   0x1
c000b099:	53                   	push   ebx
c000b09a:	e8 cb 0a 00 00       	call   c000bb6a <File::open(FileOpenMode)>
c000b09f:	83 c4 10             	add    esp,0x10
c000b0a2:	85 c0                	test   eax,eax
c000b0a4:	74 10                	je     c000b0b6 <KeInitialiseSymlinks()+0xf2>
c000b0a6:	83 ec 0c             	sub    esp,0xc
c000b0a9:	68 a9 18 02 c0       	push   0xc00218a9
c000b0ae:	e8 6c 65 00 00       	call   c001161f <KePanic(char const*)>
c000b0b3:	83 c4 10             	add    esp,0x10
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	ff 05 00 94 02 c0    	inc    DWORD PTR ds:0xc0029400
c000b0bf:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b0c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0c5:	57                   	push   edi
c000b0c6:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b0ca:	56                   	push   esi
c000b0cb:	6a 00                	push   0x0
c000b0cd:	68 00 01 00 00       	push   0x100
c000b0d2:	53                   	push   ebx
c000b0d3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0d6:	83 c4 20             	add    esp,0x20
c000b0d9:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b0e1:	75 33                	jne    c000b116 <KeInitialiseSymlinks()+0x152>
c000b0e3:	83 ec 0c             	sub    esp,0xc
c000b0e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0e8:	57                   	push   edi
c000b0e9:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b0ed:	52                   	push   edx
c000b0ee:	6a 00                	push   0x0
c000b0f0:	6a 08                	push   0x8
c000b0f2:	53                   	push   ebx
c000b0f3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0f6:	83 c4 20             	add    esp,0x20
c000b0f9:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b0fe:	75 16                	jne    c000b116 <KeInitialiseSymlinks()+0x152>
c000b100:	89 f0                	mov    eax,esi
c000b102:	e8 9d fd ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000b107:	ba 01 00 00 00       	mov    edx,0x1
c000b10c:	0f b7 c0             	movzx  eax,ax
c000b10f:	e8 56 fc ff ff       	call   c000ad6a <KiSetHashInTable(unsigned short, bool)>
c000b114:	eb a0                	jmp    c000b0b6 <KeInitialiseSymlinks()+0xf2>
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	53                   	push   ebx
c000b11a:	e8 a9 0a 00 00       	call   c000bbc8 <File::close()>
c000b11f:	83 c4 10             	add    esp,0x10
c000b122:	83 ec 0c             	sub    esp,0xc
c000b125:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b127:	53                   	push   ebx
c000b128:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	81 c4 10 01 00 00    	add    esp,0x110
c000b134:	5b                   	pop    ebx
c000b135:	5e                   	pop    esi
c000b136:	5f                   	pop    edi
c000b137:	c3                   	ret    

c000b138 <KiIsSymlinkRegistered(char const*)>:
c000b138:	55                   	push   ebp
c000b139:	57                   	push   edi
c000b13a:	56                   	push   esi
c000b13b:	53                   	push   ebx
c000b13c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000b142:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000b149:	89 f0                	mov    eax,esi
c000b14b:	e8 54 fd ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000b150:	0f b7 c0             	movzx  eax,ax
c000b153:	53                   	push   ebx
c000b154:	56                   	push   esi
c000b155:	50                   	push   eax
c000b156:	68 c4 18 02 c0       	push   0xc00218c4
c000b15b:	e8 e5 f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b160:	89 f0                	mov    eax,esi
c000b162:	e8 3d fd ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000b167:	0f b7 c0             	movzx  eax,ax
c000b16a:	e8 e1 fb ff ff       	call   c000ad50 <KiIsHashInTable(unsigned short)>
c000b16f:	83 c4 10             	add    esp,0x10
c000b172:	88 c1                	mov    cl,al
c000b174:	31 d2                	xor    edx,edx
c000b176:	31 c0                	xor    eax,eax
c000b178:	84 c9                	test   cl,cl
c000b17a:	0f 84 31 01 00 00    	je     c000b2b1 <KiIsSymlinkRegistered(char const*)+0x179>
c000b180:	31 db                	xor    ebx,ebx
c000b182:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000b188:	7e 30                	jle    c000b1ba <KiIsSymlinkRegistered(char const*)+0x82>
c000b18a:	89 d8                	mov    eax,ebx
c000b18c:	51                   	push   ecx
c000b18d:	c1 e0 08             	shl    eax,0x8
c000b190:	51                   	push   ecx
c000b191:	05 00 70 02 c0       	add    eax,0xc0027000
c000b196:	50                   	push   eax
c000b197:	56                   	push   esi
c000b198:	e8 b3 55 ff ff       	call   c0000750 <strcmp>
c000b19d:	83 c4 10             	add    esp,0x10
c000b1a0:	85 c0                	test   eax,eax
c000b1a2:	75 13                	jne    c000b1b7 <KiIsSymlinkRegistered(char const*)+0x7f>
c000b1a4:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b1ab:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b1b2:	e9 fa 00 00 00       	jmp    c000b2b1 <KiIsSymlinkRegistered(char const*)+0x179>
c000b1b7:	43                   	inc    ebx
c000b1b8:	eb c8                	jmp    c000b182 <KiIsSymlinkRegistered(char const*)+0x4a>
c000b1ba:	83 ec 0c             	sub    esp,0xc
c000b1bd:	68 14 01 00 00       	push   0x114
c000b1c2:	e8 ef c8 ff ff       	call   c0007ab6 <malloc>
c000b1c7:	83 c4 0c             	add    esp,0xc
c000b1ca:	89 c3                	mov    ebx,eax
c000b1cc:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b1d2:	68 af 17 02 c0       	push   0xc00217af
c000b1d7:	50                   	push   eax
c000b1d8:	e8 6f 09 00 00       	call   c000bb4c <File::File(char const*, Process*)>
c000b1dd:	83 c4 10             	add    esp,0x10
c000b1e0:	85 db                	test   ebx,ebx
c000b1e2:	75 12                	jne    c000b1f6 <KiIsSymlinkRegistered(char const*)+0xbe>
c000b1e4:	83 ec 0c             	sub    esp,0xc
c000b1e7:	68 d9 18 02 c0       	push   0xc00218d9
c000b1ec:	e8 2e 64 00 00       	call   c001161f <KePanic(char const*)>
c000b1f1:	83 c4 10             	add    esp,0x10
c000b1f4:	eb 10                	jmp    c000b206 <KiIsSymlinkRegistered(char const*)+0xce>
c000b1f6:	83 ec 0c             	sub    esp,0xc
c000b1f9:	53                   	push   ebx
c000b1fa:	e8 2f 0c 00 00       	call   c000be2e <File::exists()>
c000b1ff:	83 c4 10             	add    esp,0x10
c000b202:	84 c0                	test   al,al
c000b204:	74 de                	je     c000b1e4 <KiIsSymlinkRegistered(char const*)+0xac>
c000b206:	52                   	push   edx
c000b207:	52                   	push   edx
c000b208:	6a 01                	push   0x1
c000b20a:	53                   	push   ebx
c000b20b:	e8 5a 09 00 00       	call   c000bb6a <File::open(FileOpenMode)>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	85 c0                	test   eax,eax
c000b215:	74 10                	je     c000b227 <KiIsSymlinkRegistered(char const*)+0xef>
c000b217:	83 ec 0c             	sub    esp,0xc
c000b21a:	68 f4 18 02 c0       	push   0xc00218f4
c000b21f:	e8 fb 63 00 00       	call   c001161f <KePanic(char const*)>
c000b224:	83 c4 10             	add    esp,0x10
c000b227:	83 ec 0c             	sub    esp,0xc
c000b22a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b22c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b230:	55                   	push   ebp
c000b231:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b235:	57                   	push   edi
c000b236:	6a 00                	push   0x0
c000b238:	68 00 01 00 00       	push   0x100
c000b23d:	53                   	push   ebx
c000b23e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b241:	83 c4 20             	add    esp,0x20
c000b244:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b24c:	75 4b                	jne    c000b299 <KiIsSymlinkRegistered(char const*)+0x161>
c000b24e:	83 ec 0c             	sub    esp,0xc
c000b251:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b253:	55                   	push   ebp
c000b254:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b258:	52                   	push   edx
c000b259:	6a 00                	push   0x0
c000b25b:	6a 08                	push   0x8
c000b25d:	53                   	push   ebx
c000b25e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b261:	83 c4 20             	add    esp,0x20
c000b264:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b269:	75 2e                	jne    c000b299 <KiIsSymlinkRegistered(char const*)+0x161>
c000b26b:	50                   	push   eax
c000b26c:	50                   	push   eax
c000b26d:	57                   	push   edi
c000b26e:	56                   	push   esi
c000b26f:	e8 dc 54 ff ff       	call   c0000750 <strcmp>
c000b274:	83 c4 10             	add    esp,0x10
c000b277:	85 c0                	test   eax,eax
c000b279:	75 ac                	jne    c000b227 <KiIsSymlinkRegistered(char const*)+0xef>
c000b27b:	83 ec 0c             	sub    esp,0xc
c000b27e:	53                   	push   ebx
c000b27f:	e8 44 09 00 00       	call   c000bbc8 <File::close()>
c000b284:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b286:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b289:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b28c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b290:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b294:	83 c4 10             	add    esp,0x10
c000b297:	eb 18                	jmp    c000b2b1 <KiIsSymlinkRegistered(char const*)+0x179>
c000b299:	83 ec 0c             	sub    esp,0xc
c000b29c:	53                   	push   ebx
c000b29d:	e8 26 09 00 00       	call   c000bbc8 <File::close()>
c000b2a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2aa:	83 c4 10             	add    esp,0x10
c000b2ad:	31 c0                	xor    eax,eax
c000b2af:	31 d2                	xor    edx,edx
c000b2b1:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b2b7:	5b                   	pop    ebx
c000b2b8:	5e                   	pop    esi
c000b2b9:	5f                   	pop    edi
c000b2ba:	5d                   	pop    ebp
c000b2bb:	c3                   	ret    

c000b2bc <KeDereferenceSymlink(char const*, char*)>:
c000b2bc:	55                   	push   ebp
c000b2bd:	57                   	push   edi
c000b2be:	56                   	push   esi
c000b2bf:	53                   	push   ebx
c000b2c0:	83 ec 48             	sub    esp,0x48
c000b2c3:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b2c7:	56                   	push   esi
c000b2c8:	e8 6b fe ff ff       	call   c000b138 <KiIsSymlinkRegistered(char const*)>
c000b2cd:	83 c4 10             	add    esp,0x10
c000b2d0:	89 c7                	mov    edi,eax
c000b2d2:	89 d0                	mov    eax,edx
c000b2d4:	09 f8                	or     eax,edi
c000b2d6:	75 07                	jne    c000b2df <KeDereferenceSymlink(char const*, char*)+0x23>
c000b2d8:	31 c0                	xor    eax,eax
c000b2da:	e9 7c 01 00 00       	jmp    c000b45b <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b2df:	83 ec 0c             	sub    esp,0xc
c000b2e2:	89 d5                	mov    ebp,edx
c000b2e4:	68 14 01 00 00       	push   0x114
c000b2e9:	e8 c8 c7 ff ff       	call   c0007ab6 <malloc>
c000b2ee:	83 c4 0c             	add    esp,0xc
c000b2f1:	89 c3                	mov    ebx,eax
c000b2f3:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b2f9:	56                   	push   esi
c000b2fa:	50                   	push   eax
c000b2fb:	e8 4c 08 00 00       	call   c000bb4c <File::File(char const*, Process*)>
c000b300:	83 c4 10             	add    esp,0x10
c000b303:	85 db                	test   ebx,ebx
c000b305:	0f 84 32 01 00 00    	je     c000b43d <KeDereferenceSymlink(char const*, char*)+0x181>
c000b30b:	56                   	push   esi
c000b30c:	56                   	push   esi
c000b30d:	6a 01                	push   0x1
c000b30f:	53                   	push   ebx
c000b310:	e8 55 08 00 00       	call   c000bb6a <File::open(FileOpenMode)>
c000b315:	83 c4 10             	add    esp,0x10
c000b318:	85 c0                	test   eax,eax
c000b31a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b31c:	74 09                	je     c000b327 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b31e:	83 ec 0c             	sub    esp,0xc
c000b321:	53                   	push   ebx
c000b322:	e9 10 01 00 00       	jmp    c000b437 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b327:	83 ec 0c             	sub    esp,0xc
c000b32a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b32e:	56                   	push   esi
c000b32f:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b333:	52                   	push   edx
c000b334:	6a 00                	push   0x0
c000b336:	6a 08                	push   0x8
c000b338:	53                   	push   ebx
c000b339:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b33c:	83 c4 20             	add    esp,0x20
c000b33f:	85 c0                	test   eax,eax
c000b341:	0f 85 e2 00 00 00    	jne    c000b429 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b347:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b34c:	0f 85 d7 00 00 00    	jne    c000b429 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b352:	83 ec 0c             	sub    esp,0xc
c000b355:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b357:	56                   	push   esi
c000b358:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b35c:	52                   	push   edx
c000b35d:	6a 00                	push   0x0
c000b35f:	6a 08                	push   0x8
c000b361:	53                   	push   ebx
c000b362:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b365:	83 c4 20             	add    esp,0x20
c000b368:	85 c0                	test   eax,eax
c000b36a:	0f 85 b9 00 00 00    	jne    c000b429 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b370:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b375:	0f 85 ae 00 00 00    	jne    c000b429 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b37b:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b37f:	0f 85 53 ff ff ff    	jne    c000b2d8 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b385:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b389:	0f 85 49 ff ff ff    	jne    c000b2d8 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b38f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b397:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b39f:	51                   	push   ecx
c000b3a0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b3a4:	50                   	push   eax
c000b3a5:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b3a9:	50                   	push   eax
c000b3aa:	53                   	push   ebx
c000b3ab:	e8 bc 0a 00 00       	call   c000be6c <File::stat(unsigned long long*, bool*)>
c000b3b0:	83 c4 10             	add    esp,0x10
c000b3b3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b3b8:	75 6f                	jne    c000b429 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3ba:	31 c9                	xor    ecx,ecx
c000b3bc:	bf 0f 00 00 00       	mov    edi,0xf
c000b3c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b3c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b3c9:	39 c7                	cmp    edi,eax
c000b3cb:	89 cf                	mov    edi,ecx
c000b3cd:	19 d7                	sbb    edi,edx
c000b3cf:	73 58                	jae    c000b429 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3d1:	83 c0 f0             	add    eax,0xfffffff0
c000b3d4:	bf ff 00 00 00       	mov    edi,0xff
c000b3d9:	83 d2 ff             	adc    edx,0xffffffff
c000b3dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b3e0:	39 c7                	cmp    edi,eax
c000b3e2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b3e6:	19 d1                	sbb    ecx,edx
c000b3e8:	72 53                	jb     c000b43d <KeDereferenceSymlink(char const*, char*)+0x181>
c000b3ea:	40                   	inc    eax
c000b3eb:	52                   	push   edx
c000b3ec:	50                   	push   eax
c000b3ed:	6a 00                	push   0x0
c000b3ef:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b3f3:	e8 f8 50 ff ff       	call   c00004f0 <memset>
c000b3f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3fa:	89 34 24             	mov    DWORD PTR [esp],esi
c000b3fd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b401:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b405:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b409:	53                   	push   ebx
c000b40a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b40d:	83 c4 20             	add    esp,0x20
c000b410:	85 c0                	test   eax,eax
c000b412:	75 15                	jne    c000b429 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b414:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b418:	89 c7                	mov    edi,eax
c000b41a:	c1 ff 1f             	sar    edi,0x1f
c000b41d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b421:	75 06                	jne    c000b429 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b423:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b427:	74 19                	je     c000b442 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b429:	83 ec 0c             	sub    esp,0xc
c000b42c:	53                   	push   ebx
c000b42d:	e8 96 07 00 00       	call   c000bbc8 <File::close()>
c000b432:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b434:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b437:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b43a:	83 c4 10             	add    esp,0x10
c000b43d:	83 c8 ff             	or     eax,0xffffffff
c000b440:	eb 19                	jmp    c000b45b <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b442:	83 ec 0c             	sub    esp,0xc
c000b445:	53                   	push   ebx
c000b446:	e8 7d 07 00 00       	call   c000bbc8 <File::close()>
c000b44b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b44d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b450:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b453:	83 c4 10             	add    esp,0x10
c000b456:	b8 01 00 00 00       	mov    eax,0x1
c000b45b:	83 c4 3c             	add    esp,0x3c
c000b45e:	5b                   	pop    ebx
c000b45f:	5e                   	pop    esi
c000b460:	5f                   	pop    edi
c000b461:	5d                   	pop    ebp
c000b462:	c3                   	ret    

c000b463 <KeCreateSymlink(char const*, char const*)>:
c000b463:	55                   	push   ebp
c000b464:	57                   	push   edi
c000b465:	56                   	push   esi
c000b466:	53                   	push   ebx
c000b467:	83 ec 38             	sub    esp,0x38
c000b46a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b46e:	68 14 01 00 00       	push   0x114
c000b473:	e8 3e c6 ff ff       	call   c0007ab6 <malloc>
c000b478:	6a 00                	push   0x0
c000b47a:	89 c3                	mov    ebx,eax
c000b47c:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b482:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b486:	50                   	push   eax
c000b487:	e8 e2 05 00 00       	call   c000ba6e <File::File(char const*, Process*, bool)>
c000b48c:	83 c4 20             	add    esp,0x20
c000b48f:	b8 01 00 00 00       	mov    eax,0x1
c000b494:	85 db                	test   ebx,ebx
c000b496:	0f 84 19 01 00 00    	je     c000b5b5 <KeCreateSymlink(char const*, char const*)+0x152>
c000b49c:	52                   	push   edx
c000b49d:	52                   	push   edx
c000b49e:	6a 12                	push   0x12
c000b4a0:	53                   	push   ebx
c000b4a1:	e8 c4 06 00 00       	call   c000bb6a <File::open(FileOpenMode)>
c000b4a6:	83 c4 10             	add    esp,0x10
c000b4a9:	85 c0                	test   eax,eax
c000b4ab:	74 0b                	je     c000b4b8 <KeCreateSymlink(char const*, char const*)+0x55>
c000b4ad:	83 ec 0c             	sub    esp,0xc
c000b4b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4b2:	53                   	push   ebx
c000b4b3:	e9 f2 00 00 00       	jmp    c000b5aa <KeCreateSymlink(char const*, char const*)+0x147>
c000b4b8:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b4bc:	be 41 19 02 c0       	mov    esi,0xc0021941
c000b4c1:	b9 09 00 00 00       	mov    ecx,0x9
c000b4c6:	fc                   	cld    
c000b4c7:	83 ec 0c             	sub    esp,0xc
c000b4ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b4cc:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b4d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4d2:	56                   	push   esi
c000b4d3:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b4d7:	52                   	push   edx
c000b4d8:	6a 00                	push   0x0
c000b4da:	6a 08                	push   0x8
c000b4dc:	53                   	push   ebx
c000b4dd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b4e0:	83 c4 20             	add    esp,0x20
c000b4e3:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b4e8:	0f 85 ae 00 00 00    	jne    c000b59c <KeCreateSymlink(char const*, char const*)+0x139>
c000b4ee:	85 c0                	test   eax,eax
c000b4f0:	0f 85 a6 00 00 00    	jne    c000b59c <KeCreateSymlink(char const*, char const*)+0x139>
c000b4f6:	e8 ca f9 ff ff       	call   c000aec5 <KiCreateSymlinkID()>
c000b4fb:	83 ec 0c             	sub    esp,0xc
c000b4fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b502:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b506:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b508:	56                   	push   esi
c000b509:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b50d:	52                   	push   edx
c000b50e:	6a 00                	push   0x0
c000b510:	6a 08                	push   0x8
c000b512:	53                   	push   ebx
c000b513:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b516:	83 c4 20             	add    esp,0x20
c000b519:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b51e:	75 7c                	jne    c000b59c <KeCreateSymlink(char const*, char const*)+0x139>
c000b520:	85 c0                	test   eax,eax
c000b522:	75 78                	jne    c000b59c <KeCreateSymlink(char const*, char const*)+0x139>
c000b524:	83 ec 0c             	sub    esp,0xc
c000b527:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b529:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b52c:	55                   	push   ebp
c000b52d:	e8 3e 50 ff ff       	call   c0000570 <strlen>
c000b532:	89 34 24             	mov    DWORD PTR [esp],esi
c000b535:	31 d2                	xor    edx,edx
c000b537:	55                   	push   ebp
c000b538:	52                   	push   edx
c000b539:	50                   	push   eax
c000b53a:	53                   	push   ebx
c000b53b:	ff d7                	call   edi
c000b53d:	83 c4 14             	add    esp,0x14
c000b540:	89 c6                	mov    esi,eax
c000b542:	55                   	push   ebp
c000b543:	e8 28 50 ff ff       	call   c0000570 <strlen>
c000b548:	83 c4 10             	add    esp,0x10
c000b54b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b54f:	75 4b                	jne    c000b59c <KeCreateSymlink(char const*, char const*)+0x139>
c000b551:	85 f6                	test   esi,esi
c000b553:	75 47                	jne    c000b59c <KeCreateSymlink(char const*, char const*)+0x139>
c000b555:	50                   	push   eax
c000b556:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b55a:	55                   	push   ebp
c000b55b:	68 0f 19 02 c0       	push   0xc002190f
c000b560:	e8 e0 f3 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b565:	83 c4 0c             	add    esp,0xc
c000b568:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b56c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b570:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b574:	e8 b9 f9 ff ff       	call   c000af32 <KeRegisterSymlink(char const*, unsigned long long)>
c000b579:	c7 04 24 34 19 02 c0 	mov    DWORD PTR [esp],0xc0021934
c000b580:	e8 c0 f3 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b585:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b588:	e8 3b 06 00 00       	call   c000bbc8 <File::close()>
c000b58d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b58f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b592:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b595:	83 c4 10             	add    esp,0x10
c000b598:	31 c0                	xor    eax,eax
c000b59a:	eb 19                	jmp    c000b5b5 <KeCreateSymlink(char const*, char const*)+0x152>
c000b59c:	83 ec 0c             	sub    esp,0xc
c000b59f:	53                   	push   ebx
c000b5a0:	e8 23 06 00 00       	call   c000bbc8 <File::close()>
c000b5a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b5ad:	83 c4 10             	add    esp,0x10
c000b5b0:	b8 01 00 00 00       	mov    eax,0x1
c000b5b5:	83 c4 2c             	add    esp,0x2c
c000b5b8:	5b                   	pop    ebx
c000b5b9:	5e                   	pop    esi
c000b5ba:	5f                   	pop    edi
c000b5bb:	5d                   	pop    ebp
c000b5bc:	c3                   	ret    
c000b5bd:	90                   	nop

c000b5be <File::read(unsigned long long, void*, int*)>:
c000b5be:	53                   	push   ebx
c000b5bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5c3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5c7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5ce:	83 f8 19             	cmp    eax,0x19
c000b5d1:	77 35                	ja     c000b608 <File::read(unsigned long long, void*, int*)+0x4a>
c000b5d3:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5da:	85 c0                	test   eax,eax
c000b5dc:	74 2a                	je     c000b608 <File::read(unsigned long long, void*, int*)+0x4a>
c000b5de:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5e4:	85 c0                	test   eax,eax
c000b5e6:	74 20                	je     c000b608 <File::read(unsigned long long, void*, int*)+0x4a>
c000b5e8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5ec:	74 21                	je     c000b60f <File::read(unsigned long long, void*, int*)+0x51>
c000b5ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5f0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b5f4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b5fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b602:	5b                   	pop    ebx
c000b603:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b606:	ff e0                	jmp    eax
c000b608:	b8 0b 00 00 00       	mov    eax,0xb
c000b60d:	eb 05                	jmp    c000b614 <File::read(unsigned long long, void*, int*)+0x56>
c000b60f:	b8 05 00 00 00       	mov    eax,0x5
c000b614:	5b                   	pop    ebx
c000b615:	c3                   	ret    

c000b616 <File::write(unsigned long long, void*, int*)>:
c000b616:	53                   	push   ebx
c000b617:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b61b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b61f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b626:	83 f8 19             	cmp    eax,0x19
c000b629:	77 35                	ja     c000b660 <File::write(unsigned long long, void*, int*)+0x4a>
c000b62b:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b632:	85 c0                	test   eax,eax
c000b634:	74 2a                	je     c000b660 <File::write(unsigned long long, void*, int*)+0x4a>
c000b636:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b63c:	85 c0                	test   eax,eax
c000b63e:	74 20                	je     c000b660 <File::write(unsigned long long, void*, int*)+0x4a>
c000b640:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b644:	74 21                	je     c000b667 <File::write(unsigned long long, void*, int*)+0x51>
c000b646:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b648:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b64c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b656:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65a:	5b                   	pop    ebx
c000b65b:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b65e:	ff e0                	jmp    eax
c000b660:	b8 0b 00 00 00       	mov    eax,0xb
c000b665:	eb 05                	jmp    c000b66c <File::write(unsigned long long, void*, int*)+0x56>
c000b667:	b8 05 00 00 00       	mov    eax,0x5
c000b66c:	5b                   	pop    ebx
c000b66d:	c3                   	ret    

c000b66e <Directory::read(unsigned long long, void*, int*)>:
c000b66e:	53                   	push   ebx
c000b66f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b673:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b677:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b67e:	83 f8 19             	cmp    eax,0x19
c000b681:	77 35                	ja     c000b6b8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b683:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b68a:	85 c0                	test   eax,eax
c000b68c:	74 2a                	je     c000b6b8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b68e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b694:	85 c0                	test   eax,eax
c000b696:	74 20                	je     c000b6b8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b698:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b69c:	74 21                	je     c000b6bf <Directory::read(unsigned long long, void*, int*)+0x51>
c000b69e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b6a0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b6a4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b6aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b2:	5b                   	pop    ebx
c000b6b3:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b6b6:	ff e0                	jmp    eax
c000b6b8:	b8 0b 00 00 00       	mov    eax,0xb
c000b6bd:	eb 05                	jmp    c000b6c4 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b6bf:	b8 05 00 00 00       	mov    eax,0x5
c000b6c4:	5b                   	pop    ebx
c000b6c5:	c3                   	ret    

c000b6c6 <Directory::write(unsigned long long, void*, int*)>:
c000b6c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6ca:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b6d1:	b8 0b 00 00 00       	mov    eax,0xb
c000b6d6:	83 fa 19             	cmp    edx,0x19
c000b6d9:	77 18                	ja     c000b6f3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6db:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b6e2:	85 d2                	test   edx,edx
c000b6e4:	74 0d                	je     c000b6f3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6e6:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b6ed:	19 c0                	sbb    eax,eax
c000b6ef:	83 e0 0a             	and    eax,0xa
c000b6f2:	40                   	inc    eax
c000b6f3:	c3                   	ret    

c000b6f4 <File::isAtty()>:
c000b6f4:	31 c0                	xor    eax,eax
c000b6f6:	c3                   	ret    
c000b6f7:	90                   	nop

c000b6f8 <Directory::isAtty()>:
c000b6f8:	31 c0                	xor    eax,eax
c000b6fa:	c3                   	ret    
c000b6fb:	90                   	nop

c000b6fc <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b6fc:	b8 0a 00 00 00       	mov    eax,0xa
c000b701:	c3                   	ret    

c000b702 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b702:	b8 0a 00 00 00       	mov    eax,0xa
c000b707:	c3                   	ret    

c000b708 <Filesystem::allocateSwapfile(char const*, int)>:
c000b708:	31 c0                	xor    eax,eax
c000b70a:	31 d2                	xor    edx,edx
c000b70c:	c3                   	ret    
c000b70d:	90                   	nop

c000b70e <File::~File()>:
c000b70e:	83 ec 0c             	sub    esp,0xc
c000b711:	ba 00 1a 02 c0       	mov    edx,0xc0021a00
c000b716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b71a:	89 10                	mov    DWORD PTR [eax],edx
c000b71c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b720:	83 ec 0c             	sub    esp,0xc
c000b723:	50                   	push   eax
c000b724:	e8 7b dc ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b729:	83 c4 10             	add    esp,0x10
c000b72c:	90                   	nop
c000b72d:	83 c4 0c             	add    esp,0xc
c000b730:	c3                   	ret    
c000b731:	90                   	nop

c000b732 <File::~File()>:
c000b732:	83 ec 0c             	sub    esp,0xc
c000b735:	83 ec 0c             	sub    esp,0xc
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	e8 cd ff ff ff       	call   c000b70e <File::~File()>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	83 ec 08             	sub    esp,0x8
c000b747:	68 14 01 00 00       	push   0x114
c000b74c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b750:	e8 c3 f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b755:	83 c4 10             	add    esp,0x10
c000b758:	83 c4 0c             	add    esp,0xc
c000b75b:	c3                   	ret    

c000b75c <Directory::~Directory()>:
c000b75c:	83 ec 0c             	sub    esp,0xc
c000b75f:	ba 1c 1a 02 c0       	mov    edx,0xc0021a1c
c000b764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b768:	89 10                	mov    DWORD PTR [eax],edx
c000b76a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b76e:	83 ec 0c             	sub    esp,0xc
c000b771:	50                   	push   eax
c000b772:	e8 2d dc ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b777:	83 c4 10             	add    esp,0x10
c000b77a:	90                   	nop
c000b77b:	83 c4 0c             	add    esp,0xc
c000b77e:	c3                   	ret    
c000b77f:	90                   	nop

c000b780 <Directory::~Directory()>:
c000b780:	83 ec 0c             	sub    esp,0xc
c000b783:	83 ec 0c             	sub    esp,0xc
c000b786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b78a:	e8 cd ff ff ff       	call   c000b75c <Directory::~Directory()>
c000b78f:	83 c4 10             	add    esp,0x10
c000b792:	83 ec 08             	sub    esp,0x8
c000b795:	68 14 01 00 00       	push   0x114
c000b79a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79e:	e8 75 f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b7a3:	83 c4 10             	add    esp,0x10
c000b7a6:	83 c4 0c             	add    esp,0xc
c000b7a9:	c3                   	ret    

c000b7aa <Filesystem::Filesystem()>:
c000b7aa:	ba 94 19 02 c0       	mov    edx,0xc0021994
c000b7af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7b3:	89 10                	mov    DWORD PTR [eax],edx
c000b7b5:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b7bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b7c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7c6:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b7cb:	90                   	nop
c000b7cc:	c3                   	ret    
c000b7cd:	90                   	nop

c000b7ce <Filesystem::~Filesystem()>:
c000b7ce:	ba 94 19 02 c0       	mov    edx,0xc0021994
c000b7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d7:	89 10                	mov    DWORD PTR [eax],edx
c000b7d9:	90                   	nop
c000b7da:	c3                   	ret    
c000b7db:	90                   	nop

c000b7dc <Filesystem::~Filesystem()>:
c000b7dc:	83 ec 0c             	sub    esp,0xc
c000b7df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7e3:	e8 e6 ff ff ff       	call   c000b7ce <Filesystem::~Filesystem()>
c000b7e8:	83 c4 04             	add    esp,0x4
c000b7eb:	83 ec 08             	sub    esp,0x8
c000b7ee:	6a 08                	push   0x8
c000b7f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f4:	e8 1f f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b7f9:	83 c4 10             	add    esp,0x10
c000b7fc:	83 c4 0c             	add    esp,0xc
c000b7ff:	c3                   	ret    

c000b800 <Fs::getcwd(Process*, char*, int)>:
c000b800:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b804:	31 c0                	xor    eax,eax
c000b806:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b809:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b80d:	7d 15                	jge    c000b824 <Fs::getcwd(Process*, char*, int)+0x24>
c000b80f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b813:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b81a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b81d:	84 c9                	test   cl,cl
c000b81f:	74 06                	je     c000b827 <Fs::getcwd(Process*, char*, int)+0x27>
c000b821:	40                   	inc    eax
c000b822:	eb e2                	jmp    c000b806 <Fs::getcwd(Process*, char*, int)+0x6>
c000b824:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b827:	31 c0                	xor    eax,eax
c000b829:	c3                   	ret    

c000b82a <Fs::initVFS()>:
c000b82a:	83 ec 18             	sub    esp,0x18
c000b82d:	6a 08                	push   0x8
c000b82f:	e8 82 c2 ff ff       	call   c0007ab6 <malloc>
c000b834:	89 04 24             	mov    DWORD PTR [esp],eax
c000b837:	e8 34 e4 00 00       	call   c0019c70 <FAT::FAT()>
c000b83c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b843:	e8 6e c2 ff ff       	call   c0007ab6 <malloc>
c000b848:	89 04 24             	mov    DWORD PTR [esp],eax
c000b84b:	e8 4c f3 00 00       	call   c001ab9c <ISO9660::ISO9660()>
c000b850:	83 c4 1c             	add    esp,0x1c
c000b853:	c3                   	ret    

c000b854 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b854:	55                   	push   ebp
c000b855:	57                   	push   edi
c000b856:	56                   	push   esi
c000b857:	53                   	push   ebx
c000b858:	81 ec 10 04 00 00    	sub    esp,0x410
c000b85e:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b865:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b86c:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b874:	68 00 04 00 00       	push   0x400
c000b879:	6a 00                	push   0x0
c000b87b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b87f:	57                   	push   edi
c000b880:	e8 6b 4c ff ff       	call   c00004f0 <memset>
c000b885:	83 c4 10             	add    esp,0x10
c000b888:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b88c:	75 0b                	jne    c000b899 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b88e:	50                   	push   eax
c000b88f:	50                   	push   eax
c000b890:	55                   	push   ebp
c000b891:	57                   	push   edi
c000b892:	e8 a9 4d ff ff       	call   c0000640 <strcpy>
c000b897:	eb 51                	jmp    c000b8ea <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b899:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b89d:	83 f8 5c             	cmp    eax,0x5c
c000b8a0:	74 05                	je     c000b8a7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b8a2:	83 f8 2f             	cmp    eax,0x2f
c000b8a5:	75 1e                	jne    c000b8c5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b8a7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b8ae:	8a 00                	mov    al,BYTE PTR [eax]
c000b8b0:	3c 60                	cmp    al,0x60
c000b8b2:	7e 03                	jle    c000b8b7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b8b4:	83 e8 20             	sub    eax,0x20
c000b8b7:	88 04 24             	mov    BYTE PTR [esp],al
c000b8ba:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b8c1:	50                   	push   eax
c000b8c2:	50                   	push   eax
c000b8c3:	eb 1e                	jmp    c000b8e3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b8c5:	50                   	push   eax
c000b8c6:	50                   	push   eax
c000b8c7:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b8ce:	57                   	push   edi
c000b8cf:	e8 6c 4d ff ff       	call   c0000640 <strcpy>
c000b8d4:	58                   	pop    eax
c000b8d5:	5a                   	pop    edx
c000b8d6:	68 5f 29 02 c0       	push   0xc002295f
c000b8db:	57                   	push   edi
c000b8dc:	e8 5f 4f ff ff       	call   c0000840 <strcat>
c000b8e1:	59                   	pop    ecx
c000b8e2:	58                   	pop    eax
c000b8e3:	55                   	push   ebp
c000b8e4:	57                   	push   edi
c000b8e5:	e8 56 4f ff ff       	call   c0000840 <strcat>
c000b8ea:	83 c4 10             	add    esp,0x10
c000b8ed:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b8f0:	3c 60                	cmp    al,0x60
c000b8f2:	7e 03                	jle    c000b8f7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b8f4:	83 e8 20             	sub    eax,0x20
c000b8f7:	88 04 24             	mov    BYTE PTR [esp],al
c000b8fa:	88 06                	mov    BYTE PTR [esi],al
c000b8fc:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b903:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b909:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b90d:	bf 03 00 00 00       	mov    edi,0x3
c000b912:	b8 03 00 00 00       	mov    eax,0x3
c000b917:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b91b:	89 e9                	mov    ecx,ebp
c000b91d:	85 ed                	test   ebp,ebp
c000b91f:	0f 84 97 00 00 00    	je     c000b9bc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b925:	8d 57 01             	lea    edx,[edi+0x1]
c000b928:	83 fd 5c             	cmp    ebp,0x5c
c000b92b:	74 05                	je     c000b932 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b92d:	83 fd 2f             	cmp    ebp,0x2f
c000b930:	75 12                	jne    c000b944 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b932:	89 c5                	mov    ebp,eax
c000b934:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b939:	74 09                	je     c000b944 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b93b:	40                   	inc    eax
c000b93c:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b940:	89 d7                	mov    edi,edx
c000b942:	eb d3                	jmp    c000b917 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b944:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b949:	0f be e9             	movsx  ebp,cl
c000b94c:	75 5e                	jne    c000b9ac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b94e:	83 fd 2e             	cmp    ebp,0x2e
c000b951:	75 59                	jne    c000b9ac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b953:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b957:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b95c:	74 18                	je     c000b976 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b95e:	83 fd 2e             	cmp    ebp,0x2e
c000b961:	74 53                	je     c000b9b6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b963:	89 fa                	mov    edx,edi
c000b965:	42                   	inc    edx
c000b966:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b96a:	83 f9 2f             	cmp    ecx,0x2f
c000b96d:	74 f6                	je     c000b965 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b96f:	83 f9 5c             	cmp    ecx,0x5c
c000b972:	74 f1                	je     c000b965 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b974:	eb ca                	jmp    c000b940 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b976:	83 fd 2e             	cmp    ebp,0x2e
c000b979:	74 3b                	je     c000b9b6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b97b:	83 f8 03             	cmp    eax,0x3
c000b97e:	74 c0                	je     c000b940 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b980:	42                   	inc    edx
c000b981:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b985:	83 f9 5c             	cmp    ecx,0x5c
c000b988:	74 f6                	je     c000b980 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b98a:	83 f9 2f             	cmp    ecx,0x2f
c000b98d:	74 f1                	je     c000b980 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b98f:	48                   	dec    eax
c000b990:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b994:	75 06                	jne    c000b99c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b996:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b99a:	eb f3                	jmp    c000b98f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b99c:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b9a0:	74 07                	je     c000b9a9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000b9a2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9a6:	48                   	dec    eax
c000b9a7:	eb f3                	jmp    c000b99c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b9a9:	40                   	inc    eax
c000b9aa:	eb 94                	jmp    c000b940 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9ac:	83 fd 5c             	cmp    ebp,0x5c
c000b9af:	74 8f                	je     c000b940 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9b1:	83 fd 2f             	cmp    ebp,0x2f
c000b9b4:	74 8a                	je     c000b940 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9b6:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000b9b9:	40                   	inc    eax
c000b9ba:	eb 84                	jmp    c000b940 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9bc:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9c0:	83 ec 0c             	sub    esp,0xc
c000b9c3:	56                   	push   esi
c000b9c4:	e8 a7 4b ff ff       	call   c0000570 <strlen>
c000b9c9:	83 c4 10             	add    esp,0x10
c000b9cc:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000b9d1:	74 17                	je     c000b9ea <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b9d3:	83 ec 0c             	sub    esp,0xc
c000b9d6:	56                   	push   esi
c000b9d7:	e8 94 4b ff ff       	call   c0000570 <strlen>
c000b9dc:	83 c4 10             	add    esp,0x10
c000b9df:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b9e4:	74 04                	je     c000b9ea <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b9e6:	31 ff                	xor    edi,edi
c000b9e8:	eb 5c                	jmp    c000ba46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000b9ea:	83 ec 0c             	sub    esp,0xc
c000b9ed:	56                   	push   esi
c000b9ee:	e8 7d 4b ff ff       	call   c0000570 <strlen>
c000b9f3:	83 c4 10             	add    esp,0x10
c000b9f6:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000b9fb:	74 e9                	je     c000b9e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000b9fd:	83 ec 0c             	sub    esp,0xc
c000ba00:	56                   	push   esi
c000ba01:	e8 6a 4b ff ff       	call   c0000570 <strlen>
c000ba06:	83 c4 10             	add    esp,0x10
c000ba09:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000ba0e:	eb b0                	jmp    c000b9c0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000ba10:	52                   	push   edx
c000ba11:	52                   	push   edx
c000ba12:	56                   	push   esi
c000ba13:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000ba17:	55                   	push   ebp
c000ba18:	e8 23 4c ff ff       	call   c0000640 <strcpy>
c000ba1d:	59                   	pop    ecx
c000ba1e:	58                   	pop    eax
c000ba1f:	56                   	push   esi
c000ba20:	55                   	push   ebp
c000ba21:	e8 96 f8 ff ff       	call   c000b2bc <KeDereferenceSymlink(char const*, char*)>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	48                   	dec    eax
c000ba2a:	75 37                	jne    c000ba63 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000ba2c:	50                   	push   eax
c000ba2d:	56                   	push   esi
c000ba2e:	55                   	push   ebp
c000ba2f:	68 4a 19 02 c0       	push   0xc002194a
c000ba34:	e8 0c ef ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ba39:	83 c4 10             	add    esp,0x10
c000ba3c:	8d 47 01             	lea    eax,[edi+0x1]
c000ba3f:	83 ff 14             	cmp    edi,0x14
c000ba42:	74 08                	je     c000ba4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000ba44:	89 c7                	mov    edi,eax
c000ba46:	85 db                	test   ebx,ebx
c000ba48:	75 c6                	jne    c000ba10 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000ba4a:	eb 17                	jmp    c000ba63 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000ba4c:	83 ec 0c             	sub    esp,0xc
c000ba4f:	bf 15 00 00 00       	mov    edi,0x15
c000ba54:	68 65 19 02 c0       	push   0xc0021965
c000ba59:	e8 c1 5b 00 00       	call   c001161f <KePanic(char const*)>
c000ba5e:	83 c4 10             	add    esp,0x10
c000ba61:	eb e3                	jmp    c000ba46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000ba63:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ba69:	5b                   	pop    ebx
c000ba6a:	5e                   	pop    esi
c000ba6b:	5f                   	pop    edi
c000ba6c:	5d                   	pop    ebp
c000ba6d:	c3                   	ret    

c000ba6e <File::File(char const*, Process*, bool)>:
c000ba6e:	83 ec 1c             	sub    esp,0x1c
c000ba71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba75:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ba79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba7d:	83 ec 08             	sub    esp,0x8
c000ba80:	6a 00                	push   0x0
c000ba82:	50                   	push   eax
c000ba83:	e8 36 d7 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000ba88:	83 c4 10             	add    esp,0x10
c000ba8b:	ba 00 1a 02 c0       	mov    edx,0xc0021a00
c000ba90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba94:	89 10                	mov    DWORD PTR [eax],edx
c000ba96:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ba9b:	85 c0                	test   eax,eax
c000ba9d:	74 0f                	je     c000baae <File::File(char const*, Process*, bool)+0x40>
c000ba9f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000baa4:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000baa8:	74 04                	je     c000baae <File::File(char const*, Process*, bool)+0x40>
c000baaa:	b0 01                	mov    al,0x1
c000baac:	eb 02                	jmp    c000bab0 <File::File(char const*, Process*, bool)+0x42>
c000baae:	b0 00                	mov    al,0x0
c000bab0:	0f b6 c0             	movzx  eax,al
c000bab3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bab7:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000babd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bac1:	83 c2 0d             	add    edx,0xd
c000bac4:	50                   	push   eax
c000bac5:	51                   	push   ecx
c000bac6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000baca:	52                   	push   edx
c000bacb:	e8 84 fd ff ff       	call   c000b854 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bad0:	83 c4 10             	add    esp,0x10
c000bad3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad7:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bada:	83 e8 41             	sub    eax,0x41
c000badd:	88 c2                	mov    dl,al
c000badf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bae9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baed:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000baf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bafb:	0f b6 c0             	movzx  eax,al
c000bafe:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb05:	85 c0                	test   eax,eax
c000bb07:	74 3e                	je     c000bb47 <File::File(char const*, Process*, bool)+0xd9>
c000bb09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb0d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb13:	0f b6 c0             	movzx  eax,al
c000bb16:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb1d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb23:	85 c0                	test   eax,eax
c000bb25:	75 20                	jne    c000bb47 <File::File(char const*, Process*, bool)+0xd9>
c000bb27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb2b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb31:	0f b6 c0             	movzx  eax,al
c000bb34:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb3b:	83 ec 0c             	sub    esp,0xc
c000bb3e:	50                   	push   eax
c000bb3f:	e8 a2 21 00 00       	call   c000dce6 <LogicalDisk::mount()>
c000bb44:	83 c4 10             	add    esp,0x10
c000bb47:	90                   	nop
c000bb48:	83 c4 1c             	add    esp,0x1c
c000bb4b:	c3                   	ret    

c000bb4c <File::File(char const*, Process*)>:
c000bb4c:	83 ec 0c             	sub    esp,0xc
c000bb4f:	6a 01                	push   0x1
c000bb51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb5d:	e8 0c ff ff ff       	call   c000ba6e <File::File(char const*, Process*, bool)>
c000bb62:	83 c4 10             	add    esp,0x10
c000bb65:	90                   	nop
c000bb66:	83 c4 0c             	add    esp,0xc
c000bb69:	c3                   	ret    

c000bb6a <File::open(FileOpenMode)>:
c000bb6a:	53                   	push   ebx
c000bb6b:	b8 0b 00 00 00       	mov    eax,0xb
c000bb70:	83 ec 08             	sub    esp,0x8
c000bb73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb77:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bb7e:	83 fa 19             	cmp    edx,0x19
c000bb81:	77 40                	ja     c000bbc3 <File::open(FileOpenMode)+0x59>
c000bb83:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bb8a:	85 d2                	test   edx,edx
c000bb8c:	74 35                	je     c000bbc3 <File::open(FileOpenMode)+0x59>
c000bb8e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bb94:	85 d2                	test   edx,edx
c000bb96:	74 2b                	je     c000bbc3 <File::open(FileOpenMode)+0x59>
c000bb98:	b8 06 00 00 00       	mov    eax,0x6
c000bb9d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bba1:	75 20                	jne    c000bbc3 <File::open(FileOpenMode)+0x59>
c000bba3:	8b 02                	mov    eax,DWORD PTR [edx]
c000bba5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bbab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbaf:	51                   	push   ecx
c000bbb0:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bbb3:	51                   	push   ecx
c000bbb4:	52                   	push   edx
c000bbb5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bbb8:	83 c4 10             	add    esp,0x10
c000bbbb:	85 c0                	test   eax,eax
c000bbbd:	75 04                	jne    c000bbc3 <File::open(FileOpenMode)+0x59>
c000bbbf:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bbc3:	83 c4 08             	add    esp,0x8
c000bbc6:	5b                   	pop    ebx
c000bbc7:	c3                   	ret    

c000bbc8 <File::close()>:
c000bbc8:	53                   	push   ebx
c000bbc9:	b8 0b 00 00 00       	mov    eax,0xb
c000bbce:	83 ec 08             	sub    esp,0x8
c000bbd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbd5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbdc:	83 f9 19             	cmp    ecx,0x19
c000bbdf:	77 41                	ja     c000bc22 <File::close()+0x5a>
c000bbe1:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bbe8:	85 db                	test   ebx,ebx
c000bbea:	74 36                	je     c000bc22 <File::close()+0x5a>
c000bbec:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bbf3:	74 2d                	je     c000bc22 <File::close()+0x5a>
c000bbf5:	b8 05 00 00 00       	mov    eax,0x5
c000bbfa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbfe:	74 22                	je     c000bc22 <File::close()+0x5a>
c000bc00:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bc04:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bc0b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bc11:	53                   	push   ebx
c000bc12:	53                   	push   ebx
c000bc13:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bc15:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc1b:	50                   	push   eax
c000bc1c:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bc1f:	83 c4 10             	add    esp,0x10
c000bc22:	83 c4 08             	add    esp,0x8
c000bc25:	5b                   	pop    ebx
c000bc26:	c3                   	ret    
c000bc27:	90                   	nop

c000bc28 <File::seek(unsigned long long)>:
c000bc28:	56                   	push   esi
c000bc29:	53                   	push   ebx
c000bc2a:	b8 0b 00 00 00       	mov    eax,0xb
c000bc2f:	51                   	push   ecx
c000bc30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc38:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc3f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc43:	83 fa 19             	cmp    edx,0x19
c000bc46:	77 31                	ja     c000bc79 <File::seek(unsigned long long)+0x51>
c000bc48:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc4f:	85 d2                	test   edx,edx
c000bc51:	74 26                	je     c000bc79 <File::seek(unsigned long long)+0x51>
c000bc53:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc59:	85 d2                	test   edx,edx
c000bc5b:	74 1c                	je     c000bc79 <File::seek(unsigned long long)+0x51>
c000bc5d:	b8 05 00 00 00       	mov    eax,0x5
c000bc62:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc66:	74 11                	je     c000bc79 <File::seek(unsigned long long)+0x51>
c000bc68:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc6a:	53                   	push   ebx
c000bc6b:	51                   	push   ecx
c000bc6c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc72:	52                   	push   edx
c000bc73:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bc76:	83 c4 10             	add    esp,0x10
c000bc79:	5a                   	pop    edx
c000bc7a:	5b                   	pop    ebx
c000bc7b:	5e                   	pop    esi
c000bc7c:	c3                   	ret    
c000bc7d:	90                   	nop

c000bc7e <File::truncate(unsigned long long)>:
c000bc7e:	56                   	push   esi
c000bc7f:	53                   	push   ebx
c000bc80:	b8 0b 00 00 00       	mov    eax,0xb
c000bc85:	51                   	push   ecx
c000bc86:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc8a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc8e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc95:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc99:	83 fa 19             	cmp    edx,0x19
c000bc9c:	77 31                	ja     c000bccf <File::truncate(unsigned long long)+0x51>
c000bc9e:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bca5:	85 d2                	test   edx,edx
c000bca7:	74 26                	je     c000bccf <File::truncate(unsigned long long)+0x51>
c000bca9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcaf:	85 d2                	test   edx,edx
c000bcb1:	74 1c                	je     c000bccf <File::truncate(unsigned long long)+0x51>
c000bcb3:	b8 05 00 00 00       	mov    eax,0x5
c000bcb8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bcbc:	74 11                	je     c000bccf <File::truncate(unsigned long long)+0x51>
c000bcbe:	8b 02                	mov    eax,DWORD PTR [edx]
c000bcc0:	53                   	push   ebx
c000bcc1:	51                   	push   ecx
c000bcc2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bcc8:	52                   	push   edx
c000bcc9:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bccc:	83 c4 10             	add    esp,0x10
c000bccf:	5a                   	pop    edx
c000bcd0:	5b                   	pop    ebx
c000bcd1:	5e                   	pop    esi
c000bcd2:	c3                   	ret    
c000bcd3:	90                   	nop

c000bcd4 <File::tell(unsigned long long*)>:
c000bcd4:	83 ec 0c             	sub    esp,0xc
c000bcd7:	b8 0b 00 00 00       	mov    eax,0xb
c000bcdc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bce0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bce7:	83 fa 19             	cmp    edx,0x19
c000bcea:	77 34                	ja     c000bd20 <File::tell(unsigned long long*)+0x4c>
c000bcec:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcf3:	85 d2                	test   edx,edx
c000bcf5:	74 29                	je     c000bd20 <File::tell(unsigned long long*)+0x4c>
c000bcf7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcfd:	85 d2                	test   edx,edx
c000bcff:	74 1f                	je     c000bd20 <File::tell(unsigned long long*)+0x4c>
c000bd01:	b8 05 00 00 00       	mov    eax,0x5
c000bd06:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bd0a:	74 14                	je     c000bd20 <File::tell(unsigned long long*)+0x4c>
c000bd0c:	50                   	push   eax
c000bd0d:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd0f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd13:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bd19:	52                   	push   edx
c000bd1a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bd1d:	83 c4 10             	add    esp,0x10
c000bd20:	83 c4 0c             	add    esp,0xc
c000bd23:	c3                   	ret    

c000bd24 <File::rewind()>:
c000bd24:	83 ec 10             	sub    esp,0x10
c000bd27:	6a 00                	push   0x0
c000bd29:	6a 00                	push   0x0
c000bd2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2f:	e8 f4 fe ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c000bd34:	83 c4 1c             	add    esp,0x1c
c000bd37:	c3                   	ret    

c000bd38 <File::unlink()>:
c000bd38:	83 ec 0c             	sub    esp,0xc
c000bd3b:	b8 0b 00 00 00       	mov    eax,0xb
c000bd40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd44:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd4b:	83 f9 19             	cmp    ecx,0x19
c000bd4e:	77 2f                	ja     c000bd7f <File::unlink()+0x47>
c000bd50:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd57:	85 c9                	test   ecx,ecx
c000bd59:	74 24                	je     c000bd7f <File::unlink()+0x47>
c000bd5b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd61:	85 c9                	test   ecx,ecx
c000bd63:	74 1a                	je     c000bd7f <File::unlink()+0x47>
c000bd65:	b8 06 00 00 00       	mov    eax,0x6
c000bd6a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd6e:	75 0f                	jne    c000bd7f <File::unlink()+0x47>
c000bd70:	83 c2 0d             	add    edx,0xd
c000bd73:	50                   	push   eax
c000bd74:	50                   	push   eax
c000bd75:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd77:	52                   	push   edx
c000bd78:	51                   	push   ecx
c000bd79:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bd7c:	83 c4 10             	add    esp,0x10
c000bd7f:	83 c4 0c             	add    esp,0xc
c000bd82:	c3                   	ret    
c000bd83:	90                   	nop

c000bd84 <File::rename(char const*)>:
c000bd84:	83 ec 0c             	sub    esp,0xc
c000bd87:	b8 0b 00 00 00       	mov    eax,0xb
c000bd8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd90:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd97:	83 f9 19             	cmp    ecx,0x19
c000bd9a:	77 32                	ja     c000bdce <File::rename(char const*)+0x4a>
c000bd9c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bda3:	85 c9                	test   ecx,ecx
c000bda5:	74 27                	je     c000bdce <File::rename(char const*)+0x4a>
c000bda7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdad:	85 c9                	test   ecx,ecx
c000bdaf:	74 1d                	je     c000bdce <File::rename(char const*)+0x4a>
c000bdb1:	b8 06 00 00 00       	mov    eax,0x6
c000bdb6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdba:	75 12                	jne    c000bdce <File::rename(char const*)+0x4a>
c000bdbc:	83 c2 0d             	add    edx,0xd
c000bdbf:	50                   	push   eax
c000bdc0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdc6:	52                   	push   edx
c000bdc7:	51                   	push   ecx
c000bdc8:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bdcb:	83 c4 10             	add    esp,0x10
c000bdce:	83 c4 0c             	add    esp,0xc
c000bdd1:	c3                   	ret    

c000bdd2 <File::chfatattr(unsigned char, unsigned char)>:
c000bdd2:	57                   	push   edi
c000bdd3:	b8 0b 00 00 00       	mov    eax,0xb
c000bdd8:	56                   	push   esi
c000bdd9:	53                   	push   ebx
c000bdda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdde:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bde2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bde9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bded:	83 f9 19             	cmp    ecx,0x19
c000bdf0:	77 37                	ja     c000be29 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdf2:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdf9:	85 c9                	test   ecx,ecx
c000bdfb:	74 2c                	je     c000be29 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdfd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be03:	85 c9                	test   ecx,ecx
c000be05:	74 22                	je     c000be29 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be07:	b8 06 00 00 00       	mov    eax,0x6
c000be0c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be10:	75 17                	jne    c000be29 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be12:	8b 39                	mov    edi,DWORD PTR [ecx]
c000be14:	89 f0                	mov    eax,esi
c000be16:	83 c2 0d             	add    edx,0xd
c000be19:	0f b6 f0             	movzx  esi,al
c000be1c:	0f b6 db             	movzx  ebx,bl
c000be1f:	56                   	push   esi
c000be20:	53                   	push   ebx
c000be21:	52                   	push   edx
c000be22:	51                   	push   ecx
c000be23:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be26:	83 c4 10             	add    esp,0x10
c000be29:	5b                   	pop    ebx
c000be2a:	5e                   	pop    esi
c000be2b:	5f                   	pop    edi
c000be2c:	c3                   	ret    
c000be2d:	90                   	nop

c000be2e <File::exists()>:
c000be2e:	83 ec 0c             	sub    esp,0xc
c000be31:	31 c0                	xor    eax,eax
c000be33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be37:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be3e:	83 f9 19             	cmp    ecx,0x19
c000be41:	77 24                	ja     c000be67 <File::exists()+0x39>
c000be43:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be4a:	85 c9                	test   ecx,ecx
c000be4c:	74 19                	je     c000be67 <File::exists()+0x39>
c000be4e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be54:	85 c9                	test   ecx,ecx
c000be56:	74 0f                	je     c000be67 <File::exists()+0x39>
c000be58:	83 c2 0d             	add    edx,0xd
c000be5b:	50                   	push   eax
c000be5c:	50                   	push   eax
c000be5d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be5f:	52                   	push   edx
c000be60:	51                   	push   ecx
c000be61:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be64:	83 c4 10             	add    esp,0x10
c000be67:	83 c4 0c             	add    esp,0xc
c000be6a:	c3                   	ret    
c000be6b:	90                   	nop

c000be6c <File::stat(unsigned long long*, bool*)>:
c000be6c:	56                   	push   esi
c000be6d:	53                   	push   ebx
c000be6e:	50                   	push   eax
c000be6f:	b8 0b 00 00 00       	mov    eax,0xb
c000be74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be78:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be7c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be83:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be87:	83 f9 19             	cmp    ecx,0x19
c000be8a:	77 3d                	ja     c000bec9 <File::stat(unsigned long long*, bool*)+0x5d>
c000be8c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be93:	85 c9                	test   ecx,ecx
c000be95:	74 32                	je     c000bec9 <File::stat(unsigned long long*, bool*)+0x5d>
c000be97:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be9d:	85 c9                	test   ecx,ecx
c000be9f:	74 28                	je     c000bec9 <File::stat(unsigned long long*, bool*)+0x5d>
c000bea1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bea3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bea7:	74 13                	je     c000bebc <File::stat(unsigned long long*, bool*)+0x50>
c000bea9:	83 ec 04             	sub    esp,0x4
c000beac:	56                   	push   esi
c000bead:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000beb3:	51                   	push   ecx
c000beb4:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000beb7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000beba:	eb 0a                	jmp    c000bec6 <File::stat(unsigned long long*, bool*)+0x5a>
c000bebc:	53                   	push   ebx
c000bebd:	83 c2 0d             	add    edx,0xd
c000bec0:	56                   	push   esi
c000bec1:	52                   	push   edx
c000bec2:	51                   	push   ecx
c000bec3:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bec6:	83 c4 10             	add    esp,0x10
c000bec9:	5a                   	pop    edx
c000beca:	5b                   	pop    ebx
c000becb:	5e                   	pop    esi
c000becc:	c3                   	ret    

c000becd <Fs::setcwd(Process*, char*)>:
c000becd:	55                   	push   ebp
c000bece:	57                   	push   edi
c000becf:	56                   	push   esi
c000bed0:	53                   	push   ebx
c000bed1:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bed7:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bede:	6a 00                	push   0x0
c000bee0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bee6:	57                   	push   edi
c000bee7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000beee:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bef2:	56                   	push   esi
c000bef3:	e8 5c f9 ff ff       	call   c000b854 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bef8:	89 34 24             	mov    DWORD PTR [esp],esi
c000befb:	e8 70 46 ff ff       	call   c0000570 <strlen>
c000bf00:	83 c4 10             	add    esp,0x10
c000bf03:	83 f8 02             	cmp    eax,0x2
c000bf06:	77 15                	ja     c000bf1d <Fs::setcwd(Process*, char*)+0x50>
c000bf08:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bf0d:	83 eb 41             	sub    ebx,0x41
c000bf10:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bf17:	85 c0                	test   eax,eax
c000bf19:	75 1c                	jne    c000bf37 <Fs::setcwd(Process*, char*)+0x6a>
c000bf1b:	eb 2f                	jmp    c000bf4c <Fs::setcwd(Process*, char*)+0x7f>
c000bf1d:	83 ec 0c             	sub    esp,0xc
c000bf20:	56                   	push   esi
c000bf21:	e8 4a 46 ff ff       	call   c0000570 <strlen>
c000bf26:	83 c4 10             	add    esp,0x10
c000bf29:	83 f8 03             	cmp    eax,0x3
c000bf2c:	75 57                	jne    c000bf85 <Fs::setcwd(Process*, char*)+0xb8>
c000bf2e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bf33:	75 50                	jne    c000bf85 <Fs::setcwd(Process*, char*)+0xb8>
c000bf35:	eb d1                	jmp    c000bf08 <Fs::setcwd(Process*, char*)+0x3b>
c000bf37:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bf3e:	75 0c                	jne    c000bf4c <Fs::setcwd(Process*, char*)+0x7f>
c000bf40:	83 ec 0c             	sub    esp,0xc
c000bf43:	50                   	push   eax
c000bf44:	e8 9d 1d 00 00       	call   c000dce6 <LogicalDisk::mount()>
c000bf49:	83 c4 10             	add    esp,0x10
c000bf4c:	b8 03 00 00 00       	mov    eax,0x3
c000bf51:	83 fb 19             	cmp    ebx,0x19
c000bf54:	0f 87 c6 00 00 00    	ja     c000c020 <Fs::setcwd(Process*, char*)+0x153>
c000bf5a:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bf61:	b8 05 00 00 00       	mov    eax,0x5
c000bf66:	85 d2                	test   edx,edx
c000bf68:	0f 84 b2 00 00 00    	je     c000c020 <Fs::setcwd(Process*, char*)+0x153>
c000bf6e:	b8 06 00 00 00       	mov    eax,0x6
c000bf73:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bf7a:	0f 85 92 00 00 00    	jne    c000c012 <Fs::setcwd(Process*, char*)+0x145>
c000bf80:	e9 9b 00 00 00       	jmp    c000c020 <Fs::setcwd(Process*, char*)+0x153>
c000bf85:	83 ec 0c             	sub    esp,0xc
c000bf88:	68 14 01 00 00       	push   0x114
c000bf8d:	e8 24 bb ff ff       	call   c0007ab6 <malloc>
c000bf92:	83 c4 0c             	add    esp,0xc
c000bf95:	89 c3                	mov    ebx,eax
c000bf97:	55                   	push   ebp
c000bf98:	56                   	push   esi
c000bf99:	50                   	push   eax
c000bf9a:	e8 ad fb ff ff       	call   c000bb4c <File::File(char const*, Process*)>
c000bf9f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bfa4:	83 c4 0c             	add    esp,0xc
c000bfa7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bfab:	50                   	push   eax
c000bfac:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bfb0:	50                   	push   eax
c000bfb1:	53                   	push   ebx
c000bfb2:	e8 b5 fe ff ff       	call   c000be6c <File::stat(unsigned long long*, bool*)>
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	83 f8 02             	cmp    eax,0x2
c000bfbd:	74 27                	je     c000bfe6 <Fs::setcwd(Process*, char*)+0x119>
c000bfbf:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bfc4:	75 1c                	jne    c000bfe2 <Fs::setcwd(Process*, char*)+0x115>
c000bfc6:	b8 02 00 00 00       	mov    eax,0x2
c000bfcb:	85 db                	test   ebx,ebx
c000bfcd:	74 51                	je     c000c020 <Fs::setcwd(Process*, char*)+0x153>
c000bfcf:	83 ec 0c             	sub    esp,0xc
c000bfd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfd4:	53                   	push   ebx
c000bfd5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfd8:	83 c4 10             	add    esp,0x10
c000bfdb:	b8 02 00 00 00       	mov    eax,0x2
c000bfe0:	eb 3e                	jmp    c000c020 <Fs::setcwd(Process*, char*)+0x153>
c000bfe2:	85 c0                	test   eax,eax
c000bfe4:	74 1c                	je     c000c002 <Fs::setcwd(Process*, char*)+0x135>
c000bfe6:	b8 01 00 00 00       	mov    eax,0x1
c000bfeb:	85 db                	test   ebx,ebx
c000bfed:	74 31                	je     c000c020 <Fs::setcwd(Process*, char*)+0x153>
c000bfef:	83 ec 0c             	sub    esp,0xc
c000bff2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bff4:	53                   	push   ebx
c000bff5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bff8:	83 c4 10             	add    esp,0x10
c000bffb:	b8 01 00 00 00       	mov    eax,0x1
c000c000:	eb 1e                	jmp    c000c020 <Fs::setcwd(Process*, char*)+0x153>
c000c002:	85 db                	test   ebx,ebx
c000c004:	74 0c                	je     c000c012 <Fs::setcwd(Process*, char*)+0x145>
c000c006:	83 ec 0c             	sub    esp,0xc
c000c009:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c00b:	53                   	push   ebx
c000c00c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c00f:	83 c4 10             	add    esp,0x10
c000c012:	50                   	push   eax
c000c013:	50                   	push   eax
c000c014:	56                   	push   esi
c000c015:	57                   	push   edi
c000c016:	e8 25 46 ff ff       	call   c0000640 <strcpy>
c000c01b:	83 c4 10             	add    esp,0x10
c000c01e:	31 c0                	xor    eax,eax
c000c020:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c026:	5b                   	pop    ebx
c000c027:	5e                   	pop    esi
c000c028:	5f                   	pop    edi
c000c029:	5d                   	pop    ebp
c000c02a:	c3                   	ret    
c000c02b:	90                   	nop

c000c02c <Directory::Directory(char const*, Process*)>:
c000c02c:	83 ec 0c             	sub    esp,0xc
c000c02f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c033:	83 ec 08             	sub    esp,0x8
c000c036:	6a 00                	push   0x0
c000c038:	50                   	push   eax
c000c039:	e8 80 d1 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000c03e:	83 c4 10             	add    esp,0x10
c000c041:	ba 1c 1a 02 c0       	mov    edx,0xc0021a1c
c000c046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c04a:	89 10                	mov    DWORD PTR [eax],edx
c000c04c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c051:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c055:	0f 95 c0             	setne  al
c000c058:	0f b6 c0             	movzx  eax,al
c000c05b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c05f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c065:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c069:	83 c2 0d             	add    edx,0xd
c000c06c:	50                   	push   eax
c000c06d:	51                   	push   ecx
c000c06e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c072:	52                   	push   edx
c000c073:	e8 dc f7 ff ff       	call   c000b854 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c078:	83 c4 10             	add    esp,0x10
c000c07b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c07f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c082:	83 e8 41             	sub    eax,0x41
c000c085:	88 c2                	mov    dl,al
c000c087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c08b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c095:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c09d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0a3:	0f b6 c0             	movzx  eax,al
c000c0a6:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0ad:	85 c0                	test   eax,eax
c000c0af:	74 3e                	je     c000c0ef <Directory::Directory(char const*, Process*)+0xc3>
c000c0b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0bb:	0f b6 c0             	movzx  eax,al
c000c0be:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0c5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c0cb:	85 c0                	test   eax,eax
c000c0cd:	75 20                	jne    c000c0ef <Directory::Directory(char const*, Process*)+0xc3>
c000c0cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0d9:	0f b6 c0             	movzx  eax,al
c000c0dc:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0e3:	83 ec 0c             	sub    esp,0xc
c000c0e6:	50                   	push   eax
c000c0e7:	e8 fa 1b 00 00       	call   c000dce6 <LogicalDisk::mount()>
c000c0ec:	83 c4 10             	add    esp,0x10
c000c0ef:	90                   	nop
c000c0f0:	83 c4 0c             	add    esp,0xc
c000c0f3:	c3                   	ret    

c000c0f4 <Directory::open()>:
c000c0f4:	53                   	push   ebx
c000c0f5:	b8 0b 00 00 00       	mov    eax,0xb
c000c0fa:	83 ec 08             	sub    esp,0x8
c000c0fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c101:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c108:	83 fa 19             	cmp    edx,0x19
c000c10b:	77 3d                	ja     c000c14a <Directory::open()+0x56>
c000c10d:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c114:	85 d2                	test   edx,edx
c000c116:	74 32                	je     c000c14a <Directory::open()+0x56>
c000c118:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c11e:	85 d2                	test   edx,edx
c000c120:	74 28                	je     c000c14a <Directory::open()+0x56>
c000c122:	b8 06 00 00 00       	mov    eax,0x6
c000c127:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c12b:	75 1d                	jne    c000c14a <Directory::open()+0x56>
c000c12d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c133:	50                   	push   eax
c000c134:	8b 02                	mov    eax,DWORD PTR [edx]
c000c136:	51                   	push   ecx
c000c137:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c13a:	51                   	push   ecx
c000c13b:	52                   	push   edx
c000c13c:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c13f:	83 c4 10             	add    esp,0x10
c000c142:	85 c0                	test   eax,eax
c000c144:	75 04                	jne    c000c14a <Directory::open()+0x56>
c000c146:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c14a:	83 c4 08             	add    esp,0x8
c000c14d:	5b                   	pop    ebx
c000c14e:	c3                   	ret    
c000c14f:	90                   	nop

c000c150 <Directory::close()>:
c000c150:	53                   	push   ebx
c000c151:	b8 0b 00 00 00       	mov    eax,0xb
c000c156:	83 ec 08             	sub    esp,0x8
c000c159:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c15d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c164:	83 f9 19             	cmp    ecx,0x19
c000c167:	77 41                	ja     c000c1aa <Directory::close()+0x5a>
c000c169:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c170:	85 db                	test   ebx,ebx
c000c172:	74 36                	je     c000c1aa <Directory::close()+0x5a>
c000c174:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c17b:	74 2d                	je     c000c1aa <Directory::close()+0x5a>
c000c17d:	b8 05 00 00 00       	mov    eax,0x5
c000c182:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c186:	74 22                	je     c000c1aa <Directory::close()+0x5a>
c000c188:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c18c:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c193:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c199:	53                   	push   ebx
c000c19a:	53                   	push   ebx
c000c19b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c19d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c1a3:	50                   	push   eax
c000c1a4:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c1a7:	83 c4 10             	add    esp,0x10
c000c1aa:	83 c4 08             	add    esp,0x8
c000c1ad:	5b                   	pop    ebx
c000c1ae:	c3                   	ret    
c000c1af:	90                   	nop

c000c1b0 <Directory::unlink()>:
c000c1b0:	83 ec 0c             	sub    esp,0xc
c000c1b3:	b8 0b 00 00 00       	mov    eax,0xb
c000c1b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1bc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1c3:	83 f9 19             	cmp    ecx,0x19
c000c1c6:	77 2f                	ja     c000c1f7 <Directory::unlink()+0x47>
c000c1c8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1cf:	85 c9                	test   ecx,ecx
c000c1d1:	74 24                	je     c000c1f7 <Directory::unlink()+0x47>
c000c1d3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1d9:	85 c9                	test   ecx,ecx
c000c1db:	74 1a                	je     c000c1f7 <Directory::unlink()+0x47>
c000c1dd:	b8 06 00 00 00       	mov    eax,0x6
c000c1e2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1e6:	75 0f                	jne    c000c1f7 <Directory::unlink()+0x47>
c000c1e8:	83 c2 0d             	add    edx,0xd
c000c1eb:	50                   	push   eax
c000c1ec:	50                   	push   eax
c000c1ed:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1ef:	52                   	push   edx
c000c1f0:	51                   	push   ecx
c000c1f1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c1f4:	83 c4 10             	add    esp,0x10
c000c1f7:	83 c4 0c             	add    esp,0xc
c000c1fa:	c3                   	ret    
c000c1fb:	90                   	nop

c000c1fc <Directory::rename(char const*)>:
c000c1fc:	83 ec 0c             	sub    esp,0xc
c000c1ff:	b8 0b 00 00 00       	mov    eax,0xb
c000c204:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c208:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c20f:	83 f9 19             	cmp    ecx,0x19
c000c212:	77 32                	ja     c000c246 <Directory::rename(char const*)+0x4a>
c000c214:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c21b:	85 c9                	test   ecx,ecx
c000c21d:	74 27                	je     c000c246 <Directory::rename(char const*)+0x4a>
c000c21f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c225:	85 c9                	test   ecx,ecx
c000c227:	74 1d                	je     c000c246 <Directory::rename(char const*)+0x4a>
c000c229:	b8 06 00 00 00       	mov    eax,0x6
c000c22e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c232:	75 12                	jne    c000c246 <Directory::rename(char const*)+0x4a>
c000c234:	83 c2 0d             	add    edx,0xd
c000c237:	50                   	push   eax
c000c238:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c23a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c23e:	52                   	push   edx
c000c23f:	51                   	push   ecx
c000c240:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c243:	83 c4 10             	add    esp,0x10
c000c246:	83 c4 0c             	add    esp,0xc
c000c249:	c3                   	ret    

c000c24a <Directory::exists()>:
c000c24a:	83 ec 0c             	sub    esp,0xc
c000c24d:	31 c0                	xor    eax,eax
c000c24f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c253:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c25a:	83 f9 19             	cmp    ecx,0x19
c000c25d:	77 24                	ja     c000c283 <Directory::exists()+0x39>
c000c25f:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c266:	85 c9                	test   ecx,ecx
c000c268:	74 19                	je     c000c283 <Directory::exists()+0x39>
c000c26a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c270:	85 c9                	test   ecx,ecx
c000c272:	74 0f                	je     c000c283 <Directory::exists()+0x39>
c000c274:	83 c2 0d             	add    edx,0xd
c000c277:	50                   	push   eax
c000c278:	50                   	push   eax
c000c279:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c27b:	52                   	push   edx
c000c27c:	51                   	push   ecx
c000c27d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c280:	83 c4 10             	add    esp,0x10
c000c283:	83 c4 0c             	add    esp,0xc
c000c286:	c3                   	ret    
c000c287:	90                   	nop

c000c288 <Directory::read(dirent*)>:
c000c288:	83 ec 1c             	sub    esp,0x1c
c000c28b:	b8 0b 00 00 00       	mov    eax,0xb
c000c290:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c294:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c29b:	83 f9 19             	cmp    ecx,0x19
c000c29e:	77 30                	ja     c000c2d0 <Directory::read(dirent*)+0x48>
c000c2a0:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2a7:	85 c9                	test   ecx,ecx
c000c2a9:	74 25                	je     c000c2d0 <Directory::read(dirent*)+0x48>
c000c2ab:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c2b2:	74 1c                	je     c000c2d0 <Directory::read(dirent*)+0x48>
c000c2b4:	83 ec 0c             	sub    esp,0xc
c000c2b7:	8b 02                	mov    eax,DWORD PTR [edx]
c000c2b9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c2bd:	51                   	push   ecx
c000c2be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2c2:	6a 00                	push   0x0
c000c2c4:	68 10 01 00 00       	push   0x110
c000c2c9:	52                   	push   edx
c000c2ca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c2cd:	83 c4 20             	add    esp,0x20
c000c2d0:	83 c4 1c             	add    esp,0x1c
c000c2d3:	c3                   	ret    

c000c2d4 <Directory::create()>:
c000c2d4:	83 ec 0c             	sub    esp,0xc
c000c2d7:	b8 0b 00 00 00       	mov    eax,0xb
c000c2dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2e0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2e7:	83 f9 19             	cmp    ecx,0x19
c000c2ea:	77 2f                	ja     c000c31b <Directory::create()+0x47>
c000c2ec:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2f3:	85 c9                	test   ecx,ecx
c000c2f5:	74 24                	je     c000c31b <Directory::create()+0x47>
c000c2f7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c2fd:	85 c9                	test   ecx,ecx
c000c2ff:	74 1a                	je     c000c31b <Directory::create()+0x47>
c000c301:	b8 06 00 00 00       	mov    eax,0x6
c000c306:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c30a:	75 0f                	jne    c000c31b <Directory::create()+0x47>
c000c30c:	83 c2 0d             	add    edx,0xd
c000c30f:	50                   	push   eax
c000c310:	50                   	push   eax
c000c311:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c313:	52                   	push   edx
c000c314:	51                   	push   ecx
c000c315:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c318:	83 c4 10             	add    esp,0x10
c000c31b:	83 c4 0c             	add    esp,0xc
c000c31e:	c3                   	ret    
c000c31f:	90                   	nop

c000c320 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c320:	b8 0a 00 00 00       	mov    eax,0xa
c000c325:	c3                   	ret    
c000c326:	66 90                	xchg   ax,ax

c000c328 <Bus::Bus(char const*)>:
c000c328:	83 ec 0c             	sub    esp,0xc
c000c32b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c32f:	83 ec 08             	sub    esp,0x8
c000c332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c336:	50                   	push   eax
c000c337:	e8 22 08 00 00       	call   c000cb5e <Device::Device(char const*)>
c000c33c:	83 c4 10             	add    esp,0x10
c000c33f:	ba 38 1a 02 c0       	mov    edx,0xc0021a38
c000c344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c348:	89 10                	mov    DWORD PTR [eax],edx
c000c34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c34e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c358:	90                   	nop
c000c359:	83 c4 0c             	add    esp,0xc
c000c35c:	c3                   	ret    
c000c35d:	90                   	nop
c000c35e:	66 90                	xchg   ax,ax

c000c360 <Bus::~Bus()>:
c000c360:	83 ec 0c             	sub    esp,0xc
c000c363:	ba 38 1a 02 c0       	mov    edx,0xc0021a38
c000c368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c36c:	89 10                	mov    DWORD PTR [eax],edx
c000c36e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c372:	83 ec 0c             	sub    esp,0xc
c000c375:	50                   	push   eax
c000c376:	e8 4d 05 00 00       	call   c000c8c8 <Device::~Device()>
c000c37b:	83 c4 10             	add    esp,0x10
c000c37e:	90                   	nop
c000c37f:	83 c4 0c             	add    esp,0xc
c000c382:	c3                   	ret    
c000c383:	90                   	nop

c000c384 <Bus::~Bus()>:
c000c384:	83 ec 0c             	sub    esp,0xc
c000c387:	83 ec 0c             	sub    esp,0xc
c000c38a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38e:	e8 cd ff ff ff       	call   c000c360 <Bus::~Bus()>
c000c393:	83 c4 10             	add    esp,0x10
c000c396:	83 ec 08             	sub    esp,0x8
c000c399:	68 58 01 00 00       	push   0x158
c000c39e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3a2:	e8 71 e4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c3a7:	83 c4 10             	add    esp,0x10
c000c3aa:	83 c4 0c             	add    esp,0xc
c000c3ad:	c3                   	ret    

c000c3ae <beepThread(void*)>:
c000c3ae:	83 ec 0c             	sub    esp,0xc
c000c3b1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c3b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3ba:	48                   	dec    eax
c000c3bb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c3c0:	75 01                	jne    c000c3c3 <beepThread(void*)+0x15>
c000c3c2:	fb                   	sti    
c000c3c3:	83 ec 0c             	sub    esp,0xc
c000c3c6:	6b c2 0a             	imul   eax,edx,0xa
c000c3c9:	50                   	push   eax
c000c3ca:	e8 65 a0 00 00       	call   c0016434 <milliTenthSleep(unsigned int)>
c000c3cf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c3d6:	e8 b4 bf 00 00       	call   c001838f <HalMakeBeep(int)>
c000c3db:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c3e3:	83 c4 1c             	add    esp,0x1c
c000c3e6:	e9 2d 9f 00 00       	jmp    c0016318 <blockTask(TaskState)>

c000c3eb <Krnl::beep(int, int, bool)>:
c000c3eb:	56                   	push   esi
c000c3ec:	53                   	push   ebx
c000c3ed:	83 ec 10             	sub    esp,0x10
c000c3f0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c3f4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c3f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3fc:	e8 8e bf 00 00       	call   c001838f <HalMakeBeep(int)>
c000c401:	83 c4 10             	add    esp,0x10
c000c404:	89 f0                	mov    eax,esi
c000c406:	84 c0                	test   al,al
c000c408:	74 1e                	je     c000c428 <Krnl::beep(int, int, bool)+0x3d>
c000c40a:	83 ec 0c             	sub    esp,0xc
c000c40d:	6b db 0a             	imul   ebx,ebx,0xa
c000c410:	53                   	push   ebx
c000c411:	e8 1e a0 00 00       	call   c0016434 <milliTenthSleep(unsigned int)>
c000c416:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c41e:	83 c4 14             	add    esp,0x14
c000c421:	5b                   	pop    ebx
c000c422:	5e                   	pop    esi
c000c423:	e9 67 bf 00 00       	jmp    c001838f <HalMakeBeep(int)>
c000c428:	68 e6 00 00 00       	push   0xe6
c000c42d:	53                   	push   ebx
c000c42e:	68 ae c3 00 c0       	push   0xc000c3ae
c000c433:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c439:	e8 76 9a 00 00       	call   c0015eb4 <Process::createThread(void (*)(void*), void*, int)>
c000c43e:	83 c4 14             	add    esp,0x14
c000c441:	5b                   	pop    ebx
c000c442:	5e                   	pop    esi
c000c443:	c3                   	ret    

c000c444 <User::loadClockSettings(int)>:
c000c444:	53                   	push   ebx
c000c445:	83 ec 14             	sub    esp,0x14
c000c448:	68 14 01 00 00       	push   0x114
c000c44d:	e8 64 b6 ff ff       	call   c0007ab6 <malloc>
c000c452:	83 c4 0c             	add    esp,0xc
c000c455:	89 c3                	mov    ebx,eax
c000c457:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c45d:	68 5c 1a 02 c0       	push   0xc0021a5c
c000c462:	50                   	push   eax
c000c463:	e8 e4 f6 ff ff       	call   c000bb4c <File::File(char const*, Process*)>
c000c468:	58                   	pop    eax
c000c469:	5a                   	pop    edx
c000c46a:	6a 01                	push   0x1
c000c46c:	53                   	push   ebx
c000c46d:	e8 f8 f6 ff ff       	call   c000bb6a <File::open(FileOpenMode)>
c000c472:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c475:	e8 4e f7 ff ff       	call   c000bbc8 <File::close()>
c000c47a:	83 c4 10             	add    esp,0x10
c000c47d:	85 db                	test   ebx,ebx
c000c47f:	74 0f                	je     c000c490 <User::loadClockSettings(int)+0x4c>
c000c481:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c483:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c487:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c48a:	83 c4 08             	add    esp,0x8
c000c48d:	5b                   	pop    ebx
c000c48e:	ff e0                	jmp    eax
c000c490:	83 c4 08             	add    esp,0x8
c000c493:	5b                   	pop    ebx
c000c494:	c3                   	ret    
c000c495:	90                   	nop

c000c496 <Clock::Clock(char const*)>:
c000c496:	83 ec 0c             	sub    esp,0xc
c000c499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c49d:	83 ec 08             	sub    esp,0x8
c000c4a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4a4:	50                   	push   eax
c000c4a5:	e8 b4 06 00 00       	call   c000cb5e <Device::Device(char const*)>
c000c4aa:	83 c4 10             	add    esp,0x10
c000c4ad:	ba 84 1a 02 c0       	mov    edx,0xc0021a84
c000c4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4b6:	89 10                	mov    DWORD PTR [eax],edx
c000c4b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4bc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c4c6:	90                   	nop
c000c4c7:	83 c4 0c             	add    esp,0xc
c000c4ca:	c3                   	ret    
c000c4cb:	90                   	nop

c000c4cc <Clock::~Clock()>:
c000c4cc:	83 ec 0c             	sub    esp,0xc
c000c4cf:	ba 84 1a 02 c0       	mov    edx,0xc0021a84
c000c4d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4d8:	89 10                	mov    DWORD PTR [eax],edx
c000c4da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4de:	83 ec 0c             	sub    esp,0xc
c000c4e1:	50                   	push   eax
c000c4e2:	e8 e1 03 00 00       	call   c000c8c8 <Device::~Device()>
c000c4e7:	83 c4 10             	add    esp,0x10
c000c4ea:	90                   	nop
c000c4eb:	83 c4 0c             	add    esp,0xc
c000c4ee:	c3                   	ret    
c000c4ef:	90                   	nop

c000c4f0 <Clock::~Clock()>:
c000c4f0:	83 ec 0c             	sub    esp,0xc
c000c4f3:	83 ec 0c             	sub    esp,0xc
c000c4f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4fa:	e8 cd ff ff ff       	call   c000c4cc <Clock::~Clock()>
c000c4ff:	83 c4 10             	add    esp,0x10
c000c502:	83 ec 08             	sub    esp,0x8
c000c505:	68 58 01 00 00       	push   0x158
c000c50a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c50e:	e8 05 e3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	83 c4 0c             	add    esp,0xc
c000c519:	c3                   	ret    

c000c51a <Clock::timeInSecondsLocal()>:
c000c51a:	53                   	push   ebx
c000c51b:	83 ec 14             	sub    esp,0x14
c000c51e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c522:	8b 10                	mov    edx,DWORD PTR [eax]
c000c524:	50                   	push   eax
c000c525:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c528:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c52f:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c535:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c53b:	89 cb                	mov    ebx,ecx
c000c53d:	c1 fb 1f             	sar    ebx,0x1f
c000c540:	01 c8                	add    eax,ecx
c000c542:	11 da                	adc    edx,ebx
c000c544:	83 c4 10             	add    esp,0x10
c000c547:	31 c9                	xor    ecx,ecx
c000c549:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c550:	74 05                	je     c000c557 <Clock::timeInSecondsLocal()+0x3d>
c000c552:	b9 08 07 00 00       	mov    ecx,0x708
c000c557:	31 db                	xor    ebx,ebx
c000c559:	01 c8                	add    eax,ecx
c000c55b:	11 da                	adc    edx,ebx
c000c55d:	83 c4 08             	add    esp,0x8
c000c560:	5b                   	pop    ebx
c000c561:	c3                   	ret    

c000c562 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c562:	57                   	push   edi
c000c563:	56                   	push   esi
c000c564:	53                   	push   ebx
c000c565:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c569:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c56d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c56f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c573:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c576:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c57d:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c583:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c589:	99                   	cdq    
c000c58a:	29 c6                	sub    esi,eax
c000c58c:	19 d7                	sbb    edi,edx
c000c58e:	89 f0                	mov    eax,esi
c000c590:	89 fa                	mov    edx,edi
c000c592:	31 f6                	xor    esi,esi
c000c594:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c59b:	74 05                	je     c000c5a2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c59d:	be 08 07 00 00       	mov    esi,0x708
c000c5a2:	31 ff                	xor    edi,edi
c000c5a4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c5a8:	29 f0                	sub    eax,esi
c000c5aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c5ae:	19 fa                	sbb    edx,edi
c000c5b0:	89 d8                	mov    eax,ebx
c000c5b2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c5b6:	5b                   	pop    ebx
c000c5b7:	5e                   	pop    esi
c000c5b8:	5f                   	pop    edi
c000c5b9:	ff e0                	jmp    eax

c000c5bb <datetimeToSeconds(datetime_t)>:
c000c5bb:	55                   	push   ebp
c000c5bc:	57                   	push   edi
c000c5bd:	56                   	push   esi
c000c5be:	53                   	push   ebx
c000c5bf:	83 ec 0c             	sub    esp,0xc
c000c5c2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c5c6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c5ca:	89 d6                	mov    esi,edx
c000c5cc:	0f b6 c7             	movzx  eax,bh
c000c5cf:	c1 ee 10             	shr    esi,0x10
c000c5d2:	6b e8 3c             	imul   ebp,eax,0x3c
c000c5d5:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c5db:	0f b6 ce             	movzx  ecx,dh
c000c5de:	89 df                	mov    edi,ebx
c000c5e0:	49                   	dec    ecx
c000c5e1:	c1 ef 10             	shr    edi,0x10
c000c5e4:	0f b6 db             	movzx  ebx,bl
c000c5e7:	89 f8                	mov    eax,edi
c000c5e9:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c5ef:	0f b6 f8             	movzx  edi,al
c000c5f2:	0f b6 d2             	movzx  edx,dl
c000c5f5:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c5f9:	01 d8                	add    eax,ebx
c000c5fb:	0f b7 de             	movzx  ebx,si
c000c5fe:	89 04 24             	mov    DWORD PTR [esp],eax
c000c601:	c1 f8 1f             	sar    eax,0x1f
c000c604:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c608:	0f b6 c1             	movzx  eax,cl
c000c60b:	8b 0c 85 c0 1a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde540]
c000c612:	83 f8 01             	cmp    eax,0x1
c000c615:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c619:	76 27                	jbe    c000c642 <datetimeToSeconds(datetime_t)+0x87>
c000c61b:	83 e6 03             	and    esi,0x3
c000c61e:	75 22                	jne    c000c642 <datetimeToSeconds(datetime_t)+0x87>
c000c620:	31 d2                	xor    edx,edx
c000c622:	be 64 00 00 00       	mov    esi,0x64
c000c627:	89 d8                	mov    eax,ebx
c000c629:	f7 f6                	div    esi
c000c62b:	85 d2                	test   edx,edx
c000c62d:	75 12                	jne    c000c641 <datetimeToSeconds(datetime_t)+0x86>
c000c62f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c635:	be 90 01 00 00       	mov    esi,0x190
c000c63a:	99                   	cdq    
c000c63b:	f7 fe                	idiv   esi
c000c63d:	85 d2                	test   edx,edx
c000c63f:	75 01                	jne    c000c642 <datetimeToSeconds(datetime_t)+0x87>
c000c641:	41                   	inc    ecx
c000c642:	83 fb 46             	cmp    ebx,0x46
c000c645:	76 48                	jbe    c000c68f <datetimeToSeconds(datetime_t)+0xd4>
c000c647:	be 46 00 00 00       	mov    esi,0x46
c000c64c:	bf 64 00 00 00       	mov    edi,0x64
c000c651:	bd 90 01 00 00       	mov    ebp,0x190
c000c656:	b8 6d 01 00 00       	mov    eax,0x16d
c000c65b:	f7 c6 03 00 00 00    	test   esi,0x3
c000c661:	75 23                	jne    c000c686 <datetimeToSeconds(datetime_t)+0xcb>
c000c663:	89 f0                	mov    eax,esi
c000c665:	99                   	cdq    
c000c666:	f7 ff                	idiv   edi
c000c668:	b8 6e 01 00 00       	mov    eax,0x16e
c000c66d:	85 d2                	test   edx,edx
c000c66f:	75 15                	jne    c000c686 <datetimeToSeconds(datetime_t)+0xcb>
c000c671:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c677:	99                   	cdq    
c000c678:	f7 fd                	idiv   ebp
c000c67a:	83 fa 01             	cmp    edx,0x1
c000c67d:	19 c0                	sbb    eax,eax
c000c67f:	f7 d0                	not    eax
c000c681:	05 6e 01 00 00       	add    eax,0x16e
c000c686:	01 c1                	add    ecx,eax
c000c688:	46                   	inc    esi
c000c689:	39 de                	cmp    esi,ebx
c000c68b:	7c c9                	jl     c000c656 <datetimeToSeconds(datetime_t)+0x9b>
c000c68d:	eb 34                	jmp    c000c6c3 <datetimeToSeconds(datetime_t)+0x108>
c000c68f:	74 32                	je     c000c6c3 <datetimeToSeconds(datetime_t)+0x108>
c000c691:	b8 45 00 00 00       	mov    eax,0x45
c000c696:	89 c2                	mov    edx,eax
c000c698:	83 e2 03             	and    edx,0x3
c000c69b:	39 d8                	cmp    eax,ebx
c000c69d:	7e 0f                	jle    c000c6ae <datetimeToSeconds(datetime_t)+0xf3>
c000c69f:	83 fa 01             	cmp    edx,0x1
c000c6a2:	19 d2                	sbb    edx,edx
c000c6a4:	48                   	dec    eax
c000c6a5:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c6ac:	eb e8                	jmp    c000c696 <datetimeToSeconds(datetime_t)+0xdb>
c000c6ae:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6b3:	85 d2                	test   edx,edx
c000c6b5:	75 0a                	jne    c000c6c1 <datetimeToSeconds(datetime_t)+0x106>
c000c6b7:	83 fb 01             	cmp    ebx,0x1
c000c6ba:	19 c0                	sbb    eax,eax
c000c6bc:	05 6e 01 00 00       	add    eax,0x16e
c000c6c1:	29 c1                	sub    ecx,eax
c000c6c3:	b8 80 51 01 00       	mov    eax,0x15180
c000c6c8:	f7 e9                	imul   ecx
c000c6ca:	03 04 24             	add    eax,DWORD PTR [esp]
c000c6cd:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c6d1:	83 c4 0c             	add    esp,0xc
c000c6d4:	5b                   	pop    ebx
c000c6d5:	5e                   	pop    esi
c000c6d6:	5f                   	pop    edi
c000c6d7:	5d                   	pop    ebp
c000c6d8:	c3                   	ret    
c000c6d9:	90                   	nop

c000c6da <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c6da:	57                   	push   edi
c000c6db:	56                   	push   esi
c000c6dc:	53                   	push   ebx
c000c6dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c6e1:	8b 06                	mov    eax,DWORD PTR [esi]
c000c6e3:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c6e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6ee:	e8 c8 fe ff ff       	call   c000c5bb <datetimeToSeconds(datetime_t)>
c000c6f3:	59                   	pop    ecx
c000c6f4:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c6fb:	5b                   	pop    ebx
c000c6fc:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c702:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c708:	89 cb                	mov    ebx,ecx
c000c70a:	c1 fb 1f             	sar    ebx,0x1f
c000c70d:	29 c8                	sub    eax,ecx
c000c70f:	19 da                	sbb    edx,ebx
c000c711:	31 c9                	xor    ecx,ecx
c000c713:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c71a:	74 05                	je     c000c721 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c71c:	b9 08 07 00 00       	mov    ecx,0x708
c000c721:	31 db                	xor    ebx,ebx
c000c723:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c727:	29 c8                	sub    eax,ecx
c000c729:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c72d:	19 da                	sbb    edx,ebx
c000c72f:	89 f8                	mov    eax,edi
c000c731:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c735:	5b                   	pop    ebx
c000c736:	5e                   	pop    esi
c000c737:	5f                   	pop    edi
c000c738:	ff e0                	jmp    eax

c000c73a <secondsToDatetime(unsigned long long)>:
c000c73a:	55                   	push   ebp
c000c73b:	57                   	push   edi
c000c73c:	56                   	push   esi
c000c73d:	53                   	push   ebx
c000c73e:	83 ec 1c             	sub    esp,0x1c
c000c741:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c745:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c749:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c74d:	6a 00                	push   0x0
c000c74f:	68 80 51 01 00       	push   0x15180
c000c754:	55                   	push   ebp
c000c755:	57                   	push   edi
c000c756:	e8 25 30 01 00       	call   c001f780 <__udivdi3>
c000c75b:	83 c4 10             	add    esp,0x10
c000c75e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c764:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c768:	6a 00                	push   0x0
c000c76a:	68 80 51 01 00       	push   0x15180
c000c76f:	55                   	push   ebp
c000c770:	57                   	push   edi
c000c771:	bf 10 0e 00 00       	mov    edi,0xe10
c000c776:	e8 05 31 01 00       	call   c001f880 <__umoddi3>
c000c77b:	83 c4 10             	add    esp,0x10
c000c77e:	99                   	cdq    
c000c77f:	f7 ff                	idiv   edi
c000c781:	bf 3c 00 00 00       	mov    edi,0x3c
c000c786:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c789:	89 d0                	mov    eax,edx
c000c78b:	99                   	cdq    
c000c78c:	f7 ff                	idiv   edi
c000c78e:	85 db                	test   ebx,ebx
c000c790:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c793:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c796:	79 11                	jns    c000c7a9 <secondsToDatetime(unsigned long long)+0x6f>
c000c798:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c79c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c7a2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7a7:	eb 07                	jmp    c000c7b0 <secondsToDatetime(unsigned long long)+0x76>
c000c7a9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7ae:	89 d8                	mov    eax,ebx
c000c7b0:	bf b4 05 00 00       	mov    edi,0x5b4
c000c7b5:	99                   	cdq    
c000c7b6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c7bb:	f7 f9                	idiv   ecx
c000c7bd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c7c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c6:	31 d2                	xor    edx,edx
c000c7c8:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c7d0:	01 c3                	add    ebx,eax
c000c7d2:	89 d8                	mov    eax,ebx
c000c7d4:	f7 f1                	div    ecx
c000c7d6:	31 d2                	xor    edx,edx
c000c7d8:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c7db:	89 d8                	mov    eax,ebx
c000c7dd:	f7 f7                	div    edi
c000c7df:	31 d2                	xor    edx,edx
c000c7e1:	29 c1                	sub    ecx,eax
c000c7e3:	89 d8                	mov    eax,ebx
c000c7e5:	f7 f5                	div    ebp
c000c7e7:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c7ec:	29 c1                	sub    ecx,eax
c000c7ee:	31 d2                	xor    edx,edx
c000c7f0:	89 c8                	mov    eax,ecx
c000c7f2:	f7 f5                	div    ebp
c000c7f4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c7f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7fd:	31 d2                	xor    edx,edx
c000c7ff:	89 c8                	mov    eax,ecx
c000c801:	f7 f5                	div    ebp
c000c803:	31 d2                	xor    edx,edx
c000c805:	01 c3                	add    ebx,eax
c000c807:	89 c8                	mov    eax,ecx
c000c809:	f7 f7                	div    edi
c000c80b:	bf 99 00 00 00       	mov    edi,0x99
c000c810:	29 c3                	sub    ebx,eax
c000c812:	31 d2                	xor    edx,edx
c000c814:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c81c:	29 c3                	sub    ebx,eax
c000c81e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c821:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c824:	bb 05 00 00 00       	mov    ebx,0x5
c000c829:	83 c1 02             	add    ecx,0x2
c000c82c:	89 c8                	mov    eax,ecx
c000c82e:	f7 f7                	div    edi
c000c830:	31 d2                	xor    edx,edx
c000c832:	89 c7                	mov    edi,eax
c000c834:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c83a:	83 c0 02             	add    eax,0x2
c000c83d:	f7 f3                	div    ebx
c000c83f:	89 eb                	mov    ebx,ebp
c000c841:	29 c3                	sub    ebx,eax
c000c843:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c849:	88 1e                	mov    BYTE PTR [esi],bl
c000c84b:	19 c0                	sbb    eax,eax
c000c84d:	31 d2                	xor    edx,edx
c000c84f:	83 e0 0c             	and    eax,0xc
c000c852:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c856:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c85e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c862:	83 f9 01             	cmp    ecx,0x1
c000c865:	0f 96 c2             	setbe  dl
c000c868:	41                   	inc    ecx
c000c869:	01 d0                	add    eax,edx
c000c86b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c86e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c872:	83 c4 1c             	add    esp,0x1c
c000c875:	89 f0                	mov    eax,esi
c000c877:	5b                   	pop    ebx
c000c878:	5e                   	pop    esi
c000c879:	5f                   	pop    edi
c000c87a:	5d                   	pop    ebp
c000c87b:	c2 04 00             	ret    0x4

c000c87e <Clock::timeInDatetimeLocal()>:
c000c87e:	53                   	push   ebx
c000c87f:	83 ec 14             	sub    esp,0x14
c000c882:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c886:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c88a:	e8 8b fc ff ff       	call   c000c51a <Clock::timeInSecondsLocal()>
c000c88f:	83 c4 0c             	add    esp,0xc
c000c892:	52                   	push   edx
c000c893:	50                   	push   eax
c000c894:	53                   	push   ebx
c000c895:	e8 a0 fe ff ff       	call   c000c73a <secondsToDatetime(unsigned long long)>
c000c89a:	89 d8                	mov    eax,ebx
c000c89c:	83 c4 14             	add    esp,0x14
c000c89f:	5b                   	pop    ebx
c000c8a0:	c2 04 00             	ret    0x4
c000c8a3:	90                   	nop

c000c8a4 <Device::hibernate()>:
c000c8a4:	c3                   	ret    
c000c8a5:	90                   	nop

c000c8a6 <Device::wake()>:
c000c8a6:	c3                   	ret    
c000c8a7:	90                   	nop

c000c8a8 <Device::detect()>:
c000c8a8:	c3                   	ret    
c000c8a9:	90                   	nop

c000c8aa <Device::disableLegacy()>:
c000c8aa:	c3                   	ret    
c000c8ab:	90                   	nop

c000c8ac <Device::powerSaving(PowerSavingLevel)>:
c000c8ac:	c3                   	ret    
c000c8ad:	90                   	nop

c000c8ae <DriverlessDevice::close(int, int, void*)>:
c000c8ae:	31 c0                	xor    eax,eax
c000c8b0:	c3                   	ret    
c000c8b1:	90                   	nop

c000c8b2 <DriverlessDevice::detect()>:
c000c8b2:	c3                   	ret    
c000c8b3:	90                   	nop

c000c8b4 <DriverlessDevice::open(int, int, void*)>:
c000c8b4:	83 ec 18             	sub    esp,0x18
c000c8b7:	68 f0 1a 02 c0       	push   0xc0021af0
c000c8bc:	e8 5e 4d 00 00       	call   c001161f <KePanic(char const*)>
c000c8c1:	83 c8 ff             	or     eax,0xffffffff
c000c8c4:	83 c4 1c             	add    esp,0x1c
c000c8c7:	c3                   	ret    

c000c8c8 <Device::~Device()>:
c000c8c8:	ba 50 1b 02 c0       	mov    edx,0xc0021b50
c000c8cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8d1:	89 10                	mov    DWORD PTR [eax],edx
c000c8d3:	90                   	nop
c000c8d4:	c3                   	ret    
c000c8d5:	90                   	nop

c000c8d6 <Device::~Device()>:
c000c8d6:	83 ec 0c             	sub    esp,0xc
c000c8d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c8dd:	e8 e6 ff ff ff       	call   c000c8c8 <Device::~Device()>
c000c8e2:	83 c4 04             	add    esp,0x4
c000c8e5:	83 ec 08             	sub    esp,0x8
c000c8e8:	68 58 01 00 00       	push   0x158
c000c8ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f1:	e8 22 df ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c8f6:	83 c4 10             	add    esp,0x10
c000c8f9:	83 c4 0c             	add    esp,0xc
c000c8fc:	c3                   	ret    
c000c8fd:	90                   	nop

c000c8fe <Device::findAndLoadDriver()>:
c000c8fe:	c7 44 24 04 0e 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b0e
c000c906:	e9 3a e0 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c90b:	90                   	nop

c000c90c <Device::preOpenPCI(PCIDeviceInfo)>:
c000c90c:	57                   	push   edi
c000c90d:	b9 09 00 00 00       	mov    ecx,0x9
c000c912:	56                   	push   esi
c000c913:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c917:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c91b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c925:	81 c7 18 01 00 00    	add    edi,0x118
c000c92b:	fc                   	cld    
c000c92c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c92e:	5e                   	pop    esi
c000c92f:	5f                   	pop    edi
c000c930:	c3                   	ret    
c000c931:	90                   	nop

c000c932 <Device::preOpenACPI(void*, char*, char*)>:
c000c932:	57                   	push   edi
c000c933:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c938:	56                   	push   esi
c000c939:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c93d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c941:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c94b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c951:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c957:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c95b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c95d:	b9 0e 00 00 00       	mov    ecx,0xe
c000c962:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c968:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c96c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c96e:	5e                   	pop    esi
c000c96f:	5f                   	pop    edi
c000c970:	c3                   	ret    
c000c971:	90                   	nop

c000c972 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c972:	53                   	push   ebx
c000c973:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c977:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c97b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c97f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c983:	0f b6 c0             	movzx  eax,al
c000c986:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c98a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c98e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c992:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c996:	5b                   	pop    ebx
c000c997:	e9 a8 05 00 00       	jmp    c000cf44 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c99c <Device::getParent()>:
c000c99c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9a0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c9a6:	c3                   	ret    
c000c9a7:	90                   	nop

c000c9a8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c9a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9b0:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c9b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9b9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9c1:	e9 e6 06 00 00       	jmp    c000d0ac <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c9c6 <Device::addChild(Device*)>:
c000c9c6:	53                   	push   ebx
c000c9c7:	83 ec 08             	sub    esp,0x8
c000c9ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9d2:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c9d8:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c9de:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c9e0:	85 d2                	test   edx,edx
c000c9e2:	74 04                	je     c000c9e8 <Device::addChild(Device*)+0x22>
c000c9e4:	89 d3                	mov    ebx,edx
c000c9e6:	eb f6                	jmp    c000c9de <Device::addChild(Device*)+0x18>
c000c9e8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c9eb:	83 ec 0c             	sub    esp,0xc
c000c9ee:	6a 08                	push   0x8
c000c9f0:	e8 c1 b0 ff ff       	call   c0007ab6 <malloc>
c000c9f5:	89 03                	mov    DWORD PTR [ebx],eax
c000c9f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c9fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	5b                   	pop    ebx
c000ca08:	c3                   	ret    
c000ca09:	90                   	nop

c000ca0a <Device::removeAllChildren()>:
c000ca0a:	56                   	push   esi
c000ca0b:	53                   	push   ebx
c000ca0c:	52                   	push   edx
c000ca0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca11:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ca17:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca1a:	74 17                	je     c000ca33 <Device::removeAllChildren()+0x29>
c000ca1c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca1f:	85 c0                	test   eax,eax
c000ca21:	74 0c                	je     c000ca2f <Device::removeAllChildren()+0x25>
c000ca23:	83 ec 0c             	sub    esp,0xc
c000ca26:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca28:	50                   	push   eax
c000ca29:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ca2c:	83 c4 10             	add    esp,0x10
c000ca2f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca31:	eb e4                	jmp    c000ca17 <Device::removeAllChildren()+0xd>
c000ca33:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca39:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca3f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca45:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca4c:	58                   	pop    eax
c000ca4d:	5b                   	pop    ebx
c000ca4e:	5e                   	pop    esi
c000ca4f:	c3                   	ret    

c000ca50 <Device::hibernateAll()>:
c000ca50:	53                   	push   ebx
c000ca51:	83 ec 14             	sub    esp,0x14
c000ca54:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca58:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca5a:	53                   	push   ebx
c000ca5b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ca5e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca64:	83 c4 10             	add    esp,0x10
c000ca67:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca6a:	74 0f                	je     c000ca7b <Device::hibernateAll()+0x2b>
c000ca6c:	83 ec 0c             	sub    esp,0xc
c000ca6f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca72:	e8 d9 ff ff ff       	call   c000ca50 <Device::hibernateAll()>
c000ca77:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca79:	eb e9                	jmp    c000ca64 <Device::hibernateAll()+0x14>
c000ca7b:	83 c4 08             	add    esp,0x8
c000ca7e:	5b                   	pop    ebx
c000ca7f:	c3                   	ret    

c000ca80 <Device::wakeAll()>:
c000ca80:	53                   	push   ebx
c000ca81:	83 ec 14             	sub    esp,0x14
c000ca84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca88:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca8a:	53                   	push   ebx
c000ca8b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ca8e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca94:	83 c4 10             	add    esp,0x10
c000ca97:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca9a:	74 0f                	je     c000caab <Device::wakeAll()+0x2b>
c000ca9c:	83 ec 0c             	sub    esp,0xc
c000ca9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000caa2:	e8 d9 ff ff ff       	call   c000ca80 <Device::wakeAll()>
c000caa7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caa9:	eb e9                	jmp    c000ca94 <Device::wakeAll()+0x14>
c000caab:	83 c4 08             	add    esp,0x8
c000caae:	5b                   	pop    ebx
c000caaf:	c3                   	ret    

c000cab0 <Device::detectAll()>:
c000cab0:	53                   	push   ebx
c000cab1:	83 ec 14             	sub    esp,0x14
c000cab4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cab8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caba:	53                   	push   ebx
c000cabb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000cabe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cac4:	83 c4 10             	add    esp,0x10
c000cac7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000caca:	74 0f                	je     c000cadb <Device::detectAll()+0x2b>
c000cacc:	83 ec 0c             	sub    esp,0xc
c000cacf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cad2:	e8 d9 ff ff ff       	call   c000cab0 <Device::detectAll()>
c000cad7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cad9:	eb e9                	jmp    c000cac4 <Device::detectAll()+0x14>
c000cadb:	83 c4 08             	add    esp,0x8
c000cade:	5b                   	pop    ebx
c000cadf:	c3                   	ret    

c000cae0 <Device::disableLegacyAll()>:
c000cae0:	c3                   	ret    
c000cae1:	90                   	nop

c000cae2 <Device::loadDriversForAll()>:
c000cae2:	c3                   	ret    
c000cae3:	90                   	nop

c000cae4 <Device::closeAll()>:
c000cae4:	53                   	push   ebx
c000cae5:	83 ec 08             	sub    esp,0x8
c000cae8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000caec:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caee:	6a 00                	push   0x0
c000caf0:	6a 00                	push   0x0
c000caf2:	6a 00                	push   0x0
c000caf4:	53                   	push   ebx
c000caf5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000caf8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cafe:	83 c4 10             	add    esp,0x10
c000cb01:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb04:	74 0f                	je     c000cb15 <Device::closeAll()+0x31>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb0c:	e8 d3 ff ff ff       	call   c000cae4 <Device::closeAll()>
c000cb11:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb13:	eb e9                	jmp    c000cafe <Device::closeAll()+0x1a>
c000cb15:	83 c4 08             	add    esp,0x8
c000cb18:	5b                   	pop    ebx
c000cb19:	c3                   	ret    

c000cb1a <Device::powerSavingAll(PowerSavingLevel)>:
c000cb1a:	56                   	push   esi
c000cb1b:	53                   	push   ebx
c000cb1c:	83 ec 0c             	sub    esp,0xc
c000cb1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cb27:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb29:	56                   	push   esi
c000cb2a:	53                   	push   ebx
c000cb2b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cb2e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb34:	83 c4 10             	add    esp,0x10
c000cb37:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb3a:	74 0f                	je     c000cb4b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cb3c:	52                   	push   edx
c000cb3d:	52                   	push   edx
c000cb3e:	56                   	push   esi
c000cb3f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb42:	e8 d3 ff ff ff       	call   c000cb1a <Device::powerSavingAll(PowerSavingLevel)>
c000cb47:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb49:	eb e9                	jmp    c000cb34 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cb4b:	58                   	pop    eax
c000cb4c:	5b                   	pop    ebx
c000cb4d:	5e                   	pop    esi
c000cb4e:	c3                   	ret    
c000cb4f:	90                   	nop

c000cb50 <Device::setName(char const*)>:
c000cb50:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cb58:	e9 e3 3a ff ff       	jmp    c0000640 <strcpy>
c000cb5d:	90                   	nop

c000cb5e <Device::Device(char const*)>:
c000cb5e:	83 ec 1c             	sub    esp,0x1c
c000cb61:	ba 50 1b 02 c0       	mov    edx,0xc0021b50
c000cb66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb6a:	89 10                	mov    DWORD PTR [eax],edx
c000cb6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb70:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cb7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb7e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cb88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb8c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cb96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb9a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cba4:	83 ec 08             	sub    esp,0x8
c000cba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbaf:	e8 9c ff ff ff       	call   c000cb50 <Device::setName(char const*)>
c000cbb4:	83 c4 10             	add    esp,0x10
c000cbb7:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cbbf:	83 ec 0c             	sub    esp,0xc
c000cbc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbc6:	e8 eb ae ff ff       	call   c0007ab6 <malloc>
c000cbcb:	83 c4 10             	add    esp,0x10
c000cbce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cbd4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cbdb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cbdf:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cbe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbe9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cbef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cbf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbf9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cbff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc0a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cc11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc15:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cc1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc20:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc2e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc3c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc4a:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cc54:	90                   	nop
c000cc55:	83 c4 1c             	add    esp,0x1c
c000cc58:	c3                   	ret    
c000cc59:	90                   	nop

c000cc5a <Device::getName()>:
c000cc5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc5e:	05 d0 00 00 00       	add    eax,0xd0
c000cc63:	c3                   	ret    

c000cc64 <DriverlessDevice::DriverlessDevice(char const*)>:
c000cc64:	83 ec 0c             	sub    esp,0xc
c000cc67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc6b:	83 ec 08             	sub    esp,0x8
c000cc6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc72:	50                   	push   eax
c000cc73:	e8 e6 fe ff ff       	call   c000cb5e <Device::Device(char const*)>
c000cc78:	83 c4 10             	add    esp,0x10
c000cc7b:	ba 7c 1b 02 c0       	mov    edx,0xc0021b7c
c000cc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc84:	89 10                	mov    DWORD PTR [eax],edx
c000cc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc8a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cc94:	90                   	nop
c000cc95:	83 c4 0c             	add    esp,0xc
c000cc98:	c3                   	ret    
c000cc99:	90                   	nop

c000cc9a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cc9a:	57                   	push   edi
c000cc9b:	56                   	push   esi
c000cc9c:	53                   	push   ebx
c000cc9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cca1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cca5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cca9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ccaf:	75 0c                	jne    c000ccbd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ccb1:	52                   	push   edx
c000ccb2:	52                   	push   edx
c000ccb3:	53                   	push   ebx
c000ccb4:	56                   	push   esi
c000ccb5:	e8 78 2f 01 00       	call   c001fc32 <LinkedList<Device>::addElement(Device*)>
c000ccba:	83 c4 10             	add    esp,0x10
c000ccbd:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ccc3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ccc6:	74 12                	je     c000ccda <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ccc8:	50                   	push   eax
c000ccc9:	57                   	push   edi
c000ccca:	56                   	push   esi
c000cccb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ccce:	e8 c7 ff ff ff       	call   c000cc9a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ccd3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ccd5:	83 c4 10             	add    esp,0x10
c000ccd8:	eb e9                	jmp    c000ccc3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ccda:	5b                   	pop    ebx
c000ccdb:	5e                   	pop    esi
c000ccdc:	5f                   	pop    edi
c000ccdd:	c3                   	ret    

c000ccde <getDevicesOfType(DeviceType)>:
c000ccde:	53                   	push   ebx
c000ccdf:	83 ec 14             	sub    esp,0x14
c000cce2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cce6:	53                   	push   ebx
c000cce7:	e8 22 30 01 00       	call   c001fd0e <LinkedList<Device>::LinkedList()>
c000ccec:	83 c4 0c             	add    esp,0xc
c000ccef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ccf3:	53                   	push   ebx
c000ccf4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000ccfa:	e8 9b ff ff ff       	call   c000cc9a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ccff:	89 d8                	mov    eax,ebx
c000cd01:	83 c4 18             	add    esp,0x18
c000cd04:	5b                   	pop    ebx
c000cd05:	c2 04 00             	ret    0x4

c000cd08 <HardDiskController::HardDiskController(char const*)>:
c000cd08:	83 ec 0c             	sub    esp,0xc
c000cd0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd0f:	83 ec 08             	sub    esp,0x8
c000cd12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd16:	50                   	push   eax
c000cd17:	e8 42 fe ff ff       	call   c000cb5e <Device::Device(char const*)>
c000cd1c:	83 c4 10             	add    esp,0x10
c000cd1f:	ba a8 1b 02 c0       	mov    edx,0xc0021ba8
c000cd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd28:	89 10                	mov    DWORD PTR [eax],edx
c000cd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd2e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cd38:	90                   	nop
c000cd39:	83 c4 0c             	add    esp,0xc
c000cd3c:	c3                   	ret    
c000cd3d:	90                   	nop
c000cd3e:	66 90                	xchg   ax,ax

c000cd40 <HardDiskController::~HardDiskController()>:
c000cd40:	83 ec 0c             	sub    esp,0xc
c000cd43:	ba a8 1b 02 c0       	mov    edx,0xc0021ba8
c000cd48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd4c:	89 10                	mov    DWORD PTR [eax],edx
c000cd4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd52:	83 ec 0c             	sub    esp,0xc
c000cd55:	50                   	push   eax
c000cd56:	e8 6d fb ff ff       	call   c000c8c8 <Device::~Device()>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	90                   	nop
c000cd5f:	83 c4 0c             	add    esp,0xc
c000cd62:	c3                   	ret    
c000cd63:	90                   	nop

c000cd64 <HardDiskController::~HardDiskController()>:
c000cd64:	83 ec 0c             	sub    esp,0xc
c000cd67:	83 ec 0c             	sub    esp,0xc
c000cd6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd6e:	e8 cd ff ff ff       	call   c000cd40 <HardDiskController::~HardDiskController()>
c000cd73:	83 c4 10             	add    esp,0x10
c000cd76:	83 ec 08             	sub    esp,0x8
c000cd79:	68 58 01 00 00       	push   0x158
c000cd7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd82:	e8 91 da ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cd87:	83 c4 10             	add    esp,0x10
c000cd8a:	83 c4 0c             	add    esp,0xc
c000cd8d:	c3                   	ret    

c000cd8e <PhysicalDisk::eject()>:
c000cd8e:	83 c8 ff             	or     eax,0xffffffff
c000cd91:	c3                   	ret    

c000cd92 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cd92:	83 ec 0c             	sub    esp,0xc
c000cd95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd99:	83 ec 08             	sub    esp,0x8
c000cd9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda0:	50                   	push   eax
c000cda1:	e8 b8 fd ff ff       	call   c000cb5e <Device::Device(char const*)>
c000cda6:	83 c4 10             	add    esp,0x10
c000cda9:	ba d4 1b 02 c0       	mov    edx,0xc0021bd4
c000cdae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdb2:	89 10                	mov    DWORD PTR [eax],edx
c000cdb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdb8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cdbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cdca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdce:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cdd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cddc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cde0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cde6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdea:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cdf4:	90                   	nop
c000cdf5:	83 c4 0c             	add    esp,0xc
c000cdf8:	c3                   	ret    
c000cdf9:	90                   	nop

c000cdfa <PhysicalDisk::startCache()>:
c000cdfa:	56                   	push   esi
c000cdfb:	53                   	push   ebx
c000cdfc:	83 ec 10             	sub    esp,0x10
c000cdff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ce03:	6a 44                	push   0x44
c000ce05:	e8 ac ac ff ff       	call   c0007ab6 <malloc>
c000ce0a:	89 c6                	mov    esi,eax
c000ce0c:	58                   	pop    eax
c000ce0d:	5a                   	pop    edx
c000ce0e:	53                   	push   ebx
c000ce0f:	56                   	push   esi
c000ce10:	e8 7b 17 00 00       	call   c000e590 <VCache::VCache(PhysicalDisk*)>
c000ce15:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce1b:	83 c4 14             	add    esp,0x14
c000ce1e:	5b                   	pop    ebx
c000ce1f:	5e                   	pop    esi
c000ce20:	c3                   	ret    
c000ce21:	90                   	nop

c000ce22 <PhysicalDisk::~PhysicalDisk()>:
c000ce22:	83 ec 0c             	sub    esp,0xc
c000ce25:	ba d4 1b 02 c0       	mov    edx,0xc0021bd4
c000ce2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce2e:	89 10                	mov    DWORD PTR [eax],edx
c000ce30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce34:	83 ec 0c             	sub    esp,0xc
c000ce37:	50                   	push   eax
c000ce38:	e8 8b fa ff ff       	call   c000c8c8 <Device::~Device()>
c000ce3d:	83 c4 10             	add    esp,0x10
c000ce40:	90                   	nop
c000ce41:	83 c4 0c             	add    esp,0xc
c000ce44:	c3                   	ret    
c000ce45:	90                   	nop

c000ce46 <PhysicalDisk::~PhysicalDisk()>:
c000ce46:	83 ec 0c             	sub    esp,0xc
c000ce49:	83 ec 0c             	sub    esp,0xc
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	e8 cd ff ff ff       	call   c000ce22 <PhysicalDisk::~PhysicalDisk()>
c000ce55:	83 c4 10             	add    esp,0x10
c000ce58:	83 ec 08             	sub    esp,0x8
c000ce5b:	68 6c 01 00 00       	push   0x16c
c000ce60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce64:	e8 af d9 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	83 c4 0c             	add    esp,0xc
c000ce6f:	c3                   	ret    

c000ce70 <int_handler>:
c000ce70:	55                   	push   ebp
c000ce71:	57                   	push   edi
c000ce72:	56                   	push   esi
c000ce73:	53                   	push   ebx
c000ce74:	83 ec 0c             	sub    esp,0xc
c000ce77:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ce7b:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce82:	74 0b                	je     c000ce8f <int_handler+0x1f>
c000ce84:	fa                   	cli    
c000ce85:	f4                   	hlt    
c000ce86:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce8d:	75 f5                	jne    c000ce84 <int_handler+0x14>
c000ce8f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000ce92:	8d 46 e0             	lea    eax,[esi-0x20]
c000ce95:	83 f8 17             	cmp    eax,0x17
c000ce98:	76 40                	jbe    c000ceda <int_handler+0x6a>
c000ce9a:	c1 e6 04             	shl    esi,0x4
c000ce9d:	31 db                	xor    ebx,ebx
c000ce9f:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000cea5:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000ceab:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ceaf:	85 c0                	test   eax,eax
c000ceb1:	74 13                	je     c000cec6 <int_handler+0x56>
c000ceb3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000ceb6:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000ceba:	74 2c                	je     c000cee8 <int_handler+0x78>
c000cebc:	83 ec 08             	sub    esp,0x8
c000cebf:	52                   	push   edx
c000cec0:	57                   	push   edi
c000cec1:	ff d0                	call   eax
c000cec3:	83 c4 10             	add    esp,0x10
c000cec6:	83 c3 01             	add    ebx,0x1
c000cec9:	83 fb 04             	cmp    ebx,0x4
c000cecc:	75 dd                	jne    c000ceab <int_handler+0x3b>
c000cece:	83 c4 0c             	add    esp,0xc
c000ced1:	31 c0                	xor    eax,eax
c000ced3:	5b                   	pop    ebx
c000ced4:	31 d2                	xor    edx,edx
c000ced6:	5e                   	pop    esi
c000ced7:	5f                   	pop    edi
c000ced8:	5d                   	pop    ebp
c000ced9:	c3                   	ret    
c000ceda:	83 ec 0c             	sub    esp,0xc
c000cedd:	50                   	push   eax
c000cede:	e8 e9 b4 00 00       	call   c00183cc <HalEndOfInterrupt(int)>
c000cee3:	83 c4 10             	add    esp,0x10
c000cee6:	eb b2                	jmp    c000ce9a <int_handler+0x2a>
c000cee8:	83 ec 08             	sub    esp,0x8
c000ceeb:	52                   	push   edx
c000ceec:	57                   	push   edi
c000ceed:	ff d0                	call   eax
c000ceef:	83 c4 10             	add    esp,0x10
c000cef2:	83 c4 0c             	add    esp,0xc
c000cef5:	5b                   	pop    ebx
c000cef6:	5e                   	pop    esi
c000cef7:	5f                   	pop    edi
c000cef8:	5d                   	pop    ebp
c000cef9:	c3                   	ret    

c000cefa <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cefa:	56                   	push   esi
c000cefb:	31 c0                	xor    eax,eax
c000cefd:	53                   	push   ebx
c000cefe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf06:	89 ca                	mov    edx,ecx
c000cf08:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf0c:	c1 e2 04             	shl    edx,0x4
c000cf0f:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cf17:	74 17                	je     c000cf30 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf19:	83 c0 01             	add    eax,0x1
c000cf1c:	83 f8 04             	cmp    eax,0x4
c000cf1f:	75 ee                	jne    c000cf0f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cf21:	c7 44 24 0c 04 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021c04
c000cf29:	5b                   	pop    ebx
c000cf2a:	5e                   	pop    esi
c000cf2b:	e9 ef 46 00 00       	jmp    c001161f <KePanic(char const*)>
c000cf30:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cf33:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cf3a:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cf41:	5b                   	pop    ebx
c000cf42:	5e                   	pop    esi
c000cf43:	c3                   	ret    

c000cf44 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cf44:	57                   	push   edi
c000cf45:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cf4b:	56                   	push   esi
c000cf4c:	53                   	push   ebx
c000cf4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cf51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cf55:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf5c:	74 54                	je     c000cfb2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cf5e:	89 c7                	mov    edi,eax
c000cf60:	84 c0                	test   al,al
c000cf62:	74 1d                	je     c000cf81 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cf64:	83 fe 0f             	cmp    esi,0xf
c000cf67:	0f 8f d5 00 00 00    	jg     c000d042 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cf6d:	0f b6 b6 28 37 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc8d8]
c000cf74:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cf7c:	d1 ef                	shr    edi,1
c000cf7e:	83 e7 01             	and    edi,0x1
c000cf81:	83 ec 08             	sub    esp,0x8
c000cf84:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf89:	31 db                	xor    ebx,ebx
c000cf8b:	50                   	push   eax
c000cf8c:	68 11 1c 02 c0       	push   0xc0021c11
c000cf91:	e8 af d9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cf96:	83 c4 10             	add    esp,0x10
c000cf99:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf9e:	85 c0                	test   eax,eax
c000cfa0:	7f 55                	jg     c000cff7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cfa2:	83 ec 0c             	sub    esp,0xc
c000cfa5:	68 28 1c 02 c0       	push   0xc0021c28
c000cfaa:	e8 70 46 00 00       	call   c001161f <KePanic(char const*)>
c000cfaf:	83 c4 10             	add    esp,0x10
c000cfb2:	8d 7e 20             	lea    edi,[esi+0x20]
c000cfb5:	89 f8                	mov    eax,edi
c000cfb7:	31 d2                	xor    edx,edx
c000cfb9:	c1 e0 04             	shl    eax,0x4
c000cfbc:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000cfc3:	85 c9                	test   ecx,ecx
c000cfc5:	0f 84 8e 00 00 00    	je     c000d059 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cfcb:	83 c2 01             	add    edx,0x1
c000cfce:	83 fa 04             	cmp    edx,0x4
c000cfd1:	75 e9                	jne    c000cfbc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cfd3:	83 ec 0c             	sub    esp,0xc
c000cfd6:	68 7c 1c 02 c0       	push   0xc0021c7c
c000cfdb:	e8 3f 46 00 00       	call   c001161f <KePanic(char const*)>
c000cfe0:	83 c4 10             	add    esp,0x10
c000cfe3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cfe8:	5b                   	pop    ebx
c000cfe9:	5e                   	pop    esi
c000cfea:	5f                   	pop    edi
c000cfeb:	c3                   	ret    
c000cfec:	83 c3 01             	add    ebx,0x1
c000cfef:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000cff5:	7e ab                	jle    c000cfa2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000cff7:	83 ec 08             	sub    esp,0x8
c000cffa:	8b 04 9d e0 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f20]
c000d001:	56                   	push   esi
c000d002:	50                   	push   eax
c000d003:	e8 4e 1b 01 00       	call   c001eb56 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d008:	83 c4 10             	add    esp,0x10
c000d00b:	84 c0                	test   al,al
c000d00d:	74 dd                	je     c000cfec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000d00f:	83 ec 04             	sub    esp,0x4
c000d012:	89 f8                	mov    eax,edi
c000d014:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d01b:	0f b6 f8             	movzx  edi,al
c000d01e:	57                   	push   edi
c000d01f:	8d 7e 20             	lea    edi,[esi+0x20]
c000d022:	6a 00                	push   0x0
c000d024:	89 f8                	mov    eax,edi
c000d026:	0f b6 c0             	movzx  eax,al
c000d029:	50                   	push   eax
c000d02a:	89 f0                	mov    eax,esi
c000d02c:	6a 00                	push   0x0
c000d02e:	0f b6 c0             	movzx  eax,al
c000d031:	6a 00                	push   0x0
c000d033:	50                   	push   eax
c000d034:	53                   	push   ebx
c000d035:	e8 88 1c 01 00       	call   c001ecc2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d03a:	83 c4 20             	add    esp,0x20
c000d03d:	e9 73 ff ff ff       	jmp    c000cfb5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	31 ff                	xor    edi,edi
c000d047:	68 44 1c 02 c0       	push   0xc0021c44
c000d04c:	e8 ce 45 00 00       	call   c001161f <KePanic(char const*)>
c000d051:	83 c4 10             	add    esp,0x10
c000d054:	e9 28 ff ff ff       	jmp    c000cf81 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000d059:	8d 04 ba             	lea    eax,[edx+edi*4]
c000d05c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d060:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d067:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d06b:	5b                   	pop    ebx
c000d06c:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d073:	89 f0                	mov    eax,esi
c000d075:	5e                   	pop    esi
c000d076:	5f                   	pop    edi
c000d077:	c3                   	ret    

c000d078 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d07c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d080:	c1 e0 04             	shl    eax,0x4
c000d083:	8d 50 10             	lea    edx,[eax+0x10]
c000d086:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d08c:	74 08                	je     c000d096 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d08e:	83 c0 04             	add    eax,0x4
c000d091:	39 d0                	cmp    eax,edx
c000d093:	75 f1                	jne    c000d086 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d095:	c3                   	ret    
c000d096:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0a0:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0aa:	eb e2                	jmp    c000d08e <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d0ac <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d0ac:	53                   	push   ebx
c000d0ad:	83 ec 08             	sub    esp,0x8
c000d0b0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d0b4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d0b9:	74 0e                	je     c000d0c9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d0bb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d0c0:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d0c7:	75 37                	jne    c000d100 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000d0c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0cd:	83 c0 20             	add    eax,0x20
c000d0d0:	c1 e0 04             	shl    eax,0x4
c000d0d3:	8d 50 10             	lea    edx,[eax+0x10]
c000d0d6:	39 98 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ebx
c000d0dc:	74 0c                	je     c000d0ea <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000d0de:	83 c0 04             	add    eax,0x4
c000d0e1:	39 d0                	cmp    eax,edx
c000d0e3:	75 f1                	jne    c000d0d6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000d0e5:	83 c4 08             	add    esp,0x8
c000d0e8:	5b                   	pop    ebx
c000d0e9:	c3                   	ret    
c000d0ea:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0f4:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0fe:	eb de                	jmp    c000d0de <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000d100:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000d105:	7f 11                	jg     c000d118 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000d107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d10b:	0f b6 80 28 37 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc8d8]
c000d112:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d116:	eb b1                	jmp    c000d0c9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d118:	83 ec 0c             	sub    esp,0xc
c000d11b:	68 35 1c 02 c0       	push   0xc0021c35
c000d120:	e8 fa 44 00 00       	call   c001161f <KePanic(char const*)>
c000d125:	83 c4 10             	add    esp,0x10
c000d128:	eb 9f                	jmp    c000d0c9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000d12a <setupINTS()>:
c000d12a:	31 c0                	xor    eax,eax
c000d12c:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d136:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d140:	c7 80 24 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bdc],0x0
c000d14a:	c7 80 24 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bdc],0x0
c000d154:	c7 80 28 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd8],0x0
c000d15e:	c7 80 28 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd8],0x0
c000d168:	c7 80 2c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd4],0x0
c000d172:	c7 80 2c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd4],0x0
c000d17c:	83 c0 10             	add    eax,0x10
c000d17f:	3d 00 10 00 00       	cmp    eax,0x1000
c000d184:	75 a6                	jne    c000d12c <setupINTS()+0x2>
c000d186:	c3                   	ret    

c000d187 <convertLegacyIRQNumber(int)>:
c000d187:	83 ec 0c             	sub    esp,0xc
c000d18a:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d194:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d19b:	74 0c                	je     c000d1a9 <convertLegacyIRQNumber(int)+0x22>
c000d19d:	83 f8 0f             	cmp    eax,0xf
c000d1a0:	7f 0b                	jg     c000d1ad <convertLegacyIRQNumber(int)+0x26>
c000d1a2:	0f b6 80 28 37 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc8d8]
c000d1a9:	83 c4 0c             	add    esp,0xc
c000d1ac:	c3                   	ret    
c000d1ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1b1:	83 ec 0c             	sub    esp,0xc
c000d1b4:	68 44 1c 02 c0       	push   0xc0021c44
c000d1b9:	e8 61 44 00 00       	call   c001161f <KePanic(char const*)>
c000d1be:	83 c4 10             	add    esp,0x10
c000d1c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1c5:	83 c4 0c             	add    esp,0xc
c000d1c8:	c3                   	ret    
c000d1c9:	90                   	nop

c000d1ca <startGUI(void*)>:
c000d1ca:	55                   	push   ebp
c000d1cb:	89 e5                	mov    ebp,esp
c000d1cd:	53                   	push   ebx
c000d1ce:	83 ec 04             	sub    esp,0x4
c000d1d1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1d6:	83 e8 01             	sub    eax,0x1
c000d1d9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d1de:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1e3:	85 c0                	test   eax,eax
c000d1e5:	75 01                	jne    c000d1e8 <startGUI(void*)+0x1e>
c000d1e7:	fb                   	sti    
c000d1e8:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d1ee:	83 ec 08             	sub    esp,0x8
c000d1f1:	6a 01                	push   0x1
c000d1f3:	68 a1 1c 02 c0       	push   0xc0021ca1
c000d1f8:	e8 a8 84 00 00       	call   c00156a5 <Thr::loadDLL(char const*, bool)>
c000d1fd:	83 c4 10             	add    esp,0x10
c000d200:	83 ec 08             	sub    esp,0x8
c000d203:	53                   	push   ebx
c000d204:	50                   	push   eax
c000d205:	e8 cc 86 00 00       	call   c00158d6 <Thr::executeDLL(unsigned long, void*)>
c000d20a:	83 c4 10             	add    esp,0x10
c000d20d:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d213:	83 ec 08             	sub    esp,0x8
c000d216:	6a 01                	push   0x1
c000d218:	68 bb 1c 02 c0       	push   0xc0021cbb
c000d21d:	e8 83 84 00 00       	call   c00156a5 <Thr::loadDLL(char const*, bool)>
c000d222:	83 c4 10             	add    esp,0x10
c000d225:	83 ec 08             	sub    esp,0x8
c000d228:	53                   	push   ebx
c000d229:	50                   	push   eax
c000d22a:	e8 a7 86 00 00       	call   c00158d6 <Thr::executeDLL(unsigned long, void*)>
c000d22f:	83 c4 10             	add    esp,0x10
c000d232:	90                   	nop
c000d233:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d236:	c9                   	leave  
c000d237:	c3                   	ret    

c000d238 <startGUIVESA(void*)>:
c000d238:	55                   	push   ebp
c000d239:	89 e5                	mov    ebp,esp
c000d23b:	53                   	push   ebx
c000d23c:	83 ec 04             	sub    esp,0x4
c000d23f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d244:	83 e8 01             	sub    eax,0x1
c000d247:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d24c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d251:	85 c0                	test   eax,eax
c000d253:	75 01                	jne    c000d256 <startGUIVESA(void*)+0x1e>
c000d255:	fb                   	sti    
c000d256:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d25c:	83 ec 08             	sub    esp,0x8
c000d25f:	6a 01                	push   0x1
c000d261:	68 d9 1c 02 c0       	push   0xc0021cd9
c000d266:	e8 3a 84 00 00       	call   c00156a5 <Thr::loadDLL(char const*, bool)>
c000d26b:	83 c4 10             	add    esp,0x10
c000d26e:	83 ec 08             	sub    esp,0x8
c000d271:	53                   	push   ebx
c000d272:	50                   	push   eax
c000d273:	e8 5e 86 00 00       	call   c00158d6 <Thr::executeDLL(unsigned long, void*)>
c000d278:	83 c4 10             	add    esp,0x10
c000d27b:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d281:	83 ec 08             	sub    esp,0x8
c000d284:	6a 01                	push   0x1
c000d286:	68 bb 1c 02 c0       	push   0xc0021cbb
c000d28b:	e8 15 84 00 00       	call   c00156a5 <Thr::loadDLL(char const*, bool)>
c000d290:	83 c4 10             	add    esp,0x10
c000d293:	83 ec 08             	sub    esp,0x8
c000d296:	53                   	push   ebx
c000d297:	50                   	push   eax
c000d298:	e8 39 86 00 00       	call   c00158d6 <Thr::executeDLL(unsigned long, void*)>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	90                   	nop
c000d2a1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d2a4:	c9                   	leave  
c000d2a5:	c3                   	ret    

c000d2a6 <sendKeyToTerminal(unsigned char)>:
c000d2a6:	55                   	push   ebp
c000d2a7:	89 e5                	mov    ebp,esp
c000d2a9:	83 ec 28             	sub    esp,0x28
c000d2ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2af:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d2b2:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d2b7:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d2bb:	83 ec 08             	sub    esp,0x8
c000d2be:	52                   	push   edx
c000d2bf:	50                   	push   eax
c000d2c0:	e8 f1 ba ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000d2c5:	83 c4 10             	add    esp,0x10
c000d2c8:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2cc:	83 f8 0a             	cmp    eax,0xa
c000d2cf:	74 16                	je     c000d2e7 <sendKeyToTerminal(unsigned char)+0x41>
c000d2d1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2d5:	83 f8 03             	cmp    eax,0x3
c000d2d8:	74 0d                	je     c000d2e7 <sendKeyToTerminal(unsigned char)+0x41>
c000d2da:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2de:	83 f8 1c             	cmp    eax,0x1c
c000d2e1:	0f 85 97 00 00 00    	jne    c000d37e <sendKeyToTerminal(unsigned char)+0xd8>
c000d2e7:	fa                   	cli    
c000d2e8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2ed:	83 c0 01             	add    eax,0x1
c000d2f0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d2f5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d2fa:	83 c0 01             	add    eax,0x1
c000d2fd:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d302:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d307:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d30a:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d314:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d318:	74 1f                	je     c000d339 <sendKeyToTerminal(unsigned char)+0x93>
c000d31a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d31d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d320:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d323:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d326:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d329:	83 ec 0c             	sub    esp,0xc
c000d32c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d32f:	e8 e8 92 00 00       	call   c001661c <unblockTask(ThreadControlBlock*)>
c000d334:	83 c4 10             	add    esp,0x10
c000d337:	eb db                	jmp    c000d314 <sendKeyToTerminal(unsigned char)+0x6e>
c000d339:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d33e:	83 e8 01             	sub    eax,0x1
c000d341:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d346:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d34b:	85 c0                	test   eax,eax
c000d34d:	75 18                	jne    c000d367 <sendKeyToTerminal(unsigned char)+0xc1>
c000d34f:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d354:	85 c0                	test   eax,eax
c000d356:	74 0f                	je     c000d367 <sendKeyToTerminal(unsigned char)+0xc1>
c000d358:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d362:	e8 9d 8d 00 00       	call   c0016104 <schedule()>
c000d367:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d36c:	83 e8 01             	sub    eax,0x1
c000d36f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d374:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d379:	85 c0                	test   eax,eax
c000d37b:	75 01                	jne    c000d37e <sendKeyToTerminal(unsigned char)+0xd8>
c000d37d:	fb                   	sti    
c000d37e:	90                   	nop
c000d37f:	c9                   	leave  
c000d380:	c3                   	ret    

c000d381 <sendKeyboardToken(KeyboardToken)>:
c000d381:	55                   	push   ebp
c000d382:	89 e5                	mov    ebp,esp
c000d384:	83 ec 18             	sub    esp,0x18
c000d387:	e8 e3 42 00 00       	call   c001166f <KeUserIOReceived()>
c000d38c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d38f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d392:	0f b7 c0             	movzx  eax,ax
c000d395:	83 f2 01             	xor    edx,0x1
c000d398:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d39e:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d3a3:	85 c0                	test   eax,eax
c000d3a5:	74 24                	je     c000d3cb <sendKeyboardToken(KeyboardToken)+0x4a>
c000d3a7:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d3ad:	83 ec 04             	sub    esp,0x4
c000d3b0:	68 40 b4 02 c0       	push   0xc002b440
c000d3b5:	83 ec 08             	sub    esp,0x8
c000d3b8:	89 e2                	mov    edx,esp
c000d3ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3bd:	89 02                	mov    DWORD PTR [edx],eax
c000d3bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d3c2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d3c6:	ff d1                	call   ecx
c000d3c8:	83 c4 10             	add    esp,0x10
c000d3cb:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d3cf:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d3d2:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3d7:	0f b6 d2             	movzx  edx,dl
c000d3da:	0f b6 c0             	movzx  eax,al
c000d3dd:	39 c2                	cmp    edx,eax
c000d3df:	74 1c                	je     c000d3fd <sendKeyboardToken(KeyboardToken)+0x7c>
c000d3e1:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d3e4:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d3e9:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3ee:	0f b6 c0             	movzx  eax,al
c000d3f1:	83 ec 0c             	sub    esp,0xc
c000d3f4:	50                   	push   eax
c000d3f5:	e8 08 b1 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d3fa:	83 c4 10             	add    esp,0x10
c000d3fd:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d400:	0f b6 c0             	movzx  eax,al
c000d403:	85 c0                	test   eax,eax
c000d405:	0f 84 da 00 00 00    	je     c000d4e5 <sendKeyboardToken(KeyboardToken)+0x164>
c000d40b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d40e:	0f b7 c0             	movzx  eax,ax
c000d411:	3d 18 03 00 00       	cmp    eax,0x318
c000d416:	75 06                	jne    c000d41e <sendKeyboardToken(KeyboardToken)+0x9d>
c000d418:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d41e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d421:	0f b7 c0             	movzx  eax,ax
c000d424:	3d 19 03 00 00       	cmp    eax,0x319
c000d429:	75 06                	jne    c000d431 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d42b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d434:	0f b7 c0             	movzx  eax,ax
c000d437:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d43c:	75 06                	jne    c000d444 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d43e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d444:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d447:	0f b7 c0             	movzx  eax,ax
c000d44a:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d44f:	75 06                	jne    c000d457 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d451:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d457:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d45a:	0f b7 c0             	movzx  eax,ax
c000d45d:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d462:	75 06                	jne    c000d46a <sendKeyboardToken(KeyboardToken)+0xe9>
c000d464:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d46a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d46d:	0f b7 c0             	movzx  eax,ax
c000d470:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d475:	75 06                	jne    c000d47d <sendKeyboardToken(KeyboardToken)+0xfc>
c000d477:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d47d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d480:	0f b7 c0             	movzx  eax,ax
c000d483:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d488:	75 06                	jne    c000d490 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d48a:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d490:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d493:	0f b7 c0             	movzx  eax,ax
c000d496:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d49b:	75 06                	jne    c000d4a3 <sendKeyboardToken(KeyboardToken)+0x122>
c000d49d:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d4a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a6:	0f b7 c0             	movzx  eax,ax
c000d4a9:	3d 20 03 00 00       	cmp    eax,0x320
c000d4ae:	75 06                	jne    c000d4b6 <sendKeyboardToken(KeyboardToken)+0x135>
c000d4b0:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d4b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b9:	0f b7 c0             	movzx  eax,ax
c000d4bc:	3d 21 03 00 00       	cmp    eax,0x321
c000d4c1:	75 06                	jne    c000d4c9 <sendKeyboardToken(KeyboardToken)+0x148>
c000d4c3:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d4c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4cc:	0f b7 c0             	movzx  eax,ax
c000d4cf:	3d 22 03 00 00       	cmp    eax,0x322
c000d4d4:	0f 85 f1 00 00 00    	jne    c000d5cb <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4da:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d4e0:	e9 e6 00 00 00       	jmp    c000d5cb <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4e8:	0f b7 c0             	movzx  eax,ax
c000d4eb:	3d 18 03 00 00       	cmp    eax,0x318
c000d4f0:	75 0a                	jne    c000d4fc <sendKeyboardToken(KeyboardToken)+0x17b>
c000d4f2:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d4f8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ff:	0f b7 c0             	movzx  eax,ax
c000d502:	3d 19 03 00 00       	cmp    eax,0x319
c000d507:	75 0a                	jne    c000d513 <sendKeyboardToken(KeyboardToken)+0x192>
c000d509:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d50f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d513:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d516:	0f b7 c0             	movzx  eax,ax
c000d519:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d51e:	75 0a                	jne    c000d52a <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d520:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d526:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d52a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d52d:	0f b7 c0             	movzx  eax,ax
c000d530:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d535:	75 0a                	jne    c000d541 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d537:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d53d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d544:	0f b7 c0             	movzx  eax,ax
c000d547:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d54c:	75 0a                	jne    c000d558 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d54e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d554:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d55b:	0f b7 c0             	movzx  eax,ax
c000d55e:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d563:	75 0a                	jne    c000d56f <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d565:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d56b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d56f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d572:	0f b7 c0             	movzx  eax,ax
c000d575:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d57a:	75 0a                	jne    c000d586 <sendKeyboardToken(KeyboardToken)+0x205>
c000d57c:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d582:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d589:	0f b7 c0             	movzx  eax,ax
c000d58c:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d591:	75 0a                	jne    c000d59d <sendKeyboardToken(KeyboardToken)+0x21c>
c000d593:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d599:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d59d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a0:	0f b7 c0             	movzx  eax,ax
c000d5a3:	3d 20 03 00 00       	cmp    eax,0x320
c000d5a8:	75 0a                	jne    c000d5b4 <sendKeyboardToken(KeyboardToken)+0x233>
c000d5aa:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d5b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b7:	0f b7 c0             	movzx  eax,ax
c000d5ba:	3d 21 03 00 00       	cmp    eax,0x321
c000d5bf:	75 0a                	jne    c000d5cb <sendKeyboardToken(KeyboardToken)+0x24a>
c000d5c1:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d5c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ce:	0f b7 c0             	movzx  eax,ax
c000d5d1:	3d 00 02 00 00       	cmp    eax,0x200
c000d5d6:	75 2f                	jne    c000d607 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5d8:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d5dd:	83 f0 01             	xor    eax,0x1
c000d5e0:	0f b6 c0             	movzx  eax,al
c000d5e3:	85 c0                	test   eax,eax
c000d5e5:	74 20                	je     c000d607 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5e7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d5ec:	6a 01                	push   0x1
c000d5ee:	6a 00                	push   0x0
c000d5f0:	68 ca d1 00 c0       	push   0xc000d1ca
c000d5f5:	50                   	push   eax
c000d5f6:	e8 b9 88 00 00       	call   c0015eb4 <Process::createThread(void (*)(void*), void*, int)>
c000d5fb:	83 c4 10             	add    esp,0x10
c000d5fe:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d605:	eb 3a                	jmp    c000d641 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d607:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d60a:	0f b7 c0             	movzx  eax,ax
c000d60d:	3d 01 02 00 00       	cmp    eax,0x201
c000d612:	75 2d                	jne    c000d641 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d614:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d619:	83 f0 01             	xor    eax,0x1
c000d61c:	0f b6 c0             	movzx  eax,al
c000d61f:	85 c0                	test   eax,eax
c000d621:	74 1e                	je     c000d641 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d623:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d628:	6a 01                	push   0x1
c000d62a:	6a 00                	push   0x0
c000d62c:	68 38 d2 00 c0       	push   0xc000d238
c000d631:	50                   	push   eax
c000d632:	e8 7d 88 00 00       	call   c0015eb4 <Process::createThread(void (*)(void*), void*, int)>
c000d637:	83 c4 10             	add    esp,0x10
c000d63a:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d641:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d644:	0f b7 c0             	movzx  eax,ax
c000d647:	3d 25 03 00 00       	cmp    eax,0x325
c000d64c:	75 06                	jne    c000d654 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d64e:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d654:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d657:	0f b7 c0             	movzx  eax,ax
c000d65a:	3d 24 03 00 00       	cmp    eax,0x324
c000d65f:	75 06                	jne    c000d667 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d661:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d667:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d66a:	0f b7 c0             	movzx  eax,ax
c000d66d:	3d 23 03 00 00       	cmp    eax,0x323
c000d672:	75 06                	jne    c000d67a <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d674:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d67a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d67d:	0f b7 c0             	movzx  eax,ax
c000d680:	3d 26 03 00 00       	cmp    eax,0x326
c000d685:	75 06                	jne    c000d68d <sendKeyboardToken(KeyboardToken)+0x30c>
c000d687:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d68d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d690:	0f b7 c0             	movzx  eax,ax
c000d693:	3d 27 03 00 00       	cmp    eax,0x327
c000d698:	75 06                	jne    c000d6a0 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d69a:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d6a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6a3:	0f b7 c0             	movzx  eax,ax
c000d6a6:	3d 22 03 00 00       	cmp    eax,0x322
c000d6ab:	75 06                	jne    c000d6b3 <sendKeyboardToken(KeyboardToken)+0x332>
c000d6ad:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d6b3:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d6b7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d6ba:	83 f0 01             	xor    eax,0x1
c000d6bd:	0f b6 c0             	movzx  eax,al
c000d6c0:	85 c0                	test   eax,eax
c000d6c2:	74 7c                	je     c000d740 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d6c4:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d6c9:	0f b6 c0             	movzx  eax,al
c000d6cc:	85 c0                	test   eax,eax
c000d6ce:	74 43                	je     c000d713 <sendKeyboardToken(KeyboardToken)+0x392>
c000d6d0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d6d4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d6d8:	85 c0                	test   eax,eax
c000d6da:	74 2b                	je     c000d707 <sendKeyboardToken(KeyboardToken)+0x386>
c000d6dc:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d6e2:	89 d0                	mov    eax,edx
c000d6e4:	c1 e0 02             	shl    eax,0x2
c000d6e7:	01 d0                	add    eax,edx
c000d6e9:	01 c0                	add    eax,eax
c000d6eb:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d6f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6f3:	0f b7 c0             	movzx  eax,ax
c000d6f6:	8d 50 d0             	lea    edx,[eax-0x30]
c000d6f9:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6fe:	01 d0                	add    eax,edx
c000d700:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d705:	eb 71                	jmp    c000d778 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d707:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d711:	eb 65                	jmp    c000d778 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d713:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d718:	85 c0                	test   eax,eax
c000d71a:	74 18                	je     c000d734 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d71c:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d721:	0f b6 c0             	movzx  eax,al
c000d724:	83 ec 0c             	sub    esp,0xc
c000d727:	50                   	push   eax
c000d728:	e8 79 fb ff ff       	call   c000d2a6 <sendKeyToTerminal(unsigned char)>
c000d72d:	83 c4 10             	add    esp,0x10
c000d730:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d734:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d73e:	eb 38                	jmp    c000d778 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d740:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d743:	0f b7 c0             	movzx  eax,ax
c000d746:	3d 01 01 00 00       	cmp    eax,0x101
c000d74b:	75 2b                	jne    c000d778 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d74d:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d752:	85 c0                	test   eax,eax
c000d754:	74 18                	je     c000d76e <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d756:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d75b:	0f b6 c0             	movzx  eax,al
c000d75e:	83 ec 0c             	sub    esp,0xc
c000d761:	50                   	push   eax
c000d762:	e8 3f fb ff ff       	call   c000d2a6 <sendKeyToTerminal(unsigned char)>
c000d767:	83 c4 10             	add    esp,0x10
c000d76a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d76e:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d778:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d77b:	83 f0 01             	xor    eax,0x1
c000d77e:	0f b6 c0             	movzx  eax,al
c000d781:	85 c0                	test   eax,eax
c000d783:	74 5a                	je     c000d7df <sendKeyboardToken(KeyboardToken)+0x45e>
c000d785:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d788:	83 f0 01             	xor    eax,0x1
c000d78b:	0f b6 c0             	movzx  eax,al
c000d78e:	85 c0                	test   eax,eax
c000d790:	74 4d                	je     c000d7df <sendKeyboardToken(KeyboardToken)+0x45e>
c000d792:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d797:	83 f0 01             	xor    eax,0x1
c000d79a:	0f b6 c0             	movzx  eax,al
c000d79d:	85 c0                	test   eax,eax
c000d79f:	74 3e                	je     c000d7df <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a4:	0f b7 c0             	movzx  eax,ax
c000d7a7:	83 f8 1f             	cmp    eax,0x1f
c000d7aa:	76 0b                	jbe    c000d7b7 <sendKeyboardToken(KeyboardToken)+0x436>
c000d7ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7af:	0f b7 c0             	movzx  eax,ax
c000d7b2:	83 f8 7e             	cmp    eax,0x7e
c000d7b5:	76 16                	jbe    c000d7cd <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7ba:	0f b7 c0             	movzx  eax,ax
c000d7bd:	83 f8 0a             	cmp    eax,0xa
c000d7c0:	74 0b                	je     c000d7cd <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7c5:	0f b7 c0             	movzx  eax,ax
c000d7c8:	83 f8 08             	cmp    eax,0x8
c000d7cb:	75 12                	jne    c000d7df <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7d0:	0f b6 c0             	movzx  eax,al
c000d7d3:	83 ec 0c             	sub    esp,0xc
c000d7d6:	50                   	push   eax
c000d7d7:	e8 ca fa ff ff       	call   c000d2a6 <sendKeyToTerminal(unsigned char)>
c000d7dc:	83 c4 10             	add    esp,0x10
c000d7df:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7e2:	83 f0 01             	xor    eax,0x1
c000d7e5:	0f b6 c0             	movzx  eax,al
c000d7e8:	85 c0                	test   eax,eax
c000d7ea:	74 5d                	je     c000d849 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7ec:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7ef:	83 f0 01             	xor    eax,0x1
c000d7f2:	0f b6 c0             	movzx  eax,al
c000d7f5:	85 c0                	test   eax,eax
c000d7f7:	74 50                	je     c000d849 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7f9:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d7fe:	0f b6 c0             	movzx  eax,al
c000d801:	85 c0                	test   eax,eax
c000d803:	74 44                	je     c000d849 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d805:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d808:	0f b7 c0             	movzx  eax,ax
c000d80b:	83 f8 3f             	cmp    eax,0x3f
c000d80e:	76 39                	jbe    c000d849 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d813:	0f b7 c0             	movzx  eax,ax
c000d816:	83 f8 7f             	cmp    eax,0x7f
c000d819:	77 2e                	ja     c000d849 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d81b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d81e:	88 c2                	mov    dl,al
c000d820:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d823:	0f b7 c0             	movzx  eax,ax
c000d826:	83 f8 5f             	cmp    eax,0x5f
c000d829:	76 04                	jbe    c000d82f <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d82b:	b0 20                	mov    al,0x20
c000d82d:	eb 02                	jmp    c000d831 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d82f:	b0 00                	mov    al,0x0
c000d831:	89 d1                	mov    ecx,edx
c000d833:	29 c1                	sub    ecx,eax
c000d835:	89 c8                	mov    eax,ecx
c000d837:	83 e8 40             	sub    eax,0x40
c000d83a:	0f b6 c0             	movzx  eax,al
c000d83d:	83 ec 0c             	sub    esp,0xc
c000d840:	50                   	push   eax
c000d841:	e8 60 fa ff ff       	call   c000d2a6 <sendKeyToTerminal(unsigned char)>
c000d846:	83 c4 10             	add    esp,0x10
c000d849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d84c:	0f b7 c0             	movzx  eax,ax
c000d84f:	3d 00 03 00 00       	cmp    eax,0x300
c000d854:	75 12                	jne    c000d868 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d856:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d859:	83 f0 01             	xor    eax,0x1
c000d85c:	0f b6 c0             	movzx  eax,al
c000d85f:	85 c0                	test   eax,eax
c000d861:	74 05                	je     c000d868 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d863:	e8 9b ac ff ff       	call   c0008503 <doTerminalCycle()>
c000d868:	90                   	nop
c000d869:	c9                   	leave  
c000d86a:	c3                   	ret    

c000d86b <clearInternalKeybuffer(VgaText*)>:
c000d86b:	55                   	push   ebp
c000d86c:	89 e5                	mov    ebp,esp
c000d86e:	83 ec 08             	sub    esp,0x8
c000d871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d874:	05 02 01 00 00       	add    eax,0x102
c000d879:	83 ec 0c             	sub    esp,0xc
c000d87c:	50                   	push   eax
c000d87d:	e8 ee 2c ff ff       	call   c0000570 <strlen>
c000d882:	83 c4 10             	add    esp,0x10
c000d885:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d888:	81 c2 02 01 00 00    	add    edx,0x102
c000d88e:	83 ec 04             	sub    esp,0x4
c000d891:	50                   	push   eax
c000d892:	6a 00                	push   0x0
c000d894:	52                   	push   edx
c000d895:	e8 56 2c ff ff       	call   c00004f0 <memset>
c000d89a:	83 c4 10             	add    esp,0x10
c000d89d:	90                   	nop
c000d89e:	c9                   	leave  
c000d89f:	c3                   	ret    

c000d8a0 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d8a0:	55                   	push   ebp
c000d8a1:	89 e5                	mov    ebp,esp
c000d8a3:	83 ec 18             	sub    esp,0x18
c000d8a6:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d8ab:	85 c0                	test   eax,eax
c000d8ad:	74 2a                	je     c000d8d9 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d8af:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d8b5:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d8bb:	83 ec 04             	sub    esp,0x4
c000d8be:	68 40 b4 02 c0       	push   0xc002b440
c000d8c3:	83 ec 08             	sub    esp,0x8
c000d8c6:	89 e2                	mov    edx,esp
c000d8c8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d8cb:	89 02                	mov    DWORD PTR [edx],eax
c000d8cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d8d0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d8d4:	ff d1                	call   ecx
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	fb                   	sti    
c000d8da:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d8e1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d8e5:	0f 84 0d 01 00 00    	je     c000d9f8 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d8eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8ee:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d8f4:	0f be c0             	movsx  eax,al
c000d8f7:	85 c0                	test   eax,eax
c000d8f9:	75 2c                	jne    c000d927 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d8fb:	fa                   	cli    
c000d8fc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d901:	83 c0 01             	add    eax,0x1
c000d904:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d909:	e8 f6 87 00 00       	call   c0016104 <schedule()>
c000d90e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d913:	83 e8 01             	sub    eax,0x1
c000d916:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d91b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d920:	85 c0                	test   eax,eax
c000d922:	75 c7                	jne    c000d8eb <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d924:	fb                   	sti    
c000d925:	eb c4                	jmp    c000d8eb <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d927:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d92a:	8d 50 01             	lea    edx,[eax+0x1]
c000d92d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d930:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d933:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d939:	88 10                	mov    BYTE PTR [eax],dl
c000d93b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d93e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d944:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d947:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d94b:	83 f8 03             	cmp    eax,0x3
c000d94e:	75 1e                	jne    c000d96e <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d950:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d955:	8b 00                	mov    eax,DWORD PTR [eax]
c000d957:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d95a:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d960:	83 ec 08             	sub    esp,0x8
c000d963:	6a 02                	push   0x2
c000d965:	50                   	push   eax
c000d966:	e8 57 41 00 00       	call   c0011ac2 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d96b:	83 c4 10             	add    esp,0x10
c000d96e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d972:	83 f8 1c             	cmp    eax,0x1c
c000d975:	75 1e                	jne    c000d995 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d977:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d97c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d981:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d987:	83 ec 08             	sub    esp,0x8
c000d98a:	6a 09                	push   0x9
c000d98c:	50                   	push   eax
c000d98d:	e8 30 41 00 00       	call   c0011ac2 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d992:	83 c4 10             	add    esp,0x10
c000d995:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d998:	05 02 01 00 00       	add    eax,0x102
c000d99d:	83 ec 0c             	sub    esp,0xc
c000d9a0:	50                   	push   eax
c000d9a1:	e8 ca 2b ff ff       	call   c0000570 <strlen>
c000d9a6:	83 c4 10             	add    esp,0x10
c000d9a9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9ac:	81 c2 02 01 00 00    	add    edx,0x102
c000d9b2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d9b5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9b8:	81 c2 02 01 00 00    	add    edx,0x102
c000d9be:	83 ec 04             	sub    esp,0x4
c000d9c1:	50                   	push   eax
c000d9c2:	51                   	push   ecx
c000d9c3:	52                   	push   edx
c000d9c4:	e8 07 2a ff ff       	call   c00003d0 <memmove>
c000d9c9:	83 c4 10             	add    esp,0x10
c000d9cc:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d9d0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d9d4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9d8:	83 f8 0a             	cmp    eax,0xa
c000d9db:	74 16                	je     c000d9f3 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9dd:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9e1:	83 f8 03             	cmp    eax,0x3
c000d9e4:	74 0d                	je     c000d9f3 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9e6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9ea:	83 f8 1c             	cmp    eax,0x1c
c000d9ed:	0f 85 ee fe ff ff    	jne    c000d8e1 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d9f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d9f6:	eb 03                	jmp    c000d9fb <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d9f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d9fb:	c9                   	leave  
c000d9fc:	c3                   	ret    
c000d9fd:	90                   	nop

c000d9fe <Keyboard::Keyboard(char const*)>:
c000d9fe:	83 ec 0c             	sub    esp,0xc
c000da01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da05:	83 ec 08             	sub    esp,0x8
c000da08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da0c:	50                   	push   eax
c000da0d:	e8 4c f1 ff ff       	call   c000cb5e <Device::Device(char const*)>
c000da12:	83 c4 10             	add    esp,0x10
c000da15:	ba fc 1c 02 c0       	mov    edx,0xc0021cfc
c000da1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da1e:	89 10                	mov    DWORD PTR [eax],edx
c000da20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da24:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000da2e:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000da35:	90                   	nop
c000da36:	83 c4 0c             	add    esp,0xc
c000da39:	c3                   	ret    

c000da3a <Keyboard::~Keyboard()>:
c000da3a:	83 ec 0c             	sub    esp,0xc
c000da3d:	ba fc 1c 02 c0       	mov    edx,0xc0021cfc
c000da42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da46:	89 10                	mov    DWORD PTR [eax],edx
c000da48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da4c:	83 ec 0c             	sub    esp,0xc
c000da4f:	50                   	push   eax
c000da50:	e8 73 ee ff ff       	call   c000c8c8 <Device::~Device()>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	90                   	nop
c000da59:	83 c4 0c             	add    esp,0xc
c000da5c:	c3                   	ret    
c000da5d:	90                   	nop

c000da5e <Keyboard::~Keyboard()>:
c000da5e:	83 ec 0c             	sub    esp,0xc
c000da61:	83 ec 0c             	sub    esp,0xc
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	e8 cd ff ff ff       	call   c000da3a <Keyboard::~Keyboard()>
c000da6d:	83 c4 10             	add    esp,0x10
c000da70:	83 ec 08             	sub    esp,0x8
c000da73:	68 5c 01 00 00       	push   0x15c
c000da78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da7c:	e8 97 cd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000da81:	83 c4 10             	add    esp,0x10
c000da84:	83 c4 0c             	add    esp,0xc
c000da87:	c3                   	ret    

c000da88 <LogicalDisk::close(int, int, void*)>:
c000da88:	83 c8 ff             	or     eax,0xffffffff
c000da8b:	c3                   	ret    

c000da8c <LogicalDisk::~LogicalDisk()>:
c000da8c:	83 ec 0c             	sub    esp,0xc
c000da8f:	ba 74 1d 02 c0       	mov    edx,0xc0021d74
c000da94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da98:	89 10                	mov    DWORD PTR [eax],edx
c000da9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da9e:	83 ec 0c             	sub    esp,0xc
c000daa1:	50                   	push   eax
c000daa2:	e8 21 ee ff ff       	call   c000c8c8 <Device::~Device()>
c000daa7:	83 c4 10             	add    esp,0x10
c000daaa:	90                   	nop
c000daab:	83 c4 0c             	add    esp,0xc
c000daae:	c3                   	ret    
c000daaf:	90                   	nop

c000dab0 <LogicalDisk::~LogicalDisk()>:
c000dab0:	83 ec 0c             	sub    esp,0xc
c000dab3:	83 ec 0c             	sub    esp,0xc
c000dab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daba:	e8 cd ff ff ff       	call   c000da8c <LogicalDisk::~LogicalDisk()>
c000dabf:	83 c4 10             	add    esp,0x10
c000dac2:	83 ec 08             	sub    esp,0x8
c000dac5:	68 78 01 00 00       	push   0x178
c000daca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dace:	e8 45 cd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dad3:	83 c4 10             	add    esp,0x10
c000dad6:	83 c4 0c             	add    esp,0xc
c000dad9:	c3                   	ret    

c000dada <LogicalDisk::open(int, int, void*)>:
c000dada:	83 ec 18             	sub    esp,0x18
c000dadd:	68 28 1d 02 c0       	push   0xc0021d28
c000dae2:	e8 38 3b 00 00       	call   c001161f <KePanic(char const*)>
c000dae7:	83 c8 ff             	or     eax,0xffffffff
c000daea:	83 c4 1c             	add    esp,0x1c
c000daed:	c3                   	ret    

c000daee <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000daee:	53                   	push   ebx
c000daef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000daf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000daf7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dafb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000db01:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db07:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db0d:	77 10                	ja     c000db1f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db0f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db15:	89 d3                	mov    ebx,edx
c000db17:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000db1d:	72 05                	jb     c000db24 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db1f:	83 c8 ff             	or     eax,0xffffffff
c000db22:	89 c2                	mov    edx,eax
c000db24:	5b                   	pop    ebx
c000db25:	c3                   	ret    

c000db26 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db26:	56                   	push   esi
c000db27:	83 c8 ff             	or     eax,0xffffffff
c000db2a:	53                   	push   ebx
c000db2b:	89 c2                	mov    edx,eax
c000db2d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db31:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000db35:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db39:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db3f:	77 27                	ja     c000db68 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db41:	89 d8                	mov    eax,ebx
c000db43:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000db49:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000db4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000db54:	89 c2                	mov    edx,eax
c000db56:	73 10                	jae    c000db68 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db58:	89 c8                	mov    eax,ecx
c000db5a:	89 da                	mov    edx,ebx
c000db5c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000db62:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000db68:	5b                   	pop    ebx
c000db69:	5e                   	pop    esi
c000db6a:	c3                   	ret    
c000db6b:	90                   	nop

c000db6c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000db6c:	83 ec 1c             	sub    esp,0x1c
c000db6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db83:	89 04 24             	mov    DWORD PTR [esp],eax
c000db86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db92:	83 ec 08             	sub    esp,0x8
c000db95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db99:	50                   	push   eax
c000db9a:	e8 bf ef ff ff       	call   c000cb5e <Device::Device(char const*)>
c000db9f:	83 c4 10             	add    esp,0x10
c000dba2:	ba 74 1d 02 c0       	mov    edx,0xc0021d74
c000dba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbab:	89 10                	mov    DWORD PTR [eax],edx
c000dbad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbb1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbbc:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dbc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd2:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dbdc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dbe0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dbe4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dbe8:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dbee:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dbf4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dbf8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dbfb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dbff:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dc05:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc0f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc13:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc1d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc27:	90                   	nop
c000dc28:	83 c4 1c             	add    esp,0x1c
c000dc2b:	c3                   	ret    

c000dc2c <LogicalDisk::assignDriveLetter()>:
c000dc2c:	55                   	push   ebp
c000dc2d:	57                   	push   edi
c000dc2e:	56                   	push   esi
c000dc2f:	53                   	push   ebx
c000dc30:	83 ec 14             	sub    esp,0x14
c000dc33:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dc37:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dc3d:	b0 41                	mov    al,0x41
c000dc3f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dc45:	84 d2                	test   dl,dl
c000dc47:	75 02                	jne    c000dc4b <LogicalDisk::assignDriveLetter()+0x1f>
c000dc49:	b0 43                	mov    al,0x43
c000dc4b:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dc51:	0f b6 ca             	movzx  ecx,dl
c000dc54:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dc58:	0f be e8             	movsx  ebp,al
c000dc5b:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dc61:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc65:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dc69:	3c 43                	cmp    al,0x43
c000dc6b:	75 10                	jne    c000dc7d <LogicalDisk::assignDriveLetter()+0x51>
c000dc6d:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dc74:	75 5a                	jne    c000dcd0 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc76:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dc7b:	75 53                	jne    c000dcd0 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc7d:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dc80:	ba 01 00 00 00       	mov    edx,0x1
c000dc85:	89 34 24             	mov    DWORD PTR [esp],esi
c000dc88:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dc8b:	d3 e2                	shl    edx,cl
c000dc8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc91:	89 d7                	mov    edi,edx
c000dc93:	89 d6                	mov    esi,edx
c000dc95:	c1 ff 1f             	sar    edi,0x1f
c000dc98:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dc9c:	21 f9                	and    ecx,edi
c000dc9e:	09 d1                	or     ecx,edx
c000dca0:	75 2e                	jne    c000dcd0 <LogicalDisk::assignDriveLetter()+0xa4>
c000dca2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dca6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dcaa:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dcb0:	09 f2                	or     edx,esi
c000dcb2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dcb5:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dcbb:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dcc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dcc6:	09 fa                	or     edx,edi
c000dcc8:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dcce:	eb 0d                	jmp    c000dcdd <LogicalDisk::assignDriveLetter()+0xb1>
c000dcd0:	8d 50 01             	lea    edx,[eax+0x1]
c000dcd3:	45                   	inc    ebp
c000dcd4:	88 d0                	mov    al,dl
c000dcd6:	80 fa 5b             	cmp    dl,0x5b
c000dcd9:	75 8e                	jne    c000dc69 <LogicalDisk::assignDriveLetter()+0x3d>
c000dcdb:	31 c0                	xor    eax,eax
c000dcdd:	83 c4 14             	add    esp,0x14
c000dce0:	5b                   	pop    ebx
c000dce1:	5e                   	pop    esi
c000dce2:	5f                   	pop    edi
c000dce3:	5d                   	pop    ebp
c000dce4:	c3                   	ret    
c000dce5:	90                   	nop

c000dce6 <LogicalDisk::mount()>:
c000dce6:	56                   	push   esi
c000dce7:	53                   	push   ebx
c000dce8:	53                   	push   ebx
c000dce9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dced:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dcf3:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dcfd:	85 db                	test   ebx,ebx
c000dcff:	74 27                	je     c000dd28 <LogicalDisk::mount()+0x42>
c000dd01:	51                   	push   ecx
c000dd02:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd09:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd0b:	83 e8 41             	sub    eax,0x41
c000dd0e:	50                   	push   eax
c000dd0f:	56                   	push   esi
c000dd10:	53                   	push   ebx
c000dd11:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd14:	83 c4 10             	add    esp,0x10
c000dd17:	84 c0                	test   al,al
c000dd19:	74 08                	je     c000dd23 <LogicalDisk::mount()+0x3d>
c000dd1b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd21:	eb 07                	jmp    c000dd2a <LogicalDisk::mount()+0x44>
c000dd23:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd26:	eb d5                	jmp    c000dcfd <LogicalDisk::mount()+0x17>
c000dd28:	31 c0                	xor    eax,eax
c000dd2a:	5a                   	pop    edx
c000dd2b:	5b                   	pop    ebx
c000dd2c:	5e                   	pop    esi
c000dd2d:	c3                   	ret    

c000dd2e <LogicalDisk::unmount()>:
c000dd2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd32:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dd3c:	c3                   	ret    
c000dd3d:	90                   	nop

c000dd3e <LogicalDisk::eject()>:
c000dd3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd42:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dd48:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd4e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dd51:	90                   	nop

c000dd52 <LogicalDisk::unassignDriveLetter()>:
c000dd52:	57                   	push   edi
c000dd53:	56                   	push   esi
c000dd54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd58:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dd5f:	85 c9                	test   ecx,ecx
c000dd61:	75 0f                	jne    c000dd72 <LogicalDisk::unassignDriveLetter()+0x20>
c000dd63:	c7 44 24 0c 4c 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021d4c
c000dd6b:	5e                   	pop    esi
c000dd6c:	5f                   	pop    edi
c000dd6d:	e9 ad 38 00 00       	jmp    c001161f <KePanic(char const*)>
c000dd72:	83 e9 41             	sub    ecx,0x41
c000dd75:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dd7c:	b8 01 00 00 00       	mov    eax,0x1
c000dd81:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000dd8c:	d3 e0                	shl    eax,cl
c000dd8e:	89 c7                	mov    edi,eax
c000dd90:	f7 d0                	not    eax
c000dd92:	c1 ff 1f             	sar    edi,0x1f
c000dd95:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000dd9b:	89 fe                	mov    esi,edi
c000dd9d:	f7 d6                	not    esi
c000dd9f:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000dda5:	5e                   	pop    esi
c000dda6:	5f                   	pop    edi
c000dda7:	c3                   	ret    

c000dda8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000dda8:	57                   	push   edi
c000dda9:	56                   	push   esi
c000ddaa:	53                   	push   ebx
c000ddab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ddaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ddb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddbb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ddc1:	77 41                	ja     c000de04 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000ddc3:	99                   	cdq    
c000ddc4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ddca:	01 c8                	add    eax,ecx
c000ddcc:	11 da                	adc    edx,ebx
c000ddce:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ddd4:	19 d7                	sbb    edi,edx
c000ddd6:	72 33                	jb     c000de0b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000ddd8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ddde:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dde4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dde8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ddec:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ddf2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ddf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddfc:	5b                   	pop    ebx
c000ddfd:	5e                   	pop    esi
c000ddfe:	5f                   	pop    edi
c000ddff:	e9 c6 0a 00 00       	jmp    c000e8ca <VCache::read(unsigned long long, int, void*)>
c000de04:	b8 05 00 00 00       	mov    eax,0x5
c000de09:	eb 05                	jmp    c000de10 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de0b:	b8 07 00 00 00       	mov    eax,0x7
c000de10:	5b                   	pop    ebx
c000de11:	5e                   	pop    esi
c000de12:	5f                   	pop    edi
c000de13:	c3                   	ret    

c000de14 <LogicalDisk::write(unsigned long long, int, void*)>:
c000de14:	57                   	push   edi
c000de15:	56                   	push   esi
c000de16:	53                   	push   ebx
c000de17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de1f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de27:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de2d:	77 41                	ja     c000de70 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000de2f:	99                   	cdq    
c000de30:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de36:	01 c8                	add    eax,ecx
c000de38:	11 da                	adc    edx,ebx
c000de3a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de40:	19 d7                	sbb    edi,edx
c000de42:	72 33                	jb     c000de77 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000de44:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de4a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de50:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de54:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de58:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de5e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de68:	5b                   	pop    ebx
c000de69:	5e                   	pop    esi
c000de6a:	5f                   	pop    edi
c000de6b:	e9 6c 09 00 00       	jmp    c000e7dc <VCache::write(unsigned long long, int, void*)>
c000de70:	b8 05 00 00 00       	mov    eax,0x5
c000de75:	eb 05                	jmp    c000de7c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000de77:	b8 07 00 00 00       	mov    eax,0x7
c000de7c:	5b                   	pop    ebx
c000de7d:	5e                   	pop    esi
c000de7e:	5f                   	pop    edi
c000de7f:	c3                   	ret    

c000de80 <Mouse::Mouse(char const*)>:
c000de80:	83 ec 0c             	sub    esp,0xc
c000de83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de87:	83 ec 08             	sub    esp,0x8
c000de8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de8e:	50                   	push   eax
c000de8f:	e8 ca ec ff ff       	call   c000cb5e <Device::Device(char const*)>
c000de94:	83 c4 10             	add    esp,0x10
c000de97:	ba a0 1d 02 c0       	mov    edx,0xc0021da0
c000de9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dea0:	89 10                	mov    DWORD PTR [eax],edx
c000dea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dea6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000deb0:	90                   	nop
c000deb1:	83 c4 0c             	add    esp,0xc
c000deb4:	c3                   	ret    
c000deb5:	90                   	nop
c000deb6:	66 90                	xchg   ax,ax

c000deb8 <Mouse::~Mouse()>:
c000deb8:	83 ec 0c             	sub    esp,0xc
c000debb:	ba a0 1d 02 c0       	mov    edx,0xc0021da0
c000dec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec4:	89 10                	mov    DWORD PTR [eax],edx
c000dec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deca:	83 ec 0c             	sub    esp,0xc
c000decd:	50                   	push   eax
c000dece:	e8 f5 e9 ff ff       	call   c000c8c8 <Device::~Device()>
c000ded3:	83 c4 10             	add    esp,0x10
c000ded6:	90                   	nop
c000ded7:	83 c4 0c             	add    esp,0xc
c000deda:	c3                   	ret    
c000dedb:	90                   	nop

c000dedc <Mouse::~Mouse()>:
c000dedc:	83 ec 0c             	sub    esp,0xc
c000dedf:	83 ec 0c             	sub    esp,0xc
c000dee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dee6:	e8 cd ff ff ff       	call   c000deb8 <Mouse::~Mouse()>
c000deeb:	83 c4 10             	add    esp,0x10
c000deee:	83 ec 08             	sub    esp,0x8
c000def1:	68 58 01 00 00       	push   0x158
c000def6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000defa:	e8 19 c9 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000deff:	83 c4 10             	add    esp,0x10
c000df02:	83 c4 0c             	add    esp,0xc
c000df05:	c3                   	ret    

c000df06 <NIC::getMAC()>:
c000df06:	31 c0                	xor    eax,eax
c000df08:	31 d2                	xor    edx,edx
c000df0a:	c3                   	ret    
c000df0b:	90                   	nop

c000df0c <NIC::write(int, unsigned char*, int*)>:
c000df0c:	b8 01 00 00 00       	mov    eax,0x1
c000df11:	c3                   	ret    

c000df12 <NIC::NIC(char const*)>:
c000df12:	83 ec 0c             	sub    esp,0xc
c000df15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df19:	83 ec 08             	sub    esp,0x8
c000df1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df20:	50                   	push   eax
c000df21:	e8 38 ec ff ff       	call   c000cb5e <Device::Device(char const*)>
c000df26:	83 c4 10             	add    esp,0x10
c000df29:	ba cc 1d 02 c0       	mov    edx,0xc0021dcc
c000df2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df32:	89 10                	mov    DWORD PTR [eax],edx
c000df34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df38:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000df42:	90                   	nop
c000df43:	83 c4 0c             	add    esp,0xc
c000df46:	c3                   	ret    
c000df47:	90                   	nop

c000df48 <NIC::~NIC()>:
c000df48:	83 ec 0c             	sub    esp,0xc
c000df4b:	ba cc 1d 02 c0       	mov    edx,0xc0021dcc
c000df50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df54:	89 10                	mov    DWORD PTR [eax],edx
c000df56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df5a:	83 ec 0c             	sub    esp,0xc
c000df5d:	50                   	push   eax
c000df5e:	e8 65 e9 ff ff       	call   c000c8c8 <Device::~Device()>
c000df63:	83 c4 10             	add    esp,0x10
c000df66:	90                   	nop
c000df67:	83 c4 0c             	add    esp,0xc
c000df6a:	c3                   	ret    
c000df6b:	90                   	nop

c000df6c <NIC::~NIC()>:
c000df6c:	83 ec 0c             	sub    esp,0xc
c000df6f:	83 ec 0c             	sub    esp,0xc
c000df72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df76:	e8 cd ff ff ff       	call   c000df48 <NIC::~NIC()>
c000df7b:	83 c4 10             	add    esp,0x10
c000df7e:	83 ec 08             	sub    esp,0x8
c000df81:	68 58 01 00 00       	push   0x158
c000df86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df8a:	e8 89 c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000df8f:	83 c4 10             	add    esp,0x10
c000df92:	83 c4 0c             	add    esp,0xc
c000df95:	c3                   	ret    

c000df96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000df96:	55                   	push   ebp
c000df97:	57                   	push   edi
c000df98:	56                   	push   esi
c000df99:	53                   	push   ebx
c000df9a:	81 ec 28 01 00 00    	sub    esp,0x128
c000dfa0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dfa7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dfae:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dfb5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dfbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfc0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dfc4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dfcb:	e8 8a ec ff ff       	call   c000cc5a <Device::getName()>
c000dfd0:	5a                   	pop    edx
c000dfd1:	59                   	pop    ecx
c000dfd2:	50                   	push   eax
c000dfd3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dfd7:	55                   	push   ebp
c000dfd8:	e8 63 26 ff ff       	call   c0000640 <strcpy>
c000dfdd:	5b                   	pop    ebx
c000dfde:	58                   	pop    eax
c000dfdf:	68 f8 1d 02 c0       	push   0xc0021df8
c000dfe4:	55                   	push   ebp
c000dfe5:	e8 56 28 ff ff       	call   c0000840 <strcat>
c000dfea:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dff1:	e8 c0 9a ff ff       	call   c0007ab6 <malloc>
c000dff6:	83 c4 0c             	add    esp,0xc
c000dff9:	89 c3                	mov    ebx,eax
c000dffb:	57                   	push   edi
c000dffc:	56                   	push   esi
c000dffd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e001:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e005:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e00c:	55                   	push   ebp
c000e00d:	50                   	push   eax
c000e00e:	e8 59 fb ff ff       	call   c000db6c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e013:	83 c4 14             	add    esp,0x14
c000e016:	53                   	push   ebx
c000e017:	e8 10 fc ff ff       	call   c000dc2c <LogicalDisk::assignDriveLetter()>
c000e01c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e01f:	e8 c2 fc ff ff       	call   c000dce6 <LogicalDisk::mount()>
c000e024:	58                   	pop    eax
c000e025:	5a                   	pop    edx
c000e026:	53                   	push   ebx
c000e027:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e02e:	e8 93 e9 ff ff       	call   c000c9c6 <Device::addChild(Device*)>
c000e033:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e039:	5b                   	pop    ebx
c000e03a:	5e                   	pop    esi
c000e03b:	5f                   	pop    edi
c000e03c:	5d                   	pop    ebp
c000e03d:	c3                   	ret    

c000e03e <createPartitionsForDisk(PhysicalDisk*)>:
c000e03e:	55                   	push   ebp
c000e03f:	57                   	push   edi
c000e040:	56                   	push   esi
c000e041:	53                   	push   ebx
c000e042:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e048:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e04f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e055:	3d 00 02 00 00       	cmp    eax,0x200
c000e05a:	74 27                	je     c000e083 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e05c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e062:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e068:	83 ec 10             	sub    esp,0x10
c000e06b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e06f:	99                   	cdq    
c000e070:	c1 e6 0a             	shl    esi,0xa
c000e073:	52                   	push   edx
c000e074:	89 fd                	mov    ebp,edi
c000e076:	50                   	push   eax
c000e077:	55                   	push   ebp
c000e078:	56                   	push   esi
c000e079:	e8 02 17 01 00       	call   c001f780 <__udivdi3>
c000e07e:	e9 b9 00 00 00       	jmp    c000e13c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e083:	83 ec 0c             	sub    esp,0xc
c000e086:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e088:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e08c:	56                   	push   esi
c000e08d:	6a 01                	push   0x1
c000e08f:	6a 00                	push   0x0
c000e091:	6a 00                	push   0x0
c000e093:	53                   	push   ebx
c000e094:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e097:	83 c4 20             	add    esp,0x20
c000e09a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e0a2:	75 0a                	jne    c000e0ae <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e0a4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e0ac:	74 2c                	je     c000e0da <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e0ae:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0b4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e0ba:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e0c0:	83 ec 10             	sub    esp,0x10
c000e0c3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e0c7:	89 f7                	mov    edi,esi
c000e0c9:	c1 e0 0a             	shl    eax,0xa
c000e0cc:	c1 ff 1f             	sar    edi,0x1f
c000e0cf:	57                   	push   edi
c000e0d0:	56                   	push   esi
c000e0d1:	52                   	push   edx
c000e0d2:	50                   	push   eax
c000e0d3:	e8 a8 16 01 00       	call   c001f780 <__udivdi3>
c000e0d8:	eb 62                	jmp    c000e13c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0da:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e0e1:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e0e8:	89 cf                	mov    edi,ecx
c000e0ea:	83 e2 7f             	and    edx,0x7f
c000e0ed:	83 e7 7f             	and    edi,0x7f
c000e0f0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e0f7:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e0fa:	83 e0 7f             	and    eax,0x7f
c000e0fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e100:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e107:	83 e0 7f             	and    eax,0x7f
c000e10a:	01 d0                	add    eax,edx
c000e10c:	89 c5                	mov    ebp,eax
c000e10e:	84 c0                	test   al,al
c000e110:	74 41                	je     c000e153 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e112:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e118:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e11e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e124:	83 ec 10             	sub    esp,0x10
c000e127:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e12b:	89 f7                	mov    edi,esi
c000e12d:	c1 e0 0a             	shl    eax,0xa
c000e130:	c1 ff 1f             	sar    edi,0x1f
c000e133:	57                   	push   edi
c000e134:	56                   	push   esi
c000e135:	52                   	push   edx
c000e136:	50                   	push   eax
c000e137:	e8 44 16 01 00       	call   c001f780 <__udivdi3>
c000e13c:	83 c4 14             	add    esp,0x14
c000e13f:	52                   	push   edx
c000e140:	50                   	push   eax
c000e141:	6a 00                	push   0x0
c000e143:	6a 00                	push   0x0
c000e145:	53                   	push   ebx
c000e146:	e8 4b fe ff ff       	call   c000df96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e14b:	83 c4 20             	add    esp,0x20
c000e14e:	e9 73 01 00 00       	jmp    c000e2c6 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e153:	89 f0                	mov    eax,esi
c000e155:	31 c9                	xor    ecx,ecx
c000e157:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e15e:	75 02                	jne    c000e162 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e160:	89 cd                	mov    ebp,ecx
c000e162:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e169:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000e170:	c1 e2 08             	shl    edx,0x8
c000e173:	c1 e6 10             	shl    esi,0x10
c000e176:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e17e:	09 f2                	or     edx,esi
c000e180:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e188:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000e18f:	83 c0 10             	add    eax,0x10
c000e192:	09 f2                	or     edx,esi
c000e194:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e19b:	c1 e6 18             	shl    esi,0x18
c000e19e:	09 f2                	or     edx,esi
c000e1a0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e1a7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e1ab:	c1 e6 10             	shl    esi,0x10
c000e1ae:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e1b5:	c1 e2 08             	shl    edx,0x8
c000e1b8:	09 f2                	or     edx,esi
c000e1ba:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e1c1:	09 f2                	or     edx,esi
c000e1c3:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e1ca:	c1 e6 18             	shl    esi,0x18
c000e1cd:	09 f2                	or     edx,esi
c000e1cf:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e1d3:	41                   	inc    ecx
c000e1d4:	83 f9 04             	cmp    ecx,0x4
c000e1d7:	0f 85 7a ff ff ff    	jne    c000e157 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e1dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1e1:	83 f0 01             	xor    eax,0x1
c000e1e4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e1e8:	75 4f                	jne    c000e239 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e1ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1ee:	83 f0 01             	xor    eax,0x1
c000e1f1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e1f5:	75 42                	jne    c000e239 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e1f7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e1ff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e207:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e20d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e213:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e219:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e21d:	89 f7                	mov    edi,esi
c000e21f:	c1 e0 0a             	shl    eax,0xa
c000e222:	c1 ff 1f             	sar    edi,0x1f
c000e225:	57                   	push   edi
c000e226:	56                   	push   esi
c000e227:	52                   	push   edx
c000e228:	50                   	push   eax
c000e229:	e8 52 15 01 00       	call   c001f780 <__udivdi3>
c000e22e:	83 c4 10             	add    esp,0x10
c000e231:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e235:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e239:	89 e8                	mov    eax,ebp
c000e23b:	0f b6 e8             	movzx  ebp,al
c000e23e:	85 ed                	test   ebp,ebp
c000e240:	74 50                	je     c000e292 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e242:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e246:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e24a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e24e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e252:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e256:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e25a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e25e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e262:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e266:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e26a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e26e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e272:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e276:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e27a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e27e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e282:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e286:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e28a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e28e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e292:	31 ed                	xor    ebp,ebp
c000e294:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e298:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e29c:	89 f8                	mov    eax,edi
c000e29e:	09 f0                	or     eax,esi
c000e2a0:	74 1e                	je     c000e2c0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2a2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2a6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2aa:	89 d1                	mov    ecx,edx
c000e2ac:	09 c1                	or     ecx,eax
c000e2ae:	74 10                	je     c000e2c0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2b0:	83 ec 0c             	sub    esp,0xc
c000e2b3:	57                   	push   edi
c000e2b4:	56                   	push   esi
c000e2b5:	52                   	push   edx
c000e2b6:	50                   	push   eax
c000e2b7:	53                   	push   ebx
c000e2b8:	e8 d9 fc ff ff       	call   c000df96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e2bd:	83 c4 20             	add    esp,0x20
c000e2c0:	45                   	inc    ebp
c000e2c1:	83 fd 04             	cmp    ebp,0x4
c000e2c4:	75 ce                	jne    c000e294 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e2c6:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e2cc:	5b                   	pop    ebx
c000e2cd:	5e                   	pop    esi
c000e2ce:	5f                   	pop    edi
c000e2cf:	5d                   	pop    ebp
c000e2d0:	c3                   	ret    
c000e2d1:	66 90                	xchg   ax,ax
c000e2d3:	90                   	nop

c000e2d4 <Serial::Serial(char const*)>:
c000e2d4:	83 ec 0c             	sub    esp,0xc
c000e2d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2db:	83 ec 08             	sub    esp,0x8
c000e2de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2e2:	50                   	push   eax
c000e2e3:	e8 76 e8 ff ff       	call   c000cb5e <Device::Device(char const*)>
c000e2e8:	83 c4 10             	add    esp,0x10
c000e2eb:	ba 0c 1e 02 c0       	mov    edx,0xc0021e0c
c000e2f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f4:	89 10                	mov    DWORD PTR [eax],edx
c000e2f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2fa:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e304:	90                   	nop
c000e305:	83 c4 0c             	add    esp,0xc
c000e308:	c3                   	ret    
c000e309:	90                   	nop
c000e30a:	66 90                	xchg   ax,ax

c000e30c <Serial::~Serial()>:
c000e30c:	83 ec 0c             	sub    esp,0xc
c000e30f:	ba 0c 1e 02 c0       	mov    edx,0xc0021e0c
c000e314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e318:	89 10                	mov    DWORD PTR [eax],edx
c000e31a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31e:	83 ec 0c             	sub    esp,0xc
c000e321:	50                   	push   eax
c000e322:	e8 a1 e5 ff ff       	call   c000c8c8 <Device::~Device()>
c000e327:	83 c4 10             	add    esp,0x10
c000e32a:	90                   	nop
c000e32b:	83 c4 0c             	add    esp,0xc
c000e32e:	c3                   	ret    
c000e32f:	90                   	nop

c000e330 <Serial::~Serial()>:
c000e330:	83 ec 0c             	sub    esp,0xc
c000e333:	83 ec 0c             	sub    esp,0xc
c000e336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e33a:	e8 cd ff ff ff       	call   c000e30c <Serial::~Serial()>
c000e33f:	83 c4 10             	add    esp,0x10
c000e342:	83 ec 08             	sub    esp,0x8
c000e345:	68 58 01 00 00       	push   0x158
c000e34a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e34e:	e8 c5 c4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	83 c4 0c             	add    esp,0xc
c000e359:	c3                   	ret    
c000e35a:	66 90                	xchg   ax,ax

c000e35c <Timer::Timer(char const*)>:
c000e35c:	83 ec 0c             	sub    esp,0xc
c000e35f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e363:	83 ec 08             	sub    esp,0x8
c000e366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e36a:	50                   	push   eax
c000e36b:	e8 ee e7 ff ff       	call   c000cb5e <Device::Device(char const*)>
c000e370:	83 c4 10             	add    esp,0x10
c000e373:	ba 50 1e 02 c0       	mov    edx,0xc0021e50
c000e378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e37c:	89 10                	mov    DWORD PTR [eax],edx
c000e37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e382:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e38c:	90                   	nop
c000e38d:	83 c4 0c             	add    esp,0xc
c000e390:	c3                   	ret    
c000e391:	90                   	nop
c000e392:	66 90                	xchg   ax,ax

c000e394 <Timer::~Timer()>:
c000e394:	83 ec 0c             	sub    esp,0xc
c000e397:	ba 50 1e 02 c0       	mov    edx,0xc0021e50
c000e39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a0:	89 10                	mov    DWORD PTR [eax],edx
c000e3a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a6:	83 ec 0c             	sub    esp,0xc
c000e3a9:	50                   	push   eax
c000e3aa:	e8 19 e5 ff ff       	call   c000c8c8 <Device::~Device()>
c000e3af:	83 c4 10             	add    esp,0x10
c000e3b2:	90                   	nop
c000e3b3:	83 c4 0c             	add    esp,0xc
c000e3b6:	c3                   	ret    
c000e3b7:	90                   	nop

c000e3b8 <Timer::~Timer()>:
c000e3b8:	83 ec 0c             	sub    esp,0xc
c000e3bb:	83 ec 0c             	sub    esp,0xc
c000e3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3c2:	e8 cd ff ff ff       	call   c000e394 <Timer::~Timer()>
c000e3c7:	83 c4 10             	add    esp,0x10
c000e3ca:	83 ec 08             	sub    esp,0x8
c000e3cd:	68 5c 01 00 00       	push   0x15c
c000e3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3d6:	e8 3d c4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e3db:	83 c4 10             	add    esp,0x10
c000e3de:	83 c4 0c             	add    esp,0xc
c000e3e1:	c3                   	ret    

c000e3e2 <Timer::read()>:
c000e3e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3e6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e3ec:	c3                   	ret    

c000e3ed <setupTimer(int)>:
c000e3ed:	53                   	push   ebx
c000e3ee:	83 ec 14             	sub    esp,0x14
c000e3f1:	68 5c 01 00 00       	push   0x15c
c000e3f6:	e8 bb 96 ff ff       	call   c0007ab6 <malloc>
c000e3fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e3fe:	89 c3                	mov    ebx,eax
c000e400:	e8 db 0b 01 00       	call   c001efe0 <PIT::PIT()>
c000e405:	58                   	pop    eax
c000e406:	5a                   	pop    edx
c000e407:	53                   	push   ebx
c000e408:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e40e:	e8 b3 e5 ff ff       	call   c000c9c6 <Device::addChild(Device*)>
c000e413:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e415:	6a 00                	push   0x0
c000e417:	6a 00                	push   0x0
c000e419:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e41d:	53                   	push   ebx
c000e41e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e421:	89 d8                	mov    eax,ebx
c000e423:	83 c4 28             	add    esp,0x28
c000e426:	5b                   	pop    ebx
c000e427:	c3                   	ret    

c000e428 <timerHandler(unsigned int)>:
c000e428:	56                   	push   esi
c000e429:	53                   	push   ebx
c000e42a:	51                   	push   ecx
c000e42b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e42f:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e435:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e43c:	0f 84 4a 01 00 00    	je     c000e58c <timerHandler(unsigned int)+0x164>
c000e442:	fa                   	cli    
c000e443:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e449:	83 ec 0c             	sub    esp,0xc
c000e44c:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e452:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e457:	e8 f4 18 01 00       	call   c001fd50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e45c:	83 c4 10             	add    esp,0x10
c000e45f:	84 c0                	test   al,al
c000e461:	0f 85 a1 00 00 00    	jne    c000e508 <timerHandler(unsigned int)+0xe0>
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e46f:	e8 f8 18 01 00       	call   c001fd6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e474:	83 c4 10             	add    esp,0x10
c000e477:	89 c6                	mov    esi,eax
c000e479:	8d 76 00             	lea    esi,[esi+0x0]
c000e47c:	83 ec 0c             	sub    esp,0xc
c000e47f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e484:	e8 e3 18 01 00       	call   c001fd6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e489:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e490:	89 c3                	mov    ebx,eax
c000e492:	e8 dd 18 01 00       	call   c001fd74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e497:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e49a:	83 c4 10             	add    esp,0x10
c000e49d:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e4a3:	77 23                	ja     c000e4c8 <timerHandler(unsigned int)+0xa0>
c000e4a5:	83 ec 0c             	sub    esp,0xc
c000e4a8:	53                   	push   ebx
c000e4a9:	e8 6e 81 00 00       	call   c001661c <unblockTask(ThreadControlBlock*)>
c000e4ae:	83 c4 10             	add    esp,0x10
c000e4b1:	39 de                	cmp    esi,ebx
c000e4b3:	75 27                	jne    c000e4dc <timerHandler(unsigned int)+0xb4>
c000e4b5:	83 ec 0c             	sub    esp,0xc
c000e4b8:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4bd:	e8 aa 18 01 00       	call   c001fd6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4c2:	89 c6                	mov    esi,eax
c000e4c4:	eb 12                	jmp    c000e4d8 <timerHandler(unsigned int)+0xb0>
c000e4c6:	66 90                	xchg   ax,ax
c000e4c8:	52                   	push   edx
c000e4c9:	52                   	push   edx
c000e4ca:	53                   	push   ebx
c000e4cb:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4d0:	e8 5b 19 01 00       	call   c001fe30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e4d5:	8d 76 00             	lea    esi,[esi+0x0]
c000e4d8:	83 c4 10             	add    esp,0x10
c000e4db:	90                   	nop
c000e4dc:	83 ec 0c             	sub    esp,0xc
c000e4df:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4e4:	e8 67 18 01 00       	call   c001fd50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4e9:	83 c4 10             	add    esp,0x10
c000e4ec:	84 c0                	test   al,al
c000e4ee:	75 18                	jne    c000e508 <timerHandler(unsigned int)+0xe0>
c000e4f0:	83 ec 0c             	sub    esp,0xc
c000e4f3:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4f8:	e8 6f 18 01 00       	call   c001fd6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4fd:	83 c4 10             	add    esp,0x10
c000e500:	39 f0                	cmp    eax,esi
c000e502:	0f 85 74 ff ff ff    	jne    c000e47c <timerHandler(unsigned int)+0x54>
c000e508:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e50d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e511:	74 41                	je     c000e554 <timerHandler(unsigned int)+0x12c>
c000e513:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e51a:	74 38                	je     c000e554 <timerHandler(unsigned int)+0x12c>
c000e51c:	fa                   	cli    
c000e51d:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e523:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e528:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e52e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e531:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e537:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e53a:	72 08                	jb     c000e544 <timerHandler(unsigned int)+0x11c>
c000e53c:	e8 c3 7b 00 00       	call   c0016104 <schedule()>
c000e541:	8d 76 00             	lea    esi,[esi+0x0]
c000e544:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e549:	48                   	dec    eax
c000e54a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e54f:	75 03                	jne    c000e554 <timerHandler(unsigned int)+0x12c>
c000e551:	fb                   	sti    
c000e552:	66 90                	xchg   ax,ax
c000e554:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e559:	48                   	dec    eax
c000e55a:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e55f:	75 1b                	jne    c000e57c <timerHandler(unsigned int)+0x154>
c000e561:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e568:	74 12                	je     c000e57c <timerHandler(unsigned int)+0x154>
c000e56a:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e574:	e8 8b 7b 00 00       	call   c0016104 <schedule()>
c000e579:	8d 76 00             	lea    esi,[esi+0x0]
c000e57c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e581:	48                   	dec    eax
c000e582:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e587:	75 03                	jne    c000e58c <timerHandler(unsigned int)+0x164>
c000e589:	fb                   	sti    
c000e58a:	66 90                	xchg   ax,ax
c000e58c:	58                   	pop    eax
c000e58d:	5b                   	pop    ebx
c000e58e:	5e                   	pop    esi
c000e58f:	c3                   	ret    

c000e590 <VCache::VCache(PhysicalDisk*)>:
c000e590:	53                   	push   ebx
c000e591:	83 ec 18             	sub    esp,0x18
c000e594:	ba 80 1e 02 c0       	mov    edx,0xc0021e80
c000e599:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e59d:	89 10                	mov    DWORD PTR [eax],edx
c000e59f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5a3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e5aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ae:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e5b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5b9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e5c0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e5c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5cb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e5d2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e5d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5dd:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e5e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e5ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5f0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e5f7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e5fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e602:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e60a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e60e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e612:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e616:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e61a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e621:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e629:	83 ec 0c             	sub    esp,0xc
c000e62c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e630:	e8 81 94 ff ff       	call   c0007ab6 <malloc>
c000e635:	83 c4 10             	add    esp,0x10
c000e638:	89 c3                	mov    ebx,eax
c000e63a:	83 ec 0c             	sub    esp,0xc
c000e63d:	53                   	push   ebx
c000e63e:	e8 5d 78 00 00       	call   c0015ea0 <Mutex::Mutex()>
c000e643:	83 c4 10             	add    esp,0x10
c000e646:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e64a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e64d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e651:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e655:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e658:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e65c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e663:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e667:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e66d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e671:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e674:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e678:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e67e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e684:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e688:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e68b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e68e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e692:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e696:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e69a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e6a0:	05 00 02 00 00       	add    eax,0x200
c000e6a5:	c1 e0 03             	shl    eax,0x3
c000e6a8:	83 ec 0c             	sub    esp,0xc
c000e6ab:	50                   	push   eax
c000e6ac:	e8 05 94 ff ff       	call   c0007ab6 <malloc>
c000e6b1:	83 c4 10             	add    esp,0x10
c000e6b4:	89 c2                	mov    edx,eax
c000e6b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e6bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6c1:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e6c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6cc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e6d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6d4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6da:	89 d0                	mov    eax,edx
c000e6dc:	c1 e0 02             	shl    eax,0x2
c000e6df:	01 d0                	add    eax,edx
c000e6e1:	c1 e0 04             	shl    eax,0x4
c000e6e4:	83 ec 0c             	sub    esp,0xc
c000e6e7:	50                   	push   eax
c000e6e8:	e8 c9 93 ff ff       	call   c0007ab6 <malloc>
c000e6ed:	83 c4 10             	add    esp,0x10
c000e6f0:	89 c2                	mov    edx,eax
c000e6f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6f6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e6f9:	90                   	nop
c000e6fa:	83 c4 18             	add    esp,0x18
c000e6fd:	5b                   	pop    ebx
c000e6fe:	c3                   	ret    
c000e6ff:	90                   	nop

c000e700 <VCache::invalidateReadBuffer()>:
c000e700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e704:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e70a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e70e:	c3                   	ret    
c000e70f:	90                   	nop

c000e710 <VCache::writeWriteBuffer()>:
c000e710:	53                   	push   ebx
c000e711:	83 ec 08             	sub    esp,0x8
c000e714:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e718:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e71c:	74 1e                	je     c000e73c <VCache::writeWriteBuffer()+0x2c>
c000e71e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e721:	83 ec 0c             	sub    esp,0xc
c000e724:	8b 10                	mov    edx,DWORD PTR [eax]
c000e726:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e729:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e72c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e72f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e732:	50                   	push   eax
c000e733:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e736:	83 c4 20             	add    esp,0x20
c000e739:	8d 76 00             	lea    esi,[esi+0x0]
c000e73c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e743:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e74a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e74e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e755:	83 c4 08             	add    esp,0x8
c000e758:	5b                   	pop    ebx
c000e759:	c3                   	ret    
c000e75a:	66 90                	xchg   ax,ax

c000e75c <VCache::~VCache()>:
c000e75c:	83 ec 0c             	sub    esp,0xc
c000e75f:	ba 80 1e 02 c0       	mov    edx,0xc0021e80
c000e764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e768:	89 10                	mov    DWORD PTR [eax],edx
c000e76a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e771:	0f b6 c0             	movzx  eax,al
c000e774:	85 c0                	test   eax,eax
c000e776:	74 10                	je     c000e788 <VCache::~VCache()+0x2c>
c000e778:	83 ec 0c             	sub    esp,0xc
c000e77b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e77f:	e8 8c ff ff ff       	call   c000e710 <VCache::writeWriteBuffer()>
c000e784:	83 c4 10             	add    esp,0x10
c000e787:	90                   	nop
c000e788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e78f:	83 ec 0c             	sub    esp,0xc
c000e792:	50                   	push   eax
c000e793:	e8 2e 93 ff ff       	call   c0007ac6 <free>
c000e798:	83 c4 10             	add    esp,0x10
c000e79b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e7a2:	83 ec 0c             	sub    esp,0xc
c000e7a5:	50                   	push   eax
c000e7a6:	e8 1b 93 ff ff       	call   c0007ac6 <free>
c000e7ab:	83 c4 10             	add    esp,0x10
c000e7ae:	90                   	nop
c000e7af:	83 c4 0c             	add    esp,0xc
c000e7b2:	c3                   	ret    
c000e7b3:	90                   	nop

c000e7b4 <VCache::~VCache()>:
c000e7b4:	83 ec 0c             	sub    esp,0xc
c000e7b7:	83 ec 0c             	sub    esp,0xc
c000e7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7be:	e8 99 ff ff ff       	call   c000e75c <VCache::~VCache()>
c000e7c3:	83 c4 10             	add    esp,0x10
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	6a 44                	push   0x44
c000e7cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7cf:	e8 44 c0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	83 c4 0c             	add    esp,0xc
c000e7da:	c3                   	ret    
c000e7db:	90                   	nop

c000e7dc <VCache::write(unsigned long long, int, void*)>:
c000e7dc:	55                   	push   ebp
c000e7dd:	57                   	push   edi
c000e7de:	56                   	push   esi
c000e7df:	53                   	push   ebx
c000e7e0:	83 ec 1c             	sub    esp,0x1c
c000e7e3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e7e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7eb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e7ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7f3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e7f7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e7fb:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e7ff:	74 07                	je     c000e808 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e801:	53                   	push   ebx
c000e802:	e8 f9 fe ff ff       	call   c000e700 <VCache::invalidateReadBuffer()>
c000e807:	58                   	pop    eax
c000e808:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e80c:	74 62                	je     c000e870 <VCache::write(unsigned long long, int, void*)+0x94>
c000e80e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e811:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e815:	99                   	cdq    
c000e816:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e81a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e81d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e820:	31 c1                	xor    ecx,eax
c000e822:	89 d0                	mov    eax,edx
c000e824:	89 ca                	mov    edx,ecx
c000e826:	31 e8                	xor    eax,ebp
c000e828:	09 c2                	or     edx,eax
c000e82a:	75 38                	jne    c000e864 <VCache::write(unsigned long long, int, void*)+0x88>
c000e82c:	83 ff 01             	cmp    edi,0x1
c000e82f:	75 33                	jne    c000e864 <VCache::write(unsigned long long, int, void*)+0x88>
c000e831:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e834:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e838:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e83e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e841:	0f af c8             	imul   ecx,eax
c000e844:	01 cf                	add    edi,ecx
c000e846:	89 c1                	mov    ecx,eax
c000e848:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e84a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e84d:	40                   	inc    eax
c000e84e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e851:	83 f8 50             	cmp    eax,0x50
c000e854:	75 6a                	jne    c000e8c0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e856:	83 ec 0c             	sub    esp,0xc
c000e859:	53                   	push   ebx
c000e85a:	e8 b1 fe ff ff       	call   c000e710 <VCache::writeWriteBuffer()>
c000e85f:	83 c4 10             	add    esp,0x10
c000e862:	eb 5c                	jmp    c000e8c0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e864:	83 ec 0c             	sub    esp,0xc
c000e867:	53                   	push   ebx
c000e868:	e8 a3 fe ff ff       	call   c000e710 <VCache::writeWriteBuffer()>
c000e86d:	83 c4 10             	add    esp,0x10
c000e870:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e873:	83 ff 4f             	cmp    edi,0x4f
c000e876:	7f 20                	jg     c000e898 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e878:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e87b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e87f:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e882:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e885:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e889:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e88c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e892:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e894:	eb 2a                	jmp    c000e8c0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e896:	66 90                	xchg   ax,ax
c000e898:	8b 10                	mov    edx,DWORD PTR [eax]
c000e89a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e89e:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e8a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8a6:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e8aa:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e8ae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e8b2:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e8b5:	83 c4 1c             	add    esp,0x1c
c000e8b8:	5b                   	pop    ebx
c000e8b9:	5e                   	pop    esi
c000e8ba:	5f                   	pop    edi
c000e8bb:	5d                   	pop    ebp
c000e8bc:	ff e0                	jmp    eax
c000e8be:	66 90                	xchg   ax,ax
c000e8c0:	83 c4 1c             	add    esp,0x1c
c000e8c3:	31 c0                	xor    eax,eax
c000e8c5:	5b                   	pop    ebx
c000e8c6:	5e                   	pop    esi
c000e8c7:	5f                   	pop    edi
c000e8c8:	5d                   	pop    ebp
c000e8c9:	c3                   	ret    

c000e8ca <VCache::read(unsigned long long, int, void*)>:
c000e8ca:	55                   	push   ebp
c000e8cb:	57                   	push   edi
c000e8cc:	56                   	push   esi
c000e8cd:	53                   	push   ebx
c000e8ce:	83 ec 1c             	sub    esp,0x1c
c000e8d1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8d5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8d9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e8dd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e8e1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e8e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e8e9:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e8ed:	74 0d                	je     c000e8fc <VCache::read(unsigned long long, int, void*)+0x32>
c000e8ef:	83 ec 0c             	sub    esp,0xc
c000e8f2:	57                   	push   edi
c000e8f3:	e8 18 fe ff ff       	call   c000e710 <VCache::writeWriteBuffer()>
c000e8f8:	83 c4 10             	add    esp,0x10
c000e8fb:	90                   	nop
c000e8fc:	83 fd 01             	cmp    ebp,0x1
c000e8ff:	0f 85 93 00 00 00    	jne    c000e998 <VCache::read(unsigned long long, int, void*)+0xce>
c000e905:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e908:	89 04 24             	mov    DWORD PTR [esp],eax
c000e90b:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e912:	0f 85 80 00 00 00    	jne    c000e998 <VCache::read(unsigned long long, int, void*)+0xce>
c000e918:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e91b:	89 e9                	mov    ecx,ebp
c000e91d:	f7 d9                	neg    ecx
c000e91f:	89 c8                	mov    eax,ecx
c000e921:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e925:	c1 f8 1f             	sar    eax,0x1f
c000e928:	21 d9                	and    ecx,ebx
c000e92a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e92e:	89 c8                	mov    eax,ecx
c000e930:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e934:	21 f1                	and    ecx,esi
c000e936:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e93a:	89 ca                	mov    edx,ecx
c000e93c:	74 2e                	je     c000e96c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e93e:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e941:	75 29                	jne    c000e96c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e943:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e946:	75 24                	jne    c000e96c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e948:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e94b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e951:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e954:	8d 70 ff             	lea    esi,[eax-0x1]
c000e957:	21 f3                	and    ebx,esi
c000e959:	0f af d9             	imul   ebx,ecx
c000e95c:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e95f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e963:	89 de                	mov    esi,ebx
c000e965:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e967:	31 c0                	xor    eax,eax
c000e969:	eb 61                	jmp    c000e9cc <VCache::read(unsigned long long, int, void*)+0x102>
c000e96b:	90                   	nop
c000e96c:	83 ec 0c             	sub    esp,0xc
c000e96f:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e973:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e977:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e97a:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e97d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e97f:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e982:	55                   	push   ebp
c000e983:	52                   	push   edx
c000e984:	50                   	push   eax
c000e985:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e989:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e98c:	83 c4 20             	add    esp,0x20
c000e98f:	85 c0                	test   eax,eax
c000e991:	75 39                	jne    c000e9cc <VCache::read(unsigned long long, int, void*)+0x102>
c000e993:	eb b3                	jmp    c000e948 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e995:	8d 76 00             	lea    esi,[esi+0x0]
c000e998:	83 ec 0c             	sub    esp,0xc
c000e99b:	57                   	push   edi
c000e99c:	e8 5f fd ff ff       	call   c000e700 <VCache::invalidateReadBuffer()>
c000e9a1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e9a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9aa:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e9ae:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e9b2:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e9b6:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e9ba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9be:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e9c1:	83 c4 2c             	add    esp,0x2c
c000e9c4:	5b                   	pop    ebx
c000e9c5:	5e                   	pop    esi
c000e9c6:	5f                   	pop    edi
c000e9c7:	5d                   	pop    ebp
c000e9c8:	ff e0                	jmp    eax
c000e9ca:	66 90                	xchg   ax,ax
c000e9cc:	83 c4 1c             	add    esp,0x1c
c000e9cf:	5b                   	pop    ebx
c000e9d0:	5e                   	pop    esi
c000e9d1:	5f                   	pop    edi
c000e9d2:	5d                   	pop    ebp
c000e9d3:	c3                   	ret    

c000e9d4 <Video::putrect(int, int, int, int, unsigned int)>:
c000e9d4:	55                   	push   ebp
c000e9d5:	57                   	push   edi
c000e9d6:	56                   	push   esi
c000e9d7:	53                   	push   ebx
c000e9d8:	83 ec 1c             	sub    esp,0x1c
c000e9db:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e9df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e9e3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e9e7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e9eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e9ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9f3:	01 df                	add    edi,ebx
c000e9f5:	39 fb                	cmp    ebx,edi
c000e9f7:	7d 1f                	jge    c000ea18 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e9f9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e9fd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ea01:	7d 12                	jge    c000ea15 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ea03:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea05:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea09:	53                   	push   ebx
c000ea0a:	55                   	push   ebp
c000ea0b:	45                   	inc    ebp
c000ea0c:	56                   	push   esi
c000ea0d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea10:	83 c4 10             	add    esp,0x10
c000ea13:	eb e8                	jmp    c000e9fd <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea15:	43                   	inc    ebx
c000ea16:	eb dd                	jmp    c000e9f5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea18:	83 c4 1c             	add    esp,0x1c
c000ea1b:	5b                   	pop    ebx
c000ea1c:	5e                   	pop    esi
c000ea1d:	5f                   	pop    edi
c000ea1e:	5d                   	pop    ebp
c000ea1f:	c3                   	ret    

c000ea20 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ea20:	55                   	push   ebp
c000ea21:	57                   	push   edi
c000ea22:	31 ff                	xor    edi,edi
c000ea24:	56                   	push   esi
c000ea25:	53                   	push   ebx
c000ea26:	83 ec 1c             	sub    esp,0x1c
c000ea29:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ea2d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ea31:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ea38:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ea3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea41:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ea45:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ea49:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ea4c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea50:	01 f9                	add    ecx,edi
c000ea52:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ea56:	7d 2f                	jge    c000ea87 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ea58:	31 f6                	xor    esi,esi
c000ea5a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea5e:	01 f2                	add    edx,esi
c000ea60:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ea64:	7d 1a                	jge    c000ea80 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ea66:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ea69:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ea6c:	46                   	inc    esi
c000ea6d:	51                   	push   ecx
c000ea6e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ea72:	52                   	push   edx
c000ea73:	55                   	push   ebp
c000ea74:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea77:	83 c4 10             	add    esp,0x10
c000ea7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea7e:	eb da                	jmp    c000ea5a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ea80:	47                   	inc    edi
c000ea81:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ea85:	eb c5                	jmp    c000ea4c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ea87:	83 c4 1c             	add    esp,0x1c
c000ea8a:	5b                   	pop    ebx
c000ea8b:	5e                   	pop    esi
c000ea8c:	5f                   	pop    edi
c000ea8d:	5d                   	pop    ebp
c000ea8e:	c3                   	ret    
c000ea8f:	90                   	nop

c000ea90 <Video::blit(unsigned int*, int, int, int, int)>:
c000ea90:	55                   	push   ebp
c000ea91:	57                   	push   edi
c000ea92:	56                   	push   esi
c000ea93:	53                   	push   ebx
c000ea94:	83 ec 1c             	sub    esp,0x1c
c000ea97:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea9b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea9f:	85 c0                	test   eax,eax
c000eaa1:	79 02                	jns    c000eaa5 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000eaa3:	31 c0                	xor    eax,eax
c000eaa5:	c1 e0 02             	shl    eax,0x2
c000eaa8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000eaac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eab0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eab4:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000eab8:	39 d8                	cmp    eax,ebx
c000eaba:	7e 49                	jle    c000eb05 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eabc:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eac2:	7c 41                	jl     c000eb05 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eac4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eac8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eacc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ead0:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000ead4:	39 f9                	cmp    ecx,edi
c000ead6:	7e 22                	jle    c000eafa <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000ead8:	83 c5 04             	add    ebp,0x4
c000eadb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eae1:	7c 14                	jl     c000eaf7 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000eae3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eae5:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000eae8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eaec:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eaf0:	56                   	push   esi
c000eaf1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eaf4:	83 c4 10             	add    esp,0x10
c000eaf7:	47                   	inc    edi
c000eaf8:	eb d2                	jmp    c000eacc <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000eafa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eafe:	43                   	inc    ebx
c000eaff:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000eb03:	eb ab                	jmp    c000eab0 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000eb05:	83 c4 1c             	add    esp,0x1c
c000eb08:	5b                   	pop    ebx
c000eb09:	5e                   	pop    esi
c000eb0a:	5f                   	pop    edi
c000eb0b:	5d                   	pop    ebp
c000eb0c:	c3                   	ret    
c000eb0d:	90                   	nop

c000eb0e <Video::clearScreen(unsigned int)>:
c000eb0e:	57                   	push   edi
c000eb0f:	56                   	push   esi
c000eb10:	53                   	push   ebx
c000eb11:	31 db                	xor    ebx,ebx
c000eb13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb17:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb1d:	7e 1f                	jle    c000eb3e <Video::clearScreen(unsigned int)+0x30>
c000eb1f:	31 ff                	xor    edi,edi
c000eb21:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb27:	7e 12                	jle    c000eb3b <Video::clearScreen(unsigned int)+0x2d>
c000eb29:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb2f:	53                   	push   ebx
c000eb30:	57                   	push   edi
c000eb31:	47                   	inc    edi
c000eb32:	56                   	push   esi
c000eb33:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb36:	83 c4 10             	add    esp,0x10
c000eb39:	eb e6                	jmp    c000eb21 <Video::clearScreen(unsigned int)+0x13>
c000eb3b:	43                   	inc    ebx
c000eb3c:	eb d9                	jmp    c000eb17 <Video::clearScreen(unsigned int)+0x9>
c000eb3e:	5b                   	pop    ebx
c000eb3f:	5e                   	pop    esi
c000eb40:	5f                   	pop    edi
c000eb41:	c3                   	ret    

c000eb42 <Video::putpixel(int, int, unsigned int)>:
c000eb42:	c7 44 24 04 88 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021e88
c000eb4a:	e9 d0 2a 00 00       	jmp    c001161f <KePanic(char const*)>
c000eb4f:	90                   	nop

c000eb50 <Video::readPixelApprox(int, int)>:
c000eb50:	83 ec 18             	sub    esp,0x18
c000eb53:	68 a9 1e 02 c0       	push   0xc0021ea9
c000eb58:	e8 c2 2a 00 00       	call   c001161f <KePanic(char const*)>
c000eb5d:	31 c0                	xor    eax,eax
c000eb5f:	83 c4 1c             	add    esp,0x1c
c000eb62:	c3                   	ret    
c000eb63:	90                   	nop

c000eb64 <Video::Video(char const*)>:
c000eb64:	83 ec 0c             	sub    esp,0xc
c000eb67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb6b:	83 ec 08             	sub    esp,0x8
c000eb6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb72:	50                   	push   eax
c000eb73:	e8 e6 df ff ff       	call   c000cb5e <Device::Device(char const*)>
c000eb78:	83 c4 10             	add    esp,0x10
c000eb7b:	ba 24 1f 02 c0       	mov    edx,0xc0021f24
c000eb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb84:	89 10                	mov    DWORD PTR [eax],edx
c000eb86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb8a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000eb94:	90                   	nop
c000eb95:	83 c4 0c             	add    esp,0xc
c000eb98:	c3                   	ret    
c000eb99:	90                   	nop

c000eb9a <Video::~Video()>:
c000eb9a:	83 ec 0c             	sub    esp,0xc
c000eb9d:	ba 24 1f 02 c0       	mov    edx,0xc0021f24
c000eba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eba6:	89 10                	mov    DWORD PTR [eax],edx
c000eba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebac:	83 ec 0c             	sub    esp,0xc
c000ebaf:	50                   	push   eax
c000ebb0:	e8 13 dd ff ff       	call   c000c8c8 <Device::~Device()>
c000ebb5:	83 c4 10             	add    esp,0x10
c000ebb8:	90                   	nop
c000ebb9:	83 c4 0c             	add    esp,0xc
c000ebbc:	c3                   	ret    
c000ebbd:	90                   	nop

c000ebbe <Video::~Video()>:
c000ebbe:	83 ec 0c             	sub    esp,0xc
c000ebc1:	83 ec 0c             	sub    esp,0xc
c000ebc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebc8:	e8 cd ff ff ff       	call   c000eb9a <Video::~Video()>
c000ebcd:	83 c4 10             	add    esp,0x10
c000ebd0:	83 ec 08             	sub    esp,0x8
c000ebd3:	68 64 01 00 00       	push   0x164
c000ebd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebdc:	e8 37 bc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ebe1:	83 c4 10             	add    esp,0x10
c000ebe4:	83 c4 0c             	add    esp,0xc
c000ebe7:	c3                   	ret    

c000ebe8 <Video::isMonochrome()>:
c000ebe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebec:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ebf2:	c3                   	ret    
c000ebf3:	90                   	nop

c000ebf4 <Video::getWidth()>:
c000ebf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebf8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ebfe:	c3                   	ret    
c000ebff:	90                   	nop

c000ec00 <Video::getHeight()>:
c000ec00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec04:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec0a:	c3                   	ret    
c000ec0b:	90                   	nop

c000ec0c <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec0c:	55                   	push   ebp
c000ec0d:	57                   	push   edi
c000ec0e:	56                   	push   esi
c000ec0f:	53                   	push   ebx
c000ec10:	83 ec 2c             	sub    esp,0x2c
c000ec13:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec17:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ec1b:	83 f8 01             	cmp    eax,0x1
c000ec1e:	19 c9                	sbb    ecx,ecx
c000ec20:	31 db                	xor    ebx,ebx
c000ec22:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ec26:	89 cd                	mov    ebp,ecx
c000ec28:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ec30:	f7 d5                	not    ebp
c000ec32:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000ec38:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec3c:	01 d8                	add    eax,ebx
c000ec3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec42:	56                   	push   esi
c000ec43:	e8 b8 ff ff ff       	call   c000ec00 <Video::getHeight()>
c000ec48:	59                   	pop    ecx
c000ec49:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ec4d:	7e 70                	jle    c000ecbf <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ec4f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec53:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000ec57:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ec5a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec5e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec62:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ec69:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec6d:	89 f8                	mov    eax,edi
c000ec6f:	83 c0 20             	add    eax,0x20
c000ec72:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec76:	56                   	push   esi
c000ec77:	e8 78 ff ff ff       	call   c000ebf4 <Video::getWidth()>
c000ec7c:	5a                   	pop    edx
c000ec7d:	39 c7                	cmp    edi,eax
c000ec7f:	7d 34                	jge    c000ecb5 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ec81:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ec86:	74 05                	je     c000ec8d <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ec88:	8b 06                	mov    eax,DWORD PTR [esi]
c000ec8a:	55                   	push   ebp
c000ec8b:	eb 0d                	jmp    c000ec9a <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ec8d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ec92:	74 12                	je     c000eca6 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ec94:	8b 06                	mov    eax,DWORD PTR [esi]
c000ec96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec9a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec9e:	57                   	push   edi
c000ec9f:	56                   	push   esi
c000eca0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eca3:	83 c4 10             	add    esp,0x10
c000eca6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ecaa:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ecae:	47                   	inc    edi
c000ecaf:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ecb3:	75 c1                	jne    c000ec76 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ecb5:	43                   	inc    ebx
c000ecb6:	83 fb 20             	cmp    ebx,0x20
c000ecb9:	0f 85 79 ff ff ff    	jne    c000ec38 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ecbf:	83 c4 2c             	add    esp,0x2c
c000ecc2:	5b                   	pop    ebx
c000ecc3:	5e                   	pop    esi
c000ecc4:	5f                   	pop    edi
c000ecc5:	5d                   	pop    ebp
c000ecc6:	c3                   	ret    
c000ecc7:	90                   	nop

c000ecc8 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ecc8:	55                   	push   ebp
c000ecc9:	57                   	push   edi
c000ecca:	56                   	push   esi
c000eccb:	53                   	push   ebx
c000eccc:	83 ec 28             	sub    esp,0x28
c000eccf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ecd3:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ecd7:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ecdb:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ecdf:	c1 e6 08             	shl    esi,0x8
c000ece2:	01 c6                	add    esi,eax
c000ece4:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ece8:	c1 e0 08             	shl    eax,0x8
c000eceb:	01 d0                	add    eax,edx
c000eced:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecf5:	0f af c6             	imul   eax,esi
c000ecf8:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ecff:	50                   	push   eax
c000ed00:	e8 b1 8d ff ff       	call   c0007ab6 <malloc>
c000ed05:	83 c4 10             	add    esp,0x10
c000ed08:	89 c7                	mov    edi,eax
c000ed0a:	85 c0                	test   eax,eax
c000ed0c:	75 10                	jne    c000ed1e <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed0e:	83 ec 0c             	sub    esp,0xc
c000ed11:	68 d4 1e 02 c0       	push   0xc0021ed4
c000ed16:	e8 04 29 00 00       	call   c001161f <KePanic(char const*)>
c000ed1b:	83 c4 10             	add    esp,0x10
c000ed1e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ed22:	ba 12 00 00 00       	mov    edx,0x12
c000ed27:	85 c0                	test   eax,eax
c000ed29:	74 11                	je     c000ed3c <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ed2b:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ed2f:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ed33:	c1 fa 03             	sar    edx,0x3
c000ed36:	0f af d1             	imul   edx,ecx
c000ed39:	83 c2 12             	add    edx,0x12
c000ed3c:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ed40:	74 04                	je     c000ed46 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ed42:	85 f6                	test   esi,esi
c000ed44:	75 12                	jne    c000ed58 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ed46:	83 ec 0c             	sub    esp,0xc
c000ed49:	68 e4 1e 02 c0       	push   0xc0021ee4
c000ed4e:	e8 f2 bb ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ed53:	e9 b8 00 00 00       	jmp    c000ee10 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ed58:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ed5c:	83 f9 02             	cmp    ecx,0x2
c000ed5f:	0f 85 96 00 00 00    	jne    c000edfb <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ed65:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ed6a:	75 0e                	jne    c000ed7a <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed6c:	85 c0                	test   eax,eax
c000ed6e:	75 0a                	jne    c000ed7a <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed70:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ed73:	83 e8 18             	sub    eax,0x18
c000ed76:	a8 f7                	test   al,0xf7
c000ed78:	74 0a                	je     c000ed84 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ed7a:	83 ec 0c             	sub    esp,0xc
c000ed7d:	68 f9 1e 02 c0       	push   0xc0021ef9
c000ed82:	eb 7f                	jmp    c000ee03 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ed84:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ed8c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ed94:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000ed98:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eda0:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000eda4:	75 0c                	jne    c000edb2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000eda6:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000edab:	c1 e0 18             	shl    eax,0x18
c000edae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000edb2:	45                   	inc    ebp
c000edb3:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000edb8:	c1 e1 10             	shl    ecx,0x10
c000edbb:	89 c8                	mov    eax,ecx
c000edbd:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000edc2:	c1 e1 08             	shl    ecx,0x8
c000edc5:	09 c1                	or     ecx,eax
c000edc7:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000edcb:	09 c1                	or     ecx,eax
c000edcd:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000edd1:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000edd5:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000edd9:	c1 f8 03             	sar    eax,0x3
c000eddc:	01 c2                	add    edx,eax
c000edde:	89 e8                	mov    eax,ebp
c000ede0:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ede4:	39 c6                	cmp    esi,eax
c000ede6:	7f b0                	jg     c000ed98 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ede8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000edec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edf0:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000edf3:	7e 22                	jle    c000ee17 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000edf5:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000edf9:	eb 99                	jmp    c000ed94 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000edfb:	50                   	push   eax
c000edfc:	50                   	push   eax
c000edfd:	51                   	push   ecx
c000edfe:	68 07 1f 02 c0       	push   0xc0021f07
c000ee03:	e8 3d bb ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ee08:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ee0b:	e8 b6 8c ff ff       	call   c0007ac6 <free>
c000ee10:	83 c4 10             	add    esp,0x10
c000ee13:	31 ff                	xor    edi,edi
c000ee15:	eb 0f                	jmp    c000ee26 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ee17:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee1b:	89 30                	mov    DWORD PTR [eax],esi
c000ee1d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ee24:	89 30                	mov    DWORD PTR [eax],esi
c000ee26:	83 c4 1c             	add    esp,0x1c
c000ee29:	89 f8                	mov    eax,edi
c000ee2b:	5b                   	pop    ebx
c000ee2c:	5e                   	pop    esi
c000ee2d:	5f                   	pop    edi
c000ee2e:	5d                   	pop    ebp
c000ee2f:	c3                   	ret    

c000ee30 <Video::putTGA(int, int, unsigned char*, int)>:
c000ee30:	55                   	push   ebp
c000ee31:	57                   	push   edi
c000ee32:	56                   	push   esi
c000ee33:	53                   	push   ebx
c000ee34:	83 ec 28             	sub    esp,0x28
c000ee37:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ee3b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee3f:	50                   	push   eax
c000ee40:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee44:	50                   	push   eax
c000ee45:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee49:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee4d:	56                   	push   esi
c000ee4e:	e8 75 fe ff ff       	call   c000ecc8 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ee53:	83 c4 20             	add    esp,0x20
c000ee56:	85 c0                	test   eax,eax
c000ee58:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ee5c:	74 35                	je     c000ee93 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee5e:	89 c7                	mov    edi,eax
c000ee60:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee64:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ee68:	39 d8                	cmp    eax,ebx
c000ee6a:	7e 27                	jle    c000ee93 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee6c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ee70:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee74:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ee78:	39 e8                	cmp    eax,ebp
c000ee7a:	7e 14                	jle    c000ee90 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ee7c:	8b 06                	mov    eax,DWORD PTR [esi]
c000ee7e:	83 c7 04             	add    edi,0x4
c000ee81:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000ee84:	53                   	push   ebx
c000ee85:	55                   	push   ebp
c000ee86:	45                   	inc    ebp
c000ee87:	56                   	push   esi
c000ee88:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ee8b:	83 c4 10             	add    esp,0x10
c000ee8e:	eb e0                	jmp    c000ee70 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ee90:	43                   	inc    ebx
c000ee91:	eb cd                	jmp    c000ee60 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ee93:	83 c4 1c             	add    esp,0x1c
c000ee96:	5b                   	pop    ebx
c000ee97:	5e                   	pop    esi
c000ee98:	5f                   	pop    edi
c000ee99:	5d                   	pop    ebp
c000ee9a:	c3                   	ret    
c000ee9b:	90                   	nop

c000ee9c <ACPI::close(int, int, void*)>:
c000ee9c:	83 ec 1c             	sub    esp,0x1c
c000ee9f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eea7:	74 0b                	je     c000eeb4 <ACPI::close(int, int, void*)+0x18>
c000eea9:	b8 00 00 00 00       	mov    eax,0x0
c000eeae:	e9 99 00 00 00       	jmp    c000ef4c <ACPI::close(int, int, void*)+0xb0>
c000eeb3:	90                   	nop
c000eeb4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eeb9:	75 29                	jne    c000eee4 <ACPI::close(int, int, void*)+0x48>
c000eebb:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000eec0:	85 c0                	test   eax,eax
c000eec2:	74 08                	je     c000eecc <ACPI::close(int, int, void*)+0x30>
c000eec4:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000eec9:	ff d0                	call   eax
c000eecb:	90                   	nop
c000eecc:	83 ec 0c             	sub    esp,0xc
c000eecf:	68 68 1f 02 c0       	push   0xc0021f68
c000eed4:	e8 46 27 00 00       	call   c001161f <KePanic(char const*)>
c000eed9:	83 c4 10             	add    esp,0x10
c000eedc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eee1:	eb 69                	jmp    c000ef4c <ACPI::close(int, int, void*)+0xb0>
c000eee3:	90                   	nop
c000eee4:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eee9:	75 59                	jne    c000ef44 <ACPI::close(int, int, void*)+0xa8>
c000eeeb:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000eef0:	85 c0                	test   eax,eax
c000eef2:	74 08                	je     c000eefc <ACPI::close(int, int, void*)+0x60>
c000eef4:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000eef9:	ff d0                	call   eax
c000eefb:	90                   	nop
c000eefc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ef01:	8d 76 00             	lea    esi,[esi+0x0]
c000ef04:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ef09:	83 e0 02             	and    eax,0x2
c000ef0c:	74 1e                	je     c000ef2c <ACPI::close(int, int, void*)+0x90>
c000ef0e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ef15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef19:	89 c2                	mov    edx,eax
c000ef1b:	ec                   	in     al,dx
c000ef1c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ef20:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ef24:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ef28:	eb da                	jmp    c000ef04 <ACPI::close(int, int, void*)+0x68>
c000ef2a:	66 90                	xchg   ax,ax
c000ef2c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ef33:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ef38:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ef3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef40:	ee                   	out    dx,al
c000ef41:	8d 76 00             	lea    esi,[esi+0x0]
c000ef44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef49:	8d 76 00             	lea    esi,[esi+0x0]
c000ef4c:	83 c4 1c             	add    esp,0x1c
c000ef4f:	c3                   	ret    

c000ef50 <findRSDP()>:
c000ef50:	83 ec 1c             	sub    esp,0x1c
c000ef53:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef58:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef5e:	83 e0 04             	and    eax,0x4
c000ef61:	0f b6 c0             	movzx  eax,al
c000ef64:	85 c0                	test   eax,eax
c000ef66:	75 08                	jne    c000ef70 <findRSDP()+0x20>
c000ef68:	b8 00 00 00 00       	mov    eax,0x0
c000ef6d:	eb 75                	jmp    c000efe4 <findRSDP()+0x94>
c000ef6f:	90                   	nop
c000ef70:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000ef75:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ef7a:	7f 1c                	jg     c000ef98 <findRSDP()+0x48>
c000ef7c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef81:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ef87:	83 e2 fb             	and    edx,0xfffffffb
c000ef8a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ef90:	b8 00 00 00 00       	mov    eax,0x0
c000ef95:	eb 4d                	jmp    c000efe4 <findRSDP()+0x94>
c000ef97:	90                   	nop
c000ef98:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000efa0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000efa8:	77 32                	ja     c000efdc <findRSDP()+0x8c>
c000efaa:	83 ec 04             	sub    esp,0x4
c000efad:	6a 08                	push   0x8
c000efaf:	68 03 20 02 c0       	push   0xc0022003
c000efb4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000efb8:	e8 c3 13 ff ff       	call   c0000380 <memcmp>
c000efbd:	83 c4 10             	add    esp,0x10
c000efc0:	85 c0                	test   eax,eax
c000efc2:	0f 94 c0             	sete   al
c000efc5:	0f b6 c0             	movzx  eax,al
c000efc8:	85 c0                	test   eax,eax
c000efca:	74 08                	je     c000efd4 <findRSDP()+0x84>
c000efcc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efd0:	eb 12                	jmp    c000efe4 <findRSDP()+0x94>
c000efd2:	66 90                	xchg   ax,ax
c000efd4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000efd9:	eb c5                	jmp    c000efa0 <findRSDP()+0x50>
c000efdb:	90                   	nop
c000efdc:	b8 00 00 00 00       	mov    eax,0x0
c000efe1:	8d 76 00             	lea    esi,[esi+0x0]
c000efe4:	83 c4 1c             	add    esp,0x1c
c000efe7:	c3                   	ret    

c000efe8 <loadACPITables(unsigned char*)>:
c000efe8:	57                   	push   edi
c000efe9:	56                   	push   esi
c000efea:	53                   	push   ebx
c000efeb:	83 ec 60             	sub    esp,0x60
c000efee:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000eff3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eff9:	83 e0 04             	and    eax,0x4
c000effc:	0f b6 c0             	movzx  eax,al
c000efff:	85 c0                	test   eax,eax
c000f001:	0f 84 41 02 00 00    	je     c000f248 <loadACPITables(unsigned char*)+0x260>
c000f007:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f00c:	0f b6 c0             	movzx  eax,al
c000f00f:	85 c0                	test   eax,eax
c000f011:	74 79                	je     c000f08c <loadACPITables(unsigned char*)+0xa4>
c000f013:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f017:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f01b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f01f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f022:	83 e8 24             	sub    eax,0x24
c000f025:	c1 e8 03             	shr    eax,0x3
c000f028:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f02c:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f034:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f038:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f03c:	0f 8d ba 00 00 00    	jge    c000f0fc <loadACPITables(unsigned char*)+0x114>
c000f042:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f046:	83 c0 24             	add    eax,0x24
c000f049:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f04d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f051:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f055:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f059:	c1 e0 03             	shl    eax,0x3
c000f05c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f060:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f064:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f067:	8b 00                	mov    eax,DWORD PTR [eax]
c000f069:	89 c1                	mov    ecx,eax
c000f06b:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f070:	8d 50 01             	lea    edx,[eax+0x1]
c000f073:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f079:	89 ca                	mov    edx,ecx
c000f07b:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f082:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f087:	eb ab                	jmp    c000f034 <loadACPITables(unsigned char*)+0x4c>
c000f089:	8d 76 00             	lea    esi,[esi+0x0]
c000f08c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f090:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f094:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f098:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f09b:	83 e8 24             	sub    eax,0x24
c000f09e:	c1 e8 02             	shr    eax,0x2
c000f0a1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f0a5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f0ad:	8d 76 00             	lea    esi,[esi+0x0]
c000f0b0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f0b4:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f0b8:	7d 42                	jge    c000f0fc <loadACPITables(unsigned char*)+0x114>
c000f0ba:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0be:	83 c0 24             	add    eax,0x24
c000f0c1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f0c5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f0c9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f0cd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f0d1:	c1 e0 02             	shl    eax,0x2
c000f0d4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f0d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f0dc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f0de:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0e3:	8d 50 01             	lea    edx,[eax+0x1]
c000f0e6:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f0ec:	89 ca                	mov    edx,ecx
c000f0ee:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f0f5:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f0fa:	eb b4                	jmp    c000f0b0 <loadACPITables(unsigned char*)+0xc8>
c000f0fc:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f104:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f109:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f10d:	0f 8d 39 01 00 00    	jge    c000f24c <loadACPITables(unsigned char*)+0x264>
c000f113:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f117:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f11e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f122:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f126:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f12a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f12e:	25 ff 0f 00 00       	and    eax,0xfff
c000f133:	89 c6                	mov    esi,eax
c000f135:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f13b:	83 ec 0c             	sub    esp,0xc
c000f13e:	6a 01                	push   0x1
c000f140:	e8 c8 a4 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f145:	83 c4 10             	add    esp,0x10
c000f148:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f14c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f152:	83 ec 0c             	sub    esp,0xc
c000f155:	6a 01                	push   0x1
c000f157:	6a 01                	push   0x1
c000f159:	50                   	push   eax
c000f15a:	52                   	push   edx
c000f15b:	53                   	push   ebx
c000f15c:	e8 b9 ad ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f161:	83 c4 20             	add    esp,0x20
c000f164:	09 f0                	or     eax,esi
c000f166:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f16a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f16e:	c1 e0 03             	shl    eax,0x3
c000f171:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f176:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f17a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f17e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f182:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f18a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f18e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f192:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f196:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f19a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f19e:	89 c6                	mov    esi,eax
c000f1a0:	89 d7                	mov    edi,edx
c000f1a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f1a4:	89 c8                	mov    eax,ecx
c000f1a6:	89 fa                	mov    edx,edi
c000f1a8:	89 f3                	mov    ebx,esi
c000f1aa:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f1ae:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f1b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f1b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f1bd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f1c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1c5:	05 00 10 00 00       	add    eax,0x1000
c000f1ca:	c1 e8 0c             	shr    eax,0xc
c000f1cd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f1d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f1d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1dd:	25 ff 0f 00 00       	and    eax,0xfff
c000f1e2:	89 c6                	mov    esi,eax
c000f1e4:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1ea:	83 ec 0c             	sub    esp,0xc
c000f1ed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1f1:	e8 17 a4 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f1f6:	83 c4 10             	add    esp,0x10
c000f1f9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1fd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f203:	83 ec 0c             	sub    esp,0xc
c000f206:	6a 01                	push   0x1
c000f208:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f20c:	50                   	push   eax
c000f20d:	52                   	push   edx
c000f20e:	53                   	push   ebx
c000f20f:	e8 06 ad ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f214:	83 c4 20             	add    esp,0x20
c000f217:	09 f0                	or     eax,esi
c000f219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f21d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f221:	83 ec 0c             	sub    esp,0xc
c000f224:	50                   	push   eax
c000f225:	e8 01 a7 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000f22a:	83 c4 10             	add    esp,0x10
c000f22d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f231:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f235:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f23c:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f241:	e9 be fe ff ff       	jmp    c000f104 <loadACPITables(unsigned char*)+0x11c>
c000f246:	66 90                	xchg   ax,ax
c000f248:	90                   	nop
c000f249:	8d 76 00             	lea    esi,[esi+0x0]
c000f24c:	83 c4 60             	add    esp,0x60
c000f24f:	5b                   	pop    ebx
c000f250:	5e                   	pop    esi
c000f251:	5f                   	pop    edi
c000f252:	c3                   	ret    
c000f253:	90                   	nop

c000f254 <findRSDT(unsigned char*)>:
c000f254:	57                   	push   edi
c000f255:	56                   	push   esi
c000f256:	53                   	push   ebx
c000f257:	83 ec 50             	sub    esp,0x50
c000f25a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f25f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f265:	83 e0 04             	and    eax,0x4
c000f268:	0f b6 c0             	movzx  eax,al
c000f26b:	85 c0                	test   eax,eax
c000f26d:	75 0d                	jne    c000f27c <findRSDT(unsigned char*)+0x28>
c000f26f:	b8 00 00 00 00       	mov    eax,0x0
c000f274:	e9 2b 01 00 00       	jmp    c000f3a4 <findRSDT(unsigned char*)+0x150>
c000f279:	8d 76 00             	lea    esi,[esi+0x0]
c000f27c:	89 e0                	mov    eax,esp
c000f27e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f282:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f286:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f28a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f292:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f296:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f29a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f29e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f2a2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f2a6:	89 c6                	mov    esi,eax
c000f2a8:	89 d7                	mov    edi,edx
c000f2aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2ac:	89 c8                	mov    eax,ecx
c000f2ae:	89 fa                	mov    edx,edi
c000f2b0:	89 f3                	mov    ebx,esi
c000f2b2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f2b6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f2ba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2be:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f2c2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f2c6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f2ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f2d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2d6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f2da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2de:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f2e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f2e6:	25 ff 0f 00 00       	and    eax,0xfff
c000f2eb:	89 c6                	mov    esi,eax
c000f2ed:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f2f3:	83 ec 0c             	sub    esp,0xc
c000f2f6:	6a 02                	push   0x2
c000f2f8:	e8 10 a3 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f2fd:	83 c4 10             	add    esp,0x10
c000f300:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f304:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f30a:	83 ec 0c             	sub    esp,0xc
c000f30d:	6a 01                	push   0x1
c000f30f:	6a 02                	push   0x2
c000f311:	50                   	push   eax
c000f312:	52                   	push   edx
c000f313:	53                   	push   ebx
c000f314:	e8 01 ac ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f319:	83 c4 20             	add    esp,0x20
c000f31c:	09 f0                	or     eax,esi
c000f31e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f322:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f326:	25 ff 0f 00 00       	and    eax,0xfff
c000f32b:	89 c6                	mov    esi,eax
c000f32d:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f333:	83 ec 0c             	sub    esp,0xc
c000f336:	6a 02                	push   0x2
c000f338:	e8 d0 a2 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f33d:	83 c4 10             	add    esp,0x10
c000f340:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f344:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f34a:	83 ec 0c             	sub    esp,0xc
c000f34d:	6a 01                	push   0x1
c000f34f:	6a 02                	push   0x2
c000f351:	50                   	push   eax
c000f352:	52                   	push   edx
c000f353:	53                   	push   ebx
c000f354:	e8 c1 ab ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f359:	83 c4 20             	add    esp,0x20
c000f35c:	09 f0                	or     eax,esi
c000f35e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f362:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f367:	85 c0                	test   eax,eax
c000f369:	75 11                	jne    c000f37c <findRSDT(unsigned char*)+0x128>
c000f36b:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f372:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f376:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f37a:	eb 24                	jmp    c000f3a0 <findRSDT(unsigned char*)+0x14c>
c000f37c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f381:	83 f8 02             	cmp    eax,0x2
c000f384:	75 12                	jne    c000f398 <findRSDT(unsigned char*)+0x144>
c000f386:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f38d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f391:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f395:	eb 09                	jmp    c000f3a0 <findRSDT(unsigned char*)+0x14c>
c000f397:	90                   	nop
c000f398:	b8 00 00 00 00       	mov    eax,0x0
c000f39d:	eb 05                	jmp    c000f3a4 <findRSDT(unsigned char*)+0x150>
c000f39f:	90                   	nop
c000f3a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3a4:	83 c4 50             	add    esp,0x50
c000f3a7:	5b                   	pop    ebx
c000f3a8:	5e                   	pop    esi
c000f3a9:	5f                   	pop    edi
c000f3aa:	c3                   	ret    
c000f3ab:	90                   	nop

c000f3ac <findDataTable(unsigned char*, char*)>:
c000f3ac:	83 ec 1c             	sub    esp,0x1c
c000f3af:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f3b4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f3ba:	83 e0 04             	and    eax,0x4
c000f3bd:	0f b6 c0             	movzx  eax,al
c000f3c0:	85 c0                	test   eax,eax
c000f3c2:	75 08                	jne    c000f3cc <findDataTable(unsigned char*, char*)+0x20>
c000f3c4:	b8 00 00 00 00       	mov    eax,0x0
c000f3c9:	eb 5d                	jmp    c000f428 <findDataTable(unsigned char*, char*)+0x7c>
c000f3cb:	90                   	nop
c000f3cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f3d4:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f3d9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f3dd:	7d 41                	jge    c000f420 <findDataTable(unsigned char*, char*)+0x74>
c000f3df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3e3:	c1 e0 03             	shl    eax,0x3
c000f3e6:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f3eb:	83 ec 04             	sub    esp,0x4
c000f3ee:	6a 04                	push   0x4
c000f3f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3f4:	50                   	push   eax
c000f3f5:	e8 86 0f ff ff       	call   c0000380 <memcmp>
c000f3fa:	83 c4 10             	add    esp,0x10
c000f3fd:	85 c0                	test   eax,eax
c000f3ff:	0f 94 c0             	sete   al
c000f402:	0f b6 c0             	movzx  eax,al
c000f405:	85 c0                	test   eax,eax
c000f407:	74 0f                	je     c000f418 <findDataTable(unsigned char*, char*)+0x6c>
c000f409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f40d:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f414:	eb 12                	jmp    c000f428 <findDataTable(unsigned char*, char*)+0x7c>
c000f416:	66 90                	xchg   ax,ax
c000f418:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f41d:	eb b5                	jmp    c000f3d4 <findDataTable(unsigned char*, char*)+0x28>
c000f41f:	90                   	nop
c000f420:	b8 00 00 00 00       	mov    eax,0x0
c000f425:	8d 76 00             	lea    esi,[esi+0x0]
c000f428:	83 c4 1c             	add    esp,0x1c
c000f42b:	c3                   	ret    

c000f42c <scanMADT()>:
c000f42c:	53                   	push   ebx
c000f42d:	83 ec 38             	sub    esp,0x38
c000f430:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f435:	25 00 04 00 00       	and    eax,0x400
c000f43a:	74 14                	je     c000f450 <scanMADT()+0x24>
c000f43c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f441:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f447:	83 e2 fb             	and    edx,0xfffffffb
c000f44a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f450:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f455:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f45b:	83 e0 04             	and    eax,0x4
c000f45e:	0f b6 c0             	movzx  eax,al
c000f461:	85 c0                	test   eax,eax
c000f463:	0f 84 6b 04 00 00    	je     c000f8d4 <scanMADT()+0x4a8>
c000f469:	e8 e2 fa ff ff       	call   c000ef50 <findRSDP()>
c000f46e:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f473:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f478:	85 c0                	test   eax,eax
c000f47a:	75 1c                	jne    c000f498 <scanMADT()+0x6c>
c000f47c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f481:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f487:	83 e2 fb             	and    edx,0xfffffffb
c000f48a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f490:	e9 47 04 00 00       	jmp    c000f8dc <scanMADT()+0x4b0>
c000f495:	8d 76 00             	lea    esi,[esi+0x0]
c000f498:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f49d:	83 ec 0c             	sub    esp,0xc
c000f4a0:	50                   	push   eax
c000f4a1:	e8 ae fd ff ff       	call   c000f254 <findRSDT(unsigned char*)>
c000f4a6:	83 c4 10             	add    esp,0x10
c000f4a9:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f4ae:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4b3:	85 c0                	test   eax,eax
c000f4b5:	75 19                	jne    c000f4d0 <scanMADT()+0xa4>
c000f4b7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4bc:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4c2:	83 e2 fb             	and    edx,0xfffffffb
c000f4c5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4cb:	e9 0c 04 00 00       	jmp    c000f8dc <scanMADT()+0x4b0>
c000f4d0:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4d5:	83 ec 0c             	sub    esp,0xc
c000f4d8:	50                   	push   eax
c000f4d9:	e8 0a fb ff ff       	call   c000efe8 <loadACPITables(unsigned char*)>
c000f4de:	83 c4 10             	add    esp,0x10
c000f4e1:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4e6:	83 ec 08             	sub    esp,0x8
c000f4e9:	68 0c 20 02 c0       	push   0xc002200c
c000f4ee:	50                   	push   eax
c000f4ef:	e8 b8 fe ff ff       	call   c000f3ac <findDataTable(unsigned char*, char*)>
c000f4f4:	83 c4 10             	add    esp,0x10
c000f4f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f4fb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f500:	75 1a                	jne    c000f51c <scanMADT()+0xf0>
c000f502:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f507:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f50d:	83 e2 fe             	and    edx,0xfffffffe
c000f510:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f516:	e9 c1 03 00 00       	jmp    c000f8dc <scanMADT()+0x4b0>
c000f51b:	90                   	nop
c000f51c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f524:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f528:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f52b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f52f:	0f 87 a7 03 00 00    	ja     c000f8dc <scanMADT()+0x4b0>
c000f535:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f53d:	0f 87 99 03 00 00    	ja     c000f8dc <scanMADT()+0x4b0>
c000f543:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f547:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f54b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f54f:	8d 50 01             	lea    edx,[eax+0x1]
c000f552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f556:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f55a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f55e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f562:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f566:	8d 50 01             	lea    edx,[eax+0x1]
c000f569:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f56d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f571:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f575:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f579:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f57e:	83 f8 02             	cmp    eax,0x2
c000f581:	0f 86 51 03 00 00    	jbe    c000f8d8 <scanMADT()+0x4ac>
c000f587:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f58c:	85 c0                	test   eax,eax
c000f58e:	75 58                	jne    c000f5e8 <scanMADT()+0x1bc>
c000f590:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f594:	8d 50 01             	lea    edx,[eax+0x1]
c000f597:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f59b:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f5a1:	0f b6 d2             	movzx  edx,dl
c000f5a4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f5a8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f5ac:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f5b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5b6:	8d 50 01             	lea    edx,[eax+0x1]
c000f5b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5bd:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f5c3:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f5c6:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f5cc:	0f b6 d2             	movzx  edx,dl
c000f5cf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f5d3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f5d7:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f5dd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f5e2:	e9 d9 02 00 00       	jmp    c000f8c0 <scanMADT()+0x494>
c000f5e7:	90                   	nop
c000f5e8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f5ed:	83 f8 01             	cmp    eax,0x1
c000f5f0:	0f 85 1a 01 00 00    	jne    c000f710 <scanMADT()+0x2e4>
c000f5f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5fa:	8d 50 01             	lea    edx,[eax+0x1]
c000f5fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f601:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f607:	0f b6 d2             	movzx  edx,dl
c000f60a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f60e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f612:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f618:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f61d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f621:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f625:	01 d0                	add    eax,edx
c000f627:	83 c0 2c             	add    eax,0x2c
c000f62a:	8a 00                	mov    al,BYTE PTR [eax]
c000f62c:	0f b6 d0             	movzx  edx,al
c000f62f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f633:	8d 48 01             	lea    ecx,[eax+0x1]
c000f636:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f63a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f63e:	0f b6 c0             	movzx  eax,al
c000f641:	c1 e0 08             	shl    eax,0x8
c000f644:	89 d1                	mov    ecx,edx
c000f646:	09 c1                	or     ecx,eax
c000f648:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f64c:	8d 50 02             	lea    edx,[eax+0x2]
c000f64f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f653:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f657:	0f b6 c0             	movzx  eax,al
c000f65a:	c1 e0 10             	shl    eax,0x10
c000f65d:	09 c1                	or     ecx,eax
c000f65f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f663:	8d 50 03             	lea    edx,[eax+0x3]
c000f666:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f66a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f66e:	0f b6 c0             	movzx  eax,al
c000f671:	c1 e0 18             	shl    eax,0x18
c000f674:	09 c1                	or     ecx,eax
c000f676:	89 ca                	mov    edx,ecx
c000f678:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f67d:	0f b6 c0             	movzx  eax,al
c000f680:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f687:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f68c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f690:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f694:	01 d0                	add    eax,edx
c000f696:	83 c0 2c             	add    eax,0x2c
c000f699:	8a 00                	mov    al,BYTE PTR [eax]
c000f69b:	0f b6 d0             	movzx  edx,al
c000f69e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6a2:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6a9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f6ad:	0f b6 c0             	movzx  eax,al
c000f6b0:	c1 e0 08             	shl    eax,0x8
c000f6b3:	89 d1                	mov    ecx,edx
c000f6b5:	09 c1                	or     ecx,eax
c000f6b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6bb:	8d 50 02             	lea    edx,[eax+0x2]
c000f6be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6c2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6c6:	0f b6 c0             	movzx  eax,al
c000f6c9:	c1 e0 10             	shl    eax,0x10
c000f6cc:	09 c1                	or     ecx,eax
c000f6ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6d2:	8d 50 03             	lea    edx,[eax+0x3]
c000f6d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6d9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6dd:	0f b6 c0             	movzx  eax,al
c000f6e0:	c1 e0 18             	shl    eax,0x18
c000f6e3:	09 c1                	or     ecx,eax
c000f6e5:	89 ca                	mov    edx,ecx
c000f6e7:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6ec:	0f b6 c0             	movzx  eax,al
c000f6ef:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f6f6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f6fb:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f700:	83 c0 01             	add    eax,0x1
c000f703:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f708:	e9 b3 01 00 00       	jmp    c000f8c0 <scanMADT()+0x494>
c000f70d:	8d 76 00             	lea    esi,[esi+0x0]
c000f710:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f715:	83 f8 02             	cmp    eax,0x2
c000f718:	0f 85 ea 00 00 00    	jne    c000f808 <scanMADT()+0x3dc>
c000f71e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f722:	8d 50 01             	lea    edx,[eax+0x1]
c000f725:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f729:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f72d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f731:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f735:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f739:	8d 50 01             	lea    edx,[eax+0x1]
c000f73c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f740:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f744:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f748:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f74c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f750:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f754:	01 d0                	add    eax,edx
c000f756:	83 c0 2c             	add    eax,0x2c
c000f759:	8a 00                	mov    al,BYTE PTR [eax]
c000f75b:	0f b6 d0             	movzx  edx,al
c000f75e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f762:	8d 48 01             	lea    ecx,[eax+0x1]
c000f765:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f769:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f76d:	0f b6 c0             	movzx  eax,al
c000f770:	c1 e0 08             	shl    eax,0x8
c000f773:	89 d1                	mov    ecx,edx
c000f775:	09 c1                	or     ecx,eax
c000f777:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f77b:	8d 50 02             	lea    edx,[eax+0x2]
c000f77e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f782:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f786:	0f b6 c0             	movzx  eax,al
c000f789:	c1 e0 10             	shl    eax,0x10
c000f78c:	09 c1                	or     ecx,eax
c000f78e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f792:	8d 50 03             	lea    edx,[eax+0x3]
c000f795:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f799:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f79d:	0f b6 c0             	movzx  eax,al
c000f7a0:	c1 e0 18             	shl    eax,0x18
c000f7a3:	09 c8                	or     eax,ecx
c000f7a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f7a9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f7ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7b6:	01 d0                	add    eax,edx
c000f7b8:	83 c0 2c             	add    eax,0x2c
c000f7bb:	8a 00                	mov    al,BYTE PTR [eax]
c000f7bd:	0f b6 c0             	movzx  eax,al
c000f7c0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f7c4:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f7c7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7cb:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f7cf:	0f b6 d2             	movzx  edx,dl
c000f7d2:	c1 e2 08             	shl    edx,0x8
c000f7d5:	09 d0                	or     eax,edx
c000f7d7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f7dc:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f7e1:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f7e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f7ea:	88 90 28 37 02 c0    	mov    BYTE PTR [eax-0x3ffdc8d8],dl
c000f7f0:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f7f5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f7fa:	66 89 84 12 c0 bb 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4440],ax
c000f802:	e9 b9 00 00 00       	jmp    c000f8c0 <scanMADT()+0x494>
c000f807:	90                   	nop
c000f808:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f80d:	83 f8 04             	cmp    eax,0x4
c000f810:	0f 85 9a 00 00 00    	jne    c000f8b0 <scanMADT()+0x484>
c000f816:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f81a:	8d 50 01             	lea    edx,[eax+0x1]
c000f81d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f821:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f825:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f829:	0f b6 c0             	movzx  eax,al
c000f82c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f830:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f834:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f838:	01 d0                	add    eax,edx
c000f83a:	83 c0 2c             	add    eax,0x2c
c000f83d:	8a 00                	mov    al,BYTE PTR [eax]
c000f83f:	0f b6 d0             	movzx  edx,al
c000f842:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f846:	8d 48 01             	lea    ecx,[eax+0x1]
c000f849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f84d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f851:	0f b6 c0             	movzx  eax,al
c000f854:	c1 e0 08             	shl    eax,0x8
c000f857:	09 d0                	or     eax,edx
c000f859:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f85d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f862:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f866:	8d 50 01             	lea    edx,[eax+0x1]
c000f869:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f86d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f871:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f875:	0f b6 c0             	movzx  eax,al
c000f878:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f880:	c1 e0 08             	shl    eax,0x8
c000f883:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f887:	89 c1                	mov    ecx,eax
c000f889:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f88d:	c1 e0 18             	shl    eax,0x18
c000f890:	89 c3                	mov    ebx,eax
c000f892:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f897:	8d 50 01             	lea    edx,[eax+0x1]
c000f89a:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f8a0:	09 d9                	or     ecx,ebx
c000f8a2:	89 ca                	mov    edx,ecx
c000f8a4:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f8ab:	eb 13                	jmp    c000f8c0 <scanMADT()+0x494>
c000f8ad:	8d 76 00             	lea    esi,[esi+0x0]
c000f8b0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f8b5:	83 f8 05             	cmp    eax,0x5
c000f8b8:	75 06                	jne    c000f8c0 <scanMADT()+0x494>
c000f8ba:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f8bf:	90                   	nop
c000f8c0:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f8c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f8c9:	01 d0                	add    eax,edx
c000f8cb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f8cf:	e9 50 fc ff ff       	jmp    c000f524 <scanMADT()+0xf8>
c000f8d4:	90                   	nop
c000f8d5:	eb 05                	jmp    c000f8dc <scanMADT()+0x4b0>
c000f8d7:	90                   	nop
c000f8d8:	90                   	nop
c000f8d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f8dc:	83 c4 38             	add    esp,0x38
c000f8df:	5b                   	pop    ebx
c000f8e0:	c3                   	ret    
c000f8e1:	90                   	nop
c000f8e2:	66 90                	xchg   ax,ax

c000f8e4 <ACPI::ACPI()>:
c000f8e4:	83 ec 0c             	sub    esp,0xc
c000f8e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8eb:	83 ec 08             	sub    esp,0x8
c000f8ee:	68 11 20 02 c0       	push   0xc0022011
c000f8f3:	50                   	push   eax
c000f8f4:	e8 65 d2 ff ff       	call   c000cb5e <Device::Device(char const*)>
c000f8f9:	83 c4 10             	add    esp,0x10
c000f8fc:	ba 80 21 02 c0       	mov    edx,0xc0022180
c000f901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f905:	89 10                	mov    DWORD PTR [eax],edx
c000f907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f90b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f916:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f924:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f92e:	e8 f9 fa ff ff       	call   c000f42c <scanMADT()>
c000f933:	90                   	nop
c000f934:	83 c4 0c             	add    esp,0xc
c000f937:	c3                   	ret    

c000f938 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f938:	83 ec 2c             	sub    esp,0x2c
c000f93b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f93f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f943:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f947:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f94b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f950:	88 d0                	mov    al,dl
c000f952:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f956:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f95b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f963:	90                   	nop
c000f964:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f968:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f96e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f972:	0f 8d b0 00 00 00    	jge    c000fa28 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f978:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f97c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f980:	83 c2 2a             	add    edx,0x2a
c000f983:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f987:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f98c:	0f b7 c0             	movzx  eax,ax
c000f98f:	39 c2                	cmp    edx,eax
c000f991:	0f 85 85 00 00 00    	jne    c000fa1c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f997:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f99b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f99f:	83 c2 2a             	add    edx,0x2a
c000f9a2:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f9a6:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f9ab:	0f b6 c0             	movzx  eax,al
c000f9ae:	39 c2                	cmp    edx,eax
c000f9b0:	75 6a                	jne    c000fa1c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f9b2:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f9b7:	85 c0                	test   eax,eax
c000f9b9:	74 3d                	je     c000f9f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f9bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9c3:	83 c2 2a             	add    edx,0x2a
c000f9c6:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f9ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f9d1:	39 c2                	cmp    edx,eax
c000f9d3:	74 13                	je     c000f9e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f9d5:	83 ec 0c             	sub    esp,0xc
c000f9d8:	68 8c 1f 02 c0       	push   0xc0021f8c
c000f9dd:	e8 3d 1c 00 00       	call   c001161f <KePanic(char const*)>
c000f9e2:	83 c4 10             	add    esp,0x10
c000f9e5:	8d 76 00             	lea    esi,[esi+0x0]
c000f9e8:	83 ec 0c             	sub    esp,0xc
c000f9eb:	68 16 20 02 c0       	push   0xc0022016
c000f9f0:	e8 2a 1c 00 00       	call   c001161f <KePanic(char const*)>
c000f9f5:	83 c4 10             	add    esp,0x10
c000f9f8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f9fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa04:	83 c2 2a             	add    edx,0x2a
c000fa07:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000fa0b:	8b 02                	mov    eax,DWORD PTR [edx]
c000fa0d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fa10:	89 01                	mov    DWORD PTR [ecx],eax
c000fa12:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fa15:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fa1a:	66 90                	xchg   ax,ax
c000fa1c:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fa21:	e9 3e ff ff ff       	jmp    c000f964 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000fa26:	66 90                	xchg   ax,ax
c000fa28:	90                   	nop
c000fa29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa2d:	83 c4 2c             	add    esp,0x2c
c000fa30:	c2 04 00             	ret    0x4
c000fa33:	90                   	nop

c000fa34 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fa34:	83 ec 1c             	sub    esp,0x1c
c000fa37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa3b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fa3f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fa43:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fa48:	88 c8                	mov    al,cl
c000fa4a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fa4e:	88 d0                	mov    al,dl
c000fa50:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fa54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa58:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa62:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fa65:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000fa69:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000fa6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa71:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa77:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fa7b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000fa7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa82:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000fa87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa8b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa91:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fa95:	83 c0 01             	add    eax,0x1
c000fa98:	88 c1                	mov    cl,al
c000fa9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa9e:	83 c2 2a             	add    edx,0x2a
c000faa1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000faa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faa9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000faaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fab3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fab6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000faba:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fabe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fac2:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fac8:	8d 50 01             	lea    edx,[eax+0x1]
c000facb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000facf:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fad5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fad9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fadf:	3d 00 02 00 00       	cmp    eax,0x200
c000fae4:	75 12                	jne    c000faf8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fae6:	83 ec 0c             	sub    esp,0xc
c000fae9:	68 25 20 02 c0       	push   0xc0022025
c000faee:	e8 2c 1b 00 00       	call   c001161f <KePanic(char const*)>
c000faf3:	83 c4 10             	add    esp,0x10
c000faf6:	66 90                	xchg   ax,ax
c000faf8:	90                   	nop
c000faf9:	83 c4 1c             	add    esp,0x1c
c000fafc:	c3                   	ret    
c000fafd:	90                   	nop
c000fafe:	66 90                	xchg   ax,ax

c000fb00 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fb00:	b8 00 00 00 00       	mov    eax,0x0
c000fb05:	c3                   	ret    
c000fb06:	66 90                	xchg   ax,ax

c000fb08 <ACPI::detectPCI()>:
c000fb08:	53                   	push   ebx
c000fb09:	83 ec 28             	sub    esp,0x28
c000fb0c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fb11:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fb16:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fb1b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fb21:	83 e0 04             	and    eax,0x4
c000fb24:	0f b6 c0             	movzx  eax,al
c000fb27:	85 c0                	test   eax,eax
c000fb29:	74 2d                	je     c000fb58 <ACPI::detectPCI()+0x50>
c000fb2b:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fb30:	83 ec 08             	sub    esp,0x8
c000fb33:	68 42 20 02 c0       	push   0xc0022042
c000fb38:	50                   	push   eax
c000fb39:	e8 6e f8 ff ff       	call   c000f3ac <findDataTable(unsigned char*, char*)>
c000fb3e:	83 c4 10             	add    esp,0x10
c000fb41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb45:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fb4a:	74 0c                	je     c000fb58 <ACPI::detectPCI()+0x50>
c000fb4c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb51:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb56:	66 90                	xchg   ax,ax
c000fb58:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fb60:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb64:	8a 00                	mov    al,BYTE PTR [eax]
c000fb66:	0f b6 c0             	movzx  eax,al
c000fb69:	83 f8 01             	cmp    eax,0x1
c000fb6c:	75 0e                	jne    c000fb7c <ACPI::detectPCI()+0x74>
c000fb6e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb73:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb78:	eb 2e                	jmp    c000fba8 <ACPI::detectPCI()+0xa0>
c000fb7a:	66 90                	xchg   ax,ax
c000fb7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb80:	8a 00                	mov    al,BYTE PTR [eax]
c000fb82:	0f b6 c0             	movzx  eax,al
c000fb85:	83 f8 02             	cmp    eax,0x2
c000fb88:	75 1e                	jne    c000fba8 <ACPI::detectPCI()+0xa0>
c000fb8a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb8f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fb94:	85 c0                	test   eax,eax
c000fb96:	74 10                	je     c000fba8 <ACPI::detectPCI()+0xa0>
c000fb98:	83 ec 0c             	sub    esp,0xc
c000fb9b:	68 bc 1f 02 c0       	push   0xc0021fbc
c000fba0:	e8 7a 1a 00 00       	call   c001161f <KePanic(char const*)>
c000fba5:	83 c4 10             	add    esp,0x10
c000fba8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fbac:	83 f0 01             	xor    eax,0x1
c000fbaf:	0f b6 c0             	movzx  eax,al
c000fbb2:	85 c0                	test   eax,eax
c000fbb4:	74 46                	je     c000fbfc <ACPI::detectPCI()+0xf4>
c000fbb6:	e8 75 05 ff ff       	call   c0000130 <manualPCIProbe>
c000fbbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fbbf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fbc4:	75 0e                	jne    c000fbd4 <ACPI::detectPCI()+0xcc>
c000fbc6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbcb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbd0:	eb 2a                	jmp    c000fbfc <ACPI::detectPCI()+0xf4>
c000fbd2:	66 90                	xchg   ax,ax
c000fbd4:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fbd9:	75 21                	jne    c000fbfc <ACPI::detectPCI()+0xf4>
c000fbdb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbe0:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fbe5:	85 c0                	test   eax,eax
c000fbe7:	74 13                	je     c000fbfc <ACPI::detectPCI()+0xf4>
c000fbe9:	83 ec 0c             	sub    esp,0xc
c000fbec:	68 bc 1f 02 c0       	push   0xc0021fbc
c000fbf1:	e8 29 1a 00 00       	call   c001161f <KePanic(char const*)>
c000fbf6:	83 c4 10             	add    esp,0x10
c000fbf9:	8d 76 00             	lea    esi,[esi+0x0]
c000fbfc:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fc01:	85 c0                	test   eax,eax
c000fc03:	0f 84 87 00 00 00    	je     c000fc90 <ACPI::detectPCI()+0x188>
c000fc09:	83 ec 0c             	sub    esp,0xc
c000fc0c:	68 47 20 02 c0       	push   0xc0022047
c000fc11:	e8 09 13 00 00       	call   c0010f1f <KeSetBootMessage(char const*)>
c000fc16:	83 c4 10             	add    esp,0x10
c000fc19:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fc21:	83 ec 0c             	sub    esp,0xc
c000fc24:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fc28:	e8 89 7e ff ff       	call   c0007ab6 <malloc>
c000fc2d:	83 c4 10             	add    esp,0x10
c000fc30:	89 c3                	mov    ebx,eax
c000fc32:	83 ec 0c             	sub    esp,0xc
c000fc35:	53                   	push   ebx
c000fc36:	e8 a1 b5 00 00       	call   c001b1dc <PCI::PCI()>
c000fc3b:	83 c4 10             	add    esp,0x10
c000fc3e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fc42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc46:	83 ec 08             	sub    esp,0x8
c000fc49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc4d:	50                   	push   eax
c000fc4e:	e8 73 cd ff ff       	call   c000c9c6 <Device::addChild(Device*)>
c000fc53:	83 c4 10             	add    esp,0x10
c000fc56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc5a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc5c:	83 c0 08             	add    eax,0x8
c000fc5f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc61:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fc66:	85 d2                	test   edx,edx
c000fc68:	74 0a                	je     c000fc74 <ACPI::detectPCI()+0x16c>
c000fc6a:	ba 01 00 00 00       	mov    edx,0x1
c000fc6f:	eb 0b                	jmp    c000fc7c <ACPI::detectPCI()+0x174>
c000fc71:	8d 76 00             	lea    esi,[esi+0x0]
c000fc74:	ba 02 00 00 00       	mov    edx,0x2
c000fc79:	8d 76 00             	lea    esi,[esi+0x0]
c000fc7c:	6a 00                	push   0x0
c000fc7e:	6a 00                	push   0x0
c000fc80:	52                   	push   edx
c000fc81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc85:	ff d0                	call   eax
c000fc87:	83 c4 10             	add    esp,0x10
c000fc8a:	e9 91 00 00 00       	jmp    c000fd20 <ACPI::detectPCI()+0x218>
c000fc8f:	90                   	nop
c000fc90:	83 ec 0c             	sub    esp,0xc
c000fc93:	68 5f 20 02 c0       	push   0xc002205f
c000fc98:	e8 82 12 00 00       	call   c0010f1f <KeSetBootMessage(char const*)>
c000fc9d:	83 c4 10             	add    esp,0x10
c000fca0:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fca7:	83 ec 0c             	sub    esp,0xc
c000fcaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fcae:	e8 03 7e ff ff       	call   c0007ab6 <malloc>
c000fcb3:	83 c4 10             	add    esp,0x10
c000fcb6:	89 c3                	mov    ebx,eax
c000fcb8:	83 ec 0c             	sub    esp,0xc
c000fcbb:	53                   	push   ebx
c000fcbc:	e8 b5 c0 00 00       	call   c001bd76 <IDE::IDE()>
c000fcc1:	83 c4 10             	add    esp,0x10
c000fcc4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fcc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fccc:	83 ec 08             	sub    esp,0x8
c000fccf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fcd3:	50                   	push   eax
c000fcd4:	e8 ed cc ff ff       	call   c000c9c6 <Device::addChild(Device*)>
c000fcd9:	83 c4 10             	add    esp,0x10
c000fcdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fce0:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fcea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcee:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fcf7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcfb:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fd04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd08:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd0a:	83 c0 08             	add    eax,0x8
c000fd0d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd0f:	6a 00                	push   0x0
c000fd11:	6a 00                	push   0x0
c000fd13:	6a 00                	push   0x0
c000fd15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd19:	ff d0                	call   eax
c000fd1b:	83 c4 10             	add    esp,0x10
c000fd1e:	66 90                	xchg   ax,ax
c000fd20:	90                   	nop
c000fd21:	83 c4 28             	add    esp,0x28
c000fd24:	5b                   	pop    ebx
c000fd25:	c3                   	ret    
c000fd26:	66 90                	xchg   ax,ax

c000fd28 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fd28:	83 ec 1c             	sub    esp,0x1c
c000fd2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd2f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fd32:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fd36:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fd3b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd40:	83 ec 08             	sub    esp,0x8
c000fd43:	52                   	push   edx
c000fd44:	50                   	push   eax
c000fd45:	e8 2e 74 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000fd4a:	83 c4 10             	add    esp,0x10
c000fd4d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fd51:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fd56:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd5b:	83 ec 04             	sub    esp,0x4
c000fd5e:	6a 01                	push   0x1
c000fd60:	52                   	push   edx
c000fd61:	50                   	push   eax
c000fd62:	e8 2b 75 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fd67:	83 c4 10             	add    esp,0x10
c000fd6a:	90                   	nop
c000fd6b:	83 c4 1c             	add    esp,0x1c
c000fd6e:	c3                   	ret    
c000fd6f:	90                   	nop

c000fd70 <ACPI::sleep()>:
c000fd70:	83 ec 0c             	sub    esp,0xc
c000fd73:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd78:	85 c0                	test   eax,eax
c000fd7a:	74 08                	je     c000fd84 <ACPI::sleep()+0x14>
c000fd7c:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd81:	ff d0                	call   eax
c000fd83:	90                   	nop
c000fd84:	90                   	nop
c000fd85:	83 c4 0c             	add    esp,0xc
c000fd88:	c3                   	ret    
c000fd89:	90                   	nop
c000fd8a:	66 90                	xchg   ax,ax

c000fd8c <ACPI::open(int, int, void*)>:
c000fd8c:	57                   	push   edi
c000fd8d:	56                   	push   esi
c000fd8e:	53                   	push   ebx
c000fd8f:	81 ec 70 01 00 00    	sub    esp,0x170
c000fd95:	83 ec 0c             	sub    esp,0xc
c000fd98:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fd9f:	e8 64 fd ff ff       	call   c000fb08 <ACPI::detectPCI()>
c000fda4:	83 c4 10             	add    esp,0x10
c000fda7:	83 ec 0c             	sub    esp,0xc
c000fdaa:	68 e4 1f 02 c0       	push   0xc0021fe4
c000fdaf:	e8 6b 11 00 00       	call   c0010f1f <KeSetBootMessage(char const*)>
c000fdb4:	83 c4 10             	add    esp,0x10
c000fdb7:	b8 4c 05 00 00       	mov    eax,0x54c
c000fdbc:	8a 00                	mov    al,BYTE PTR [eax]
c000fdbe:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fdc5:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fdcd:	83 f8 01             	cmp    eax,0x1
c000fdd0:	75 12                	jne    c000fde4 <ACPI::open(int, int, void*)+0x58>
c000fdd2:	83 ec 0c             	sub    esp,0xc
c000fdd5:	68 74 20 02 c0       	push   0xc0022074
c000fdda:	e8 4c 4e 00 00       	call   c0014c2b <Thr::loadKernelSymbolTable(char const*)>
c000fddf:	83 c4 10             	add    esp,0x10
c000fde2:	eb 34                	jmp    c000fe18 <ACPI::open(int, int, void*)+0x8c>
c000fde4:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fdec:	3d bb 00 00 00       	cmp    eax,0xbb
c000fdf1:	75 15                	jne    c000fe08 <ACPI::open(int, int, void*)+0x7c>
c000fdf3:	83 ec 0c             	sub    esp,0xc
c000fdf6:	68 92 20 02 c0       	push   0xc0022092
c000fdfb:	e8 2b 4e 00 00       	call   c0014c2b <Thr::loadKernelSymbolTable(char const*)>
c000fe00:	83 c4 10             	add    esp,0x10
c000fe03:	eb 13                	jmp    c000fe18 <ACPI::open(int, int, void*)+0x8c>
c000fe05:	8d 76 00             	lea    esi,[esi+0x0]
c000fe08:	83 ec 0c             	sub    esp,0xc
c000fe0b:	68 b0 20 02 c0       	push   0xc00220b0
c000fe10:	e8 0a 18 00 00       	call   c001161f <KePanic(char const*)>
c000fe15:	83 c4 10             	add    esp,0x10
c000fe18:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fe20:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fe2b:	83 ec 0c             	sub    esp,0xc
c000fe2e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fe35:	e8 7c 7c ff ff       	call   c0007ab6 <malloc>
c000fe3a:	83 c4 10             	add    esp,0x10
c000fe3d:	89 c3                	mov    ebx,eax
c000fe3f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fe44:	83 ec 04             	sub    esp,0x4
c000fe47:	50                   	push   eax
c000fe48:	68 ca 20 02 c0       	push   0xc00220ca
c000fe4d:	53                   	push   ebx
c000fe4e:	e8 f9 bc ff ff       	call   c000bb4c <File::File(char const*, Process*)>
c000fe53:	83 c4 10             	add    esp,0x10
c000fe56:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fe5d:	83 ec 08             	sub    esp,0x8
c000fe60:	6a 01                	push   0x1
c000fe62:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fe69:	e8 fc bc ff ff       	call   c000bb6a <File::open(FileOpenMode)>
c000fe6e:	83 c4 10             	add    esp,0x10
c000fe71:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fe78:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fe80:	75 16                	jne    c000fe98 <ACPI::open(int, int, void*)+0x10c>
c000fe82:	83 ec 0c             	sub    esp,0xc
c000fe85:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fe8c:	e8 37 bd ff ff       	call   c000bbc8 <File::close()>
c000fe91:	83 c4 10             	add    esp,0x10
c000fe94:	eb 0a                	jmp    c000fea0 <ACPI::open(int, int, void*)+0x114>
c000fe96:	66 90                	xchg   ax,ax
c000fe98:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fea0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fea8:	74 1e                	je     c000fec8 <ACPI::open(int, int, void*)+0x13c>
c000feaa:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000feb1:	8b 00                	mov    eax,DWORD PTR [eax]
c000feb3:	83 c0 08             	add    eax,0x8
c000feb6:	8b 00                	mov    eax,DWORD PTR [eax]
c000feb8:	83 ec 0c             	sub    esp,0xc
c000febb:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fec2:	ff d0                	call   eax
c000fec4:	83 c4 10             	add    esp,0x10
c000fec7:	90                   	nop
c000fec8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fecf:	83 f0 01             	xor    eax,0x1
c000fed2:	0f b6 c0             	movzx  eax,al
c000fed5:	85 c0                	test   eax,eax
c000fed7:	74 43                	je     c000ff1c <ACPI::open(int, int, void*)+0x190>
c000fed9:	83 ec 0c             	sub    esp,0xc
c000fedc:	68 e8 20 02 c0       	push   0xc00220e8
c000fee1:	e8 39 10 00 00       	call   c0010f1f <KeSetBootMessage(char const*)>
c000fee6:	83 c4 10             	add    esp,0x10
c000fee9:	83 ec 04             	sub    esp,0x4
c000feec:	6a 0c                	push   0xc
c000feee:	68 03 21 02 c0       	push   0xc0022103
c000fef3:	68 14 21 02 c0       	push   0xc0022114
c000fef8:	e8 6b 3f 00 00       	call   c0013e68 <Reg::readIntWithDefault(char*, char*, int)>
c000fefd:	83 c4 10             	add    esp,0x10
c000ff00:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ff07:	83 ec 0c             	sub    esp,0xc
c000ff0a:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ff11:	e8 26 99 ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000ff16:	83 c4 10             	add    esp,0x10
c000ff19:	8d 76 00             	lea    esi,[esi+0x0]
c000ff1c:	83 ec 0c             	sub    esp,0xc
c000ff1f:	68 75 0b 02 c0       	push   0xc0020b75
c000ff24:	e8 f6 0f 00 00       	call   c0010f1f <KeSetBootMessage(char const*)>
c000ff29:	83 c4 10             	add    esp,0x10
c000ff2c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ff33:	83 ec 08             	sub    esp,0x8
c000ff36:	6a 13                	push   0x13
c000ff38:	50                   	push   eax
c000ff39:	e8 a0 cd ff ff       	call   c000ccde <getDevicesOfType(DeviceType)>
c000ff3e:	83 c4 0c             	add    esp,0xc
c000ff41:	8d 76 00             	lea    esi,[esi+0x0]
c000ff44:	83 ec 0c             	sub    esp,0xc
c000ff47:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ff4e:	50                   	push   eax
c000ff4f:	e8 0c 00 01 00       	call   c001ff60 <LinkedList<Device>::isEmpty()>
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	83 f0 01             	xor    eax,0x1
c000ff5a:	0f b6 c0             	movzx  eax,al
c000ff5d:	85 c0                	test   eax,eax
c000ff5f:	0f 84 47 01 00 00    	je     c00100ac <ACPI::open(int, int, void*)+0x320>
c000ff65:	83 ec 0c             	sub    esp,0xc
c000ff68:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ff6f:	50                   	push   eax
c000ff70:	e8 07 00 01 00       	call   c001ff7c <LinkedList<Device>::getFirstElement()>
c000ff75:	83 c4 10             	add    esp,0x10
c000ff78:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ff7f:	83 ec 0c             	sub    esp,0xc
c000ff82:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ff89:	50                   	push   eax
c000ff8a:	e8 f5 ff 00 00       	call   c001ff84 <LinkedList<Device>::removeFirst()>
c000ff8f:	83 c4 10             	add    esp,0x10
c000ff92:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ff99:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ffa0:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ffa7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffab:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ffb1:	ba 09 00 00 00       	mov    edx,0x9
c000ffb6:	fc                   	cld    
c000ffb7:	89 c7                	mov    edi,eax
c000ffb9:	89 de                	mov    esi,ebx
c000ffbb:	89 d1                	mov    ecx,edx
c000ffbd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ffbf:	83 ec 08             	sub    esp,0x8
c000ffc2:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ffc6:	50                   	push   eax
c000ffc7:	83 ec 24             	sub    esp,0x24
c000ffca:	89 e0                	mov    eax,esp
c000ffcc:	89 c3                	mov    ebx,eax
c000ffce:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ffd2:	ba 09 00 00 00       	mov    edx,0x9
c000ffd7:	89 df                	mov    edi,ebx
c000ffd9:	89 c6                	mov    esi,eax
c000ffdb:	89 d1                	mov    ecx,edx
c000ffdd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ffdf:	e8 e2 b6 00 00       	call   c001b6c6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ffe4:	83 c4 30             	add    esp,0x30
c000ffe7:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ffee:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000fff6:	0f 84 48 ff ff ff    	je     c000ff44 <ACPI::open(int, int, void*)+0x1b8>
c000fffc:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0010007:	83 ec 0c             	sub    esp,0xc
c001000a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010011:	e8 a0 7a ff ff       	call   c0007ab6 <malloc>
c0010016:	83 c4 10             	add    esp,0x10
c0010019:	89 c3                	mov    ebx,eax
c001001b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010020:	83 ec 04             	sub    esp,0x4
c0010023:	50                   	push   eax
c0010024:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001002b:	53                   	push   ebx
c001002c:	e8 1b bb ff ff       	call   c000bb4c <File::File(char const*, Process*)>
c0010031:	83 c4 10             	add    esp,0x10
c0010034:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001003b:	83 ec 0c             	sub    esp,0xc
c001003e:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010045:	e8 e4 bd ff ff       	call   c000be2e <File::exists()>
c001004a:	83 c4 10             	add    esp,0x10
c001004d:	0f b6 c0             	movzx  eax,al
c0010050:	85 c0                	test   eax,eax
c0010052:	74 28                	je     c001007c <ACPI::open(int, int, void*)+0x2f0>
c0010054:	83 ec 08             	sub    esp,0x8
c0010057:	6a 01                	push   0x1
c0010059:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010060:	e8 40 56 00 00       	call   c00156a5 <Thr::loadDLL(char const*, bool)>
c0010065:	83 c4 10             	add    esp,0x10
c0010068:	83 ec 08             	sub    esp,0x8
c001006b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010072:	50                   	push   eax
c0010073:	e8 5e 58 00 00       	call   c00158d6 <Thr::executeDLL(unsigned long, void*)>
c0010078:	83 c4 10             	add    esp,0x10
c001007b:	90                   	nop
c001007c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0010084:	0f 84 ba fe ff ff    	je     c000ff44 <ACPI::open(int, int, void*)+0x1b8>
c001008a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0010091:	8b 00                	mov    eax,DWORD PTR [eax]
c0010093:	83 c0 08             	add    eax,0x8
c0010096:	8b 00                	mov    eax,DWORD PTR [eax]
c0010098:	83 ec 0c             	sub    esp,0xc
c001009b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00100a2:	ff d0                	call   eax
c00100a4:	83 c4 10             	add    esp,0x10
c00100a7:	e9 98 fe ff ff       	jmp    c000ff44 <ACPI::open(int, int, void*)+0x1b8>
c00100ac:	83 ec 0c             	sub    esp,0xc
c00100af:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00100b6:	50                   	push   eax
c00100b7:	e8 a0 fe 00 00       	call   c001ff5c <LinkedList<Device>::~LinkedList()>
c00100bc:	83 c4 10             	add    esp,0x10
c00100bf:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c00100c5:	83 ec 08             	sub    esp,0x8
c00100c8:	6a 01                	push   0x1
c00100ca:	68 1b 21 02 c0       	push   0xc002211b
c00100cf:	e8 d1 55 00 00       	call   c00156a5 <Thr::loadDLL(char const*, bool)>
c00100d4:	83 c4 10             	add    esp,0x10
c00100d7:	83 ec 08             	sub    esp,0x8
c00100da:	53                   	push   ebx
c00100db:	50                   	push   eax
c00100dc:	e8 f5 57 00 00       	call   c00158d6 <Thr::executeDLL(unsigned long, void*)>
c00100e1:	83 c4 10             	add    esp,0x10
c00100e4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00100e9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00100ef:	83 e0 04             	and    eax,0x4
c00100f2:	0f b6 c0             	movzx  eax,al
c00100f5:	85 c0                	test   eax,eax
c00100f7:	0f 84 1b 01 00 00    	je     c0010218 <ACPI::open(int, int, void*)+0x48c>
c00100fd:	83 ec 0c             	sub    esp,0xc
c0010100:	68 38 21 02 c0       	push   0xc0022138
c0010105:	e8 15 0e 00 00       	call   c0010f1f <KeSetBootMessage(char const*)>
c001010a:	83 c4 10             	add    esp,0x10
c001010d:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0010118:	83 ec 0c             	sub    esp,0xc
c001011b:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0010122:	e8 8f 79 ff ff       	call   c0007ab6 <malloc>
c0010127:	83 c4 10             	add    esp,0x10
c001012a:	89 c3                	mov    ebx,eax
c001012c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010131:	83 ec 04             	sub    esp,0x4
c0010134:	50                   	push   eax
c0010135:	68 55 21 02 c0       	push   0xc0022155
c001013a:	53                   	push   ebx
c001013b:	e8 0c ba ff ff       	call   c000bb4c <File::File(char const*, Process*)>
c0010140:	83 c4 10             	add    esp,0x10
c0010143:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001014a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010152:	74 20                	je     c0010174 <ACPI::open(int, int, void*)+0x3e8>
c0010154:	83 ec 0c             	sub    esp,0xc
c0010157:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001015e:	e8 cb bc ff ff       	call   c000be2e <File::exists()>
c0010163:	83 c4 10             	add    esp,0x10
c0010166:	0f b6 c0             	movzx  eax,al
c0010169:	85 c0                	test   eax,eax
c001016b:	74 07                	je     c0010174 <ACPI::open(int, int, void*)+0x3e8>
c001016d:	b0 01                	mov    al,0x1
c001016f:	eb 07                	jmp    c0010178 <ACPI::open(int, int, void*)+0x3ec>
c0010171:	8d 76 00             	lea    esi,[esi+0x0]
c0010174:	b0 00                	mov    al,0x0
c0010176:	66 90                	xchg   ax,ax
c0010178:	0f b6 c0             	movzx  eax,al
c001017b:	85 c0                	test   eax,eax
c001017d:	74 25                	je     c00101a4 <ACPI::open(int, int, void*)+0x418>
c001017f:	83 ec 08             	sub    esp,0x8
c0010182:	6a 01                	push   0x1
c0010184:	68 55 21 02 c0       	push   0xc0022155
c0010189:	e8 17 55 00 00       	call   c00156a5 <Thr::loadDLL(char const*, bool)>
c001018e:	83 c4 10             	add    esp,0x10
c0010191:	83 ec 08             	sub    esp,0x8
c0010194:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001019b:	50                   	push   eax
c001019c:	e8 35 57 00 00       	call   c00158d6 <Thr::executeDLL(unsigned long, void*)>
c00101a1:	83 c4 10             	add    esp,0x10
c00101a4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00101ac:	74 2a                	je     c00101d8 <ACPI::open(int, int, void*)+0x44c>
c00101ae:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00101b6:	74 20                	je     c00101d8 <ACPI::open(int, int, void*)+0x44c>
c00101b8:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00101bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00101c1:	83 c0 08             	add    eax,0x8
c00101c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00101c6:	83 ec 0c             	sub    esp,0xc
c00101c9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00101d0:	ff d0                	call   eax
c00101d2:	83 c4 10             	add    esp,0x10
c00101d5:	8d 76 00             	lea    esi,[esi+0x0]
c00101d8:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c00101dd:	83 ec 08             	sub    esp,0x8
c00101e0:	68 72 21 02 c0       	push   0xc0022172
c00101e5:	50                   	push   eax
c00101e6:	e8 c1 f1 ff ff       	call   c000f3ac <findDataTable(unsigned char*, char*)>
c00101eb:	83 c4 10             	add    esp,0x10
c00101ee:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00101f5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00101fd:	74 19                	je     c0010218 <ACPI::open(int, int, void*)+0x48c>
c00101ff:	83 ec 08             	sub    esp,0x8
c0010202:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0010209:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0010210:	e8 13 fb ff ff       	call   c000fd28 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0010215:	83 c4 10             	add    esp,0x10
c0010218:	b8 00 00 00 00       	mov    eax,0x0
c001021d:	81 c4 70 01 00 00    	add    esp,0x170
c0010223:	5b                   	pop    ebx
c0010224:	5e                   	pop    esi
c0010225:	5f                   	pop    edi
c0010226:	c3                   	ret    
c0010227:	90                   	nop

c0010228 <CPU::close(int, int, void*)>:
c0010228:	31 c0                	xor    eax,eax
c001022a:	c3                   	ret    
c001022b:	90                   	nop

c001022c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001022c:	60                   	pusha  
c001022d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010231:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010235:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010239:	9c                   	pushf  
c001023a:	fa                   	cli    
c001023b:	0f 09                	wbinvd 
c001023d:	0f 30                	wrmsr  
c001023f:	9d                   	popf   
c0010240:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010244:	89 02                	mov    DWORD PTR [edx],eax
c0010246:	61                   	popa   
c0010247:	c3                   	ret    

c0010248 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0010248:	60                   	pusha  
c0010249:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001024d:	9c                   	pushf  
c001024e:	fa                   	cli    
c001024f:	0f 09                	wbinvd 
c0010251:	31 c0                	xor    eax,eax
c0010253:	31 d2                	xor    edx,edx
c0010255:	0f 32                	rdmsr  
c0010257:	9d                   	popf   
c0010258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001025c:	89 02                	mov    DWORD PTR [edx],eax
c001025e:	61                   	popa   
c001025f:	c3                   	ret    

c0010260 <CPU::AMD_K6_writeback(int, int, int)>:
c0010260:	56                   	push   esi
c0010261:	53                   	push   ebx
c0010262:	83 ec 10             	sub    esp,0x10
c0010265:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010269:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001026e:	75 5d                	jne    c00102cd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010270:	83 f8 08             	cmp    eax,0x8
c0010273:	75 09                	jne    c001027e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0010275:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001027a:	7e 13                	jle    c001028f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001027c:	eb 30                	jmp    c00102ae <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001027e:	83 f8 06             	cmp    eax,0x6
c0010281:	7c 4a                	jl     c00102cd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010283:	83 f8 07             	cmp    eax,0x7
c0010286:	7e 07                	jle    c001028f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010288:	83 f8 09             	cmp    eax,0x9
c001028b:	74 21                	je     c00102ae <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001028d:	eb 3e                	jmp    c00102cd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001028f:	89 e6                	mov    esi,esp
c0010291:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c0010297:	56                   	push   esi
c0010298:	c1 eb 15             	shr    ebx,0x15
c001029b:	68 82 00 00 c0       	push   0xc0000082
c00102a0:	83 e3 7e             	and    ebx,0x7e
c00102a3:	e8 a0 ff ff ff       	call   c0010248 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00102a8:	56                   	push   esi
c00102a9:	6a 00                	push   0x0
c00102ab:	53                   	push   ebx
c00102ac:	eb 12                	jmp    c00102c0 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00102ae:	89 e3                	mov    ebx,esp
c00102b0:	53                   	push   ebx
c00102b1:	68 82 00 00 c0       	push   0xc0000082
c00102b6:	e8 8d ff ff ff       	call   c0010248 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00102bb:	53                   	push   ebx
c00102bc:	6a 00                	push   0x0
c00102be:	6a 00                	push   0x0
c00102c0:	68 82 00 00 c0       	push   0xc0000082
c00102c5:	e8 62 ff ff ff       	call   c001022c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00102ca:	83 c4 18             	add    esp,0x18
c00102cd:	83 c4 10             	add    esp,0x10
c00102d0:	5b                   	pop    ebx
c00102d1:	5e                   	pop    esi
c00102d2:	c3                   	ret    
c00102d3:	90                   	nop

c00102d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00102d4:	55                   	push   ebp
c00102d5:	57                   	push   edi
c00102d6:	56                   	push   esi
c00102d7:	53                   	push   ebx
c00102d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102dc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00102e0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102e4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00102e8:	39 05 38 37 02 c0    	cmp    DWORD PTR ds:0xc0023738,eax
c00102ee:	75 23                	jne    c0010313 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00102f0:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00102f5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00102f9:	89 06                	mov    DWORD PTR [esi],eax
c00102fb:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0010300:	89 07                	mov    DWORD PTR [edi],eax
c0010302:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c0010307:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001030a:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c001030f:	89 02                	mov    DWORD PTR [edx],eax
c0010311:	eb 3f                	jmp    c0010352 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0010313:	31 c9                	xor    ecx,ecx
c0010315:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010319:	0f a2                	cpuid  
c001031b:	89 06                	mov    DWORD PTR [esi],eax
c001031d:	89 1f                	mov    DWORD PTR [edi],ebx
c001031f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010323:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010326:	89 10                	mov    DWORD PTR [eax],edx
c0010328:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001032c:	a3 38 37 02 c0       	mov    ds:0xc0023738,eax
c0010331:	8b 06                	mov    eax,DWORD PTR [esi]
c0010333:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c0010338:	8b 07                	mov    eax,DWORD PTR [edi]
c001033a:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c001033f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010342:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c0010347:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001034b:	8b 00                	mov    eax,DWORD PTR [eax]
c001034d:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c0010352:	5b                   	pop    ebx
c0010353:	5e                   	pop    esi
c0010354:	5f                   	pop    edi
c0010355:	5d                   	pop    ebp
c0010356:	c3                   	ret    
c0010357:	90                   	nop

c0010358 <CPU::cpuidCheckEDX(unsigned int)>:
c0010358:	83 ec 10             	sub    esp,0x10
c001035b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001035f:	50                   	push   eax
c0010360:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010364:	50                   	push   eax
c0010365:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010369:	50                   	push   eax
c001036a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001036e:	50                   	push   eax
c001036f:	6a 01                	push   0x1
c0010371:	e8 5e ff ff ff       	call   c00102d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010376:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001037a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001037e:	0f 95 c0             	setne  al
c0010381:	83 c4 24             	add    esp,0x24
c0010384:	c3                   	ret    
c0010385:	90                   	nop

c0010386 <CPU::cpuidCheckECX(unsigned int)>:
c0010386:	83 ec 10             	sub    esp,0x10
c0010389:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001038d:	50                   	push   eax
c001038e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010392:	50                   	push   eax
c0010393:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010397:	50                   	push   eax
c0010398:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001039c:	50                   	push   eax
c001039d:	6a 01                	push   0x1
c001039f:	e8 30 ff ff ff       	call   c00102d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103a8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00103ac:	0f 95 c0             	setne  al
c00103af:	83 c4 24             	add    esp,0x24
c00103b2:	c3                   	ret    
c00103b3:	90                   	nop

c00103b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00103b4:	83 ec 10             	sub    esp,0x10
c00103b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103bb:	50                   	push   eax
c00103bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103c0:	50                   	push   eax
c00103c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103c5:	50                   	push   eax
c00103c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103ca:	50                   	push   eax
c00103cb:	6a 07                	push   0x7
c00103cd:	e8 02 ff ff ff       	call   c00102d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103d6:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00103da:	0f 95 c0             	setne  al
c00103dd:	83 c4 24             	add    esp,0x24
c00103e0:	c3                   	ret    
c00103e1:	90                   	nop

c00103e2 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00103e2:	83 ec 10             	sub    esp,0x10
c00103e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103e9:	50                   	push   eax
c00103ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103ee:	50                   	push   eax
c00103ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103f3:	50                   	push   eax
c00103f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103f8:	50                   	push   eax
c00103f9:	6a 07                	push   0x7
c00103fb:	e8 d4 fe ff ff       	call   c00102d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010400:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010404:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010408:	0f 95 c0             	setne  al
c001040b:	83 c4 24             	add    esp,0x24
c001040e:	c3                   	ret    
c001040f:	90                   	nop

c0010410 <CPU::CPU()>:
c0010410:	83 ec 0c             	sub    esp,0xc
c0010413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010417:	83 ec 08             	sub    esp,0x8
c001041a:	68 95 22 02 c0       	push   0xc0022295
c001041f:	50                   	push   eax
c0010420:	e8 39 c7 ff ff       	call   c000cb5e <Device::Device(char const*)>
c0010425:	83 c4 10             	add    esp,0x10
c0010428:	ba 28 23 02 c0       	mov    edx,0xc0022328
c001042d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010431:	89 10                	mov    DWORD PTR [eax],edx
c0010433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010437:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0010441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010445:	05 78 01 00 00       	add    eax,0x178
c001044a:	83 ec 0c             	sub    esp,0xc
c001044d:	50                   	push   eax
c001044e:	e8 09 6f ff ff       	call   c000735c <GDT::GDT()>
c0010453:	83 c4 10             	add    esp,0x10
c0010456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001045a:	05 7c 09 00 00       	add    eax,0x97c
c001045f:	83 ec 0c             	sub    esp,0xc
c0010462:	50                   	push   eax
c0010463:	e8 44 71 ff ff       	call   c00075ac <IDT::IDT()>
c0010468:	83 c4 10             	add    esp,0x10
c001046b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001046f:	05 7c 11 00 00       	add    eax,0x117c
c0010474:	83 ec 0c             	sub    esp,0xc
c0010477:	50                   	push   eax
c0010478:	e8 c7 8a ff ff       	call   c0008f44 <TSS::TSS()>
c001047d:	83 c4 10             	add    esp,0x10
c0010480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010484:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001048b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001048f:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010499:	90                   	nop
c001049a:	83 c4 0c             	add    esp,0xc
c001049d:	c3                   	ret    

c001049e <CPU::displayFeatures()>:
c001049e:	c3                   	ret    
c001049f:	90                   	nop

c00104a0 <CPU::detectFeatures()>:
c00104a0:	55                   	push   ebp
c00104a1:	57                   	push   edi
c00104a2:	56                   	push   esi
c00104a3:	53                   	push   ebx
c00104a4:	83 ec 30             	sub    esp,0x30
c00104a7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00104ab:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00104b5:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00104bc:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00104c2:	6a 0d                	push   0xd
c00104c4:	6a 00                	push   0x0
c00104c6:	55                   	push   ebp
c00104c7:	e8 24 00 ff ff       	call   c00004f0 <memset>
c00104cc:	83 c4 10             	add    esp,0x10
c00104cf:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00104d4:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00104db:	0f 84 db 05 00 00    	je     c0010abc <CPU::detectFeatures()+0x61c>
c00104e1:	83 ec 0c             	sub    esp,0xc
c00104e4:	89 ef                	mov    edi,ebp
c00104e6:	6a 10                	push   0x10
c00104e8:	e8 6b fe ff ff       	call   c0010358 <CPU::cpuidCheckEDX(unsigned int)>
c00104ed:	83 e0 01             	and    eax,0x1
c00104f0:	8d 14 00             	lea    edx,[eax+eax*1]
c00104f3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104f9:	83 e0 fd             	and    eax,0xfffffffd
c00104fc:	09 d0                	or     eax,edx
c00104fe:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010504:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001050b:	e8 48 fe ff ff       	call   c0010358 <CPU::cpuidCheckEDX(unsigned int)>
c0010510:	83 e0 01             	and    eax,0x1
c0010513:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001051a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010520:	83 e0 fb             	and    eax,0xfffffffb
c0010523:	09 d0                	or     eax,edx
c0010525:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001052b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0010532:	e8 21 fe ff ff       	call   c0010358 <CPU::cpuidCheckEDX(unsigned int)>
c0010537:	83 e0 01             	and    eax,0x1
c001053a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010541:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010547:	83 e0 f7             	and    eax,0xfffffff7
c001054a:	09 d0                	or     eax,edx
c001054c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010552:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010559:	e8 fa fd ff ff       	call   c0010358 <CPU::cpuidCheckEDX(unsigned int)>
c001055e:	83 e0 01             	and    eax,0x1
c0010561:	c1 e0 04             	shl    eax,0x4
c0010564:	89 c2                	mov    edx,eax
c0010566:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001056c:	83 e0 ef             	and    eax,0xffffffef
c001056f:	09 d0                	or     eax,edx
c0010571:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010577:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001057e:	e8 d5 fd ff ff       	call   c0010358 <CPU::cpuidCheckEDX(unsigned int)>
c0010583:	83 e0 01             	and    eax,0x1
c0010586:	c1 e0 05             	shl    eax,0x5
c0010589:	89 c2                	mov    edx,eax
c001058b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010591:	83 e0 df             	and    eax,0xffffffdf
c0010594:	09 d0                	or     eax,edx
c0010596:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001059c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00105a3:	e8 b0 fd ff ff       	call   c0010358 <CPU::cpuidCheckEDX(unsigned int)>
c00105a8:	83 e0 01             	and    eax,0x1
c00105ab:	8d 14 00             	lea    edx,[eax+eax*1]
c00105ae:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00105b4:	83 e0 fd             	and    eax,0xfffffffd
c00105b7:	09 d0                	or     eax,edx
c00105b9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00105bf:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00105c6:	e8 8d fd ff ff       	call   c0010358 <CPU::cpuidCheckEDX(unsigned int)>
c00105cb:	83 e0 01             	and    eax,0x1
c00105ce:	c1 e0 06             	shl    eax,0x6
c00105d1:	89 c2                	mov    edx,eax
c00105d3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105d9:	83 e0 bf             	and    eax,0xffffffbf
c00105dc:	09 d0                	or     eax,edx
c00105de:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105e4:	58                   	pop    eax
c00105e5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105e9:	50                   	push   eax
c00105ea:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105ee:	50                   	push   eax
c00105ef:	8d 74 24 28          	lea    esi,[esp+0x28]
c00105f3:	56                   	push   esi
c00105f4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105f8:	50                   	push   eax
c00105f9:	6a 00                	push   0x0
c00105fb:	e8 d4 fc ff ff       	call   c00102d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010600:	b8 04 00 00 00       	mov    eax,0x4
c0010605:	89 c1                	mov    ecx,eax
c0010607:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010609:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001060f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0010613:	89 c1                	mov    ecx,eax
c0010615:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010617:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001061d:	8d 74 24 38          	lea    esi,[esp+0x38]
c0010621:	89 c1                	mov    ecx,eax
c0010623:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010625:	83 c4 18             	add    esp,0x18
c0010628:	68 a4 21 02 c0       	push   0xc00221a4
c001062d:	55                   	push   ebp
c001062e:	e8 1d 01 ff ff       	call   c0000750 <strcmp>
c0010633:	83 c4 10             	add    esp,0x10
c0010636:	85 c0                	test   eax,eax
c0010638:	75 0f                	jne    c0010649 <CPU::detectFeatures()+0x1a9>
c001063a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010644:	e9 22 02 00 00       	jmp    c001086b <CPU::detectFeatures()+0x3cb>
c0010649:	50                   	push   eax
c001064a:	50                   	push   eax
c001064b:	68 b1 21 02 c0       	push   0xc00221b1
c0010650:	55                   	push   ebp
c0010651:	e8 fa 00 ff ff       	call   c0000750 <strcmp>
c0010656:	83 c4 10             	add    esp,0x10
c0010659:	85 c0                	test   eax,eax
c001065b:	74 dd                	je     c001063a <CPU::detectFeatures()+0x19a>
c001065d:	50                   	push   eax
c001065e:	50                   	push   eax
c001065f:	68 be 21 02 c0       	push   0xc00221be
c0010664:	55                   	push   ebp
c0010665:	e8 e6 00 ff ff       	call   c0000750 <strcmp>
c001066a:	83 c4 10             	add    esp,0x10
c001066d:	85 c0                	test   eax,eax
c001066f:	74 2a                	je     c001069b <CPU::detectFeatures()+0x1fb>
c0010671:	50                   	push   eax
c0010672:	50                   	push   eax
c0010673:	68 cb 21 02 c0       	push   0xc00221cb
c0010678:	55                   	push   ebp
c0010679:	e8 d2 00 ff ff       	call   c0000750 <strcmp>
c001067e:	83 c4 10             	add    esp,0x10
c0010681:	85 c0                	test   eax,eax
c0010683:	74 16                	je     c001069b <CPU::detectFeatures()+0x1fb>
c0010685:	50                   	push   eax
c0010686:	50                   	push   eax
c0010687:	68 d8 21 02 c0       	push   0xc00221d8
c001068c:	55                   	push   ebp
c001068d:	e8 be 00 ff ff       	call   c0000750 <strcmp>
c0010692:	83 c4 10             	add    esp,0x10
c0010695:	85 c0                	test   eax,eax
c0010697:	74 48                	je     c00106e1 <CPU::detectFeatures()+0x241>
c0010699:	eb 0f                	jmp    c00106aa <CPU::detectFeatures()+0x20a>
c001069b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00106a5:	e9 c1 01 00 00       	jmp    c001086b <CPU::detectFeatures()+0x3cb>
c00106aa:	50                   	push   eax
c00106ab:	50                   	push   eax
c00106ac:	68 e5 21 02 c0       	push   0xc00221e5
c00106b1:	55                   	push   ebp
c00106b2:	e8 99 00 ff ff       	call   c0000750 <strcmp>
c00106b7:	83 c4 10             	add    esp,0x10
c00106ba:	85 c0                	test   eax,eax
c00106bc:	74 23                	je     c00106e1 <CPU::detectFeatures()+0x241>
c00106be:	57                   	push   edi
c00106bf:	57                   	push   edi
c00106c0:	68 f2 21 02 c0       	push   0xc00221f2
c00106c5:	55                   	push   ebp
c00106c6:	e8 85 00 ff ff       	call   c0000750 <strcmp>
c00106cb:	83 c4 10             	add    esp,0x10
c00106ce:	85 c0                	test   eax,eax
c00106d0:	75 1e                	jne    c00106f0 <CPU::detectFeatures()+0x250>
c00106d2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00106dc:	e9 8a 01 00 00       	jmp    c001086b <CPU::detectFeatures()+0x3cb>
c00106e1:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00106eb:	e9 7b 01 00 00       	jmp    c001086b <CPU::detectFeatures()+0x3cb>
c00106f0:	56                   	push   esi
c00106f1:	56                   	push   esi
c00106f2:	68 ff 21 02 c0       	push   0xc00221ff
c00106f7:	55                   	push   ebp
c00106f8:	e8 53 00 ff ff       	call   c0000750 <strcmp>
c00106fd:	83 c4 10             	add    esp,0x10
c0010700:	85 c0                	test   eax,eax
c0010702:	75 0f                	jne    c0010713 <CPU::detectFeatures()+0x273>
c0010704:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001070e:	e9 58 01 00 00       	jmp    c001086b <CPU::detectFeatures()+0x3cb>
c0010713:	51                   	push   ecx
c0010714:	51                   	push   ecx
c0010715:	68 be 21 02 c0       	push   0xc00221be
c001071a:	55                   	push   ebp
c001071b:	e8 30 00 ff ff       	call   c0000750 <strcmp>
c0010720:	83 c4 10             	add    esp,0x10
c0010723:	85 c0                	test   eax,eax
c0010725:	75 0f                	jne    c0010736 <CPU::detectFeatures()+0x296>
c0010727:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0010731:	e9 35 01 00 00       	jmp    c001086b <CPU::detectFeatures()+0x3cb>
c0010736:	52                   	push   edx
c0010737:	52                   	push   edx
c0010738:	68 0c 22 02 c0       	push   0xc002220c
c001073d:	55                   	push   ebp
c001073e:	e8 0d 00 ff ff       	call   c0000750 <strcmp>
c0010743:	83 c4 10             	add    esp,0x10
c0010746:	85 c0                	test   eax,eax
c0010748:	75 0f                	jne    c0010759 <CPU::detectFeatures()+0x2b9>
c001074a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010754:	e9 12 01 00 00       	jmp    c001086b <CPU::detectFeatures()+0x3cb>
c0010759:	50                   	push   eax
c001075a:	50                   	push   eax
c001075b:	68 19 22 02 c0       	push   0xc0022219
c0010760:	55                   	push   ebp
c0010761:	e8 ea ff fe ff       	call   c0000750 <strcmp>
c0010766:	83 c4 10             	add    esp,0x10
c0010769:	85 c0                	test   eax,eax
c001076b:	75 0f                	jne    c001077c <CPU::detectFeatures()+0x2dc>
c001076d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010777:	e9 ef 00 00 00       	jmp    c001086b <CPU::detectFeatures()+0x3cb>
c001077c:	50                   	push   eax
c001077d:	50                   	push   eax
c001077e:	68 26 22 02 c0       	push   0xc0022226
c0010783:	55                   	push   ebp
c0010784:	e8 c7 ff fe ff       	call   c0000750 <strcmp>
c0010789:	83 c4 10             	add    esp,0x10
c001078c:	85 c0                	test   eax,eax
c001078e:	75 0f                	jne    c001079f <CPU::detectFeatures()+0x2ff>
c0010790:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001079a:	e9 cc 00 00 00       	jmp    c001086b <CPU::detectFeatures()+0x3cb>
c001079f:	50                   	push   eax
c00107a0:	50                   	push   eax
c00107a1:	68 33 22 02 c0       	push   0xc0022233
c00107a6:	55                   	push   ebp
c00107a7:	e8 a4 ff fe ff       	call   c0000750 <strcmp>
c00107ac:	83 c4 10             	add    esp,0x10
c00107af:	85 c0                	test   eax,eax
c00107b1:	75 0f                	jne    c00107c2 <CPU::detectFeatures()+0x322>
c00107b3:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00107bd:	e9 a9 00 00 00       	jmp    c001086b <CPU::detectFeatures()+0x3cb>
c00107c2:	50                   	push   eax
c00107c3:	50                   	push   eax
c00107c4:	68 40 22 02 c0       	push   0xc0022240
c00107c9:	55                   	push   ebp
c00107ca:	e8 81 ff fe ff       	call   c0000750 <strcmp>
c00107cf:	83 c4 10             	add    esp,0x10
c00107d2:	85 c0                	test   eax,eax
c00107d4:	75 0f                	jne    c00107e5 <CPU::detectFeatures()+0x345>
c00107d6:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00107e0:	e9 86 00 00 00       	jmp    c001086b <CPU::detectFeatures()+0x3cb>
c00107e5:	50                   	push   eax
c00107e6:	50                   	push   eax
c00107e7:	68 4d 22 02 c0       	push   0xc002224d
c00107ec:	55                   	push   ebp
c00107ed:	e8 5e ff fe ff       	call   c0000750 <strcmp>
c00107f2:	83 c4 10             	add    esp,0x10
c00107f5:	85 c0                	test   eax,eax
c00107f7:	75 0c                	jne    c0010805 <CPU::detectFeatures()+0x365>
c00107f9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0010803:	eb 66                	jmp    c001086b <CPU::detectFeatures()+0x3cb>
c0010805:	50                   	push   eax
c0010806:	50                   	push   eax
c0010807:	68 5a 22 02 c0       	push   0xc002225a
c001080c:	55                   	push   ebp
c001080d:	e8 3e ff fe ff       	call   c0000750 <strcmp>
c0010812:	83 c4 10             	add    esp,0x10
c0010815:	85 c0                	test   eax,eax
c0010817:	75 0c                	jne    c0010825 <CPU::detectFeatures()+0x385>
c0010819:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0010823:	eb 46                	jmp    c001086b <CPU::detectFeatures()+0x3cb>
c0010825:	57                   	push   edi
c0010826:	57                   	push   edi
c0010827:	68 67 22 02 c0       	push   0xc0022267
c001082c:	55                   	push   ebp
c001082d:	e8 1e ff fe ff       	call   c0000750 <strcmp>
c0010832:	83 c4 10             	add    esp,0x10
c0010835:	85 c0                	test   eax,eax
c0010837:	74 e0                	je     c0010819 <CPU::detectFeatures()+0x379>
c0010839:	56                   	push   esi
c001083a:	56                   	push   esi
c001083b:	68 74 22 02 c0       	push   0xc0022274
c0010840:	55                   	push   ebp
c0010841:	e8 0a ff fe ff       	call   c0000750 <strcmp>
c0010846:	83 c4 10             	add    esp,0x10
c0010849:	85 c0                	test   eax,eax
c001084b:	74 cc                	je     c0010819 <CPU::detectFeatures()+0x379>
c001084d:	51                   	push   ecx
c001084e:	51                   	push   ecx
c001084f:	68 81 22 02 c0       	push   0xc0022281
c0010854:	55                   	push   ebp
c0010855:	e8 f6 fe fe ff       	call   c0000750 <strcmp>
c001085a:	83 c4 10             	add    esp,0x10
c001085d:	85 c0                	test   eax,eax
c001085f:	74 b8                	je     c0010819 <CPU::detectFeatures()+0x379>
c0010861:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001086b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010870:	0f 86 be 00 00 00    	jbe    c0010934 <CPU::detectFeatures()+0x494>
c0010876:	83 ec 0c             	sub    esp,0xc
c0010879:	68 80 00 00 00       	push   0x80
c001087e:	e8 31 fb ff ff       	call   c00103b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010883:	83 e0 01             	and    eax,0x1
c0010886:	c1 e0 06             	shl    eax,0x6
c0010889:	89 c2                	mov    edx,eax
c001088b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010891:	83 e0 bf             	and    eax,0xffffffbf
c0010894:	09 d0                	or     eax,edx
c0010896:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001089c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00108a3:	e8 0c fb ff ff       	call   c00103b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00108a8:	83 e0 01             	and    eax,0x1
c00108ab:	c1 e0 04             	shl    eax,0x4
c00108ae:	89 c2                	mov    edx,eax
c00108b0:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108b6:	83 e0 ef             	and    eax,0xffffffef
c00108b9:	09 d0                	or     eax,edx
c00108bb:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108c1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00108c8:	e8 e7 fa ff ff       	call   c00103b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00108cd:	89 c2                	mov    edx,eax
c00108cf:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00108d5:	c1 e2 07             	shl    edx,0x7
c00108d8:	83 e0 7f             	and    eax,0x7f
c00108db:	09 d0                	or     eax,edx
c00108dd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00108e3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00108ea:	e8 f3 fa ff ff       	call   c00103e2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00108ef:	83 e0 01             	and    eax,0x1
c00108f2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00108f9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108ff:	83 e0 f7             	and    eax,0xfffffff7
c0010902:	09 d0                	or     eax,edx
c0010904:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001090a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0010911:	e8 cc fa ff ff       	call   c00103e2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010916:	83 c4 10             	add    esp,0x10
c0010919:	83 e0 01             	and    eax,0x1
c001091c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010923:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010929:	83 e0 fb             	and    eax,0xfffffffb
c001092c:	09 d0                	or     eax,edx
c001092e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010934:	83 ec 0c             	sub    esp,0xc
c0010937:	8d 44 24 28          	lea    eax,[esp+0x28]
c001093b:	50                   	push   eax
c001093c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010940:	50                   	push   eax
c0010941:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010945:	57                   	push   edi
c0010946:	8d 74 24 28          	lea    esi,[esp+0x28]
c001094a:	56                   	push   esi
c001094b:	6a 01                	push   0x1
c001094d:	e8 82 f9 ff ff       	call   c00102d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010952:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010956:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001095c:	89 c1                	mov    ecx,eax
c001095e:	83 e2 f0             	and    edx,0xfffffff0
c0010961:	83 e1 0f             	and    ecx,0xf
c0010964:	09 ca                	or     edx,ecx
c0010966:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001096c:	89 c2                	mov    edx,eax
c001096e:	c1 ea 04             	shr    edx,0x4
c0010971:	83 e2 0f             	and    edx,0xf
c0010974:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010978:	89 d1                	mov    ecx,edx
c001097a:	83 c4 20             	add    esp,0x20
c001097d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010983:	c1 e1 06             	shl    ecx,0x6
c0010986:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001098c:	09 ca                	or     edx,ecx
c001098e:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010995:	89 c2                	mov    edx,eax
c0010997:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001099d:	c1 ea 08             	shr    edx,0x8
c00109a0:	83 e1 3f             	and    ecx,0x3f
c00109a3:	83 e2 0f             	and    edx,0xf
c00109a6:	89 d5                	mov    ebp,edx
c00109a8:	83 e5 03             	and    ebp,0x3
c00109ab:	c1 e5 06             	shl    ebp,0x6
c00109ae:	09 e9                	or     ecx,ebp
c00109b0:	89 d5                	mov    ebp,edx
c00109b2:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00109b8:	c1 ed 02             	shr    ebp,0x2
c00109bb:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00109c1:	83 e1 c0             	and    ecx,0xffffffc0
c00109c4:	09 e9                	or     ecx,ebp
c00109c6:	89 c5                	mov    ebp,eax
c00109c8:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00109ce:	c1 ed 08             	shr    ebp,0x8
c00109d1:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00109d7:	83 e5 30             	and    ebp,0x30
c00109da:	83 e1 cf             	and    ecx,0xffffffcf
c00109dd:	09 e9                	or     ecx,ebp
c00109df:	83 fa 06             	cmp    edx,0x6
c00109e2:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00109e8:	74 05                	je     c00109ef <CPU::detectFeatures()+0x54f>
c00109ea:	83 fa 0f             	cmp    edx,0xf
c00109ed:	75 64                	jne    c0010a53 <CPU::detectFeatures()+0x5b3>
c00109ef:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00109f5:	89 c1                	mov    ecx,eax
c00109f7:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00109fd:	c1 e9 10             	shr    ecx,0x10
c0010a00:	c1 e1 04             	shl    ecx,0x4
c0010a03:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010a07:	0f b6 c9             	movzx  ecx,cl
c0010a0a:	c1 e1 06             	shl    ecx,0x6
c0010a0d:	09 e9                	or     ecx,ebp
c0010a0f:	83 fa 0f             	cmp    edx,0xf
c0010a12:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010a19:	75 38                	jne    c0010a53 <CPU::detectFeatures()+0x5b3>
c0010a1b:	c1 e8 14             	shr    eax,0x14
c0010a1e:	83 c0 0f             	add    eax,0xf
c0010a21:	0f b6 c0             	movzx  eax,al
c0010a24:	89 c2                	mov    edx,eax
c0010a26:	c1 e8 02             	shr    eax,0x2
c0010a29:	83 e2 03             	and    edx,0x3
c0010a2c:	89 d1                	mov    ecx,edx
c0010a2e:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010a34:	c1 e1 06             	shl    ecx,0x6
c0010a37:	83 e2 3f             	and    edx,0x3f
c0010a3a:	09 ca                	or     edx,ecx
c0010a3c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010a42:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010a48:	83 e2 c0             	and    edx,0xffffffc0
c0010a4b:	09 d0                	or     eax,edx
c0010a4d:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010a53:	83 ec 0c             	sub    esp,0xc
c0010a56:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010a5c:	83 c8 07             	or     eax,0x7
c0010a5f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a65:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a69:	50                   	push   eax
c0010a6a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010a6e:	55                   	push   ebp
c0010a6f:	57                   	push   edi
c0010a70:	56                   	push   esi
c0010a71:	68 00 00 00 80       	push   0x80000000
c0010a76:	e8 59 f8 ff ff       	call   c00102d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a7b:	83 c4 20             	add    esp,0x20
c0010a7e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010a86:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010a8a:	76 1e                	jbe    c0010aaa <CPU::detectFeatures()+0x60a>
c0010a8c:	83 ec 0c             	sub    esp,0xc
c0010a8f:	50                   	push   eax
c0010a90:	55                   	push   ebp
c0010a91:	57                   	push   edi
c0010a92:	56                   	push   esi
c0010a93:	68 01 00 00 80       	push   0x80000001
c0010a98:	e8 37 f8 ff ff       	call   c00102d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a9d:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010aa7:	83 c4 20             	add    esp,0x20
c0010aaa:	52                   	push   edx
c0010aab:	52                   	push   edx
c0010aac:	68 8d 22 02 c0       	push   0xc002228d
c0010ab1:	53                   	push   ebx
c0010ab2:	e8 99 c0 ff ff       	call   c000cb50 <Device::setName(char const*)>
c0010ab7:	83 c4 10             	add    esp,0x10
c0010aba:	eb 69                	jmp    c0010b25 <CPU::detectFeatures()+0x685>
c0010abc:	50                   	push   eax
c0010abd:	50                   	push   eax
c0010abe:	68 f2 21 02 c0       	push   0xc00221f2
c0010ac3:	55                   	push   ebp
c0010ac4:	e8 77 fb fe ff       	call   c0000640 <strcpy>
c0010ac9:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010ad3:	e8 eb f6 fe ff       	call   c00001c3 <is486>
c0010ad8:	83 c4 10             	add    esp,0x10
c0010adb:	85 c0                	test   eax,eax
c0010add:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010ae3:	74 1f                	je     c0010b04 <CPU::detectFeatures()+0x664>
c0010ae5:	83 c8 07             	or     eax,0x7
c0010ae8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010aee:	0f 20 c0             	mov    eax,cr0
c0010af1:	83 e0 14             	and    eax,0x14
c0010af4:	83 f8 04             	cmp    eax,0x4
c0010af7:	75 10                	jne    c0010b09 <CPU::detectFeatures()+0x669>
c0010af9:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010aff:	83 e0 fd             	and    eax,0xfffffffd
c0010b02:	eb 1b                	jmp    c0010b1f <CPU::detectFeatures()+0x67f>
c0010b04:	83 e0 f8             	and    eax,0xfffffff8
c0010b07:	eb df                	jmp    c0010ae8 <CPU::detectFeatures()+0x648>
c0010b09:	e8 90 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b0e:	83 e0 01             	and    eax,0x1
c0010b11:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b14:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b1a:	83 e0 fd             	and    eax,0xfffffffd
c0010b1d:	09 d0                	or     eax,edx
c0010b1f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b25:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010b2c:	74 17                	je     c0010b45 <CPU::detectFeatures()+0x6a5>
c0010b2e:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010b34:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010b3a:	83 c8 10             	or     eax,0x10
c0010b3d:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010b43:	eb 20                	jmp    c0010b65 <CPU::detectFeatures()+0x6c5>
c0010b45:	e8 54 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b4a:	83 e0 01             	and    eax,0x1
c0010b4d:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b50:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b56:	83 e0 fd             	and    eax,0xfffffffd
c0010b59:	09 d0                	or     eax,edx
c0010b5b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b61:	a8 02                	test   al,0x2
c0010b63:	75 c9                	jne    c0010b2e <CPU::detectFeatures()+0x68e>
c0010b65:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010b6c:	83 c4 2c             	add    esp,0x2c
c0010b6f:	5b                   	pop    ebx
c0010b70:	5e                   	pop    esi
c0010b71:	5f                   	pop    edi
c0010b72:	5d                   	pop    ebp
c0010b73:	c3                   	ret    

c0010b74 <CPU::setupSMEP()>:
c0010b74:	0f 20 e0             	mov    eax,cr4
c0010b77:	0d 00 00 10 00       	or     eax,0x100000
c0010b7c:	0f 22 e0             	mov    cr4,eax
c0010b7f:	c3                   	ret    

c0010b80 <CPU::setupUMIP()>:
c0010b80:	0f 20 e0             	mov    eax,cr4
c0010b83:	80 cc 08             	or     ah,0x8
c0010b86:	0f 22 e0             	mov    cr4,eax
c0010b89:	c3                   	ret    

c0010b8a <CPU::setupTSC()>:
c0010b8a:	0f 20 e0             	mov    eax,cr4
c0010b8d:	83 c8 04             	or     eax,0x4
c0010b90:	0f 22 e0             	mov    cr4,eax
c0010b93:	c3                   	ret    

c0010b94 <CPU::setupLargePages()>:
c0010b94:	0f 20 e0             	mov    eax,cr4
c0010b97:	83 c8 10             	or     eax,0x10
c0010b9a:	0f 22 e0             	mov    cr4,eax
c0010b9d:	c3                   	ret    

c0010b9e <CPU::setupPAT()>:
c0010b9e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010ba3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010baa:	74 2c                	je     c0010bd8 <CPU::setupPAT()+0x3a>
c0010bac:	53                   	push   ebx
c0010bad:	83 ec 10             	sub    esp,0x10
c0010bb0:	68 77 02 00 00       	push   0x277
c0010bb5:	50                   	push   eax
c0010bb6:	e8 05 65 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0010bbb:	83 e2 f8             	and    edx,0xfffffff8
c0010bbe:	83 ca 01             	or     edx,0x1
c0010bc1:	52                   	push   edx
c0010bc2:	50                   	push   eax
c0010bc3:	68 77 02 00 00       	push   0x277
c0010bc8:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010bce:	e8 19 65 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0010bd3:	83 c4 28             	add    esp,0x28
c0010bd6:	5b                   	pop    ebx
c0010bd7:	c3                   	ret    
c0010bd8:	c3                   	ret    
c0010bd9:	90                   	nop

c0010bda <CPU::setupMTRR()>:
c0010bda:	c3                   	ret    
c0010bdb:	90                   	nop

c0010bdc <CPU::setupGlobalPages()>:
c0010bdc:	0f 20 e0             	mov    eax,cr4
c0010bdf:	0c 80                	or     al,0x80
c0010be1:	0f 22 e0             	mov    cr4,eax
c0010be4:	c3                   	ret    
c0010be5:	90                   	nop

c0010be6 <CPU::allowUsermodeDataAccess()>:
c0010be6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bea:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010bf1:	74 03                	je     c0010bf6 <CPU::allowUsermodeDataAccess()+0x10>
c0010bf3:	0f 01 cb             	stac   
c0010bf6:	c3                   	ret    
c0010bf7:	90                   	nop

c0010bf8 <CPU::prohibitUsermodeDataAccess()>:
c0010bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bfc:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010c03:	74 03                	je     c0010c08 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010c05:	0f 01 ca             	clac   
c0010c08:	c3                   	ret    
c0010c09:	90                   	nop

c0010c0a <CPU::setupSMAP()>:
c0010c0a:	0f 20 e0             	mov    eax,cr4
c0010c0d:	0d 00 00 20 00       	or     eax,0x200000
c0010c12:	0f 22 e0             	mov    cr4,eax
c0010c15:	eb e1                	jmp    c0010bf8 <CPU::prohibitUsermodeDataAccess()>
c0010c17:	90                   	nop

c0010c18 <CPU::setupFeatures()>:
c0010c18:	53                   	push   ebx
c0010c19:	83 ec 08             	sub    esp,0x8
c0010c1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c20:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010c27:	74 18                	je     c0010c41 <CPU::setupFeatures()+0x29>
c0010c29:	83 ec 0c             	sub    esp,0xc
c0010c2c:	68 99 22 02 c0       	push   0xc0022299
c0010c31:	e8 0f 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c39:	e8 42 ff ff ff       	call   c0010b80 <CPU::setupUMIP()>
c0010c3e:	83 c4 10             	add    esp,0x10
c0010c41:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010c48:	74 18                	je     c0010c62 <CPU::setupFeatures()+0x4a>
c0010c4a:	83 ec 0c             	sub    esp,0xc
c0010c4d:	68 a3 22 02 c0       	push   0xc00222a3
c0010c52:	e8 ee 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c5a:	e8 2b ff ff ff       	call   c0010b8a <CPU::setupTSC()>
c0010c5f:	83 c4 10             	add    esp,0x10
c0010c62:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010c69:	74 18                	je     c0010c83 <CPU::setupFeatures()+0x6b>
c0010c6b:	83 ec 0c             	sub    esp,0xc
c0010c6e:	68 ac 22 02 c0       	push   0xc00222ac
c0010c73:	e8 cd 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c7b:	e8 14 ff ff ff       	call   c0010b94 <CPU::setupLargePages()>
c0010c80:	83 c4 10             	add    esp,0x10
c0010c83:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010c8a:	74 18                	je     c0010ca4 <CPU::setupFeatures()+0x8c>
c0010c8c:	83 ec 0c             	sub    esp,0xc
c0010c8f:	68 b5 22 02 c0       	push   0xc00222b5
c0010c94:	e8 ac 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c9c:	e8 3b ff ff ff       	call   c0010bdc <CPU::setupGlobalPages()>
c0010ca1:	83 c4 10             	add    esp,0x10
c0010ca4:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010cab:	74 18                	je     c0010cc5 <CPU::setupFeatures()+0xad>
c0010cad:	83 ec 0c             	sub    esp,0xc
c0010cb0:	68 c7 22 02 c0       	push   0xc00222c7
c0010cb5:	e8 8b 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010cba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cbd:	e8 dc fe ff ff       	call   c0010b9e <CPU::setupPAT()>
c0010cc2:	83 c4 10             	add    esp,0x10
c0010cc5:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010ccc:	74 11                	je     c0010cdf <CPU::setupFeatures()+0xc7>
c0010cce:	c7 44 24 10 d0 22 02 c0 	mov    DWORD PTR [esp+0x10],0xc00222d0
c0010cd6:	83 c4 08             	add    esp,0x8
c0010cd9:	5b                   	pop    ebx
c0010cda:	e9 66 9c ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010cdf:	83 c4 08             	add    esp,0x8
c0010ce2:	5b                   	pop    ebx
c0010ce3:	c3                   	ret    

c0010ce4 <CPU::open(int, int, void*)>:
c0010ce4:	55                   	push   ebp
c0010ce5:	57                   	push   edi
c0010ce6:	56                   	push   esi
c0010ce7:	53                   	push   ebx
c0010ce8:	83 ec 18             	sub    esp,0x18
c0010ceb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010cef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010cf3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010cf7:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010cfd:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010d03:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010d09:	50                   	push   eax
c0010d0a:	e8 af 66 ff ff       	call   c00073be <GDT::setup()>
c0010d0f:	83 c4 0c             	add    esp,0xc
c0010d12:	6a 00                	push   0x0
c0010d14:	68 ef be ad de       	push   0xdeadbeef
c0010d19:	55                   	push   ebp
c0010d1a:	e8 69 82 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010d1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010d22:	e8 41 82 ff ff       	call   c0008f68 <TSS::flush()>
c0010d27:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010d2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d30:	e8 ed 68 ff ff       	call   c0007622 <IDT::setup()>
c0010d35:	b8 00 04 00 00       	mov    eax,0x400
c0010d3a:	0f 23 f8             	mov    db7,eax
c0010d3d:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010d47:	e8 73 70 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010d4c:	83 c4 10             	add    esp,0x10
c0010d4f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010d55:	85 f6                	test   esi,esi
c0010d57:	89 38                	mov    DWORD PTR [eax],edi
c0010d59:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010d5f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010d62:	74 10                	je     c0010d74 <CPU::open(int, int, void*)+0x90>
c0010d64:	50                   	push   eax
c0010d65:	50                   	push   eax
c0010d66:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010d6c:	56                   	push   esi
c0010d6d:	e8 3c 8b ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c0010d72:	eb 0d                	jmp    c0010d81 <CPU::open(int, int, void*)+0x9d>
c0010d74:	83 ec 0c             	sub    esp,0xc
c0010d77:	68 da 22 02 c0       	push   0xc00222da
c0010d7c:	e8 9e 08 00 00       	call   c001161f <KePanic(char const*)>
c0010d81:	83 c4 10             	add    esp,0x10
c0010d84:	83 ec 0c             	sub    esp,0xc
c0010d87:	68 e8 22 02 c0       	push   0xc00222e8
c0010d8c:	e8 8e 01 00 00       	call   c0010f1f <KeSetBootMessage(char const*)>
c0010d91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d94:	e8 07 f7 ff ff       	call   c00104a0 <CPU::detectFeatures()>
c0010d99:	c7 04 24 0b 23 02 c0 	mov    DWORD PTR [esp],0xc002230b
c0010da0:	e8 7a 01 00 00       	call   c0010f1f <KeSetBootMessage(char const*)>
c0010da5:	e8 2f 74 00 00       	call   c00181d9 <HalInitialise()>
c0010daa:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010daf:	83 e0 10             	and    eax,0x10
c0010db2:	83 f8 01             	cmp    eax,0x1
c0010db5:	19 c0                	sbb    eax,eax
c0010db7:	83 e0 46             	and    eax,0x46
c0010dba:	83 c0 1e             	add    eax,0x1e
c0010dbd:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dc0:	e8 28 d6 ff ff       	call   c000e3ed <setupTimer(int)>
c0010dc5:	83 c4 10             	add    esp,0x10
c0010dc8:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010dce:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010dd5:	74 0c                	je     c0010de3 <CPU::open(int, int, void*)+0xff>
c0010dd7:	83 ec 0c             	sub    esp,0xc
c0010dda:	53                   	push   ebx
c0010ddb:	e8 38 fe ff ff       	call   c0010c18 <CPU::setupFeatures()>
c0010de0:	83 c4 10             	add    esp,0x10
c0010de3:	83 c4 0c             	add    esp,0xc
c0010de6:	31 c0                	xor    eax,eax
c0010de8:	5b                   	pop    ebx
c0010de9:	5e                   	pop    esi
c0010dea:	5f                   	pop    edi
c0010deb:	5d                   	pop    ebp
c0010dec:	c3                   	ret    

c0010ded <KeInitialiseAtexit()>:
c0010ded:	83 ec 10             	sub    esp,0x10
c0010df0:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010dfa:	6a 60                	push   0x60
c0010dfc:	6a 00                	push   0x0
c0010dfe:	68 20 be 02 c0       	push   0xc002be20
c0010e03:	e8 e8 f6 fe ff       	call   c00004f0 <memset>
c0010e08:	83 c4 1c             	add    esp,0x1c
c0010e0b:	c3                   	ret    

c0010e0c <KeRegisterAtexit(void (*)(void*), void*)>:
c0010e0c:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010e11:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010e15:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010e1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e20:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010e27:	40                   	inc    eax
c0010e28:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010e2d:	83 f8 17             	cmp    eax,0x17
c0010e30:	7e 0d                	jle    c0010e3f <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010e32:	c7 44 24 04 4c 23 02 c0 	mov    DWORD PTR [esp+0x4],0xc002234c
c0010e3a:	e9 e0 07 00 00       	jmp    c001161f <KePanic(char const*)>
c0010e3f:	c3                   	ret    

c0010e40 <KeExecuteAtexit()>:
c0010e40:	53                   	push   ebx
c0010e41:	31 db                	xor    ebx,ebx
c0010e43:	83 ec 08             	sub    esp,0x8
c0010e46:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010e4c:	7e 50                	jle    c0010e9e <KeExecuteAtexit()+0x5e>
c0010e4e:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010e55:	85 c0                	test   eax,eax
c0010e57:	74 42                	je     c0010e9b <KeExecuteAtexit()+0x5b>
c0010e59:	51                   	push   ecx
c0010e5a:	50                   	push   eax
c0010e5b:	53                   	push   ebx
c0010e5c:	68 65 23 02 c0       	push   0xc0022365
c0010e61:	e8 df 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010e66:	58                   	pop    eax
c0010e67:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010e6e:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010e75:	c7 04 24 87 23 02 c0 	mov    DWORD PTR [esp],0xc0022387
c0010e7c:	e8 c4 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010e81:	c7 04 24 e7 34 02 c0 	mov    DWORD PTR [esp],0xc00234e7
c0010e88:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010e93:	e8 ad 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010e98:	83 c4 10             	add    esp,0x10
c0010e9b:	43                   	inc    ebx
c0010e9c:	eb a8                	jmp    c0010e46 <KeExecuteAtexit()+0x6>
c0010e9e:	83 c4 08             	add    esp,0x8
c0010ea1:	5b                   	pop    ebx
c0010ea2:	c3                   	ret    

c0010ea3 <KeDisplaySplashScreen()>:
c0010ea3:	55                   	push   ebp
c0010ea4:	bd 05 00 00 00       	mov    ebp,0x5
c0010ea9:	57                   	push   edi
c0010eaa:	bf 0a 00 00 00       	mov    edi,0xa
c0010eaf:	56                   	push   esi
c0010eb0:	31 f6                	xor    esi,esi
c0010eb2:	53                   	push   ebx
c0010eb3:	31 db                	xor    ebx,ebx
c0010eb5:	83 ec 0c             	sub    esp,0xc
c0010eb8:	0f b6 96 40 37 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc8c0]
c0010ebf:	89 d0                	mov    eax,edx
c0010ec1:	85 d2                	test   edx,edx
c0010ec3:	74 52                	je     c0010f17 <KeDisplaySplashScreen()+0x74>
c0010ec5:	80 bb 76 37 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc88a],0xdb
c0010ecc:	75 13                	jne    c0010ee1 <KeDisplaySplashScreen()+0x3e>
c0010ece:	0f b6 8b 75 37 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc88b]
c0010ed5:	83 e1 fe             	and    ecx,0xfffffffe
c0010ed8:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010ede:	75 01                	jne    c0010ee1 <KeDisplaySplashScreen()+0x3e>
c0010ee0:	47                   	inc    edi
c0010ee1:	83 fa 0d             	cmp    edx,0xd
c0010ee4:	74 28                	je     c0010f0e <KeDisplaySplashScreen()+0x6b>
c0010ee6:	83 fa 0a             	cmp    edx,0xa
c0010ee9:	75 0a                	jne    c0010ef5 <KeDisplaySplashScreen()+0x52>
c0010eeb:	45                   	inc    ebp
c0010eec:	bf 0a 00 00 00       	mov    edi,0xa
c0010ef1:	31 db                	xor    ebx,ebx
c0010ef3:	eb 19                	jmp    c0010f0e <KeDisplaySplashScreen()+0x6b>
c0010ef5:	83 ec 0c             	sub    esp,0xc
c0010ef8:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010efb:	55                   	push   ebp
c0010efc:	0f be c0             	movsx  eax,al
c0010eff:	52                   	push   edx
c0010f00:	43                   	inc    ebx
c0010f01:	6a 00                	push   0x0
c0010f03:	6a 0e                	push   0xe
c0010f05:	50                   	push   eax
c0010f06:	e8 4d 7f 00 00       	call   c0018e58 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010f0b:	83 c4 20             	add    esp,0x20
c0010f0e:	46                   	inc    esi
c0010f0f:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010f15:	75 a1                	jne    c0010eb8 <KeDisplaySplashScreen()+0x15>
c0010f17:	83 c4 0c             	add    esp,0xc
c0010f1a:	5b                   	pop    ebx
c0010f1b:	5e                   	pop    esi
c0010f1c:	5f                   	pop    edi
c0010f1d:	5d                   	pop    ebp
c0010f1e:	c3                   	ret    

c0010f1f <KeSetBootMessage(char const*)>:
c0010f1f:	57                   	push   edi
c0010f20:	56                   	push   esi
c0010f21:	53                   	push   ebx
c0010f22:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010f28:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010f2f:	68 9e 00 00 00       	push   0x9e
c0010f34:	6a 00                	push   0x0
c0010f36:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010f3a:	56                   	push   esi
c0010f3b:	e8 b0 f5 fe ff       	call   c00004f0 <memset>
c0010f40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f43:	e8 28 f6 fe ff       	call   c0000570 <strlen>
c0010f48:	ba 50 00 00 00       	mov    edx,0x50
c0010f4d:	83 c4 10             	add    esp,0x10
c0010f50:	29 c2                	sub    edx,eax
c0010f52:	31 c9                	xor    ecx,ecx
c0010f54:	83 e2 fe             	and    edx,0xfffffffe
c0010f57:	01 f2                	add    edx,esi
c0010f59:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010f5e:	84 c0                	test   al,al
c0010f60:	74 0a                	je     c0010f6c <KeSetBootMessage(char const*)+0x4d>
c0010f62:	80 cc 0f             	or     ah,0xf
c0010f65:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010f69:	41                   	inc    ecx
c0010f6a:	eb ed                	jmp    c0010f59 <KeSetBootMessage(char const*)+0x3a>
c0010f6c:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010f71:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010f76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f78:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010f7e:	5b                   	pop    ebx
c0010f7f:	5e                   	pop    esi
c0010f80:	5f                   	pop    edi
c0010f81:	c3                   	ret    
c0010f82:	66 90                	xchg   ax,ax

c0010f84 <Krnl::handlePowerButton()>:
c0010f84:	83 ec 0c             	sub    esp,0xc
c0010f87:	e8 ee 06 00 00       	call   c001167a <KeHandlePowerButton()>
c0010f8c:	90                   	nop
c0010f8d:	83 c4 0c             	add    esp,0xc
c0010f90:	c3                   	ret    
c0010f91:	8d 76 00             	lea    esi,[esi+0x0]

c0010f94 <Krnl::handleSleepButton()>:
c0010f94:	83 ec 0c             	sub    esp,0xc
c0010f97:	e8 13 07 00 00       	call   c00116af <KeHandleSleepButton()>
c0010f9c:	90                   	nop
c0010f9d:	83 c4 0c             	add    esp,0xc
c0010fa0:	c3                   	ret    

c0010fa1 <KeCalculateCRC32(unsigned char*, int)>:
c0010fa1:	53                   	push   ebx
c0010fa2:	83 c8 ff             	or     eax,0xffffffff
c0010fa5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010fa9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010fad:	01 cb                	add    ebx,ecx
c0010faf:	39 d9                	cmp    ecx,ebx
c0010fb1:	74 15                	je     c0010fc8 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010fb3:	41                   	inc    ecx
c0010fb4:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010fb7:	31 c2                	xor    edx,eax
c0010fb9:	c1 e8 08             	shr    eax,0x8
c0010fbc:	0f b6 d2             	movzx  edx,dl
c0010fbf:	33 04 95 a0 38 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc760]
c0010fc6:	eb e7                	jmp    c0010faf <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010fc8:	f7 d0                	not    eax
c0010fca:	5b                   	pop    ebx
c0010fcb:	c3                   	ret    

c0010fcc <EnvVarContainer::getEnv(char const*)>:
c0010fcc:	57                   	push   edi
c0010fcd:	56                   	push   esi
c0010fce:	53                   	push   ebx
c0010fcf:	31 db                	xor    ebx,ebx
c0010fd1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010fd5:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010fd7:	7e 2b                	jle    c0011004 <EnvVarContainer::getEnv(char const*)+0x38>
c0010fd9:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010fe0:	50                   	push   eax
c0010fe1:	50                   	push   eax
c0010fe2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010fe5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010fe8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010fec:	e8 5f f7 fe ff       	call   c0000750 <strcmp>
c0010ff1:	83 c4 10             	add    esp,0x10
c0010ff4:	85 c0                	test   eax,eax
c0010ff6:	75 09                	jne    c0011001 <EnvVarContainer::getEnv(char const*)+0x35>
c0010ff8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010ffb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010fff:	eb 05                	jmp    c0011006 <EnvVarContainer::getEnv(char const*)+0x3a>
c0011001:	43                   	inc    ebx
c0011002:	eb d1                	jmp    c0010fd5 <EnvVarContainer::getEnv(char const*)+0x9>
c0011004:	31 c0                	xor    eax,eax
c0011006:	5b                   	pop    ebx
c0011007:	5e                   	pop    esi
c0011008:	5f                   	pop    edi
c0011009:	c3                   	ret    

c001100a <EnvVarContainer::setEnv(char const*, char const*)>:
c001100a:	55                   	push   ebp
c001100b:	57                   	push   edi
c001100c:	56                   	push   esi
c001100d:	53                   	push   ebx
c001100e:	83 ec 28             	sub    esp,0x28
c0011011:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011015:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0011019:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001101d:	56                   	push   esi
c001101e:	e8 4d f5 fe ff       	call   c0000570 <strlen>
c0011023:	40                   	inc    eax
c0011024:	89 04 24             	mov    DWORD PTR [esp],eax
c0011027:	e8 8a 6a ff ff       	call   c0007ab6 <malloc>
c001102c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001102f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011033:	e8 38 f5 fe ff       	call   c0000570 <strlen>
c0011038:	40                   	inc    eax
c0011039:	89 04 24             	mov    DWORD PTR [esp],eax
c001103c:	e8 75 6a ff ff       	call   c0007ab6 <malloc>
c0011041:	89 34 24             	mov    DWORD PTR [esp],esi
c0011044:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011048:	e8 23 f5 fe ff       	call   c0000570 <strlen>
c001104d:	83 c4 0c             	add    esp,0xc
c0011050:	40                   	inc    eax
c0011051:	50                   	push   eax
c0011052:	6a 00                	push   0x0
c0011054:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011058:	e8 93 f4 fe ff       	call   c00004f0 <memset>
c001105d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011060:	e8 0b f5 fe ff       	call   c0000570 <strlen>
c0011065:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011069:	8d 48 01             	lea    ecx,[eax+0x1]
c001106c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001106e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011071:	89 de                	mov    esi,ebx
c0011073:	e8 f8 f4 fe ff       	call   c0000570 <strlen>
c0011078:	83 c4 0c             	add    esp,0xc
c001107b:	40                   	inc    eax
c001107c:	50                   	push   eax
c001107d:	6a 00                	push   0x0
c001107f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011083:	e8 68 f4 fe ff       	call   c00004f0 <memset>
c0011088:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001108b:	e8 e0 f4 fe ff       	call   c0000570 <strlen>
c0011090:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011094:	8d 48 01             	lea    ecx,[eax+0x1]
c0011097:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011099:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001109c:	40                   	inc    eax
c001109d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00110a0:	c1 e0 03             	shl    eax,0x3
c00110a3:	5a                   	pop    edx
c00110a4:	59                   	pop    ecx
c00110a5:	50                   	push   eax
c00110a6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00110a9:	e8 f4 69 ff ff       	call   c0007aa2 <realloc>
c00110ae:	8d 74 24 18          	lea    esi,[esp+0x18]
c00110b2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00110b5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00110b8:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00110bc:	b9 08 00 00 00       	mov    ecx,0x8
c00110c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110c3:	83 c4 2c             	add    esp,0x2c
c00110c6:	5b                   	pop    ebx
c00110c7:	5e                   	pop    esi
c00110c8:	5f                   	pop    edi
c00110c9:	5d                   	pop    ebp
c00110ca:	c3                   	ret    
c00110cb:	90                   	nop

c00110cc <EnvVarContainer::deleteEnv(char const*)>:
c00110cc:	c3                   	ret    
c00110cd:	90                   	nop

c00110ce <EnvVarContainer::loadFrom(char const*, char const*)>:
c00110ce:	55                   	push   ebp
c00110cf:	57                   	push   edi
c00110d0:	56                   	push   esi
c00110d1:	53                   	push   ebx
c00110d2:	81 ec 38 01 00 00    	sub    esp,0x138
c00110d8:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00110df:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00110e6:	68 14 01 00 00       	push   0x114
c00110eb:	e8 c6 69 ff ff       	call   c0007ab6 <malloc>
c00110f0:	83 c4 0c             	add    esp,0xc
c00110f3:	89 c3                	mov    ebx,eax
c00110f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00110f8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00110ff:	50                   	push   eax
c0011100:	e8 47 aa ff ff       	call   c000bb4c <File::File(char const*, Process*)>
c0011105:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011108:	e8 21 ad ff ff       	call   c000be2e <File::exists()>
c001110d:	83 c4 10             	add    esp,0x10
c0011110:	84 c0                	test   al,al
c0011112:	75 31                	jne    c0011145 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0011114:	50                   	push   eax
c0011115:	50                   	push   eax
c0011116:	6a 12                	push   0x12
c0011118:	53                   	push   ebx
c0011119:	e8 4c aa ff ff       	call   c000bb6a <File::open(FileOpenMode)>
c001111e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011120:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0011123:	89 34 24             	mov    DWORD PTR [esp],esi
c0011126:	e8 45 f4 fe ff       	call   c0000570 <strlen>
c001112b:	5a                   	pop    edx
c001112c:	31 d2                	xor    edx,edx
c001112e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0011132:	51                   	push   ecx
c0011133:	56                   	push   esi
c0011134:	52                   	push   edx
c0011135:	50                   	push   eax
c0011136:	53                   	push   ebx
c0011137:	ff d7                	call   edi
c0011139:	83 c4 14             	add    esp,0x14
c001113c:	53                   	push   ebx
c001113d:	e8 86 aa ff ff       	call   c000bbc8 <File::close()>
c0011142:	83 c4 10             	add    esp,0x10
c0011145:	56                   	push   esi
c0011146:	31 f6                	xor    esi,esi
c0011148:	68 00 01 00 00       	push   0x100
c001114d:	6a 00                	push   0x0
c001114f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011153:	50                   	push   eax
c0011154:	e8 97 f3 fe ff       	call   c00004f0 <memset>
c0011159:	5f                   	pop    edi
c001115a:	58                   	pop    eax
c001115b:	6a 01                	push   0x1
c001115d:	53                   	push   ebx
c001115e:	e8 07 aa ff ff       	call   c000bb6a <File::open(FileOpenMode)>
c0011163:	83 c4 10             	add    esp,0x10
c0011166:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001116e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011176:	83 ec 0c             	sub    esp,0xc
c0011179:	8b 03                	mov    eax,DWORD PTR [ebx]
c001117b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001117f:	51                   	push   ecx
c0011180:	8d 54 24 23          	lea    edx,[esp+0x23]
c0011184:	52                   	push   edx
c0011185:	6a 00                	push   0x0
c0011187:	6a 01                	push   0x1
c0011189:	53                   	push   ebx
c001118a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001118d:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0011192:	83 c4 20             	add    esp,0x20
c0011195:	89 c2                	mov    edx,eax
c0011197:	85 c0                	test   eax,eax
c0011199:	0f 84 36 01 00 00    	je     c00112d5 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001119f:	83 f8 0d             	cmp    eax,0xd
c00111a2:	0f 84 22 01 00 00    	je     c00112ca <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00111a8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00111ad:	0f 84 f0 00 00 00    	je     c00112a3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c00111b3:	83 f8 0a             	cmp    eax,0xa
c00111b6:	74 13                	je     c00111cb <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00111b8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00111bd:	74 0c                	je     c00111cb <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00111bf:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00111c5:	0f 8e f6 00 00 00    	jle    c00112c1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c00111cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111cf:	83 ec 0c             	sub    esp,0xc
c00111d2:	8d 78 01             	lea    edi,[eax+0x1]
c00111d5:	57                   	push   edi
c00111d6:	e8 db 68 ff ff       	call   c0007ab6 <malloc>
c00111db:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00111df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00111e3:	8d 56 04             	lea    edx,[esi+0x4]
c00111e6:	89 14 24             	mov    DWORD PTR [esp],edx
c00111e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00111ed:	e8 c4 68 ff ff       	call   c0007ab6 <malloc>
c00111f2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00111f6:	83 c4 0c             	add    esp,0xc
c00111f9:	57                   	push   edi
c00111fa:	6a 00                	push   0x0
c00111fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011200:	e8 eb f2 fe ff       	call   c00004f0 <memset>
c0011205:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011209:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001120d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011211:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011213:	83 c4 0c             	add    esp,0xc
c0011216:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001121a:	52                   	push   edx
c001121b:	6a 00                	push   0x0
c001121d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011221:	e8 ca f2 fe ff       	call   c00004f0 <memset>
c0011226:	8d 74 24 30          	lea    esi,[esp+0x30]
c001122a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001122e:	89 34 24             	mov    DWORD PTR [esp],esi
c0011231:	e8 3a f3 fe ff       	call   c0000570 <strlen>
c0011236:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001123a:	89 c1                	mov    ecx,eax
c001123c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001123e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011241:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0011244:	40                   	inc    eax
c0011245:	83 c4 10             	add    esp,0x10
c0011248:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001124b:	85 d2                	test   edx,edx
c001124d:	75 0c                	jne    c001125b <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001124f:	83 ec 0c             	sub    esp,0xc
c0011252:	6a 08                	push   0x8
c0011254:	e8 5d 68 ff ff       	call   c0007ab6 <malloc>
c0011259:	eb 0c                	jmp    c0011267 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c001125b:	c1 e0 03             	shl    eax,0x3
c001125e:	51                   	push   ecx
c001125f:	51                   	push   ecx
c0011260:	50                   	push   eax
c0011261:	52                   	push   edx
c0011262:	e8 3b 68 ff ff       	call   c0007aa2 <realloc>
c0011267:	83 c4 10             	add    esp,0x10
c001126a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001126d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011270:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0011273:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011277:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001127b:	b9 08 00 00 00       	mov    ecx,0x8
c0011280:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011282:	31 f6                	xor    esi,esi
c0011284:	50                   	push   eax
c0011285:	68 00 01 00 00       	push   0x100
c001128a:	6a 00                	push   0x0
c001128c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011290:	50                   	push   eax
c0011291:	e8 5a f2 fe ff       	call   c00004f0 <memset>
c0011296:	83 c4 10             	add    esp,0x10
c0011299:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00112a1:	eb 27                	jmp    c00112ca <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112a3:	83 f8 3d             	cmp    eax,0x3d
c00112a6:	74 1e                	je     c00112c6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c00112a8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00112ae:	7f 07                	jg     c00112b7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c00112b0:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c00112b4:	46                   	inc    esi
c00112b5:	eb 13                	jmp    c00112ca <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112b7:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00112bf:	eb 09                	jmp    c00112ca <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112c1:	83 f8 3d             	cmp    eax,0x3d
c00112c4:	75 ea                	jne    c00112b0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c00112c6:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00112ca:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00112cf:	0f 85 99 fe ff ff    	jne    c001116e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00112d5:	83 ec 0c             	sub    esp,0xc
c00112d8:	53                   	push   ebx
c00112d9:	e8 ea a8 ff ff       	call   c000bbc8 <File::close()>
c00112de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112e6:	81 c4 3c 01 00 00    	add    esp,0x13c
c00112ec:	5b                   	pop    ebx
c00112ed:	5e                   	pop    esi
c00112ee:	5f                   	pop    edi
c00112ef:	5d                   	pop    ebp
c00112f0:	c3                   	ret    
c00112f1:	90                   	nop

c00112f2 <EnvVarContainer::__loadSystem()>:
c00112f2:	83 ec 10             	sub    esp,0x10
c00112f5:	68 a0 3c 02 c0       	push   0xc0023ca0
c00112fa:	68 8c 23 02 c0       	push   0xc002238c
c00112ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011303:	e8 c6 fd ff ff       	call   c00110ce <EnvVarContainer::loadFrom(char const*, char const*)>
c0011308:	83 c4 1c             	add    esp,0x1c
c001130b:	c3                   	ret    

c001130c <EnvVarContainer::__loadUser()>:
c001130c:	c3                   	ret    
c001130d:	90                   	nop

c001130e <EnvVarContainer::EnvVarContainer(Process*)>:
c001130e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011312:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001131c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011320:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011323:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011327:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001132e:	90                   	nop
c001132f:	c3                   	ret    

c0011330 <EnvVarContainer::~EnvVarContainer()>:
c0011330:	83 ec 0c             	sub    esp,0xc
c0011333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011337:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001133a:	85 c0                	test   eax,eax
c001133c:	74 1d                	je     c001135b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001133e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011342:	8b 00                	mov    eax,DWORD PTR [eax]
c0011344:	85 c0                	test   eax,eax
c0011346:	74 13                	je     c001135b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001134c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001134f:	83 ec 0c             	sub    esp,0xc
c0011352:	50                   	push   eax
c0011353:	e8 6e 67 ff ff       	call   c0007ac6 <free>
c0011358:	83 c4 10             	add    esp,0x10
c001135b:	90                   	nop
c001135c:	83 c4 0c             	add    esp,0xc
c001135f:	c3                   	ret    

c0011360 <KeGetEnv(Process*, char const*)>:
c0011360:	53                   	push   ebx
c0011361:	83 ec 08             	sub    esp,0x8
c0011364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011368:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001136c:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c0011372:	74 04                	je     c0011378 <KeGetEnv(Process*, char const*)+0x18>
c0011374:	85 c0                	test   eax,eax
c0011376:	75 0b                	jne    c0011383 <KeGetEnv(Process*, char const*)+0x23>
c0011378:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c001137d:	85 c0                	test   eax,eax
c001137f:	75 19                	jne    c001139a <KeGetEnv(Process*, char const*)+0x3a>
c0011381:	eb 27                	jmp    c00113aa <KeGetEnv(Process*, char const*)+0x4a>
c0011383:	52                   	push   edx
c0011384:	52                   	push   edx
c0011385:	53                   	push   ebx
c0011386:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001138c:	e8 3b fc ff ff       	call   c0010fcc <EnvVarContainer::getEnv(char const*)>
c0011391:	83 c4 10             	add    esp,0x10
c0011394:	85 c0                	test   eax,eax
c0011396:	75 28                	jne    c00113c0 <KeGetEnv(Process*, char const*)+0x60>
c0011398:	eb de                	jmp    c0011378 <KeGetEnv(Process*, char const*)+0x18>
c001139a:	52                   	push   edx
c001139b:	52                   	push   edx
c001139c:	53                   	push   ebx
c001139d:	50                   	push   eax
c001139e:	e8 29 fc ff ff       	call   c0010fcc <EnvVarContainer::getEnv(char const*)>
c00113a3:	83 c4 10             	add    esp,0x10
c00113a6:	85 c0                	test   eax,eax
c00113a8:	75 16                	jne    c00113c0 <KeGetEnv(Process*, char const*)+0x60>
c00113aa:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00113ae:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00113b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00113b7:	83 c4 08             	add    esp,0x8
c00113ba:	5b                   	pop    ebx
c00113bb:	e9 0c fc ff ff       	jmp    c0010fcc <EnvVarContainer::getEnv(char const*)>
c00113c0:	83 c4 08             	add    esp,0x8
c00113c3:	5b                   	pop    ebx
c00113c4:	c3                   	ret    

c00113c5 <KeSetEnvSystem(char const*, char const*)>:
c00113c5:	83 ec 10             	sub    esp,0x10
c00113c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113d0:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c00113d6:	e8 2f fc ff ff       	call   c001100a <EnvVarContainer::setEnv(char const*, char const*)>
c00113db:	83 c4 1c             	add    esp,0x1c
c00113de:	c3                   	ret    

c00113df <KeSetEnvUser(char const*, char const*)>:
c00113df:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00113e4:	85 c0                	test   eax,eax
c00113e6:	74 15                	je     c00113fd <KeSetEnvUser(char const*, char const*)+0x1e>
c00113e8:	83 ec 10             	sub    esp,0x10
c00113eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113f3:	50                   	push   eax
c00113f4:	e8 11 fc ff ff       	call   c001100a <EnvVarContainer::setEnv(char const*, char const*)>
c00113f9:	83 c4 1c             	add    esp,0x1c
c00113fc:	c3                   	ret    
c00113fd:	c3                   	ret    

c00113fe <KeSetEnvProcess(Process*, char const*, char const*)>:
c00113fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011402:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0011408:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001140c:	e9 f9 fb ff ff       	jmp    c001100a <EnvVarContainer::setEnv(char const*, char const*)>

c0011411 <KeDeleteEnvSystem(char const*)>:
c0011411:	c3                   	ret    

c0011412 <KeDeleteEnvUser(char const*)>:
c0011412:	c3                   	ret    

c0011413 <KeDeleteEnvProcess(Process*, char const*)>:
c0011413:	c3                   	ret    

c0011414 <KeNewProcessEnv(Process*)>:
c0011414:	83 ec 28             	sub    esp,0x28
c0011417:	6a 0c                	push   0xc
c0011419:	e8 98 66 ff ff       	call   c0007ab6 <malloc>
c001141e:	5a                   	pop    edx
c001141f:	59                   	pop    ecx
c0011420:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011424:	50                   	push   eax
c0011425:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011429:	e8 e0 fe ff ff       	call   c001130e <EnvVarContainer::EnvVarContainer(Process*)>
c001142e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011432:	83 c4 2c             	add    esp,0x2c
c0011435:	c3                   	ret    

c0011436 <KeCopyProcessEnv(Process*, Process*)>:
c0011436:	57                   	push   edi
c0011437:	56                   	push   esi
c0011438:	53                   	push   ebx
c0011439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001143d:	83 ec 0c             	sub    esp,0xc
c0011440:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011446:	6a 0c                	push   0xc
c0011448:	e8 69 66 ff ff       	call   c0007ab6 <malloc>
c001144d:	89 c3                	mov    ebx,eax
c001144f:	58                   	pop    eax
c0011450:	5a                   	pop    edx
c0011451:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011455:	53                   	push   ebx
c0011456:	e8 b3 fe ff ff       	call   c001130e <EnvVarContainer::EnvVarContainer(Process*)>
c001145b:	8b 07                	mov    eax,DWORD PTR [edi]
c001145d:	89 03                	mov    DWORD PTR [ebx],eax
c001145f:	c1 e0 03             	shl    eax,0x3
c0011462:	89 04 24             	mov    DWORD PTR [esp],eax
c0011465:	e8 4c 66 ff ff       	call   c0007ab6 <malloc>
c001146a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001146d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001146f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011472:	c1 e1 03             	shl    ecx,0x3
c0011475:	89 c7                	mov    edi,eax
c0011477:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011479:	83 c4 10             	add    esp,0x10
c001147c:	89 d8                	mov    eax,ebx
c001147e:	5b                   	pop    ebx
c001147f:	5e                   	pop    esi
c0011480:	5f                   	pop    edi
c0011481:	c3                   	ret    

c0011482 <KeLoadSystemEnv()>:
c0011482:	53                   	push   ebx
c0011483:	83 ec 14             	sub    esp,0x14
c0011486:	6a 0c                	push   0xc
c0011488:	e8 29 66 ff ff       	call   c0007ab6 <malloc>
c001148d:	89 c3                	mov    ebx,eax
c001148f:	58                   	pop    eax
c0011490:	5a                   	pop    edx
c0011491:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011497:	53                   	push   ebx
c0011498:	e8 71 fe ff ff       	call   c001130e <EnvVarContainer::EnvVarContainer(Process*)>
c001149d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114a0:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c00114a6:	e8 47 fe ff ff       	call   c00112f2 <EnvVarContainer::__loadSystem()>
c00114ab:	83 c4 18             	add    esp,0x18
c00114ae:	5b                   	pop    ebx
c00114af:	c3                   	ret    

c00114b0 <KeLoadUserEnv()>:
c00114b0:	53                   	push   ebx
c00114b1:	83 ec 14             	sub    esp,0x14
c00114b4:	6a 0c                	push   0xc
c00114b6:	e8 fb 65 ff ff       	call   c0007ab6 <malloc>
c00114bb:	89 c3                	mov    ebx,eax
c00114bd:	58                   	pop    eax
c00114be:	5a                   	pop    edx
c00114bf:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00114c5:	53                   	push   ebx
c00114c6:	e8 43 fe ff ff       	call   c001130e <EnvVarContainer::EnvVarContainer(Process*)>
c00114cb:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c00114d1:	83 c4 18             	add    esp,0x18
c00114d4:	5b                   	pop    ebx
c00114d5:	c3                   	ret    

c00114d6 <KeFlushEnv()>:
c00114d6:	c3                   	ret    

c00114d7 <KeGetProcessTotalEnvCount(Process*)>:
c00114d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114db:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c00114e1:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00114e7:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00114ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00114ee:	03 01                	add    eax,DWORD PTR [ecx]
c00114f0:	85 d2                	test   edx,edx
c00114f2:	74 02                	je     c00114f6 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00114f4:	03 02                	add    eax,DWORD PTR [edx]
c00114f6:	c3                   	ret    

c00114f7 <KeGetProcessEnvPair(Process*, int)>:
c00114f7:	57                   	push   edi
c00114f8:	56                   	push   esi
c00114f9:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c00114ff:	53                   	push   ebx
c0011500:	85 f6                	test   esi,esi
c0011502:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011506:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001150a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011510:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011514:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011516:	75 16                	jne    c001152e <KeGetProcessEnvPair(Process*, int)+0x37>
c0011518:	39 c2                	cmp    edx,eax
c001151a:	7c 16                	jl     c0011532 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001151c:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c0011522:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011524:	01 c6                	add    esi,eax
c0011526:	39 d6                	cmp    esi,edx
c0011528:	7e 3c                	jle    c0011566 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001152a:	29 c2                	sub    edx,eax
c001152c:	eb 04                	jmp    c0011532 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001152e:	39 c2                	cmp    edx,eax
c0011530:	7d 05                	jge    c0011537 <KeGetProcessEnvPair(Process*, int)+0x40>
c0011532:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011535:	eb 20                	jmp    c0011557 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011537:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011539:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001153c:	39 d1                	cmp    ecx,edx
c001153e:	7e 04                	jle    c0011544 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011540:	29 c2                	sub    edx,eax
c0011542:	eb 10                	jmp    c0011554 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011544:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c001154a:	03 0e                	add    ecx,DWORD PTR [esi]
c001154c:	39 d1                	cmp    ecx,edx
c001154e:	7e 16                	jle    c0011566 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011550:	29 c2                	sub    edx,eax
c0011552:	29 fa                	sub    edx,edi
c0011554:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011557:	8d 14 d0             	lea    edx,[eax+edx*8]
c001155a:	8b 02                	mov    eax,DWORD PTR [edx]
c001155c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001155f:	89 03                	mov    DWORD PTR [ebx],eax
c0011561:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011564:	eb 1d                	jmp    c0011583 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011566:	83 ec 0c             	sub    esp,0xc
c0011569:	68 ae 23 02 c0       	push   0xc00223ae
c001156e:	e8 ac 00 00 00       	call   c001161f <KePanic(char const*)>
c0011573:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011579:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011580:	83 c4 10             	add    esp,0x10
c0011583:	89 d8                	mov    eax,ebx
c0011585:	5b                   	pop    ebx
c0011586:	5e                   	pop    esi
c0011587:	5f                   	pop    edi
c0011588:	c2 04 00             	ret    0x4

c001158b <CPU::current()>:
c001158b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011590:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011596:	c3                   	ret    

c0011597 <operator new(unsigned long)>:
c0011597:	e9 1a 65 ff ff       	jmp    c0007ab6 <malloc>

c001159c <operator delete(void*)>:
c001159c:	e9 35 65 ff ff       	jmp    c0007ad6 <rfree>

c00115a1 <disableIRQs()>:
c00115a1:	fa                   	cli    
c00115a2:	c3                   	ret    

c00115a3 <enableIRQs()>:
c00115a3:	fb                   	sti    
c00115a4:	c3                   	ret    

c00115a5 <lockScheduler()>:
c00115a5:	fa                   	cli    
c00115a6:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00115ac:	c3                   	ret    

c00115ad <unlockScheduler()>:
c00115ad:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115b2:	48                   	dec    eax
c00115b3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115b8:	75 01                	jne    c00115bb <unlockScheduler()+0xe>
c00115ba:	fb                   	sti    
c00115bb:	c3                   	ret    

c00115bc <lockStuff()>:
c00115bc:	fa                   	cli    
c00115bd:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00115c3:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c00115c9:	c3                   	ret    

c00115ca <unlockStuff()>:
c00115ca:	83 ec 0c             	sub    esp,0xc
c00115cd:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00115d2:	48                   	dec    eax
c00115d3:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00115d8:	75 18                	jne    c00115f2 <unlockStuff()+0x28>
c00115da:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c00115e1:	74 0f                	je     c00115f2 <unlockStuff()+0x28>
c00115e3:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00115ed:	e8 12 4b 00 00       	call   c0016104 <schedule()>
c00115f2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115f7:	48                   	dec    eax
c00115f8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115fd:	75 01                	jne    c0011600 <unlockStuff()+0x36>
c00115ff:	fb                   	sti    
c0011600:	83 c4 0c             	add    esp,0xc
c0011603:	c3                   	ret    

c0011604 <Virt::getAKernelVAS()>:
c0011604:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0011609:	c3                   	ret    

c001160a <__not_memcpy>:
c001160a:	57                   	push   edi
c001160b:	56                   	push   esi
c001160c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011610:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011614:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011618:	89 c7                	mov    edi,eax
c001161a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001161c:	5e                   	pop    esi
c001161d:	5f                   	pop    edi
c001161e:	c3                   	ret    

c001161f <KePanic(char const*)>:
c001161f:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c0011626:	e9 7f 6a 00 00       	jmp    c00180aa <HalPanic(char const*)>

c001162b <KePowerThread(void*)>:
c001162b:	83 ec 0c             	sub    esp,0xc
c001162e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011633:	48                   	dec    eax
c0011634:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011639:	75 01                	jne    c001163c <KePowerThread(void*)+0x11>
c001163b:	fb                   	sti    
c001163c:	83 ec 0c             	sub    esp,0xc
c001163f:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c0011646:	6a 0a                	push   0xa
c0011648:	e8 fb 4d 00 00       	call   c0016448 <sleep(unsigned int)>
c001164d:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c0011654:	83 c4 10             	add    esp,0x10
c0011657:	eb e3                	jmp    c001163c <KePowerThread(void*)+0x11>

c0011659 <KeChangePowerSettings(PowerSettings)>:
c0011659:	57                   	push   edi
c001165a:	b9 09 00 00 00       	mov    ecx,0x9
c001165f:	56                   	push   esi
c0011660:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c0011665:	fc                   	cld    
c0011666:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001166a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001166c:	5e                   	pop    esi
c001166d:	5f                   	pop    edi
c001166e:	c3                   	ret    

c001166f <KeUserIOReceived()>:
c001166f:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011679:	c3                   	ret    

c001167a <KeHandlePowerButton()>:
c001167a:	83 ec 0c             	sub    esp,0xc
c001167d:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c0011682:	83 f8 02             	cmp    eax,0x2
c0011685:	75 10                	jne    c0011697 <KeHandlePowerButton()+0x1d>
c0011687:	83 ec 0c             	sub    esp,0xc
c001168a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011690:	e8 93 5a ff ff       	call   c0007128 <Computer::shutdown()>
c0011695:	eb 11                	jmp    c00116a8 <KeHandlePowerButton()+0x2e>
c0011697:	48                   	dec    eax
c0011698:	75 11                	jne    c00116ab <KeHandlePowerButton()+0x31>
c001169a:	83 ec 0c             	sub    esp,0xc
c001169d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116a3:	e8 b0 5a ff ff       	call   c0007158 <Computer::sleep()>
c00116a8:	83 c4 10             	add    esp,0x10
c00116ab:	83 c4 0c             	add    esp,0xc
c00116ae:	c3                   	ret    

c00116af <KeHandleSleepButton()>:
c00116af:	83 ec 0c             	sub    esp,0xc
c00116b2:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c00116b7:	83 f8 02             	cmp    eax,0x2
c00116ba:	75 10                	jne    c00116cc <KeHandleSleepButton()+0x1d>
c00116bc:	83 ec 0c             	sub    esp,0xc
c00116bf:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116c5:	e8 5e 5a ff ff       	call   c0007128 <Computer::shutdown()>
c00116ca:	eb 11                	jmp    c00116dd <KeHandleSleepButton()+0x2e>
c00116cc:	48                   	dec    eax
c00116cd:	75 11                	jne    c00116e0 <KeHandleSleepButton()+0x31>
c00116cf:	83 ec 0c             	sub    esp,0xc
c00116d2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116d8:	e8 7b 5a ff ff       	call   c0007158 <Computer::sleep()>
c00116dd:	83 c4 10             	add    esp,0x10
c00116e0:	83 c4 0c             	add    esp,0xc
c00116e3:	c3                   	ret    

c00116e4 <KeSetupPowerManager()>:
c00116e4:	83 ec 0c             	sub    esp,0xc
c00116e7:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00116f1:	68 f0 00 00 00       	push   0xf0
c00116f6:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00116fd:	6a 00                	push   0x0
c00116ff:	68 2b 16 01 c0       	push   0xc001162b
c0011704:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001170a:	e8 a5 47 00 00       	call   c0015eb4 <Process::createThread(void (*)(void*), void*, int)>
c001170f:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c0011719:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c0011723:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c001172d:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c0011737:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c0011741:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c001174b:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c0011755:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c001175f:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c0011769:	83 c4 1c             	add    esp,0x1c
c001176c:	c3                   	ret    

c001176d <KeRand()>:
c001176d:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c0011777:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c0011781:	53                   	push   ebx
c0011782:	01 c1                	add    ecx,eax
c0011784:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011789:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c001178f:	01 ca                	add    edx,ecx
c0011791:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011796:	83 d2 00             	adc    edx,0x0
c0011799:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c001179e:	0f b7 da             	movzx  ebx,dx
c00117a1:	89 da                	mov    edx,ebx
c00117a3:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c00117a9:	0f ac d0 0e          	shrd   eax,edx,0xe
c00117ad:	5b                   	pop    ebx
c00117ae:	c3                   	ret    

c00117af <KeSeedRand(unsigned int)>:
c00117af:	53                   	push   ebx
c00117b0:	83 ec 08             	sub    esp,0x8
c00117b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117b7:	e8 0d 6c 00 00       	call   c00183c9 <HalGetRand()>
c00117bc:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c00117c6:	31 d8                	xor    eax,ebx
c00117c8:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00117cd:	e8 9b ff ff ff       	call   c001176d <KeRand()>
c00117d2:	83 c4 08             	add    esp,0x8
c00117d5:	5b                   	pop    ebx
c00117d6:	eb 95                	jmp    c001176d <KeRand()>

c00117d8 <KeInitRand()>:
c00117d8:	83 ec 0c             	sub    esp,0xc
c00117db:	e8 de 69 00 00       	call   c00181be <HalQueryPerformanceCounter()>
c00117e0:	0f 20 da             	mov    edx,cr3
c00117e3:	0f 22 da             	mov    cr3,edx
c00117e6:	0f 20 da             	mov    edx,cr3
c00117e9:	0f 22 da             	mov    cr3,edx
c00117ec:	0f 20 da             	mov    edx,cr3
c00117ef:	0f 22 da             	mov    cr3,edx
c00117f2:	0f 20 da             	mov    edx,cr3
c00117f5:	0f 22 da             	mov    cr3,edx
c00117f8:	83 ec 0c             	sub    esp,0xc
c00117fb:	35 03 8a 95 38       	xor    eax,0x38958a03
c0011800:	50                   	push   eax
c0011801:	e8 a9 ff ff ff       	call   c00117af <KeSeedRand(unsigned int)>
c0011806:	83 c4 1c             	add    esp,0x1c
c0011809:	c3                   	ret    
c001180a:	66 90                	xchg   ax,ax

c001180c <KeResolveCompatibilitySymbol(char*)>:
c001180c:	83 ec 0c             	sub    esp,0xc
c001180f:	83 ec 08             	sub    esp,0x8
c0011812:	68 c8 23 02 c0       	push   0xc00223c8
c0011817:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001181b:	e8 30 ef fe ff       	call   c0000750 <strcmp>
c0011820:	83 c4 10             	add    esp,0x10
c0011823:	85 c0                	test   eax,eax
c0011825:	0f 94 c0             	sete   al
c0011828:	0f b6 c0             	movzx  eax,al
c001182b:	85 c0                	test   eax,eax
c001182d:	74 0d                	je     c001183c <KeResolveCompatibilitySymbol(char*)+0x30>
c001182f:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c0011834:	e9 8b 01 00 00       	jmp    c00119c4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011839:	8d 76 00             	lea    esi,[esi+0x0]
c001183c:	83 ec 08             	sub    esp,0x8
c001183f:	68 d1 23 02 c0       	push   0xc00223d1
c0011844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011848:	e8 03 ef fe ff       	call   c0000750 <strcmp>
c001184d:	83 c4 10             	add    esp,0x10
c0011850:	85 c0                	test   eax,eax
c0011852:	0f 94 c0             	sete   al
c0011855:	0f b6 c0             	movzx  eax,al
c0011858:	85 c0                	test   eax,eax
c001185a:	74 0c                	je     c0011868 <KeResolveCompatibilitySymbol(char*)+0x5c>
c001185c:	b8 80 f7 01 c0       	mov    eax,0xc001f780
c0011861:	e9 5e 01 00 00       	jmp    c00119c4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011866:	66 90                	xchg   ax,ax
c0011868:	83 ec 08             	sub    esp,0x8
c001186b:	68 db 23 02 c0       	push   0xc00223db
c0011870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011874:	e8 d7 ee fe ff       	call   c0000750 <strcmp>
c0011879:	83 c4 10             	add    esp,0x10
c001187c:	85 c0                	test   eax,eax
c001187e:	0f 94 c0             	sete   al
c0011881:	0f b6 c0             	movzx  eax,al
c0011884:	85 c0                	test   eax,eax
c0011886:	74 0c                	je     c0011894 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011888:	b8 b4 f4 01 c0       	mov    eax,0xc001f4b4
c001188d:	e9 32 01 00 00       	jmp    c00119c4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011892:	66 90                	xchg   ax,ax
c0011894:	83 ec 08             	sub    esp,0x8
c0011897:	68 e4 23 02 c0       	push   0xc00223e4
c001189c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118a0:	e8 ab ee fe ff       	call   c0000750 <strcmp>
c00118a5:	83 c4 10             	add    esp,0x10
c00118a8:	85 c0                	test   eax,eax
c00118aa:	0f 94 c0             	sete   al
c00118ad:	0f b6 c0             	movzx  eax,al
c00118b0:	85 c0                	test   eax,eax
c00118b2:	74 0c                	je     c00118c0 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00118b4:	b8 1f 16 01 c0       	mov    eax,0xc001161f
c00118b9:	e9 06 01 00 00       	jmp    c00119c4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118be:	66 90                	xchg   ax,ax
c00118c0:	83 ec 08             	sub    esp,0x8
c00118c3:	68 f7 23 02 c0       	push   0xc00223f7
c00118c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118cc:	e8 7f ee fe ff       	call   c0000750 <strcmp>
c00118d1:	83 c4 10             	add    esp,0x10
c00118d4:	85 c0                	test   eax,eax
c00118d6:	0f 94 c0             	sete   al
c00118d9:	0f b6 c0             	movzx  eax,al
c00118dc:	85 c0                	test   eax,eax
c00118de:	74 0c                	je     c00118ec <KeResolveCompatibilitySymbol(char*)+0xe0>
c00118e0:	b8 1f 0f 01 c0       	mov    eax,0xc0010f1f
c00118e5:	e9 da 00 00 00       	jmp    c00119c4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118ea:	66 90                	xchg   ax,ax
c00118ec:	83 ec 08             	sub    esp,0x8
c00118ef:	68 14 24 02 c0       	push   0xc0022414
c00118f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118f8:	e8 53 ee fe ff       	call   c0000750 <strcmp>
c00118fd:	83 c4 10             	add    esp,0x10
c0011900:	85 c0                	test   eax,eax
c0011902:	0f 94 c0             	sete   al
c0011905:	0f b6 c0             	movzx  eax,al
c0011908:	85 c0                	test   eax,eax
c001190a:	74 0c                	je     c0011918 <KeResolveCompatibilitySymbol(char*)+0x10c>
c001190c:	b8 80 f8 01 c0       	mov    eax,0xc001f880
c0011911:	e9 ae 00 00 00       	jmp    c00119c4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011916:	66 90                	xchg   ax,ax
c0011918:	83 ec 08             	sub    esp,0x8
c001191b:	68 1e 24 02 c0       	push   0xc002241e
c0011920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011924:	e8 27 ee fe ff       	call   c0000750 <strcmp>
c0011929:	83 c4 10             	add    esp,0x10
c001192c:	85 c0                	test   eax,eax
c001192e:	0f 94 c0             	sete   al
c0011931:	0f b6 c0             	movzx  eax,al
c0011934:	85 c0                	test   eax,eax
c0011936:	74 0c                	je     c0011944 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011938:	b8 00 f6 01 c0       	mov    eax,0xc001f600
c001193d:	e9 82 00 00 00       	jmp    c00119c4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011942:	66 90                	xchg   ax,ax
c0011944:	83 ec 08             	sub    esp,0x8
c0011947:	68 27 24 02 c0       	push   0xc0022427
c001194c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011950:	e8 fb ed fe ff       	call   c0000750 <strcmp>
c0011955:	83 c4 10             	add    esp,0x10
c0011958:	85 c0                	test   eax,eax
c001195a:	0f 94 c0             	sete   al
c001195d:	0f b6 c0             	movzx  eax,al
c0011960:	85 c0                	test   eax,eax
c0011962:	74 08                	je     c001196c <KeResolveCompatibilitySymbol(char*)+0x160>
c0011964:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011969:	eb 59                	jmp    c00119c4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001196b:	90                   	nop
c001196c:	83 ec 08             	sub    esp,0x8
c001196f:	68 3f 24 02 c0       	push   0xc002243f
c0011974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011978:	e8 d3 ed fe ff       	call   c0000750 <strcmp>
c001197d:	83 c4 10             	add    esp,0x10
c0011980:	85 c0                	test   eax,eax
c0011982:	0f 94 c0             	sete   al
c0011985:	0f b6 c0             	movzx  eax,al
c0011988:	85 c0                	test   eax,eax
c001198a:	74 08                	je     c0011994 <KeResolveCompatibilitySymbol(char*)+0x188>
c001198c:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011991:	eb 31                	jmp    c00119c4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011993:	90                   	nop
c0011994:	83 ec 08             	sub    esp,0x8
c0011997:	68 4c 24 02 c0       	push   0xc002244c
c001199c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119a0:	e8 ab ed fe ff       	call   c0000750 <strcmp>
c00119a5:	83 c4 10             	add    esp,0x10
c00119a8:	85 c0                	test   eax,eax
c00119aa:	0f 94 c0             	sete   al
c00119ad:	0f b6 c0             	movzx  eax,al
c00119b0:	85 c0                	test   eax,eax
c00119b2:	74 08                	je     c00119bc <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00119b4:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c00119b9:	eb 09                	jmp    c00119c4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119bb:	90                   	nop
c00119bc:	b8 00 00 00 00       	mov    eax,0x0
c00119c1:	8d 76 00             	lea    esi,[esi+0x0]
c00119c4:	83 c4 0c             	add    esp,0xc
c00119c7:	c3                   	ret    

c00119c8 <KiSigKill(int)>:
c00119c8:	83 ec 0c             	sub    esp,0xc
c00119cb:	6a 00                	push   0x0
c00119cd:	6a 00                	push   0x0
c00119cf:	6a ff                	push   0xffffffff
c00119d1:	6a 01                	push   0x1
c00119d3:	e8 7a 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119d8:	83 c4 1c             	add    esp,0x1c
c00119db:	c3                   	ret    

c00119dc <KiDefaultSignalHandlerIgnore(int)>:
c00119dc:	c3                   	ret    

c00119dd <KiDefaultSignalHandlerPause(int)>:
c00119dd:	57                   	push   edi
c00119de:	b9 07 00 00 00       	mov    ecx,0x7
c00119e3:	56                   	push   esi
c00119e4:	be 95 24 02 c0       	mov    esi,0xc0022495
c00119e9:	83 ec 24             	sub    esp,0x24
c00119ec:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00119f0:	fc                   	cld    
c00119f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00119f3:	8d 44 24 04          	lea    eax,[esp+0x4]
c00119f7:	50                   	push   eax
c00119f8:	6a 00                	push   0x0
c00119fa:	6a 00                	push   0x0
c00119fc:	6a 27                	push   0x27
c00119fe:	e8 4f 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a03:	83 c4 34             	add    esp,0x34
c0011a06:	5e                   	pop    esi
c0011a07:	5f                   	pop    edi
c0011a08:	c3                   	ret    

c0011a09 <KiDefaultSignalHandlerResume(int)>:
c0011a09:	57                   	push   edi
c0011a0a:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011a0f:	56                   	push   esi
c0011a10:	be b1 24 02 c0       	mov    esi,0xc00224b1
c0011a15:	83 ec 24             	sub    esp,0x24
c0011a18:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011a1c:	fc                   	cld    
c0011a1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a1f:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011a23:	50                   	push   eax
c0011a24:	6a 00                	push   0x0
c0011a26:	6a 00                	push   0x0
c0011a28:	6a 27                	push   0x27
c0011a2a:	e8 23 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a2f:	83 c4 34             	add    esp,0x34
c0011a32:	5e                   	pop    esi
c0011a33:	5f                   	pop    edi
c0011a34:	c3                   	ret    

c0011a35 <KeDeinitSignals(SigHandlerBlock*)>:
c0011a35:	e9 8c 60 ff ff       	jmp    c0007ac6 <free>

c0011a3a <KeInitSignals()>:
c0011a3a:	53                   	push   ebx
c0011a3b:	83 ec 14             	sub    esp,0x14
c0011a3e:	68 c8 00 00 00       	push   0xc8
c0011a43:	e8 6e 60 ff ff       	call   c0007ab6 <malloc>
c0011a48:	83 c4 0c             	add    esp,0xc
c0011a4b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011a55:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011a5f:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011a66:	89 c3                	mov    ebx,eax
c0011a68:	6a 20                	push   0x20
c0011a6a:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011a70:	6a 00                	push   0x0
c0011a72:	50                   	push   eax
c0011a73:	e8 78 ea fe ff       	call   c00004f0 <memset>
c0011a78:	83 c4 0c             	add    esp,0xc
c0011a7b:	6a 44                	push   0x44
c0011a7d:	6a 00                	push   0x0
c0011a7f:	53                   	push   ebx
c0011a80:	e8 6b ea fe ff       	call   c00004f0 <memset>
c0011a85:	89 d8                	mov    eax,ebx
c0011a87:	83 c4 18             	add    esp,0x18
c0011a8a:	5b                   	pop    ebx
c0011a8b:	c3                   	ret    

c0011a8c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011a8c:	53                   	push   ebx
c0011a8d:	b8 01 00 00 00       	mov    eax,0x1
c0011a92:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011a96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a9a:	83 f9 10             	cmp    ecx,0x10
c0011a9d:	7f 21                	jg     c0011ac0 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011a9f:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011aa6:	89 03                	mov    DWORD PTR [ebx],eax
c0011aa8:	b8 01 00 00 00       	mov    eax,0x1
c0011aad:	d3 e0                	shl    eax,cl
c0011aaf:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011ab3:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011ab6:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011abe:	31 c0                	xor    eax,eax
c0011ac0:	5b                   	pop    ebx
c0011ac1:	c3                   	ret    

c0011ac2 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011ac2:	55                   	push   ebp
c0011ac3:	57                   	push   edi
c0011ac4:	bf 08 00 00 00       	mov    edi,0x8
c0011ac9:	56                   	push   esi
c0011aca:	53                   	push   ebx
c0011acb:	83 ec 18             	sub    esp,0x18
c0011ace:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011ad2:	68 ce 24 02 c0       	push   0xc00224ce
c0011ad7:	e8 69 8e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011adc:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011ae3:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011ae9:	83 c4 10             	add    esp,0x10
c0011aec:	31 c9                	xor    ecx,ecx
c0011aee:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011af2:	99                   	cdq    
c0011af3:	f7 ff                	idiv   edi
c0011af5:	8d 42 24             	lea    eax,[edx+0x24]
c0011af8:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011afc:	85 f6                	test   esi,esi
c0011afe:	75 1a                	jne    c0011b1a <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011b00:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011b04:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011b08:	50                   	push   eax
c0011b09:	50                   	push   eax
c0011b0a:	52                   	push   edx
c0011b0b:	68 df 24 02 c0       	push   0xc00224df
c0011b10:	e8 30 8e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011b15:	83 c4 10             	add    esp,0x10
c0011b18:	eb 1b                	jmp    c0011b35 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011b1a:	41                   	inc    ecx
c0011b1b:	83 f9 08             	cmp    ecx,0x8
c0011b1e:	75 ce                	jne    c0011aee <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011b20:	83 ec 0c             	sub    esp,0xc
c0011b23:	be 01 00 00 00       	mov    esi,0x1
c0011b28:	68 00 25 02 c0       	push   0xc0022500
c0011b2d:	e8 13 8e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011b32:	83 c4 10             	add    esp,0x10
c0011b35:	83 c4 0c             	add    esp,0xc
c0011b38:	89 f0                	mov    eax,esi
c0011b3a:	5b                   	pop    ebx
c0011b3b:	5e                   	pop    esi
c0011b3c:	5f                   	pop    edi
c0011b3d:	5d                   	pop    ebp
c0011b3e:	c3                   	ret    

c0011b3f <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011b3f:	55                   	push   ebp
c0011b40:	57                   	push   edi
c0011b41:	56                   	push   esi
c0011b42:	53                   	push   ebx
c0011b43:	51                   	push   ecx
c0011b44:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011b48:	85 db                	test   ebx,ebx
c0011b4a:	0f 84 bc 00 00 00    	je     c0011c0c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b50:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011b57:	0f 84 af 00 00 00    	je     c0011c0c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b5d:	31 c9                	xor    ecx,ecx
c0011b5f:	bf 08 00 00 00       	mov    edi,0x8
c0011b64:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011b6a:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011b6d:	99                   	cdq    
c0011b6e:	f7 ff                	idiv   edi
c0011b70:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011b77:	85 ed                	test   ebp,ebp
c0011b79:	0f 84 9e 00 00 00    	je     c0011c1d <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011b7f:	89 e9                	mov    ecx,ebp
c0011b81:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011b87:	bf 01 00 00 00       	mov    edi,0x1
c0011b8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b8f:	d3 e7                	shl    edi,cl
c0011b91:	31 c9                	xor    ecx,ecx
c0011b93:	b8 01 00 00 00       	mov    eax,0x1
c0011b98:	d3 e0                	shl    eax,cl
c0011b9a:	85 04 24             	test   DWORD PTR [esp],eax
c0011b9d:	74 06                	je     c0011ba5 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011b9f:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011ba3:	75 67                	jne    c0011c0c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011ba5:	41                   	inc    ecx
c0011ba6:	83 f9 11             	cmp    ecx,0x11
c0011ba9:	75 e8                	jne    c0011b93 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011bab:	46                   	inc    esi
c0011bac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011baf:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011bb5:	09 f8                	or     eax,edi
c0011bb7:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011bc2:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011bc8:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011bcf:	31 c0                	xor    eax,eax
c0011bd1:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011bd9:	74 09                	je     c0011be4 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011bdb:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011be2:	eb 06                	jmp    c0011bea <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011be4:	40                   	inc    eax
c0011be5:	83 f8 08             	cmp    eax,0x8
c0011be8:	75 e7                	jne    c0011bd1 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011bea:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011bed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011bf1:	83 fd 09             	cmp    ebp,0x9
c0011bf4:	89 2a                	mov    DWORD PTR [edx],ebp
c0011bf6:	75 07                	jne    c0011bff <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011bf8:	b8 c8 19 01 c0       	mov    eax,0xc00119c8
c0011bfd:	eb 31                	jmp    c0011c30 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bff:	83 f8 01             	cmp    eax,0x1
c0011c02:	75 0c                	jne    c0011c10 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011c04:	f7 d7                	not    edi
c0011c06:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011c0c:	31 c0                	xor    eax,eax
c0011c0e:	eb 20                	jmp    c0011c30 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c10:	85 c0                	test   eax,eax
c0011c12:	75 1c                	jne    c0011c30 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c14:	8b 04 ad 00 3d 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc300]
c0011c1b:	eb 13                	jmp    c0011c30 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c1d:	46                   	inc    esi
c0011c1e:	41                   	inc    ecx
c0011c1f:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011c25:	83 f9 08             	cmp    ecx,0x8
c0011c28:	0f 85 36 ff ff ff    	jne    c0011b64 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011c2e:	eb dc                	jmp    c0011c0c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c30:	5a                   	pop    edx
c0011c31:	5b                   	pop    ebx
c0011c32:	5e                   	pop    esi
c0011c33:	5f                   	pop    edi
c0011c34:	5d                   	pop    ebp
c0011c35:	c3                   	ret    

c0011c36 <KiCheckSignalZ>:
c0011c36:	83 ec 10             	sub    esp,0x10
c0011c39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011c3d:	50                   	push   eax
c0011c3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c46:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c4c:	e8 ee fe ff ff       	call   c0011b3f <KeCheckSignal(SigHandlerBlock*, int*)>
c0011c51:	5a                   	pop    edx
c0011c52:	31 d2                	xor    edx,edx
c0011c54:	59                   	pop    ecx
c0011c55:	85 c0                	test   eax,eax
c0011c57:	74 19                	je     c0011c72 <KiCheckSignalZ+0x3c>
c0011c59:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c5f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011c62:	89 02                	mov    DWORD PTR [edx],eax
c0011c64:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011c6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c6f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011c72:	89 d0                	mov    eax,edx
c0011c74:	83 c4 10             	add    esp,0x10
c0011c77:	c3                   	ret    

c0011c78 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011c78:	56                   	push   esi
c0011c79:	53                   	push   ebx
c0011c7a:	bb 01 00 00 00       	mov    ebx,0x1
c0011c7f:	52                   	push   edx
c0011c80:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011c84:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c88:	d3 e3                	shl    ebx,cl
c0011c8a:	83 f9 10             	cmp    ecx,0x10
c0011c8d:	7f 08                	jg     c0011c97 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011c8f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011c95:	75 10                	jne    c0011ca7 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011c97:	83 ec 0c             	sub    esp,0xc
c0011c9a:	68 11 25 02 c0       	push   0xc0022511
c0011c9f:	e8 7b f9 ff ff       	call   c001161f <KePanic(char const*)>
c0011ca4:	83 c4 10             	add    esp,0x10
c0011ca7:	f7 d3                	not    ebx
c0011ca9:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011caf:	58                   	pop    eax
c0011cb0:	5b                   	pop    ebx
c0011cb1:	5e                   	pop    esi
c0011cb2:	c3                   	ret    

c0011cb3 <KiFinishSignalZ>:
c0011cb3:	53                   	push   ebx
c0011cb4:	83 ec 10             	sub    esp,0x10
c0011cb7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011cbb:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011cbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cc3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cc6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011ccc:	e8 a7 ff ff ff       	call   c0011c78 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011cd1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011cd7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011cde:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011ce5:	83 c4 18             	add    esp,0x18
c0011ce8:	5b                   	pop    ebx
c0011ce9:	c3                   	ret    

c0011cea <SysSeekDir(regs*)>:
c0011cea:	31 c0                	xor    eax,eax
c0011cec:	31 d2                	xor    edx,edx
c0011cee:	c3                   	ret    

c0011cef <SysTellDir(regs*)>:
c0011cef:	31 c0                	xor    eax,eax
c0011cf1:	31 d2                	xor    edx,edx
c0011cf3:	c3                   	ret    

c0011cf4 <SysVerify(regs*)>:
c0011cf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cf8:	31 d2                	xor    edx,edx
c0011cfa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011cfd:	c3                   	ret    

c0011cfe <SysGetArgc(regs*)>:
c0011cfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d03:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d06:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011d0c:	89 c2                	mov    edx,eax
c0011d0e:	c1 fa 1f             	sar    edx,0x1f
c0011d11:	c3                   	ret    

c0011d12 <SysTTYName(regs*)>:
c0011d12:	b8 01 00 00 00       	mov    eax,0x1
c0011d17:	31 d2                	xor    edx,edx
c0011d19:	c3                   	ret    

c0011d1a <SysFormatDisk(regs*)>:
c0011d1a:	56                   	push   esi
c0011d1b:	53                   	push   ebx
c0011d1c:	83 ec 04             	sub    esp,0x4
c0011d1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d23:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011d29:	eb 28                	jmp    c0011d53 <SysFormatDisk(regs*)+0x39>
c0011d2b:	83 ec 0c             	sub    esp,0xc
c0011d2e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011d31:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011d34:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d36:	51                   	push   ecx
c0011d37:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011d3a:	51                   	push   ecx
c0011d3b:	50                   	push   eax
c0011d3c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011d43:	50                   	push   eax
c0011d44:	53                   	push   ebx
c0011d45:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011d48:	83 c4 20             	add    esp,0x20
c0011d4b:	83 f8 08             	cmp    eax,0x8
c0011d4e:	75 14                	jne    c0011d64 <SysFormatDisk(regs*)+0x4a>
c0011d50:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011d53:	85 db                	test   ebx,ebx
c0011d55:	75 d4                	jne    c0011d2b <SysFormatDisk(regs*)+0x11>
c0011d57:	83 c4 04             	add    esp,0x4
c0011d5a:	b8 03 00 00 00       	mov    eax,0x3
c0011d5f:	31 d2                	xor    edx,edx
c0011d61:	5b                   	pop    ebx
c0011d62:	5e                   	pop    esi
c0011d63:	c3                   	ret    
c0011d64:	85 c0                	test   eax,eax
c0011d66:	74 1f                	je     c0011d87 <SysFormatDisk(regs*)+0x6d>
c0011d68:	83 f8 09             	cmp    eax,0x9
c0011d6b:	74 0d                	je     c0011d7a <SysFormatDisk(regs*)+0x60>
c0011d6d:	83 c4 04             	add    esp,0x4
c0011d70:	b8 02 00 00 00       	mov    eax,0x2
c0011d75:	31 d2                	xor    edx,edx
c0011d77:	5b                   	pop    ebx
c0011d78:	5e                   	pop    esi
c0011d79:	c3                   	ret    
c0011d7a:	83 c4 04             	add    esp,0x4
c0011d7d:	b8 01 00 00 00       	mov    eax,0x1
c0011d82:	31 d2                	xor    edx,edx
c0011d84:	5b                   	pop    ebx
c0011d85:	5e                   	pop    esi
c0011d86:	c3                   	ret    
c0011d87:	83 c4 04             	add    esp,0x4
c0011d8a:	31 c0                	xor    eax,eax
c0011d8c:	31 d2                	xor    edx,edx
c0011d8e:	5b                   	pop    ebx
c0011d8f:	5e                   	pop    esi
c0011d90:	c3                   	ret    

c0011d91 <SysSetDiskVolumeLabel(regs*)>:
c0011d91:	56                   	push   esi
c0011d92:	53                   	push   ebx
c0011d93:	83 ec 04             	sub    esp,0x4
c0011d96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d9a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011d9d:	83 f8 19             	cmp    eax,0x19
c0011da0:	77 33                	ja     c0011dd5 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011da2:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011da9:	85 c9                	test   ecx,ecx
c0011dab:	74 28                	je     c0011dd5 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011dad:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011db0:	85 db                	test   ebx,ebx
c0011db2:	74 21                	je     c0011dd5 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011db4:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011dba:	85 d2                	test   edx,edx
c0011dbc:	74 17                	je     c0011dd5 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011dbe:	8b 32                	mov    esi,DWORD PTR [edx]
c0011dc0:	53                   	push   ebx
c0011dc1:	50                   	push   eax
c0011dc2:	51                   	push   ecx
c0011dc3:	52                   	push   edx
c0011dc4:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011dc7:	83 c4 10             	add    esp,0x10
c0011dca:	89 c2                	mov    edx,eax
c0011dcc:	83 c4 04             	add    esp,0x4
c0011dcf:	c1 fa 1f             	sar    edx,0x1f
c0011dd2:	5b                   	pop    ebx
c0011dd3:	5e                   	pop    esi
c0011dd4:	c3                   	ret    
c0011dd5:	83 c4 04             	add    esp,0x4
c0011dd8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011ddd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011de2:	5b                   	pop    ebx
c0011de3:	5e                   	pop    esi
c0011de4:	c3                   	ret    

c0011de5 <SysGetDiskVolumeLabel(regs*)>:
c0011de5:	57                   	push   edi
c0011de6:	56                   	push   esi
c0011de7:	53                   	push   ebx
c0011de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dec:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011def:	83 fa 19             	cmp    edx,0x19
c0011df2:	77 3c                	ja     c0011e30 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011df4:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011dfb:	85 c9                	test   ecx,ecx
c0011dfd:	74 31                	je     c0011e30 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dff:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011e02:	85 db                	test   ebx,ebx
c0011e04:	74 2a                	je     c0011e30 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e06:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011e09:	85 f6                	test   esi,esi
c0011e0b:	74 23                	je     c0011e30 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e0d:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011e13:	85 c0                	test   eax,eax
c0011e15:	74 19                	je     c0011e30 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e17:	83 ec 0c             	sub    esp,0xc
c0011e1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0011e1c:	56                   	push   esi
c0011e1d:	53                   	push   ebx
c0011e1e:	52                   	push   edx
c0011e1f:	51                   	push   ecx
c0011e20:	50                   	push   eax
c0011e21:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011e24:	83 c4 20             	add    esp,0x20
c0011e27:	89 c2                	mov    edx,eax
c0011e29:	5b                   	pop    ebx
c0011e2a:	c1 fa 1f             	sar    edx,0x1f
c0011e2d:	5e                   	pop    esi
c0011e2e:	5f                   	pop    edi
c0011e2f:	c3                   	ret    
c0011e30:	5b                   	pop    ebx
c0011e31:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011e36:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e3b:	5e                   	pop    esi
c0011e3c:	5f                   	pop    edi
c0011e3d:	c3                   	ret    

c0011e3e <SysShutdown(regs*)>:
c0011e3e:	83 ec 0c             	sub    esp,0xc
c0011e41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e45:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e48:	85 c0                	test   eax,eax
c0011e4a:	74 18                	je     c0011e64 <SysShutdown(regs*)+0x26>
c0011e4c:	83 f8 01             	cmp    eax,0x1
c0011e4f:	74 38                	je     c0011e89 <SysShutdown(regs*)+0x4b>
c0011e51:	83 f8 02             	cmp    eax,0x2
c0011e54:	74 24                	je     c0011e7a <SysShutdown(regs*)+0x3c>
c0011e56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e5b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e60:	83 c4 0c             	add    esp,0xc
c0011e63:	c3                   	ret    
c0011e64:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e69:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e6b:	6a 00                	push   0x0
c0011e6d:	6a 00                	push   0x0
c0011e6f:	6a 00                	push   0x0
c0011e71:	50                   	push   eax
c0011e72:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e75:	83 c4 10             	add    esp,0x10
c0011e78:	eb dc                	jmp    c0011e56 <SysShutdown(regs*)+0x18>
c0011e7a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e7f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e81:	6a 00                	push   0x0
c0011e83:	6a 00                	push   0x0
c0011e85:	6a 01                	push   0x1
c0011e87:	eb e8                	jmp    c0011e71 <SysShutdown(regs*)+0x33>
c0011e89:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011e8e:	85 c0                	test   eax,eax
c0011e90:	74 02                	je     c0011e94 <SysShutdown(regs*)+0x56>
c0011e92:	ff d0                	call   eax
c0011e94:	31 c0                	xor    eax,eax
c0011e96:	31 d2                	xor    edx,edx
c0011e98:	83 c4 0c             	add    esp,0xc
c0011e9b:	c3                   	ret    

c0011e9c <SysRealpath(regs*)>:
c0011e9c:	83 ec 0c             	sub    esp,0xc
c0011e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ea3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011ea6:	85 d2                	test   edx,edx
c0011ea8:	74 07                	je     c0011eb1 <SysRealpath(regs*)+0x15>
c0011eaa:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011ead:	85 c0                	test   eax,eax
c0011eaf:	75 0b                	jne    c0011ebc <SysRealpath(regs*)+0x20>
c0011eb1:	b8 01 00 00 00       	mov    eax,0x1
c0011eb6:	31 d2                	xor    edx,edx
c0011eb8:	83 c4 0c             	add    esp,0xc
c0011ebb:	c3                   	ret    
c0011ebc:	6a 00                	push   0x0
c0011ebe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011ec4:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011ec7:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011ecd:	51                   	push   ecx
c0011ece:	52                   	push   edx
c0011ecf:	50                   	push   eax
c0011ed0:	e8 7f 99 ff ff       	call   c000b854 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011ed5:	83 c4 10             	add    esp,0x10
c0011ed8:	31 c0                	xor    eax,eax
c0011eda:	31 d2                	xor    edx,edx
c0011edc:	83 c4 0c             	add    esp,0xc
c0011edf:	c3                   	ret    

c0011ee0 <SysReadDir(regs*)>:
c0011ee0:	53                   	push   ebx
c0011ee1:	83 ec 18             	sub    esp,0x18
c0011ee4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ee8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011eeb:	83 f8 02             	cmp    eax,0x2
c0011eee:	76 61                	jbe    c0011f51 <SysReadDir(regs*)+0x71>
c0011ef0:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011ef7:	77 49                	ja     c0011f42 <SysReadDir(regs*)+0x62>
c0011ef9:	83 ec 0c             	sub    esp,0xc
c0011efc:	50                   	push   eax
c0011efd:	e8 b1 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011f02:	83 c4 10             	add    esp,0x10
c0011f05:	85 c0                	test   eax,eax
c0011f07:	74 39                	je     c0011f42 <SysReadDir(regs*)+0x62>
c0011f09:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f11:	83 ec 0c             	sub    esp,0xc
c0011f14:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f16:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f1a:	51                   	push   ecx
c0011f1b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011f1e:	51                   	push   ecx
c0011f1f:	6a 00                	push   0x0
c0011f21:	68 10 01 00 00       	push   0x110
c0011f26:	50                   	push   eax
c0011f27:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f2a:	83 c4 20             	add    esp,0x20
c0011f2d:	85 c0                	test   eax,eax
c0011f2f:	74 29                	je     c0011f5a <SysReadDir(regs*)+0x7a>
c0011f31:	83 f8 07             	cmp    eax,0x7
c0011f34:	74 1b                	je     c0011f51 <SysReadDir(regs*)+0x71>
c0011f36:	b8 02 00 00 00       	mov    eax,0x2
c0011f3b:	31 d2                	xor    edx,edx
c0011f3d:	83 c4 18             	add    esp,0x18
c0011f40:	5b                   	pop    ebx
c0011f41:	c3                   	ret    
c0011f42:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f47:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f4c:	83 c4 18             	add    esp,0x18
c0011f4f:	5b                   	pop    ebx
c0011f50:	c3                   	ret    
c0011f51:	b8 01 00 00 00       	mov    eax,0x1
c0011f56:	31 d2                	xor    edx,edx
c0011f58:	eb e3                	jmp    c0011f3d <SysReadDir(regs*)+0x5d>
c0011f5a:	31 c0                	xor    eax,eax
c0011f5c:	31 d2                	xor    edx,edx
c0011f5e:	eb dd                	jmp    c0011f3d <SysReadDir(regs*)+0x5d>

c0011f60 <SysIsATTY(regs*)>:
c0011f60:	83 ec 0c             	sub    esp,0xc
c0011f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f67:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f6a:	83 f8 02             	cmp    eax,0x2
c0011f6d:	76 07                	jbe    c0011f76 <SysIsATTY(regs*)+0x16>
c0011f6f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011f74:	75 26                	jne    c0011f9c <SysIsATTY(regs*)+0x3c>
c0011f76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f7b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f7e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011f84:	85 c0                	test   eax,eax
c0011f86:	74 24                	je     c0011fac <SysIsATTY(regs*)+0x4c>
c0011f88:	83 ec 0c             	sub    esp,0xc
c0011f8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f8d:	50                   	push   eax
c0011f8e:	ff 12                	call   DWORD PTR [edx]
c0011f90:	31 d2                	xor    edx,edx
c0011f92:	0f b6 c0             	movzx  eax,al
c0011f95:	83 c4 10             	add    esp,0x10
c0011f98:	83 c4 0c             	add    esp,0xc
c0011f9b:	c3                   	ret    
c0011f9c:	83 ec 0c             	sub    esp,0xc
c0011f9f:	50                   	push   eax
c0011fa0:	e8 0e 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011fa5:	83 c4 10             	add    esp,0x10
c0011fa8:	85 c0                	test   eax,eax
c0011faa:	75 dc                	jne    c0011f88 <SysIsATTY(regs*)+0x28>
c0011fac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fb1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fb6:	83 c4 0c             	add    esp,0xc
c0011fb9:	c3                   	ret    

c0011fba <SysSeek(regs*)>:
c0011fba:	53                   	push   ebx
c0011fbb:	83 ec 08             	sub    esp,0x8
c0011fbe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fc2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011fc5:	8d 50 fd             	lea    edx,[eax-0x3]
c0011fc8:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011fce:	77 32                	ja     c0012002 <SysSeek(regs*)+0x48>
c0011fd0:	83 ec 0c             	sub    esp,0xc
c0011fd3:	50                   	push   eax
c0011fd4:	e8 da 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011fd9:	83 c4 0c             	add    esp,0xc
c0011fdc:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011fdf:	31 db                	xor    ebx,ebx
c0011fe1:	53                   	push   ebx
c0011fe2:	51                   	push   ecx
c0011fe3:	50                   	push   eax
c0011fe4:	e8 3f 9c ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c0011fe9:	83 c4 10             	add    esp,0x10
c0011fec:	85 c0                	test   eax,eax
c0011fee:	0f 95 c0             	setne  al
c0011ff1:	31 d2                	xor    edx,edx
c0011ff3:	0f b6 c0             	movzx  eax,al
c0011ff6:	f7 d8                	neg    eax
c0011ff8:	83 d2 00             	adc    edx,0x0
c0011ffb:	83 c4 08             	add    esp,0x8
c0011ffe:	f7 da                	neg    edx
c0012000:	5b                   	pop    ebx
c0012001:	c3                   	ret    
c0012002:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012007:	ba ff ff ff ff       	mov    edx,0xffffffff
c001200c:	83 c4 08             	add    esp,0x8
c001200f:	5b                   	pop    ebx
c0012010:	c3                   	ret    

c0012011 <SysTell(regs*)>:
c0012011:	53                   	push   ebx
c0012012:	83 ec 08             	sub    esp,0x8
c0012015:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012019:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001201c:	83 f8 02             	cmp    eax,0x2
c001201f:	76 4e                	jbe    c001206f <SysTell(regs*)+0x5e>
c0012021:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012026:	76 19                	jbe    c0012041 <SysTell(regs*)+0x30>
c0012028:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001202b:	31 d2                	xor    edx,edx
c001202d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012033:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001203a:	31 c0                	xor    eax,eax
c001203c:	83 c4 08             	add    esp,0x8
c001203f:	5b                   	pop    ebx
c0012040:	c3                   	ret    
c0012041:	83 ec 0c             	sub    esp,0xc
c0012044:	50                   	push   eax
c0012045:	e8 69 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001204a:	5a                   	pop    edx
c001204b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001204e:	59                   	pop    ecx
c001204f:	53                   	push   ebx
c0012050:	50                   	push   eax
c0012051:	e8 7e 9c ff ff       	call   c000bcd4 <File::tell(unsigned long long*)>
c0012056:	83 c4 10             	add    esp,0x10
c0012059:	85 c0                	test   eax,eax
c001205b:	0f 95 c0             	setne  al
c001205e:	31 d2                	xor    edx,edx
c0012060:	0f b6 c0             	movzx  eax,al
c0012063:	f7 d8                	neg    eax
c0012065:	83 d2 00             	adc    edx,0x0
c0012068:	83 c4 08             	add    esp,0x8
c001206b:	f7 da                	neg    edx
c001206d:	5b                   	pop    ebx
c001206e:	c3                   	ret    
c001206f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012074:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012079:	83 c4 08             	add    esp,0x8
c001207c:	5b                   	pop    ebx
c001207d:	c3                   	ret    

c001207e <SysSize(regs*)>:
c001207e:	53                   	push   ebx
c001207f:	83 ec 18             	sub    esp,0x18
c0012082:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012086:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012089:	83 f8 02             	cmp    eax,0x2
c001208c:	76 54                	jbe    c00120e2 <SysSize(regs*)+0x64>
c001208e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012093:	76 19                	jbe    c00120ae <SysSize(regs*)+0x30>
c0012095:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012098:	31 d2                	xor    edx,edx
c001209a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120a7:	31 c0                	xor    eax,eax
c00120a9:	83 c4 18             	add    esp,0x18
c00120ac:	5b                   	pop    ebx
c00120ad:	c3                   	ret    
c00120ae:	83 ec 0c             	sub    esp,0xc
c00120b1:	50                   	push   eax
c00120b2:	e8 fc 73 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00120b7:	83 c4 0c             	add    esp,0xc
c00120ba:	8d 54 24 13          	lea    edx,[esp+0x13]
c00120be:	52                   	push   edx
c00120bf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120c2:	52                   	push   edx
c00120c3:	50                   	push   eax
c00120c4:	e8 a3 9d ff ff       	call   c000be6c <File::stat(unsigned long long*, bool*)>
c00120c9:	83 c4 10             	add    esp,0x10
c00120cc:	85 c0                	test   eax,eax
c00120ce:	0f 95 c0             	setne  al
c00120d1:	31 d2                	xor    edx,edx
c00120d3:	0f b6 c0             	movzx  eax,al
c00120d6:	f7 d8                	neg    eax
c00120d8:	83 d2 00             	adc    edx,0x0
c00120db:	83 c4 18             	add    esp,0x18
c00120de:	f7 da                	neg    edx
c00120e0:	5b                   	pop    ebx
c00120e1:	c3                   	ret    
c00120e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120e7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120ec:	83 c4 18             	add    esp,0x18
c00120ef:	5b                   	pop    ebx
c00120f0:	c3                   	ret    

c00120f1 <SysSizeFromFilename(regs*)>:
c00120f1:	55                   	push   ebp
c00120f2:	57                   	push   edi
c00120f3:	56                   	push   esi
c00120f4:	53                   	push   ebx
c00120f5:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00120fb:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0012102:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012105:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012108:	85 f6                	test   esi,esi
c001210a:	74 34                	je     c0012140 <SysSizeFromFilename(regs*)+0x4f>
c001210c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012112:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012115:	83 f8 02             	cmp    eax,0x2
c0012118:	76 2d                	jbe    c0012147 <SysSizeFromFilename(regs*)+0x56>
c001211a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001211f:	76 3b                	jbe    c001215c <SysSizeFromFilename(regs*)+0x6b>
c0012121:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012124:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001212a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012131:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012137:	31 c0                	xor    eax,eax
c0012139:	5b                   	pop    ebx
c001213a:	31 d2                	xor    edx,edx
c001213c:	5e                   	pop    esi
c001213d:	5f                   	pop    edi
c001213e:	5d                   	pop    ebp
c001213f:	c3                   	ret    
c0012140:	89 f8                	mov    eax,edi
c0012142:	83 f8 02             	cmp    eax,0x2
c0012145:	77 d3                	ja     c001211a <SysSizeFromFilename(regs*)+0x29>
c0012147:	81 c4 5c 02 00 00    	add    esp,0x25c
c001214d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012152:	5b                   	pop    ebx
c0012153:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012158:	5e                   	pop    esi
c0012159:	5f                   	pop    edi
c001215a:	5d                   	pop    ebp
c001215b:	c3                   	ret    
c001215c:	83 ec 0c             	sub    esp,0xc
c001215f:	68 14 01 00 00       	push   0x114
c0012164:	e8 4d 59 ff ff       	call   c0007ab6 <malloc>
c0012169:	6a 01                	push   0x1
c001216b:	89 c5                	mov    ebp,eax
c001216d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012172:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012175:	51                   	push   ecx
c0012176:	57                   	push   edi
c0012177:	55                   	push   ebp
c0012178:	e8 f1 98 ff ff       	call   c000ba6e <File::File(char const*, Process*, bool)>
c001217d:	83 c4 1c             	add    esp,0x1c
c0012180:	8d 44 24 23          	lea    eax,[esp+0x23]
c0012184:	50                   	push   eax
c0012185:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012188:	53                   	push   ebx
c0012189:	55                   	push   ebp
c001218a:	e8 dd 9c ff ff       	call   c000be6c <File::stat(unsigned long long*, bool*)>
c001218f:	83 c4 10             	add    esp,0x10
c0012192:	85 ed                	test   ebp,ebp
c0012194:	74 15                	je     c00121ab <SysSizeFromFilename(regs*)+0xba>
c0012196:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001219a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001219d:	83 ec 0c             	sub    esp,0xc
c00121a0:	55                   	push   ebp
c00121a1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00121a4:	83 c4 10             	add    esp,0x10
c00121a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121ab:	85 c0                	test   eax,eax
c00121ad:	75 98                	jne    c0012147 <SysSizeFromFilename(regs*)+0x56>
c00121af:	6a 00                	push   0x0
c00121b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121b9:	05 0c 01 00 00       	add    eax,0x10c
c00121be:	50                   	push   eax
c00121bf:	57                   	push   edi
c00121c0:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c00121c7:	53                   	push   ebx
c00121c8:	e8 87 96 ff ff       	call   c000b854 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00121cd:	58                   	pop    eax
c00121ce:	5a                   	pop    edx
c00121cf:	8d 44 24 28          	lea    eax,[esp+0x28]
c00121d3:	50                   	push   eax
c00121d4:	53                   	push   ebx
c00121d5:	e8 e2 90 ff ff       	call   c000b2bc <KeDereferenceSymlink(char const*, char*)>
c00121da:	83 c4 10             	add    esp,0x10
c00121dd:	83 f8 01             	cmp    eax,0x1
c00121e0:	74 1a                	je     c00121fc <SysSizeFromFilename(regs*)+0x10b>
c00121e2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00121e7:	74 26                	je     c001220f <SysSizeFromFilename(regs*)+0x11e>
c00121e9:	85 f6                	test   esi,esi
c00121eb:	0f 84 40 ff ff ff    	je     c0012131 <SysSizeFromFilename(regs*)+0x40>
c00121f1:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00121f7:	e9 35 ff ff ff       	jmp    c0012131 <SysSizeFromFilename(regs*)+0x40>
c00121fc:	85 f6                	test   esi,esi
c00121fe:	0f 84 2d ff ff ff    	je     c0012131 <SysSizeFromFilename(regs*)+0x40>
c0012204:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001220a:	e9 22 ff ff ff       	jmp    c0012131 <SysSizeFromFilename(regs*)+0x40>
c001220f:	85 f6                	test   esi,esi
c0012211:	0f 84 1a ff ff ff    	je     c0012131 <SysSizeFromFilename(regs*)+0x40>
c0012217:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001221d:	e9 0f ff ff ff       	jmp    c0012131 <SysSizeFromFilename(regs*)+0x40>

c0012222 <SysSizeFromFilenameNoSymlink(regs*)>:
c0012222:	55                   	push   ebp
c0012223:	57                   	push   edi
c0012224:	56                   	push   esi
c0012225:	53                   	push   ebx
c0012226:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001222c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0012233:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012236:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012239:	85 f6                	test   esi,esi
c001223b:	74 34                	je     c0012271 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c001223d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012243:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012246:	83 f8 02             	cmp    eax,0x2
c0012249:	76 2d                	jbe    c0012278 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001224b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012250:	76 3b                	jbe    c001228d <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0012252:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012255:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001225b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012262:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012268:	31 c0                	xor    eax,eax
c001226a:	5b                   	pop    ebx
c001226b:	31 d2                	xor    edx,edx
c001226d:	5e                   	pop    esi
c001226e:	5f                   	pop    edi
c001226f:	5d                   	pop    ebp
c0012270:	c3                   	ret    
c0012271:	89 f8                	mov    eax,edi
c0012273:	83 f8 02             	cmp    eax,0x2
c0012276:	77 d3                	ja     c001224b <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0012278:	81 c4 5c 02 00 00    	add    esp,0x25c
c001227e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012283:	5b                   	pop    ebx
c0012284:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012289:	5e                   	pop    esi
c001228a:	5f                   	pop    edi
c001228b:	5d                   	pop    ebp
c001228c:	c3                   	ret    
c001228d:	83 ec 0c             	sub    esp,0xc
c0012290:	68 14 01 00 00       	push   0x114
c0012295:	e8 1c 58 ff ff       	call   c0007ab6 <malloc>
c001229a:	6a 00                	push   0x0
c001229c:	89 c5                	mov    ebp,eax
c001229e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122a3:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00122a6:	51                   	push   ecx
c00122a7:	57                   	push   edi
c00122a8:	55                   	push   ebp
c00122a9:	e8 c0 97 ff ff       	call   c000ba6e <File::File(char const*, Process*, bool)>
c00122ae:	83 c4 1c             	add    esp,0x1c
c00122b1:	8d 44 24 23          	lea    eax,[esp+0x23]
c00122b5:	50                   	push   eax
c00122b6:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00122b9:	53                   	push   ebx
c00122ba:	55                   	push   ebp
c00122bb:	e8 ac 9b ff ff       	call   c000be6c <File::stat(unsigned long long*, bool*)>
c00122c0:	83 c4 10             	add    esp,0x10
c00122c3:	85 ed                	test   ebp,ebp
c00122c5:	74 15                	je     c00122dc <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c00122c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122cb:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00122ce:	83 ec 0c             	sub    esp,0xc
c00122d1:	55                   	push   ebp
c00122d2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00122d5:	83 c4 10             	add    esp,0x10
c00122d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122dc:	85 c0                	test   eax,eax
c00122de:	75 98                	jne    c0012278 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00122e0:	6a 00                	push   0x0
c00122e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122ea:	05 0c 01 00 00       	add    eax,0x10c
c00122ef:	50                   	push   eax
c00122f0:	57                   	push   edi
c00122f1:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c00122f8:	53                   	push   ebx
c00122f9:	e8 56 95 ff ff       	call   c000b854 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00122fe:	58                   	pop    eax
c00122ff:	5a                   	pop    edx
c0012300:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012304:	50                   	push   eax
c0012305:	53                   	push   ebx
c0012306:	e8 b1 8f ff ff       	call   c000b2bc <KeDereferenceSymlink(char const*, char*)>
c001230b:	83 c4 10             	add    esp,0x10
c001230e:	83 f8 01             	cmp    eax,0x1
c0012311:	74 1a                	je     c001232d <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c0012313:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012318:	74 26                	je     c0012340 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c001231a:	85 f6                	test   esi,esi
c001231c:	0f 84 40 ff ff ff    	je     c0012262 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012322:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012328:	e9 35 ff ff ff       	jmp    c0012262 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001232d:	85 f6                	test   esi,esi
c001232f:	0f 84 2d ff ff ff    	je     c0012262 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012335:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001233b:	e9 22 ff ff ff       	jmp    c0012262 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012340:	85 f6                	test   esi,esi
c0012342:	0f 84 1a ff ff ff    	je     c0012262 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012348:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001234e:	e9 0f ff ff ff       	jmp    c0012262 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0012353 <SysClose(regs*)>:
c0012353:	53                   	push   ebx
c0012354:	83 ec 08             	sub    esp,0x8
c0012357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001235b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001235e:	83 f8 02             	cmp    eax,0x2
c0012361:	76 41                	jbe    c00123a4 <SysClose(regs*)+0x51>
c0012363:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0012369:	83 fa 01             	cmp    edx,0x1
c001236c:	76 2d                	jbe    c001239b <SysClose(regs*)+0x48>
c001236e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012373:	77 2f                	ja     c00123a4 <SysClose(regs*)+0x51>
c0012375:	83 ec 0c             	sub    esp,0xc
c0012378:	50                   	push   eax
c0012379:	e8 35 71 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001237e:	89 c3                	mov    ebx,eax
c0012380:	89 04 24             	mov    DWORD PTR [esp],eax
c0012383:	e8 40 98 ff ff       	call   c000bbc8 <File::close()>
c0012388:	83 c4 10             	add    esp,0x10
c001238b:	85 db                	test   ebx,ebx
c001238d:	74 0c                	je     c001239b <SysClose(regs*)+0x48>
c001238f:	83 ec 0c             	sub    esp,0xc
c0012392:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012394:	53                   	push   ebx
c0012395:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012398:	83 c4 10             	add    esp,0x10
c001239b:	31 c0                	xor    eax,eax
c001239d:	31 d2                	xor    edx,edx
c001239f:	83 c4 08             	add    esp,0x8
c00123a2:	5b                   	pop    ebx
c00123a3:	c3                   	ret    
c00123a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123ae:	83 c4 08             	add    esp,0x8
c00123b1:	5b                   	pop    ebx
c00123b2:	c3                   	ret    

c00123b3 <SysOpenDir(regs*)>:
c00123b3:	56                   	push   esi
c00123b4:	53                   	push   ebx
c00123b5:	83 ec 04             	sub    esp,0x4
c00123b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123bc:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00123bf:	85 c9                	test   ecx,ecx
c00123c1:	74 5d                	je     c0012420 <SysOpenDir(regs*)+0x6d>
c00123c3:	83 ec 0c             	sub    esp,0xc
c00123c6:	68 14 01 00 00       	push   0x114
c00123cb:	e8 e6 56 ff ff       	call   c0007ab6 <malloc>
c00123d0:	83 c4 0c             	add    esp,0xc
c00123d3:	89 c6                	mov    esi,eax
c00123d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123dd:	50                   	push   eax
c00123de:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00123e1:	52                   	push   edx
c00123e2:	56                   	push   esi
c00123e3:	e8 44 9c ff ff       	call   c000c02c <Directory::Directory(char const*, Process*)>
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	85 f6                	test   esi,esi
c00123ed:	74 31                	je     c0012420 <SysOpenDir(regs*)+0x6d>
c00123ef:	83 ec 0c             	sub    esp,0xc
c00123f2:	56                   	push   esi
c00123f3:	e8 fc 9c ff ff       	call   c000c0f4 <Directory::open()>
c00123f8:	83 c4 10             	add    esp,0x10
c00123fb:	85 c0                	test   eax,eax
c00123fd:	75 21                	jne    c0012420 <SysOpenDir(regs*)+0x6d>
c00123ff:	83 ec 0c             	sub    esp,0xc
c0012402:	56                   	push   esi
c0012403:	e8 ae 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012408:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001240b:	83 c4 10             	add    esp,0x10
c001240e:	89 02                	mov    DWORD PTR [edx],eax
c0012410:	c1 f8 1f             	sar    eax,0x1f
c0012413:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012416:	83 c4 04             	add    esp,0x4
c0012419:	31 c0                	xor    eax,eax
c001241b:	31 d2                	xor    edx,edx
c001241d:	5b                   	pop    ebx
c001241e:	5e                   	pop    esi
c001241f:	c3                   	ret    
c0012420:	83 c4 04             	add    esp,0x4
c0012423:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012428:	ba ff ff ff ff       	mov    edx,0xffffffff
c001242d:	5b                   	pop    ebx
c001242e:	5e                   	pop    esi
c001242f:	c3                   	ret    

c0012430 <SysMakeDir(regs*)>:
c0012430:	56                   	push   esi
c0012431:	53                   	push   ebx
c0012432:	83 ec 10             	sub    esp,0x10
c0012435:	68 14 01 00 00       	push   0x114
c001243a:	e8 77 56 ff ff       	call   c0007ab6 <malloc>
c001243f:	83 c4 0c             	add    esp,0xc
c0012442:	89 c3                	mov    ebx,eax
c0012444:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012449:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001244c:	50                   	push   eax
c001244d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012451:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0012454:	52                   	push   edx
c0012455:	53                   	push   ebx
c0012456:	e8 d1 9b ff ff       	call   c000c02c <Directory::Directory(char const*, Process*)>
c001245b:	83 c4 10             	add    esp,0x10
c001245e:	85 db                	test   ebx,ebx
c0012460:	74 2c                	je     c001248e <SysMakeDir(regs*)+0x5e>
c0012462:	83 ec 0c             	sub    esp,0xc
c0012465:	53                   	push   ebx
c0012466:	e8 69 9e ff ff       	call   c000c2d4 <Directory::create()>
c001246b:	89 c6                	mov    esi,eax
c001246d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001246f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012472:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012475:	83 c4 10             	add    esp,0x10
c0012478:	31 c0                	xor    eax,eax
c001247a:	85 f6                	test   esi,esi
c001247c:	0f 95 c0             	setne  al
c001247f:	31 d2                	xor    edx,edx
c0012481:	f7 d8                	neg    eax
c0012483:	83 d2 00             	adc    edx,0x0
c0012486:	83 c4 04             	add    esp,0x4
c0012489:	f7 da                	neg    edx
c001248b:	5b                   	pop    ebx
c001248c:	5e                   	pop    esi
c001248d:	c3                   	ret    
c001248e:	83 c4 04             	add    esp,0x4
c0012491:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012496:	ba ff ff ff ff       	mov    edx,0xffffffff
c001249b:	5b                   	pop    ebx
c001249c:	5e                   	pop    esi
c001249d:	c3                   	ret    

c001249e <SysCloseDir(regs*)>:
c001249e:	53                   	push   ebx
c001249f:	83 ec 08             	sub    esp,0x8
c00124a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124a6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00124a9:	8d 50 fd             	lea    edx,[eax-0x3]
c00124ac:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00124b2:	77 2f                	ja     c00124e3 <SysCloseDir(regs*)+0x45>
c00124b4:	83 ec 0c             	sub    esp,0xc
c00124b7:	50                   	push   eax
c00124b8:	e8 f6 6f ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00124bd:	89 c3                	mov    ebx,eax
c00124bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00124c2:	e8 89 9c ff ff       	call   c000c150 <Directory::close()>
c00124c7:	83 c4 10             	add    esp,0x10
c00124ca:	85 db                	test   ebx,ebx
c00124cc:	74 0c                	je     c00124da <SysCloseDir(regs*)+0x3c>
c00124ce:	83 ec 0c             	sub    esp,0xc
c00124d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124d3:	53                   	push   ebx
c00124d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124d7:	83 c4 10             	add    esp,0x10
c00124da:	31 c0                	xor    eax,eax
c00124dc:	31 d2                	xor    edx,edx
c00124de:	83 c4 08             	add    esp,0x8
c00124e1:	5b                   	pop    ebx
c00124e2:	c3                   	ret    
c00124e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124ed:	83 c4 08             	add    esp,0x8
c00124f0:	5b                   	pop    ebx
c00124f1:	c3                   	ret    

c00124f2 <SysWait(regs*)>:
c00124f2:	83 ec 10             	sub    esp,0x10
c00124f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124f9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00124fc:	52                   	push   edx
c00124fd:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0012500:	51                   	push   ecx
c0012501:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012504:	50                   	push   eax
c0012505:	e8 46 3e 00 00       	call   c0016350 <waitTask(int, int*, int)>
c001250a:	83 c4 1c             	add    esp,0x1c
c001250d:	89 c2                	mov    edx,eax
c001250f:	c1 fa 1f             	sar    edx,0x1f
c0012512:	c3                   	ret    

c0012513 <SysNotImpl(regs*)>:
c0012513:	83 ec 18             	sub    esp,0x18
c0012516:	68 22 25 02 c0       	push   0xc0022522
c001251b:	e8 ff f0 ff ff       	call   c001161f <KePanic(char const*)>
c0012520:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012525:	ba ff ff ff ff       	mov    edx,0xffffffff
c001252a:	83 c4 1c             	add    esp,0x1c
c001252d:	c3                   	ret    

c001252e <SysPanic(regs*)>:
c001252e:	83 ec 18             	sub    esp,0x18
c0012531:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012535:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012538:	50                   	push   eax
c0012539:	e8 e1 f0 ff ff       	call   c001161f <KePanic(char const*)>
c001253e:	b8 01 00 00 00       	mov    eax,0x1
c0012543:	31 d2                	xor    edx,edx
c0012545:	83 c4 1c             	add    esp,0x1c
c0012548:	c3                   	ret    

c0012549 <SysRmdir(regs*)>:
c0012549:	56                   	push   esi
c001254a:	53                   	push   ebx
c001254b:	83 ec 20             	sub    esp,0x20
c001254e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012552:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012555:	68 14 01 00 00       	push   0x114
c001255a:	e8 57 55 ff ff       	call   c0007ab6 <malloc>
c001255f:	6a 00                	push   0x0
c0012561:	89 c3                	mov    ebx,eax
c0012563:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012568:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001256b:	50                   	push   eax
c001256c:	56                   	push   esi
c001256d:	53                   	push   ebx
c001256e:	e8 fb 94 ff ff       	call   c000ba6e <File::File(char const*, Process*, bool)>
c0012573:	83 c4 14             	add    esp,0x14
c0012576:	53                   	push   ebx
c0012577:	e8 bc 97 ff ff       	call   c000bd38 <File::unlink()>
c001257c:	83 c4 10             	add    esp,0x10
c001257f:	85 db                	test   ebx,ebx
c0012581:	74 14                	je     c0012597 <SysRmdir(regs*)+0x4e>
c0012583:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012587:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012589:	83 ec 0c             	sub    esp,0xc
c001258c:	53                   	push   ebx
c001258d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012590:	83 c4 10             	add    esp,0x10
c0012593:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012597:	85 c0                	test   eax,eax
c0012599:	0f 95 c0             	setne  al
c001259c:	31 d2                	xor    edx,edx
c001259e:	0f b6 c0             	movzx  eax,al
c00125a1:	f7 d8                	neg    eax
c00125a3:	83 d2 00             	adc    edx,0x0
c00125a6:	83 c4 14             	add    esp,0x14
c00125a9:	f7 da                	neg    edx
c00125ab:	5b                   	pop    ebx
c00125ac:	5e                   	pop    esi
c00125ad:	c3                   	ret    

c00125ae <SysUnlink(regs*)>:
c00125ae:	56                   	push   esi
c00125af:	53                   	push   ebx
c00125b0:	83 ec 20             	sub    esp,0x20
c00125b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125b7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00125ba:	68 14 01 00 00       	push   0x114
c00125bf:	e8 f2 54 ff ff       	call   c0007ab6 <malloc>
c00125c4:	6a 00                	push   0x0
c00125c6:	89 c3                	mov    ebx,eax
c00125c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125d0:	50                   	push   eax
c00125d1:	56                   	push   esi
c00125d2:	53                   	push   ebx
c00125d3:	e8 96 94 ff ff       	call   c000ba6e <File::File(char const*, Process*, bool)>
c00125d8:	83 c4 14             	add    esp,0x14
c00125db:	53                   	push   ebx
c00125dc:	e8 57 97 ff ff       	call   c000bd38 <File::unlink()>
c00125e1:	83 c4 10             	add    esp,0x10
c00125e4:	85 db                	test   ebx,ebx
c00125e6:	74 14                	je     c00125fc <SysUnlink(regs*)+0x4e>
c00125e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125ec:	8b 13                	mov    edx,DWORD PTR [ebx]
c00125ee:	83 ec 0c             	sub    esp,0xc
c00125f1:	53                   	push   ebx
c00125f2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00125f5:	83 c4 10             	add    esp,0x10
c00125f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125fc:	85 c0                	test   eax,eax
c00125fe:	0f 95 c0             	setne  al
c0012601:	31 d2                	xor    edx,edx
c0012603:	0f b6 c0             	movzx  eax,al
c0012606:	f7 d8                	neg    eax
c0012608:	83 d2 00             	adc    edx,0x0
c001260b:	83 c4 14             	add    esp,0x14
c001260e:	f7 da                	neg    edx
c0012610:	5b                   	pop    ebx
c0012611:	5e                   	pop    esi
c0012612:	c3                   	ret    

c0012613 <SysGetArgv(regs*)>:
c0012613:	83 ec 0c             	sub    esp,0xc
c0012616:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001261a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001261d:	85 c0                	test   eax,eax
c001261f:	78 2c                	js     c001264d <SysGetArgv(regs*)+0x3a>
c0012621:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012627:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001262a:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012630:	7d 1b                	jge    c001264d <SysGetArgv(regs*)+0x3a>
c0012632:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012639:	85 c0                	test   eax,eax
c001263b:	74 18                	je     c0012655 <SysGetArgv(regs*)+0x42>
c001263d:	83 ec 08             	sub    esp,0x8
c0012640:	50                   	push   eax
c0012641:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012644:	50                   	push   eax
c0012645:	e8 f6 df fe ff       	call   c0000640 <strcpy>
c001264a:	83 c4 10             	add    esp,0x10
c001264d:	31 c0                	xor    eax,eax
c001264f:	31 d2                	xor    edx,edx
c0012651:	83 c4 0c             	add    esp,0xc
c0012654:	c3                   	ret    
c0012655:	b8 01 00 00 00       	mov    eax,0x1
c001265a:	31 d2                	xor    edx,edx
c001265c:	83 c4 0c             	add    esp,0xc
c001265f:	c3                   	ret    

c0012660 <SysUSleep(regs*)>:
c0012660:	83 ec 1c             	sub    esp,0x1c
c0012663:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012667:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001266a:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001266d:	6a 00                	push   0x0
c001266f:	6a 64                	push   0x64
c0012671:	52                   	push   edx
c0012672:	50                   	push   eax
c0012673:	e8 08 d1 00 00       	call   c001f780 <__udivdi3>
c0012678:	83 c4 14             	add    esp,0x14
c001267b:	50                   	push   eax
c001267c:	e8 b3 3d 00 00       	call   c0016434 <milliTenthSleep(unsigned int)>
c0012681:	31 c0                	xor    eax,eax
c0012683:	31 d2                	xor    edx,edx
c0012685:	83 c4 1c             	add    esp,0x1c
c0012688:	c3                   	ret    

c0012689 <SysSpawn(regs*)>:
c0012689:	56                   	push   esi
c001268a:	53                   	push   ebx
c001268b:	83 ec 04             	sub    esp,0x4
c001268e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012692:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012695:	85 f6                	test   esi,esi
c0012697:	75 0a                	jne    c00126a3 <SysSpawn(regs*)+0x1a>
c0012699:	83 c4 04             	add    esp,0x4
c001269c:	31 c0                	xor    eax,eax
c001269e:	31 d2                	xor    edx,edx
c00126a0:	5b                   	pop    ebx
c00126a1:	5e                   	pop    esi
c00126a2:	c3                   	ret    
c00126a3:	83 ec 0c             	sub    esp,0xc
c00126a6:	68 24 07 00 00       	push   0x724
c00126ab:	e8 06 54 ff ff       	call   c0007ab6 <malloc>
c00126b0:	83 c4 10             	add    esp,0x10
c00126b3:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00126b6:	89 c6                	mov    esi,eax
c00126b8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00126bb:	85 c9                	test   ecx,ecx
c00126bd:	75 39                	jne    c00126f8 <SysSpawn(regs*)+0x6f>
c00126bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00126c7:	52                   	push   edx
c00126c8:	50                   	push   eax
c00126c9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126cc:	50                   	push   eax
c00126cd:	56                   	push   esi
c00126ce:	e8 b1 33 00 00       	call   c0015a84 <Process::Process(char const*, Process*, char**)>
c00126d3:	83 c4 10             	add    esp,0x10
c00126d6:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00126dd:	75 ba                	jne    c0012699 <SysSpawn(regs*)+0x10>
c00126df:	83 ec 0c             	sub    esp,0xc
c00126e2:	56                   	push   esi
c00126e3:	e8 d8 38 00 00       	call   c0015fc0 <Process::createUserThread()>
c00126e8:	8b 06                	mov    eax,DWORD PTR [esi]
c00126ea:	83 c4 10             	add    esp,0x10
c00126ed:	89 c2                	mov    edx,eax
c00126ef:	83 c4 04             	add    esp,0x4
c00126f2:	c1 fa 1f             	sar    edx,0x1f
c00126f5:	5b                   	pop    ebx
c00126f6:	5e                   	pop    esi
c00126f7:	c3                   	ret    
c00126f8:	31 c0                	xor    eax,eax
c00126fa:	eb cb                	jmp    c00126c7 <SysSpawn(regs*)+0x3e>

c00126fc <SysGetEnv(regs*)>:
c00126fc:	57                   	push   edi
c00126fd:	56                   	push   esi
c00126fe:	53                   	push   ebx
c00126ff:	83 ec 1c             	sub    esp,0x1c
c0012702:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012706:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001270b:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001270e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012711:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012714:	51                   	push   ecx
c0012715:	e8 bd ed ff ff       	call   c00114d7 <KeGetProcessTotalEnvCount(Process*)>
c001271a:	83 c4 10             	add    esp,0x10
c001271d:	39 c7                	cmp    edi,eax
c001271f:	7c 14                	jl     c0012735 <SysGetEnv(regs*)+0x39>
c0012721:	85 f6                	test   esi,esi
c0012723:	75 0b                	jne    c0012730 <SysGetEnv(regs*)+0x34>
c0012725:	83 c4 10             	add    esp,0x10
c0012728:	31 c0                	xor    eax,eax
c001272a:	5b                   	pop    ebx
c001272b:	31 d2                	xor    edx,edx
c001272d:	5e                   	pop    esi
c001272e:	5f                   	pop    edi
c001272f:	c3                   	ret    
c0012730:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012733:	eb f0                	jmp    c0012725 <SysGetEnv(regs*)+0x29>
c0012735:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012739:	83 ec 04             	sub    esp,0x4
c001273c:	57                   	push   edi
c001273d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012743:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012746:	57                   	push   edi
c0012747:	50                   	push   eax
c0012748:	e8 aa ed ff ff       	call   c00114f7 <KeGetProcessEnvPair(Process*, int)>
c001274d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012750:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012754:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012758:	83 c4 0c             	add    esp,0xc
c001275b:	85 d2                	test   edx,edx
c001275d:	75 23                	jne    c0012782 <SysGetEnv(regs*)+0x86>
c001275f:	83 ec 0c             	sub    esp,0xc
c0012762:	50                   	push   eax
c0012763:	e8 08 de fe ff       	call   c0000570 <strlen>
c0012768:	89 3c 24             	mov    DWORD PTR [esp],edi
c001276b:	89 c3                	mov    ebx,eax
c001276d:	e8 fe dd fe ff       	call   c0000570 <strlen>
c0012772:	83 c4 10             	add    esp,0x10
c0012775:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012779:	83 c4 10             	add    esp,0x10
c001277c:	31 d2                	xor    edx,edx
c001277e:	5b                   	pop    ebx
c001277f:	5e                   	pop    esi
c0012780:	5f                   	pop    edi
c0012781:	c3                   	ret    
c0012782:	83 ec 08             	sub    esp,0x8
c0012785:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012788:	50                   	push   eax
c0012789:	56                   	push   esi
c001278a:	e8 b1 de fe ff       	call   c0000640 <strcpy>
c001278f:	58                   	pop    eax
c0012790:	5a                   	pop    edx
c0012791:	68 3c 25 02 c0       	push   0xc002253c
c0012796:	56                   	push   esi
c0012797:	e8 a4 e0 fe ff       	call   c0000840 <strcat>
c001279c:	59                   	pop    ecx
c001279d:	5b                   	pop    ebx
c001279e:	57                   	push   edi
c001279f:	56                   	push   esi
c00127a0:	e8 9b e0 fe ff       	call   c0000840 <strcat>
c00127a5:	83 c4 10             	add    esp,0x10
c00127a8:	e9 78 ff ff ff       	jmp    c0012725 <SysGetEnv(regs*)+0x29>

c00127ad <SysSetFatAttrib(regs*)>:
c00127ad:	57                   	push   edi
c00127ae:	56                   	push   esi
c00127af:	53                   	push   ebx
c00127b0:	83 ec 1c             	sub    esp,0x1c
c00127b3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00127b7:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00127ba:	68 14 01 00 00       	push   0x114
c00127bf:	e8 f2 52 ff ff       	call   c0007ab6 <malloc>
c00127c4:	83 c4 0c             	add    esp,0xc
c00127c7:	89 c3                	mov    ebx,eax
c00127c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00127d1:	50                   	push   eax
c00127d2:	57                   	push   edi
c00127d3:	53                   	push   ebx
c00127d4:	e8 73 93 ff ff       	call   c000bb4c <File::File(char const*, Process*)>
c00127d9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00127dc:	83 c4 0c             	add    esp,0xc
c00127df:	0f b6 d4             	movzx  edx,ah
c00127e2:	0f b6 c0             	movzx  eax,al
c00127e5:	52                   	push   edx
c00127e6:	50                   	push   eax
c00127e7:	53                   	push   ebx
c00127e8:	e8 e5 95 ff ff       	call   c000bdd2 <File::chfatattr(unsigned char, unsigned char)>
c00127ed:	83 c4 10             	add    esp,0x10
c00127f0:	85 db                	test   ebx,ebx
c00127f2:	74 14                	je     c0012808 <SysSetFatAttrib(regs*)+0x5b>
c00127f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127f8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00127fa:	83 ec 0c             	sub    esp,0xc
c00127fd:	53                   	push   ebx
c00127fe:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012801:	83 c4 10             	add    esp,0x10
c0012804:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012808:	85 c0                	test   eax,eax
c001280a:	0f 95 c0             	setne  al
c001280d:	31 d2                	xor    edx,edx
c001280f:	0f b6 c0             	movzx  eax,al
c0012812:	f7 d8                	neg    eax
c0012814:	83 d2 00             	adc    edx,0x0
c0012817:	83 c4 10             	add    esp,0x10
c001281a:	f7 da                	neg    edx
c001281c:	5b                   	pop    ebx
c001281d:	5e                   	pop    esi
c001281e:	5f                   	pop    edi
c001281f:	c3                   	ret    

c0012820 <SysPipe(regs*)>:
c0012820:	57                   	push   edi
c0012821:	56                   	push   esi
c0012822:	53                   	push   ebx
c0012823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012827:	83 ec 0c             	sub    esp,0xc
c001282a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001282d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012830:	6a 20                	push   0x20
c0012832:	e8 7f 52 ff ff       	call   c0007ab6 <malloc>
c0012837:	89 c3                	mov    ebx,eax
c0012839:	58                   	pop    eax
c001283a:	5a                   	pop    edx
c001283b:	68 00 50 00 00       	push   0x5000
c0012840:	53                   	push   ebx
c0012841:	e8 e2 5b ff ff       	call   c0008428 <Pipe::Pipe(int)>
c0012846:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012849:	e8 68 69 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001284e:	89 07                	mov    DWORD PTR [edi],eax
c0012850:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012853:	e8 5e 69 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012858:	83 c4 10             	add    esp,0x10
c001285b:	89 06                	mov    DWORD PTR [esi],eax
c001285d:	31 d2                	xor    edx,edx
c001285f:	5b                   	pop    ebx
c0012860:	31 c0                	xor    eax,eax
c0012862:	5e                   	pop    esi
c0012863:	5f                   	pop    edi
c0012864:	c3                   	ret    

c0012865 <SysGetUnixTime(regs*)>:
c0012865:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001286a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012870:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012874:	e9 a1 9c ff ff       	jmp    c000c51a <Clock::timeInSecondsLocal()>

c0012879 <string_ends_with(char const*, char const*)>:
c0012879:	57                   	push   edi
c001287a:	56                   	push   esi
c001287b:	53                   	push   ebx
c001287c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012880:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012884:	83 ec 0c             	sub    esp,0xc
c0012887:	53                   	push   ebx
c0012888:	e8 e3 dc fe ff       	call   c0000570 <strlen>
c001288d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012890:	89 c6                	mov    esi,eax
c0012892:	e8 d9 dc fe ff       	call   c0000570 <strlen>
c0012897:	83 c4 10             	add    esp,0x10
c001289a:	39 c6                	cmp    esi,eax
c001289c:	7d 06                	jge    c00128a4 <string_ends_with(char const*, char const*)+0x2b>
c001289e:	5b                   	pop    ebx
c001289f:	31 c0                	xor    eax,eax
c00128a1:	5e                   	pop    esi
c00128a2:	5f                   	pop    edi
c00128a3:	c3                   	ret    
c00128a4:	83 ec 08             	sub    esp,0x8
c00128a7:	29 c6                	sub    esi,eax
c00128a9:	57                   	push   edi
c00128aa:	01 f3                	add    ebx,esi
c00128ac:	53                   	push   ebx
c00128ad:	e8 9e de fe ff       	call   c0000750 <strcmp>
c00128b2:	83 c4 10             	add    esp,0x10
c00128b5:	85 c0                	test   eax,eax
c00128b7:	5b                   	pop    ebx
c00128b8:	0f 94 c0             	sete   al
c00128bb:	5e                   	pop    esi
c00128bc:	0f b6 c0             	movzx  eax,al
c00128bf:	5f                   	pop    edi
c00128c0:	c3                   	ret    

c00128c1 <SysOpen(regs*)>:
c00128c1:	56                   	push   esi
c00128c2:	53                   	push   ebx
c00128c3:	81 ec 04 01 00 00    	sub    esp,0x104
c00128c9:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00128d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128d3:	85 c0                	test   eax,eax
c00128d5:	0f 84 bc 01 00 00    	je     c0012a97 <SysOpen(regs*)+0x1d6>
c00128db:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128de:	85 c0                	test   eax,eax
c00128e0:	0f 84 b1 01 00 00    	je     c0012a97 <SysOpen(regs*)+0x1d6>
c00128e6:	6a 00                	push   0x0
c00128e8:	68 3e 25 02 c0       	push   0xc002253e
c00128ed:	50                   	push   eax
c00128ee:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00128f2:	56                   	push   esi
c00128f3:	e8 5c 8f ff ff       	call   c000b854 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00128f8:	89 34 24             	mov    DWORD PTR [esp],esi
c00128fb:	e8 70 dc fe ff       	call   c0000570 <strlen>
c0012900:	83 c4 10             	add    esp,0x10
c0012903:	83 e8 01             	sub    eax,0x1
c0012906:	74 21                	je     c0012929 <SysOpen(regs*)+0x68>
c0012908:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001290c:	eb 12                	jmp    c0012920 <SysOpen(regs*)+0x5f>
c001290e:	83 fa 3a             	cmp    edx,0x3a
c0012911:	74 12                	je     c0012925 <SysOpen(regs*)+0x64>
c0012913:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012917:	83 e8 01             	sub    eax,0x1
c001291a:	74 0d                	je     c0012929 <SysOpen(regs*)+0x68>
c001291c:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012920:	83 fa 2e             	cmp    edx,0x2e
c0012923:	75 e9                	jne    c001290e <SysOpen(regs*)+0x4d>
c0012925:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012929:	83 ec 08             	sub    esp,0x8
c001292c:	68 42 25 02 c0       	push   0xc0022542
c0012931:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012934:	50                   	push   eax
c0012935:	e8 3f ff ff ff       	call   c0012879 <string_ends_with(char const*, char const*)>
c001293a:	83 c4 10             	add    esp,0x10
c001293d:	85 c0                	test   eax,eax
c001293f:	74 1d                	je     c001295e <SysOpen(regs*)+0x9d>
c0012941:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012944:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001294a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012951:	81 c4 04 01 00 00    	add    esp,0x104
c0012957:	31 c0                	xor    eax,eax
c0012959:	31 d2                	xor    edx,edx
c001295b:	5b                   	pop    ebx
c001295c:	5e                   	pop    esi
c001295d:	c3                   	ret    
c001295e:	83 ec 08             	sub    esp,0x8
c0012961:	68 47 25 02 c0       	push   0xc0022547
c0012966:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012969:	50                   	push   eax
c001296a:	e8 0a ff ff ff       	call   c0012879 <string_ends_with(char const*, char const*)>
c001296f:	83 c4 10             	add    esp,0x10
c0012972:	85 c0                	test   eax,eax
c0012974:	75 cb                	jne    c0012941 <SysOpen(regs*)+0x80>
c0012976:	83 ec 08             	sub    esp,0x8
c0012979:	68 43 25 02 c0       	push   0xc0022543
c001297e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012981:	50                   	push   eax
c0012982:	e8 c9 dd fe ff       	call   c0000750 <strcmp>
c0012987:	83 c4 10             	add    esp,0x10
c001298a:	85 c0                	test   eax,eax
c001298c:	74 b3                	je     c0012941 <SysOpen(regs*)+0x80>
c001298e:	83 ec 08             	sub    esp,0x8
c0012991:	68 42 25 02 c0       	push   0xc0022542
c0012996:	56                   	push   esi
c0012997:	e8 dd fe ff ff       	call   c0012879 <string_ends_with(char const*, char const*)>
c001299c:	83 c4 10             	add    esp,0x10
c001299f:	85 c0                	test   eax,eax
c00129a1:	75 9e                	jne    c0012941 <SysOpen(regs*)+0x80>
c00129a3:	83 ec 08             	sub    esp,0x8
c00129a6:	68 4c 25 02 c0       	push   0xc002254c
c00129ab:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129ae:	50                   	push   eax
c00129af:	e8 c5 fe ff ff       	call   c0012879 <string_ends_with(char const*, char const*)>
c00129b4:	83 c4 10             	add    esp,0x10
c00129b7:	85 c0                	test   eax,eax
c00129b9:	0f 85 eb 00 00 00    	jne    c0012aaa <SysOpen(regs*)+0x1e9>
c00129bf:	83 ec 08             	sub    esp,0x8
c00129c2:	68 51 25 02 c0       	push   0xc0022551
c00129c7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129ca:	50                   	push   eax
c00129cb:	e8 a9 fe ff ff       	call   c0012879 <string_ends_with(char const*, char const*)>
c00129d0:	83 c4 10             	add    esp,0x10
c00129d3:	85 c0                	test   eax,eax
c00129d5:	0f 85 cf 00 00 00    	jne    c0012aaa <SysOpen(regs*)+0x1e9>
c00129db:	83 ec 08             	sub    esp,0x8
c00129de:	68 4d 25 02 c0       	push   0xc002254d
c00129e3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00129e6:	51                   	push   ecx
c00129e7:	e8 64 dd fe ff       	call   c0000750 <strcmp>
c00129ec:	83 c4 10             	add    esp,0x10
c00129ef:	85 c0                	test   eax,eax
c00129f1:	0f 84 b3 00 00 00    	je     c0012aaa <SysOpen(regs*)+0x1e9>
c00129f7:	83 ec 08             	sub    esp,0x8
c00129fa:	68 4c 25 02 c0       	push   0xc002254c
c00129ff:	56                   	push   esi
c0012a00:	e8 74 fe ff ff       	call   c0012879 <string_ends_with(char const*, char const*)>
c0012a05:	83 c4 10             	add    esp,0x10
c0012a08:	85 c0                	test   eax,eax
c0012a0a:	0f 85 9a 00 00 00    	jne    c0012aaa <SysOpen(regs*)+0x1e9>
c0012a10:	83 ec 0c             	sub    esp,0xc
c0012a13:	68 14 01 00 00       	push   0x114
c0012a18:	e8 99 50 ff ff       	call   c0007ab6 <malloc>
c0012a1d:	83 c4 0c             	add    esp,0xc
c0012a20:	89 c6                	mov    esi,eax
c0012a22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a27:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012a2a:	50                   	push   eax
c0012a2b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012a2e:	52                   	push   edx
c0012a2f:	56                   	push   esi
c0012a30:	e8 17 91 ff ff       	call   c000bb4c <File::File(char const*, Process*)>
c0012a35:	83 c4 10             	add    esp,0x10
c0012a38:	85 f6                	test   esi,esi
c0012a3a:	74 5b                	je     c0012a97 <SysOpen(regs*)+0x1d6>
c0012a3c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012a3f:	0f b6 c2             	movzx  eax,dl
c0012a42:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012a45:	89 d0                	mov    eax,edx
c0012a47:	83 e0 01             	and    eax,0x1
c0012a4a:	f6 c2 02             	test   dl,0x2
c0012a4d:	74 03                	je     c0012a52 <SysOpen(regs*)+0x191>
c0012a4f:	83 c8 02             	or     eax,0x2
c0012a52:	f6 c2 04             	test   dl,0x4
c0012a55:	74 03                	je     c0012a5a <SysOpen(regs*)+0x199>
c0012a57:	83 c8 04             	or     eax,0x4
c0012a5a:	f6 c2 08             	test   dl,0x8
c0012a5d:	74 03                	je     c0012a62 <SysOpen(regs*)+0x1a1>
c0012a5f:	83 c8 0a             	or     eax,0xa
c0012a62:	80 e2 10             	and    dl,0x10
c0012a65:	74 03                	je     c0012a6a <SysOpen(regs*)+0x1a9>
c0012a67:	83 c8 12             	or     eax,0x12
c0012a6a:	83 ec 08             	sub    esp,0x8
c0012a6d:	50                   	push   eax
c0012a6e:	56                   	push   esi
c0012a6f:	e8 f6 90 ff ff       	call   c000bb6a <File::open(FileOpenMode)>
c0012a74:	83 c4 10             	add    esp,0x10
c0012a77:	85 c0                	test   eax,eax
c0012a79:	75 1c                	jne    c0012a97 <SysOpen(regs*)+0x1d6>
c0012a7b:	83 ec 0c             	sub    esp,0xc
c0012a7e:	56                   	push   esi
c0012a7f:	e8 32 67 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012a84:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012a87:	83 c4 10             	add    esp,0x10
c0012a8a:	89 02                	mov    DWORD PTR [edx],eax
c0012a8c:	c1 f8 1f             	sar    eax,0x1f
c0012a8f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012a92:	e9 ba fe ff ff       	jmp    c0012951 <SysOpen(regs*)+0x90>
c0012a97:	81 c4 04 01 00 00    	add    esp,0x104
c0012a9d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012aa2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012aa7:	5b                   	pop    ebx
c0012aa8:	5e                   	pop    esi
c0012aa9:	c3                   	ret    
c0012aaa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012aad:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012ab3:	e9 92 fe ff ff       	jmp    c001294a <SysOpen(regs*)+0x89>

c0012ab8 <KeSystemCall(regs*, void*)>:
c0012ab8:	53                   	push   ebx
c0012ab9:	83 ec 08             	sub    esp,0x8
c0012abc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ac0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012ac3:	83 f8 3e             	cmp    eax,0x3e
c0012ac6:	77 16                	ja     c0012ade <KeSystemCall(regs*, void*)+0x26>
c0012ac8:	8b 14 85 60 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc2a0]
c0012acf:	85 d2                	test   edx,edx
c0012ad1:	74 0b                	je     c0012ade <KeSystemCall(regs*, void*)+0x26>
c0012ad3:	83 ec 0c             	sub    esp,0xc
c0012ad6:	53                   	push   ebx
c0012ad7:	ff d2                	call   edx
c0012ad9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012adc:	eb 0d                	jmp    c0012aeb <KeSystemCall(regs*, void*)+0x33>
c0012ade:	52                   	push   edx
c0012adf:	52                   	push   edx
c0012ae0:	50                   	push   eax
c0012ae1:	68 56 25 02 c0       	push   0xc0022556
c0012ae6:	e8 5a 7e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012aeb:	83 c4 10             	add    esp,0x10
c0012aee:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012af3:	31 d2                	xor    edx,edx
c0012af5:	83 c4 08             	add    esp,0x8
c0012af8:	5b                   	pop    ebx
c0012af9:	c3                   	ret    
c0012afa:	66 90                	xchg   ax,ax

c0012afc <KeSwitchEndian16(unsigned short)>:
c0012afc:	83 ec 04             	sub    esp,0x4
c0012aff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b03:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012b07:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b0b:	c1 f8 08             	sar    eax,0x8
c0012b0e:	89 c2                	mov    edx,eax
c0012b10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b14:	c1 e0 08             	shl    eax,0x8
c0012b17:	09 d0                	or     eax,edx
c0012b19:	83 c4 04             	add    esp,0x4
c0012b1c:	c3                   	ret    
c0012b1d:	8d 76 00             	lea    esi,[esi+0x0]

c0012b20 <KeSwitchEndian32(unsigned int)>:
c0012b20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b24:	c1 e8 18             	shr    eax,0x18
c0012b27:	89 c2                	mov    edx,eax
c0012b29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b2d:	c1 e0 08             	shl    eax,0x8
c0012b30:	25 00 00 ff 00       	and    eax,0xff0000
c0012b35:	09 c2                	or     edx,eax
c0012b37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b3b:	c1 e8 08             	shr    eax,0x8
c0012b3e:	25 00 ff 00 00       	and    eax,0xff00
c0012b43:	09 c2                	or     edx,eax
c0012b45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b49:	c1 e0 18             	shl    eax,0x18
c0012b4c:	09 d0                	or     eax,edx
c0012b4e:	c3                   	ret    
c0012b4f:	90                   	nop

c0012b50 <EthernetCRC32(unsigned char*, int)>:
c0012b50:	83 ec 10             	sub    esp,0x10
c0012b53:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012b58:	75 0a                	jne    c0012b64 <EthernetCRC32(unsigned char*, int)+0x14>
c0012b5a:	b8 00 00 00 00       	mov    eax,0x0
c0012b5f:	e9 8c 00 00 00       	jmp    c0012bf0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b64:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012b69:	7f 09                	jg     c0012b74 <EthernetCRC32(unsigned char*, int)+0x24>
c0012b6b:	b8 00 00 00 00       	mov    eax,0x0
c0012b70:	eb 7e                	jmp    c0012bf0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b72:	66 90                	xchg   ax,ax
c0012b74:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012b7c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012b84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b88:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012b8c:	7d 5a                	jge    c0012be8 <EthernetCRC32(unsigned char*, int)+0x98>
c0012b8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b96:	01 d0                	add    eax,edx
c0012b98:	8a 00                	mov    al,BYTE PTR [eax]
c0012b9a:	0f b6 c0             	movzx  eax,al
c0012b9d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012ba1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0012bac:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012bb1:	7f 2d                	jg     c0012be0 <EthernetCRC32(unsigned char*, int)+0x90>
c0012bb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bb7:	83 e0 01             	and    eax,0x1
c0012bba:	74 10                	je     c0012bcc <EthernetCRC32(unsigned char*, int)+0x7c>
c0012bbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bc0:	d1 e8                	shr    eax,1
c0012bc2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012bc7:	eb 0b                	jmp    c0012bd4 <EthernetCRC32(unsigned char*, int)+0x84>
c0012bc9:	8d 76 00             	lea    esi,[esi+0x0]
c0012bcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bd0:	d1 e8                	shr    eax,1
c0012bd2:	66 90                	xchg   ax,ax
c0012bd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012bd8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012bdd:	eb cd                	jmp    c0012bac <EthernetCRC32(unsigned char*, int)+0x5c>
c0012bdf:	90                   	nop
c0012be0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012be5:	eb 9d                	jmp    c0012b84 <EthernetCRC32(unsigned char*, int)+0x34>
c0012be7:	90                   	nop
c0012be8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bec:	f7 d0                	not    eax
c0012bee:	66 90                	xchg   ax,ax
c0012bf0:	83 c4 10             	add    esp,0x10
c0012bf3:	c3                   	ret    

c0012bf4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012bf4:	83 ec 2c             	sub    esp,0x2c
c0012bf7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012bfb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c0f:	0f b7 c0             	movzx  eax,ax
c0012c12:	3d 06 08 00 00       	cmp    eax,0x806
c0012c17:	75 13                	jne    c0012c2c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012c19:	83 ec 0c             	sub    esp,0xc
c0012c1c:	68 6a 25 02 c0       	push   0xc002256a
c0012c21:	e8 1f 7d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012c26:	83 c4 10             	add    esp,0x10
c0012c29:	eb 25                	jmp    c0012c50 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c2b:	90                   	nop
c0012c2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c30:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c33:	0f b7 c0             	movzx  eax,ax
c0012c36:	3d 00 08 00 00       	cmp    eax,0x800
c0012c3b:	75 13                	jne    c0012c50 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c3d:	83 ec 0c             	sub    esp,0xc
c0012c40:	68 80 25 02 c0       	push   0xc0022580
c0012c45:	e8 fb 7c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012c4a:	83 c4 10             	add    esp,0x10
c0012c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c50:	90                   	nop
c0012c51:	83 c4 2c             	add    esp,0x2c
c0012c54:	c3                   	ret    

c0012c55 <CmOpen(char const*)>:
c0012c55:	57                   	push   edi
c0012c56:	56                   	push   esi
c0012c57:	53                   	push   ebx
c0012c58:	83 ec 1c             	sub    esp,0x1c
c0012c5b:	6a 30                	push   0x30
c0012c5d:	e8 54 4e ff ff       	call   c0007ab6 <malloc>
c0012c62:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c69:	89 c3                	mov    ebx,eax
c0012c6b:	e8 46 4e ff ff       	call   c0007ab6 <malloc>
c0012c70:	83 c4 0c             	add    esp,0xc
c0012c73:	89 c6                	mov    esi,eax
c0012c75:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012c7b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012c7f:	50                   	push   eax
c0012c80:	e8 c7 8e ff ff       	call   c000bb4c <File::File(char const*, Process*)>
c0012c85:	83 c4 0c             	add    esp,0xc
c0012c88:	89 33                	mov    DWORD PTR [ebx],esi
c0012c8a:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012c8e:	50                   	push   eax
c0012c8f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012c93:	50                   	push   eax
c0012c94:	56                   	push   esi
c0012c95:	e8 d2 91 ff ff       	call   c000be6c <File::stat(unsigned long long*, bool*)>
c0012c9a:	5a                   	pop    edx
c0012c9b:	59                   	pop    ecx
c0012c9c:	6a 01                	push   0x1
c0012c9e:	ff 33                	push   DWORD PTR [ebx]
c0012ca0:	e8 c5 8e ff ff       	call   c000bb6a <File::open(FileOpenMode)>
c0012ca5:	5e                   	pop    esi
c0012ca6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012caa:	e8 07 4e ff ff       	call   c0007ab6 <malloc>
c0012caf:	5a                   	pop    edx
c0012cb0:	89 c7                	mov    edi,eax
c0012cb2:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012cb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cb8:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cba:	56                   	push   esi
c0012cbb:	57                   	push   edi
c0012cbc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cc0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cc4:	50                   	push   eax
c0012cc5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012cc8:	83 c4 14             	add    esp,0x14
c0012ccb:	ff 33                	push   DWORD PTR [ebx]
c0012ccd:	e8 f6 8e ff ff       	call   c000bbc8 <File::close()>
c0012cd2:	59                   	pop    ecx
c0012cd3:	58                   	pop    eax
c0012cd4:	6a 13                	push   0x13
c0012cd6:	ff 33                	push   DWORD PTR [ebx]
c0012cd8:	e8 8d 8e ff ff       	call   c000bb6a <File::open(FileOpenMode)>
c0012cdd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cdf:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ce1:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ce4:	57                   	push   edi
c0012ce5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ce9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ced:	50                   	push   eax
c0012cee:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012cf1:	83 c4 14             	add    esp,0x14
c0012cf4:	57                   	push   edi
c0012cf5:	e8 cc 4d ff ff       	call   c0007ac6 <free>
c0012cfa:	83 c4 10             	add    esp,0x10
c0012cfd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012d00:	75 10                	jne    c0012d12 <CmOpen(char const*)+0xbd>
c0012d02:	83 ec 0c             	sub    esp,0xc
c0012d05:	68 95 25 02 c0       	push   0xc0022595
c0012d0a:	e8 10 e9 ff ff       	call   c001161f <KePanic(char const*)>
c0012d0f:	83 c4 10             	add    esp,0x10
c0012d12:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012d15:	50                   	push   eax
c0012d16:	6a 00                	push   0x0
c0012d18:	6a 00                	push   0x0
c0012d1a:	ff 33                	push   DWORD PTR [ebx]
c0012d1c:	e8 07 8f ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c0012d21:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d23:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d25:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d28:	57                   	push   edi
c0012d29:	6a 00                	push   0x0
c0012d2b:	6a 2b                	push   0x2b
c0012d2d:	50                   	push   eax
c0012d2e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d31:	83 c4 1c             	add    esp,0x1c
c0012d34:	6a 00                	push   0x0
c0012d36:	6a 00                	push   0x0
c0012d38:	ff 33                	push   DWORD PTR [ebx]
c0012d3a:	e8 e9 8e ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c0012d3f:	83 c4 0c             	add    esp,0xc
c0012d42:	6a 08                	push   0x8
c0012d44:	68 a6 25 02 c0       	push   0xc00225a6
c0012d49:	57                   	push   edi
c0012d4a:	e8 31 d6 fe ff       	call   c0000380 <memcmp>
c0012d4f:	83 c4 10             	add    esp,0x10
c0012d52:	85 c0                	test   eax,eax
c0012d54:	74 10                	je     c0012d66 <CmOpen(char const*)+0x111>
c0012d56:	83 ec 0c             	sub    esp,0xc
c0012d59:	68 af 25 02 c0       	push   0xc00225af
c0012d5e:	e8 bc e8 ff ff       	call   c001161f <KePanic(char const*)>
c0012d63:	83 c4 10             	add    esp,0x10
c0012d66:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012d6a:	89 d8                	mov    eax,ebx
c0012d6c:	83 c4 10             	add    esp,0x10
c0012d6f:	5b                   	pop    ebx
c0012d70:	5e                   	pop    esi
c0012d71:	5f                   	pop    edi
c0012d72:	c3                   	ret    

c0012d73 <CmClose(Reghive_Tag*)>:
c0012d73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d77:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012d7b:	74 0b                	je     c0012d88 <CmClose(Reghive_Tag*)+0x15>
c0012d7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d83:	e9 40 8e ff ff       	jmp    c000bbc8 <File::close()>
c0012d88:	c3                   	ret    

c0012d89 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012d89:	53                   	push   ebx
c0012d8a:	83 ec 18             	sub    esp,0x18
c0012d8d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d91:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012d95:	74 29                	je     c0012dc0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012d97:	50                   	push   eax
c0012d98:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012d9d:	99                   	cdq    
c0012d9e:	52                   	push   edx
c0012d9f:	50                   	push   eax
c0012da0:	ff 33                	push   DWORD PTR [ebx]
c0012da2:	e8 81 8e ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c0012da7:	5a                   	pop    edx
c0012da8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012daa:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012dae:	8b 10                	mov    edx,DWORD PTR [eax]
c0012db0:	51                   	push   ecx
c0012db1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012db5:	6a 00                	push   0x0
c0012db7:	6a 2b                	push   0x2b
c0012db9:	50                   	push   eax
c0012dba:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012dbd:	83 c4 20             	add    esp,0x20
c0012dc0:	83 c4 18             	add    esp,0x18
c0012dc3:	5b                   	pop    ebx
c0012dc4:	c3                   	ret    

c0012dc5 <CmGetString(Reghive_Tag*, int, char*)>:
c0012dc5:	55                   	push   ebp
c0012dc6:	57                   	push   edi
c0012dc7:	56                   	push   esi
c0012dc8:	53                   	push   ebx
c0012dc9:	31 db                	xor    ebx,ebx
c0012dcb:	83 ec 70             	sub    esp,0x70
c0012dce:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012dd5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012dd9:	50                   	push   eax
c0012dda:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012de1:	55                   	push   ebp
c0012de2:	e8 a2 ff ff ff       	call   c0012d89 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012de7:	83 c4 10             	add    esp,0x10
c0012dea:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012def:	c1 e0 08             	shl    eax,0x8
c0012df2:	89 c2                	mov    edx,eax
c0012df4:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012df9:	09 d0                	or     eax,edx
c0012dfb:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012e00:	c1 e0 08             	shl    eax,0x8
c0012e03:	09 d0                	or     eax,edx
c0012e05:	74 25                	je     c0012e2c <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012e07:	6b fb 0d             	imul   edi,ebx,0xd
c0012e0a:	52                   	push   edx
c0012e0b:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012e0f:	52                   	push   edx
c0012e10:	50                   	push   eax
c0012e11:	55                   	push   ebp
c0012e12:	e8 72 ff ff ff       	call   c0012d89 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e17:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012e1b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012e22:	b9 27 00 00 00       	mov    ecx,0x27
c0012e27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e29:	83 c4 10             	add    esp,0x10
c0012e2c:	83 c3 03             	add    ebx,0x3
c0012e2f:	83 fb 15             	cmp    ebx,0x15
c0012e32:	75 b6                	jne    c0012dea <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012e34:	83 c4 6c             	add    esp,0x6c
c0012e37:	5b                   	pop    ebx
c0012e38:	5e                   	pop    esi
c0012e39:	5f                   	pop    edi
c0012e3a:	5d                   	pop    ebp
c0012e3b:	c3                   	ret    

c0012e3c <CmEnterDirectory(Reghive_Tag*, int)>:
c0012e3c:	83 ec 40             	sub    esp,0x40
c0012e3f:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e43:	50                   	push   eax
c0012e44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e4c:	e8 38 ff ff ff       	call   c0012d89 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e51:	83 c4 10             	add    esp,0x10
c0012e54:	83 c8 ff             	or     eax,0xffffffff
c0012e57:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012e5c:	75 19                	jne    c0012e77 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012e5e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012e63:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012e68:	c1 e0 08             	shl    eax,0x8
c0012e6b:	09 c2                	or     edx,eax
c0012e6d:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012e72:	c1 e0 10             	shl    eax,0x10
c0012e75:	09 d0                	or     eax,edx
c0012e77:	83 c4 3c             	add    esp,0x3c
c0012e7a:	c3                   	ret    

c0012e7b <CmGetNext(Reghive_Tag*, int)>:
c0012e7b:	83 ec 40             	sub    esp,0x40
c0012e7e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e82:	50                   	push   eax
c0012e83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e8b:	e8 f9 fe ff ff       	call   c0012d89 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e90:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012e95:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012e9a:	c1 e0 08             	shl    eax,0x8
c0012e9d:	09 c2                	or     edx,eax
c0012e9f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012ea4:	83 c4 4c             	add    esp,0x4c
c0012ea7:	c1 e0 10             	shl    eax,0x10
c0012eaa:	09 d0                	or     eax,edx
c0012eac:	c3                   	ret    

c0012ead <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012ead:	53                   	push   ebx
c0012eae:	83 ec 18             	sub    esp,0x18
c0012eb1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012eb5:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012eb9:	74 29                	je     c0012ee4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012ebb:	50                   	push   eax
c0012ebc:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012ec1:	99                   	cdq    
c0012ec2:	52                   	push   edx
c0012ec3:	50                   	push   eax
c0012ec4:	ff 33                	push   DWORD PTR [ebx]
c0012ec6:	e8 5d 8d ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c0012ecb:	5a                   	pop    edx
c0012ecc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ece:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012ed2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ed4:	51                   	push   ecx
c0012ed5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012ed9:	6a 00                	push   0x0
c0012edb:	6a 2b                	push   0x2b
c0012edd:	50                   	push   eax
c0012ede:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ee1:	83 c4 20             	add    esp,0x20
c0012ee4:	83 c4 18             	add    esp,0x18
c0012ee7:	5b                   	pop    ebx
c0012ee8:	c3                   	ret    

c0012ee9 <CmFreeExtent(Reghive_Tag*, int)>:
c0012ee9:	53                   	push   ebx
c0012eea:	83 ec 3c             	sub    esp,0x3c
c0012eed:	6a 2b                	push   0x2b
c0012eef:	6a 00                	push   0x0
c0012ef1:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012ef5:	53                   	push   ebx
c0012ef6:	e8 f5 d5 fe ff       	call   c00004f0 <memset>
c0012efb:	83 c4 0c             	add    esp,0xc
c0012efe:	53                   	push   ebx
c0012eff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f07:	e8 a1 ff ff ff       	call   c0012ead <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f0c:	83 c4 48             	add    esp,0x48
c0012f0f:	5b                   	pop    ebx
c0012f10:	c3                   	ret    

c0012f11 <CmUpdateHeader(Reghive_Tag*)>:
c0012f11:	83 ec 0c             	sub    esp,0xc
c0012f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f18:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012f1c:	74 10                	je     c0012f2e <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012f1e:	52                   	push   edx
c0012f1f:	8d 50 05             	lea    edx,[eax+0x5]
c0012f22:	52                   	push   edx
c0012f23:	6a 00                	push   0x0
c0012f25:	50                   	push   eax
c0012f26:	e8 82 ff ff ff       	call   c0012ead <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f2b:	83 c4 10             	add    esp,0x10
c0012f2e:	83 c4 0c             	add    esp,0xc
c0012f31:	c3                   	ret    

c0012f32 <CmExpand(Reghive_Tag*, int)>:
c0012f32:	57                   	push   edi
c0012f33:	56                   	push   esi
c0012f34:	83 ce ff             	or     esi,0xffffffff
c0012f37:	53                   	push   ebx
c0012f38:	83 ec 30             	sub    esp,0x30
c0012f3b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012f3f:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f43:	74 5f                	je     c0012fa4 <CmExpand(Reghive_Tag*, int)+0x72>
c0012f45:	31 d2                	xor    edx,edx
c0012f47:	31 f6                	xor    esi,esi
c0012f49:	50                   	push   eax
c0012f4a:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012f4e:	52                   	push   edx
c0012f4f:	50                   	push   eax
c0012f50:	ff 33                	push   DWORD PTR [ebx]
c0012f52:	e8 d1 8c ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c0012f57:	83 c4 0c             	add    esp,0xc
c0012f5a:	6a 2b                	push   0x2b
c0012f5c:	6a 00                	push   0x0
c0012f5e:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012f62:	57                   	push   edi
c0012f63:	e8 88 d5 fe ff       	call   c00004f0 <memset>
c0012f68:	83 c4 10             	add    esp,0x10
c0012f6b:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012f6f:	7d 1b                	jge    c0012f8c <CmExpand(Reghive_Tag*, int)+0x5a>
c0012f71:	83 ec 0c             	sub    esp,0xc
c0012f74:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f76:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012f7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f7c:	46                   	inc    esi
c0012f7d:	51                   	push   ecx
c0012f7e:	57                   	push   edi
c0012f7f:	6a 00                	push   0x0
c0012f81:	6a 2b                	push   0x2b
c0012f83:	50                   	push   eax
c0012f84:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f87:	83 c4 20             	add    esp,0x20
c0012f8a:	eb df                	jmp    c0012f6b <CmExpand(Reghive_Tag*, int)+0x39>
c0012f8c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012f90:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012f93:	83 ec 0c             	sub    esp,0xc
c0012f96:	01 f2                	add    edx,esi
c0012f98:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012f9b:	53                   	push   ebx
c0012f9c:	e8 70 ff ff ff       	call   c0012f11 <CmUpdateHeader(Reghive_Tag*)>
c0012fa1:	83 c4 10             	add    esp,0x10
c0012fa4:	83 c4 30             	add    esp,0x30
c0012fa7:	89 f0                	mov    eax,esi
c0012fa9:	5b                   	pop    ebx
c0012faa:	5e                   	pop    esi
c0012fab:	5f                   	pop    edi
c0012fac:	c3                   	ret    

c0012fad <CmFindUnusedExtent(Reghive_Tag*)>:
c0012fad:	55                   	push   ebp
c0012fae:	57                   	push   edi
c0012faf:	56                   	push   esi
c0012fb0:	53                   	push   ebx
c0012fb1:	83 cb ff             	or     ebx,0xffffffff
c0012fb4:	83 ec 1c             	sub    esp,0x1c
c0012fb7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012fbb:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012fbf:	74 68                	je     c0013029 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012fc1:	be 2b 00 00 00       	mov    esi,0x2b
c0012fc6:	51                   	push   ecx
c0012fc7:	31 ff                	xor    edi,edi
c0012fc9:	6a 00                	push   0x0
c0012fcb:	31 db                	xor    ebx,ebx
c0012fcd:	6a 00                	push   0x0
c0012fcf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012fd2:	e8 51 8c ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c0012fd7:	83 c4 10             	add    esp,0x10
c0012fda:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012fdd:	76 3b                	jbe    c001301a <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012fdf:	83 ec 0c             	sub    esp,0xc
c0012fe2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012fe5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012fe9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012feb:	51                   	push   ecx
c0012fec:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012ff0:	51                   	push   ecx
c0012ff1:	6a 00                	push   0x0
c0012ff3:	6a 01                	push   0x1
c0012ff5:	50                   	push   eax
c0012ff6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012ff9:	83 c4 20             	add    esp,0x20
c0012ffc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0013001:	74 26                	je     c0013029 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0013003:	43                   	inc    ebx
c0013004:	52                   	push   edx
c0013005:	57                   	push   edi
c0013006:	56                   	push   esi
c0013007:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001300a:	e8 19 8c ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c001300f:	83 c6 2b             	add    esi,0x2b
c0013012:	83 d7 00             	adc    edi,0x0
c0013015:	83 c4 10             	add    esp,0x10
c0013018:	eb c0                	jmp    c0012fda <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c001301a:	50                   	push   eax
c001301b:	50                   	push   eax
c001301c:	6a 40                	push   0x40
c001301e:	55                   	push   ebp
c001301f:	e8 0e ff ff ff       	call   c0012f32 <CmExpand(Reghive_Tag*, int)>
c0013024:	83 c4 10             	add    esp,0x10
c0013027:	89 c3                	mov    ebx,eax
c0013029:	83 c4 1c             	add    esp,0x1c
c001302c:	89 d8                	mov    eax,ebx
c001302e:	5b                   	pop    ebx
c001302f:	5e                   	pop    esi
c0013030:	5f                   	pop    edi
c0013031:	5d                   	pop    ebp
c0013032:	c3                   	ret    

c0013033 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0013033:	55                   	push   ebp
c0013034:	57                   	push   edi
c0013035:	56                   	push   esi
c0013036:	53                   	push   ebx
c0013037:	81 ec 88 00 00 00    	sub    esp,0x88
c001303d:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0013044:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001304b:	e8 5d ff ff ff       	call   c0012fad <CmFindUnusedExtent(Reghive_Tag*)>
c0013050:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013054:	83 c4 0c             	add    esp,0xc
c0013057:	6a 2b                	push   0x2b
c0013059:	6a 00                	push   0x0
c001305b:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c001305f:	55                   	push   ebp
c0013060:	e8 8b d4 fe ff       	call   c00004f0 <memset>
c0013065:	83 c4 10             	add    esp,0x10
c0013068:	85 db                	test   ebx,ebx
c001306a:	74 12                	je     c001307e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c001306c:	51                   	push   ecx
c001306d:	55                   	push   ebp
c001306e:	53                   	push   ebx
c001306f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013076:	e8 0e fd ff ff       	call   c0012d89 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001307b:	83 c4 10             	add    esp,0x10
c001307e:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0013082:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013089:	b9 2b 00 00 00       	mov    ecx,0x2b
c001308e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013090:	85 db                	test   ebx,ebx
c0013092:	74 49                	je     c00130dd <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0013094:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0013099:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c001309e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00130a2:	c1 e0 08             	shl    eax,0x8
c00130a5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00130ab:	09 c8                	or     eax,ecx
c00130ad:	74 11                	je     c00130c0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00130af:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00130b3:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00130b7:	c1 e8 10             	shr    eax,0x10
c00130ba:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00130be:	eb 0f                	jmp    c00130cf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00130c0:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00130c5:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00130ca:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130cf:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00130d3:	c1 ea 08             	shr    edx,0x8
c00130d6:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00130db:	eb 0f                	jmp    c00130ec <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00130dd:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00130e2:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00130e7:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130ec:	52                   	push   edx
c00130ed:	8d 44 24 49          	lea    eax,[esp+0x49]
c00130f1:	50                   	push   eax
c00130f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00130f6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130fd:	e8 ab fd ff ff       	call   c0012ead <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013102:	83 c4 10             	add    esp,0x10
c0013105:	85 db                	test   ebx,ebx
c0013107:	74 12                	je     c001311b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0013109:	50                   	push   eax
c001310a:	55                   	push   ebp
c001310b:	53                   	push   ebx
c001310c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013113:	e8 95 fd ff ff       	call   c0012ead <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013118:	83 c4 10             	add    esp,0x10
c001311b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001311f:	83 c4 7c             	add    esp,0x7c
c0013122:	5b                   	pop    ebx
c0013123:	5e                   	pop    esi
c0013124:	5f                   	pop    edi
c0013125:	5d                   	pop    ebp
c0013126:	c3                   	ret    

c0013127 <CmSetString(Reghive_Tag*, int, char const*)>:
c0013127:	55                   	push   ebp
c0013128:	57                   	push   edi
c0013129:	56                   	push   esi
c001312a:	53                   	push   ebx
c001312b:	bb 27 00 00 00       	mov    ebx,0x27
c0013130:	81 ec 88 00 00 00    	sub    esp,0x88
c0013136:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c001313d:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0013144:	e8 27 d4 fe ff       	call   c0000570 <strlen>
c0013149:	8d 48 26             	lea    ecx,[eax+0x26]
c001314c:	89 c8                	mov    eax,ecx
c001314e:	99                   	cdq    
c001314f:	f7 fb                	idiv   ebx
c0013151:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013155:	83 c4 10             	add    esp,0x10
c0013158:	81 f9 37 01 00 00    	cmp    ecx,0x137
c001315e:	7e 10                	jle    c0013170 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0013160:	83 ec 0c             	sub    esp,0xc
c0013163:	68 c0 25 02 c0       	push   0xc00225c0
c0013168:	e8 b2 e4 ff ff       	call   c001161f <KePanic(char const*)>
c001316d:	83 c4 10             	add    esp,0x10
c0013170:	31 ff                	xor    edi,edi
c0013172:	50                   	push   eax
c0013173:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0013177:	53                   	push   ebx
c0013178:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001317f:	56                   	push   esi
c0013180:	e8 04 fc ff ff       	call   c0012d89 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013185:	83 c4 10             	add    esp,0x10
c0013188:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c001318c:	89 d0                	mov    eax,edx
c001318e:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0013192:	c1 e0 08             	shl    eax,0x8
c0013195:	09 c2                	or     edx,eax
c0013197:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001319b:	c1 e2 08             	shl    edx,0x8
c001319e:	09 c2                	or     edx,eax
c00131a0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00131a4:	7e 76                	jle    c001321c <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c00131a6:	85 d2                	test   edx,edx
c00131a8:	75 25                	jne    c00131cf <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00131aa:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00131af:	8d 44 24 45          	lea    eax,[esp+0x45]
c00131b3:	50                   	push   eax
c00131b4:	6a 00                	push   0x0
c00131b6:	6a 00                	push   0x0
c00131b8:	56                   	push   esi
c00131b9:	e8 75 fe ff ff       	call   c0013033 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00131be:	83 c4 10             	add    esp,0x10
c00131c1:	89 c2                	mov    edx,eax
c00131c3:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00131c6:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00131c9:	c1 f8 10             	sar    eax,0x10
c00131cc:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00131cf:	55                   	push   ebp
c00131d0:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c00131d4:	55                   	push   ebp
c00131d5:	52                   	push   edx
c00131d6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00131da:	56                   	push   esi
c00131db:	e8 a9 fb ff ff       	call   c0012d89 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131e0:	83 c4 0c             	add    esp,0xc
c00131e3:	6a 27                	push   0x27
c00131e5:	6a 00                	push   0x0
c00131e7:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00131eb:	51                   	push   ecx
c00131ec:	e8 ff d2 fe ff       	call   c00004f0 <memset>
c00131f1:	83 c4 0c             	add    esp,0xc
c00131f4:	6b c7 27             	imul   eax,edi,0x27
c00131f7:	6a 27                	push   0x27
c00131f9:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0013200:	50                   	push   eax
c0013201:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0013205:	51                   	push   ecx
c0013206:	e8 75 d4 fe ff       	call   c0000680 <strncpy>
c001320b:	83 c4 0c             	add    esp,0xc
c001320e:	55                   	push   ebp
c001320f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013213:	52                   	push   edx
c0013214:	56                   	push   esi
c0013215:	e8 93 fc ff ff       	call   c0012ead <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001321a:	eb 19                	jmp    c0013235 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c001321c:	85 d2                	test   edx,edx
c001321e:	74 18                	je     c0013238 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0013220:	51                   	push   ecx
c0013221:	51                   	push   ecx
c0013222:	52                   	push   edx
c0013223:	56                   	push   esi
c0013224:	e8 c0 fc ff ff       	call   c0012ee9 <CmFreeExtent(Reghive_Tag*, int)>
c0013229:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c001322d:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0013231:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0013235:	83 c4 10             	add    esp,0x10
c0013238:	47                   	inc    edi
c0013239:	83 c3 03             	add    ebx,0x3
c001323c:	83 ff 07             	cmp    edi,0x7
c001323f:	0f 85 43 ff ff ff    	jne    c0013188 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0013245:	50                   	push   eax
c0013246:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c001324a:	50                   	push   eax
c001324b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013252:	56                   	push   esi
c0013253:	e8 55 fc ff ff       	call   c0012ead <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013258:	81 c4 8c 00 00 00    	add    esp,0x8c
c001325e:	5b                   	pop    ebx
c001325f:	5e                   	pop    esi
c0013260:	5f                   	pop    edi
c0013261:	5d                   	pop    ebp
c0013262:	c3                   	ret    

c0013263 <CmGetMatch(char*, char*, bool, bool*)>:
c0013263:	56                   	push   esi
c0013264:	53                   	push   ebx
c0013265:	50                   	push   eax
c0013266:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001326a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001326f:	74 25                	je     c0013296 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013271:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013274:	31 db                	xor    ebx,ebx
c0013276:	50                   	push   eax
c0013277:	50                   	push   eax
c0013278:	8d 04 9d 60 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc1a0]
c001327f:	50                   	push   eax
c0013280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013284:	e8 c7 d4 fe ff       	call   c0000750 <strcmp>
c0013289:	83 c4 10             	add    esp,0x10
c001328c:	85 c0                	test   eax,eax
c001328e:	74 2e                	je     c00132be <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013290:	43                   	inc    ebx
c0013291:	83 fb 3f             	cmp    ebx,0x3f
c0013294:	75 e0                	jne    c0013276 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0013296:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013299:	31 db                	xor    ebx,ebx
c001329b:	8d 04 9d 60 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc1a0]
c00132a2:	51                   	push   ecx
c00132a3:	51                   	push   ecx
c00132a4:	50                   	push   eax
c00132a5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00132a9:	e8 a2 d4 fe ff       	call   c0000750 <strcmp>
c00132ae:	83 c4 10             	add    esp,0x10
c00132b1:	85 c0                	test   eax,eax
c00132b3:	74 09                	je     c00132be <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00132b5:	43                   	inc    ebx
c00132b6:	83 fb 3f             	cmp    ebx,0x3f
c00132b9:	75 e0                	jne    c001329b <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00132bb:	83 cb ff             	or     ebx,0xffffffff
c00132be:	89 d8                	mov    eax,ebx
c00132c0:	5a                   	pop    edx
c00132c1:	5b                   	pop    ebx
c00132c2:	5e                   	pop    esi
c00132c3:	c3                   	ret    

c00132c4 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00132c4:	55                   	push   ebp
c00132c5:	31 c0                	xor    eax,eax
c00132c7:	57                   	push   edi
c00132c8:	56                   	push   esi
c00132c9:	53                   	push   ebx
c00132ca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00132ce:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00132d2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00132d4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00132d8:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00132db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00132df:	83 fd 1f             	cmp    ebp,0x1f
c00132e2:	7f 0b                	jg     c00132ef <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00132e4:	0f b6 c2             	movzx  eax,dl
c00132e7:	d3 e0                	shl    eax,cl
c00132e9:	09 07                	or     DWORD PTR [edi],eax
c00132eb:	b0 01                	mov    al,0x1
c00132ed:	01 33                	add    DWORD PTR [ebx],esi
c00132ef:	5b                   	pop    ebx
c00132f0:	5e                   	pop    esi
c00132f1:	5f                   	pop    edi
c00132f2:	5d                   	pop    ebp
c00132f3:	c3                   	ret    

c00132f4 <CmGetShift(unsigned int*, int*, int, bool*)>:
c00132f4:	57                   	push   edi
c00132f5:	56                   	push   esi
c00132f6:	53                   	push   ebx
c00132f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00132fb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00132ff:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0013303:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013307:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0013309:	7c 17                	jl     c0013322 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001330b:	8b 17                	mov    edx,DWORD PTR [edi]
c001330d:	b8 01 00 00 00       	mov    eax,0x1
c0013312:	d3 e0                	shl    eax,cl
c0013314:	48                   	dec    eax
c0013315:	21 d0                	and    eax,edx
c0013317:	d3 ea                	shr    edx,cl
c0013319:	89 17                	mov    DWORD PTR [edi],edx
c001331b:	29 0b                	sub    DWORD PTR [ebx],ecx
c001331d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013320:	eb 05                	jmp    c0013327 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0013322:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013325:	31 c0                	xor    eax,eax
c0013327:	5b                   	pop    ebx
c0013328:	5e                   	pop    esi
c0013329:	5f                   	pop    edi
c001332a:	c3                   	ret    

c001332b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c001332b:	83 ec 40             	sub    esp,0x40
c001332e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013332:	50                   	push   eax
c0013333:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013337:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001333b:	e8 49 fa ff ff       	call   c0012d89 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013340:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0013344:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0013348:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c001334c:	89 10                	mov    DWORD PTR [eax],edx
c001334e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013351:	83 c4 4c             	add    esp,0x4c
c0013354:	c3                   	ret    

c0013355 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0013355:	55                   	push   ebp
c0013356:	57                   	push   edi
c0013357:	56                   	push   esi
c0013358:	53                   	push   ebx
c0013359:	83 ec 40             	sub    esp,0x40
c001335c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013360:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0013364:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0013368:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c001336c:	53                   	push   ebx
c001336d:	56                   	push   esi
c001336e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013372:	e8 12 fa ff ff       	call   c0012d89 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013377:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001337b:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001337f:	83 c4 0c             	add    esp,0xc
c0013382:	53                   	push   ebx
c0013383:	56                   	push   esi
c0013384:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013388:	e8 20 fb ff ff       	call   c0012ead <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001338d:	83 c4 4c             	add    esp,0x4c
c0013390:	5b                   	pop    ebx
c0013391:	5e                   	pop    esi
c0013392:	5f                   	pop    edi
c0013393:	5d                   	pop    ebp
c0013394:	c3                   	ret    

c0013395 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0013395:	55                   	push   ebp
c0013396:	57                   	push   edi
c0013397:	56                   	push   esi
c0013398:	31 f6                	xor    esi,esi
c001339a:	53                   	push   ebx
c001339b:	31 db                	xor    ebx,ebx
c001339d:	83 ec 40             	sub    esp,0x40
c00133a0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00133a8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00133b0:	6a 12                	push   0x12
c00133b2:	68 ee 00 00 00       	push   0xee
c00133b7:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00133bb:	e8 30 d1 fe ff       	call   c00004f0 <memset>
c00133c0:	83 c4 10             	add    esp,0x10
c00133c3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00133c7:	6a 08                	push   0x8
c00133c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00133cd:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00133d1:	50                   	push   eax
c00133d2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00133d6:	55                   	push   ebp
c00133d7:	57                   	push   edi
c00133d8:	e8 e7 fe ff ff       	call   c00132c4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00133dd:	83 c4 10             	add    esp,0x10
c00133e0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00133e4:	50                   	push   eax
c00133e5:	6a 06                	push   0x6
c00133e7:	55                   	push   ebp
c00133e8:	57                   	push   edi
c00133e9:	e8 06 ff ff ff       	call   c00132f4 <CmGetShift(unsigned int*, int*, int, bool*)>
c00133ee:	83 c4 10             	add    esp,0x10
c00133f1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00133f6:	74 07                	je     c00133ff <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00133f8:	46                   	inc    esi
c00133f9:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00133fd:	eb e1                	jmp    c00133e0 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00133ff:	43                   	inc    ebx
c0013400:	83 fb 12             	cmp    ebx,0x12
c0013403:	75 c2                	jne    c00133c7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0013405:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013409:	31 db                	xor    ebx,ebx
c001340b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001340e:	50                   	push   eax
c001340f:	50                   	push   eax
c0013410:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0013415:	43                   	inc    ebx
c0013416:	8d 04 85 60 3e 02 c0 	lea    eax,[eax*4-0x3ffdc1a0]
c001341d:	50                   	push   eax
c001341e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013422:	e8 19 d4 fe ff       	call   c0000840 <strcat>
c0013427:	83 c4 10             	add    esp,0x10
c001342a:	83 fb 18             	cmp    ebx,0x18
c001342d:	75 df                	jne    c001340e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001342f:	83 c4 3c             	add    esp,0x3c
c0013432:	31 c0                	xor    eax,eax
c0013434:	5b                   	pop    ebx
c0013435:	5e                   	pop    esi
c0013436:	5f                   	pop    edi
c0013437:	5d                   	pop    ebp
c0013438:	c3                   	ret    

c0013439 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013439:	83 ec 40             	sub    esp,0x40
c001343c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013440:	50                   	push   eax
c0013441:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013445:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013449:	e8 3b f9 ff ff       	call   c0012d89 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001344e:	58                   	pop    eax
c001344f:	5a                   	pop    edx
c0013450:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013454:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013458:	50                   	push   eax
c0013459:	e8 37 ff ff ff       	call   c0013395 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001345e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0013463:	83 c4 4c             	add    esp,0x4c
c0013466:	c3                   	ret    

c0013467 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0013467:	55                   	push   ebp
c0013468:	57                   	push   edi
c0013469:	56                   	push   esi
c001346a:	53                   	push   ebx
c001346b:	31 db                	xor    ebx,ebx
c001346d:	83 ec 70             	sub    esp,0x70
c0013470:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0013477:	6a 30                	push   0x30
c0013479:	6a 00                	push   0x0
c001347b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001347f:	56                   	push   esi
c0013480:	e8 6b d0 fe ff       	call   c00004f0 <memset>
c0013485:	83 c4 10             	add    esp,0x10
c0013488:	83 ec 0c             	sub    esp,0xc
c001348b:	57                   	push   edi
c001348c:	e8 df d0 fe ff       	call   c0000570 <strlen>
c0013491:	83 c4 10             	add    esp,0x10
c0013494:	39 d8                	cmp    eax,ebx
c0013496:	76 16                	jbe    c00134ae <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013498:	83 ec 0c             	sub    esp,0xc
c001349b:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001349f:	50                   	push   eax
c00134a0:	e8 8b d4 fe ff       	call   c0000930 <toupper>
c00134a5:	83 c4 10             	add    esp,0x10
c00134a8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00134ab:	43                   	inc    ebx
c00134ac:	eb da                	jmp    c0013488 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00134ae:	31 f6                	xor    esi,esi
c00134b0:	52                   	push   edx
c00134b1:	31 ff                	xor    edi,edi
c00134b3:	6a 18                	push   0x18
c00134b5:	6a 3f                	push   0x3f
c00134b7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00134bb:	50                   	push   eax
c00134bc:	e8 2f d0 fe ff       	call   c00004f0 <memset>
c00134c1:	83 c4 10             	add    esp,0x10
c00134c4:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c00134c8:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c00134cc:	84 c0                	test   al,al
c00134ce:	0f 84 b0 00 00 00    	je     c0013584 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00134d4:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00134d8:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00134dd:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00134e1:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c00134e6:	8d 6e 01             	lea    ebp,[esi+0x1]
c00134e9:	83 ec 0c             	sub    esp,0xc
c00134ec:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00134f0:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00134f4:	53                   	push   ebx
c00134f5:	e8 76 d0 fe ff       	call   c0000570 <strlen>
c00134fa:	83 c4 10             	add    esp,0x10
c00134fd:	85 c0                	test   eax,eax
c00134ff:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013503:	74 0b                	je     c0013510 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013505:	50                   	push   eax
c0013506:	6a 01                	push   0x1
c0013508:	53                   	push   ebx
c0013509:	8d 44 24 20          	lea    eax,[esp+0x20]
c001350d:	50                   	push   eax
c001350e:	eb 0a                	jmp    c001351a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013510:	50                   	push   eax
c0013511:	6a 00                	push   0x0
c0013513:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013517:	50                   	push   eax
c0013518:	6a 00                	push   0x0
c001351a:	e8 44 fd ff ff       	call   c0013263 <CmGetMatch(char*, char*, bool, bool*)>
c001351f:	83 c4 10             	add    esp,0x10
c0013522:	83 f8 ff             	cmp    eax,0xffffffff
c0013525:	75 1a                	jne    c0013541 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0013527:	83 ec 0c             	sub    esp,0xc
c001352a:	68 d5 25 02 c0       	push   0xc00225d5
c001352f:	e8 eb e0 ff ff       	call   c001161f <KePanic(char const*)>
c0013534:	83 c4 10             	add    esp,0x10
c0013537:	b8 02 00 00 00       	mov    eax,0x2
c001353c:	e9 bc 00 00 00       	jmp    c00135fd <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013541:	83 ff 18             	cmp    edi,0x18
c0013544:	75 1a                	jne    c0013560 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013546:	83 ec 0c             	sub    esp,0xc
c0013549:	68 ea 25 02 c0       	push   0xc00225ea
c001354e:	e8 cc e0 ff ff       	call   c001161f <KePanic(char const*)>
c0013553:	83 c4 10             	add    esp,0x10
c0013556:	b8 01 00 00 00       	mov    eax,0x1
c001355b:	e9 9d 00 00 00       	jmp    c00135fd <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013560:	47                   	inc    edi
c0013561:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013566:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001356a:	74 02                	je     c001356e <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c001356c:	89 ee                	mov    esi,ebp
c001356e:	83 ec 0c             	sub    esp,0xc
c0013571:	53                   	push   ebx
c0013572:	e8 f9 cf fe ff       	call   c0000570 <strlen>
c0013577:	83 c4 10             	add    esp,0x10
c001357a:	85 c0                	test   eax,eax
c001357c:	74 06                	je     c0013584 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001357e:	46                   	inc    esi
c001357f:	e9 40 ff ff ff       	jmp    c00134c4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013584:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001358c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013594:	31 f6                	xor    esi,esi
c0013596:	50                   	push   eax
c0013597:	31 ff                	xor    edi,edi
c0013599:	6a 12                	push   0x12
c001359b:	68 ee 00 00 00       	push   0xee
c00135a0:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00135a7:	e8 44 cf fe ff       	call   c00004f0 <memset>
c00135ac:	83 c4 10             	add    esp,0x10
c00135af:	83 fe 17             	cmp    esi,0x17
c00135b2:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00135b6:	7e 26                	jle    c00135de <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00135b8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00135bc:	50                   	push   eax
c00135bd:	6a 08                	push   0x8
c00135bf:	55                   	push   ebp
c00135c0:	53                   	push   ebx
c00135c1:	e8 2e fd ff ff       	call   c00132f4 <CmGetShift(unsigned int*, int*, int, bool*)>
c00135c6:	83 c4 10             	add    esp,0x10
c00135c9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00135ce:	74 26                	je     c00135f6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00135d0:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00135d7:	4e                   	dec    esi
c00135d8:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00135db:	47                   	inc    edi
c00135dc:	eb 1c                	jmp    c00135fa <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00135de:	6a 06                	push   0x6
c00135e0:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00135e5:	50                   	push   eax
c00135e6:	55                   	push   ebp
c00135e7:	53                   	push   ebx
c00135e8:	e8 d7 fc ff ff       	call   c00132c4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00135ed:	83 c4 10             	add    esp,0x10
c00135f0:	84 c0                	test   al,al
c00135f2:	75 06                	jne    c00135fa <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00135f4:	eb c2                	jmp    c00135b8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c00135f6:	31 c0                	xor    eax,eax
c00135f8:	eb 03                	jmp    c00135fd <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00135fa:	46                   	inc    esi
c00135fb:	eb b2                	jmp    c00135af <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00135fd:	83 c4 6c             	add    esp,0x6c
c0013600:	5b                   	pop    ebx
c0013601:	5e                   	pop    esi
c0013602:	5f                   	pop    edi
c0013603:	5d                   	pop    ebp
c0013604:	c3                   	ret    

c0013605 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013605:	53                   	push   ebx
c0013606:	83 ec 3c             	sub    esp,0x3c
c0013609:	6a 2b                	push   0x2b
c001360b:	6a 00                	push   0x0
c001360d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013611:	53                   	push   ebx
c0013612:	e8 d9 ce fe ff       	call   c00004f0 <memset>
c0013617:	58                   	pop    eax
c0013618:	5a                   	pop    edx
c0013619:	8d 44 24 11          	lea    eax,[esp+0x11]
c001361d:	50                   	push   eax
c001361e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013622:	e8 40 fe ff ff       	call   c0013467 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013627:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001362c:	83 c4 0c             	add    esp,0xc
c001362f:	6a 15                	push   0x15
c0013631:	6a 00                	push   0x0
c0013633:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013637:	50                   	push   eax
c0013638:	e8 b3 ce fe ff       	call   c00004f0 <memset>
c001363d:	53                   	push   ebx
c001363e:	6a 00                	push   0x0
c0013640:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013644:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013648:	e8 e6 f9 ff ff       	call   c0013033 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001364d:	83 c4 58             	add    esp,0x58
c0013650:	5b                   	pop    ebx
c0013651:	c3                   	ret    

c0013652 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013652:	56                   	push   esi
c0013653:	53                   	push   ebx
c0013654:	83 ec 48             	sub    esp,0x48
c0013657:	6a 12                	push   0x12
c0013659:	68 ff 00 00 00       	push   0xff
c001365e:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013662:	56                   	push   esi
c0013663:	e8 88 ce fe ff       	call   c00004f0 <memset>
c0013668:	5a                   	pop    edx
c0013669:	59                   	pop    ecx
c001366a:	56                   	push   esi
c001366b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001366f:	e8 f3 fd ff ff       	call   c0013467 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013674:	83 c4 10             	add    esp,0x10
c0013677:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001367b:	85 db                	test   ebx,ebx
c001367d:	74 42                	je     c00136c1 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001367f:	50                   	push   eax
c0013680:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013684:	50                   	push   eax
c0013685:	53                   	push   ebx
c0013686:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001368a:	e8 fa f6 ff ff       	call   c0012d89 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001368f:	83 c4 0c             	add    esp,0xc
c0013692:	6a 12                	push   0x12
c0013694:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013698:	50                   	push   eax
c0013699:	56                   	push   esi
c001369a:	e8 e1 cc fe ff       	call   c0000380 <memcmp>
c001369f:	83 c4 10             	add    esp,0x10
c00136a2:	85 c0                	test   eax,eax
c00136a4:	74 1e                	je     c00136c4 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00136a6:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00136ab:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00136b0:	c1 e3 08             	shl    ebx,0x8
c00136b3:	09 d8                	or     eax,ebx
c00136b5:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00136ba:	c1 e3 10             	shl    ebx,0x10
c00136bd:	09 c3                	or     ebx,eax
c00136bf:	eb ba                	jmp    c001367b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00136c1:	83 cb ff             	or     ebx,0xffffffff
c00136c4:	89 d8                	mov    eax,ebx
c00136c6:	83 c4 44             	add    esp,0x44
c00136c9:	5b                   	pop    ebx
c00136ca:	5e                   	pop    esi
c00136cb:	c3                   	ret    

c00136cc <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00136cc:	57                   	push   edi
c00136cd:	56                   	push   esi
c00136ce:	53                   	push   ebx
c00136cf:	83 ec 34             	sub    esp,0x34
c00136d2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00136d6:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00136da:	6a 2b                	push   0x2b
c00136dc:	6a 00                	push   0x0
c00136de:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00136e2:	53                   	push   ebx
c00136e3:	e8 08 ce fe ff       	call   c00004f0 <memset>
c00136e8:	58                   	pop    eax
c00136e9:	5a                   	pop    edx
c00136ea:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136ee:	50                   	push   eax
c00136ef:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00136f3:	e8 6f fd ff ff       	call   c0013467 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136f8:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00136fc:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0013700:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013704:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013708:	53                   	push   ebx
c0013709:	6a 00                	push   0x0
c001370b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001370f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013713:	e8 1b f9 ff ff       	call   c0013033 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013718:	83 c4 50             	add    esp,0x50
c001371b:	5b                   	pop    ebx
c001371c:	5e                   	pop    esi
c001371d:	5f                   	pop    edi
c001371e:	c3                   	ret    

c001371f <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001371f:	55                   	push   ebp
c0013720:	57                   	push   edi
c0013721:	56                   	push   esi
c0013722:	53                   	push   ebx
c0013723:	83 ec 40             	sub    esp,0x40
c0013726:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c001372a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001372e:	6a 2b                	push   0x2b
c0013730:	6a 00                	push   0x0
c0013732:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013736:	56                   	push   esi
c0013737:	e8 b4 cd fe ff       	call   c00004f0 <memset>
c001373c:	5f                   	pop    edi
c001373d:	89 ef                	mov    edi,ebp
c001373f:	58                   	pop    eax
c0013740:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013744:	50                   	push   eax
c0013745:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013749:	e8 19 fd ff ff       	call   c0013467 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001374e:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013753:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013758:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c001375d:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013762:	83 c4 10             	add    esp,0x10
c0013765:	85 ed                	test   ebp,ebp
c0013767:	74 14                	je     c001377d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013769:	51                   	push   ecx
c001376a:	51                   	push   ecx
c001376b:	57                   	push   edi
c001376c:	53                   	push   ebx
c001376d:	e8 09 f7 ff ff       	call   c0012e7b <CmGetNext(Reghive_Tag*, int)>
c0013772:	83 c4 10             	add    esp,0x10
c0013775:	85 c0                	test   eax,eax
c0013777:	74 04                	je     c001377d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013779:	89 c7                	mov    edi,eax
c001377b:	eb e8                	jmp    c0013765 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c001377d:	56                   	push   esi
c001377e:	6a 00                	push   0x0
c0013780:	57                   	push   edi
c0013781:	53                   	push   ebx
c0013782:	e8 ac f8 ff ff       	call   c0013033 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013787:	83 c4 0c             	add    esp,0xc
c001378a:	89 c7                	mov    edi,eax
c001378c:	56                   	push   esi
c001378d:	50                   	push   eax
c001378e:	53                   	push   ebx
c001378f:	e8 f5 f5 ff ff       	call   c0012d89 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013794:	58                   	pop    eax
c0013795:	5a                   	pop    edx
c0013796:	6a 6c                	push   0x6c
c0013798:	6a 00                	push   0x0
c001379a:	6a 00                	push   0x0
c001379c:	68 fb 25 02 c0       	push   0xc00225fb
c00137a1:	57                   	push   edi
c00137a2:	53                   	push   ebx
c00137a3:	e8 24 ff ff ff       	call   c00136cc <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00137a8:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00137ac:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00137b0:	c1 e8 10             	shr    eax,0x10
c00137b3:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00137b7:	83 c4 1c             	add    esp,0x1c
c00137ba:	56                   	push   esi
c00137bb:	57                   	push   edi
c00137bc:	53                   	push   ebx
c00137bd:	e8 eb f6 ff ff       	call   c0012ead <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00137c2:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00137c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00137cc:	c1 e0 08             	shl    eax,0x8
c00137cf:	09 c2                	or     edx,eax
c00137d1:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00137d6:	83 c4 4c             	add    esp,0x4c
c00137d9:	c1 e0 10             	shl    eax,0x10
c00137dc:	5b                   	pop    ebx
c00137dd:	09 d0                	or     eax,edx
c00137df:	5e                   	pop    esi
c00137e0:	5f                   	pop    edi
c00137e1:	5d                   	pop    ebp
c00137e2:	c3                   	ret    

c00137e3 <zStrtok(char*, char const*)>:
c00137e3:	55                   	push   ebp
c00137e4:	57                   	push   edi
c00137e5:	56                   	push   esi
c00137e6:	53                   	push   ebx
c00137e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137ef:	85 db                	test   ebx,ebx
c00137f1:	74 2f                	je     c0013822 <zStrtok(char*, char const*)+0x3f>
c00137f3:	85 c0                	test   eax,eax
c00137f5:	75 09                	jne    c0013800 <zStrtok(char*, char const*)+0x1d>
c00137f7:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c00137fc:	85 c0                	test   eax,eax
c00137fe:	74 50                	je     c0013850 <zStrtok(char*, char const*)+0x6d>
c0013800:	31 c9                	xor    ecx,ecx
c0013802:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013806:	74 03                	je     c001380b <zStrtok(char*, char const*)+0x28>
c0013808:	41                   	inc    ecx
c0013809:	eb f7                	jmp    c0013802 <zStrtok(char*, char const*)+0x1f>
c001380b:	31 d2                	xor    edx,edx
c001380d:	39 ca                	cmp    edx,ecx
c001380f:	74 15                	je     c0013826 <zStrtok(char*, char const*)+0x43>
c0013811:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013815:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013818:	8d 3c 10             	lea    edi,[eax+edx*1]
c001381b:	39 ee                	cmp    esi,ebp
c001381d:	74 13                	je     c0013832 <zStrtok(char*, char const*)+0x4f>
c001381f:	42                   	inc    edx
c0013820:	eb eb                	jmp    c001380d <zStrtok(char*, char const*)+0x2a>
c0013822:	31 c0                	xor    eax,eax
c0013824:	eb 2a                	jmp    c0013850 <zStrtok(char*, char const*)+0x6d>
c0013826:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c0013830:	eb 1e                	jmp    c0013850 <zStrtok(char*, char const*)+0x6d>
c0013832:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013835:	39 ce                	cmp    esi,ecx
c0013837:	75 0a                	jne    c0013843 <zStrtok(char*, char const*)+0x60>
c0013839:	40                   	inc    eax
c001383a:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c001383f:	89 d8                	mov    eax,ebx
c0013841:	eb 0d                	jmp    c0013850 <zStrtok(char*, char const*)+0x6d>
c0013843:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013847:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001384a:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c0013850:	5b                   	pop    ebx
c0013851:	5e                   	pop    esi
c0013852:	5f                   	pop    edi
c0013853:	5d                   	pop    ebp
c0013854:	c3                   	ret    

c0013855 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013855:	57                   	push   edi
c0013856:	56                   	push   esi
c0013857:	53                   	push   ebx
c0013858:	81 ec 08 01 00 00    	sub    esp,0x108
c001385e:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013865:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001386c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013870:	53                   	push   ebx
c0013871:	e8 ca cd fe ff       	call   c0000640 <strcpy>
c0013876:	59                   	pop    ecx
c0013877:	5e                   	pop    esi
c0013878:	68 5f 29 02 c0       	push   0xc002295f
c001387d:	53                   	push   ebx
c001387e:	bb 01 00 00 00       	mov    ebx,0x1
c0013883:	e8 5b ff ff ff       	call   c00137e3 <zStrtok(char*, char const*)>
c0013888:	83 c4 10             	add    esp,0x10
c001388b:	85 c0                	test   eax,eax
c001388d:	74 3b                	je     c00138ca <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001388f:	52                   	push   edx
c0013890:	50                   	push   eax
c0013891:	6a 01                	push   0x1
c0013893:	57                   	push   edi
c0013894:	e8 b9 fd ff ff       	call   c0013652 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013899:	59                   	pop    ecx
c001389a:	89 c3                	mov    ebx,eax
c001389c:	5e                   	pop    esi
c001389d:	68 5f 29 02 c0       	push   0xc002295f
c00138a2:	6a 00                	push   0x0
c00138a4:	e8 3a ff ff ff       	call   c00137e3 <zStrtok(char*, char const*)>
c00138a9:	83 c4 10             	add    esp,0x10
c00138ac:	89 c6                	mov    esi,eax
c00138ae:	85 c0                	test   eax,eax
c00138b0:	74 18                	je     c00138ca <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00138b2:	52                   	push   edx
c00138b3:	52                   	push   edx
c00138b4:	53                   	push   ebx
c00138b5:	57                   	push   edi
c00138b6:	e8 81 f5 ff ff       	call   c0012e3c <CmEnterDirectory(Reghive_Tag*, int)>
c00138bb:	83 c4 10             	add    esp,0x10
c00138be:	89 c3                	mov    ebx,eax
c00138c0:	83 f8 ff             	cmp    eax,0xffffffff
c00138c3:	74 05                	je     c00138ca <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00138c5:	50                   	push   eax
c00138c6:	56                   	push   esi
c00138c7:	53                   	push   ebx
c00138c8:	eb c9                	jmp    c0013893 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00138ca:	81 c4 00 01 00 00    	add    esp,0x100
c00138d0:	89 d8                	mov    eax,ebx
c00138d2:	5b                   	pop    ebx
c00138d3:	5e                   	pop    esi
c00138d4:	5f                   	pop    edi
c00138d5:	c3                   	ret    

c00138d6 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00138d6:	55                   	push   ebp
c00138d7:	57                   	push   edi
c00138d8:	56                   	push   esi
c00138d9:	53                   	push   ebx
c00138da:	83 ec 5c             	sub    esp,0x5c
c00138dd:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00138e1:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00138e5:	85 db                	test   ebx,ebx
c00138e7:	0f 8e 84 00 00 00    	jle    c0013971 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00138ed:	31 ed                	xor    ebp,ebp
c00138ef:	57                   	push   edi
c00138f0:	6a 32                	push   0x32
c00138f2:	6a 00                	push   0x0
c00138f4:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00138f8:	57                   	push   edi
c00138f9:	e8 f2 cb fe ff       	call   c00004f0 <memset>
c00138fe:	83 c4 0c             	add    esp,0xc
c0013901:	57                   	push   edi
c0013902:	53                   	push   ebx
c0013903:	56                   	push   esi
c0013904:	e8 30 fb ff ff       	call   c0013439 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013909:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001390d:	83 c4 10             	add    esp,0x10
c0013910:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013914:	7d 13                	jge    c0013929 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013916:	83 ec 0c             	sub    esp,0xc
c0013919:	45                   	inc    ebp
c001391a:	68 03 2d 02 c0       	push   0xc0022d03
c001391f:	e8 21 70 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013924:	83 c4 10             	add    esp,0x10
c0013927:	eb e7                	jmp    c0013910 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013929:	51                   	push   ecx
c001392a:	57                   	push   edi
c001392b:	53                   	push   ebx
c001392c:	68 01 26 02 c0       	push   0xc0022601
c0013931:	e8 0f 70 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013936:	83 c4 10             	add    esp,0x10
c0013939:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001393e:	75 1e                	jne    c001395e <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013940:	52                   	push   edx
c0013941:	52                   	push   edx
c0013942:	53                   	push   ebx
c0013943:	56                   	push   esi
c0013944:	e8 f3 f4 ff ff       	call   c0012e3c <CmEnterDirectory(Reghive_Tag*, int)>
c0013949:	83 c4 0c             	add    esp,0xc
c001394c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013950:	8d 51 04             	lea    edx,[ecx+0x4]
c0013953:	52                   	push   edx
c0013954:	50                   	push   eax
c0013955:	56                   	push   esi
c0013956:	e8 7b ff ff ff       	call   c00138d6 <CmDisplayTree(Reghive_Tag*, int, int)>
c001395b:	83 c4 10             	add    esp,0x10
c001395e:	50                   	push   eax
c001395f:	50                   	push   eax
c0013960:	53                   	push   ebx
c0013961:	56                   	push   esi
c0013962:	e8 14 f5 ff ff       	call   c0012e7b <CmGetNext(Reghive_Tag*, int)>
c0013967:	83 c4 10             	add    esp,0x10
c001396a:	89 c3                	mov    ebx,eax
c001396c:	e9 74 ff ff ff       	jmp    c00138e5 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013971:	83 c4 5c             	add    esp,0x5c
c0013974:	5b                   	pop    ebx
c0013975:	5e                   	pop    esi
c0013976:	5f                   	pop    edi
c0013977:	5d                   	pop    ebp
c0013978:	c3                   	ret    

c0013979 <CmSplitFinalSlashInPlace(char*)>:
c0013979:	53                   	push   ebx
c001397a:	83 ec 14             	sub    esp,0x14
c001397d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013981:	53                   	push   ebx
c0013982:	e8 e9 cb fe ff       	call   c0000570 <strlen>
c0013987:	83 c4 10             	add    esp,0x10
c001398a:	48                   	dec    eax
c001398b:	85 c0                	test   eax,eax
c001398d:	74 15                	je     c00139a4 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001398f:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013992:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013996:	75 09                	jne    c00139a1 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013998:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001399b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001399f:	eb 05                	jmp    c00139a6 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00139a1:	48                   	dec    eax
c00139a2:	eb e7                	jmp    c001398b <CmSplitFinalSlashInPlace(char*)+0x12>
c00139a4:	31 c0                	xor    eax,eax
c00139a6:	83 c4 08             	add    esp,0x8
c00139a9:	5b                   	pop    ebx
c00139aa:	c3                   	ret    

c00139ab <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00139ab:	55                   	push   ebp
c00139ac:	57                   	push   edi
c00139ad:	56                   	push   esi
c00139ae:	53                   	push   ebx
c00139af:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00139b5:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00139bc:	8a 13                	mov    dl,BYTE PTR [ebx]
c00139be:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00139c1:	80 fa 40             	cmp    dl,0x40
c00139c4:	75 1c                	jne    c00139e2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c00139c6:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c00139c9:	85 c9                	test   ecx,ecx
c00139cb:	0f 84 09 01 00 00    	je     c0013ada <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00139d1:	8d 43 01             	lea    eax,[ebx+0x1]
c00139d4:	83 f9 3a             	cmp    ecx,0x3a
c00139d7:	74 04                	je     c00139dd <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c00139d9:	89 c3                	mov    ebx,eax
c00139db:	eb e9                	jmp    c00139c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00139dd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00139e0:	89 c3                	mov    ebx,eax
c00139e2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00139e6:	50                   	push   eax
c00139e7:	6a 40                	push   0x40
c00139e9:	6a 00                	push   0x0
c00139eb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00139ef:	50                   	push   eax
c00139f0:	e8 fb ca fe ff       	call   c00004f0 <memset>
c00139f5:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00139fc:	31 c0                	xor    eax,eax
c00139fe:	83 c4 10             	add    esp,0x10
c0013a01:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013a06:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013a09:	89 d1                	mov    ecx,edx
c0013a0b:	85 d2                	test   edx,edx
c0013a0d:	0f 84 c7 00 00 00    	je     c0013ada <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a13:	3d c7 00 00 00       	cmp    eax,0xc7
c0013a18:	0f 8f bc 00 00 00    	jg     c0013ada <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a1e:	83 fa 0a             	cmp    edx,0xa
c0013a21:	0f 85 a4 00 00 00    	jne    c0013acb <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0013a27:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013a2c:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013a31:	89 c8                	mov    eax,ecx
c0013a33:	a8 df                	test   al,0xdf
c0013a35:	0f 94 c2             	sete   dl
c0013a38:	83 f9 23             	cmp    ecx,0x23
c0013a3b:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013a40:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013a44:	80 e2 01             	and    dl,0x1
c0013a47:	75 4a                	jne    c0013a93 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a49:	83 e8 09             	sub    eax,0x9
c0013a4c:	3c 01                	cmp    al,0x1
c0013a4e:	76 43                	jbe    c0013a93 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a50:	83 f9 5b             	cmp    ecx,0x5b
c0013a53:	75 42                	jne    c0013a97 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013a55:	83 fe 40             	cmp    esi,0x40
c0013a58:	75 39                	jne    c0013a93 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a5a:	83 ec 0c             	sub    esp,0xc
c0013a5d:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013a61:	52                   	push   edx
c0013a62:	e8 09 cb fe ff       	call   c0000570 <strlen>
c0013a67:	83 c4 10             	add    esp,0x10
c0013a6a:	83 f8 3f             	cmp    eax,0x3f
c0013a6d:	77 6b                	ja     c0013ada <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a6f:	50                   	push   eax
c0013a70:	50                   	push   eax
c0013a71:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013a75:	52                   	push   edx
c0013a76:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013a7a:	52                   	push   edx
c0013a7b:	e8 c0 cb fe ff       	call   c0000640 <strcpy>
c0013a80:	58                   	pop    eax
c0013a81:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013a85:	52                   	push   edx
c0013a86:	e8 e5 ca fe ff       	call   c0000570 <strlen>
c0013a8b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013a90:	83 c4 10             	add    esp,0x10
c0013a93:	31 d2                	xor    edx,edx
c0013a95:	eb 3b                	jmp    c0013ad2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0013a97:	83 fe 40             	cmp    esi,0x40
c0013a9a:	74 06                	je     c0013aa2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013a9c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013aa0:	eb 20                	jmp    c0013ac2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0013aa2:	50                   	push   eax
c0013aa3:	50                   	push   eax
c0013aa4:	55                   	push   ebp
c0013aa5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013aa9:	50                   	push   eax
c0013aaa:	e8 a1 cc fe ff       	call   c0000750 <strcmp>
c0013aaf:	83 c4 10             	add    esp,0x10
c0013ab2:	85 c0                	test   eax,eax
c0013ab4:	75 dd                	jne    c0013a93 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013ab6:	eb e4                	jmp    c0013a9c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013ab8:	8d 50 01             	lea    edx,[eax+0x1]
c0013abb:	83 f9 3d             	cmp    ecx,0x3d
c0013abe:	74 1e                	je     c0013ade <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013ac0:	89 d0                	mov    eax,edx
c0013ac2:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013ac5:	85 c9                	test   ecx,ecx
c0013ac7:	75 ef                	jne    c0013ab8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013ac9:	eb 0f                	jmp    c0013ada <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013acb:	8d 50 01             	lea    edx,[eax+0x1]
c0013ace:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013ad2:	47                   	inc    edi
c0013ad3:	89 d0                	mov    eax,edx
c0013ad5:	e9 2c ff ff ff       	jmp    c0013a06 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013ada:	31 c0                	xor    eax,eax
c0013adc:	eb 33                	jmp    c0013b11 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0013ade:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013ae2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013ae5:	50                   	push   eax
c0013ae6:	50                   	push   eax
c0013ae7:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013aeb:	50                   	push   eax
c0013aec:	53                   	push   ebx
c0013aed:	e8 5e cc fe ff       	call   c0000750 <strcmp>
c0013af2:	83 c4 10             	add    esp,0x10
c0013af5:	85 c0                	test   eax,eax
c0013af7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013afb:	75 96                	jne    c0013a93 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013afd:	51                   	push   ecx
c0013afe:	51                   	push   ecx
c0013aff:	52                   	push   edx
c0013b00:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013b07:	e8 34 cb fe ff       	call   c0000640 <strcpy>
c0013b0c:	83 c4 10             	add    esp,0x10
c0013b0f:	b0 01                	mov    al,0x1
c0013b11:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013b17:	5b                   	pop    ebx
c0013b18:	5e                   	pop    esi
c0013b19:	5f                   	pop    edi
c0013b1a:	5d                   	pop    ebp
c0013b1b:	c3                   	ret    

c0013b1c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013b1c:	57                   	push   edi
c0013b1d:	56                   	push   esi
c0013b1e:	53                   	push   ebx
c0013b1f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013b25:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013b2c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013b33:	53                   	push   ebx
c0013b34:	e8 37 ca fe ff       	call   c0000570 <strlen>
c0013b39:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b3c:	89 c7                	mov    edi,eax
c0013b3e:	e8 2d ca fe ff       	call   c0000570 <strlen>
c0013b43:	83 c4 10             	add    esp,0x10
c0013b46:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013b4a:	3d ff 00 00 00       	cmp    eax,0xff
c0013b4f:	0f 87 d3 00 00 00    	ja     c0013c28 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b55:	57                   	push   edi
c0013b56:	57                   	push   edi
c0013b57:	56                   	push   esi
c0013b58:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013b5c:	56                   	push   esi
c0013b5d:	e8 de ca fe ff       	call   c0000640 <strcpy>
c0013b62:	58                   	pop    eax
c0013b63:	5a                   	pop    edx
c0013b64:	68 5f 29 02 c0       	push   0xc002295f
c0013b69:	56                   	push   esi
c0013b6a:	e8 d1 cc fe ff       	call   c0000840 <strcat>
c0013b6f:	59                   	pop    ecx
c0013b70:	5f                   	pop    edi
c0013b71:	53                   	push   ebx
c0013b72:	56                   	push   esi
c0013b73:	e8 c8 cc fe ff       	call   c0000840 <strcat>
c0013b78:	58                   	pop    eax
c0013b79:	5a                   	pop    edx
c0013b7a:	68 0b 26 02 c0       	push   0xc002260b
c0013b7f:	56                   	push   esi
c0013b80:	e8 bb cc fe ff       	call   c0000840 <strcat>
c0013b85:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013b8c:	e8 25 3f ff ff       	call   c0007ab6 <malloc>
c0013b91:	83 c4 0c             	add    esp,0xc
c0013b94:	89 c3                	mov    ebx,eax
c0013b96:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013b9c:	56                   	push   esi
c0013b9d:	50                   	push   eax
c0013b9e:	e8 a9 7f ff ff       	call   c000bb4c <File::File(char const*, Process*)>
c0013ba3:	83 c4 10             	add    esp,0x10
c0013ba6:	85 db                	test   ebx,ebx
c0013ba8:	74 7e                	je     c0013c28 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013baa:	51                   	push   ecx
c0013bab:	51                   	push   ecx
c0013bac:	6a 01                	push   0x1
c0013bae:	53                   	push   ebx
c0013baf:	e8 b6 7f ff ff       	call   c000bb6a <File::open(FileOpenMode)>
c0013bb4:	83 c4 10             	add    esp,0x10
c0013bb7:	85 c0                	test   eax,eax
c0013bb9:	74 08                	je     c0013bc3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013bbb:	83 ec 0c             	sub    esp,0xc
c0013bbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bc0:	53                   	push   ebx
c0013bc1:	eb 5f                	jmp    c0013c22 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013bc3:	52                   	push   edx
c0013bc4:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013bc8:	50                   	push   eax
c0013bc9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013bcd:	50                   	push   eax
c0013bce:	53                   	push   ebx
c0013bcf:	e8 98 82 ff ff       	call   c000be6c <File::stat(unsigned long long*, bool*)>
c0013bd4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013bd8:	83 c4 10             	add    esp,0x10
c0013bdb:	89 c1                	mov    ecx,eax
c0013bdd:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013be1:	74 31                	je     c0013c14 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013be3:	83 ec 0c             	sub    esp,0xc
c0013be6:	50                   	push   eax
c0013be7:	e8 ca 3e ff ff       	call   c0007ab6 <malloc>
c0013bec:	89 c6                	mov    esi,eax
c0013bee:	58                   	pop    eax
c0013bef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bf1:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013bf5:	52                   	push   edx
c0013bf6:	56                   	push   esi
c0013bf7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013bfb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013bff:	53                   	push   ebx
c0013c00:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c03:	83 c4 20             	add    esp,0x20
c0013c06:	85 c0                	test   eax,eax
c0013c08:	75 0a                	jne    c0013c14 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c0e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013c12:	74 18                	je     c0013c2c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013c14:	83 ec 0c             	sub    esp,0xc
c0013c17:	53                   	push   ebx
c0013c18:	e8 ab 7f ff ff       	call   c000bbc8 <File::close()>
c0013c1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c22:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c25:	83 c4 10             	add    esp,0x10
c0013c28:	31 c0                	xor    eax,eax
c0013c2a:	eb 3b                	jmp    c0013c67 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013c2c:	83 ec 0c             	sub    esp,0xc
c0013c2f:	53                   	push   ebx
c0013c30:	e8 93 7f ff ff       	call   c000bbc8 <File::close()>
c0013c35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c3a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c3d:	83 c4 0c             	add    esp,0xc
c0013c40:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c47:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c4e:	56                   	push   esi
c0013c4f:	e8 57 fd ff ff       	call   c00139ab <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013c54:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c57:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013c5b:	e8 66 3e ff ff       	call   c0007ac6 <free>
c0013c60:	83 c4 10             	add    esp,0x10
c0013c63:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013c67:	81 c4 20 01 00 00    	add    esp,0x120
c0013c6d:	5b                   	pop    ebx
c0013c6e:	5e                   	pop    esi
c0013c6f:	5f                   	pop    edi
c0013c70:	c3                   	ret    

c0013c71 <Reg::getLine(char*, char*, char*)>:
c0013c71:	57                   	push   edi
c0013c72:	56                   	push   esi
c0013c73:	53                   	push   ebx
c0013c74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c78:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c7c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013c80:	57                   	push   edi
c0013c81:	56                   	push   esi
c0013c82:	53                   	push   ebx
c0013c83:	68 10 26 02 c0       	push   0xc0022610
c0013c88:	e8 8f fe ff ff       	call   c0013b1c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c8d:	83 c4 10             	add    esp,0x10
c0013c90:	84 c0                	test   al,al
c0013c92:	75 10                	jne    c0013ca4 <Reg::getLine(char*, char*, char*)+0x33>
c0013c94:	57                   	push   edi
c0013c95:	56                   	push   esi
c0013c96:	53                   	push   ebx
c0013c97:	68 35 26 02 c0       	push   0xc0022635
c0013c9c:	e8 7b fe ff ff       	call   c0013b1c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013ca1:	83 c4 10             	add    esp,0x10
c0013ca4:	5b                   	pop    ebx
c0013ca5:	5e                   	pop    esi
c0013ca6:	5f                   	pop    edi
c0013ca7:	c3                   	ret    

c0013ca8 <Reg::readInt(char*, char*, int*)>:
c0013ca8:	55                   	push   ebp
c0013ca9:	57                   	push   edi
c0013caa:	56                   	push   esi
c0013cab:	53                   	push   ebx
c0013cac:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013cb2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013cb6:	55                   	push   ebp
c0013cb7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013cbe:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013cc5:	e8 a7 ff ff ff       	call   c0013c71 <Reg::getLine(char*, char*, char*)>
c0013cca:	83 c4 10             	add    esp,0x10
c0013ccd:	84 c0                	test   al,al
c0013ccf:	0f 84 b6 00 00 00    	je     c0013d8b <Reg::readInt(char*, char*, int*)+0xe3>
c0013cd5:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013cda:	83 fa 2b             	cmp    edx,0x2b
c0013cdd:	74 0c                	je     c0013ceb <Reg::readInt(char*, char*, int*)+0x43>
c0013cdf:	83 fa 2d             	cmp    edx,0x2d
c0013ce2:	75 0e                	jne    c0013cf2 <Reg::readInt(char*, char*, int*)+0x4a>
c0013ce4:	ba 01 00 00 00       	mov    edx,0x1
c0013ce9:	eb 0b                	jmp    c0013cf6 <Reg::readInt(char*, char*, int*)+0x4e>
c0013ceb:	ba 01 00 00 00       	mov    edx,0x1
c0013cf0:	eb 02                	jmp    c0013cf4 <Reg::readInt(char*, char*, int*)+0x4c>
c0013cf2:	31 d2                	xor    edx,edx
c0013cf4:	31 c0                	xor    eax,eax
c0013cf6:	be 0a 00 00 00       	mov    esi,0xa
c0013cfb:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013d00:	75 21                	jne    c0013d23 <Reg::readInt(char*, char*, int*)+0x7b>
c0013d02:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013d07:	83 f9 78             	cmp    ecx,0x78
c0013d0a:	75 0a                	jne    c0013d16 <Reg::readInt(char*, char*, int*)+0x6e>
c0013d0c:	83 c2 02             	add    edx,0x2
c0013d0f:	be 10 00 00 00       	mov    esi,0x10
c0013d14:	eb 0d                	jmp    c0013d23 <Reg::readInt(char*, char*, int*)+0x7b>
c0013d16:	83 f9 62             	cmp    ecx,0x62
c0013d19:	75 08                	jne    c0013d23 <Reg::readInt(char*, char*, int*)+0x7b>
c0013d1b:	83 c2 02             	add    edx,0x2
c0013d1e:	be 02 00 00 00       	mov    esi,0x2
c0013d23:	01 d5                	add    ebp,edx
c0013d25:	31 d2                	xor    edx,edx
c0013d27:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013d2b:	83 f9 0d             	cmp    ecx,0xd
c0013d2e:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d32:	0f 94 c3             	sete   bl
c0013d35:	85 c9                	test   ecx,ecx
c0013d37:	89 df                	mov    edi,ebx
c0013d39:	0f 94 c3             	sete   bl
c0013d3c:	09 df                	or     edi,ebx
c0013d3e:	89 fb                	mov    ebx,edi
c0013d40:	83 e7 01             	and    edi,0x1
c0013d43:	75 35                	jne    c0013d7a <Reg::readInt(char*, char*, int*)+0xd2>
c0013d45:	0f af d6             	imul   edx,esi
c0013d48:	83 fe 10             	cmp    esi,0x10
c0013d4b:	75 26                	jne    c0013d73 <Reg::readInt(char*, char*, int*)+0xcb>
c0013d4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013d51:	83 ef 41             	sub    edi,0x41
c0013d54:	89 fb                	mov    ebx,edi
c0013d56:	80 fb 05             	cmp    bl,0x5
c0013d59:	77 06                	ja     c0013d61 <Reg::readInt(char*, char*, int*)+0xb9>
c0013d5b:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013d5f:	eb 16                	jmp    c0013d77 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d61:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013d65:	83 eb 61             	sub    ebx,0x61
c0013d68:	80 fb 05             	cmp    bl,0x5
c0013d6b:	77 06                	ja     c0013d73 <Reg::readInt(char*, char*, int*)+0xcb>
c0013d6d:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013d71:	eb 04                	jmp    c0013d77 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d73:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013d77:	45                   	inc    ebp
c0013d78:	eb ad                	jmp    c0013d27 <Reg::readInt(char*, char*, int*)+0x7f>
c0013d7a:	84 c0                	test   al,al
c0013d7c:	74 02                	je     c0013d80 <Reg::readInt(char*, char*, int*)+0xd8>
c0013d7e:	f7 da                	neg    edx
c0013d80:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013d87:	89 10                	mov    DWORD PTR [eax],edx
c0013d89:	88 d8                	mov    al,bl
c0013d8b:	81 c4 ec 00 00 00    	add    esp,0xec
c0013d91:	5b                   	pop    ebx
c0013d92:	5e                   	pop    esi
c0013d93:	5f                   	pop    edi
c0013d94:	5d                   	pop    ebp
c0013d95:	c3                   	ret    

c0013d96 <Reg::readString(char*, char*, char*, int)>:
c0013d96:	57                   	push   edi
c0013d97:	56                   	push   esi
c0013d98:	53                   	push   ebx
c0013d99:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013d9f:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013da6:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013daa:	57                   	push   edi
c0013dab:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013db2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013db9:	e8 b3 fe ff ff       	call   c0013c71 <Reg::getLine(char*, char*, char*)>
c0013dbe:	83 c4 10             	add    esp,0x10
c0013dc1:	89 c6                	mov    esi,eax
c0013dc3:	84 c0                	test   al,al
c0013dc5:	74 44                	je     c0013e0b <Reg::readString(char*, char*, char*, int)+0x75>
c0013dc7:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013dce:	31 c0                	xor    eax,eax
c0013dd0:	4a                   	dec    edx
c0013dd1:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013dd4:	84 c9                	test   cl,cl
c0013dd6:	74 0f                	je     c0013de7 <Reg::readString(char*, char*, char*, int)+0x51>
c0013dd8:	39 c2                	cmp    edx,eax
c0013dda:	7e 0b                	jle    c0013de7 <Reg::readString(char*, char*, char*, int)+0x51>
c0013ddc:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013ddf:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013de4:	40                   	inc    eax
c0013de5:	eb ea                	jmp    c0013dd1 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013de7:	83 ec 0c             	sub    esp,0xc
c0013dea:	53                   	push   ebx
c0013deb:	e8 80 c7 fe ff       	call   c0000570 <strlen>
c0013df0:	83 c4 10             	add    esp,0x10
c0013df3:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013df8:	75 11                	jne    c0013e0b <Reg::readString(char*, char*, char*, int)+0x75>
c0013dfa:	83 ec 0c             	sub    esp,0xc
c0013dfd:	53                   	push   ebx
c0013dfe:	e8 6d c7 fe ff       	call   c0000570 <strlen>
c0013e03:	83 c4 10             	add    esp,0x10
c0013e06:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013e0b:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013e11:	89 f0                	mov    eax,esi
c0013e13:	5b                   	pop    ebx
c0013e14:	5e                   	pop    esi
c0013e15:	5f                   	pop    edi
c0013e16:	c3                   	ret    

c0013e17 <Reg::readBool(char*, char*, bool*)>:
c0013e17:	83 ec 20             	sub    esp,0x20
c0013e1a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e1e:	50                   	push   eax
c0013e1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e27:	e8 7c fe ff ff       	call   c0013ca8 <Reg::readInt(char*, char*, int*)>
c0013e2c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013e31:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013e35:	0f 95 02             	setne  BYTE PTR [edx]
c0013e38:	83 c4 2c             	add    esp,0x2c
c0013e3b:	c3                   	ret    

c0013e3c <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013e3c:	53                   	push   ebx
c0013e3d:	83 ec 1c             	sub    esp,0x1c
c0013e40:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013e44:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013e48:	50                   	push   eax
c0013e49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e51:	e8 c1 ff ff ff       	call   c0013e17 <Reg::readBool(char*, char*, bool*)>
c0013e56:	83 c4 10             	add    esp,0x10
c0013e59:	84 c0                	test   al,al
c0013e5b:	74 04                	je     c0013e61 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013e5d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013e61:	88 d8                	mov    al,bl
c0013e63:	83 c4 18             	add    esp,0x18
c0013e66:	5b                   	pop    ebx
c0013e67:	c3                   	ret    

c0013e68 <Reg::readIntWithDefault(char*, char*, int)>:
c0013e68:	53                   	push   ebx
c0013e69:	83 ec 1c             	sub    esp,0x1c
c0013e6c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013e70:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e74:	50                   	push   eax
c0013e75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e7d:	e8 26 fe ff ff       	call   c0013ca8 <Reg::readInt(char*, char*, int*)>
c0013e82:	83 c4 10             	add    esp,0x10
c0013e85:	84 c0                	test   al,al
c0013e87:	74 04                	je     c0013e8d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013e89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013e8d:	89 d8                	mov    eax,ebx
c0013e8f:	83 c4 18             	add    esp,0x18
c0013e92:	5b                   	pop    ebx
c0013e93:	c3                   	ret    

c0013e94 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013e94:	57                   	push   edi
c0013e95:	56                   	push   esi
c0013e96:	56                   	push   esi
c0013e97:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e9b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013e9f:	56                   	push   esi
c0013ea0:	57                   	push   edi
c0013ea1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ea5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ea9:	e8 e8 fe ff ff       	call   c0013d96 <Reg::readString(char*, char*, char*, int)>
c0013eae:	83 c4 10             	add    esp,0x10
c0013eb1:	84 c0                	test   al,al
c0013eb3:	75 1a                	jne    c0013ecf <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013eb5:	51                   	push   ecx
c0013eb6:	56                   	push   esi
c0013eb7:	6a 00                	push   0x0
c0013eb9:	57                   	push   edi
c0013eba:	e8 31 c6 fe ff       	call   c00004f0 <memset>
c0013ebf:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013ec2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013ec6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ec8:	83 c4 10             	add    esp,0x10
c0013ecb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013ecf:	89 f8                	mov    eax,edi
c0013ed1:	5a                   	pop    edx
c0013ed2:	5e                   	pop    esi
c0013ed3:	5f                   	pop    edi
c0013ed4:	c3                   	ret    

c0013ed5 <SysEject(regs*)>:
c0013ed5:	83 ec 0c             	sub    esp,0xc
c0013ed8:	83 ca ff             	or     edx,0xffffffff
c0013edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013edf:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013ee2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013ee7:	83 e9 41             	sub    ecx,0x41
c0013eea:	83 f9 19             	cmp    ecx,0x19
c0013eed:	77 18                	ja     c0013f07 <SysEject(regs*)+0x32>
c0013eef:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013ef6:	85 c9                	test   ecx,ecx
c0013ef8:	74 0d                	je     c0013f07 <SysEject(regs*)+0x32>
c0013efa:	83 ec 0c             	sub    esp,0xc
c0013efd:	51                   	push   ecx
c0013efe:	e8 3b 9e ff ff       	call   c000dd3e <LogicalDisk::eject()>
c0013f03:	83 c4 10             	add    esp,0x10
c0013f06:	99                   	cdq    
c0013f07:	83 c4 0c             	add    esp,0xc
c0013f0a:	c3                   	ret    

c0013f0b <SysExit(regs*)>:
c0013f0b:	83 ec 18             	sub    esp,0x18
c0013f0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f12:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f15:	e8 8a 2b 00 00       	call   c0016aa4 <terminateTask(int)>
c0013f1a:	83 c8 ff             	or     eax,0xffffffff
c0013f1d:	83 c4 1c             	add    esp,0x1c
c0013f20:	89 c2                	mov    edx,eax
c0013f22:	c3                   	ret    

c0013f23 <SysGetCwd(regs*)>:
c0013f23:	83 ec 10             	sub    esp,0x10
c0013f26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f2a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013f2d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f35:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f38:	e8 c3 78 ff ff       	call   c000b800 <Fs::getcwd(Process*, char*, int)>
c0013f3d:	83 c4 1c             	add    esp,0x1c
c0013f40:	99                   	cdq    
c0013f41:	c3                   	ret    

c0013f42 <SysGetPID(regs*)>:
c0013f42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f47:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f4c:	99                   	cdq    
c0013f4d:	c3                   	ret    

c0013f4e <SysGetRAMData(regs*)>:
c0013f4e:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013f54:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013f5e:	99                   	cdq    
c0013f5f:	f7 f9                	idiv   ecx
c0013f61:	c1 e0 18             	shl    eax,0x18
c0013f64:	09 c8                	or     eax,ecx
c0013f66:	99                   	cdq    
c0013f67:	c3                   	ret    

c0013f68 <SysGetVGAPtr(regs*)>:
c0013f68:	55                   	push   ebp
c0013f69:	57                   	push   edi
c0013f6a:	56                   	push   esi
c0013f6b:	53                   	push   ebx
c0013f6c:	83 ec 18             	sub    esp,0x18
c0013f6f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013f73:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f76:	e8 f5 25 00 00       	call   c0016570 <Thr::processFromPID(int)>
c0013f7b:	83 c4 10             	add    esp,0x10
c0013f7e:	89 c1                	mov    ecx,eax
c0013f80:	b8 01 00 00 00       	mov    eax,0x1
c0013f85:	85 c9                	test   ecx,ecx
c0013f87:	74 57                	je     c0013fe0 <SysGetVGAPtr(regs*)+0x78>
c0013f89:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013f8f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013f93:	74 0c                	je     c0013fa1 <SysGetVGAPtr(regs*)+0x39>
c0013f95:	83 ec 0c             	sub    esp,0xc
c0013f98:	55                   	push   ebp
c0013f99:	e8 bb 47 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013f9e:	83 c4 10             	add    esp,0x10
c0013fa1:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013fa4:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013fa7:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013fac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fae:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013fb1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fb4:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013fba:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fbd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013fc0:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013fc6:	50                   	push   eax
c0013fc7:	50                   	push   eax
c0013fc8:	68 50 26 02 c0       	push   0xc0022650
c0013fcd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fd0:	05 a8 0f 00 00       	add    eax,0xfa8
c0013fd5:	50                   	push   eax
c0013fd6:	e8 65 c6 fe ff       	call   c0000640 <strcpy>
c0013fdb:	83 c4 10             	add    esp,0x10
c0013fde:	31 c0                	xor    eax,eax
c0013fe0:	83 c4 0c             	add    esp,0xc
c0013fe3:	31 d2                	xor    edx,edx
c0013fe5:	5b                   	pop    ebx
c0013fe6:	5e                   	pop    esi
c0013fe7:	5f                   	pop    edi
c0013fe8:	5d                   	pop    ebp
c0013fe9:	c3                   	ret    
c0013fea:	66 90                	xchg   ax,ax

c0013fec <SysKill(regs*)>:
c0013fec:	53                   	push   ebx
c0013fed:	83 ec 08             	sub    esp,0x8
c0013ff0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ff4:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013ff8:	75 16                	jne    c0014010 <SysKill(regs*)+0x24>
c0013ffa:	83 ec 0c             	sub    esp,0xc
c0013ffd:	68 5a 26 02 c0       	push   0xc002265a
c0014002:	e8 18 d6 ff ff       	call   c001161f <KePanic(char const*)>
c0014007:	83 c4 10             	add    esp,0x10
c001400a:	e9 89 00 00 00       	jmp    c0014098 <SysKill(regs*)+0xac>
c001400f:	90                   	nop
c0014010:	83 ec 0c             	sub    esp,0xc
c0014013:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014018:	e8 4f bd 00 00       	call   c001fd6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001401d:	8d 76 00             	lea    esi,[esi+0x0]
c0014020:	83 c4 10             	add    esp,0x10
c0014023:	85 c0                	test   eax,eax
c0014025:	74 19                	je     c0014040 <SysKill(regs*)+0x54>
c0014027:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001402a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001402d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001402f:	74 33                	je     c0014064 <SysKill(regs*)+0x78>
c0014031:	52                   	push   edx
c0014032:	52                   	push   edx
c0014033:	50                   	push   eax
c0014034:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014039:	e8 4e c0 00 00       	call   c002008c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001403e:	eb e0                	jmp    c0014020 <SysKill(regs*)+0x34>
c0014040:	83 ec 0c             	sub    esp,0xc
c0014043:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014048:	e8 1f bd 00 00       	call   c001fd6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001404d:	8d 76 00             	lea    esi,[esi+0x0]
c0014050:	83 c4 10             	add    esp,0x10
c0014053:	85 c0                	test   eax,eax
c0014055:	74 41                	je     c0014098 <SysKill(regs*)+0xac>
c0014057:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001405a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001405d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001405f:	75 27                	jne    c0014088 <SysKill(regs*)+0x9c>
c0014061:	8d 76 00             	lea    esi,[esi+0x0]
c0014064:	51                   	push   ecx
c0014065:	51                   	push   ecx
c0014066:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014069:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001406e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014071:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014077:	e8 46 da ff ff       	call   c0011ac2 <KeRaiseSignal(SigHandlerBlock*, int)>
c001407c:	83 c4 10             	add    esp,0x10
c001407f:	31 c0                	xor    eax,eax
c0014081:	31 d2                	xor    edx,edx
c0014083:	eb 1b                	jmp    c00140a0 <SysKill(regs*)+0xb4>
c0014085:	8d 76 00             	lea    esi,[esi+0x0]
c0014088:	52                   	push   edx
c0014089:	52                   	push   edx
c001408a:	50                   	push   eax
c001408b:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014090:	e8 f7 bf 00 00       	call   c002008c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014095:	eb b9                	jmp    c0014050 <SysKill(regs*)+0x64>
c0014097:	90                   	nop
c0014098:	83 c8 ff             	or     eax,0xffffffff
c001409b:	89 c2                	mov    edx,eax
c001409d:	8d 76 00             	lea    esi,[esi+0x0]
c00140a0:	83 c4 08             	add    esp,0x8
c00140a3:	5b                   	pop    ebx
c00140a4:	c3                   	ret    

c00140a5 <SysLoadDLL(regs*)>:
c00140a5:	56                   	push   esi
c00140a6:	53                   	push   ebx
c00140a7:	31 d2                	xor    edx,edx
c00140a9:	51                   	push   ecx
c00140aa:	b8 01 00 00 00       	mov    eax,0x1
c00140af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140b3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00140b7:	0f 84 8c 00 00 00    	je     c0014149 <SysLoadDLL(regs*)+0xa4>
c00140bd:	83 ec 0c             	sub    esp,0xc
c00140c0:	68 14 01 00 00       	push   0x114
c00140c5:	e8 ec 39 ff ff       	call   c0007ab6 <malloc>
c00140ca:	83 c4 0c             	add    esp,0xc
c00140cd:	89 c3                	mov    ebx,eax
c00140cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140d4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00140d7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00140da:	53                   	push   ebx
c00140db:	e8 6c 7a ff ff       	call   c000bb4c <File::File(char const*, Process*)>
c00140e0:	83 c4 10             	add    esp,0x10
c00140e3:	31 d2                	xor    edx,edx
c00140e5:	b8 02 00 00 00       	mov    eax,0x2
c00140ea:	85 db                	test   ebx,ebx
c00140ec:	74 5b                	je     c0014149 <SysLoadDLL(regs*)+0xa4>
c00140ee:	83 ec 0c             	sub    esp,0xc
c00140f1:	53                   	push   ebx
c00140f2:	e8 37 7d ff ff       	call   c000be2e <File::exists()>
c00140f7:	83 c4 10             	add    esp,0x10
c00140fa:	84 c0                	test   al,al
c00140fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140fe:	75 11                	jne    c0014111 <SysLoadDLL(regs*)+0x6c>
c0014100:	83 ec 0c             	sub    esp,0xc
c0014103:	53                   	push   ebx
c0014104:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014107:	83 c4 10             	add    esp,0x10
c001410a:	b8 03 00 00 00       	mov    eax,0x3
c001410f:	eb 36                	jmp    c0014147 <SysLoadDLL(regs*)+0xa2>
c0014111:	83 ec 0c             	sub    esp,0xc
c0014114:	53                   	push   ebx
c0014115:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014118:	58                   	pop    eax
c0014119:	5a                   	pop    edx
c001411a:	6a 00                	push   0x0
c001411c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001411f:	e8 81 15 00 00       	call   c00156a5 <Thr::loadDLL(char const*, bool)>
c0014124:	83 c4 10             	add    esp,0x10
c0014127:	89 c1                	mov    ecx,eax
c0014129:	31 d2                	xor    edx,edx
c001412b:	b8 04 00 00 00       	mov    eax,0x4
c0014130:	85 c9                	test   ecx,ecx
c0014132:	74 15                	je     c0014149 <SysLoadDLL(regs*)+0xa4>
c0014134:	53                   	push   ebx
c0014135:	53                   	push   ebx
c0014136:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001413c:	51                   	push   ecx
c001413d:	e8 94 17 00 00       	call   c00158d6 <Thr::executeDLL(unsigned long, void*)>
c0014142:	83 c4 10             	add    esp,0x10
c0014145:	31 c0                	xor    eax,eax
c0014147:	31 d2                	xor    edx,edx
c0014149:	59                   	pop    ecx
c001414a:	5b                   	pop    ebx
c001414b:	5e                   	pop    esi
c001414c:	c3                   	ret    

c001414d <SysRead(regs*)>:
c001414d:	57                   	push   edi
c001414e:	56                   	push   esi
c001414f:	53                   	push   ebx
c0014150:	83 ec 10             	sub    esp,0x10
c0014153:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014157:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001415a:	83 f8 02             	cmp    eax,0x2
c001415d:	77 10                	ja     c001416f <SysRead(regs*)+0x22>
c001415f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014164:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014167:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001416d:	eb 0e                	jmp    c001417d <SysRead(regs*)+0x30>
c001416f:	83 ec 0c             	sub    esp,0xc
c0014172:	50                   	push   eax
c0014173:	e8 3b 53 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014178:	83 c4 10             	add    esp,0x10
c001417b:	89 c1                	mov    ecx,eax
c001417d:	83 c8 ff             	or     eax,0xffffffff
c0014180:	85 c9                	test   ecx,ecx
c0014182:	89 c2                	mov    edx,eax
c0014184:	74 28                	je     c00141ae <SysRead(regs*)+0x61>
c0014186:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001418e:	31 ff                	xor    edi,edi
c0014190:	83 ec 0c             	sub    esp,0xc
c0014193:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014195:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014199:	52                   	push   edx
c001419a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001419d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00141a0:	57                   	push   edi
c00141a1:	56                   	push   esi
c00141a2:	51                   	push   ecx
c00141a3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00141a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00141aa:	83 c4 20             	add    esp,0x20
c00141ad:	99                   	cdq    
c00141ae:	83 c4 10             	add    esp,0x10
c00141b1:	5b                   	pop    ebx
c00141b2:	5e                   	pop    esi
c00141b3:	5f                   	pop    edi
c00141b4:	c3                   	ret    

c00141b5 <SysRegisterSignal(regs*)>:
c00141b5:	83 ec 18             	sub    esp,0x18
c00141b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141bc:	6a 00                	push   0x0
c00141be:	6a 00                	push   0x0
c00141c0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00141c3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00141c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141ce:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00141d4:	e8 b3 d8 ff ff       	call   c0011a8c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00141d9:	83 c4 2c             	add    esp,0x2c
c00141dc:	99                   	cdq    
c00141dd:	c3                   	ret    

c00141de <SysRegistryGetTypeFromPath(regs*)>:
c00141de:	57                   	push   edi
c00141df:	56                   	push   esi
c00141e0:	53                   	push   ebx
c00141e1:	81 ec 38 01 00 00    	sub    esp,0x138
c00141e7:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00141ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141f1:	68 7b 26 02 c0       	push   0xc002267b
c00141f6:	e8 4a 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00141fb:	5a                   	pop    edx
c00141fc:	59                   	pop    ecx
c00141fd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014200:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014203:	e8 4d f6 ff ff       	call   c0013855 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014208:	5f                   	pop    edi
c0014209:	89 c6                	mov    esi,eax
c001420b:	5a                   	pop    edx
c001420c:	50                   	push   eax
c001420d:	68 9b 26 02 c0       	push   0xc002269b
c0014212:	e8 2e 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014217:	83 c4 10             	add    esp,0x10
c001421a:	85 f6                	test   esi,esi
c001421c:	74 28                	je     c0014246 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001421e:	50                   	push   eax
c001421f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014223:	57                   	push   edi
c0014224:	56                   	push   esi
c0014225:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014228:	e8 0c f2 ff ff       	call   c0013439 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001422d:	83 c4 0c             	add    esp,0xc
c0014230:	89 c3                	mov    ebx,eax
c0014232:	57                   	push   edi
c0014233:	50                   	push   eax
c0014234:	68 a3 26 02 c0       	push   0xc00226a3
c0014239:	e8 07 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001423e:	89 d8                	mov    eax,ebx
c0014240:	83 c4 10             	add    esp,0x10
c0014243:	99                   	cdq    
c0014244:	eb 05                	jmp    c001424b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0014246:	83 c8 ff             	or     eax,0xffffffff
c0014249:	89 c2                	mov    edx,eax
c001424b:	81 c4 30 01 00 00    	add    esp,0x130
c0014251:	5b                   	pop    ebx
c0014252:	5e                   	pop    esi
c0014253:	5f                   	pop    edi
c0014254:	c3                   	ret    

c0014255 <SysRegistryReadExtent(regs*)>:
c0014255:	83 ec 1c             	sub    esp,0x1c
c0014258:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001425c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001425f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014262:	85 c0                	test   eax,eax
c0014264:	79 1f                	jns    c0014285 <SysRegistryReadExtent(regs*)+0x30>
c0014266:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001426b:	52                   	push   edx
c001426c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014270:	52                   	push   edx
c0014271:	50                   	push   eax
c0014272:	51                   	push   ecx
c0014273:	e8 b3 f0 ff ff       	call   c001332b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014278:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001427c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014280:	83 c4 10             	add    esp,0x10
c0014283:	eb 14                	jmp    c0014299 <SysRegistryReadExtent(regs*)+0x44>
c0014285:	83 ec 04             	sub    esp,0x4
c0014288:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001428b:	50                   	push   eax
c001428c:	51                   	push   ecx
c001428d:	e8 33 eb ff ff       	call   c0012dc5 <CmGetString(Reghive_Tag*, int, char*)>
c0014292:	83 c4 10             	add    esp,0x10
c0014295:	31 c0                	xor    eax,eax
c0014297:	31 d2                	xor    edx,edx
c0014299:	83 c4 1c             	add    esp,0x1c
c001429c:	c3                   	ret    

c001429d <SysRegistryPathToExtentLookup(regs*)>:
c001429d:	53                   	push   ebx
c001429e:	83 ec 10             	sub    esp,0x10
c00142a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142a8:	68 b9 26 02 c0       	push   0xc00226b9
c00142ad:	e8 93 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00142b2:	58                   	pop    eax
c00142b3:	5a                   	pop    edx
c00142b4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142b7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142ba:	e8 96 f5 ff ff       	call   c0013855 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00142bf:	83 c4 18             	add    esp,0x18
c00142c2:	99                   	cdq    
c00142c3:	5b                   	pop    ebx
c00142c4:	c3                   	ret    

c00142c5 <SysRegistryEnterDirectory(regs*)>:
c00142c5:	53                   	push   ebx
c00142c6:	83 ec 10             	sub    esp,0x10
c00142c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142cd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142d0:	68 dc 26 02 c0       	push   0xc00226dc
c00142d5:	e8 6b 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00142da:	58                   	pop    eax
c00142db:	5a                   	pop    edx
c00142dc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142df:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142e2:	e8 55 eb ff ff       	call   c0012e3c <CmEnterDirectory(Reghive_Tag*, int)>
c00142e7:	83 c4 18             	add    esp,0x18
c00142ea:	99                   	cdq    
c00142eb:	5b                   	pop    ebx
c00142ec:	c3                   	ret    

c00142ed <SysRegistryGetNext(regs*)>:
c00142ed:	53                   	push   ebx
c00142ee:	83 ec 10             	sub    esp,0x10
c00142f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142f5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142f8:	68 fa 26 02 c0       	push   0xc00226fa
c00142fd:	e8 43 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014302:	58                   	pop    eax
c0014303:	5a                   	pop    edx
c0014304:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014307:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001430a:	e8 6c eb ff ff       	call   c0012e7b <CmGetNext(Reghive_Tag*, int)>
c001430f:	83 c4 18             	add    esp,0x18
c0014312:	99                   	cdq    
c0014313:	5b                   	pop    ebx
c0014314:	c3                   	ret    

c0014315 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014315:	57                   	push   edi
c0014316:	56                   	push   esi
c0014317:	53                   	push   ebx
c0014318:	81 ec 34 01 00 00    	sub    esp,0x134
c001431e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014325:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014329:	57                   	push   edi
c001432a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001432d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014330:	e8 04 f1 ff ff       	call   c0013439 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014335:	89 c3                	mov    ebx,eax
c0014337:	58                   	pop    eax
c0014338:	5a                   	pop    edx
c0014339:	57                   	push   edi
c001433a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001433d:	e8 fe c2 fe ff       	call   c0000640 <strcpy>
c0014342:	89 d8                	mov    eax,ebx
c0014344:	81 c4 40 01 00 00    	add    esp,0x140
c001434a:	99                   	cdq    
c001434b:	5b                   	pop    ebx
c001434c:	5e                   	pop    esi
c001434d:	5f                   	pop    edi
c001434e:	c3                   	ret    

c001434f <SysRegistryOpen(regs*)>:
c001434f:	83 ec 18             	sub    esp,0x18
c0014352:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014356:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014359:	e8 f7 e8 ff ff       	call   c0012c55 <CmOpen(char const*)>
c001435e:	83 c4 1c             	add    esp,0x1c
c0014361:	99                   	cdq    
c0014362:	c3                   	ret    

c0014363 <SysRegistryClose(regs*)>:
c0014363:	83 ec 18             	sub    esp,0x18
c0014366:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001436a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001436d:	e8 01 ea ff ff       	call   c0012d73 <CmClose(Reghive_Tag*)>
c0014372:	31 c0                	xor    eax,eax
c0014374:	31 d2                	xor    edx,edx
c0014376:	83 c4 1c             	add    esp,0x1c
c0014379:	c3                   	ret    

c001437a <SysSbrk(regs*)>:
c001437a:	56                   	push   esi
c001437b:	53                   	push   ebx
c001437c:	50                   	push   eax
c001437d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014382:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014386:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014389:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001438c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0014392:	85 db                	test   ebx,ebx
c0014394:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014397:	74 02                	je     c001439b <SysSbrk(regs*)+0x21>
c0014399:	79 06                	jns    c00143a1 <SysSbrk(regs*)+0x27>
c001439b:	89 f0                	mov    eax,esi
c001439d:	31 d2                	xor    edx,edx
c001439f:	eb 2a                	jmp    c00143cb <SysSbrk(regs*)+0x51>
c00143a1:	83 c8 ff             	or     eax,0xffffffff
c00143a4:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00143aa:	89 c2                	mov    edx,eax
c00143ac:	77 1d                	ja     c00143cb <SysSbrk(regs*)+0x51>
c00143ae:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00143b4:	50                   	push   eax
c00143b5:	c1 ea 0c             	shr    edx,0xc
c00143b8:	68 07 0c 00 00       	push   0xc07
c00143bd:	52                   	push   edx
c00143be:	51                   	push   ecx
c00143bf:	e8 60 5a ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c00143c4:	89 f0                	mov    eax,esi
c00143c6:	31 d2                	xor    edx,edx
c00143c8:	83 c4 10             	add    esp,0x10
c00143cb:	59                   	pop    ecx
c00143cc:	5b                   	pop    ebx
c00143cd:	5e                   	pop    esi
c00143ce:	c3                   	ret    

c00143cf <SysSetCwd(regs*)>:
c00143cf:	83 ec 14             	sub    esp,0x14
c00143d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143d6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00143d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143de:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00143e1:	e8 e7 7a ff ff       	call   c000becd <Fs::setcwd(Process*, char*)>
c00143e6:	83 c4 1c             	add    esp,0x1c
c00143e9:	99                   	cdq    
c00143ea:	c3                   	ret    

c00143eb <SysSetTime(regs*)>:
c00143eb:	55                   	push   ebp
c00143ec:	31 c9                	xor    ecx,ecx
c00143ee:	57                   	push   edi
c00143ef:	bd 0c 00 00 00       	mov    ebp,0xc
c00143f4:	56                   	push   esi
c00143f5:	53                   	push   ebx
c00143f6:	31 db                	xor    ebx,ebx
c00143f8:	83 ec 10             	sub    esp,0x10
c00143fb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00143ff:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0014402:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014405:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014408:	89 c2                	mov    edx,eax
c001440a:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0014410:	83 e2 1f             	and    edx,0x1f
c0014413:	c1 e7 10             	shl    edi,0x10
c0014416:	42                   	inc    edx
c0014417:	c1 e8 05             	shr    eax,0x5
c001441a:	88 d1                	mov    cl,dl
c001441c:	31 d2                	xor    edx,edx
c001441e:	f7 f5                	div    ebp
c0014420:	89 dd                	mov    ebp,ebx
c0014422:	88 d5                	mov    ch,dl
c0014424:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001442a:	0f b7 c1             	movzx  eax,cx
c001442d:	31 d2                	xor    edx,edx
c001442f:	09 f8                	or     eax,edi
c0014431:	bf 3c 00 00 00       	mov    edi,0x3c
c0014436:	89 c1                	mov    ecx,eax
c0014438:	89 f0                	mov    eax,esi
c001443a:	f7 f7                	div    edi
c001443c:	c1 e2 10             	shl    edx,0x10
c001443f:	09 d5                	or     ebp,edx
c0014441:	31 d2                	xor    edx,edx
c0014443:	89 eb                	mov    ebx,ebp
c0014445:	f7 f7                	div    edi
c0014447:	bf 10 0e 00 00       	mov    edi,0xe10
c001444c:	88 d7                	mov    bh,dl
c001444e:	89 f0                	mov    eax,esi
c0014450:	31 d2                	xor    edx,edx
c0014452:	f7 f7                	div    edi
c0014454:	bf 18 00 00 00       	mov    edi,0x18
c0014459:	31 d2                	xor    edx,edx
c001445b:	f7 f7                	div    edi
c001445d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0014462:	88 d3                	mov    bl,dl
c0014464:	53                   	push   ebx
c0014465:	51                   	push   ecx
c0014466:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001446c:	e8 69 82 ff ff       	call   c000c6da <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014471:	83 c4 1c             	add    esp,0x1c
c0014474:	83 f0 01             	xor    eax,0x1
c0014477:	5b                   	pop    ebx
c0014478:	0f b6 c0             	movzx  eax,al
c001447b:	5e                   	pop    esi
c001447c:	31 d2                	xor    edx,edx
c001447e:	5f                   	pop    edi
c001447f:	5d                   	pop    ebp
c0014480:	c3                   	ret    

c0014481 <SysSymlink(regs*)>:
c0014481:	56                   	push   esi
c0014482:	83 c8 ff             	or     eax,0xffffffff
c0014485:	53                   	push   ebx
c0014486:	89 c2                	mov    edx,eax
c0014488:	81 ec 34 02 00 00    	sub    esp,0x234
c001448e:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014495:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014499:	74 50                	je     c00144eb <SysSymlink(regs*)+0x6a>
c001449b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001449e:	85 c9                	test   ecx,ecx
c00144a0:	74 49                	je     c00144eb <SysSymlink(regs*)+0x6a>
c00144a2:	6a 01                	push   0x1
c00144a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144a9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144ac:	05 0c 01 00 00       	add    eax,0x10c
c00144b1:	50                   	push   eax
c00144b2:	51                   	push   ecx
c00144b3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00144b7:	56                   	push   esi
c00144b8:	e8 97 73 ff ff       	call   c000b854 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00144bd:	6a 01                	push   0x1
c00144bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144c7:	05 0c 01 00 00       	add    eax,0x10c
c00144cc:	50                   	push   eax
c00144cd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00144d0:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00144d7:	53                   	push   ebx
c00144d8:	e8 77 73 ff ff       	call   c000b854 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00144dd:	83 c4 18             	add    esp,0x18
c00144e0:	56                   	push   esi
c00144e1:	53                   	push   ebx
c00144e2:	e8 7c 6f ff ff       	call   c000b463 <KeCreateSymlink(char const*, char const*)>
c00144e7:	83 c4 10             	add    esp,0x10
c00144ea:	99                   	cdq    
c00144eb:	81 c4 34 02 00 00    	add    esp,0x234
c00144f1:	5b                   	pop    ebx
c00144f2:	5e                   	pop    esi
c00144f3:	c3                   	ret    

c00144f4 <SysTimezone(regs*)>:
c00144f4:	53                   	push   ebx
c00144f5:	83 ec 08             	sub    esp,0x8
c00144f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144fc:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014500:	75 17                	jne    c0014519 <SysTimezone(regs*)+0x25>
c0014502:	83 ec 0c             	sub    esp,0xc
c0014505:	68 11 27 02 c0       	push   0xc0022711
c001450a:	e8 36 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001450f:	83 c8 ff             	or     eax,0xffffffff
c0014512:	83 c4 10             	add    esp,0x10
c0014515:	89 c2                	mov    edx,eax
c0014517:	eb 20                	jmp    c0014539 <SysTimezone(regs*)+0x45>
c0014519:	83 ec 0c             	sub    esp,0xc
c001451c:	68 26 27 02 c0       	push   0xc0022726
c0014521:	e8 1f 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014526:	58                   	pop    eax
c0014527:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001452a:	e8 15 7f ff ff       	call   c000c444 <User::loadClockSettings(int)>
c001452f:	83 c4 10             	add    esp,0x10
c0014532:	b8 01 00 00 00       	mov    eax,0x1
c0014537:	31 d2                	xor    edx,edx
c0014539:	83 c4 08             	add    esp,0x8
c001453c:	5b                   	pop    ebx
c001453d:	c3                   	ret    

c001453e <SysTruncate(regs*)>:
c001453e:	55                   	push   ebp
c001453f:	57                   	push   edi
c0014540:	31 ff                	xor    edi,edi
c0014542:	56                   	push   esi
c0014543:	53                   	push   ebx
c0014544:	83 ec 0c             	sub    esp,0xc
c0014547:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001454b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001454e:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014551:	89 ce                	mov    esi,ecx
c0014553:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014557:	0f 84 9a 00 00 00    	je     c00145f7 <SysTruncate(regs*)+0xb9>
c001455d:	83 ec 0c             	sub    esp,0xc
c0014560:	68 14 01 00 00       	push   0x114
c0014565:	e8 4c 35 ff ff       	call   c0007ab6 <malloc>
c001456a:	83 c4 0c             	add    esp,0xc
c001456d:	89 c3                	mov    ebx,eax
c001456f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014574:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014577:	55                   	push   ebp
c0014578:	53                   	push   ebx
c0014579:	e8 ce 75 ff ff       	call   c000bb4c <File::File(char const*, Process*)>
c001457e:	83 c4 10             	add    esp,0x10
c0014581:	31 d2                	xor    edx,edx
c0014583:	b8 03 00 00 00       	mov    eax,0x3
c0014588:	85 db                	test   ebx,ebx
c001458a:	0f 84 a2 00 00 00    	je     c0014632 <SysTruncate(regs*)+0xf4>
c0014590:	51                   	push   ecx
c0014591:	51                   	push   ecx
c0014592:	6a 02                	push   0x2
c0014594:	53                   	push   ebx
c0014595:	e8 d0 75 ff ff       	call   c000bb6a <File::open(FileOpenMode)>
c001459a:	83 c4 10             	add    esp,0x10
c001459d:	85 c0                	test   eax,eax
c001459f:	74 13                	je     c00145b4 <SysTruncate(regs*)+0x76>
c00145a1:	83 ec 0c             	sub    esp,0xc
c00145a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145a6:	53                   	push   ebx
c00145a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145aa:	83 c4 10             	add    esp,0x10
c00145ad:	b8 04 00 00 00       	mov    eax,0x4
c00145b2:	eb 7c                	jmp    c0014630 <SysTruncate(regs*)+0xf2>
c00145b4:	52                   	push   edx
c00145b5:	57                   	push   edi
c00145b6:	56                   	push   esi
c00145b7:	53                   	push   ebx
c00145b8:	e8 c1 76 ff ff       	call   c000bc7e <File::truncate(unsigned long long)>
c00145bd:	83 c4 10             	add    esp,0x10
c00145c0:	85 c0                	test   eax,eax
c00145c2:	74 1b                	je     c00145df <SysTruncate(regs*)+0xa1>
c00145c4:	83 ec 0c             	sub    esp,0xc
c00145c7:	53                   	push   ebx
c00145c8:	e8 fb 75 ff ff       	call   c000bbc8 <File::close()>
c00145cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145d5:	83 c4 10             	add    esp,0x10
c00145d8:	b8 05 00 00 00       	mov    eax,0x5
c00145dd:	eb 51                	jmp    c0014630 <SysTruncate(regs*)+0xf2>
c00145df:	83 ec 0c             	sub    esp,0xc
c00145e2:	53                   	push   ebx
c00145e3:	e8 e0 75 ff ff       	call   c000bbc8 <File::close()>
c00145e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145ed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145f0:	83 c4 10             	add    esp,0x10
c00145f3:	31 c0                	xor    eax,eax
c00145f5:	eb 39                	jmp    c0014630 <SysTruncate(regs*)+0xf2>
c00145f7:	31 d2                	xor    edx,edx
c00145f9:	b8 01 00 00 00       	mov    eax,0x1
c00145fe:	83 fd 02             	cmp    ebp,0x2
c0014601:	7e 2f                	jle    c0014632 <SysTruncate(regs*)+0xf4>
c0014603:	83 ec 0c             	sub    esp,0xc
c0014606:	51                   	push   ecx
c0014607:	e8 a7 4e ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001460c:	83 c4 10             	add    esp,0x10
c001460f:	89 c1                	mov    ecx,eax
c0014611:	31 d2                	xor    edx,edx
c0014613:	b8 02 00 00 00       	mov    eax,0x2
c0014618:	85 c9                	test   ecx,ecx
c001461a:	74 16                	je     c0014632 <SysTruncate(regs*)+0xf4>
c001461c:	50                   	push   eax
c001461d:	57                   	push   edi
c001461e:	56                   	push   esi
c001461f:	51                   	push   ecx
c0014620:	e8 59 76 ff ff       	call   c000bc7e <File::truncate(unsigned long long)>
c0014625:	83 c4 10             	add    esp,0x10
c0014628:	85 c0                	test   eax,eax
c001462a:	0f 95 c0             	setne  al
c001462d:	0f b6 c0             	movzx  eax,al
c0014630:	31 d2                	xor    edx,edx
c0014632:	83 c4 0c             	add    esp,0xc
c0014635:	5b                   	pop    ebx
c0014636:	5e                   	pop    esi
c0014637:	5f                   	pop    edi
c0014638:	5d                   	pop    ebp
c0014639:	c3                   	ret    

c001463a <SysWrite(regs*)>:
c001463a:	57                   	push   edi
c001463b:	56                   	push   esi
c001463c:	53                   	push   ebx
c001463d:	83 ec 10             	sub    esp,0x10
c0014640:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014644:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014647:	83 f8 02             	cmp    eax,0x2
c001464a:	77 10                	ja     c001465c <SysWrite(regs*)+0x22>
c001464c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014651:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014654:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001465a:	eb 0e                	jmp    c001466a <SysWrite(regs*)+0x30>
c001465c:	83 ec 0c             	sub    esp,0xc
c001465f:	50                   	push   eax
c0014660:	e8 4e 4e ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014665:	83 c4 10             	add    esp,0x10
c0014668:	89 c1                	mov    ecx,eax
c001466a:	83 c8 ff             	or     eax,0xffffffff
c001466d:	85 c9                	test   ecx,ecx
c001466f:	89 c2                	mov    edx,eax
c0014671:	74 28                	je     c001469b <SysWrite(regs*)+0x61>
c0014673:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001467b:	31 ff                	xor    edi,edi
c001467d:	83 ec 0c             	sub    esp,0xc
c0014680:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014682:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014686:	52                   	push   edx
c0014687:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001468a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001468d:	57                   	push   edi
c001468e:	56                   	push   esi
c001468f:	51                   	push   ecx
c0014690:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014693:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014697:	83 c4 20             	add    esp,0x20
c001469a:	99                   	cdq    
c001469b:	83 c4 10             	add    esp,0x10
c001469e:	5b                   	pop    ebx
c001469f:	5e                   	pop    esi
c00146a0:	5f                   	pop    edi
c00146a1:	c3                   	ret    

c00146a2 <SysWsbe(regs*)>:
c00146a2:	57                   	push   edi
c00146a3:	b9 0b 00 00 00       	mov    ecx,0xb
c00146a8:	56                   	push   esi
c00146a9:	be 65 27 02 c0       	mov    esi,0xc0022765
c00146ae:	53                   	push   ebx
c00146af:	83 ec 30             	sub    esp,0x30
c00146b2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00146b6:	fc                   	cld    
c00146b7:	83 ec 0c             	sub    esp,0xc
c00146ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00146bc:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00146c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00146c8:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00146ce:	8b 06                	mov    eax,DWORD PTR [esi]
c00146d0:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00146d3:	57                   	push   edi
c00146d4:	e8 97 be fe ff       	call   c0000570 <strlen>
c00146d9:	5a                   	pop    edx
c00146da:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00146de:	52                   	push   edx
c00146df:	31 d2                	xor    edx,edx
c00146e1:	57                   	push   edi
c00146e2:	52                   	push   edx
c00146e3:	50                   	push   eax
c00146e4:	56                   	push   esi
c00146e5:	ff d3                	call   ebx
c00146e7:	83 c4 14             	add    esp,0x14
c00146ea:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00146ee:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00146f1:	e8 ae 23 00 00       	call   c0016aa4 <terminateTask(int)>
c00146f6:	83 c4 40             	add    esp,0x40
c00146f9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00146fe:	5b                   	pop    ebx
c00146ff:	31 d2                	xor    edx,edx
c0014701:	5e                   	pop    esi
c0014702:	5f                   	pop    edi
c0014703:	c3                   	ret    

c0014704 <SysYield(regs*)>:
c0014704:	83 ec 0c             	sub    esp,0xc
c0014707:	fa                   	cli    
c0014708:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001470e:	e8 f1 19 00 00       	call   c0016104 <schedule()>
c0014713:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014718:	48                   	dec    eax
c0014719:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001471e:	75 01                	jne    c0014721 <SysYield(regs*)+0x1d>
c0014720:	fb                   	sti    
c0014721:	31 c0                	xor    eax,eax
c0014723:	31 d2                	xor    edx,edx
c0014725:	83 c4 0c             	add    esp,0xc
c0014728:	c3                   	ret    

c0014729 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014729:	55                   	push   ebp
c001472a:	57                   	push   edi
c001472b:	56                   	push   esi
c001472c:	53                   	push   ebx
c001472d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014733:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001473b:	0f 95 c0             	setne  al
c001473e:	31 d2                	xor    edx,edx
c0014740:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014748:	0f 94 c2             	sete   dl
c001474b:	85 c2                	test   edx,eax
c001474d:	74 34                	je     c0014783 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c001474f:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001475a:	74 27                	je     c0014783 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c001475c:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014763:	05 00 10 00 00       	add    eax,0x1000
c0014768:	89 c1                	mov    ecx,eax
c001476a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001476f:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0014775:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001477c:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0014783:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001478a:	83 ec 0c             	sub    esp,0xc
c001478d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014793:	6a 01                	push   0x1
c0014795:	e8 73 4e ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001479a:	83 c4 10             	add    esp,0x10
c001479d:	89 c3                	mov    ebx,eax
c001479f:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00147a5:	0f 86 25 01 00 00    	jbe    c00148d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00147ab:	c1 ee 0c             	shr    esi,0xc
c00147ae:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00147b5:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00147b9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00147c1:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00147c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00147cc:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00147d3:	29 ef                	sub    edi,ebp
c00147d5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00147d9:	0f 83 f8 00 00 00    	jae    c00148d7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c00147df:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00147e5:	76 05                	jbe    c00147ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00147e7:	bf 00 10 00 00       	mov    edi,0x1000
c00147ec:	83 ec 0c             	sub    esp,0xc
c00147ef:	31 d2                	xor    edx,edx
c00147f1:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00147f8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00147fa:	8d 44 24 28          	lea    eax,[esp+0x28]
c00147fe:	50                   	push   eax
c00147ff:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014803:	56                   	push   esi
c0014804:	52                   	push   edx
c0014805:	57                   	push   edi
c0014806:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001480d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014810:	83 c4 20             	add    esp,0x20
c0014813:	85 c0                	test   eax,eax
c0014815:	75 06                	jne    c001481d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0014817:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001481b:	74 13                	je     c0014830 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c001481d:	83 ec 0c             	sub    esp,0xc
c0014820:	53                   	push   ebx
c0014821:	e8 05 51 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014826:	83 c4 10             	add    esp,0x10
c0014829:	31 c0                	xor    eax,eax
c001482b:	e9 7c 01 00 00       	jmp    c00149ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0014830:	fa                   	cli    
c0014831:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014837:	e8 83 35 ff ff       	call   c0007dbf <Phys::allocatePage()>
c001483c:	6a 07                	push   0x7
c001483e:	89 c7                	mov    edi,eax
c0014840:	53                   	push   ebx
c0014841:	50                   	push   eax
c0014842:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014847:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001484a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014850:	e8 cb 54 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014855:	83 c4 0c             	add    esp,0xc
c0014858:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001485f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014865:	6a 00                	push   0x0
c0014867:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001486c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001486f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014875:	e8 0c 53 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c001487a:	58                   	pop    eax
c001487b:	5a                   	pop    edx
c001487c:	68 07 0c 00 00       	push   0xc07
c0014881:	55                   	push   ebp
c0014882:	57                   	push   edi
c0014883:	89 df                	mov    edi,ebx
c0014885:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001488c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014892:	6a 00                	push   0x0
c0014894:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014899:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001489c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148a2:	e8 cb 56 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00148a7:	b9 00 10 00 00       	mov    ecx,0x1000
c00148ac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148ae:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00148b3:	83 c4 20             	add    esp,0x20
c00148b6:	48                   	dec    eax
c00148b7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00148bc:	85 c0                	test   eax,eax
c00148be:	75 01                	jne    c00148c1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00148c0:	fb                   	sti    
c00148c1:	81 c5 00 10 00 00    	add    ebp,0x1000
c00148c7:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00148cb:	e9 f1 fe ff ff       	jmp    c00147c1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00148d0:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00148d7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00148de:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00148e4:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00148ea:	0f 86 ae 00 00 00    	jbe    c001499e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00148f0:	fa                   	cli    
c00148f1:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00148f7:	c1 ee 0c             	shr    esi,0xc
c00148fa:	51                   	push   ecx
c00148fb:	31 ff                	xor    edi,edi
c00148fd:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014904:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001490a:	6a 00                	push   0x0
c001490c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014911:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014914:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001491a:	e8 67 52 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c001491f:	83 c4 10             	add    esp,0x10
c0014922:	e8 98 34 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014927:	47                   	inc    edi
c0014928:	6a 07                	push   0x7
c001492a:	53                   	push   ebx
c001492b:	50                   	push   eax
c001492c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014930:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014936:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014939:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001493f:	e8 dc 53 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014944:	58                   	pop    eax
c0014945:	5a                   	pop    edx
c0014946:	68 07 0c 00 00       	push   0xc07
c001494b:	55                   	push   ebp
c001494c:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014952:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014956:	50                   	push   eax
c0014957:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001495e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014964:	6a 00                	push   0x0
c0014966:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001496b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001496e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014974:	e8 f9 55 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014979:	83 c4 1c             	add    esp,0x1c
c001497c:	68 00 10 00 00       	push   0x1000
c0014981:	6a 00                	push   0x0
c0014983:	53                   	push   ebx
c0014984:	e8 67 bb fe ff       	call   c00004f0 <memset>
c0014989:	83 c4 10             	add    esp,0x10
c001498c:	39 fe                	cmp    esi,edi
c001498e:	77 92                	ja     c0014922 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0014990:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014995:	48                   	dec    eax
c0014996:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001499b:	75 01                	jne    c001499e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001499d:	fb                   	sti    
c001499e:	83 ec 0c             	sub    esp,0xc
c00149a1:	53                   	push   ebx
c00149a2:	e8 84 4f ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00149a7:	83 c4 10             	add    esp,0x10
c00149aa:	b0 01                	mov    al,0x1
c00149ac:	81 c4 2c 10 00 00    	add    esp,0x102c
c00149b2:	5b                   	pop    ebx
c00149b3:	5e                   	pop    esi
c00149b4:	5f                   	pop    edi
c00149b5:	5d                   	pop    ebp
c00149b6:	c3                   	ret    

c00149b7 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00149b7:	55                   	push   ebp
c00149b8:	57                   	push   edi
c00149b9:	56                   	push   esi
c00149ba:	53                   	push   ebx
c00149bb:	83 ec 48             	sub    esp,0x48
c00149be:	68 14 01 00 00       	push   0x114
c00149c3:	e8 ee 30 ff ff       	call   c0007ab6 <malloc>
c00149c8:	83 c4 0c             	add    esp,0xc
c00149cb:	89 c6                	mov    esi,eax
c00149cd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00149d1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00149d5:	50                   	push   eax
c00149d6:	e8 71 71 ff ff       	call   c000bb4c <File::File(char const*, Process*)>
c00149db:	58                   	pop    eax
c00149dc:	5a                   	pop    edx
c00149dd:	6a 01                	push   0x1
c00149df:	56                   	push   esi
c00149e0:	e8 85 71 ff ff       	call   c000bb6a <File::open(FileOpenMode)>
c00149e5:	83 c4 10             	add    esp,0x10
c00149e8:	85 c0                	test   eax,eax
c00149ea:	0f 85 43 01 00 00    	jne    c0014b33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149f0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00149f8:	83 ec 0c             	sub    esp,0xc
c00149fb:	6a 34                	push   0x34
c00149fd:	e8 b4 30 ff ff       	call   c0007ab6 <malloc>
c0014a02:	89 c3                	mov    ebx,eax
c0014a04:	58                   	pop    eax
c0014a05:	8b 06                	mov    eax,DWORD PTR [esi]
c0014a07:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014a0b:	57                   	push   edi
c0014a0c:	53                   	push   ebx
c0014a0d:	6a 00                	push   0x0
c0014a0f:	6a 34                	push   0x34
c0014a11:	56                   	push   esi
c0014a12:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a15:	83 c4 20             	add    esp,0x20
c0014a18:	85 c0                	test   eax,eax
c0014a1a:	0f 85 13 01 00 00    	jne    c0014b33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a20:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014a26:	0f 85 07 01 00 00    	jne    c0014b33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a2c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a2f:	85 c0                	test   eax,eax
c0014a31:	0f 84 fc 00 00 00    	je     c0014b33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a37:	31 d2                	xor    edx,edx
c0014a39:	55                   	push   ebp
c0014a3a:	52                   	push   edx
c0014a3b:	50                   	push   eax
c0014a3c:	56                   	push   esi
c0014a3d:	e8 e6 71 ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c0014a42:	83 c4 10             	add    esp,0x10
c0014a45:	85 c0                	test   eax,eax
c0014a47:	0f 85 e6 00 00 00    	jne    c0014b33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a4d:	83 ec 0c             	sub    esp,0xc
c0014a50:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014a53:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014a57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014a5b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014a5f:	0f af c2             	imul   eax,edx
c0014a62:	50                   	push   eax
c0014a63:	e8 4e 30 ff ff       	call   c0007ab6 <malloc>
c0014a68:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014a6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014a6e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a71:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014a75:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014a79:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014a7d:	0f af c2             	imul   eax,edx
c0014a80:	99                   	cdq    
c0014a81:	52                   	push   edx
c0014a82:	50                   	push   eax
c0014a83:	56                   	push   esi
c0014a84:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a87:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014a8a:	83 c4 20             	add    esp,0x20
c0014a8d:	85 c0                	test   eax,eax
c0014a8f:	0f 84 9e 00 00 00    	je     c0014b33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a95:	31 d2                	xor    edx,edx
c0014a97:	51                   	push   ecx
c0014a98:	52                   	push   edx
c0014a99:	50                   	push   eax
c0014a9a:	56                   	push   esi
c0014a9b:	e8 88 71 ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c0014aa0:	83 c4 10             	add    esp,0x10
c0014aa3:	85 c0                	test   eax,eax
c0014aa5:	0f 85 88 00 00 00    	jne    c0014b33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014aab:	83 ec 0c             	sub    esp,0xc
c0014aae:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014ab2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014ab6:	31 ed                	xor    ebp,ebp
c0014ab8:	0f af c2             	imul   eax,edx
c0014abb:	50                   	push   eax
c0014abc:	e8 f5 2f ff ff       	call   c0007ab6 <malloc>
c0014ac1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014ac3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ac7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014aca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ace:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014ad2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014ad6:	0f af c2             	imul   eax,edx
c0014ad9:	99                   	cdq    
c0014ada:	52                   	push   edx
c0014adb:	50                   	push   eax
c0014adc:	56                   	push   esi
c0014add:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ae0:	83 c4 20             	add    esp,0x20
c0014ae3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014aeb:	0f b7 fd             	movzx  edi,bp
c0014aee:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014af2:	73 7d                	jae    c0014b71 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014af4:	c1 e7 05             	shl    edi,0x5
c0014af7:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014afb:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014afe:	75 6b                	jne    c0014b6b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014b00:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014b03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b07:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014b0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b0e:	52                   	push   edx
c0014b0f:	31 d2                	xor    edx,edx
c0014b11:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014b14:	52                   	push   edx
c0014b15:	50                   	push   eax
c0014b16:	56                   	push   esi
c0014b17:	e8 0c 71 ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c0014b1c:	83 c4 10             	add    esp,0x10
c0014b1f:	85 c0                	test   eax,eax
c0014b21:	74 17                	je     c0014b3a <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014b23:	83 ec 0c             	sub    esp,0xc
c0014b26:	68 91 27 02 c0       	push   0xc0022791
c0014b2b:	e8 15 5e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014b30:	83 c4 10             	add    esp,0x10
c0014b33:	31 c0                	xor    eax,eax
c0014b35:	e9 87 00 00 00       	jmp    c0014bc1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014b3a:	83 ec 0c             	sub    esp,0xc
c0014b3d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b40:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014b43:	50                   	push   eax
c0014b44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014b48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b4c:	56                   	push   esi
c0014b4d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014b51:	e8 d3 fb ff ff       	call   c0014729 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014b56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014b5a:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014b5e:	83 c4 20             	add    esp,0x20
c0014b61:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014b65:	73 04                	jae    c0014b6b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014b67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014b6b:	45                   	inc    ebp
c0014b6c:	e9 7a ff ff ff       	jmp    c0014aeb <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014b71:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014b75:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014b79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014b7d:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014b83:	83 ec 0c             	sub    esp,0xc
c0014b86:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014b8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b91:	05 00 10 00 00       	add    eax,0x1000
c0014b96:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014b99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b9d:	e8 24 2f ff ff       	call   c0007ac6 <free>
c0014ba2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ba5:	e8 1c 2f ff ff       	call   c0007ac6 <free>
c0014baa:	58                   	pop    eax
c0014bab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014baf:	e8 12 2f ff ff       	call   c0007ac6 <free>
c0014bb4:	89 34 24             	mov    DWORD PTR [esp],esi
c0014bb7:	e8 0c 70 ff ff       	call   c000bbc8 <File::close()>
c0014bbc:	83 c4 10             	add    esp,0x10
c0014bbf:	b0 01                	mov    al,0x1
c0014bc1:	83 c4 3c             	add    esp,0x3c
c0014bc4:	5b                   	pop    ebx
c0014bc5:	5e                   	pop    esi
c0014bc6:	5f                   	pop    edi
c0014bc7:	5d                   	pop    ebp
c0014bc8:	c3                   	ret    

c0014bc9 <Thr::runtimeReferenceHelper()>:
c0014bc9:	83 ec 18             	sub    esp,0x18
c0014bcc:	68 99 27 02 c0       	push   0xc0022799
c0014bd1:	e8 6f 5d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014bd6:	fa                   	cli    
c0014bd7:	83 c4 10             	add    esp,0x10
c0014bda:	eb fe                	jmp    c0014bda <Thr::runtimeReferenceHelper()+0x11>

c0014bdc <Thr::getAddressOfKernelSymbol(char const*)>:
c0014bdc:	57                   	push   edi
c0014bdd:	56                   	push   esi
c0014bde:	53                   	push   ebx
c0014bdf:	31 db                	xor    ebx,ebx
c0014be1:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014be7:	7e 3c                	jle    c0014c25 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014be9:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014bf0:	31 ff                	xor    edi,edi
c0014bf2:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014bf9:	7e 27                	jle    c0014c22 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014bfb:	50                   	push   eax
c0014bfc:	50                   	push   eax
c0014bfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c01:	8b 06                	mov    eax,DWORD PTR [esi]
c0014c03:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014c0a:	50                   	push   eax
c0014c0b:	e8 40 bb fe ff       	call   c0000750 <strcmp>
c0014c10:	83 c4 10             	add    esp,0x10
c0014c13:	85 c0                	test   eax,eax
c0014c15:	75 05                	jne    c0014c1c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014c17:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014c1a:	eb 0b                	jmp    c0014c27 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014c1c:	83 c6 10             	add    esi,0x10
c0014c1f:	47                   	inc    edi
c0014c20:	eb d0                	jmp    c0014bf2 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014c22:	43                   	inc    ebx
c0014c23:	eb bc                	jmp    c0014be1 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014c25:	31 c0                	xor    eax,eax
c0014c27:	5b                   	pop    ebx
c0014c28:	5e                   	pop    esi
c0014c29:	5f                   	pop    edi
c0014c2a:	c3                   	ret    

c0014c2b <Thr::loadKernelSymbolTable(char const*)>:
c0014c2b:	55                   	push   ebp
c0014c2c:	57                   	push   edi
c0014c2d:	56                   	push   esi
c0014c2e:	53                   	push   ebx
c0014c2f:	83 ec 68             	sub    esp,0x68
c0014c32:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014c38:	68 14 01 00 00       	push   0x114
c0014c3d:	e8 74 2e ff ff       	call   c0007ab6 <malloc>
c0014c42:	83 c4 0c             	add    esp,0xc
c0014c45:	89 c3                	mov    ebx,eax
c0014c47:	56                   	push   esi
c0014c48:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014c4c:	50                   	push   eax
c0014c4d:	e8 fa 6e ff ff       	call   c000bb4c <File::File(char const*, Process*)>
c0014c52:	5e                   	pop    esi
c0014c53:	5f                   	pop    edi
c0014c54:	6a 01                	push   0x1
c0014c56:	53                   	push   ebx
c0014c57:	e8 0e 6f ff ff       	call   c000bb6a <File::open(FileOpenMode)>
c0014c5c:	83 c4 10             	add    esp,0x10
c0014c5f:	85 c0                	test   eax,eax
c0014c61:	74 0a                	je     c0014c6d <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014c63:	83 ec 0c             	sub    esp,0xc
c0014c66:	68 bb 27 02 c0       	push   0xc00227bb
c0014c6b:	eb 34                	jmp    c0014ca1 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014c6d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014c75:	83 ec 0c             	sub    esp,0xc
c0014c78:	6a 34                	push   0x34
c0014c7a:	e8 37 2e ff ff       	call   c0007ab6 <malloc>
c0014c7f:	59                   	pop    ecx
c0014c80:	89 c7                	mov    edi,eax
c0014c82:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014c86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c88:	56                   	push   esi
c0014c89:	57                   	push   edi
c0014c8a:	6a 00                	push   0x0
c0014c8c:	6a 34                	push   0x34
c0014c8e:	53                   	push   ebx
c0014c8f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c92:	83 c4 20             	add    esp,0x20
c0014c95:	85 c0                	test   eax,eax
c0014c97:	74 17                	je     c0014cb0 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014c99:	83 ec 0c             	sub    esp,0xc
c0014c9c:	68 d2 27 02 c0       	push   0xc00227d2
c0014ca1:	e8 79 c9 ff ff       	call   c001161f <KePanic(char const*)>
c0014ca6:	83 c4 10             	add    esp,0x10
c0014ca9:	31 c0                	xor    eax,eax
c0014cab:	e9 31 02 00 00       	jmp    c0014ee1 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014cb0:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014cb6:	75 e1                	jne    c0014c99 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014cb8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014cbb:	85 c0                	test   eax,eax
c0014cbd:	74 da                	je     c0014c99 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014cbf:	52                   	push   edx
c0014cc0:	31 d2                	xor    edx,edx
c0014cc2:	52                   	push   edx
c0014cc3:	50                   	push   eax
c0014cc4:	53                   	push   ebx
c0014cc5:	e8 5e 6f ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c0014cca:	83 c4 10             	add    esp,0x10
c0014ccd:	85 c0                	test   eax,eax
c0014ccf:	75 c8                	jne    c0014c99 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014cd1:	83 ec 0c             	sub    esp,0xc
c0014cd4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014cd8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014cdc:	31 ed                	xor    ebp,ebp
c0014cde:	0f af c2             	imul   eax,edx
c0014ce1:	50                   	push   eax
c0014ce2:	e8 cf 2d ff ff       	call   c0007ab6 <malloc>
c0014ce7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014ce9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ced:	89 34 24             	mov    DWORD PTR [esp],esi
c0014cf0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014cf4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014cf8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014cfc:	0f af c2             	imul   eax,edx
c0014cff:	99                   	cdq    
c0014d00:	52                   	push   edx
c0014d01:	50                   	push   eax
c0014d02:	53                   	push   ebx
c0014d03:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d06:	83 c4 20             	add    esp,0x20
c0014d09:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014d11:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d19:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014d21:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d29:	0f b7 f5             	movzx  esi,bp
c0014d2c:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014d30:	0f 83 a7 00 00 00    	jae    c0014ddd <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014d36:	6b f6 28             	imul   esi,esi,0x28
c0014d39:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014d3d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014d40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d44:	50                   	push   eax
c0014d45:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014d49:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014d4d:	8b 16                	mov    edx,DWORD PTR [esi]
c0014d4f:	6b c0 28             	imul   eax,eax,0x28
c0014d52:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014d56:	89 d0                	mov    eax,edx
c0014d58:	31 d2                	xor    edx,edx
c0014d5a:	52                   	push   edx
c0014d5b:	50                   	push   eax
c0014d5c:	53                   	push   ebx
c0014d5d:	e8 c6 6e ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c0014d62:	83 c4 0c             	add    esp,0xc
c0014d65:	6a 20                	push   0x20
c0014d67:	6a 00                	push   0x0
c0014d69:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014d6d:	52                   	push   edx
c0014d6e:	e8 7d b7 fe ff       	call   c00004f0 <memset>
c0014d73:	58                   	pop    eax
c0014d74:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d76:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014d7a:	51                   	push   ecx
c0014d7b:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014d7f:	52                   	push   edx
c0014d80:	6a 00                	push   0x0
c0014d82:	6a 1f                	push   0x1f
c0014d84:	53                   	push   ebx
c0014d85:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d88:	83 c4 18             	add    esp,0x18
c0014d8b:	68 e9 27 02 c0       	push   0xc00227e9
c0014d90:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014d94:	52                   	push   edx
c0014d95:	e8 b6 b9 fe ff       	call   c0000750 <strcmp>
c0014d9a:	83 c4 10             	add    esp,0x10
c0014d9d:	85 c0                	test   eax,eax
c0014d9f:	75 0f                	jne    c0014db0 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014da1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014da4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014da8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014dac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014db0:	50                   	push   eax
c0014db1:	50                   	push   eax
c0014db2:	68 f1 27 02 c0       	push   0xc00227f1
c0014db7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014dbb:	50                   	push   eax
c0014dbc:	e8 8f b9 fe ff       	call   c0000750 <strcmp>
c0014dc1:	83 c4 10             	add    esp,0x10
c0014dc4:	85 c0                	test   eax,eax
c0014dc6:	75 0f                	jne    c0014dd7 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014dc8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014dcb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014dcf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014dd3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014dd7:	45                   	inc    ebp
c0014dd8:	e9 4c ff ff ff       	jmp    c0014d29 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014ddd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014de2:	75 10                	jne    c0014df4 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014de4:	83 ec 0c             	sub    esp,0xc
c0014de7:	68 f9 27 02 c0       	push   0xc00227f9
c0014dec:	e8 2e c8 ff ff       	call   c001161f <KePanic(char const*)>
c0014df1:	83 c4 10             	add    esp,0x10
c0014df4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014df9:	75 10                	jne    c0014e0b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014dfb:	83 ec 0c             	sub    esp,0xc
c0014dfe:	68 f9 27 02 c0       	push   0xc00227f9
c0014e03:	e8 17 c8 ff ff       	call   c001161f <KePanic(char const*)>
c0014e08:	83 c4 10             	add    esp,0x10
c0014e0b:	31 d2                	xor    edx,edx
c0014e0d:	50                   	push   eax
c0014e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e12:	52                   	push   edx
c0014e13:	50                   	push   eax
c0014e14:	53                   	push   ebx
c0014e15:	e8 0e 6e ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c0014e1a:	5a                   	pop    edx
c0014e1b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014e1f:	e8 92 2c ff ff       	call   c0007ab6 <malloc>
c0014e24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014e28:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e2c:	31 c9                	xor    ecx,ecx
c0014e2e:	5e                   	pop    esi
c0014e2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e31:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014e35:	55                   	push   ebp
c0014e36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e3a:	51                   	push   ecx
c0014e3b:	52                   	push   edx
c0014e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014e40:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014e44:	53                   	push   ebx
c0014e45:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e48:	83 c4 14             	add    esp,0x14
c0014e4b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014e4f:	e8 62 2c ff ff       	call   c0007ab6 <malloc>
c0014e54:	89 c6                	mov    esi,eax
c0014e56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e58:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e5b:	56                   	push   esi
c0014e5c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014e60:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014e64:	51                   	push   ecx
c0014e65:	52                   	push   edx
c0014e66:	53                   	push   ebx
c0014e67:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e6a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e6e:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014e74:	83 c4 1c             	add    esp,0x1c
c0014e77:	c1 e8 04             	shr    eax,0x4
c0014e7a:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014e81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e85:	31 d2                	xor    edx,edx
c0014e87:	52                   	push   edx
c0014e88:	50                   	push   eax
c0014e89:	53                   	push   ebx
c0014e8a:	e8 99 6d ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c0014e8f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014e91:	31 d2                	xor    edx,edx
c0014e93:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e96:	56                   	push   esi
c0014e97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e9b:	52                   	push   edx
c0014e9c:	50                   	push   eax
c0014e9d:	53                   	push   ebx
c0014e9e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ea1:	83 c4 14             	add    esp,0x14
c0014ea4:	53                   	push   ebx
c0014ea5:	e8 1e 6d ff ff       	call   c000bbc8 <File::close()>
c0014eaa:	5d                   	pop    ebp
c0014eab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014eaf:	e8 12 2c ff ff       	call   c0007ac6 <free>
c0014eb4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014eb7:	e8 0a 2c ff ff       	call   c0007ac6 <free>
c0014ebc:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014ec1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014ec5:	8d 50 01             	lea    edx,[eax+0x1]
c0014ec8:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014ecf:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014ed6:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014edc:	83 c4 10             	add    esp,0x10
c0014edf:	b0 01                	mov    al,0x1
c0014ee1:	83 c4 5c             	add    esp,0x5c
c0014ee4:	5b                   	pop    ebx
c0014ee5:	5e                   	pop    esi
c0014ee6:	5f                   	pop    edi
c0014ee7:	5d                   	pop    ebp
c0014ee8:	c3                   	ret    

c0014ee9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014ee9:	55                   	push   ebp
c0014eea:	57                   	push   edi
c0014eeb:	56                   	push   esi
c0014eec:	53                   	push   ebx
c0014eed:	81 ec 68 03 00 00    	sub    esp,0x368
c0014ef3:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014efa:	8b 1d f0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6f0
c0014f00:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014f04:	68 14 01 00 00       	push   0x114
c0014f09:	e8 a8 2b ff ff       	call   c0007ab6 <malloc>
c0014f0e:	83 c4 0c             	add    esp,0xc
c0014f11:	89 c5                	mov    ebp,eax
c0014f13:	53                   	push   ebx
c0014f14:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014f1b:	50                   	push   eax
c0014f1c:	e8 2b 6c ff ff       	call   c000bb4c <File::File(char const*, Process*)>
c0014f21:	5e                   	pop    esi
c0014f22:	5f                   	pop    edi
c0014f23:	6a 01                	push   0x1
c0014f25:	55                   	push   ebp
c0014f26:	e8 3f 6c ff ff       	call   c000bb6a <File::open(FileOpenMode)>
c0014f2b:	83 c4 10             	add    esp,0x10
c0014f2e:	85 c0                	test   eax,eax
c0014f30:	0f 85 aa 06 00 00    	jne    c00155e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f36:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014f3e:	83 ec 0c             	sub    esp,0xc
c0014f41:	6a 34                	push   0x34
c0014f43:	e8 6e 2b ff ff       	call   c0007ab6 <malloc>
c0014f48:	5b                   	pop    ebx
c0014f49:	89 c7                	mov    edi,eax
c0014f4b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014f4f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014f52:	53                   	push   ebx
c0014f53:	57                   	push   edi
c0014f54:	6a 00                	push   0x0
c0014f56:	6a 34                	push   0x34
c0014f58:	55                   	push   ebp
c0014f59:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f5c:	83 c4 20             	add    esp,0x20
c0014f5f:	85 c0                	test   eax,eax
c0014f61:	0f 85 79 06 00 00    	jne    c00155e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f67:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014f6d:	0f 85 6d 06 00 00    	jne    c00155e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f73:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014f76:	85 c0                	test   eax,eax
c0014f78:	0f 84 62 06 00 00    	je     c00155e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f7e:	31 d2                	xor    edx,edx
c0014f80:	51                   	push   ecx
c0014f81:	52                   	push   edx
c0014f82:	50                   	push   eax
c0014f83:	55                   	push   ebp
c0014f84:	e8 9f 6c ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c0014f89:	83 c4 10             	add    esp,0x10
c0014f8c:	85 c0                	test   eax,eax
c0014f8e:	0f 85 4c 06 00 00    	jne    c00155e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f94:	83 ec 0c             	sub    esp,0xc
c0014f97:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014f9a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014f9e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014fa2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014fa6:	0f af c2             	imul   eax,edx
c0014fa9:	50                   	push   eax
c0014faa:	e8 07 2b ff ff       	call   c0007ab6 <malloc>
c0014faf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014fb2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014fb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014fb9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014fbd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014fc1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014fc5:	0f af c2             	imul   eax,edx
c0014fc8:	99                   	cdq    
c0014fc9:	52                   	push   edx
c0014fca:	50                   	push   eax
c0014fcb:	55                   	push   ebp
c0014fcc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014fcf:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014fd2:	83 c4 20             	add    esp,0x20
c0014fd5:	85 c0                	test   eax,eax
c0014fd7:	0f 84 03 06 00 00    	je     c00155e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fdd:	52                   	push   edx
c0014fde:	31 d2                	xor    edx,edx
c0014fe0:	52                   	push   edx
c0014fe1:	50                   	push   eax
c0014fe2:	55                   	push   ebp
c0014fe3:	e8 40 6c ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c0014fe8:	83 c4 10             	add    esp,0x10
c0014feb:	85 c0                	test   eax,eax
c0014fed:	0f 85 ed 05 00 00    	jne    c00155e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ff3:	83 ec 0c             	sub    esp,0xc
c0014ff6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014ffa:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014ffe:	31 f6                	xor    esi,esi
c0015000:	0f af c2             	imul   eax,edx
c0015003:	50                   	push   eax
c0015004:	e8 ad 2a ff ff       	call   c0007ab6 <malloc>
c0015009:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001500c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015010:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015013:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015017:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001501b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001501f:	0f af c2             	imul   eax,edx
c0015022:	99                   	cdq    
c0015023:	52                   	push   edx
c0015024:	50                   	push   eax
c0015025:	55                   	push   ebp
c0015026:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015029:	83 c4 20             	add    esp,0x20
c001502c:	0f b7 de             	movzx  ebx,si
c001502f:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0015033:	0f 83 87 00 00 00    	jae    c00150c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0015039:	c1 e3 05             	shl    ebx,0x5
c001503c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0015040:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0015043:	75 75                	jne    c00150ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0015045:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015048:	31 d2                	xor    edx,edx
c001504a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001504e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015051:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015055:	50                   	push   eax
c0015056:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0015059:	52                   	push   edx
c001505a:	50                   	push   eax
c001505b:	55                   	push   ebp
c001505c:	e8 c7 6b ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c0015061:	83 c4 10             	add    esp,0x10
c0015064:	85 c0                	test   eax,eax
c0015066:	0f 85 74 05 00 00    	jne    c00155e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001506c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015073:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015076:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c001507a:	31 d2                	xor    edx,edx
c001507c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0015080:	83 ec 0c             	sub    esp,0xc
c0015083:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015087:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001508e:	50                   	push   eax
c001508f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015097:	52                   	push   edx
c0015098:	50                   	push   eax
c0015099:	55                   	push   ebp
c001509a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001509d:	83 c4 1c             	add    esp,0x1c
c00150a0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00150a3:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00150a6:	50                   	push   eax
c00150a7:	6a 00                	push   0x0
c00150a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150ad:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00150b1:	50                   	push   eax
c00150b2:	e8 39 b4 fe ff       	call   c00004f0 <memset>
c00150b7:	83 c4 10             	add    esp,0x10
c00150ba:	46                   	inc    esi
c00150bb:	e9 6c ff ff ff       	jmp    c001502c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00150c0:	53                   	push   ebx
c00150c1:	31 db                	xor    ebx,ebx
c00150c3:	68 00 01 00 00       	push   0x100
c00150c8:	6a 00                	push   0x0
c00150ca:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00150ce:	50                   	push   eax
c00150cf:	e8 1c b4 fe ff       	call   c00004f0 <memset>
c00150d4:	83 c4 0c             	add    esp,0xc
c00150d7:	68 00 01 00 00       	push   0x100
c00150dc:	6a 00                	push   0x0
c00150de:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00150e5:	50                   	push   eax
c00150e6:	e8 05 b4 fe ff       	call   c00004f0 <memset>
c00150eb:	83 c4 10             	add    esp,0x10
c00150ee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00150f6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00150fe:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015106:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001510e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015116:	0f b7 f3             	movzx  esi,bx
c0015119:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c001511d:	0f 83 2d 01 00 00    	jae    c0015250 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0015123:	6b f6 28             	imul   esi,esi,0x28
c0015126:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001512a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001512d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015131:	52                   	push   edx
c0015132:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015136:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001513a:	8b 06                	mov    eax,DWORD PTR [esi]
c001513c:	6b d2 28             	imul   edx,edx,0x28
c001513f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015143:	31 d2                	xor    edx,edx
c0015145:	52                   	push   edx
c0015146:	50                   	push   eax
c0015147:	55                   	push   ebp
c0015148:	e8 db 6a ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c001514d:	83 c4 0c             	add    esp,0xc
c0015150:	6a 20                	push   0x20
c0015152:	6a 00                	push   0x0
c0015154:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001515b:	51                   	push   ecx
c001515c:	e8 8f b3 fe ff       	call   c00004f0 <memset>
c0015161:	59                   	pop    ecx
c0015162:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015165:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015169:	52                   	push   edx
c001516a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015171:	51                   	push   ecx
c0015172:	6a 00                	push   0x0
c0015174:	6a 1f                	push   0x1f
c0015176:	55                   	push   ebp
c0015177:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001517a:	83 c4 1c             	add    esp,0x1c
c001517d:	6a 09                	push   0x9
c001517f:	68 13 28 02 c0       	push   0xc0022813
c0015184:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001518b:	51                   	push   ecx
c001518c:	e8 ef b1 fe ff       	call   c0000380 <memcmp>
c0015191:	83 c4 10             	add    esp,0x10
c0015194:	85 c0                	test   eax,eax
c0015196:	75 21                	jne    c00151b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0015198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001519c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00151a0:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00151a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00151a8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00151ab:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00151b2:	89 d0                	mov    eax,edx
c00151b4:	40                   	inc    eax
c00151b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151b9:	50                   	push   eax
c00151ba:	6a 09                	push   0x9
c00151bc:	68 1d 28 02 c0       	push   0xc002281d
c00151c1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151c8:	50                   	push   eax
c00151c9:	e8 b2 b1 fe ff       	call   c0000380 <memcmp>
c00151ce:	83 c4 10             	add    esp,0x10
c00151d1:	85 c0                	test   eax,eax
c00151d3:	75 21                	jne    c00151f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00151d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00151dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00151e1:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c00151e5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00151e8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00151ef:	89 d0                	mov    eax,edx
c00151f1:	40                   	inc    eax
c00151f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151f6:	50                   	push   eax
c00151f7:	50                   	push   eax
c00151f8:	68 e9 27 02 c0       	push   0xc00227e9
c00151fd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015204:	50                   	push   eax
c0015205:	e8 46 b5 fe ff       	call   c0000750 <strcmp>
c001520a:	83 c4 10             	add    esp,0x10
c001520d:	85 c0                	test   eax,eax
c001520f:	75 0f                	jne    c0015220 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0015211:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015214:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015218:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001521c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015220:	50                   	push   eax
c0015221:	50                   	push   eax
c0015222:	68 f1 27 02 c0       	push   0xc00227f1
c0015227:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001522e:	50                   	push   eax
c001522f:	e8 1c b5 fe ff       	call   c0000750 <strcmp>
c0015234:	83 c4 10             	add    esp,0x10
c0015237:	85 c0                	test   eax,eax
c0015239:	75 0f                	jne    c001524a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001523b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001523e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015242:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015246:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001524a:	43                   	inc    ebx
c001524b:	e9 c6 fe ff ff       	jmp    c0015116 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0015250:	31 d2                	xor    edx,edx
c0015252:	50                   	push   eax
c0015253:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015257:	52                   	push   edx
c0015258:	50                   	push   eax
c0015259:	55                   	push   ebp
c001525a:	e8 c9 69 ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c001525f:	58                   	pop    eax
c0015260:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015264:	e8 4d 28 ff ff       	call   c0007ab6 <malloc>
c0015269:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001526c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015270:	31 d2                	xor    edx,edx
c0015272:	58                   	pop    eax
c0015273:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015277:	53                   	push   ebx
c0015278:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001527c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015280:	52                   	push   edx
c0015281:	50                   	push   eax
c0015282:	55                   	push   ebp
c0015283:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015286:	83 c4 14             	add    esp,0x14
c0015289:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001528d:	e8 24 28 ff ff       	call   c0007ab6 <malloc>
c0015292:	31 d2                	xor    edx,edx
c0015294:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015298:	83 c4 0c             	add    esp,0xc
c001529b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001529f:	52                   	push   edx
c00152a0:	50                   	push   eax
c00152a1:	55                   	push   ebp
c00152a2:	e8 81 69 ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c00152a7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00152aa:	31 d2                	xor    edx,edx
c00152ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00152b7:	52                   	push   edx
c00152b8:	50                   	push   eax
c00152b9:	55                   	push   ebp
c00152ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152bd:	83 c4 20             	add    esp,0x20
c00152c0:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c00152c5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00152cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00152d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00152d5:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00152d9:	0f 84 05 03 00 00    	je     c00155e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c00152df:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00152e6:	31 d2                	xor    edx,edx
c00152e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00152ec:	c1 e8 03             	shr    eax,0x3
c00152ef:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00152f3:	51                   	push   ecx
c00152f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00152f8:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00152fc:	52                   	push   edx
c00152fd:	50                   	push   eax
c00152fe:	55                   	push   ebp
c00152ff:	e8 24 69 ff ff       	call   c000bc28 <File::seek(unsigned long long)>
c0015304:	5b                   	pop    ebx
c0015305:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015309:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015310:	e8 a1 27 ff ff       	call   c0007ab6 <malloc>
c0015315:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015318:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001531c:	31 d2                	xor    edx,edx
c001531e:	5e                   	pop    esi
c001531f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015323:	50                   	push   eax
c0015324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015328:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001532c:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015333:	52                   	push   edx
c0015334:	50                   	push   eax
c0015335:	55                   	push   ebp
c0015336:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015339:	83 c4 20             	add    esp,0x20
c001533c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015344:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015348:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c001534c:	0f 8d 76 02 00 00    	jge    c00155c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0015352:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015356:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001535a:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c001535f:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0015362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015366:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001536a:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c001536e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015372:	c1 e8 08             	shr    eax,0x8
c0015375:	89 c6                	mov    esi,eax
c0015377:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001537b:	c1 e6 04             	shl    esi,0x4
c001537e:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0015382:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0015385:	85 db                	test   ebx,ebx
c0015387:	0f 85 b3 00 00 00    	jne    c0015440 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001538d:	83 ec 0c             	sub    esp,0xc
c0015390:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015394:	03 06                	add    eax,DWORD PTR [esi]
c0015396:	50                   	push   eax
c0015397:	e8 40 f8 ff ff       	call   c0014bdc <Thr::getAddressOfKernelSymbol(char const*)>
c001539c:	83 c4 10             	add    esp,0x10
c001539f:	89 c3                	mov    ebx,eax
c00153a1:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c00153a6:	85 c0                	test   eax,eax
c00153a8:	0f 85 92 00 00 00    	jne    c0015440 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00153ae:	83 ec 0c             	sub    esp,0xc
c00153b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00153b5:	03 06                	add    eax,DWORD PTR [esi]
c00153b7:	50                   	push   eax
c00153b8:	e8 4f c4 ff ff       	call   c001180c <KeResolveCompatibilitySymbol(char*)>
c00153bd:	83 c4 10             	add    esp,0x10
c00153c0:	89 c3                	mov    ebx,eax
c00153c2:	85 c0                	test   eax,eax
c00153c4:	75 7a                	jne    c0015440 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00153c6:	51                   	push   ecx
c00153c7:	51                   	push   ecx
c00153c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00153cc:	03 06                	add    eax,DWORD PTR [esi]
c00153ce:	50                   	push   eax
c00153cf:	68 27 28 02 c0       	push   0xc0022827
c00153d4:	e8 6c 55 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00153d9:	58                   	pop    eax
c00153da:	5a                   	pop    edx
c00153db:	68 41 28 02 c0       	push   0xc0022841
c00153e0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00153e7:	50                   	push   eax
c00153e8:	e8 53 b2 fe ff       	call   c0000640 <strcpy>
c00153ed:	59                   	pop    ecx
c00153ee:	58                   	pop    eax
c00153ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00153f3:	03 06                	add    eax,DWORD PTR [esi]
c00153f5:	50                   	push   eax
c00153f6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00153fd:	50                   	push   eax
c00153fe:	e8 3d b4 fe ff       	call   c0000840 <strcat>
c0015403:	58                   	pop    eax
c0015404:	5a                   	pop    edx
c0015405:	68 d7 28 02 c0       	push   0xc00228d7
c001540a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015411:	50                   	push   eax
c0015412:	e8 29 b4 fe ff       	call   c0000840 <strcat>
c0015417:	83 c4 10             	add    esp,0x10
c001541a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001541f:	0f 84 5d 01 00 00    	je     c0015582 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015425:	83 ec 0c             	sub    esp,0xc
c0015428:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001542f:	50                   	push   eax
c0015430:	e8 ea c1 ff ff       	call   c001161f <KePanic(char const*)>
c0015435:	83 c4 10             	add    esp,0x10
c0015438:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001543c:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0015440:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0015445:	83 f8 01             	cmp    eax,0x1
c0015448:	0f 85 8f 00 00 00    	jne    c00154dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c001544e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0015455:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0015459:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c001545d:	01 ce                	add    esi,ecx
c001545f:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0015467:	0f 94 c0             	sete   al
c001546a:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0015472:	0f 94 c2             	sete   dl
c0015475:	09 c2                	or     edx,eax
c0015477:	8b 06                	mov    eax,DWORD PTR [esi]
c0015479:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c001547e:	0f b6 d2             	movzx  edx,dl
c0015481:	74 41                	je     c00154c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0015483:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0015486:	85 d2                	test   edx,edx
c0015488:	75 15                	jne    c001549f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c001548a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001548e:	66 83 f8 0c          	cmp    ax,0xc
c0015492:	76 05                	jbe    c0015499 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0015494:	b8 0c 00 00 00       	mov    eax,0xc
c0015499:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001549d:	76 37                	jbe    c00154d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001549f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00154a3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00154a8:	0f 84 d4 00 00 00    	je     c0015582 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00154ae:	83 ec 0c             	sub    esp,0xc
c00154b1:	68 58 28 02 c0       	push   0xc0022858
c00154b6:	e8 64 c1 ff ff       	call   c001161f <KePanic(char const*)>
c00154bb:	83 c4 10             	add    esp,0x10
c00154be:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00154c2:	eb 12                	jmp    c00154d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00154c4:	01 c1                	add    ecx,eax
c00154c6:	85 d2                	test   edx,edx
c00154c8:	75 0c                	jne    c00154d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00154ca:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00154ce:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00154d2:	77 02                	ja     c00154d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00154d4:	01 d9                	add    ecx,ebx
c00154d6:	89 0e                	mov    DWORD PTR [esi],ecx
c00154d8:	e9 e2 00 00 00       	jmp    c00155bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00154dd:	83 f8 02             	cmp    eax,0x2
c00154e0:	75 77                	jne    c0015559 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00154e2:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00154e9:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c00154ed:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c00154f1:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00154f9:	74 21                	je     c001551c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00154fb:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0015503:	74 17                	je     c001551c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0015505:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0015509:	b8 0a 00 00 00       	mov    eax,0xa
c001550e:	83 fa 0e             	cmp    edx,0xe
c0015511:	77 03                	ja     c0015516 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0015513:	8d 42 fc             	lea    eax,[edx-0x4]
c0015516:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001551a:	76 17                	jbe    c0015533 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001551c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015521:	74 5f                	je     c0015582 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015523:	83 ec 0c             	sub    esp,0xc
c0015526:	68 74 28 02 c0       	push   0xc0022874
c001552b:	e8 ef c0 ff ff       	call   c001161f <KePanic(char const*)>
c0015530:	83 c4 10             	add    esp,0x10
c0015533:	8b 06                	mov    eax,DWORD PTR [esi]
c0015535:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c001553a:	74 13                	je     c001554f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c001553c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015540:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0015547:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c001554b:	01 d0                	add    eax,edx
c001554d:	eb 04                	jmp    c0015553 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001554f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0015553:	01 c3                	add    ebx,eax
c0015555:	89 1e                	mov    DWORD PTR [esi],ebx
c0015557:	eb 66                	jmp    c00155bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015559:	52                   	push   edx
c001555a:	52                   	push   edx
c001555b:	50                   	push   eax
c001555c:	68 90 28 02 c0       	push   0xc0022890
c0015561:	e8 df 53 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015566:	83 c4 10             	add    esp,0x10
c0015569:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001556e:	74 12                	je     c0015582 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015570:	83 ec 0c             	sub    esp,0xc
c0015573:	68 9b 28 02 c0       	push   0xc002289b
c0015578:	e8 a2 c0 ff ff       	call   c001161f <KePanic(char const*)>
c001557d:	83 c4 10             	add    esp,0x10
c0015580:	eb 3d                	jmp    c00155bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015582:	83 ec 0c             	sub    esp,0xc
c0015585:	55                   	push   ebp
c0015586:	e8 3d 66 ff ff       	call   c000bbc8 <File::close()>
c001558b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001558e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015591:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015594:	59                   	pop    ecx
c0015595:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015599:	e8 28 25 ff ff       	call   c0007ac6 <free>
c001559e:	5b                   	pop    ebx
c001559f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155a3:	e8 1e 25 ff ff       	call   c0007ac6 <free>
c00155a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00155ab:	e8 16 25 ff ff       	call   c0007ac6 <free>
c00155b0:	5e                   	pop    esi
c00155b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155b5:	e8 0c 25 ff ff       	call   c0007ac6 <free>
c00155ba:	83 c4 10             	add    esp,0x10
c00155bd:	eb 21                	jmp    c00155e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00155bf:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00155c3:	e9 7c fd ff ff       	jmp    c0015344 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00155c8:	83 ec 0c             	sub    esp,0xc
c00155cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155cf:	e8 f2 24 ff ff       	call   c0007ac6 <free>
c00155d4:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00155d8:	83 c4 10             	add    esp,0x10
c00155db:	e9 f1 fc ff ff       	jmp    c00152d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00155e0:	31 c0                	xor    eax,eax
c00155e2:	eb 33                	jmp    c0015617 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00155e4:	83 ec 0c             	sub    esp,0xc
c00155e7:	55                   	push   ebp
c00155e8:	e8 db 65 ff ff       	call   c000bbc8 <File::close()>
c00155ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00155f0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00155f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00155f6:	58                   	pop    eax
c00155f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155fb:	e8 c6 24 ff ff       	call   c0007ac6 <free>
c0015600:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015603:	e8 be 24 ff ff       	call   c0007ac6 <free>
c0015608:	5a                   	pop    edx
c0015609:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001560d:	e8 b4 24 ff ff       	call   c0007ac6 <free>
c0015612:	83 c4 10             	add    esp,0x10
c0015615:	b0 01                	mov    al,0x1
c0015617:	81 c4 5c 03 00 00    	add    esp,0x35c
c001561d:	5b                   	pop    ebx
c001561e:	5e                   	pop    esi
c001561f:	5f                   	pop    edi
c0015620:	5d                   	pop    ebp
c0015621:	c3                   	ret    

c0015622 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015622:	56                   	push   esi
c0015623:	31 d2                	xor    edx,edx
c0015625:	53                   	push   ebx
c0015626:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c001562c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015630:	39 d3                	cmp    ebx,edx
c0015632:	7e 1b                	jle    c001564f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015634:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c001563b:	39 c8                	cmp    eax,ecx
c001563d:	77 0d                	ja     c001564c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001563f:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c0015646:	01 c6                	add    esi,eax
c0015648:	39 ce                	cmp    esi,ecx
c001564a:	77 05                	ja     c0015651 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001564c:	42                   	inc    edx
c001564d:	eb e1                	jmp    c0015630 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001564f:	31 c0                	xor    eax,eax
c0015651:	5b                   	pop    ebx
c0015652:	5e                   	pop    esi
c0015653:	c3                   	ret    

c0015654 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015654:	53                   	push   ebx
c0015655:	31 c0                	xor    eax,eax
c0015657:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001565b:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015661:	39 c3                	cmp    ebx,eax
c0015663:	7e 22                	jle    c0015687 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015665:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c001566c:	39 ca                	cmp    edx,ecx
c001566e:	77 14                	ja     c0015684 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015670:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c0015677:	39 ca                	cmp    edx,ecx
c0015679:	76 09                	jbe    c0015684 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001567b:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c0015682:	eb 05                	jmp    c0015689 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015684:	40                   	inc    eax
c0015685:	eb da                	jmp    c0015661 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015687:	31 c0                	xor    eax,eax
c0015689:	5b                   	pop    ebx
c001568a:	c3                   	ret    

c001568b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001568b:	53                   	push   ebx
c001568c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015690:	53                   	push   ebx
c0015691:	e8 8c ff ff ff       	call   c0015622 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015696:	5a                   	pop    edx
c0015697:	31 d2                	xor    edx,edx
c0015699:	85 c0                	test   eax,eax
c001569b:	74 04                	je     c00156a1 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001569d:	89 da                	mov    edx,ebx
c001569f:	29 c2                	sub    edx,eax
c00156a1:	89 d0                	mov    eax,edx
c00156a3:	5b                   	pop    ebx
c00156a4:	c3                   	ret    

c00156a5 <Thr::loadDLL(char const*, bool)>:
c00156a5:	55                   	push   ebp
c00156a6:	57                   	push   edi
c00156a7:	56                   	push   esi
c00156a8:	53                   	push   ebx
c00156a9:	81 ec 34 01 00 00    	sub    esp,0x134
c00156af:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00156b6:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00156bd:	56                   	push   esi
c00156be:	68 b3 28 02 c0       	push   0xc00228b3
c00156c3:	e8 7d 52 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00156c8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00156cf:	e8 e2 23 ff ff       	call   c0007ab6 <malloc>
c00156d4:	83 c4 0c             	add    esp,0xc
c00156d7:	89 c3                	mov    ebx,eax
c00156d9:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00156df:	56                   	push   esi
c00156e0:	50                   	push   eax
c00156e1:	e8 66 64 ff ff       	call   c000bb4c <File::File(char const*, Process*)>
c00156e6:	83 c4 10             	add    esp,0x10
c00156e9:	85 db                	test   ebx,ebx
c00156eb:	75 3c                	jne    c0015729 <Thr::loadDLL(char const*, bool)+0x84>
c00156ed:	89 f8                	mov    eax,edi
c00156ef:	84 c0                	test   al,al
c00156f1:	0f 84 d2 01 00 00    	je     c00158c9 <Thr::loadDLL(char const*, bool)+0x224>
c00156f7:	55                   	push   ebp
c00156f8:	55                   	push   ebp
c00156f9:	68 c4 28 02 c0       	push   0xc00228c4
c00156fe:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0015702:	55                   	push   ebp
c0015703:	e8 38 af fe ff       	call   c0000640 <strcpy>
c0015708:	58                   	pop    eax
c0015709:	5a                   	pop    edx
c001570a:	56                   	push   esi
c001570b:	55                   	push   ebp
c001570c:	e8 2f b1 fe ff       	call   c0000840 <strcat>
c0015711:	59                   	pop    ecx
c0015712:	58                   	pop    eax
c0015713:	68 d7 28 02 c0       	push   0xc00228d7
c0015718:	55                   	push   ebp
c0015719:	e8 22 b1 fe ff       	call   c0000840 <strcat>
c001571e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015721:	e8 f9 be ff ff       	call   c001161f <KePanic(char const*)>
c0015726:	83 c4 10             	add    esp,0x10
c0015729:	51                   	push   ecx
c001572a:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001572e:	50                   	push   eax
c001572f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015733:	50                   	push   eax
c0015734:	53                   	push   ebx
c0015735:	e8 32 67 ff ff       	call   c000be6c <File::stat(unsigned long long*, bool*)>
c001573a:	83 c4 10             	add    esp,0x10
c001573d:	85 db                	test   ebx,ebx
c001573f:	74 0c                	je     c001574d <Thr::loadDLL(char const*, bool)+0xa8>
c0015741:	83 ec 0c             	sub    esp,0xc
c0015744:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015746:	53                   	push   ebx
c0015747:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001574a:	83 c4 10             	add    esp,0x10
c001574d:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015752:	75 0a                	jne    c001575e <Thr::loadDLL(char const*, bool)+0xb9>
c0015754:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015758:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001575c:	75 3c                	jne    c001579a <Thr::loadDLL(char const*, bool)+0xf5>
c001575e:	89 f8                	mov    eax,edi
c0015760:	84 c0                	test   al,al
c0015762:	0f 84 49 01 00 00    	je     c00158b1 <Thr::loadDLL(char const*, bool)+0x20c>
c0015768:	51                   	push   ecx
c0015769:	51                   	push   ecx
c001576a:	68 c4 28 02 c0       	push   0xc00228c4
c001576f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015773:	53                   	push   ebx
c0015774:	e8 c7 ae fe ff       	call   c0000640 <strcpy>
c0015779:	5d                   	pop    ebp
c001577a:	58                   	pop    eax
c001577b:	56                   	push   esi
c001577c:	53                   	push   ebx
c001577d:	e8 be b0 fe ff       	call   c0000840 <strcat>
c0015782:	58                   	pop    eax
c0015783:	5a                   	pop    edx
c0015784:	68 d7 28 02 c0       	push   0xc00228d7
c0015789:	53                   	push   ebx
c001578a:	e8 b1 b0 fe ff       	call   c0000840 <strcat>
c001578f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015792:	e8 88 be ff ff       	call   c001161f <KePanic(char const*)>
c0015797:	83 c4 10             	add    esp,0x10
c001579a:	52                   	push   edx
c001579b:	6a 03                	push   0x3
c001579d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157a1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00157a5:	05 ff 0f 00 00       	add    eax,0xfff
c00157aa:	83 d2 00             	adc    edx,0x0
c00157ad:	0f ac d0 0c          	shrd   eax,edx,0xc
c00157b1:	50                   	push   eax
c00157b2:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00157b8:	e8 67 46 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c00157bd:	59                   	pop    ecx
c00157be:	89 c3                	mov    ebx,eax
c00157c0:	5d                   	pop    ebp
c00157c1:	50                   	push   eax
c00157c2:	68 12 0e 02 c0       	push   0xc0020e12
c00157c7:	e8 79 51 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00157cc:	89 34 24             	mov    DWORD PTR [esp],esi
c00157cf:	e8 9c ad fe ff       	call   c0000570 <strlen>
c00157d4:	8b 2d 00 bf 02 c0    	mov    ebp,DWORD PTR ds:0xc002bf00
c00157da:	40                   	inc    eax
c00157db:	89 04 24             	mov    DWORD PTR [esp],eax
c00157de:	e8 d3 22 ff ff       	call   c0007ab6 <malloc>
c00157e3:	89 04 ad 20 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3ce0],eax
c00157ea:	58                   	pop    eax
c00157eb:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00157f0:	5a                   	pop    edx
c00157f1:	56                   	push   esi
c00157f2:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c00157f9:	e8 42 ae fe ff       	call   c0000640 <strcpy>
c00157fe:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015803:	8d 50 01             	lea    edx,[eax+0x1]
c0015806:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c001580d:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c0015813:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015817:	83 c4 0c             	add    esp,0xc
c001581a:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c0015821:	6a 01                	push   0x1
c0015823:	53                   	push   ebx
c0015824:	56                   	push   esi
c0015825:	e8 bf f6 ff ff       	call   c0014ee9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001582a:	83 c4 10             	add    esp,0x10
c001582d:	0f b6 c0             	movzx  eax,al
c0015830:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015834:	85 c0                	test   eax,eax
c0015836:	0f 85 89 00 00 00    	jne    c00158c5 <Thr::loadDLL(char const*, bool)+0x220>
c001583c:	89 f8                	mov    eax,edi
c001583e:	84 c0                	test   al,al
c0015840:	74 73                	je     c00158b5 <Thr::loadDLL(char const*, bool)+0x210>
c0015842:	83 ec 0c             	sub    esp,0xc
c0015845:	68 d9 28 02 c0       	push   0xc00228d9
c001584a:	e8 d0 bd ff ff       	call   c001161f <KePanic(char const*)>
c001584f:	83 c4 10             	add    esp,0x10
c0015852:	eb 61                	jmp    c00158b5 <Thr::loadDLL(char const*, bool)+0x210>
c0015854:	50                   	push   eax
c0015855:	50                   	push   eax
c0015856:	89 e8                	mov    eax,ebp
c0015858:	c1 e0 0c             	shl    eax,0xc
c001585b:	01 d8                	add    eax,ebx
c001585d:	50                   	push   eax
c001585e:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0015864:	e8 a3 40 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0015869:	83 c4 10             	add    esp,0x10
c001586c:	8b 00                	mov    eax,DWORD PTR [eax]
c001586e:	a8 60                	test   al,0x60
c0015870:	75 11                	jne    c0015883 <Thr::loadDLL(char const*, bool)+0x1de>
c0015872:	83 ec 0c             	sub    esp,0xc
c0015875:	25 00 f0 ff ff       	and    eax,0xfffff000
c001587a:	50                   	push   eax
c001587b:	e8 d6 24 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0015880:	83 c4 10             	add    esp,0x10
c0015883:	45                   	inc    ebp
c0015884:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015888:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001588c:	05 ff 0f 00 00       	add    eax,0xfff
c0015891:	bf 00 00 00 00       	mov    edi,0x0
c0015896:	83 d2 00             	adc    edx,0x0
c0015899:	0f ac d0 0c          	shrd   eax,edx,0xc
c001589d:	c1 ea 0c             	shr    edx,0xc
c00158a0:	39 c5                	cmp    ebp,eax
c00158a2:	89 d1                	mov    ecx,edx
c00158a4:	89 f8                	mov    eax,edi
c00158a6:	19 c8                	sbb    eax,ecx
c00158a8:	72 aa                	jb     c0015854 <Thr::loadDLL(char const*, bool)+0x1af>
c00158aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00158af:	75 18                	jne    c00158c9 <Thr::loadDLL(char const*, bool)+0x224>
c00158b1:	31 db                	xor    ebx,ebx
c00158b3:	eb 14                	jmp    c00158c9 <Thr::loadDLL(char const*, bool)+0x224>
c00158b5:	83 ec 0c             	sub    esp,0xc
c00158b8:	68 f8 28 02 c0       	push   0xc00228f8
c00158bd:	e8 5d bd ff ff       	call   c001161f <KePanic(char const*)>
c00158c2:	83 c4 10             	add    esp,0x10
c00158c5:	31 ed                	xor    ebp,ebp
c00158c7:	eb bb                	jmp    c0015884 <Thr::loadDLL(char const*, bool)+0x1df>
c00158c9:	81 c4 2c 01 00 00    	add    esp,0x12c
c00158cf:	89 d8                	mov    eax,ebx
c00158d1:	5b                   	pop    ebx
c00158d2:	5e                   	pop    esi
c00158d3:	5f                   	pop    edi
c00158d4:	5d                   	pop    ebp
c00158d5:	c3                   	ret    

c00158d6 <Thr::executeDLL(unsigned long, void*)>:
c00158d6:	56                   	push   esi
c00158d7:	53                   	push   ebx
c00158d8:	52                   	push   edx
c00158d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00158e1:	85 db                	test   ebx,ebx
c00158e3:	75 10                	jne    c00158f5 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00158e5:	83 ec 0c             	sub    esp,0xc
c00158e8:	68 14 29 02 c0       	push   0xc0022914
c00158ed:	e8 2d bd ff ff       	call   c001161f <KePanic(char const*)>
c00158f2:	83 c4 10             	add    esp,0x10
c00158f5:	50                   	push   eax
c00158f6:	50                   	push   eax
c00158f7:	53                   	push   ebx
c00158f8:	68 3e 29 02 c0       	push   0xc002293e
c00158fd:	e8 43 50 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015902:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015906:	89 d8                	mov    eax,ebx
c0015908:	83 c4 14             	add    esp,0x14
c001590b:	5b                   	pop    ebx
c001590c:	5e                   	pop    esi
c001590d:	ff e0                	jmp    eax
c001590f:	90                   	nop

c0015910 <userModeEntryPoint(void*)>:
c0015910:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015915:	83 e8 01             	sub    eax,0x1
c0015918:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001591d:	75 01                	jne    c0015920 <userModeEntryPoint(void*)+0x10>
c001591f:	fb                   	sti    
c0015920:	fb                   	sti    
c0015921:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015926:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015929:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001592f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015933:	e9 07 a9 fe ff       	jmp    c000023f <goToUsermode>

c0015938 <changeTSS>:
c0015938:	83 ec 14             	sub    esp,0x14
c001593b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015940:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015943:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015948:	c1 e2 15             	shl    edx,0x15
c001594b:	29 d0                	sub    eax,edx
c001594d:	50                   	push   eax
c001594e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0015953:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015959:	05 7c 11 00 00       	add    eax,0x117c
c001595e:	50                   	push   eax
c001595f:	e8 f0 35 ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c0015964:	83 c4 1c             	add    esp,0x1c
c0015967:	c3                   	ret    

c0015968 <switchToThread(ThreadControlBlock*)>:
c0015968:	57                   	push   edi
c0015969:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c001596f:	56                   	push   esi
c0015970:	85 c9                	test   ecx,ecx
c0015972:	53                   	push   ebx
c0015973:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015977:	0f 85 8b 00 00 00    	jne    c0015a08 <switchToThread(ThreadControlBlock*)+0xa0>
c001597d:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015981:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015987:	74 7b                	je     c0015a04 <switchToThread(ThreadControlBlock*)+0x9c>
c0015989:	b8 00 04 00 00       	mov    eax,0x400
c001598e:	29 d0                	sub    eax,edx
c0015990:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015993:	d1 f8                	sar    eax,1
c0015995:	01 d0                	add    eax,edx
c0015997:	90                   	nop
c0015998:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001599b:	e8 1e 28 00 00       	call   c00181be <HalQueryPerformanceCounter()>
c00159a0:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c00159a5:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c00159ab:	89 c6                	mov    esi,eax
c00159ad:	89 d7                	mov    edi,edx
c00159af:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c00159b5:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c00159ba:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c00159c0:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c00159c6:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c00159cc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00159d2:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c00159d8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00159db:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00159de:	01 c6                	add    esi,eax
c00159e0:	11 d7                	adc    edi,edx
c00159e2:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00159e5:	83 ec 0c             	sub    esp,0xc
c00159e8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00159eb:	53                   	push   ebx
c00159ec:	e8 86 a8 fe ff       	call   c0000277 <switchToThreadASM>
c00159f1:	0f 20 c0             	mov    eax,cr0
c00159f4:	83 c8 08             	or     eax,0x8
c00159f7:	0f 22 c0             	mov    cr0,eax
c00159fa:	83 c4 10             	add    esp,0x10
c00159fd:	5b                   	pop    ebx
c00159fe:	5e                   	pop    esi
c00159ff:	5f                   	pop    edi
c0015a00:	c3                   	ret    
c0015a01:	8d 76 00             	lea    esi,[esi+0x0]
c0015a04:	31 c0                	xor    eax,eax
c0015a06:	eb 90                	jmp    c0015998 <switchToThread(ThreadControlBlock*)+0x30>
c0015a08:	5b                   	pop    ebx
c0015a09:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015a13:	5e                   	pop    esi
c0015a14:	5f                   	pop    edi
c0015a15:	c3                   	ret    
c0015a16:	66 90                	xchg   ax,ax

c0015a18 <Process::addArgs(char**)>:
c0015a18:	57                   	push   edi
c0015a19:	56                   	push   esi
c0015a1a:	53                   	push   ebx
c0015a1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a1f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015a23:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015a2d:	85 ff                	test   edi,edi
c0015a2f:	74 4f                	je     c0015a80 <Process::addArgs(char**)+0x68>
c0015a31:	8b 07                	mov    eax,DWORD PTR [edi]
c0015a33:	85 c0                	test   eax,eax
c0015a35:	74 49                	je     c0015a80 <Process::addArgs(char**)+0x68>
c0015a37:	31 db                	xor    ebx,ebx
c0015a39:	8d 76 00             	lea    esi,[esi+0x0]
c0015a3c:	83 ec 0c             	sub    esp,0xc
c0015a3f:	50                   	push   eax
c0015a40:	e8 2b ab fe ff       	call   c0000570 <strlen>
c0015a45:	83 c0 01             	add    eax,0x1
c0015a48:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a4b:	e8 66 20 ff ff       	call   c0007ab6 <malloc>
c0015a50:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015a57:	5a                   	pop    edx
c0015a58:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015a5b:	59                   	pop    ecx
c0015a5c:	83 c3 01             	add    ebx,0x1
c0015a5f:	52                   	push   edx
c0015a60:	50                   	push   eax
c0015a61:	e8 da ab fe ff       	call   c0000640 <strcpy>
c0015a66:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015a6c:	83 c4 10             	add    esp,0x10
c0015a6f:	83 c1 01             	add    ecx,0x1
c0015a72:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015a78:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015a7b:	85 c0                	test   eax,eax
c0015a7d:	75 bd                	jne    c0015a3c <Process::addArgs(char**)+0x24>
c0015a7f:	90                   	nop
c0015a80:	5b                   	pop    ebx
c0015a81:	5e                   	pop    esi
c0015a82:	5f                   	pop    edi
c0015a83:	c3                   	ret    

c0015a84 <Process::Process(char const*, Process*, char**)>:
c0015a84:	56                   	push   esi
c0015a85:	53                   	push   ebx
c0015a86:	83 ec 14             	sub    esp,0x14
c0015a89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a8d:	05 0c 02 00 00       	add    eax,0x20c
c0015a92:	bb 07 00 00 00       	mov    ebx,0x7
c0015a97:	89 c6                	mov    esi,eax
c0015a99:	8d 76 00             	lea    esi,[esi+0x0]
c0015a9c:	85 db                	test   ebx,ebx
c0015a9e:	78 14                	js     c0015ab4 <Process::Process(char const*, Process*, char**)+0x30>
c0015aa0:	83 ec 0c             	sub    esp,0xc
c0015aa3:	56                   	push   esi
c0015aa4:	e8 ef a5 00 00       	call   c0020098 <ThreadControlBlock::ThreadControlBlock()>
c0015aa9:	83 c4 10             	add    esp,0x10
c0015aac:	83 c6 5f             	add    esi,0x5f
c0015aaf:	83 eb 01             	sub    ebx,0x1
c0015ab2:	eb e8                	jmp    c0015a9c <Process::Process(char const*, Process*, char**)+0x18>
c0015ab4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ab8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015abf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ac3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015aca:	83 ec 0c             	sub    esp,0xc
c0015acd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ad1:	e8 3e b9 ff ff       	call   c0011414 <KeNewProcessEnv(Process*)>
c0015ad6:	83 c4 10             	add    esp,0x10
c0015ad9:	89 c2                	mov    edx,eax
c0015adb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015adf:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015ae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ae9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015af2:	a1 60 3f 02 c0       	mov    eax,ds:0xc0023f60
c0015af7:	8d 50 01             	lea    edx,[eax+0x1]
c0015afa:	89 15 60 3f 02 c0    	mov    DWORD PTR ds:0xc0023f60,edx
c0015b00:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b04:	89 02                	mov    DWORD PTR [edx],eax
c0015b06:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015b0e:	83 ec 0c             	sub    esp,0xc
c0015b11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b15:	e8 9c 1f ff ff       	call   c0007ab6 <malloc>
c0015b1a:	83 c4 10             	add    esp,0x10
c0015b1d:	89 c3                	mov    ebx,eax
c0015b1f:	83 ec 08             	sub    esp,0x8
c0015b22:	6a 00                	push   0x0
c0015b24:	53                   	push   ebx
c0015b25:	e8 3e 45 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015b2a:	83 c4 10             	add    esp,0x10
c0015b2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b31:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015b37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b3b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015b45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b49:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b4d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015b53:	e8 e2 be ff ff       	call   c0011a3a <KeInitSignals()>
c0015b58:	89 c2                	mov    edx,eax
c0015b5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b5e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b68:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b6e:	85 c0                	test   eax,eax
c0015b70:	74 42                	je     c0015bb4 <Process::Process(char const*, Process*, char**)+0x130>
c0015b72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b76:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b7c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015b82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b86:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015b8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b90:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b96:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015b9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ba0:	05 0c 01 00 00       	add    eax,0x10c
c0015ba5:	83 ec 08             	sub    esp,0x8
c0015ba8:	52                   	push   edx
c0015ba9:	50                   	push   eax
c0015baa:	e8 91 aa fe ff       	call   c0000640 <strcpy>
c0015baf:	83 c4 10             	add    esp,0x10
c0015bb2:	eb 64                	jmp    c0015c18 <Process::Process(char const*, Process*, char**)+0x194>
c0015bb4:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015bbc:	83 ec 0c             	sub    esp,0xc
c0015bbf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015bc3:	e8 ee 1e ff ff       	call   c0007ab6 <malloc>
c0015bc8:	83 c4 10             	add    esp,0x10
c0015bcb:	89 c3                	mov    ebx,eax
c0015bcd:	83 ec 08             	sub    esp,0x8
c0015bd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bd4:	53                   	push   ebx
c0015bd5:	e8 8c 30 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015bda:	83 c4 10             	add    esp,0x10
c0015bdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015be1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015be7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015beb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015bf1:	83 ec 0c             	sub    esp,0xc
c0015bf4:	50                   	push   eax
c0015bf5:	e8 0a 29 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015bfa:	83 c4 10             	add    esp,0x10
c0015bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c01:	05 0c 01 00 00       	add    eax,0x10c
c0015c06:	83 ec 08             	sub    esp,0x8
c0015c09:	68 5d 29 02 c0       	push   0xc002295d
c0015c0e:	50                   	push   eax
c0015c0f:	e8 2c aa fe ff       	call   c0000640 <strcpy>
c0015c14:	83 c4 10             	add    esp,0x10
c0015c17:	90                   	nop
c0015c18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c1c:	83 c0 0c             	add    eax,0xc
c0015c1f:	83 ec 08             	sub    esp,0x8
c0015c22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c26:	50                   	push   eax
c0015c27:	e8 14 aa fe ff       	call   c0000640 <strcpy>
c0015c2c:	83 c4 10             	add    esp,0x10
c0015c2f:	83 ec 08             	sub    esp,0x8
c0015c32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015c36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c3a:	e8 d9 fd ff ff       	call   c0015a18 <Process::addArgs(char**)>
c0015c3f:	83 c4 10             	add    esp,0x10
c0015c42:	83 ec 08             	sub    esp,0x8
c0015c45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c4d:	e8 65 ed ff ff       	call   c00149b7 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015c52:	83 c4 10             	add    esp,0x10
c0015c55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015c59:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015c5d:	83 f0 01             	xor    eax,0x1
c0015c60:	88 c2                	mov    dl,al
c0015c62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c66:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015c6c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015c71:	83 ec 04             	sub    esp,0x4
c0015c74:	50                   	push   eax
c0015c75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c79:	68 b4 29 02 c0       	push   0xc00229b4
c0015c7e:	e8 c2 4c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015c83:	83 c4 10             	add    esp,0x10
c0015c86:	90                   	nop
c0015c87:	83 c4 14             	add    esp,0x14
c0015c8a:	5b                   	pop    ebx
c0015c8b:	5e                   	pop    esi
c0015c8c:	c3                   	ret    
c0015c8d:	90                   	nop
c0015c8e:	66 90                	xchg   ax,ax

c0015c90 <Process::Process(bool, char const*, Process*, char**)>:
c0015c90:	56                   	push   esi
c0015c91:	53                   	push   ebx
c0015c92:	83 ec 24             	sub    esp,0x24
c0015c95:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015c99:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015c9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ca1:	05 0c 02 00 00       	add    eax,0x20c
c0015ca6:	bb 07 00 00 00       	mov    ebx,0x7
c0015cab:	89 c6                	mov    esi,eax
c0015cad:	8d 76 00             	lea    esi,[esi+0x0]
c0015cb0:	85 db                	test   ebx,ebx
c0015cb2:	78 14                	js     c0015cc8 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015cb4:	83 ec 0c             	sub    esp,0xc
c0015cb7:	56                   	push   esi
c0015cb8:	e8 db a3 00 00       	call   c0020098 <ThreadControlBlock::ThreadControlBlock()>
c0015cbd:	83 c4 10             	add    esp,0x10
c0015cc0:	83 c6 5f             	add    esi,0x5f
c0015cc3:	83 eb 01             	sub    ebx,0x1
c0015cc6:	eb e8                	jmp    c0015cb0 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015cc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ccc:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015cd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cd7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015cde:	83 ec 0c             	sub    esp,0xc
c0015ce1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015ce5:	e8 2a b7 ff ff       	call   c0011414 <KeNewProcessEnv(Process*)>
c0015cea:	83 c4 10             	add    esp,0x10
c0015ced:	89 c2                	mov    edx,eax
c0015cef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cf3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015cf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cfd:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015d06:	a1 60 3f 02 c0       	mov    eax,ds:0xc0023f60
c0015d0b:	8d 50 01             	lea    edx,[eax+0x1]
c0015d0e:	89 15 60 3f 02 c0    	mov    DWORD PTR ds:0xc0023f60,edx
c0015d14:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015d18:	89 02                	mov    DWORD PTR [edx],eax
c0015d1a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015d22:	83 ec 0c             	sub    esp,0xc
c0015d25:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015d29:	e8 88 1d ff ff       	call   c0007ab6 <malloc>
c0015d2e:	83 c4 10             	add    esp,0x10
c0015d31:	89 c3                	mov    ebx,eax
c0015d33:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015d38:	83 ec 08             	sub    esp,0x8
c0015d3b:	50                   	push   eax
c0015d3c:	53                   	push   ebx
c0015d3d:	e8 26 43 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015d42:	83 c4 10             	add    esp,0x10
c0015d45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d49:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015d4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d53:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015d5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d61:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015d65:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015d6b:	e8 ca bc ff ff       	call   c0011a3a <KeInitSignals()>
c0015d70:	89 c2                	mov    edx,eax
c0015d72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d76:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015d7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d80:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d86:	85 c0                	test   eax,eax
c0015d88:	74 42                	je     c0015dcc <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015d8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d8e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d94:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015d9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d9e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015da4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015da8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015dae:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015db4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015db8:	05 0c 01 00 00       	add    eax,0x10c
c0015dbd:	83 ec 08             	sub    esp,0x8
c0015dc0:	52                   	push   edx
c0015dc1:	50                   	push   eax
c0015dc2:	e8 79 a8 fe ff       	call   c0000640 <strcpy>
c0015dc7:	83 c4 10             	add    esp,0x10
c0015dca:	eb 64                	jmp    c0015e30 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015dcc:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015dd4:	83 ec 0c             	sub    esp,0xc
c0015dd7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015ddb:	e8 d6 1c ff ff       	call   c0007ab6 <malloc>
c0015de0:	83 c4 10             	add    esp,0x10
c0015de3:	89 c3                	mov    ebx,eax
c0015de5:	83 ec 08             	sub    esp,0x8
c0015de8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015dec:	53                   	push   ebx
c0015ded:	e8 74 2e ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015df2:	83 c4 10             	add    esp,0x10
c0015df5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015df9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015dff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e09:	83 ec 0c             	sub    esp,0xc
c0015e0c:	50                   	push   eax
c0015e0d:	e8 f2 26 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015e12:	83 c4 10             	add    esp,0x10
c0015e15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e19:	05 0c 01 00 00       	add    eax,0x10c
c0015e1e:	83 ec 08             	sub    esp,0x8
c0015e21:	68 5d 29 02 c0       	push   0xc002295d
c0015e26:	50                   	push   eax
c0015e27:	e8 14 a8 fe ff       	call   c0000640 <strcpy>
c0015e2c:	83 c4 10             	add    esp,0x10
c0015e2f:	90                   	nop
c0015e30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e34:	83 c0 0c             	add    eax,0xc
c0015e37:	83 ec 08             	sub    esp,0x8
c0015e3a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e3e:	50                   	push   eax
c0015e3f:	e8 fc a7 fe ff       	call   c0000640 <strcpy>
c0015e44:	83 c4 10             	add    esp,0x10
c0015e47:	83 ec 08             	sub    esp,0x8
c0015e4a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015e4e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015e52:	e8 c1 fb ff ff       	call   c0015a18 <Process::addArgs(char**)>
c0015e57:	83 c4 10             	add    esp,0x10
c0015e5a:	90                   	nop
c0015e5b:	83 c4 24             	add    esp,0x24
c0015e5e:	5b                   	pop    ebx
c0015e5f:	5e                   	pop    esi
c0015e60:	c3                   	ret    
c0015e61:	8d 76 00             	lea    esi,[esi+0x0]

c0015e64 <taskStartupFunction>:
c0015e64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e69:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015e6c:	c3                   	ret    
c0015e6d:	90                   	nop
c0015e6e:	66 90                	xchg   ax,ax

c0015e70 <Semaphore::Semaphore(int)>:
c0015e70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e78:	89 10                	mov    DWORD PTR [eax],edx
c0015e7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e7e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015e85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e94:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015e9b:	90                   	nop
c0015e9c:	c3                   	ret    
c0015e9d:	90                   	nop
c0015e9e:	66 90                	xchg   ax,ax

c0015ea0 <Mutex::Mutex()>:
c0015ea0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ea4:	6a 01                	push   0x1
c0015ea6:	50                   	push   eax
c0015ea7:	e8 c4 ff ff ff       	call   c0015e70 <Semaphore::Semaphore(int)>
c0015eac:	83 c4 08             	add    esp,0x8
c0015eaf:	90                   	nop
c0015eb0:	c3                   	ret    
c0015eb1:	90                   	nop
c0015eb2:	66 90                	xchg   ax,ax

c0015eb4 <Process::createThread(void (*)(void*), void*, int)>:
c0015eb4:	57                   	push   edi
c0015eb5:	31 c9                	xor    ecx,ecx
c0015eb7:	56                   	push   esi
c0015eb8:	53                   	push   ebx
c0015eb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ebd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015ec4:	89 f2                	mov    edx,esi
c0015ec6:	66 90                	xchg   ax,ax
c0015ec8:	0f b7 c2             	movzx  eax,dx
c0015ecb:	80 e2 01             	and    dl,0x1
c0015ece:	74 14                	je     c0015ee4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015ed0:	d1 f8                	sar    eax,1
c0015ed2:	83 c1 01             	add    ecx,0x1
c0015ed5:	89 c2                	mov    edx,eax
c0015ed7:	83 f9 10             	cmp    ecx,0x10
c0015eda:	75 ec                	jne    c0015ec8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015edc:	31 db                	xor    ebx,ebx
c0015ede:	89 d8                	mov    eax,ebx
c0015ee0:	5b                   	pop    ebx
c0015ee1:	5e                   	pop    esi
c0015ee2:	5f                   	pop    edi
c0015ee3:	c3                   	ret    
c0015ee4:	b8 01 00 00 00       	mov    eax,0x1
c0015ee9:	d3 e0                	shl    eax,cl
c0015eeb:	09 c6                	or     esi,eax
c0015eed:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015ef0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015ef7:	01 c0                	add    eax,eax
c0015ef9:	01 c8                	add    eax,ecx
c0015efb:	8d 04 80             	lea    eax,[eax+eax*4]
c0015efe:	01 d8                	add    eax,ebx
c0015f00:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015f07:	75 0b                	jne    c0015f14 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015f09:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015f13:	90                   	nop
c0015f14:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015f1a:	83 ec 0c             	sub    esp,0xc
c0015f1d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015f20:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015f23:	01 c0                	add    eax,eax
c0015f25:	01 c8                	add    eax,ecx
c0015f27:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015f2a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015f2d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015f33:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015f39:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015f3d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015f43:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015f49:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015f4f:	89 ca                	mov    edx,ecx
c0015f51:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015f58:	f7 da                	neg    edx
c0015f5a:	c1 e2 15             	shl    edx,0x15
c0015f5d:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015f63:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015f69:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015f6d:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015f77:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015f7d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f81:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015f87:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015f91:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015f9b:	68 00 01 00 00       	push   0x100
c0015fa0:	e8 11 1b ff ff       	call   c0007ab6 <malloc>
c0015fa5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015fa8:	58                   	pop    eax
c0015fa9:	5a                   	pop    edx
c0015faa:	53                   	push   ebx
c0015fab:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015fb0:	e8 7b 9e 00 00       	call   c001fe30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015fb5:	83 c4 10             	add    esp,0x10
c0015fb8:	89 d8                	mov    eax,ebx
c0015fba:	5b                   	pop    ebx
c0015fbb:	5e                   	pop    esi
c0015fbc:	5f                   	pop    edi
c0015fbd:	c3                   	ret    
c0015fbe:	66 90                	xchg   ax,ax

c0015fc0 <Process::createUserThread()>:
c0015fc0:	83 ec 0c             	sub    esp,0xc
c0015fc3:	68 80 00 00 00       	push   0x80
c0015fc8:	6a 00                	push   0x0
c0015fca:	68 10 59 01 c0       	push   0xc0015910
c0015fcf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015fd3:	50                   	push   eax
c0015fd4:	e8 db fe ff ff       	call   c0015eb4 <Process::createThread(void (*)(void*), void*, int)>
c0015fd9:	83 c4 1c             	add    esp,0x1c
c0015fdc:	c3                   	ret    
c0015fdd:	8d 76 00             	lea    esi,[esi+0x0]

c0015fe0 <setupMultitasking(void (*)())>:
c0015fe0:	56                   	push   esi
c0015fe1:	53                   	push   ebx
c0015fe2:	83 ec 04             	sub    esp,0x4
c0015fe5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fe9:	eb 11                	jmp    c0015ffc <setupMultitasking(void (*)())+0x1c>
c0015feb:	90                   	nop
c0015fec:	83 ec 0c             	sub    esp,0xc
c0015fef:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015ff4:	e8 7b 9d 00 00       	call   c001fd74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015ff9:	83 c4 10             	add    esp,0x10
c0015ffc:	83 ec 0c             	sub    esp,0xc
c0015fff:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016004:	e8 47 9d 00 00       	call   c001fd50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016009:	83 c4 10             	add    esp,0x10
c001600c:	84 c0                	test   al,al
c001600e:	74 dc                	je     c0015fec <setupMultitasking(void (*)())+0xc>
c0016010:	83 ec 0c             	sub    esp,0xc
c0016013:	68 24 07 00 00       	push   0x724
c0016018:	e8 99 1a ff ff       	call   c0007ab6 <malloc>
c001601d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016024:	89 c3                	mov    ebx,eax
c0016026:	6a 00                	push   0x0
c0016028:	68 61 29 02 c0       	push   0xc0022961
c001602d:	6a 01                	push   0x1
c001602f:	50                   	push   eax
c0016030:	e8 5b fc ff ff       	call   c0015c90 <Process::Process(bool, char const*, Process*, char**)>
c0016035:	83 c4 14             	add    esp,0x14
c0016038:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001603e:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0016044:	50                   	push   eax
c0016045:	e8 0f 27 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c001604a:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0016051:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001605b:	83 c8 01             	or     eax,0x1
c001605e:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0016065:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001606b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001606e:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0016078:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001607e:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0016084:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001608e:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016098:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00160a2:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00160a8:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00160b2:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00160b8:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00160c2:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00160c9:	e8 e8 19 ff ff       	call   c0007ab6 <malloc>
c00160ce:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00160d4:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00160da:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00160e0:	5a                   	pop    edx
c00160e1:	59                   	pop    ecx
c00160e2:	68 5d 29 02 c0       	push   0xc002295d
c00160e7:	50                   	push   eax
c00160e8:	e8 53 a5 fe ff       	call   c0000640 <strcpy>
c00160ed:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00160f4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00160f8:	83 c4 14             	add    esp,0x14
c00160fb:	5b                   	pop    ebx
c00160fc:	5e                   	pop    esi
c00160fd:	e9 67 a1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0016102:	66 90                	xchg   ax,ax

c0016104 <schedule()>:
c0016104:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c001610a:	85 d2                	test   edx,edx
c001610c:	74 0e                	je     c001611c <schedule()+0x18>
c001610e:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0016118:	c3                   	ret    
c0016119:	8d 76 00             	lea    esi,[esi+0x0]
c001611c:	53                   	push   ebx
c001611d:	83 ec 14             	sub    esp,0x14
c0016120:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016125:	e8 26 9c 00 00       	call   c001fd50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001612a:	83 c4 10             	add    esp,0x10
c001612d:	84 c0                	test   al,al
c001612f:	75 3f                	jne    c0016170 <schedule()+0x6c>
c0016131:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016136:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016139:	83 fa 01             	cmp    edx,0x1
c001613c:	74 3a                	je     c0016178 <schedule()+0x74>
c001613e:	66 90                	xchg   ax,ax
c0016140:	83 ec 0c             	sub    esp,0xc
c0016143:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016148:	e8 1f 9c 00 00       	call   c001fd6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001614d:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016154:	89 c3                	mov    ebx,eax
c0016156:	e8 19 9c 00 00       	call   c001fd74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001615b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016162:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016165:	e8 fe f7 ff ff       	call   c0015968 <switchToThread(ThreadControlBlock*)>
c001616a:	83 c4 10             	add    esp,0x10
c001616d:	8d 76 00             	lea    esi,[esi+0x0]
c0016170:	83 c4 08             	add    esp,0x8
c0016173:	5b                   	pop    ebx
c0016174:	c3                   	ret    
c0016175:	8d 76 00             	lea    esi,[esi+0x0]
c0016178:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001617f:	83 ec 08             	sub    esp,0x8
c0016182:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016187:	50                   	push   eax
c0016188:	68 e4 c6 02 c0       	push   0xc002c6e4
c001618d:	e8 9e 9c 00 00       	call   c001fe30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016192:	83 c4 10             	add    esp,0x10
c0016195:	eb a9                	jmp    c0016140 <schedule()+0x3c>
c0016197:	90                   	nop

c0016198 <Semaphore::tryAcquire()>:
c0016198:	53                   	push   ebx
c0016199:	83 ec 08             	sub    esp,0x8
c001619c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00161a0:	fa                   	cli    
c00161a1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161a6:	8d 50 01             	lea    edx,[eax+0x1]
c00161a9:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00161af:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c00161b5:	8d 5a 01             	lea    ebx,[edx+0x1]
c00161b8:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c00161be:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00161c1:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00161c3:	7c 33                	jl     c00161f8 <Semaphore::tryAcquire()+0x60>
c00161c5:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c00161cb:	85 d2                	test   edx,edx
c00161cd:	75 0d                	jne    c00161dc <Semaphore::tryAcquire()+0x44>
c00161cf:	8b 15 c0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c0
c00161d5:	85 d2                	test   edx,edx
c00161d7:	75 6f                	jne    c0016248 <Semaphore::tryAcquire()+0xb0>
c00161d9:	8d 76 00             	lea    esi,[esi+0x0]
c00161dc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161e1:	85 c0                	test   eax,eax
c00161e3:	74 0b                	je     c00161f0 <Semaphore::tryAcquire()+0x58>
c00161e5:	8d 76 00             	lea    esi,[esi+0x0]
c00161e8:	31 c0                	xor    eax,eax
c00161ea:	83 c4 08             	add    esp,0x8
c00161ed:	5b                   	pop    ebx
c00161ee:	c3                   	ret    
c00161ef:	90                   	nop
c00161f0:	fb                   	sti    
c00161f1:	83 c4 08             	add    esp,0x8
c00161f4:	5b                   	pop    ebx
c00161f5:	c3                   	ret    
c00161f6:	66 90                	xchg   ax,ax
c00161f8:	83 c3 01             	add    ebx,0x1
c00161fb:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c0016201:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0016204:	85 d2                	test   edx,edx
c0016206:	75 24                	jne    c001622c <Semaphore::tryAcquire()+0x94>
c0016208:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c001620e:	85 c9                	test   ecx,ecx
c0016210:	74 1a                	je     c001622c <Semaphore::tryAcquire()+0x94>
c0016212:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001621c:	e8 e3 fe ff ff       	call   c0016104 <schedule()>
c0016221:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016226:	83 e8 01             	sub    eax,0x1
c0016229:	8d 76 00             	lea    esi,[esi+0x0]
c001622c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016231:	85 c0                	test   eax,eax
c0016233:	75 0b                	jne    c0016240 <Semaphore::tryAcquire()+0xa8>
c0016235:	fb                   	sti    
c0016236:	b0 01                	mov    al,0x1
c0016238:	83 c4 08             	add    esp,0x8
c001623b:	5b                   	pop    ebx
c001623c:	c3                   	ret    
c001623d:	8d 76 00             	lea    esi,[esi+0x0]
c0016240:	b0 01                	mov    al,0x1
c0016242:	83 c4 08             	add    esp,0x8
c0016245:	5b                   	pop    ebx
c0016246:	c3                   	ret    
c0016247:	90                   	nop
c0016248:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016252:	e8 ad fe ff ff       	call   c0016104 <schedule()>
c0016257:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001625c:	83 e8 01             	sub    eax,0x1
c001625f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016264:	85 c0                	test   eax,eax
c0016266:	75 80                	jne    c00161e8 <Semaphore::tryAcquire()+0x50>
c0016268:	eb 86                	jmp    c00161f0 <Semaphore::tryAcquire()+0x58>
c001626a:	66 90                	xchg   ax,ax

c001626c <Semaphore::assertLocked(char const*)>:
c001626c:	83 ec 0c             	sub    esp,0xc
c001626f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016273:	fa                   	cli    
c0016274:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c001627a:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001627f:	83 c1 01             	add    ecx,0x1
c0016282:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016288:	8d 48 01             	lea    ecx,[eax+0x1]
c001628b:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016291:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0016293:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0016296:	7c 28                	jl     c00162c0 <Semaphore::assertLocked(char const*)+0x54>
c0016298:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001629d:	85 c0                	test   eax,eax
c001629f:	75 0b                	jne    c00162ac <Semaphore::assertLocked(char const*)+0x40>
c00162a1:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00162a6:	85 c0                	test   eax,eax
c00162a8:	75 32                	jne    c00162dc <Semaphore::assertLocked(char const*)+0x70>
c00162aa:	66 90                	xchg   ax,ax
c00162ac:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162b1:	83 e8 01             	sub    eax,0x1
c00162b4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162b9:	75 01                	jne    c00162bc <Semaphore::assertLocked(char const*)+0x50>
c00162bb:	fb                   	sti    
c00162bc:	83 c4 0c             	add    esp,0xc
c00162bf:	c3                   	ret    
c00162c0:	83 ec 0c             	sub    esp,0xc
c00162c3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00162c7:	52                   	push   edx
c00162c8:	e8 52 b3 ff ff       	call   c001161f <KePanic(char const*)>
c00162cd:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00162d2:	83 c4 10             	add    esp,0x10
c00162d5:	83 e8 01             	sub    eax,0x1
c00162d8:	eb be                	jmp    c0016298 <Semaphore::assertLocked(char const*)+0x2c>
c00162da:	66 90                	xchg   ax,ax
c00162dc:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00162e6:	e8 19 fe ff ff       	call   c0016104 <schedule()>
c00162eb:	eb bf                	jmp    c00162ac <Semaphore::assertLocked(char const*)+0x40>
c00162ed:	8d 76 00             	lea    esi,[esi+0x0]

c00162f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00162f0:	83 ec 0c             	sub    esp,0xc
c00162f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162fc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00162ff:	e8 00 fe ff ff       	call   c0016104 <schedule()>
c0016304:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016309:	83 e8 01             	sub    eax,0x1
c001630c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016311:	75 01                	jne    c0016314 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0016313:	fb                   	sti    
c0016314:	83 c4 0c             	add    esp,0xc
c0016317:	c3                   	ret    

c0016318 <blockTask(TaskState)>:
c0016318:	83 ec 0c             	sub    esp,0xc
c001631b:	fa                   	cli    
c001631c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016321:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016325:	83 c0 01             	add    eax,0x1
c0016328:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001632d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016332:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016335:	e8 ca fd ff ff       	call   c0016104 <schedule()>
c001633a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001633f:	83 e8 01             	sub    eax,0x1
c0016342:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016347:	75 03                	jne    c001634c <blockTask(TaskState)+0x34>
c0016349:	fb                   	sti    
c001634a:	66 90                	xchg   ax,ax
c001634c:	83 c4 0c             	add    esp,0xc
c001634f:	c3                   	ret    

c0016350 <waitTask(int, int*, int)>:
c0016350:	83 ec 18             	sub    esp,0x18
c0016353:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016358:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001635c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001635f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016363:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016368:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001636b:	6a 07                	push   0x7
c001636d:	e8 a6 ff ff ff       	call   c0016318 <blockTask(TaskState)>
c0016372:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016377:	83 c4 10             	add    esp,0x10
c001637a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001637d:	85 d2                	test   edx,edx
c001637f:	74 0b                	je     c001638c <waitTask(int, int*, int)+0x3c>
c0016381:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0016384:	89 02                	mov    DWORD PTR [edx],eax
c0016386:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001638b:	90                   	nop
c001638c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001638f:	83 c4 0c             	add    esp,0xc
c0016392:	c3                   	ret    
c0016393:	90                   	nop

c0016394 <milliTenthSleepUntil(unsigned int)>:
c0016394:	83 ec 0c             	sub    esp,0xc
c0016397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001639b:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c00163a1:	76 05                	jbe    c00163a8 <milliTenthSleepUntil(unsigned int)+0x14>
c00163a3:	90                   	nop
c00163a4:	83 c4 0c             	add    esp,0xc
c00163a7:	c3                   	ret    
c00163a8:	fa                   	cli    
c00163a9:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00163af:	83 ec 08             	sub    esp,0x8
c00163b2:	83 c2 01             	add    edx,0x1
c00163b5:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00163bb:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00163c1:	83 c1 01             	add    ecx,0x1
c00163c4:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00163ca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163d0:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00163d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d8:	50                   	push   eax
c00163d9:	68 d8 c6 02 c0       	push   0xc002c6d8
c00163de:	e8 4d 9a 00 00       	call   c001fe30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00163e3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00163ea:	e8 29 ff ff ff       	call   c0016318 <blockTask(TaskState)>
c00163ef:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00163f4:	83 c4 10             	add    esp,0x10
c00163f7:	83 e8 01             	sub    eax,0x1
c00163fa:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00163ff:	85 c0                	test   eax,eax
c0016401:	75 09                	jne    c001640c <milliTenthSleepUntil(unsigned int)+0x78>
c0016403:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016408:	85 c0                	test   eax,eax
c001640a:	75 14                	jne    c0016420 <milliTenthSleepUntil(unsigned int)+0x8c>
c001640c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016411:	83 e8 01             	sub    eax,0x1
c0016414:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016419:	75 89                	jne    c00163a4 <milliTenthSleepUntil(unsigned int)+0x10>
c001641b:	fb                   	sti    
c001641c:	83 c4 0c             	add    esp,0xc
c001641f:	c3                   	ret    
c0016420:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001642a:	e8 d5 fc ff ff       	call   c0016104 <schedule()>
c001642f:	eb db                	jmp    c001640c <milliTenthSleepUntil(unsigned int)+0x78>
c0016431:	8d 76 00             	lea    esi,[esi+0x0]

c0016434 <milliTenthSleep(unsigned int)>:
c0016434:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016438:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c001643d:	01 c2                	add    edx,eax
c001643f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016443:	e9 4c ff ff ff       	jmp    c0016394 <milliTenthSleepUntil(unsigned int)>

c0016448 <sleep(unsigned int)>:
c0016448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001644c:	8d 04 80             	lea    eax,[eax+eax*4]
c001644f:	8d 04 80             	lea    eax,[eax+eax*4]
c0016452:	8d 04 80             	lea    eax,[eax+eax*4]
c0016455:	8d 04 80             	lea    eax,[eax+eax*4]
c0016458:	c1 e0 04             	shl    eax,0x4
c001645b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001645f:	eb d3                	jmp    c0016434 <milliTenthSleep(unsigned int)>
c0016461:	90                   	nop
c0016462:	66 90                	xchg   ax,ax

c0016464 <Semaphore::acquire()>:
c0016464:	83 ec 0c             	sub    esp,0xc
c0016467:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001646b:	fa                   	cli    
c001646c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016471:	83 c0 01             	add    eax,0x1
c0016474:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016479:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001647e:	8d 48 01             	lea    ecx,[eax+0x1]
c0016481:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016487:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001648a:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001648c:	7d 2e                	jge    c00164bc <Semaphore::acquire()+0x58>
c001648e:	83 c1 01             	add    ecx,0x1
c0016491:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016494:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016499:	85 c0                	test   eax,eax
c001649b:	75 0b                	jne    c00164a8 <Semaphore::acquire()+0x44>
c001649d:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00164a2:	85 c0                	test   eax,eax
c00164a4:	75 66                	jne    c001650c <Semaphore::acquire()+0xa8>
c00164a6:	66 90                	xchg   ax,ax
c00164a8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164ad:	83 e8 01             	sub    eax,0x1
c00164b0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164b5:	75 01                	jne    c00164b8 <Semaphore::acquire()+0x54>
c00164b7:	fb                   	sti    
c00164b8:	83 c4 0c             	add    esp,0xc
c00164bb:	c3                   	ret    
c00164bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164c1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00164c8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00164cb:	85 c9                	test   ecx,ecx
c00164cd:	74 51                	je     c0016520 <Semaphore::acquire()+0xbc>
c00164cf:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00164d2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00164d8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00164db:	90                   	nop
c00164dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164e1:	83 ec 0c             	sub    esp,0xc
c00164e4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00164e7:	68 e0 29 02 c0       	push   0xc00229e0
c00164ec:	e8 54 44 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00164f1:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00164f8:	e8 1b fe ff ff       	call   c0016318 <blockTask(TaskState)>
c00164fd:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016502:	83 c4 10             	add    esp,0x10
c0016505:	83 e8 01             	sub    eax,0x1
c0016508:	eb 8a                	jmp    c0016494 <Semaphore::acquire()+0x30>
c001650a:	66 90                	xchg   ax,ax
c001650c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016516:	e8 e9 fb ff ff       	call   c0016104 <schedule()>
c001651b:	eb 8b                	jmp    c00164a8 <Semaphore::acquire()+0x44>
c001651d:	8d 76 00             	lea    esi,[esi+0x0]
c0016520:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016525:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016528:	eb b2                	jmp    c00164dc <Semaphore::acquire()+0x78>
c001652a:	66 90                	xchg   ax,ax

c001652c <taskReturned>:
c001652c:	83 ec 18             	sub    esp,0x18
c001652f:	68 00 2a 02 c0       	push   0xc0022a00
c0016534:	e8 e6 b0 ff ff       	call   c001161f <KePanic(char const*)>
c0016539:	83 c4 10             	add    esp,0x10
c001653c:	83 ec 0c             	sub    esp,0xc
c001653f:	6a 02                	push   0x2
c0016541:	e8 d2 fd ff ff       	call   c0016318 <blockTask(TaskState)>
c0016546:	fa                   	cli    
c0016547:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001654c:	83 c0 01             	add    eax,0x1
c001654f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016554:	e8 ab fb ff ff       	call   c0016104 <schedule()>
c0016559:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001655e:	83 c4 10             	add    esp,0x10
c0016561:	83 e8 01             	sub    eax,0x1
c0016564:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016569:	85 c0                	test   eax,eax
c001656b:	75 cf                	jne    c001653c <taskReturned+0x10>
c001656d:	fb                   	sti    
c001656e:	eb cc                	jmp    c001653c <taskReturned+0x10>

c0016570 <Thr::processFromPID(int)>:
c0016570:	57                   	push   edi
c0016571:	56                   	push   esi
c0016572:	53                   	push   ebx
c0016573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016577:	fa                   	cli    
c0016578:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c001657e:	83 ec 0c             	sub    esp,0xc
c0016581:	83 c1 01             	add    ecx,0x1
c0016584:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016589:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c001658f:	e8 d8 97 00 00       	call   c001fd6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016594:	83 c4 10             	add    esp,0x10
c0016597:	89 c7                	mov    edi,eax
c0016599:	eb 15                	jmp    c00165b0 <Thr::processFromPID(int)+0x40>
c001659b:	90                   	nop
c001659c:	83 ec 0c             	sub    esp,0xc
c001659f:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165a4:	e8 c3 97 00 00       	call   c001fd6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165a9:	83 c4 10             	add    esp,0x10
c00165ac:	39 f8                	cmp    eax,edi
c00165ae:	74 50                	je     c0016600 <Thr::processFromPID(int)+0x90>
c00165b0:	83 ec 0c             	sub    esp,0xc
c00165b3:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165b8:	e8 af 97 00 00       	call   c001fd6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165bd:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00165c4:	89 c3                	mov    ebx,eax
c00165c6:	e8 a9 97 00 00       	call   c001fd74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00165cb:	58                   	pop    eax
c00165cc:	5a                   	pop    edx
c00165cd:	53                   	push   ebx
c00165ce:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165d3:	e8 58 98 00 00       	call   c001fe30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00165d8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165db:	83 c4 10             	add    esp,0x10
c00165de:	39 30                	cmp    DWORD PTR [eax],esi
c00165e0:	75 ba                	jne    c001659c <Thr::processFromPID(int)+0x2c>
c00165e2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165e7:	83 e8 01             	sub    eax,0x1
c00165ea:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165ef:	74 0b                	je     c00165fc <Thr::processFromPID(int)+0x8c>
c00165f1:	8d 76 00             	lea    esi,[esi+0x0]
c00165f4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165f7:	5b                   	pop    ebx
c00165f8:	5e                   	pop    esi
c00165f9:	5f                   	pop    edi
c00165fa:	c3                   	ret    
c00165fb:	90                   	nop
c00165fc:	fb                   	sti    
c00165fd:	eb f5                	jmp    c00165f4 <Thr::processFromPID(int)+0x84>
c00165ff:	90                   	nop
c0016600:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016605:	83 e8 01             	sub    eax,0x1
c0016608:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001660d:	75 05                	jne    c0016614 <Thr::processFromPID(int)+0xa4>
c001660f:	fb                   	sti    
c0016610:	5b                   	pop    ebx
c0016611:	5e                   	pop    esi
c0016612:	5f                   	pop    edi
c0016613:	c3                   	ret    
c0016614:	5b                   	pop    ebx
c0016615:	31 c0                	xor    eax,eax
c0016617:	5e                   	pop    esi
c0016618:	5f                   	pop    edi
c0016619:	c3                   	ret    
c001661a:	66 90                	xchg   ax,ax

c001661c <unblockTask(ThreadControlBlock*)>:
c001661c:	53                   	push   ebx
c001661d:	83 ec 08             	sub    esp,0x8
c0016620:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016624:	fa                   	cli    
c0016625:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001662a:	83 c0 01             	add    eax,0x1
c001662d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016632:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016635:	85 c0                	test   eax,eax
c0016637:	74 67                	je     c00166a0 <unblockTask(ThreadControlBlock*)+0x84>
c0016639:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001663c:	83 f8 01             	cmp    eax,0x1
c001663f:	74 37                	je     c0016678 <unblockTask(ThreadControlBlock*)+0x5c>
c0016641:	83 ec 0c             	sub    esp,0xc
c0016644:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016649:	e8 1e 97 00 00       	call   c001fd6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001664e:	83 c4 10             	add    esp,0x10
c0016651:	85 c0                	test   eax,eax
c0016653:	75 1b                	jne    c0016670 <unblockTask(ThreadControlBlock*)+0x54>
c0016655:	eb 5d                	jmp    c00166b4 <unblockTask(ThreadControlBlock*)+0x98>
c0016657:	90                   	nop
c0016658:	83 ec 08             	sub    esp,0x8
c001665b:	50                   	push   eax
c001665c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016661:	e8 26 9a 00 00       	call   c002008c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016666:	83 c4 10             	add    esp,0x10
c0016669:	85 c0                	test   eax,eax
c001666b:	74 47                	je     c00166b4 <unblockTask(ThreadControlBlock*)+0x98>
c001666d:	8d 76 00             	lea    esi,[esi+0x0]
c0016670:	39 c3                	cmp    ebx,eax
c0016672:	75 e4                	jne    c0016658 <unblockTask(ThreadControlBlock*)+0x3c>
c0016674:	eb 12                	jmp    c0016688 <unblockTask(ThreadControlBlock*)+0x6c>
c0016676:	66 90                	xchg   ax,ax
c0016678:	83 ec 0c             	sub    esp,0xc
c001667b:	68 7f 29 02 c0       	push   0xc002297f
c0016680:	e8 c0 42 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016685:	83 c4 10             	add    esp,0x10
c0016688:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001668d:	83 e8 01             	sub    eax,0x1
c0016690:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016695:	75 01                	jne    c0016698 <unblockTask(ThreadControlBlock*)+0x7c>
c0016697:	fb                   	sti    
c0016698:	83 c4 08             	add    esp,0x8
c001669b:	5b                   	pop    ebx
c001669c:	c3                   	ret    
c001669d:	8d 76 00             	lea    esi,[esi+0x0]
c00166a0:	83 ec 0c             	sub    esp,0xc
c00166a3:	68 68 29 02 c0       	push   0xc0022968
c00166a8:	e8 98 42 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00166ad:	83 c4 10             	add    esp,0x10
c00166b0:	eb d6                	jmp    c0016688 <unblockTask(ThreadControlBlock*)+0x6c>
c00166b2:	66 90                	xchg   ax,ax
c00166b4:	83 ec 08             	sub    esp,0x8
c00166b7:	53                   	push   ebx
c00166b8:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166bd:	e8 6e 97 00 00       	call   c001fe30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166c2:	83 c4 10             	add    esp,0x10
c00166c5:	eb c1                	jmp    c0016688 <unblockTask(ThreadControlBlock*)+0x6c>
c00166c7:	90                   	nop

c00166c8 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00166c8:	55                   	push   ebp
c00166c9:	57                   	push   edi
c00166ca:	56                   	push   esi
c00166cb:	53                   	push   ebx
c00166cc:	83 ec 1c             	sub    esp,0x1c
c00166cf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00166d3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166d6:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00166dc:	85 ed                	test   ebp,ebp
c00166de:	7e 28                	jle    c0016708 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00166e0:	31 f6                	xor    esi,esi
c00166e2:	66 90                	xchg   ax,ax
c00166e4:	83 ec 0c             	sub    esp,0xc
c00166e7:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00166ee:	83 c6 01             	add    esi,0x1
c00166f1:	57                   	push   edi
c00166f2:	e8 cf 13 ff ff       	call   c0007ac6 <free>
c00166f7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166fa:	83 c4 10             	add    esp,0x10
c00166fd:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016703:	7f df                	jg     c00166e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016705:	8d 76 00             	lea    esi,[esi+0x0]
c0016708:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016712:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016717:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001671a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c001671d:	d3 c0                	rol    eax,cl
c001671f:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016726:	21 c8                	and    eax,ecx
c0016728:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001672f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016732:	89 f7                	mov    edi,esi
c0016734:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001673c:	0f 85 72 01 00 00    	jne    c00168b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016742:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016748:	85 ed                	test   ebp,ebp
c001674a:	74 1c                	je     c0016768 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c001674c:	83 ec 0c             	sub    esp,0xc
c001674f:	55                   	push   ebp
c0016750:	e8 db ab ff ff       	call   c0011330 <EnvVarContainer::~EnvVarContainer()>
c0016755:	59                   	pop    ecx
c0016756:	5e                   	pop    esi
c0016757:	6a 0c                	push   0xc
c0016759:	55                   	push   ebp
c001675a:	e8 b9 40 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001675f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016762:	83 c4 10             	add    esp,0x10
c0016765:	89 f7                	mov    edi,esi
c0016767:	90                   	nop
c0016768:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001676e:	85 c0                	test   eax,eax
c0016770:	0f 84 b2 00 00 00    	je     c0016828 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016776:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016779:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001677d:	31 c9                	xor    ecx,ecx
c001677f:	eb 17                	jmp    c0016798 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016781:	8d 76 00             	lea    esi,[esi+0x0]
c0016784:	83 c1 01             	add    ecx,0x1
c0016787:	83 f9 10             	cmp    ecx,0x10
c001678a:	0f 84 98 00 00 00    	je     c0016828 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016790:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016796:	66 90                	xchg   ax,ax
c0016798:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001679f:	d3 fa                	sar    edx,cl
c00167a1:	80 e2 01             	and    dl,0x1
c00167a4:	74 de                	je     c0016784 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167a6:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00167a9:	01 d2                	add    edx,edx
c00167ab:	01 ca                	add    edx,ecx
c00167ad:	8d 14 92             	lea    edx,[edx+edx*4]
c00167b0:	01 d0                	add    eax,edx
c00167b2:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00167b8:	83 fd 07             	cmp    ebp,0x7
c00167bb:	75 c7                	jne    c0016784 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167bd:	05 40 02 00 00       	add    eax,0x240
c00167c2:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00167c5:	83 fd ff             	cmp    ebp,0xffffffff
c00167c8:	0f 8c ee 00 00 00    	jl     c00168bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00167ce:	0f 84 ac 01 00 00    	je     c0016980 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00167d4:	85 ed                	test   ebp,ebp
c00167d6:	0f 84 90 01 00 00    	je     c001696c <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00167dc:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00167de:	75 a4                	jne    c0016784 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167e0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00167e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00167ea:	01 d0                	add    eax,edx
c00167ec:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00167f0:	83 ec 0c             	sub    esp,0xc
c00167f3:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00167f9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167fc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016802:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016809:	50                   	push   eax
c001680a:	e8 0d fe ff ff       	call   c001661c <unblockTask(ThreadControlBlock*)>
c001680f:	83 c4 10             	add    esp,0x10
c0016812:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016815:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016819:	89 f7                	mov    edi,esi
c001681b:	83 c1 01             	add    ecx,0x1
c001681e:	83 f9 10             	cmp    ecx,0x10
c0016821:	0f 85 69 ff ff ff    	jne    c0016790 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016827:	90                   	nop
c0016828:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001682e:	85 c0                	test   eax,eax
c0016830:	74 62                	je     c0016894 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016832:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016838:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001683e:	74 54                	je     c0016894 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016840:	83 ec 0c             	sub    esp,0xc
c0016843:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016848:	e8 1f 95 00 00       	call   c001fd6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001684d:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016854:	89 c7                	mov    edi,eax
c0016856:	e8 f5 94 00 00       	call   c001fd50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001685b:	83 c4 10             	add    esp,0x10
c001685e:	84 c0                	test   al,al
c0016860:	0f 84 ce 00 00 00    	je     c0016934 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016866:	66 90                	xchg   ax,ax
c0016868:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001686b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016871:	85 d2                	test   edx,edx
c0016873:	74 0f                	je     c0016884 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016875:	83 ec 0c             	sub    esp,0xc
c0016878:	8b 02                	mov    eax,DWORD PTR [edx]
c001687a:	52                   	push   edx
c001687b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001687e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016881:	83 c4 10             	add    esp,0x10
c0016884:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001688e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016891:	8d 76 00             	lea    esi,[esi+0x0]
c0016894:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001689a:	85 db                	test   ebx,ebx
c001689c:	74 16                	je     c00168b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001689e:	83 ec 0c             	sub    esp,0xc
c00168a1:	53                   	push   ebx
c00168a2:	e8 0b 33 ff ff       	call   c0009bb2 <VAS::~VAS()>
c00168a7:	58                   	pop    eax
c00168a8:	5a                   	pop    edx
c00168a9:	6a 14                	push   0x14
c00168ab:	53                   	push   ebx
c00168ac:	e8 67 3f ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00168b1:	83 c4 10             	add    esp,0x10
c00168b4:	83 c4 1c             	add    esp,0x1c
c00168b7:	5b                   	pop    ebx
c00168b8:	5e                   	pop    esi
c00168b9:	5f                   	pop    edi
c00168ba:	5d                   	pop    ebp
c00168bb:	c3                   	ret    
c00168bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00168c0:	83 ec 0c             	sub    esp,0xc
c00168c3:	68 34 2a 02 c0       	push   0xc0022a34
c00168c8:	e8 52 ad ff ff       	call   c001161f <KePanic(char const*)>
c00168cd:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00168d0:	83 c4 10             	add    esp,0x10
c00168d3:	89 f7                	mov    edi,esi
c00168d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00168d9:	e9 a6 fe ff ff       	jmp    c0016784 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00168de:	66 90                	xchg   ax,ax
c00168e0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168e6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00168ec:	75 1e                	jne    c001690c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168ee:	83 ec 0c             	sub    esp,0xc
c00168f1:	68 9c 2a 02 c0       	push   0xc0022a9c
c00168f6:	e8 4a 40 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00168fb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016902:	e8 11 fa ff ff       	call   c0016318 <blockTask(TaskState)>
c0016907:	83 c4 10             	add    esp,0x10
c001690a:	66 90                	xchg   ax,ax
c001690c:	83 ec 08             	sub    esp,0x8
c001690f:	56                   	push   esi
c0016910:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016915:	e8 16 95 00 00       	call   c001fe30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001691a:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016921:	e8 46 94 00 00       	call   c001fd6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016926:	83 c4 10             	add    esp,0x10
c0016929:	39 f8                	cmp    eax,edi
c001692b:	0f 84 37 ff ff ff    	je     c0016868 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016931:	8d 76 00             	lea    esi,[esi+0x0]
c0016934:	83 ec 0c             	sub    esp,0xc
c0016937:	68 e4 c6 02 c0       	push   0xc002c6e4
c001693c:	e8 2b 94 00 00       	call   c001fd6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016941:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016948:	89 c6                	mov    esi,eax
c001694a:	e8 25 94 00 00       	call   c001fd74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001694f:	83 c4 10             	add    esp,0x10
c0016952:	39 f3                	cmp    ebx,esi
c0016954:	74 b6                	je     c001690c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016956:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016959:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001695c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016962:	75 a8                	jne    c001690c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016964:	e9 77 ff ff ff       	jmp    c00168e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016969:	8d 76 00             	lea    esi,[esi+0x0]
c001696c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016970:	83 ec 0c             	sub    esp,0xc
c0016973:	68 68 2a 02 c0       	push   0xc0022a68
c0016978:	e9 4b ff ff ff       	jmp    c00168c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c001697d:	8d 76 00             	lea    esi,[esi+0x0]
c0016980:	8b 36                	mov    esi,DWORD PTR [esi]
c0016982:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016986:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016989:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001698c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016992:	01 d7                	add    edi,edx
c0016994:	89 f8                	mov    eax,edi
c0016996:	e9 51 fe ff ff       	jmp    c00167ec <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c001699b:	90                   	nop

c001699c <cleanerTaskFunction(void*)>:
c001699c:	53                   	push   ebx
c001699d:	83 ec 08             	sub    esp,0x8
c00169a0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169a5:	83 e8 01             	sub    eax,0x1
c00169a8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169ad:	75 01                	jne    c00169b0 <cleanerTaskFunction(void*)+0x14>
c00169af:	fb                   	sti    
c00169b0:	fa                   	cli    
c00169b1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169b6:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c00169bd:	8d 50 01             	lea    edx,[eax+0x1]
c00169c0:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00169c6:	0f 84 c4 00 00 00    	je     c0016a90 <cleanerTaskFunction(void*)+0xf4>
c00169cc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169d1:	85 c0                	test   eax,eax
c00169d3:	75 03                	jne    c00169d8 <cleanerTaskFunction(void*)+0x3c>
c00169d5:	fb                   	sti    
c00169d6:	66 90                	xchg   ax,ax
c00169d8:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c00169df:	fa                   	cli    
c00169e0:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00169e6:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00169ec:	83 c2 01             	add    edx,0x1
c00169ef:	83 c1 01             	add    ecx,0x1
c00169f2:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00169f8:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00169fe:	fa                   	cli    
c00169ff:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016a05:	83 c3 01             	add    ebx,0x1
c0016a08:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c0016a0e:	eb 28                	jmp    c0016a38 <cleanerTaskFunction(void*)+0x9c>
c0016a10:	83 ec 0c             	sub    esp,0xc
c0016a13:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a18:	e8 4f 93 00 00       	call   c001fd6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a1d:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0016a24:	89 c3                	mov    ebx,eax
c0016a26:	e8 49 93 00 00       	call   c001fd74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016a2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a2e:	e8 95 fc ff ff       	call   c00166c8 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016a33:	83 c4 10             	add    esp,0x10
c0016a36:	66 90                	xchg   ax,ax
c0016a38:	83 ec 0c             	sub    esp,0xc
c0016a3b:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a40:	e8 0b 93 00 00       	call   c001fd50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016a45:	83 c4 10             	add    esp,0x10
c0016a48:	84 c0                	test   al,al
c0016a4a:	74 c4                	je     c0016a10 <cleanerTaskFunction(void*)+0x74>
c0016a4c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a51:	83 e8 01             	sub    eax,0x1
c0016a54:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a59:	75 01                	jne    c0016a5c <cleanerTaskFunction(void*)+0xc0>
c0016a5b:	fb                   	sti    
c0016a5c:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016a61:	83 e8 01             	sub    eax,0x1
c0016a64:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016a69:	0f 85 31 ff ff ff    	jne    c00169a0 <cleanerTaskFunction(void*)+0x4>
c0016a6f:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016a74:	85 c0                	test   eax,eax
c0016a76:	0f 84 24 ff ff ff    	je     c00169a0 <cleanerTaskFunction(void*)+0x4>
c0016a7c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016a86:	e8 79 f6 ff ff       	call   c0016104 <schedule()>
c0016a8b:	e9 10 ff ff ff       	jmp    c00169a0 <cleanerTaskFunction(void*)+0x4>
c0016a90:	83 ec 0c             	sub    esp,0xc
c0016a93:	6a 02                	push   0x2
c0016a95:	e8 56 f8 ff ff       	call   c00162f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016a9a:	83 c4 10             	add    esp,0x10
c0016a9d:	e9 36 ff ff ff       	jmp    c00169d8 <cleanerTaskFunction(void*)+0x3c>
c0016aa2:	66 90                	xchg   ax,ax

c0016aa4 <terminateTask(int)>:
c0016aa4:	83 ec 14             	sub    esp,0x14
c0016aa7:	fa                   	cli    
c0016aa8:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016aae:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016ab4:	83 c2 01             	add    edx,0x1
c0016ab7:	83 c1 01             	add    ecx,0x1
c0016aba:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016ac0:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016ac6:	fa                   	cli    
c0016ac7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016acc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ad0:	83 c0 01             	add    eax,0x1
c0016ad3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ad8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016add:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016ae0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ae5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016ae8:	50                   	push   eax
c0016ae9:	68 cc c6 02 c0       	push   0xc002c6cc
c0016aee:	e8 3d 93 00 00       	call   c001fe30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016af3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016af8:	83 c4 10             	add    esp,0x10
c0016afb:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016b02:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016b07:	85 c0                	test   eax,eax
c0016b09:	74 65                	je     c0016b70 <terminateTask(int)+0xcc>
c0016b0b:	83 ec 0c             	sub    esp,0xc
c0016b0e:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016b15:	50                   	push   eax
c0016b16:	e8 01 fb ff ff       	call   c001661c <unblockTask(ThreadControlBlock*)>
c0016b1b:	83 c4 10             	add    esp,0x10
c0016b1e:	66 90                	xchg   ax,ax
c0016b20:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b25:	83 e8 01             	sub    eax,0x1
c0016b28:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b2d:	75 01                	jne    c0016b30 <terminateTask(int)+0x8c>
c0016b2f:	fb                   	sti    
c0016b30:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b35:	83 e8 01             	sub    eax,0x1
c0016b38:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b3d:	75 09                	jne    c0016b48 <terminateTask(int)+0xa4>
c0016b3f:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016b46:	75 3c                	jne    c0016b84 <terminateTask(int)+0xe0>
c0016b48:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b4d:	83 e8 01             	sub    eax,0x1
c0016b50:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b55:	75 01                	jne    c0016b58 <terminateTask(int)+0xb4>
c0016b57:	fb                   	sti    
c0016b58:	fa                   	cli    
c0016b59:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b5e:	83 c0 01             	add    eax,0x1
c0016b61:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b66:	66 90                	xchg   ax,ax
c0016b68:	e8 97 f5 ff ff       	call   c0016104 <schedule()>
c0016b6d:	eb d9                	jmp    c0016b48 <terminateTask(int)+0xa4>
c0016b6f:	90                   	nop
c0016b70:	83 ec 0c             	sub    esp,0xc
c0016b73:	68 96 29 02 c0       	push   0xc0022996
c0016b78:	e8 c8 3d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016b7d:	83 c4 10             	add    esp,0x10
c0016b80:	eb 9e                	jmp    c0016b20 <terminateTask(int)+0x7c>
c0016b82:	66 90                	xchg   ax,ax
c0016b84:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b8e:	eb d8                	jmp    c0016b68 <terminateTask(int)+0xc4>

c0016b90 <Thr::terminateFromIRQ(int)>:
c0016b90:	83 ec 18             	sub    esp,0x18
c0016b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b97:	50                   	push   eax
c0016b98:	e8 07 ff ff ff       	call   c0016aa4 <terminateTask(int)>
c0016b9d:	90                   	nop
c0016b9e:	66 90                	xchg   ax,ax

c0016ba0 <Semaphore::release()>:
c0016ba0:	83 ec 0c             	sub    esp,0xc
c0016ba3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016ba7:	fa                   	cli    
c0016ba8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bad:	83 c0 01             	add    eax,0x1
c0016bb0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bb5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016bba:	8d 48 01             	lea    ecx,[eax+0x1]
c0016bbd:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016bc3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016bc6:	85 c9                	test   ecx,ecx
c0016bc8:	74 42                	je     c0016c0c <Semaphore::release()+0x6c>
c0016bca:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016bcd:	83 ec 0c             	sub    esp,0xc
c0016bd0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016bd3:	51                   	push   ecx
c0016bd4:	e8 43 fa ff ff       	call   c001661c <unblockTask(ThreadControlBlock*)>
c0016bd9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016bde:	83 c4 10             	add    esp,0x10
c0016be1:	83 e8 01             	sub    eax,0x1
c0016be4:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016be9:	85 c0                	test   eax,eax
c0016beb:	75 0b                	jne    c0016bf8 <Semaphore::release()+0x58>
c0016bed:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016bf2:	85 c0                	test   eax,eax
c0016bf4:	75 22                	jne    c0016c18 <Semaphore::release()+0x78>
c0016bf6:	66 90                	xchg   ax,ax
c0016bf8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bfd:	83 e8 01             	sub    eax,0x1
c0016c00:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c05:	75 01                	jne    c0016c08 <Semaphore::release()+0x68>
c0016c07:	fb                   	sti    
c0016c08:	83 c4 0c             	add    esp,0xc
c0016c0b:	c3                   	ret    
c0016c0c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016c0f:	83 e9 01             	sub    ecx,0x1
c0016c12:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016c15:	eb cd                	jmp    c0016be4 <Semaphore::release()+0x44>
c0016c17:	90                   	nop
c0016c18:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016c22:	e8 dd f4 ff ff       	call   c0016104 <schedule()>
c0016c27:	eb cf                	jmp    c0016bf8 <Semaphore::release()+0x58>
c0016c29:	8d 76 00             	lea    esi,[esi+0x0]

c0016c2c <__static_initialization_and_destruction_0(int, int)>:
c0016c2c:	83 ec 0c             	sub    esp,0xc
c0016c2f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016c34:	0f 85 8e 00 00 00    	jne    c0016cc8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c3a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016c42:	0f 85 80 00 00 00    	jne    c0016cc8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c48:	83 ec 0c             	sub    esp,0xc
c0016c4b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c50:	e8 8f 94 00 00       	call   c00200e4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c55:	83 c4 10             	add    esp,0x10
c0016c58:	83 ec 04             	sub    esp,0x4
c0016c5b:	68 6c 36 02 c0       	push   0xc002366c
c0016c60:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c65:	68 94 00 02 c0       	push   0xc0020094
c0016c6a:	e8 59 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016c6f:	83 c4 10             	add    esp,0x10
c0016c72:	83 ec 0c             	sub    esp,0xc
c0016c75:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c7a:	e8 65 94 00 00       	call   c00200e4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c7f:	83 c4 10             	add    esp,0x10
c0016c82:	83 ec 04             	sub    esp,0x4
c0016c85:	68 6c 36 02 c0       	push   0xc002366c
c0016c8a:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c8f:	68 94 00 02 c0       	push   0xc0020094
c0016c94:	e8 2f 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016c99:	83 c4 10             	add    esp,0x10
c0016c9c:	83 ec 0c             	sub    esp,0xc
c0016c9f:	68 cc c6 02 c0       	push   0xc002c6cc
c0016ca4:	e8 3b 94 00 00       	call   c00200e4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016ca9:	83 c4 10             	add    esp,0x10
c0016cac:	83 ec 04             	sub    esp,0x4
c0016caf:	68 6c 36 02 c0       	push   0xc002366c
c0016cb4:	68 cc c6 02 c0       	push   0xc002c6cc
c0016cb9:	68 94 00 02 c0       	push   0xc0020094
c0016cbe:	e8 05 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016cc3:	83 c4 10             	add    esp,0x10
c0016cc6:	66 90                	xchg   ax,ax
c0016cc8:	90                   	nop
c0016cc9:	83 c4 0c             	add    esp,0xc
c0016ccc:	c3                   	ret    
c0016ccd:	8d 76 00             	lea    esi,[esi+0x0]

c0016cd0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016cd0:	83 ec 0c             	sub    esp,0xc
c0016cd3:	83 ec 08             	sub    esp,0x8
c0016cd6:	68 ff ff 00 00       	push   0xffff
c0016cdb:	6a 01                	push   0x1
c0016cdd:	e8 4a ff ff ff       	call   c0016c2c <__static_initialization_and_destruction_0(int, int)>
c0016ce2:	83 c4 10             	add    esp,0x10
c0016ce5:	83 c4 0c             	add    esp,0xc
c0016ce8:	c3                   	ret    

c0016ce9 <Vm::inbv(unsigned short)>:
c0016ce9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016ced:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016cf2:	75 06                	jne    c0016cfa <Vm::inbv(unsigned short)+0x11>
c0016cf4:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016cf9:	c3                   	ret    
c0016cfa:	ec                   	in     al,dx
c0016cfb:	c3                   	ret    

c0016cfc <Vm::outbv(unsigned short, unsigned char)>:
c0016cfc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016d00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d04:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016d09:	75 25                	jne    c0016d30 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016d0b:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016d11:	8d 51 01             	lea    edx,[ecx+0x1]
c0016d14:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016d1a:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016d20:	83 fa 20             	cmp    edx,0x20
c0016d23:	75 0c                	jne    c0016d31 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016d25:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016d2f:	c3                   	ret    
c0016d30:	ee                   	out    dx,al
c0016d31:	c3                   	ret    

c0016d32 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016d32:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d37:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d3c:	c1 e0 04             	shl    eax,0x4
c0016d3f:	01 d0                	add    eax,edx
c0016d41:	c3                   	ret    

c0016d42 <Vm::getSegment(unsigned int)>:
c0016d42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d46:	c1 e8 10             	shr    eax,0x10
c0016d49:	c3                   	ret    

c0016d4a <Vm::getOffset(unsigned int)>:
c0016d4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d4e:	c3                   	ret    

c0016d4f <Vm::mainloop2()>:
c0016d4f:	83 ec 18             	sub    esp,0x18
c0016d52:	fa                   	cli    
c0016d53:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d59:	6a 02                	push   0x2
c0016d5b:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016d62:	e8 89 f5 ff ff       	call   c00162f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d6c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016d70:	52                   	push   edx
c0016d71:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016d75:	52                   	push   edx
c0016d76:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016d7a:	52                   	push   edx
c0016d7b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016d7f:	50                   	push   eax
c0016d80:	e8 8a 94 fe ff       	call   c000020f <goToVM86>
c0016d85:	83 c4 2c             	add    esp,0x2c
c0016d88:	c3                   	ret    

c0016d89 <Vm::mainVm8086Loop(void*)>:
c0016d89:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d8e:	48                   	dec    eax
c0016d8f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016d94:	75 01                	jne    c0016d97 <Vm::mainVm8086Loop(void*)+0xe>
c0016d96:	fb                   	sti    
c0016d97:	eb b6                	jmp    c0016d4f <Vm::mainloop2()>

c0016d99 <Vm::mainloop3(unsigned long)>:
c0016d99:	83 ec 18             	sub    esp,0x18
c0016d9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016da0:	fa                   	cli    
c0016da1:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016da7:	6a 02                	push   0x2
c0016da9:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016db0:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016db5:	e8 36 f5 ff ff       	call   c00162f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016dba:	83 c4 1c             	add    esp,0x1c
c0016dbd:	eb 90                	jmp    c0016d4f <Vm::mainloop2()>

c0016dbf <Vm::initialise8086()>:
c0016dbf:	83 ec 0c             	sub    esp,0xc
c0016dc2:	68 80 00 00 00       	push   0x80
c0016dc7:	6a 00                	push   0x0
c0016dc9:	68 89 6d 01 c0       	push   0xc0016d89
c0016dce:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016dd4:	e8 db f0 ff ff       	call   c0015eb4 <Process::createThread(void (*)(void*), void*, int)>
c0016dd9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016de0:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016de5:	68 00 01 00 00       	push   0x100
c0016dea:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016def:	6a 00                	push   0x0
c0016df1:	6a 00                	push   0x0
c0016df3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016df9:	e8 1c 31 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016dfe:	83 c4 2c             	add    esp,0x2c
c0016e01:	c3                   	ret    

c0016e02 <Vm::finish8086()>:
c0016e02:	53                   	push   ebx
c0016e03:	83 ec 08             	sub    esp,0x8
c0016e06:	fa                   	cli    
c0016e07:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e0d:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016e14:	75 15                	jne    c0016e2b <Vm::finish8086()+0x29>
c0016e16:	e8 e9 f2 ff ff       	call   c0016104 <schedule()>
c0016e1b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e20:	48                   	dec    eax
c0016e21:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e26:	75 de                	jne    c0016e06 <Vm::finish8086()+0x4>
c0016e28:	fb                   	sti    
c0016e29:	eb db                	jmp    c0016e06 <Vm::finish8086()+0x4>
c0016e2b:	83 ec 0c             	sub    esp,0xc
c0016e2e:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016e34:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016e3a:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016e41:	e8 d6 f7 ff ff       	call   c001661c <unblockTask(ThreadControlBlock*)>
c0016e46:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e4b:	83 c4 10             	add    esp,0x10
c0016e4e:	8d 50 ff             	lea    edx,[eax-0x1]
c0016e51:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016e57:	85 d2                	test   edx,edx
c0016e59:	75 01                	jne    c0016e5c <Vm::finish8086()+0x5a>
c0016e5b:	fb                   	sti    
c0016e5c:	89 d8                	mov    eax,ebx
c0016e5e:	83 c4 08             	add    esp,0x8
c0016e61:	5b                   	pop    ebx
c0016e62:	c3                   	ret    

c0016e63 <Vm::getOutput8086(unsigned char*)>:
c0016e63:	57                   	push   edi
c0016e64:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016e6a:	56                   	push   esi
c0016e6b:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016e70:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016e74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e76:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016e7b:	5e                   	pop    esi
c0016e7c:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e86:	5f                   	pop    edi
c0016e87:	c3                   	ret    

c0016e88 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e88:	55                   	push   ebp
c0016e89:	57                   	push   edi
c0016e8a:	56                   	push   esi
c0016e8b:	53                   	push   ebx
c0016e8c:	83 ec 0c             	sub    esp,0xc
c0016e8f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016e93:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016e97:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016e9b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016e9f:	fa                   	cli    
c0016ea0:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016ea6:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016ead:	75 15                	jne    c0016ec4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016eaf:	e8 50 f2 ff ff       	call   c0016104 <schedule()>
c0016eb4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016eb9:	48                   	dec    eax
c0016eba:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ebf:	75 de                	jne    c0016e9f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016ec1:	fb                   	sti    
c0016ec2:	eb db                	jmp    c0016e9f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016ec4:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016ec9:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016ed3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016ed7:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016edb:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016edf:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016ee3:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016ee7:	0f b7 ff             	movzx  edi,di
c0016eea:	0f b7 f6             	movzx  esi,si
c0016eed:	50                   	push   eax
c0016eee:	6a 20                	push   0x20
c0016ef0:	6a 00                	push   0x0
c0016ef2:	68 40 c7 02 c0       	push   0xc002c740
c0016ef7:	e8 f4 95 fe ff       	call   c00004f0 <memset>
c0016efc:	5a                   	pop    edx
c0016efd:	59                   	pop    ecx
c0016efe:	57                   	push   edi
c0016eff:	56                   	push   esi
c0016f00:	e8 2d fe ff ff       	call   c0016d32 <Vm::realToLinear(unsigned short, unsigned short)>
c0016f05:	83 c4 10             	add    esp,0x10
c0016f08:	89 c7                	mov    edi,eax
c0016f0a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016f0e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016f12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f14:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f19:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016f20:	48                   	dec    eax
c0016f21:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f26:	75 01                	jne    c0016f29 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016f28:	fb                   	sti    
c0016f29:	83 ec 0c             	sub    esp,0xc
c0016f2c:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016f32:	e8 e5 f6 ff ff       	call   c001661c <unblockTask(ThreadControlBlock*)>
c0016f37:	83 c4 1c             	add    esp,0x1c
c0016f3a:	b0 01                	mov    al,0x1
c0016f3c:	5b                   	pop    ebx
c0016f3d:	5e                   	pop    esi
c0016f3e:	5f                   	pop    edi
c0016f3f:	5d                   	pop    ebp
c0016f40:	c3                   	ret    

c0016f41 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016f41:	55                   	push   ebp
c0016f42:	57                   	push   edi
c0016f43:	56                   	push   esi
c0016f44:	53                   	push   ebx
c0016f45:	83 ec 34             	sub    esp,0x34
c0016f48:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016f4c:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016f50:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016f54:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016f58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f5c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f60:	68 c4 2a 02 c0       	push   0xc0022ac4
c0016f65:	e8 db 39 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016f6a:	83 c4 10             	add    esp,0x10
c0016f6d:	fa                   	cli    
c0016f6e:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016f74:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016f7a:	84 db                	test   bl,bl
c0016f7c:	75 15                	jne    c0016f93 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016f7e:	e8 81 f1 ff ff       	call   c0016104 <schedule()>
c0016f83:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f88:	48                   	dec    eax
c0016f89:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f8e:	75 dd                	jne    c0016f6d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f90:	fb                   	sti    
c0016f91:	eb da                	jmp    c0016f6d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f97:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016f9c:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016fa6:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016faa:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016fae:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016fb2:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016fb6:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016fba:	50                   	push   eax
c0016fbb:	6a 20                	push   0x20
c0016fbd:	6a 00                	push   0x0
c0016fbf:	68 40 c7 02 c0       	push   0xc002c740
c0016fc4:	e8 27 95 fe ff       	call   c00004f0 <memset>
c0016fc9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016fd0:	e8 e1 0a ff ff       	call   c0007ab6 <malloc>
c0016fd5:	83 c4 0c             	add    esp,0xc
c0016fd8:	89 c5                	mov    ebp,eax
c0016fda:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016fe0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016fe4:	50                   	push   eax
c0016fe5:	e8 62 4b ff ff       	call   c000bb4c <File::File(char const*, Process*)>
c0016fea:	83 c4 10             	add    esp,0x10
c0016fed:	85 ed                	test   ebp,ebp
c0016fef:	75 0a                	jne    c0016ffb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016ff1:	83 ec 0c             	sub    esp,0xc
c0016ff4:	68 e6 2a 02 c0       	push   0xc0022ae6
c0016ff9:	eb 2b                	jmp    c0017026 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016ffb:	50                   	push   eax
c0016ffc:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017000:	50                   	push   eax
c0017001:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017005:	50                   	push   eax
c0017006:	55                   	push   ebp
c0017007:	e8 60 4e ff ff       	call   c000be6c <File::stat(unsigned long long*, bool*)>
c001700c:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017010:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017014:	83 c4 10             	add    esp,0x10
c0017017:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001701c:	74 27                	je     c0017045 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c001701e:	83 ec 0c             	sub    esp,0xc
c0017021:	68 fa 2a 02 c0       	push   0xc0022afa
c0017026:	e8 f4 a5 ff ff       	call   c001161f <KePanic(char const*)>
c001702b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017030:	83 c4 10             	add    esp,0x10
c0017033:	48                   	dec    eax
c0017034:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017039:	85 c0                	test   eax,eax
c001703b:	75 01                	jne    c001703e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c001703d:	fb                   	sti    
c001703e:	31 db                	xor    ebx,ebx
c0017040:	e9 90 00 00 00       	jmp    c00170d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0017045:	51                   	push   ecx
c0017046:	51                   	push   ecx
c0017047:	6a 01                	push   0x1
c0017049:	55                   	push   ebp
c001704a:	e8 1b 4b ff ff       	call   c000bb6a <File::open(FileOpenMode)>
c001704f:	83 c4 10             	add    esp,0x10
c0017052:	85 c0                	test   eax,eax
c0017054:	74 26                	je     c001707c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0017056:	83 ec 0c             	sub    esp,0xc
c0017059:	68 13 2b 02 c0       	push   0xc0022b13
c001705e:	e8 bc a5 ff ff       	call   c001161f <KePanic(char const*)>
c0017063:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017068:	83 c4 10             	add    esp,0x10
c001706b:	48                   	dec    eax
c001706c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017071:	85 c0                	test   eax,eax
c0017073:	75 c9                	jne    c001703e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0017075:	fb                   	sti    
c0017076:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c001707a:	eb 59                	jmp    c00170d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c001707c:	0f b7 ff             	movzx  edi,di
c001707f:	50                   	push   eax
c0017080:	0f b7 f6             	movzx  esi,si
c0017083:	50                   	push   eax
c0017084:	57                   	push   edi
c0017085:	56                   	push   esi
c0017086:	e8 a7 fc ff ff       	call   c0016d32 <Vm::realToLinear(unsigned short, unsigned short)>
c001708b:	5a                   	pop    edx
c001708c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001708f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0017093:	51                   	push   ecx
c0017094:	50                   	push   eax
c0017095:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017099:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001709d:	55                   	push   ebp
c001709e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00170a1:	83 c4 14             	add    esp,0x14
c00170a4:	55                   	push   ebp
c00170a5:	e8 1e 4b ff ff       	call   c000bbc8 <File::close()>
c00170aa:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00170af:	83 c4 10             	add    esp,0x10
c00170b2:	48                   	dec    eax
c00170b3:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c00170ba:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00170bf:	85 c0                	test   eax,eax
c00170c1:	75 01                	jne    c00170c4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c00170c3:	fb                   	sti    
c00170c4:	83 ec 0c             	sub    esp,0xc
c00170c7:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c00170cd:	e8 4a f5 ff ff       	call   c001661c <unblockTask(ThreadControlBlock*)>
c00170d2:	83 c4 10             	add    esp,0x10
c00170d5:	83 c4 2c             	add    esp,0x2c
c00170d8:	88 d8                	mov    al,bl
c00170da:	5b                   	pop    ebx
c00170db:	5e                   	pop    esi
c00170dc:	5f                   	pop    edi
c00170dd:	5d                   	pop    ebp
c00170de:	c3                   	ret    

c00170df <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00170df:	57                   	push   edi
c00170e0:	56                   	push   esi
c00170e1:	53                   	push   ebx
c00170e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00170e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00170ee:	83 e8 06             	sub    eax,0x6
c00170f1:	0f b7 c0             	movzx  eax,ax
c00170f4:	50                   	push   eax
c00170f5:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00170fa:	50                   	push   eax
c00170fb:	e8 32 fc ff ff       	call   c0016d32 <Vm::realToLinear(unsigned short, unsigned short)>
c0017100:	5a                   	pop    edx
c0017101:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017104:	59                   	pop    ecx
c0017105:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017108:	8d 51 fa             	lea    edx,[ecx-0x6]
c001710b:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017111:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017114:	8d 56 02             	lea    edx,[esi+0x2]
c0017117:	66 89 10             	mov    WORD PTR [eax],dx
c001711a:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c001711e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017122:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017125:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0017129:	0f b6 f1             	movzx  esi,cl
c001712c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017130:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017136:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c001713a:	0f b6 d5             	movzx  edx,ch
c001713d:	74 0a                	je     c0017149 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c001713f:	c1 e2 08             	shl    edx,0x8
c0017142:	09 f2                	or     edx,esi
c0017144:	80 ce 02             	or     dh,0x2
c0017147:	eb 08                	jmp    c0017151 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0017149:	c1 e2 08             	shl    edx,0x8
c001714c:	09 f2                	or     edx,esi
c001714e:	80 e6 fd             	and    dh,0xfd
c0017151:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017155:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001715a:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001715e:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0017166:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0017169:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017171:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017174:	5b                   	pop    ebx
c0017175:	5e                   	pop    esi
c0017176:	5f                   	pop    edi
c0017177:	c3                   	ret    

c0017178 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017178:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001717d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017182:	c1 e0 04             	shl    eax,0x4
c0017185:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017188:	c3                   	ret    

c0017189 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017189:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001718e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017193:	c1 e0 04             	shl    eax,0x4
c0017196:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001719a:	c3                   	ret    

c001719b <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001719b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171a0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171a5:	c1 e0 04             	shl    eax,0x4
c00171a8:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00171ab:	c3                   	ret    

c00171ac <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00171ac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171b1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171b6:	c1 e0 04             	shl    eax,0x4
c00171b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171bd:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00171c0:	c3                   	ret    

c00171c1 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00171c1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171c6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171cb:	c1 e0 04             	shl    eax,0x4
c00171ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171d2:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00171d6:	c3                   	ret    

c00171d7 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00171d7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171dc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171e1:	c1 e0 04             	shl    eax,0x4
c00171e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171e8:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00171eb:	c3                   	ret    

c00171ec <Vm::faultHandler(regs*)>:
c00171ec:	55                   	push   ebp
c00171ed:	57                   	push   edi
c00171ee:	56                   	push   esi
c00171ef:	53                   	push   ebx
c00171f0:	83 ec 2c             	sub    esp,0x2c
c00171f3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00171f7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00171fa:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00171fe:	0f b7 f8             	movzx  edi,ax
c0017201:	52                   	push   edx
c0017202:	0f b7 c0             	movzx  eax,ax
c0017205:	50                   	push   eax
c0017206:	e8 27 fb ff ff       	call   c0016d32 <Vm::realToLinear(unsigned short, unsigned short)>
c001720b:	5a                   	pop    edx
c001720c:	59                   	pop    ecx
c001720d:	89 c1                	mov    ecx,eax
c001720f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017212:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017216:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001721b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001721f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017222:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017226:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001722b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001722f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017233:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017237:	e8 f6 fa ff ff       	call   c0016d32 <Vm::realToLinear(unsigned short, unsigned short)>
c001723c:	5e                   	pop    esi
c001723d:	be 06 00 00 00       	mov    esi,0x6
c0017242:	5d                   	pop    ebp
c0017243:	31 ed                	xor    ebp,ebp
c0017245:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001724a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001724d:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0017253:	0f 84 74 02 00 00    	je     c00174cd <Vm::faultHandler(regs*)+0x2e1>
c0017259:	0f 87 94 00 00 00    	ja     c00172f3 <Vm::faultHandler(regs*)+0x107>
c001725f:	83 fa 66             	cmp    edx,0x66
c0017262:	0f 84 e2 01 00 00    	je     c001744a <Vm::faultHandler(regs*)+0x25e>
c0017268:	77 47                	ja     c00172b1 <Vm::faultHandler(regs*)+0xc5>
c001726a:	83 fa 36             	cmp    edx,0x36
c001726d:	0f 84 ca 01 00 00    	je     c001743d <Vm::faultHandler(regs*)+0x251>
c0017273:	77 1a                	ja     c001728f <Vm::faultHandler(regs*)+0xa3>
c0017275:	83 fa 26             	cmp    edx,0x26
c0017278:	0f 84 98 01 00 00    	je     c0017416 <Vm::faultHandler(regs*)+0x22a>
c001727e:	83 fa 2e             	cmp    edx,0x2e
c0017281:	0f 85 21 06 00 00    	jne    c00178a8 <Vm::faultHandler(regs*)+0x6bc>
c0017287:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001728a:	31 f6                	xor    esi,esi
c001728c:	41                   	inc    ecx
c001728d:	eb bb                	jmp    c001724a <Vm::faultHandler(regs*)+0x5e>
c001728f:	83 fa 64             	cmp    edx,0x64
c0017292:	0f 84 8b 01 00 00    	je     c0017423 <Vm::faultHandler(regs*)+0x237>
c0017298:	0f 87 92 01 00 00    	ja     c0017430 <Vm::faultHandler(regs*)+0x244>
c001729e:	83 fa 3e             	cmp    edx,0x3e
c00172a1:	0f 85 01 06 00 00    	jne    c00178a8 <Vm::faultHandler(regs*)+0x6bc>
c00172a7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172aa:	be 01 00 00 00       	mov    esi,0x1
c00172af:	eb db                	jmp    c001728c <Vm::faultHandler(regs*)+0xa0>
c00172b1:	83 fa 6d             	cmp    edx,0x6d
c00172b4:	0f 84 34 03 00 00    	je     c00175ee <Vm::faultHandler(regs*)+0x402>
c00172ba:	77 17                	ja     c00172d3 <Vm::faultHandler(regs*)+0xe7>
c00172bc:	83 fa 67             	cmp    edx,0x67
c00172bf:	0f 84 92 01 00 00    	je     c0017457 <Vm::faultHandler(regs*)+0x26b>
c00172c5:	83 fa 6c             	cmp    edx,0x6c
c00172c8:	0f 84 b1 02 00 00    	je     c001757f <Vm::faultHandler(regs*)+0x393>
c00172ce:	e9 d5 05 00 00       	jmp    c00178a8 <Vm::faultHandler(regs*)+0x6bc>
c00172d3:	83 fa 6f             	cmp    edx,0x6f
c00172d6:	0f 84 3d 04 00 00    	je     c0017719 <Vm::faultHandler(regs*)+0x52d>
c00172dc:	0f 82 9f 03 00 00    	jb     c0017681 <Vm::faultHandler(regs*)+0x495>
c00172e2:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00172e8:	0f 84 76 01 00 00    	je     c0017464 <Vm::faultHandler(regs*)+0x278>
c00172ee:	e9 b5 05 00 00       	jmp    c00178a8 <Vm::faultHandler(regs*)+0x6bc>
c00172f3:	81 fa ec 00 00 00    	cmp    edx,0xec
c00172f9:	0f 84 51 05 00 00    	je     c0017850 <Vm::faultHandler(regs*)+0x664>
c00172ff:	0f 87 a9 00 00 00    	ja     c00173ae <Vm::faultHandler(regs*)+0x1c2>
c0017305:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001730b:	0f 84 d0 04 00 00    	je     c00177e1 <Vm::faultHandler(regs*)+0x5f5>
c0017311:	77 78                	ja     c001738b <Vm::faultHandler(regs*)+0x19f>
c0017313:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0017319:	0f 84 0e 02 00 00    	je     c001752d <Vm::faultHandler(regs*)+0x341>
c001731f:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017325:	0f 85 7d 05 00 00    	jne    c00178a8 <Vm::faultHandler(regs*)+0x6bc>
c001732b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001732f:	89 d1                	mov    ecx,edx
c0017331:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017334:	c1 e1 08             	shl    ecx,0x8
c0017337:	09 ca                	or     edx,ecx
c0017339:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001733c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0017340:	89 d1                	mov    ecx,edx
c0017342:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017346:	c1 e1 08             	shl    ecx,0x8
c0017349:	09 ca                	or     edx,ecx
c001734b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001734e:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0017352:	89 d1                	mov    ecx,edx
c0017354:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017358:	c1 e1 08             	shl    ecx,0x8
c001735b:	09 ca                	or     edx,ecx
c001735d:	81 ca 00 02 02 00    	or     edx,0x20200
c0017363:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017366:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c001736a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017370:	d1 e8                	shr    eax,1
c0017372:	83 e0 01             	and    eax,0x1
c0017375:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017378:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001737b:	83 c0 06             	add    eax,0x6
c001737e:	25 ff ff 00 00       	and    eax,0xffff
c0017383:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017386:	e9 19 05 00 00       	jmp    c00178a4 <Vm::faultHandler(regs*)+0x6b8>
c001738b:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017391:	0f 84 8f 04 00 00    	je     c0017826 <Vm::faultHandler(regs*)+0x63a>
c0017397:	0f 82 60 04 00 00    	jb     c00177fd <Vm::faultHandler(regs*)+0x611>
c001739d:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00173a3:	0f 84 94 04 00 00    	je     c001783d <Vm::faultHandler(regs*)+0x651>
c00173a9:	e9 fa 04 00 00       	jmp    c00178a8 <Vm::faultHandler(regs*)+0x6bc>
c00173ae:	81 fa ef 00 00 00    	cmp    edx,0xef
c00173b4:	0f 84 d7 04 00 00    	je     c0017891 <Vm::faultHandler(regs*)+0x6a5>
c00173ba:	77 2e                	ja     c00173ea <Vm::faultHandler(regs*)+0x1fe>
c00173bc:	81 fa ed 00 00 00    	cmp    edx,0xed
c00173c2:	0f 84 a4 04 00 00    	je     c001786c <Vm::faultHandler(regs*)+0x680>
c00173c8:	81 fa ee 00 00 00    	cmp    edx,0xee
c00173ce:	0f 85 d4 04 00 00    	jne    c00178a8 <Vm::faultHandler(regs*)+0x6bc>
c00173d4:	50                   	push   eax
c00173d5:	50                   	push   eax
c00173d6:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00173da:	50                   	push   eax
c00173db:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00173df:	50                   	push   eax
c00173e0:	e8 17 f9 ff ff       	call   c0016cfc <Vm::outbv(unsigned short, unsigned char)>
c00173e5:	e9 9f 04 00 00       	jmp    c0017889 <Vm::faultHandler(regs*)+0x69d>
c00173ea:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00173f0:	0f 84 6d 01 00 00    	je     c0017563 <Vm::faultHandler(regs*)+0x377>
c00173f6:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00173fc:	0f 84 6f 01 00 00    	je     c0017571 <Vm::faultHandler(regs*)+0x385>
c0017402:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017408:	0f 85 9a 04 00 00    	jne    c00178a8 <Vm::faultHandler(regs*)+0x6bc>
c001740e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017411:	e9 76 fe ff ff       	jmp    c001728c <Vm::faultHandler(regs*)+0xa0>
c0017416:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017419:	be 02 00 00 00       	mov    esi,0x2
c001741e:	e9 69 fe ff ff       	jmp    c001728c <Vm::faultHandler(regs*)+0xa0>
c0017423:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017426:	be 03 00 00 00       	mov    esi,0x3
c001742b:	e9 5c fe ff ff       	jmp    c001728c <Vm::faultHandler(regs*)+0xa0>
c0017430:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017433:	be 04 00 00 00       	mov    esi,0x4
c0017438:	e9 4f fe ff ff       	jmp    c001728c <Vm::faultHandler(regs*)+0xa0>
c001743d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017440:	be 05 00 00 00       	mov    esi,0x5
c0017445:	e9 42 fe ff ff       	jmp    c001728c <Vm::faultHandler(regs*)+0xa0>
c001744a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001744d:	bd 01 00 00 00       	mov    ebp,0x1
c0017452:	e9 35 fe ff ff       	jmp    c001728c <Vm::faultHandler(regs*)+0xa0>
c0017457:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001745a:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001745f:	e9 28 fe ff ff       	jmp    c001728c <Vm::faultHandler(regs*)+0xa0>
c0017464:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017467:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001746b:	83 e5 01             	and    ebp,0x1
c001746e:	74 30                	je     c00174a0 <Vm::faultHandler(regs*)+0x2b4>
c0017470:	83 e9 04             	sub    ecx,0x4
c0017473:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017479:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001747f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017482:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017485:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001748b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001748f:	0f 84 0c 04 00 00    	je     c00178a1 <Vm::faultHandler(regs*)+0x6b5>
c0017495:	80 ce 02             	or     dh,0x2
c0017498:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001749b:	e9 01 04 00 00       	jmp    c00178a1 <Vm::faultHandler(regs*)+0x6b5>
c00174a0:	83 e9 02             	sub    ecx,0x2
c00174a3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00174a9:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00174ac:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00174b0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00174b6:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00174ba:	74 05                	je     c00174c1 <Vm::faultHandler(regs*)+0x2d5>
c00174bc:	80 ce 02             	or     dh,0x2
c00174bf:	eb 03                	jmp    c00174c4 <Vm::faultHandler(regs*)+0x2d8>
c00174c1:	80 e6 fd             	and    dh,0xfd
c00174c4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00174c8:	e9 d4 03 00 00       	jmp    c00178a1 <Vm::faultHandler(regs*)+0x6b5>
c00174cd:	83 e5 01             	and    ebp,0x1
c00174d0:	74 2a                	je     c00174fc <Vm::faultHandler(regs*)+0x310>
c00174d2:	8b 10                	mov    edx,DWORD PTR [eax]
c00174d4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00174da:	81 ca 00 02 02 00    	or     edx,0x20200
c00174e0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00174e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00174e5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00174eb:	c1 e8 09             	shr    eax,0x9
c00174ee:	83 e0 01             	and    eax,0x1
c00174f1:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00174f4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00174f7:	83 c0 04             	add    eax,0x4
c00174fa:	eb 24                	jmp    c0017520 <Vm::faultHandler(regs*)+0x334>
c00174fc:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00174ff:	81 ca 00 02 02 00    	or     edx,0x20200
c0017505:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017508:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001750b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017511:	c1 e8 09             	shr    eax,0x9
c0017514:	83 e0 01             	and    eax,0x1
c0017517:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001751a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001751d:	83 c0 02             	add    eax,0x2
c0017520:	25 ff ff 00 00       	and    eax,0xffff
c0017525:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017528:	e9 74 03 00 00       	jmp    c00178a1 <Vm::faultHandler(regs*)+0x6b5>
c001752d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017531:	3d ee 00 00 00       	cmp    eax,0xee
c0017536:	75 10                	jne    c0017548 <Vm::faultHandler(regs*)+0x35c>
c0017538:	83 ec 0c             	sub    esp,0xc
c001753b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001753e:	e8 56 f8 ff ff       	call   c0016d99 <Vm::mainloop3(unsigned long)>
c0017543:	e9 44 03 00 00       	jmp    c001788c <Vm::faultHandler(regs*)+0x6a0>
c0017548:	83 ec 0c             	sub    esp,0xc
c001754b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001754f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017553:	51                   	push   ecx
c0017554:	50                   	push   eax
c0017555:	53                   	push   ebx
c0017556:	e8 84 fb ff ff       	call   c00170df <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001755b:	83 c4 20             	add    esp,0x20
c001755e:	e9 41 03 00 00       	jmp    c00178a4 <Vm::faultHandler(regs*)+0x6b8>
c0017563:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017568:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001756c:	e9 30 03 00 00       	jmp    c00178a1 <Vm::faultHandler(regs*)+0x6b5>
c0017571:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017576:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001757a:	e9 22 03 00 00       	jmp    c00178a1 <Vm::faultHandler(regs*)+0x6b5>
c001757f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017582:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017587:	74 2b                	je     c00175b4 <Vm::faultHandler(regs*)+0x3c8>
c0017589:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017590:	76 22                	jbe    c00175b4 <Vm::faultHandler(regs*)+0x3c8>
c0017592:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017596:	50                   	push   eax
c0017597:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001759b:	50                   	push   eax
c001759c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175a0:	50                   	push   eax
c00175a1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00175a5:	50                   	push   eax
c00175a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175aa:	50                   	push   eax
c00175ab:	6a 6c                	push   0x6c
c00175ad:	6a 6c                	push   0x6c
c00175af:	e9 bd 01 00 00       	jmp    c0017771 <Vm::faultHandler(regs*)+0x585>
c00175b4:	83 ec 0c             	sub    esp,0xc
c00175b7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00175bb:	0f b7 f6             	movzx  esi,si
c00175be:	50                   	push   eax
c00175bf:	e8 25 f7 ff ff       	call   c0016ce9 <Vm::inbv(unsigned short)>
c00175c4:	83 c4 0c             	add    esp,0xc
c00175c7:	0f b6 c0             	movzx  eax,al
c00175ca:	50                   	push   eax
c00175cb:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00175cf:	50                   	push   eax
c00175d0:	56                   	push   esi
c00175d1:	e8 d6 fb ff ff       	call   c00171ac <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00175d6:	83 c4 10             	add    esp,0x10
c00175d9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175dc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175e0:	74 03                	je     c00175e5 <Vm::faultHandler(regs*)+0x3f9>
c00175e2:	48                   	dec    eax
c00175e3:	eb 01                	jmp    c00175e6 <Vm::faultHandler(regs*)+0x3fa>
c00175e5:	40                   	inc    eax
c00175e6:	0f b7 c0             	movzx  eax,ax
c00175e9:	e9 8b 00 00 00       	jmp    c0017679 <Vm::faultHandler(regs*)+0x48d>
c00175ee:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00175f1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175f4:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00175f9:	74 29                	je     c0017624 <Vm::faultHandler(regs*)+0x438>
c00175fb:	3d ff ff 00 00       	cmp    eax,0xffff
c0017600:	76 22                	jbe    c0017624 <Vm::faultHandler(regs*)+0x438>
c0017602:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017606:	50                   	push   eax
c0017607:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001760b:	50                   	push   eax
c001760c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017610:	50                   	push   eax
c0017611:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017615:	50                   	push   eax
c0017616:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001761a:	50                   	push   eax
c001761b:	6a 6d                	push   0x6d
c001761d:	6a 6d                	push   0x6d
c001761f:	e9 4d 01 00 00       	jmp    c0017771 <Vm::faultHandler(regs*)+0x585>
c0017624:	0f b7 c8             	movzx  ecx,ax
c0017627:	0f b7 f6             	movzx  esi,si
c001762a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001762d:	83 e5 01             	and    ebp,0x1
c0017630:	74 20                	je     c0017652 <Vm::faultHandler(regs*)+0x466>
c0017632:	ed                   	in     eax,dx
c0017633:	55                   	push   ebp
c0017634:	50                   	push   eax
c0017635:	51                   	push   ecx
c0017636:	56                   	push   esi
c0017637:	e8 9b fb ff ff       	call   c00171d7 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001763c:	83 c4 10             	add    esp,0x10
c001763f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017642:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017646:	74 05                	je     c001764d <Vm::faultHandler(regs*)+0x461>
c0017648:	83 e8 04             	sub    eax,0x4
c001764b:	eb 27                	jmp    c0017674 <Vm::faultHandler(regs*)+0x488>
c001764d:	83 c0 04             	add    eax,0x4
c0017650:	eb 22                	jmp    c0017674 <Vm::faultHandler(regs*)+0x488>
c0017652:	66 ed                	in     ax,dx
c0017654:	0f b7 c0             	movzx  eax,ax
c0017657:	57                   	push   edi
c0017658:	50                   	push   eax
c0017659:	51                   	push   ecx
c001765a:	56                   	push   esi
c001765b:	e8 61 fb ff ff       	call   c00171c1 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017660:	83 c4 10             	add    esp,0x10
c0017663:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017666:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001766a:	74 05                	je     c0017671 <Vm::faultHandler(regs*)+0x485>
c001766c:	83 e8 02             	sub    eax,0x2
c001766f:	eb 03                	jmp    c0017674 <Vm::faultHandler(regs*)+0x488>
c0017671:	83 c0 02             	add    eax,0x2
c0017674:	25 ff ff 00 00       	and    eax,0xffff
c0017679:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001767c:	e9 20 02 00 00       	jmp    c00178a1 <Vm::faultHandler(regs*)+0x6b5>
c0017681:	8d 46 ff             	lea    eax,[esi-0x1]
c0017684:	0f b6 f0             	movzx  esi,al
c0017687:	83 fe 05             	cmp    esi,0x5
c001768a:	77 23                	ja     c00176af <Vm::faultHandler(regs*)+0x4c3>
c001768c:	ff 24 b5 88 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd478]
c0017693:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017698:	eb 15                	jmp    c00176af <Vm::faultHandler(regs*)+0x4c3>
c001769a:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001769e:	eb 0f                	jmp    c00176af <Vm::faultHandler(regs*)+0x4c3>
c00176a0:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00176a4:	eb 09                	jmp    c00176af <Vm::faultHandler(regs*)+0x4c3>
c00176a6:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00176aa:	eb 03                	jmp    c00176af <Vm::faultHandler(regs*)+0x4c3>
c00176ac:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00176af:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00176b2:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00176b7:	74 29                	je     c00176e2 <Vm::faultHandler(regs*)+0x4f6>
c00176b9:	3d ff ff 00 00       	cmp    eax,0xffff
c00176be:	76 22                	jbe    c00176e2 <Vm::faultHandler(regs*)+0x4f6>
c00176c0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00176c4:	50                   	push   eax
c00176c5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00176c9:	50                   	push   eax
c00176ca:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00176ce:	50                   	push   eax
c00176cf:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00176d3:	50                   	push   eax
c00176d4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176d8:	50                   	push   eax
c00176d9:	6a 6e                	push   0x6e
c00176db:	6a 6e                	push   0x6e
c00176dd:	e9 8f 00 00 00       	jmp    c0017771 <Vm::faultHandler(regs*)+0x585>
c00176e2:	0f b7 c0             	movzx  eax,ax
c00176e5:	52                   	push   edx
c00176e6:	52                   	push   edx
c00176e7:	50                   	push   eax
c00176e8:	57                   	push   edi
c00176e9:	e8 8a fa ff ff       	call   c0017178 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00176ee:	59                   	pop    ecx
c00176ef:	0f b6 c0             	movzx  eax,al
c00176f2:	5e                   	pop    esi
c00176f3:	50                   	push   eax
c00176f4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00176f8:	50                   	push   eax
c00176f9:	e8 fe f5 ff ff       	call   c0016cfc <Vm::outbv(unsigned short, unsigned char)>
c00176fe:	83 c4 10             	add    esp,0x10
c0017701:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017704:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017708:	74 03                	je     c001770d <Vm::faultHandler(regs*)+0x521>
c001770a:	48                   	dec    eax
c001770b:	eb 01                	jmp    c001770e <Vm::faultHandler(regs*)+0x522>
c001770d:	40                   	inc    eax
c001770e:	0f b7 c0             	movzx  eax,ax
c0017711:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017714:	e9 88 01 00 00       	jmp    c00178a1 <Vm::faultHandler(regs*)+0x6b5>
c0017719:	8d 46 ff             	lea    eax,[esi-0x1]
c001771c:	0f b6 f0             	movzx  esi,al
c001771f:	83 fe 05             	cmp    esi,0x5
c0017722:	77 1e                	ja     c0017742 <Vm::faultHandler(regs*)+0x556>
c0017724:	ff 24 b5 a0 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd460]
c001772b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001772f:	eb 11                	jmp    c0017742 <Vm::faultHandler(regs*)+0x556>
c0017731:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017734:	eb 0c                	jmp    c0017742 <Vm::faultHandler(regs*)+0x556>
c0017736:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017739:	eb 07                	jmp    c0017742 <Vm::faultHandler(regs*)+0x556>
c001773b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001773e:	eb 02                	jmp    c0017742 <Vm::faultHandler(regs*)+0x556>
c0017740:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017742:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017745:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001774a:	74 37                	je     c0017783 <Vm::faultHandler(regs*)+0x597>
c001774c:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017752:	76 2f                	jbe    c0017783 <Vm::faultHandler(regs*)+0x597>
c0017754:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017758:	50                   	push   eax
c0017759:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001775d:	50                   	push   eax
c001775e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017762:	50                   	push   eax
c0017763:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017767:	50                   	push   eax
c0017768:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001776c:	50                   	push   eax
c001776d:	6a 6f                	push   0x6f
c001776f:	6a 6f                	push   0x6f
c0017771:	68 2c 2b 02 c0       	push   0xc0022b2c
c0017776:	e8 ca 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001777b:	83 c4 20             	add    esp,0x20
c001777e:	e9 83 01 00 00       	jmp    c0017906 <Vm::faultHandler(regs*)+0x71a>
c0017783:	0f b7 d7             	movzx  edx,di
c0017786:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017789:	0f b7 c6             	movzx  eax,si
c001778c:	81 e1 00 04 00 00    	and    ecx,0x400
c0017792:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017795:	83 e5 01             	and    ebp,0x1
c0017798:	74 1d                	je     c00177b7 <Vm::faultHandler(regs*)+0x5cb>
c001779a:	55                   	push   ebp
c001779b:	55                   	push   ebp
c001779c:	50                   	push   eax
c001779d:	52                   	push   edx
c001779e:	e8 f8 f9 ff ff       	call   c001719b <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00177a3:	83 c4 10             	add    esp,0x10
c00177a6:	89 fa                	mov    edx,edi
c00177a8:	ef                   	out    dx,eax
c00177a9:	85 c9                	test   ecx,ecx
c00177ab:	74 05                	je     c00177b2 <Vm::faultHandler(regs*)+0x5c6>
c00177ad:	83 ee 04             	sub    esi,0x4
c00177b0:	eb 21                	jmp    c00177d3 <Vm::faultHandler(regs*)+0x5e7>
c00177b2:	83 c6 04             	add    esi,0x4
c00177b5:	eb 1c                	jmp    c00177d3 <Vm::faultHandler(regs*)+0x5e7>
c00177b7:	55                   	push   ebp
c00177b8:	55                   	push   ebp
c00177b9:	50                   	push   eax
c00177ba:	52                   	push   edx
c00177bb:	e8 c9 f9 ff ff       	call   c0017189 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00177c0:	83 c4 10             	add    esp,0x10
c00177c3:	89 fa                	mov    edx,edi
c00177c5:	66 ef                	out    dx,ax
c00177c7:	85 c9                	test   ecx,ecx
c00177c9:	74 05                	je     c00177d0 <Vm::faultHandler(regs*)+0x5e4>
c00177cb:	83 ee 02             	sub    esi,0x2
c00177ce:	eb 03                	jmp    c00177d3 <Vm::faultHandler(regs*)+0x5e7>
c00177d0:	83 c6 02             	add    esi,0x2
c00177d3:	81 e6 ff ff 00 00    	and    esi,0xffff
c00177d9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00177dc:	e9 c0 00 00 00       	jmp    c00178a1 <Vm::faultHandler(regs*)+0x6b5>
c00177e1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00177e8:	83 ec 0c             	sub    esp,0xc
c00177eb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177ef:	50                   	push   eax
c00177f0:	e8 f4 f4 ff ff       	call   c0016ce9 <Vm::inbv(unsigned short)>
c00177f5:	0f b6 c0             	movzx  eax,al
c00177f8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00177fb:	eb 3a                	jmp    c0017837 <Vm::faultHandler(regs*)+0x64b>
c00177fd:	83 e5 01             	and    ebp,0x1
c0017800:	74 07                	je     c0017809 <Vm::faultHandler(regs*)+0x61d>
c0017802:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017806:	ed                   	in     eax,dx
c0017807:	eb 14                	jmp    c001781d <Vm::faultHandler(regs*)+0x631>
c0017809:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001780c:	66 31 f6             	xor    si,si
c001780f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017812:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017816:	66 ed                	in     ax,dx
c0017818:	0f b7 c0             	movzx  eax,ax
c001781b:	09 f0                	or     eax,esi
c001781d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017820:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017824:	eb 7e                	jmp    c00178a4 <Vm::faultHandler(regs*)+0x6b8>
c0017826:	52                   	push   edx
c0017827:	52                   	push   edx
c0017828:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001782c:	50                   	push   eax
c001782d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017831:	50                   	push   eax
c0017832:	e8 c5 f4 ff ff       	call   c0016cfc <Vm::outbv(unsigned short, unsigned char)>
c0017837:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001783b:	eb 4f                	jmp    c001788c <Vm::faultHandler(regs*)+0x6a0>
c001783d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017840:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017844:	83 e5 01             	and    ebp,0x1
c0017847:	74 03                	je     c001784c <Vm::faultHandler(regs*)+0x660>
c0017849:	ef                   	out    dx,eax
c001784a:	eb d4                	jmp    c0017820 <Vm::faultHandler(regs*)+0x634>
c001784c:	66 ef                	out    dx,ax
c001784e:	eb d0                	jmp    c0017820 <Vm::faultHandler(regs*)+0x634>
c0017850:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017857:	83 ec 0c             	sub    esp,0xc
c001785a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001785e:	50                   	push   eax
c001785f:	e8 85 f4 ff ff       	call   c0016ce9 <Vm::inbv(unsigned short)>
c0017864:	0f b6 c0             	movzx  eax,al
c0017867:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001786a:	eb 1d                	jmp    c0017889 <Vm::faultHandler(regs*)+0x69d>
c001786c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001786f:	83 e5 01             	and    ebp,0x1
c0017872:	74 03                	je     c0017877 <Vm::faultHandler(regs*)+0x68b>
c0017874:	ed                   	in     eax,dx
c0017875:	eb 0d                	jmp    c0017884 <Vm::faultHandler(regs*)+0x698>
c0017877:	66 ed                	in     ax,dx
c0017879:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001787c:	0f b7 c0             	movzx  eax,ax
c001787f:	66 31 d2             	xor    dx,dx
c0017882:	09 d0                	or     eax,edx
c0017884:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017887:	eb 18                	jmp    c00178a1 <Vm::faultHandler(regs*)+0x6b5>
c0017889:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001788c:	83 c4 10             	add    esp,0x10
c001788f:	eb 13                	jmp    c00178a4 <Vm::faultHandler(regs*)+0x6b8>
c0017891:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017894:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017897:	83 e5 01             	and    ebp,0x1
c001789a:	74 03                	je     c001789f <Vm::faultHandler(regs*)+0x6b3>
c001789c:	ef                   	out    dx,eax
c001789d:	eb 02                	jmp    c00178a1 <Vm::faultHandler(regs*)+0x6b5>
c001789f:	66 ef                	out    dx,ax
c00178a1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00178a4:	b0 01                	mov    al,0x1
c00178a6:	eb 60                	jmp    c0017908 <Vm::faultHandler(regs*)+0x71c>
c00178a8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00178ac:	50                   	push   eax
c00178ad:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00178b1:	50                   	push   eax
c00178b2:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00178b6:	50                   	push   eax
c00178b7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00178bb:	50                   	push   eax
c00178bc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00178c0:	50                   	push   eax
c00178c1:	52                   	push   edx
c00178c2:	52                   	push   edx
c00178c3:	68 59 2b 02 c0       	push   0xc0022b59
c00178c8:	e8 78 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00178cd:	83 c4 20             	add    esp,0x20
c00178d0:	83 ec 0c             	sub    esp,0xc
c00178d3:	6a 60                	push   0x60
c00178d5:	e8 0f f4 ff ff       	call   c0016ce9 <Vm::inbv(unsigned short)>
c00178da:	83 c4 10             	add    esp,0x10
c00178dd:	0f b6 d0             	movzx  edx,al
c00178e0:	83 fa 1c             	cmp    edx,0x1c
c00178e3:	74 05                	je     c00178ea <Vm::faultHandler(regs*)+0x6fe>
c00178e5:	83 fa 5a             	cmp    edx,0x5a
c00178e8:	75 e6                	jne    c00178d0 <Vm::faultHandler(regs*)+0x6e4>
c00178ea:	0f b6 c0             	movzx  eax,al
c00178ed:	83 f8 1c             	cmp    eax,0x1c
c00178f0:	74 05                	je     c00178f7 <Vm::faultHandler(regs*)+0x70b>
c00178f2:	83 f8 5a             	cmp    eax,0x5a
c00178f5:	75 0f                	jne    c0017906 <Vm::faultHandler(regs*)+0x71a>
c00178f7:	83 ec 0c             	sub    esp,0xc
c00178fa:	6a 60                	push   0x60
c00178fc:	e8 e8 f3 ff ff       	call   c0016ce9 <Vm::inbv(unsigned short)>
c0017901:	83 c4 10             	add    esp,0x10
c0017904:	eb e4                	jmp    c00178ea <Vm::faultHandler(regs*)+0x6fe>
c0017906:	31 c0                	xor    eax,eax
c0017908:	83 c4 2c             	add    esp,0x2c
c001790b:	5b                   	pop    ebx
c001790c:	5e                   	pop    esi
c001790d:	5f                   	pop    edi
c001790e:	5d                   	pop    ebp
c001790f:	c3                   	ret    

c0017910 <noCopro(unsigned long)>:
c0017910:	c3                   	ret    

c0017911 <nmiHandler(regs*, void*)>:
c0017911:	83 ec 0c             	sub    esp,0xc
c0017914:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017919:	83 ec 0c             	sub    esp,0xc
c001791c:	50                   	push   eax
c001791d:	e8 94 f9 fe ff       	call   c00072b6 <Computer::handleNMI()>
c0017922:	83 c4 10             	add    esp,0x10
c0017925:	90                   	nop
c0017926:	83 c4 0c             	add    esp,0xc
c0017929:	c3                   	ret    

c001792a <doubleFault(regs*, void*)>:
c001792a:	55                   	push   ebp
c001792b:	89 e5                	mov    ebp,esp
c001792d:	83 ec 08             	sub    esp,0x8
c0017930:	83 ec 0c             	sub    esp,0xc
c0017933:	68 b8 2b 02 c0       	push   0xc0022bb8
c0017938:	e8 e2 9c ff ff       	call   c001161f <KePanic(char const*)>
c001793d:	83 c4 10             	add    esp,0x10
c0017940:	90                   	nop
c0017941:	c9                   	leave  
c0017942:	c3                   	ret    

c0017943 <displayDebugInfo(regs*)>:
c0017943:	83 ec 1c             	sub    esp,0x1c
c0017946:	0f 20 c0             	mov    eax,cr0
c0017949:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001794d:	0f 20 d0             	mov    eax,cr2
c0017950:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017954:	0f 20 d8             	mov    eax,cr3
c0017957:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001795b:	0f 20 e0             	mov    eax,cr4
c001795e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017961:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017965:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017968:	83 ec 08             	sub    esp,0x8
c001796b:	50                   	push   eax
c001796c:	68 d4 2b 02 c0       	push   0xc0022bd4
c0017971:	e8 cf 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017976:	83 c4 10             	add    esp,0x10
c0017979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001797d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017980:	83 ec 08             	sub    esp,0x8
c0017983:	50                   	push   eax
c0017984:	68 c5 2b 02 c0       	push   0xc0022bc5
c0017989:	e8 b7 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001798e:	83 c4 10             	add    esp,0x10
c0017991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017995:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017998:	83 ec 08             	sub    esp,0x8
c001799b:	50                   	push   eax
c001799c:	68 d0 2b 02 c0       	push   0xc0022bd0
c00179a1:	e8 9f 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179a6:	83 c4 10             	add    esp,0x10
c00179a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00179b0:	83 ec 08             	sub    esp,0x8
c00179b3:	50                   	push   eax
c00179b4:	68 df 2b 02 c0       	push   0xc0022bdf
c00179b9:	e8 87 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179be:	83 c4 10             	add    esp,0x10
c00179c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179c5:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00179c8:	83 ec 08             	sub    esp,0x8
c00179cb:	50                   	push   eax
c00179cc:	68 ea 2b 02 c0       	push   0xc0022bea
c00179d1:	e8 6f 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179d6:	83 c4 10             	add    esp,0x10
c00179d9:	83 ec 08             	sub    esp,0x8
c00179dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00179e0:	68 f5 2b 02 c0       	push   0xc0022bf5
c00179e5:	e8 5b 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179ea:	83 c4 10             	add    esp,0x10
c00179ed:	83 ec 08             	sub    esp,0x8
c00179f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00179f4:	68 00 2c 02 c0       	push   0xc0022c00
c00179f9:	e8 47 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179fe:	83 c4 10             	add    esp,0x10
c0017a01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a05:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017a08:	c1 e0 05             	shl    eax,0x5
c0017a0b:	8d 90 80 3f 02 c0    	lea    edx,[eax-0x3ffdc080]
c0017a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a15:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017a18:	83 ec 04             	sub    esp,0x4
c0017a1b:	52                   	push   edx
c0017a1c:	50                   	push   eax
c0017a1d:	68 0b 2c 02 c0       	push   0xc0022c0b
c0017a22:	e8 1e 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a27:	83 c4 10             	add    esp,0x10
c0017a2a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a2f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a35:	83 ec 0c             	sub    esp,0xc
c0017a38:	50                   	push   eax
c0017a39:	e8 1b 0d ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0017a3e:	83 c4 10             	add    esp,0x10
c0017a41:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a46:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a4c:	83 ec 08             	sub    esp,0x8
c0017a4f:	68 1a 2c 02 c0       	push   0xc0022c1a
c0017a54:	50                   	push   eax
c0017a55:	e8 4c 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a5a:	83 c4 10             	add    esp,0x10
c0017a5d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a62:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a6c:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017a6f:	83 ec 08             	sub    esp,0x8
c0017a72:	52                   	push   edx
c0017a73:	50                   	push   eax
c0017a74:	e8 e7 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017a79:	83 c4 10             	add    esp,0x10
c0017a7c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a81:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a87:	83 ec 08             	sub    esp,0x8
c0017a8a:	68 28 2c 02 c0       	push   0xc0022c28
c0017a8f:	50                   	push   eax
c0017a90:	e8 11 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a95:	83 c4 10             	add    esp,0x10
c0017a98:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a9d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aa3:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017aa8:	8b 12                	mov    edx,DWORD PTR [edx]
c0017aaa:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017aad:	83 c2 0c             	add    edx,0xc
c0017ab0:	83 ec 08             	sub    esp,0x8
c0017ab3:	52                   	push   edx
c0017ab4:	50                   	push   eax
c0017ab5:	e8 ec 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017aba:	83 c4 10             	add    esp,0x10
c0017abd:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ac2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ac8:	83 ec 08             	sub    esp,0x8
c0017acb:	68 31 2c 02 c0       	push   0xc0022c31
c0017ad0:	50                   	push   eax
c0017ad1:	e8 d0 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ad6:	83 c4 10             	add    esp,0x10
c0017ad9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ade:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ae4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ae8:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017aeb:	83 ec 08             	sub    esp,0x8
c0017aee:	52                   	push   edx
c0017aef:	50                   	push   eax
c0017af0:	e8 6b 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017af5:	83 c4 10             	add    esp,0x10
c0017af8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017afd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b03:	83 ec 08             	sub    esp,0x8
c0017b06:	68 39 2c 02 c0       	push   0xc0022c39
c0017b0b:	50                   	push   eax
c0017b0c:	e8 95 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b11:	83 c4 10             	add    esp,0x10
c0017b14:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b19:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b23:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017b26:	83 ec 08             	sub    esp,0x8
c0017b29:	52                   	push   edx
c0017b2a:	50                   	push   eax
c0017b2b:	e8 30 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b30:	83 c4 10             	add    esp,0x10
c0017b33:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b38:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b3e:	83 ec 08             	sub    esp,0x8
c0017b41:	68 41 2c 02 c0       	push   0xc0022c41
c0017b46:	50                   	push   eax
c0017b47:	e8 5a 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b4c:	83 c4 10             	add    esp,0x10
c0017b4f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b54:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b5a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b5e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017b61:	83 ec 08             	sub    esp,0x8
c0017b64:	52                   	push   edx
c0017b65:	50                   	push   eax
c0017b66:	e8 f5 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b6b:	83 c4 10             	add    esp,0x10
c0017b6e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b73:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b79:	83 ec 08             	sub    esp,0x8
c0017b7c:	68 49 2c 02 c0       	push   0xc0022c49
c0017b81:	50                   	push   eax
c0017b82:	e8 1f 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b87:	83 c4 10             	add    esp,0x10
c0017b8a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b8f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b95:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b99:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017b9c:	83 ec 08             	sub    esp,0x8
c0017b9f:	52                   	push   edx
c0017ba0:	50                   	push   eax
c0017ba1:	e8 ba 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017ba6:	83 c4 10             	add    esp,0x10
c0017ba9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bb4:	83 ec 08             	sub    esp,0x8
c0017bb7:	68 51 2c 02 c0       	push   0xc0022c51
c0017bbc:	50                   	push   eax
c0017bbd:	e8 e4 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bc2:	83 c4 10             	add    esp,0x10
c0017bc5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bd0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bd4:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017bd7:	83 ec 08             	sub    esp,0x8
c0017bda:	52                   	push   edx
c0017bdb:	50                   	push   eax
c0017bdc:	e8 7f 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017be1:	83 c4 10             	add    esp,0x10
c0017be4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017be9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bef:	83 ec 08             	sub    esp,0x8
c0017bf2:	68 59 2c 02 c0       	push   0xc0022c59
c0017bf7:	50                   	push   eax
c0017bf8:	e8 a9 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bfd:	83 c4 10             	add    esp,0x10
c0017c00:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c05:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c0b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c0f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017c12:	83 ec 08             	sub    esp,0x8
c0017c15:	52                   	push   edx
c0017c16:	50                   	push   eax
c0017c17:	e8 44 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c1c:	83 c4 10             	add    esp,0x10
c0017c1f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c24:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c2a:	83 ec 08             	sub    esp,0x8
c0017c2d:	68 61 2c 02 c0       	push   0xc0022c61
c0017c32:	50                   	push   eax
c0017c33:	e8 6e 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c38:	83 c4 10             	add    esp,0x10
c0017c3b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c40:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c46:	83 ec 08             	sub    esp,0x8
c0017c49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c4d:	50                   	push   eax
c0017c4e:	e8 0d 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c53:	83 c4 10             	add    esp,0x10
c0017c56:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c5b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c61:	83 ec 08             	sub    esp,0x8
c0017c64:	68 6a 2c 02 c0       	push   0xc0022c6a
c0017c69:	50                   	push   eax
c0017c6a:	e8 37 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c6f:	83 c4 10             	add    esp,0x10
c0017c72:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c77:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c7d:	83 ec 08             	sub    esp,0x8
c0017c80:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c84:	50                   	push   eax
c0017c85:	e8 d6 0d ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c8a:	83 c4 10             	add    esp,0x10
c0017c8d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c92:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c98:	83 ec 08             	sub    esp,0x8
c0017c9b:	68 72 2c 02 c0       	push   0xc0022c72
c0017ca0:	50                   	push   eax
c0017ca1:	e8 00 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ca6:	83 c4 10             	add    esp,0x10
c0017ca9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cb4:	83 ec 08             	sub    esp,0x8
c0017cb7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017cbb:	50                   	push   eax
c0017cbc:	e8 9f 0d ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017cc1:	83 c4 10             	add    esp,0x10
c0017cc4:	fa                   	cli    
c0017cc5:	f4                   	hlt    
c0017cc6:	eb fe                	jmp    c0017cc6 <displayDebugInfo(regs*)+0x383>

c0017cc8 <HalSystemIdle()>:
c0017cc8:	56                   	push   esi
c0017cc9:	53                   	push   ebx
c0017cca:	83 ec 14             	sub    esp,0x14
c0017ccd:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017cd2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017cd8:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017cde:	83 e0 04             	and    eax,0x4
c0017ce1:	0f b6 c0             	movzx  eax,al
c0017ce4:	85 c0                	test   eax,eax
c0017ce6:	0f 95 c0             	setne  al
c0017ce9:	0f b6 c0             	movzx  eax,al
c0017cec:	85 c0                	test   eax,eax
c0017cee:	74 4c                	je     c0017d3c <HalSystemIdle()+0x74>
c0017cf0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017cf5:	83 ec 08             	sub    esp,0x8
c0017cf8:	68 e1 00 00 00       	push   0xe1
c0017cfd:	50                   	push   eax
c0017cfe:	e8 bd f3 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017d03:	83 c4 10             	add    esp,0x10
c0017d06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d0e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d17:	83 e2 02             	and    edx,0x2
c0017d1a:	89 d3                	mov    ebx,edx
c0017d1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d20:	83 e2 00             	and    edx,0x0
c0017d23:	89 d6                	mov    esi,edx
c0017d25:	56                   	push   esi
c0017d26:	53                   	push   ebx
c0017d27:	68 e1 00 00 00       	push   0xe1
c0017d2c:	50                   	push   eax
c0017d2d:	e8 ba f3 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0017d32:	83 c4 10             	add    esp,0x10
c0017d35:	e8 5a 84 fe ff       	call   c0000194 <doTPAUSE>
c0017d3a:	eb 01                	jmp    c0017d3d <HalSystemIdle()+0x75>
c0017d3c:	f4                   	hlt    
c0017d3d:	90                   	nop
c0017d3e:	83 c4 14             	add    esp,0x14
c0017d41:	5b                   	pop    ebx
c0017d42:	5e                   	pop    esi
c0017d43:	c3                   	ret    

c0017d44 <displayProgramFault(char const*)>:
c0017d44:	83 ec 0c             	sub    esp,0xc
c0017d47:	83 ec 0c             	sub    esp,0xc
c0017d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d4e:	e8 f2 2b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017d53:	83 c4 10             	add    esp,0x10
c0017d56:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d5d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d60:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d66:	85 c0                	test   eax,eax
c0017d68:	74 21                	je     c0017d8b <displayProgramFault(char const*)+0x47>
c0017d6a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d71:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d74:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d7a:	6a 04                	push   0x4
c0017d7c:	6a 0f                	push   0xf
c0017d7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d82:	50                   	push   eax
c0017d83:	e8 90 0d ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017d88:	83 c4 10             	add    esp,0x10
c0017d8b:	90                   	nop
c0017d8c:	83 c4 0c             	add    esp,0xc
c0017d8f:	c3                   	ret    

c0017d90 <gpFault(regs*, void*)>:
c0017d90:	83 ec 1c             	sub    esp,0x1c
c0017d93:	c7 05 74 c7 02 c0 ec 71 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc00171ec
c0017d9d:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017da2:	85 c0                	test   eax,eax
c0017da4:	74 1e                	je     c0017dc4 <gpFault(regs*, void*)+0x34>
c0017da6:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017dab:	83 ec 0c             	sub    esp,0xc
c0017dae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017db2:	ff d0                	call   eax
c0017db4:	83 c4 10             	add    esp,0x10
c0017db7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017dbb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017dc0:	85 c0                	test   eax,eax
c0017dc2:	75 2e                	jne    c0017df2 <gpFault(regs*, void*)+0x62>
c0017dc4:	83 ec 0c             	sub    esp,0xc
c0017dc7:	68 7a 2c 02 c0       	push   0xc0022c7a
c0017dcc:	e8 73 ff ff ff       	call   c0017d44 <displayProgramFault(char const*)>
c0017dd1:	83 c4 10             	add    esp,0x10
c0017dd4:	83 ec 0c             	sub    esp,0xc
c0017dd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ddb:	e8 63 fb ff ff       	call   c0017943 <displayDebugInfo(regs*)>
c0017de0:	83 c4 10             	add    esp,0x10
c0017de3:	83 ec 0c             	sub    esp,0xc
c0017de6:	6a 00                	push   0x0
c0017de8:	e8 a3 ed ff ff       	call   c0016b90 <Thr::terminateFromIRQ(int)>
c0017ded:	83 c4 10             	add    esp,0x10
c0017df0:	eb 01                	jmp    c0017df3 <gpFault(regs*, void*)+0x63>
c0017df2:	90                   	nop
c0017df3:	83 c4 1c             	add    esp,0x1c
c0017df6:	c3                   	ret    

c0017df7 <pgFault(regs*, void*)>:
c0017df7:	83 ec 1c             	sub    esp,0x1c
c0017dfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dfe:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017e01:	0f 20 d0             	mov    eax,cr2
c0017e04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e0c:	83 ec 04             	sub    esp,0x4
c0017e0f:	52                   	push   edx
c0017e10:	50                   	push   eax
c0017e11:	68 58 2d 02 c0       	push   0xc0022d58
c0017e16:	e8 2a 2b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017e1b:	83 c4 10             	add    esp,0x10
c0017e1e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e23:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e28:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017e2e:	0f 20 d2             	mov    edx,cr2
c0017e31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017e35:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e39:	83 ec 08             	sub    esp,0x8
c0017e3c:	52                   	push   edx
c0017e3d:	50                   	push   eax
c0017e3e:	e8 4d 25 ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017e43:	83 c4 10             	add    esp,0x10
c0017e46:	0f b6 c0             	movzx  eax,al
c0017e49:	85 c0                	test   eax,eax
c0017e4b:	75 2e                	jne    c0017e7b <pgFault(regs*, void*)+0x84>
c0017e4d:	83 ec 0c             	sub    esp,0xc
c0017e50:	68 93 2c 02 c0       	push   0xc0022c93
c0017e55:	e8 ea fe ff ff       	call   c0017d44 <displayProgramFault(char const*)>
c0017e5a:	83 c4 10             	add    esp,0x10
c0017e5d:	83 ec 0c             	sub    esp,0xc
c0017e60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e64:	e8 da fa ff ff       	call   c0017943 <displayDebugInfo(regs*)>
c0017e69:	83 c4 10             	add    esp,0x10
c0017e6c:	83 ec 0c             	sub    esp,0xc
c0017e6f:	6a 00                	push   0x0
c0017e71:	e8 1a ed ff ff       	call   c0016b90 <Thr::terminateFromIRQ(int)>
c0017e76:	83 c4 10             	add    esp,0x10
c0017e79:	eb 01                	jmp    c0017e7c <pgFault(regs*, void*)+0x85>
c0017e7b:	90                   	nop
c0017e7c:	83 c4 1c             	add    esp,0x1c
c0017e7f:	c3                   	ret    

c0017e80 <otherISRHandler(regs*, void*)>:
c0017e80:	83 ec 0c             	sub    esp,0xc
c0017e83:	83 ec 0c             	sub    esp,0xc
c0017e86:	68 80 2d 02 c0       	push   0xc0022d80
c0017e8b:	e8 b4 fe ff ff       	call   c0017d44 <displayProgramFault(char const*)>
c0017e90:	83 c4 10             	add    esp,0x10
c0017e93:	83 ec 0c             	sub    esp,0xc
c0017e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e9a:	e8 a4 fa ff ff       	call   c0017943 <displayDebugInfo(regs*)>
c0017e9f:	83 c4 10             	add    esp,0x10
c0017ea2:	83 ec 0c             	sub    esp,0xc
c0017ea5:	6a 00                	push   0x0
c0017ea7:	e8 e4 ec ff ff       	call   c0016b90 <Thr::terminateFromIRQ(int)>
c0017eac:	83 c4 10             	add    esp,0x10
c0017eaf:	90                   	nop
c0017eb0:	83 c4 0c             	add    esp,0xc
c0017eb3:	c3                   	ret    

c0017eb4 <opcodeFault(regs*, void*)>:
c0017eb4:	55                   	push   ebp
c0017eb5:	89 e5                	mov    ebp,esp
c0017eb7:	83 ec 08             	sub    esp,0x8
c0017eba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ebd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017ec0:	83 ec 08             	sub    esp,0x8
c0017ec3:	50                   	push   eax
c0017ec4:	68 9e 2c 02 c0       	push   0xc0022c9e
c0017ec9:	e8 77 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017ece:	83 c4 10             	add    esp,0x10
c0017ed1:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017ed6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017edc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017ee2:	0f b6 c0             	movzx  eax,al
c0017ee5:	85 c0                	test   eax,eax
c0017ee7:	74 21                	je     c0017f0a <opcodeFault(regs*, void*)+0x56>
c0017ee9:	83 ec 0c             	sub    esp,0xc
c0017eec:	68 a8 2d 02 c0       	push   0xc0022da8
c0017ef1:	e8 4f 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017ef6:	83 c4 10             	add    esp,0x10
c0017ef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017efc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017eff:	8d 50 19             	lea    edx,[eax+0x19]
c0017f02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f05:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017f08:	eb 2b                	jmp    c0017f35 <opcodeFault(regs*, void*)+0x81>
c0017f0a:	83 ec 0c             	sub    esp,0xc
c0017f0d:	68 ac 2c 02 c0       	push   0xc0022cac
c0017f12:	e8 2d fe ff ff       	call   c0017d44 <displayProgramFault(char const*)>
c0017f17:	83 c4 10             	add    esp,0x10
c0017f1a:	83 ec 0c             	sub    esp,0xc
c0017f1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017f20:	e8 1e fa ff ff       	call   c0017943 <displayDebugInfo(regs*)>
c0017f25:	83 c4 10             	add    esp,0x10
c0017f28:	83 ec 0c             	sub    esp,0xc
c0017f2b:	6a 00                	push   0x0
c0017f2d:	e8 5e ec ff ff       	call   c0016b90 <Thr::terminateFromIRQ(int)>
c0017f32:	83 c4 10             	add    esp,0x10
c0017f35:	c9                   	leave  
c0017f36:	c3                   	ret    

c0017f37 <i386SaveCoprocessor(void*)>:
c0017f37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f3b:	83 c0 3f             	add    eax,0x3f
c0017f3e:	83 e0 c0             	and    eax,0xffffffc0
c0017f41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f45:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017f4b <i386LoadCoprocessor(void*)>:
c0017f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f4f:	83 c0 3f             	add    eax,0x3f
c0017f52:	83 e0 c0             	and    eax,0xffffffc0
c0017f55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f59:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017f5f <x87EmulHandler(regs*, void*)>:
c0017f5f:	53                   	push   ebx
c0017f60:	83 ec 08             	sub    esp,0x8
c0017f63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f68:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017f6c:	74 10                	je     c0017f7e <x87EmulHandler(regs*, void*)+0x1f>
c0017f6e:	83 ec 0c             	sub    esp,0xc
c0017f71:	68 b9 2c 02 c0       	push   0xc0022cb9
c0017f76:	e8 a4 96 ff ff       	call   c001161f <KePanic(char const*)>
c0017f7b:	83 c4 10             	add    esp,0x10
c0017f7e:	0f 20 c0             	mov    eax,cr0
c0017f81:	a8 08                	test   al,0x8
c0017f83:	74 59                	je     c0017fde <x87EmulHandler(regs*, void*)+0x7f>
c0017f85:	0f 06                	clts   
c0017f87:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f8c:	85 c0                	test   eax,eax
c0017f8e:	74 0e                	je     c0017f9e <x87EmulHandler(regs*, void*)+0x3f>
c0017f90:	83 ec 0c             	sub    esp,0xc
c0017f93:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017f96:	e8 9c ff ff ff       	call   c0017f37 <i386SaveCoprocessor(void*)>
c0017f9b:	83 c4 10             	add    esp,0x10
c0017f9e:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017fa4:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017fa8:	75 12                	jne    c0017fbc <x87EmulHandler(regs*, void*)+0x5d>
c0017faa:	83 ec 0c             	sub    esp,0xc
c0017fad:	68 40 02 00 00       	push   0x240
c0017fb2:	e8 ff fa fe ff       	call   c0007ab6 <malloc>
c0017fb7:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017fba:	eb 10                	jmp    c0017fcc <x87EmulHandler(regs*, void*)+0x6d>
c0017fbc:	83 ec 0c             	sub    esp,0xc
c0017fbf:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017fc4:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017fc7:	e8 7f ff ff ff       	call   c0017f4b <i386LoadCoprocessor(void*)>
c0017fcc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fd1:	83 c4 10             	add    esp,0x10
c0017fd4:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017fd9:	83 c4 08             	add    esp,0x8
c0017fdc:	5b                   	pop    ebx
c0017fdd:	c3                   	ret    
c0017fde:	83 ec 0c             	sub    esp,0xc
c0017fe1:	68 cd 2c 02 c0       	push   0xc0022ccd
c0017fe6:	e8 5a 29 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017feb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017ff3:	83 c4 18             	add    esp,0x18
c0017ff6:	5b                   	pop    ebx
c0017ff7:	e9 94 eb ff ff       	jmp    c0016b90 <Thr::terminateFromIRQ(int)>

c0017ffc <HalInitialiseCoprocessor()>:
c0017ffc:	83 ec 10             	sub    esp,0x10
c0017fff:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0018009:	6a 00                	push   0x0
c001800b:	68 5f 7f 01 c0       	push   0xc0017f5f
c0018010:	6a 07                	push   0x7
c0018012:	e8 e3 4e ff ff       	call   c000cefa <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018017:	e8 54 70 00 00       	call   c001f070 <avxDetect>
c001801c:	83 c4 10             	add    esp,0x10
c001801f:	85 c0                	test   eax,eax
c0018021:	74 1c                	je     c001803f <HalInitialiseCoprocessor()+0x43>
c0018023:	c7 05 70 c7 02 c0 9a f0 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f09a
c001802d:	c7 05 6c c7 02 c0 ab f0 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f0ab
c0018037:	83 c4 0c             	add    esp,0xc
c001803a:	e9 7d 70 00 00       	jmp    c001f0bc <avxInit>
c001803f:	e8 bc 73 00 00       	call   c001f400 <absolutelyNoChanceInHell>
c0018044:	85 c0                	test   eax,eax
c0018046:	74 1c                	je     c0018064 <HalInitialiseCoprocessor()+0x68>
c0018048:	c7 05 70 c7 02 c0 18 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f418
c0018052:	c7 05 6c c7 02 c0 20 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f420
c001805c:	83 c4 0c             	add    esp,0xc
c001805f:	e9 c4 73 00 00       	jmp    c001f428 <sseInit>
c0018064:	e8 dd 73 00 00       	call   c001f446 <x87Detect>
c0018069:	85 c0                	test   eax,eax
c001806b:	74 1c                	je     c0018089 <HalInitialiseCoprocessor()+0x8d>
c001806d:	c7 05 70 c7 02 c0 61 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f461
c0018077:	c7 05 6c c7 02 c0 68 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f468
c0018081:	83 c4 0c             	add    esp,0xc
c0018084:	e9 e6 73 00 00       	jmp    c001f46f <x87Init>
c0018089:	c7 05 70 c7 02 c0 10 79 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc0017910
c0018093:	c7 05 6c c7 02 c0 10 79 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc0017910
c001809d:	0f 20 c0             	mov    eax,cr0
c00180a0:	83 c8 04             	or     eax,0x4
c00180a3:	0f 22 c0             	mov    cr0,eax
c00180a6:	83 c4 0c             	add    esp,0xc
c00180a9:	c3                   	ret    

c00180aa <HalPanic(char const*)>:
c00180aa:	53                   	push   ebx
c00180ab:	83 ec 10             	sub    esp,0x10
c00180ae:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00180b2:	fa                   	cli    
c00180b3:	53                   	push   ebx
c00180b4:	68 e3 2c 02 c0       	push   0xc0022ce3
c00180b9:	e8 87 28 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00180be:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c00180c3:	83 c4 10             	add    esp,0x10
c00180c6:	85 c0                	test   eax,eax
c00180c8:	74 09                	je     c00180d3 <HalPanic(char const*)+0x29>
c00180ca:	83 ec 0c             	sub    esp,0xc
c00180cd:	53                   	push   ebx
c00180ce:	ff d0                	call   eax
c00180d0:	83 c4 10             	add    esp,0x10
c00180d3:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c00180d8:	85 c0                	test   eax,eax
c00180da:	0f 84 dc 00 00 00    	je     c00181bc <HalPanic(char const*)+0x112>
c00180e0:	52                   	push   edx
c00180e1:	6a 01                	push   0x1
c00180e3:	6a 0f                	push   0xf
c00180e5:	50                   	push   eax
c00180e6:	e8 c9 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180eb:	59                   	pop    ecx
c00180ec:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180f2:	e8 ad 06 ff ff       	call   c00087a4 <VgaText::clearScreen()>
c00180f7:	58                   	pop    eax
c00180f8:	5a                   	pop    edx
c00180f9:	68 c4 0e 02 c0       	push   0xc0020ec4
c00180fe:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018104:	e8 e3 04 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0018109:	83 c4 0c             	add    esp,0xc
c001810c:	6a 01                	push   0x1
c001810e:	6a 0f                	push   0xf
c0018110:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018116:	e8 99 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001811b:	59                   	pop    ecx
c001811c:	58                   	pop    eax
c001811d:	68 fc 2c 02 c0       	push   0xc0022cfc
c0018122:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018128:	e8 79 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001812d:	83 c4 0c             	add    esp,0xc
c0018130:	6a 0f                	push   0xf
c0018132:	6a 01                	push   0x1
c0018134:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001813a:	e8 75 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001813f:	58                   	pop    eax
c0018140:	5a                   	pop    edx
c0018141:	68 05 2d 02 c0       	push   0xc0022d05
c0018146:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001814c:	e8 55 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018151:	83 c4 0c             	add    esp,0xc
c0018154:	6a 01                	push   0x1
c0018156:	6a 0f                	push   0xf
c0018158:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001815e:	e8 51 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018163:	59                   	pop    ecx
c0018164:	58                   	pop    eax
c0018165:	68 49 2d 02 c0       	push   0xc0022d49
c001816a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018170:	e8 31 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018175:	58                   	pop    eax
c0018176:	5a                   	pop    edx
c0018177:	68 12 2d 02 c0       	push   0xc0022d12
c001817c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018182:	e8 1f 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018187:	59                   	pop    ecx
c0018188:	58                   	pop    eax
c0018189:	68 4c 2d 02 c0       	push   0xc0022d4c
c001818e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018194:	e8 0d 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018199:	58                   	pop    eax
c001819a:	5a                   	pop    edx
c001819b:	53                   	push   ebx
c001819c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181a2:	e8 ff 08 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00181a7:	59                   	pop    ecx
c00181a8:	5b                   	pop    ebx
c00181a9:	68 49 2d 02 c0       	push   0xc0022d49
c00181ae:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181b4:	e8 ed 08 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00181b9:	83 c4 10             	add    esp,0x10
c00181bc:	eb fe                	jmp    c00181bc <HalPanic(char const*)+0x112>

c00181be <HalQueryPerformanceCounter()>:
c00181be:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00181c3:	31 d2                	xor    edx,edx
c00181c5:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00181cb:	31 c0                	xor    eax,eax
c00181cd:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00181d4:	74 02                	je     c00181d8 <HalQueryPerformanceCounter()+0x1a>
c00181d6:	0f 31                	rdtsc  
c00181d8:	c3                   	ret    

c00181d9 <HalInitialise()>:
c00181d9:	53                   	push   ebx
c00181da:	83 ec 08             	sub    esp,0x8
c00181dd:	e8 48 4f ff ff       	call   c000d12a <setupINTS()>
c00181e2:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c00181e9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00181ee:	75 0f                	jne    c00181ff <HalInitialise()+0x26>
c00181f0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00181f6:	83 e2 fe             	and    edx,0xfffffffe
c00181f9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00181ff:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018205:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c001820c:	83 e2 fe             	and    edx,0xfffffffe
c001820f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018215:	e8 9e 02 00 00       	call   c00184b8 <picOpen()>
c001821a:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0018221:	74 0a                	je     c001822d <HalInitialise()+0x54>
c0018223:	e8 e0 01 00 00       	call   c0018408 <picDisable()>
c0018228:	e8 ad 67 00 00       	call   c001e9da <apicOpen()>
c001822d:	bb 0f 00 00 00       	mov    ebx,0xf
c0018232:	50                   	push   eax
c0018233:	6a 00                	push   0x0
c0018235:	68 80 7e 01 c0       	push   0xc0017e80
c001823a:	6a 00                	push   0x0
c001823c:	e8 b9 4c ff ff       	call   c000cefa <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018241:	83 c4 0c             	add    esp,0xc
c0018244:	6a 00                	push   0x0
c0018246:	68 80 7e 01 c0       	push   0xc0017e80
c001824b:	6a 01                	push   0x1
c001824d:	e8 a8 4c ff ff       	call   c000cefa <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018252:	83 c4 0c             	add    esp,0xc
c0018255:	6a 00                	push   0x0
c0018257:	68 11 79 01 c0       	push   0xc0017911
c001825c:	6a 02                	push   0x2
c001825e:	e8 97 4c ff ff       	call   c000cefa <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018263:	83 c4 0c             	add    esp,0xc
c0018266:	6a 00                	push   0x0
c0018268:	68 80 7e 01 c0       	push   0xc0017e80
c001826d:	6a 03                	push   0x3
c001826f:	e8 86 4c ff ff       	call   c000cefa <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018274:	83 c4 0c             	add    esp,0xc
c0018277:	6a 00                	push   0x0
c0018279:	68 80 7e 01 c0       	push   0xc0017e80
c001827e:	6a 04                	push   0x4
c0018280:	e8 75 4c ff ff       	call   c000cefa <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018285:	83 c4 0c             	add    esp,0xc
c0018288:	6a 00                	push   0x0
c001828a:	68 80 7e 01 c0       	push   0xc0017e80
c001828f:	6a 05                	push   0x5
c0018291:	e8 64 4c ff ff       	call   c000cefa <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018296:	83 c4 0c             	add    esp,0xc
c0018299:	6a 00                	push   0x0
c001829b:	68 b4 7e 01 c0       	push   0xc0017eb4
c00182a0:	6a 06                	push   0x6
c00182a2:	e8 53 4c ff ff       	call   c000cefa <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182a7:	83 c4 0c             	add    esp,0xc
c00182aa:	6a 00                	push   0x0
c00182ac:	68 2a 79 01 c0       	push   0xc001792a
c00182b1:	6a 08                	push   0x8
c00182b3:	e8 42 4c ff ff       	call   c000cefa <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182b8:	83 c4 0c             	add    esp,0xc
c00182bb:	6a 00                	push   0x0
c00182bd:	68 80 7e 01 c0       	push   0xc0017e80
c00182c2:	6a 09                	push   0x9
c00182c4:	e8 31 4c ff ff       	call   c000cefa <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182c9:	83 c4 0c             	add    esp,0xc
c00182cc:	6a 00                	push   0x0
c00182ce:	68 80 7e 01 c0       	push   0xc0017e80
c00182d3:	6a 0a                	push   0xa
c00182d5:	e8 20 4c ff ff       	call   c000cefa <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182da:	83 c4 0c             	add    esp,0xc
c00182dd:	6a 00                	push   0x0
c00182df:	68 80 7e 01 c0       	push   0xc0017e80
c00182e4:	6a 0b                	push   0xb
c00182e6:	e8 0f 4c ff ff       	call   c000cefa <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182eb:	83 c4 0c             	add    esp,0xc
c00182ee:	6a 00                	push   0x0
c00182f0:	68 90 7d 01 c0       	push   0xc0017d90
c00182f5:	6a 0d                	push   0xd
c00182f7:	e8 fe 4b ff ff       	call   c000cefa <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182fc:	83 c4 0c             	add    esp,0xc
c00182ff:	6a 00                	push   0x0
c0018301:	68 f7 7d 01 c0       	push   0xc0017df7
c0018306:	6a 0e                	push   0xe
c0018308:	e8 ed 4b ff ff       	call   c000cefa <installISRHandler(int, void (*)(regs*, void*), void*)>
c001830d:	83 c4 10             	add    esp,0x10
c0018310:	50                   	push   eax
c0018311:	6a 00                	push   0x0
c0018313:	68 80 7e 01 c0       	push   0xc0017e80
c0018318:	53                   	push   ebx
c0018319:	43                   	inc    ebx
c001831a:	e8 db 4b ff ff       	call   c000cefa <installISRHandler(int, void (*)(regs*, void*), void*)>
c001831f:	83 c4 10             	add    esp,0x10
c0018322:	83 fb 1e             	cmp    ebx,0x1e
c0018325:	75 e9                	jne    c0018310 <HalInitialise()+0x137>
c0018327:	50                   	push   eax
c0018328:	6a 00                	push   0x0
c001832a:	68 b8 2a 01 c0       	push   0xc0012ab8
c001832f:	6a 60                	push   0x60
c0018331:	e8 c4 4b ff ff       	call   c000cefa <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018336:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001833b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018345:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001834c:	e8 65 f7 fe ff       	call   c0007ab6 <malloc>
c0018351:	89 04 24             	mov    DWORD PTR [esp],eax
c0018354:	89 c3                	mov    ebx,eax
c0018356:	e8 3b 09 00 00       	call   c0018c96 <RTC::RTC()>
c001835b:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018365:	5a                   	pop    edx
c0018366:	59                   	pop    ecx
c0018367:	53                   	push   ebx
c0018368:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001836e:	e8 53 46 ff ff       	call   c000c9c6 <Device::addChild(Device*)>
c0018373:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018375:	6a 00                	push   0x0
c0018377:	6a 00                	push   0x0
c0018379:	6a 00                	push   0x0
c001837b:	53                   	push   ebx
c001837c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001837f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018384:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001838a:	83 c4 28             	add    esp,0x28
c001838d:	5b                   	pop    ebx
c001838e:	c3                   	ret    

c001838f <HalMakeBeep(int)>:
c001838f:	53                   	push   ebx
c0018390:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018394:	85 db                	test   ebx,ebx
c0018396:	75 07                	jne    c001839f <HalMakeBeep(int)+0x10>
c0018398:	e4 61                	in     al,0x61
c001839a:	83 e0 fc             	and    eax,0xfffffffc
c001839d:	eb 26                	jmp    c00183c5 <HalMakeBeep(int)+0x36>
c001839f:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00183a4:	99                   	cdq    
c00183a5:	f7 fb                	idiv   ebx
c00183a7:	89 c1                	mov    ecx,eax
c00183a9:	b0 b6                	mov    al,0xb6
c00183ab:	e6 43                	out    0x43,al
c00183ad:	88 c8                	mov    al,cl
c00183af:	e6 42                	out    0x42,al
c00183b1:	89 c8                	mov    eax,ecx
c00183b3:	c1 e8 08             	shr    eax,0x8
c00183b6:	e6 42                	out    0x42,al
c00183b8:	e4 61                	in     al,0x61
c00183ba:	89 c2                	mov    edx,eax
c00183bc:	83 ca 03             	or     edx,0x3
c00183bf:	38 d0                	cmp    al,dl
c00183c1:	74 04                	je     c00183c7 <HalMakeBeep(int)+0x38>
c00183c3:	88 d0                	mov    al,dl
c00183c5:	e6 61                	out    0x61,al
c00183c7:	5b                   	pop    ebx
c00183c8:	c3                   	ret    

c00183c9 <HalGetRand()>:
c00183c9:	31 c0                	xor    eax,eax
c00183cb:	c3                   	ret    

c00183cc <HalEndOfInterrupt(int)>:
c00183cc:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00183d3:	74 23                	je     c00183f8 <HalEndOfInterrupt(int)+0x2c>
c00183d5:	83 ec 14             	sub    esp,0x14
c00183d8:	6a 1b                	push   0x1b
c00183da:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00183e0:	e8 db ec fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c00183e5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00183ea:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00183f4:	83 c4 1c             	add    esp,0x1c
c00183f7:	c3                   	ret    
c00183f8:	e9 3f 02 00 00       	jmp    c001863c <picEOI(int)>

c00183fd <HalRestart()>:
c00183fd:	c3                   	ret    

c00183fe <HalShutdown()>:
c00183fe:	c3                   	ret    

c00183ff <HalSleep()>:
c00183ff:	c3                   	ret    

c0018400 <picIoWait()>:
c0018400:	eb 00                	jmp    c0018402 <picIoWait()+0x2>
c0018402:	eb 00                	jmp    c0018404 <picIoWait()+0x4>
c0018404:	90                   	nop
c0018405:	c3                   	ret    
c0018406:	66 90                	xchg   ax,ax

c0018408 <picDisable()>:
c0018408:	83 ec 10             	sub    esp,0x10
c001840b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018412:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018417:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001841b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018420:	ee                   	out    dx,al
c0018421:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018428:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001842d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018431:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018436:	ee                   	out    dx,al
c0018437:	90                   	nop
c0018438:	83 c4 10             	add    esp,0x10
c001843b:	c3                   	ret    

c001843c <picGetIRQReg(int)>:
c001843c:	83 ec 10             	sub    esp,0x10
c001843f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018443:	0f b6 c0             	movzx  eax,al
c0018446:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001844d:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018451:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018455:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001845a:	ee                   	out    dx,al
c001845b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001845f:	0f b6 c0             	movzx  eax,al
c0018462:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018469:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001846d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018471:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018476:	ee                   	out    dx,al
c0018477:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001847e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018483:	89 c2                	mov    edx,eax
c0018485:	ec                   	in     al,dx
c0018486:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001848a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001848e:	0f b6 c0             	movzx  eax,al
c0018491:	c1 e0 08             	shl    eax,0x8
c0018494:	89 c1                	mov    ecx,eax
c0018496:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001849d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00184a2:	89 c2                	mov    edx,eax
c00184a4:	ec                   	in     al,dx
c00184a5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00184a9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00184ad:	0f b6 c0             	movzx  eax,al
c00184b0:	09 c8                	or     eax,ecx
c00184b2:	83 c4 10             	add    esp,0x10
c00184b5:	c3                   	ret    
c00184b6:	66 90                	xchg   ax,ax

c00184b8 <picOpen()>:
c00184b8:	83 ec 50             	sub    esp,0x50
c00184bb:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00184c2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00184c7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00184cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00184cf:	ee                   	out    dx,al
c00184d0:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00184d7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00184dc:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00184e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00184e4:	ee                   	out    dx,al
c00184e5:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00184ed:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00184f5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00184fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018500:	89 c2                	mov    edx,eax
c0018502:	ec                   	in     al,dx
c0018503:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018507:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001850b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001850f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018516:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001851a:	89 c2                	mov    edx,eax
c001851c:	ec                   	in     al,dx
c001851d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018521:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018525:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018529:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018530:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018535:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018539:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001853d:	ee                   	out    dx,al
c001853e:	e8 bd fe ff ff       	call   c0018400 <picIoWait()>
c0018543:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001854a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001854f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018553:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018557:	ee                   	out    dx,al
c0018558:	e8 a3 fe ff ff       	call   c0018400 <picIoWait()>
c001855d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018561:	0f b6 c0             	movzx  eax,al
c0018564:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001856b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001856f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018573:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018577:	ee                   	out    dx,al
c0018578:	e8 83 fe ff ff       	call   c0018400 <picIoWait()>
c001857d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018581:	0f b6 c0             	movzx  eax,al
c0018584:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001858b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001858f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018593:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018597:	ee                   	out    dx,al
c0018598:	e8 63 fe ff ff       	call   c0018400 <picIoWait()>
c001859d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00185a4:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00185a9:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00185ad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00185b1:	ee                   	out    dx,al
c00185b2:	e8 49 fe ff ff       	call   c0018400 <picIoWait()>
c00185b7:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00185be:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00185c3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00185c7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00185cb:	ee                   	out    dx,al
c00185cc:	e8 2f fe ff ff       	call   c0018400 <picIoWait()>
c00185d1:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00185d8:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00185dd:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00185e1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00185e5:	ee                   	out    dx,al
c00185e6:	e8 15 fe ff ff       	call   c0018400 <picIoWait()>
c00185eb:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00185f2:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00185f7:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00185fb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00185ff:	ee                   	out    dx,al
c0018600:	e8 fb fd ff ff       	call   c0018400 <picIoWait()>
c0018605:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001860a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018611:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018615:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018619:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001861d:	ee                   	out    dx,al
c001861e:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018623:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001862a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001862e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018632:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018636:	ee                   	out    dx,al
c0018637:	90                   	nop
c0018638:	83 c4 50             	add    esp,0x50
c001863b:	c3                   	ret    

c001863c <picEOI(int)>:
c001863c:	83 ec 10             	sub    esp,0x10
c001863f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018644:	75 1e                	jne    c0018664 <picEOI(int)+0x28>
c0018646:	6a 0b                	push   0xb
c0018648:	e8 ef fd ff ff       	call   c001843c <picGetIRQReg(int)>
c001864d:	83 c4 04             	add    esp,0x4
c0018650:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018655:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001865a:	25 80 00 00 00       	and    eax,0x80
c001865f:	74 73                	je     c00186d4 <picEOI(int)+0x98>
c0018661:	8d 76 00             	lea    esi,[esi+0x0]
c0018664:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018669:	75 31                	jne    c001869c <picEOI(int)+0x60>
c001866b:	6a 0b                	push   0xb
c001866d:	e8 ca fd ff ff       	call   c001843c <picGetIRQReg(int)>
c0018672:	83 c4 04             	add    esp,0x4
c0018675:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001867a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001867e:	98                   	cwde   
c001867f:	85 c0                	test   eax,eax
c0018681:	78 19                	js     c001869c <picEOI(int)+0x60>
c0018683:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001868a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001868f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018693:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018698:	ee                   	out    dx,al
c0018699:	eb 3d                	jmp    c00186d8 <picEOI(int)+0x9c>
c001869b:	90                   	nop
c001869c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00186a1:	7e 19                	jle    c00186bc <picEOI(int)+0x80>
c00186a3:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00186aa:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00186af:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00186b3:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00186b8:	ee                   	out    dx,al
c00186b9:	8d 76 00             	lea    esi,[esi+0x0]
c00186bc:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00186c3:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00186c8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00186cc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00186d1:	ee                   	out    dx,al
c00186d2:	eb 04                	jmp    c00186d8 <picEOI(int)+0x9c>
c00186d4:	90                   	nop
c00186d5:	8d 76 00             	lea    esi,[esi+0x0]
c00186d8:	83 c4 10             	add    esp,0x10
c00186db:	c3                   	ret    

c00186dc <RTC::open(int, int, void*)>:
c00186dc:	31 c0                	xor    eax,eax
c00186de:	c3                   	ret    
c00186df:	90                   	nop

c00186e0 <RTC::close(int, int, void*)>:
c00186e0:	31 c0                	xor    eax,eax
c00186e2:	c3                   	ret    
c00186e3:	90                   	nop

c00186e4 <RTC::timeInSecondsUTC()>:
c00186e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186e8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00186ee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00186f4:	c3                   	ret    
c00186f5:	90                   	nop

c00186f6 <RTC::timeInDatetimeUTC()>:
c00186f6:	53                   	push   ebx
c00186f7:	83 ec 14             	sub    esp,0x14
c00186fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00186fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018702:	8b 10                	mov    edx,DWORD PTR [eax]
c0018704:	50                   	push   eax
c0018705:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018708:	83 c4 0c             	add    esp,0xc
c001870b:	52                   	push   edx
c001870c:	50                   	push   eax
c001870d:	53                   	push   ebx
c001870e:	e8 27 40 ff ff       	call   c000c73a <secondsToDatetime(unsigned long long)>
c0018713:	89 d8                	mov    eax,ebx
c0018715:	83 c4 14             	add    esp,0x14
c0018718:	5b                   	pop    ebx
c0018719:	c2 04 00             	ret    0x4

c001871c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001871c:	56                   	push   esi
c001871d:	53                   	push   ebx
c001871e:	83 ec 14             	sub    esp,0x14
c0018721:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018725:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018727:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001872a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001872e:	52                   	push   edx
c001872f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018733:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018737:	50                   	push   eax
c0018738:	e8 fd 3f ff ff       	call   c000c73a <secondsToDatetime(unsigned long long)>
c001873d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018741:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018745:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018749:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001874d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018751:	89 f0                	mov    eax,esi
c0018753:	83 c4 20             	add    esp,0x20
c0018756:	5b                   	pop    ebx
c0018757:	5e                   	pop    esi
c0018758:	ff e0                	jmp    eax

c001875a <RTC::~RTC()>:
c001875a:	83 ec 0c             	sub    esp,0xc
c001875d:	ba e8 2d 02 c0       	mov    edx,0xc0022de8
c0018762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018766:	89 10                	mov    DWORD PTR [eax],edx
c0018768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001876c:	83 ec 0c             	sub    esp,0xc
c001876f:	50                   	push   eax
c0018770:	e8 57 3d ff ff       	call   c000c4cc <Clock::~Clock()>
c0018775:	83 c4 10             	add    esp,0x10
c0018778:	90                   	nop
c0018779:	83 c4 0c             	add    esp,0xc
c001877c:	c3                   	ret    
c001877d:	90                   	nop

c001877e <RTC::~RTC()>:
c001877e:	83 ec 0c             	sub    esp,0xc
c0018781:	83 ec 0c             	sub    esp,0xc
c0018784:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018788:	e8 cd ff ff ff       	call   c001875a <RTC::~RTC()>
c001878d:	83 c4 10             	add    esp,0x10
c0018790:	83 ec 08             	sub    esp,0x8
c0018793:	68 60 01 00 00       	push   0x160
c0018798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001879c:	e8 77 20 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00187a1:	83 c4 10             	add    esp,0x10
c00187a4:	83 c4 0c             	add    esp,0xc
c00187a7:	c3                   	ret    

c00187a8 <RTC::get_update_in_progress_flag()>:
c00187a8:	83 ec 14             	sub    esp,0x14
c00187ab:	6a 0a                	push   0xa
c00187ad:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187b3:	e8 c0 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187b8:	83 c4 1c             	add    esp,0x1c
c00187bb:	0f b6 c0             	movzx  eax,al
c00187be:	c1 e8 07             	shr    eax,0x7
c00187c1:	c3                   	ret    

c00187c2 <RTC::completeRTCRefresh()>:
c00187c2:	55                   	push   ebp
c00187c3:	57                   	push   edi
c00187c4:	56                   	push   esi
c00187c5:	53                   	push   ebx
c00187c6:	83 ec 3c             	sub    esp,0x3c
c00187c9:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00187cf:	83 ec 0c             	sub    esp,0xc
c00187d2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00187d6:	e8 cd ff ff ff       	call   c00187a8 <RTC::get_update_in_progress_flag()>
c00187db:	83 c4 10             	add    esp,0x10
c00187de:	84 c0                	test   al,al
c00187e0:	74 0e                	je     c00187f0 <RTC::completeRTCRefresh()+0x2e>
c00187e2:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00187e8:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00187ee:	73 df                	jae    c00187cf <RTC::completeRTCRefresh()+0xd>
c00187f0:	51                   	push   ecx
c00187f1:	51                   	push   ecx
c00187f2:	6a 00                	push   0x0
c00187f4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187fa:	e8 79 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187ff:	5b                   	pop    ebx
c0018800:	89 c7                	mov    edi,eax
c0018802:	5e                   	pop    esi
c0018803:	6a 02                	push   0x2
c0018805:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001880b:	e8 68 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018810:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018814:	5d                   	pop    ebp
c0018815:	58                   	pop    eax
c0018816:	6a 04                	push   0x4
c0018818:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001881e:	e8 55 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018823:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018827:	58                   	pop    eax
c0018828:	5a                   	pop    edx
c0018829:	6a 07                	push   0x7
c001882b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018831:	e8 42 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018836:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001883a:	59                   	pop    ecx
c001883b:	5b                   	pop    ebx
c001883c:	6a 08                	push   0x8
c001883e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018844:	e8 2f e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018849:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001884d:	5e                   	pop    esi
c001884e:	5d                   	pop    ebp
c001884f:	6a 09                	push   0x9
c0018851:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018857:	e8 1c e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001885c:	0f b6 c0             	movzx  eax,al
c001885f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018863:	83 c4 10             	add    esp,0x10
c0018866:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c001886c:	83 ec 0c             	sub    esp,0xc
c001886f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018873:	e8 30 ff ff ff       	call   c00187a8 <RTC::get_update_in_progress_flag()>
c0018878:	83 c4 10             	add    esp,0x10
c001887b:	84 c0                	test   al,al
c001887d:	74 0e                	je     c001888d <RTC::completeRTCRefresh()+0xcb>
c001887f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018885:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c001888b:	73 df                	jae    c001886c <RTC::completeRTCRefresh()+0xaa>
c001888d:	51                   	push   ecx
c001888e:	51                   	push   ecx
c001888f:	6a 00                	push   0x0
c0018891:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018897:	e8 dc e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001889c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00188a0:	5b                   	pop    ebx
c00188a1:	5e                   	pop    esi
c00188a2:	6a 02                	push   0x2
c00188a4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188aa:	e8 c9 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188af:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00188b3:	5d                   	pop    ebp
c00188b4:	58                   	pop    eax
c00188b5:	6a 04                	push   0x4
c00188b7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188bd:	e8 b6 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188c2:	88 c3                	mov    bl,al
c00188c4:	58                   	pop    eax
c00188c5:	5a                   	pop    edx
c00188c6:	6a 07                	push   0x7
c00188c8:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188ce:	e8 a5 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188d3:	59                   	pop    ecx
c00188d4:	89 c6                	mov    esi,eax
c00188d6:	5d                   	pop    ebp
c00188d7:	6a 08                	push   0x8
c00188d9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188df:	e8 94 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188e4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00188e8:	58                   	pop    eax
c00188e9:	5a                   	pop    edx
c00188ea:	6a 09                	push   0x9
c00188ec:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188f2:	e8 81 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188f7:	89 f9                	mov    ecx,edi
c00188f9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00188fd:	0f b6 e8             	movzx  ebp,al
c0018900:	83 c4 10             	add    esp,0x10
c0018903:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018907:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001890c:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0018911:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018915:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018919:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c001891d:	0f 94 c0             	sete   al
c0018920:	0f b6 fb             	movzx  edi,bl
c0018923:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0018927:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001892c:	0f 94 c2             	sete   dl
c001892f:	21 d0                	and    eax,edx
c0018931:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018935:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018939:	0f 94 c2             	sete   dl
c001893c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0018940:	21 c2                	and    edx,eax
c0018942:	89 f0                	mov    eax,esi
c0018944:	0f b6 c0             	movzx  eax,al
c0018947:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001894b:	89 f0                	mov    eax,esi
c001894d:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0018951:	0f 94 c0             	sete   al
c0018954:	21 d0                	and    eax,edx
c0018956:	31 d2                	xor    edx,edx
c0018958:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001895c:	0f 94 c2             	sete   dl
c001895f:	85 c2                	test   edx,eax
c0018961:	75 27                	jne    c001898a <RTC::completeRTCRefresh()+0x1c8>
c0018963:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018967:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001896b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001896f:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018973:	89 f0                	mov    eax,esi
c0018975:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018979:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001897d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018981:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018985:	e9 dc fe ff ff       	jmp    c0018866 <RTC::completeRTCRefresh()+0xa4>
c001898a:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001898e:	75 d3                	jne    c0018963 <RTC::completeRTCRefresh()+0x1a1>
c0018990:	52                   	push   edx
c0018991:	52                   	push   edx
c0018992:	6a 0b                	push   0xb
c0018994:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001899a:	e8 d9 e7 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001899f:	83 c4 10             	add    esp,0x10
c00189a2:	a8 04                	test   al,0x4
c00189a4:	75 7a                	jne    c0018a20 <RTC::completeRTCRefresh()+0x25e>
c00189a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00189aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189ae:	83 e1 0f             	and    ecx,0xf
c00189b1:	c1 ea 04             	shr    edx,0x4
c00189b4:	c1 ef 04             	shr    edi,0x4
c00189b7:	6b d2 0a             	imul   edx,edx,0xa
c00189ba:	83 e6 0f             	and    esi,0xf
c00189bd:	01 d1                	add    ecx,edx
c00189bf:	c1 ed 04             	shr    ebp,0x4
c00189c2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00189c6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00189ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00189ce:	c1 ea 04             	shr    edx,0x4
c00189d1:	83 e1 0f             	and    ecx,0xf
c00189d4:	6b d2 0a             	imul   edx,edx,0xa
c00189d7:	6b ed 0a             	imul   ebp,ebp,0xa
c00189da:	01 d1                	add    ecx,edx
c00189dc:	89 fa                	mov    edx,edi
c00189de:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00189e2:	83 e2 07             	and    edx,0x7
c00189e5:	89 d9                	mov    ecx,ebx
c00189e7:	6b d2 0a             	imul   edx,edx,0xa
c00189ea:	83 e1 0f             	and    ecx,0xf
c00189ed:	83 e3 80             	and    ebx,0xffffff80
c00189f0:	01 d1                	add    ecx,edx
c00189f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00189f6:	09 cb                	or     ebx,ecx
c00189f8:	c1 ea 04             	shr    edx,0x4
c00189fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00189ff:	6b d2 0a             	imul   edx,edx,0xa
c0018a02:	83 e1 0f             	and    ecx,0xf
c0018a05:	01 d6                	add    esi,edx
c0018a07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a0b:	c1 ea 04             	shr    edx,0x4
c0018a0e:	6b d2 0a             	imul   edx,edx,0xa
c0018a11:	01 d1                	add    ecx,edx
c0018a13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018a17:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018a1b:	83 e2 0f             	and    edx,0xf
c0018a1e:	01 d5                	add    ebp,edx
c0018a20:	a8 02                	test   al,0x2
c0018a22:	75 15                	jne    c0018a39 <RTC::completeRTCRefresh()+0x277>
c0018a24:	f6 c3 80             	test   bl,0x80
c0018a27:	74 10                	je     c0018a39 <RTC::completeRTCRefresh()+0x277>
c0018a29:	83 e3 7f             	and    ebx,0x7f
c0018a2c:	b9 18 00 00 00       	mov    ecx,0x18
c0018a31:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018a34:	99                   	cdq    
c0018a35:	f7 f9                	idiv   ecx
c0018a37:	88 d3                	mov    bl,dl
c0018a39:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018a3f:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018a45:	77 06                	ja     c0018a4d <RTC::completeRTCRefresh()+0x28b>
c0018a47:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018a4d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a52:	31 c9                	xor    ecx,ecx
c0018a54:	c1 e0 10             	shl    eax,0x10
c0018a57:	89 cd                	mov    ebp,ecx
c0018a59:	c1 e7 10             	shl    edi,0x10
c0018a5c:	31 d2                	xor    edx,edx
c0018a5e:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018a64:	09 c5                	or     ebp,eax
c0018a66:	89 f0                	mov    eax,esi
c0018a68:	89 e9                	mov    ecx,ebp
c0018a6a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018a6e:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018a72:	88 c2                	mov    dl,al
c0018a74:	88 d9                	mov    cl,bl
c0018a76:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018a7a:	0f b7 c2             	movzx  eax,dx
c0018a7d:	09 f8                	or     eax,edi
c0018a7f:	89 c2                	mov    edx,eax
c0018a81:	50                   	push   eax
c0018a82:	50                   	push   eax
c0018a83:	51                   	push   ecx
c0018a84:	52                   	push   edx
c0018a85:	e8 31 3b ff ff       	call   c000c5bb <datetimeToSeconds(datetime_t)>
c0018a8a:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018a8e:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018a94:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018a9a:	83 c4 4c             	add    esp,0x4c
c0018a9d:	5b                   	pop    ebx
c0018a9e:	5e                   	pop    esi
c0018a9f:	5f                   	pop    edi
c0018aa0:	5d                   	pop    ebp
c0018aa1:	c3                   	ret    

c0018aa2 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018aa2:	55                   	push   ebp
c0018aa3:	57                   	push   edi
c0018aa4:	56                   	push   esi
c0018aa5:	53                   	push   ebx
c0018aa6:	83 ec 30             	sub    esp,0x30
c0018aa9:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018aad:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018ab1:	6a 00                	push   0x0
c0018ab3:	6a 00                	push   0x0
c0018ab5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018abb:	e8 d2 e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ac0:	83 c4 0c             	add    esp,0xc
c0018ac3:	6a 00                	push   0x0
c0018ac5:	6a 02                	push   0x2
c0018ac7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018acd:	e8 c0 e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ad2:	31 d2                	xor    edx,edx
c0018ad4:	89 f9                	mov    ecx,edi
c0018ad6:	89 f8                	mov    eax,edi
c0018ad8:	c1 e9 10             	shr    ecx,0x10
c0018adb:	0f b6 c4             	movzx  eax,ah
c0018ade:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018ae2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018ae6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018aea:	b9 64 00 00 00       	mov    ecx,0x64
c0018aef:	89 f0                	mov    eax,esi
c0018af1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018af5:	89 f0                	mov    eax,esi
c0018af7:	0f b6 c4             	movzx  eax,ah
c0018afa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018afe:	89 f0                	mov    eax,esi
c0018b00:	c1 e8 10             	shr    eax,0x10
c0018b03:	f7 f1                	div    ecx
c0018b05:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018b09:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018b0d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018b11:	59                   	pop    ecx
c0018b12:	5b                   	pop    ebx
c0018b13:	89 fb                	mov    ebx,edi
c0018b15:	6a 0b                	push   0xb
c0018b17:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b1d:	e8 56 e6 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018b22:	83 c4 10             	add    esp,0x10
c0018b25:	89 c5                	mov    ebp,eax
c0018b27:	a8 04                	test   al,0x4
c0018b29:	75 6e                	jne    c0018b99 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018b2b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018b2f:	31 d2                	xor    edx,edx
c0018b31:	0f b6 c1             	movzx  eax,cl
c0018b34:	b9 0a 00 00 00       	mov    ecx,0xa
c0018b39:	f7 f1                	div    ecx
c0018b3b:	c1 e0 04             	shl    eax,0x4
c0018b3e:	09 d0                	or     eax,edx
c0018b40:	31 d2                	xor    edx,edx
c0018b42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b46:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018b4b:	f7 f1                	div    ecx
c0018b4d:	c1 e0 04             	shl    eax,0x4
c0018b50:	09 d0                	or     eax,edx
c0018b52:	31 d2                	xor    edx,edx
c0018b54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018b58:	0f b6 c3             	movzx  eax,bl
c0018b5b:	f7 f1                	div    ecx
c0018b5d:	c1 e0 04             	shl    eax,0x4
c0018b60:	09 d0                	or     eax,edx
c0018b62:	31 d2                	xor    edx,edx
c0018b64:	89 c3                	mov    ebx,eax
c0018b66:	89 f0                	mov    eax,esi
c0018b68:	0f b6 c0             	movzx  eax,al
c0018b6b:	f7 f1                	div    ecx
c0018b6d:	c1 e0 04             	shl    eax,0x4
c0018b70:	09 d0                	or     eax,edx
c0018b72:	31 d2                	xor    edx,edx
c0018b74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018b78:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b7d:	f7 f1                	div    ecx
c0018b7f:	c1 e0 04             	shl    eax,0x4
c0018b82:	09 d0                	or     eax,edx
c0018b84:	31 d2                	xor    edx,edx
c0018b86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018b8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b8e:	f7 f1                	div    ecx
c0018b90:	c1 e0 04             	shl    eax,0x4
c0018b93:	09 d0                	or     eax,edx
c0018b95:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b99:	83 e5 02             	and    ebp,0x2
c0018b9c:	75 1e                	jne    c0018bbc <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b9e:	0f b6 c3             	movzx  eax,bl
c0018ba1:	83 f8 0b             	cmp    eax,0xb
c0018ba4:	76 10                	jbe    c0018bb6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018ba6:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018ba9:	88 d3                	mov    bl,dl
c0018bab:	84 d2                	test   dl,dl
c0018bad:	75 02                	jne    c0018bb1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018baf:	b3 0c                	mov    bl,0xc
c0018bb1:	83 cb 80             	or     ebx,0xffffff80
c0018bb4:	eb 06                	jmp    c0018bbc <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018bb6:	85 c0                	test   eax,eax
c0018bb8:	75 02                	jne    c0018bbc <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018bba:	b3 0c                	mov    bl,0xc
c0018bbc:	0f b6 db             	movzx  ebx,bl
c0018bbf:	50                   	push   eax
c0018bc0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018bc5:	52                   	push   edx
c0018bc6:	6a 00                	push   0x0
c0018bc8:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bce:	e8 bf e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bd3:	83 c4 0c             	add    esp,0xc
c0018bd6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018bdb:	50                   	push   eax
c0018bdc:	6a 02                	push   0x2
c0018bde:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018be4:	e8 a9 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018be9:	83 c4 0c             	add    esp,0xc
c0018bec:	53                   	push   ebx
c0018bed:	6a 04                	push   0x4
c0018bef:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bf5:	e8 98 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bfa:	83 c4 0c             	add    esp,0xc
c0018bfd:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018c02:	52                   	push   edx
c0018c03:	6a 07                	push   0x7
c0018c05:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c0b:	e8 82 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c10:	83 c4 0c             	add    esp,0xc
c0018c13:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018c18:	50                   	push   eax
c0018c19:	6a 08                	push   0x8
c0018c1b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c21:	e8 6c e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c26:	83 c4 0c             	add    esp,0xc
c0018c29:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018c2e:	55                   	push   ebp
c0018c2f:	6a 09                	push   0x9
c0018c31:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c37:	e8 56 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c3c:	5a                   	pop    edx
c0018c3d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018c41:	e8 7c fb ff ff       	call   c00187c2 <RTC::completeRTCRefresh()>
c0018c46:	83 c4 3c             	add    esp,0x3c
c0018c49:	b0 01                	mov    al,0x1
c0018c4b:	5b                   	pop    ebx
c0018c4c:	5e                   	pop    esi
c0018c4d:	5f                   	pop    edi
c0018c4e:	5d                   	pop    ebp
c0018c4f:	c3                   	ret    

c0018c50 <rtcIRQHandler(regs*, void*)>:
c0018c50:	53                   	push   ebx
c0018c51:	83 ec 10             	sub    esp,0x10
c0018c54:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018c58:	6a 0c                	push   0xc
c0018c5a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c60:	e8 13 e5 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018c65:	83 c4 10             	add    esp,0x10
c0018c68:	a8 80                	test   al,0x80
c0018c6a:	74 24                	je     c0018c90 <rtcIRQHandler(regs*, void*)+0x40>
c0018c6c:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018c73:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018c7a:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018c81:	75 0d                	jne    c0018c90 <rtcIRQHandler(regs*, void*)+0x40>
c0018c83:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018c87:	83 c4 08             	add    esp,0x8
c0018c8a:	5b                   	pop    ebx
c0018c8b:	e9 32 fb ff ff       	jmp    c00187c2 <RTC::completeRTCRefresh()>
c0018c90:	83 c4 08             	add    esp,0x8
c0018c93:	5b                   	pop    ebx
c0018c94:	c3                   	ret    
c0018c95:	90                   	nop

c0018c96 <RTC::RTC()>:
c0018c96:	83 ec 1c             	sub    esp,0x1c
c0018c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c9d:	83 ec 08             	sub    esp,0x8
c0018ca0:	68 cb 2d 02 c0       	push   0xc0022dcb
c0018ca5:	50                   	push   eax
c0018ca6:	e8 eb 37 ff ff       	call   c000c496 <Clock::Clock(char const*)>
c0018cab:	83 c4 10             	add    esp,0x10
c0018cae:	ba e8 2d 02 c0       	mov    edx,0xc0022de8
c0018cb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cb7:	89 10                	mov    DWORD PTR [eax],edx
c0018cb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cbd:	83 ec 0c             	sub    esp,0xc
c0018cc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018cc4:	6a 01                	push   0x1
c0018cc6:	68 50 8c 01 c0       	push   0xc0018c50
c0018ccb:	6a 08                	push   0x8
c0018ccd:	50                   	push   eax
c0018cce:	e8 9f 3c ff ff       	call   c000c972 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018cd3:	83 c4 20             	add    esp,0x20
c0018cd6:	89 c2                	mov    edx,eax
c0018cd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cdc:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018ce2:	fa                   	cli    
c0018ce3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018ce8:	83 c0 01             	add    eax,0x1
c0018ceb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018cf0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018cf5:	83 ec 08             	sub    esp,0x8
c0018cf8:	6a 0b                	push   0xb
c0018cfa:	50                   	push   eax
c0018cfb:	e8 78 e4 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018d00:	83 c4 10             	add    esp,0x10
c0018d03:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018d07:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018d0c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018d10:	83 ca 10             	or     edx,0x10
c0018d13:	0f b6 d2             	movzx  edx,dl
c0018d16:	83 ec 04             	sub    esp,0x4
c0018d19:	52                   	push   edx
c0018d1a:	6a 0b                	push   0xb
c0018d1c:	50                   	push   eax
c0018d1d:	e8 70 e5 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018d22:	83 c4 10             	add    esp,0x10
c0018d25:	83 ec 0c             	sub    esp,0xc
c0018d28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d2c:	e8 91 fa ff ff       	call   c00187c2 <RTC::completeRTCRefresh()>
c0018d31:	83 c4 10             	add    esp,0x10
c0018d34:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d39:	83 e8 01             	sub    eax,0x1
c0018d3c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d41:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d46:	85 c0                	test   eax,eax
c0018d48:	75 01                	jne    c0018d4b <RTC::RTC()+0xb5>
c0018d4a:	fb                   	sti    
c0018d4b:	90                   	nop
c0018d4c:	83 c4 1c             	add    esp,0x1c
c0018d4f:	c3                   	ret    

c0018d50 <HalConsoleScroll(int, int)>:
c0018d50:	83 ec 10             	sub    esp,0x10
c0018d53:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018d5b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018d63:	90                   	nop
c0018d64:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018d69:	0f 8f e1 00 00 00    	jg     c0018e50 <HalConsoleScroll(int, int)+0x100>
c0018d6f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018d77:	90                   	nop
c0018d78:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018d80:	0f 8f be 00 00 00    	jg     c0018e44 <HalConsoleScroll(int, int)+0xf4>
c0018d86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d8a:	89 d0                	mov    eax,edx
c0018d8c:	c1 e0 02             	shl    eax,0x2
c0018d8f:	01 d0                	add    eax,edx
c0018d91:	c1 e0 05             	shl    eax,0x5
c0018d94:	89 c2                	mov    edx,eax
c0018d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d9a:	01 d0                	add    eax,edx
c0018d9c:	89 c2                	mov    edx,eax
c0018d9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018da2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018da5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018da9:	89 d0                	mov    eax,edx
c0018dab:	c1 e0 02             	shl    eax,0x2
c0018dae:	01 d0                	add    eax,edx
c0018db0:	c1 e0 05             	shl    eax,0x5
c0018db3:	89 c2                	mov    edx,eax
c0018db5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018db9:	01 d0                	add    eax,edx
c0018dbb:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018dc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dc5:	01 c2                	add    edx,eax
c0018dc7:	8a 01                	mov    al,BYTE PTR [ecx]
c0018dc9:	88 02                	mov    BYTE PTR [edx],al
c0018dcb:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018dd0:	75 66                	jne    c0018e38 <HalConsoleScroll(int, int)+0xe8>
c0018dd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dd6:	83 e0 01             	and    eax,0x1
c0018dd9:	74 39                	je     c0018e14 <HalConsoleScroll(int, int)+0xc4>
c0018ddb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ddf:	83 e0 0f             	and    eax,0xf
c0018de2:	88 c2                	mov    dl,al
c0018de4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018de8:	c1 e0 04             	shl    eax,0x4
c0018deb:	09 d0                	or     eax,edx
c0018ded:	88 c1                	mov    cl,al
c0018def:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018df3:	89 d0                	mov    eax,edx
c0018df5:	c1 e0 02             	shl    eax,0x2
c0018df8:	01 d0                	add    eax,edx
c0018dfa:	c1 e0 05             	shl    eax,0x5
c0018dfd:	89 c2                	mov    edx,eax
c0018dff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e03:	01 d0                	add    eax,edx
c0018e05:	89 c2                	mov    edx,eax
c0018e07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e0b:	01 d0                	add    eax,edx
c0018e0d:	88 ca                	mov    dl,cl
c0018e0f:	88 10                	mov    BYTE PTR [eax],dl
c0018e11:	eb 25                	jmp    c0018e38 <HalConsoleScroll(int, int)+0xe8>
c0018e13:	90                   	nop
c0018e14:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e18:	89 d0                	mov    eax,edx
c0018e1a:	c1 e0 02             	shl    eax,0x2
c0018e1d:	01 d0                	add    eax,edx
c0018e1f:	c1 e0 05             	shl    eax,0x5
c0018e22:	89 c2                	mov    edx,eax
c0018e24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e28:	01 d0                	add    eax,edx
c0018e2a:	89 c2                	mov    edx,eax
c0018e2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e30:	01 d0                	add    eax,edx
c0018e32:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018e35:	8d 76 00             	lea    esi,[esi+0x0]
c0018e38:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018e3d:	e9 36 ff ff ff       	jmp    c0018d78 <HalConsoleScroll(int, int)+0x28>
c0018e42:	66 90                	xchg   ax,ax
c0018e44:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018e49:	e9 16 ff ff ff       	jmp    c0018d64 <HalConsoleScroll(int, int)+0x14>
c0018e4e:	66 90                	xchg   ax,ax
c0018e50:	90                   	nop
c0018e51:	83 c4 10             	add    esp,0x10
c0018e54:	c3                   	ret    
c0018e55:	8d 76 00             	lea    esi,[esi+0x0]

c0018e58 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018e58:	83 ec 14             	sub    esp,0x14
c0018e5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e5f:	88 04 24             	mov    BYTE PTR [esp],al
c0018e62:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018e65:	0f b6 c0             	movzx  eax,al
c0018e68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e6c:	89 d1                	mov    ecx,edx
c0018e6e:	83 e1 0f             	and    ecx,0xf
c0018e71:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018e75:	c1 e2 04             	shl    edx,0x4
c0018e78:	0f b6 d2             	movzx  edx,dl
c0018e7b:	09 ca                	or     edx,ecx
c0018e7d:	c1 e2 08             	shl    edx,0x8
c0018e80:	09 d0                	or     eax,edx
c0018e82:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018e87:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018e8f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e93:	89 d0                	mov    eax,edx
c0018e95:	c1 e0 02             	shl    eax,0x2
c0018e98:	01 d0                	add    eax,edx
c0018e9a:	c1 e0 04             	shl    eax,0x4
c0018e9d:	89 c2                	mov    edx,eax
c0018e9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ea3:	01 d0                	add    eax,edx
c0018ea5:	01 c0                	add    eax,eax
c0018ea7:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018eab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018eaf:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018eb4:	66 89 02             	mov    WORD PTR [edx],ax
c0018eb7:	90                   	nop
c0018eb8:	83 c4 14             	add    esp,0x14
c0018ebb:	c3                   	ret    

c0018ebc <HalConsoleCursorUpdate(int, int)>:
c0018ebc:	83 ec 20             	sub    esp,0x20
c0018ebf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ec3:	89 c2                	mov    edx,eax
c0018ec5:	c1 e2 02             	shl    edx,0x2
c0018ec8:	01 d0                	add    eax,edx
c0018eca:	c1 e0 04             	shl    eax,0x4
c0018ecd:	89 c2                	mov    edx,eax
c0018ecf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ed3:	01 d0                	add    eax,edx
c0018ed5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018eda:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018ee1:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018ee6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018eea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018eee:	ee                   	out    dx,al
c0018eef:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018ef4:	0f b6 c0             	movzx  eax,al
c0018ef7:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018efe:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018f02:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018f06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018f0a:	ee                   	out    dx,al
c0018f0b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018f12:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018f17:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018f1b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018f1f:	ee                   	out    dx,al
c0018f20:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018f25:	c1 e8 08             	shr    eax,0x8
c0018f28:	0f b6 c0             	movzx  eax,al
c0018f2b:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018f32:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018f36:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018f3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f3e:	ee                   	out    dx,al
c0018f3f:	90                   	nop
c0018f40:	83 c4 20             	add    esp,0x20
c0018f43:	c3                   	ret    

c0018f44 <FAT::getName()>:
c0018f44:	b8 1c 2e 02 c0       	mov    eax,0xc0022e1c
c0018f49:	c3                   	ret    
c0018f4a:	66 90                	xchg   ax,ax

c0018f4c <FAT::tell(void*, unsigned long long*)>:
c0018f4c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f51:	75 09                	jne    c0018f5c <FAT::tell(void*, unsigned long long*)+0x10>
c0018f53:	b8 04 00 00 00       	mov    eax,0x4
c0018f58:	c3                   	ret    
c0018f59:	8d 76 00             	lea    esi,[esi+0x0]
c0018f5c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f61:	75 09                	jne    c0018f6c <FAT::tell(void*, unsigned long long*)+0x20>
c0018f63:	b8 04 00 00 00       	mov    eax,0x4
c0018f68:	c3                   	ret    
c0018f69:	8d 76 00             	lea    esi,[esi+0x0]
c0018f6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f70:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018f73:	ba 00 00 00 00       	mov    edx,0x0
c0018f78:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f7c:	89 01                	mov    DWORD PTR [ecx],eax
c0018f7e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f81:	b8 00 00 00 00       	mov    eax,0x0
c0018f86:	c3                   	ret    
c0018f87:	90                   	nop

c0018f88 <FAT::stat(void*, unsigned long long*)>:
c0018f88:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f8d:	75 09                	jne    c0018f98 <FAT::stat(void*, unsigned long long*)+0x10>
c0018f8f:	b8 04 00 00 00       	mov    eax,0x4
c0018f94:	c3                   	ret    
c0018f95:	8d 76 00             	lea    esi,[esi+0x0]
c0018f98:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f9d:	75 09                	jne    c0018fa8 <FAT::stat(void*, unsigned long long*)+0x20>
c0018f9f:	b8 04 00 00 00       	mov    eax,0x4
c0018fa4:	c3                   	ret    
c0018fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018faf:	ba 00 00 00 00       	mov    edx,0x0
c0018fb4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018fb8:	89 01                	mov    DWORD PTR [ecx],eax
c0018fba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018fbd:	b8 00 00 00 00       	mov    eax,0x0
c0018fc2:	c3                   	ret    
c0018fc3:	90                   	nop

c0018fc4 <FAT::~FAT()>:
c0018fc4:	83 ec 0c             	sub    esp,0xc
c0018fc7:	ba 68 2e 02 c0       	mov    edx,0xc0022e68
c0018fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fd0:	89 10                	mov    DWORD PTR [eax],edx
c0018fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fd6:	83 ec 0c             	sub    esp,0xc
c0018fd9:	50                   	push   eax
c0018fda:	e8 ef 27 ff ff       	call   c000b7ce <Filesystem::~Filesystem()>
c0018fdf:	83 c4 10             	add    esp,0x10
c0018fe2:	90                   	nop
c0018fe3:	83 c4 0c             	add    esp,0xc
c0018fe6:	c3                   	ret    
c0018fe7:	90                   	nop

c0018fe8 <FAT::~FAT()>:
c0018fe8:	83 ec 0c             	sub    esp,0xc
c0018feb:	83 ec 0c             	sub    esp,0xc
c0018fee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ff2:	e8 cd ff ff ff       	call   c0018fc4 <FAT::~FAT()>
c0018ff7:	83 c4 10             	add    esp,0x10
c0018ffa:	83 ec 08             	sub    esp,0x8
c0018ffd:	6a 08                	push   0x8
c0018fff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019003:	e8 10 18 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0019008:	83 c4 10             	add    esp,0x10
c001900b:	83 c4 0c             	add    esp,0xc
c001900e:	c3                   	ret    
c001900f:	90                   	nop

c0019010 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019010:	83 ec 1c             	sub    esp,0x1c
c0019013:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001901a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001901f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019023:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001902a:	83 f8 ff             	cmp    eax,0xffffffff
c001902d:	75 35                	jne    c0019064 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001902f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019033:	88 c2                	mov    dl,al
c0019035:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001903a:	01 d0                	add    eax,edx
c001903c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019040:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019046:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001904a:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019051:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019056:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001905a:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019061:	eb 19                	jmp    c001907c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0019063:	90                   	nop
c0019064:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019068:	88 c2                	mov    dl,al
c001906a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001906e:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019075:	01 d0                	add    eax,edx
c0019077:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001907b:	90                   	nop
c001907c:	83 ec 04             	sub    esp,0x4
c001907f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019083:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019087:	8d 44 24 15          	lea    eax,[esp+0x15]
c001908b:	50                   	push   eax
c001908c:	e8 3e bf fe ff       	call   c0004fcf <f_getlabel>
c0019091:	83 c4 10             	add    esp,0x10
c0019094:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019098:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001909d:	75 09                	jne    c00190a8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001909f:	b8 00 00 00 00       	mov    eax,0x0
c00190a4:	eb 0a                	jmp    c00190b0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00190a6:	66 90                	xchg   ax,ax
c00190a8:	b8 01 00 00 00       	mov    eax,0x1
c00190ad:	8d 76 00             	lea    esi,[esi+0x0]
c00190b0:	83 c4 1c             	add    esp,0x1c
c00190b3:	c3                   	ret    

c00190b4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00190b4:	57                   	push   edi
c00190b5:	83 ec 58             	sub    esp,0x58
c00190b8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00190c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00190c4:	b8 00 00 00 00       	mov    eax,0x0
c00190c9:	b9 0f 00 00 00       	mov    ecx,0xf
c00190ce:	fc                   	cld    
c00190cf:	89 d7                	mov    edi,edx
c00190d1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00190d3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00190d7:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190de:	83 f8 ff             	cmp    eax,0xffffffff
c00190e1:	75 35                	jne    c0019118 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00190e3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00190e7:	88 c2                	mov    dl,al
c00190e9:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190ee:	01 d0                	add    eax,edx
c00190f0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00190f4:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00190fa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00190fe:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019105:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001910a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001910e:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019115:	eb 19                	jmp    c0019130 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0019117:	90                   	nop
c0019118:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001911c:	88 c2                	mov    dl,al
c001911e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019122:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019129:	01 d0                	add    eax,edx
c001912b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001912f:	90                   	nop
c0019130:	83 ec 08             	sub    esp,0x8
c0019133:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019137:	8d 44 24 18          	lea    eax,[esp+0x18]
c001913b:	50                   	push   eax
c001913c:	e8 ff 76 fe ff       	call   c0000840 <strcat>
c0019141:	83 c4 10             	add    esp,0x10
c0019144:	83 ec 0c             	sub    esp,0xc
c0019147:	8d 44 24 18          	lea    eax,[esp+0x18]
c001914b:	50                   	push   eax
c001914c:	e8 cf bf fe ff       	call   c0005120 <f_setlabel>
c0019151:	83 c4 10             	add    esp,0x10
c0019154:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019158:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001915d:	75 09                	jne    c0019168 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001915f:	b8 00 00 00 00       	mov    eax,0x0
c0019164:	eb 0a                	jmp    c0019170 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0019166:	66 90                	xchg   ax,ax
c0019168:	b8 01 00 00 00       	mov    eax,0x1
c001916d:	8d 76 00             	lea    esi,[esi+0x0]
c0019170:	83 c4 58             	add    esp,0x58
c0019173:	5f                   	pop    edi
c0019174:	c3                   	ret    
c0019175:	90                   	nop
c0019176:	66 90                	xchg   ax,ax

c0019178 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019178:	83 ec 2c             	sub    esp,0x2c
c001917b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019183:	83 ec 08             	sub    esp,0x8
c0019186:	68 40 2e 02 c0       	push   0xc0022e40
c001918b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001918f:	e8 bc 75 fe ff       	call   c0000750 <strcmp>
c0019194:	83 c4 10             	add    esp,0x10
c0019197:	85 c0                	test   eax,eax
c0019199:	0f 94 c0             	sete   al
c001919c:	0f b6 c0             	movzx  eax,al
c001919f:	85 c0                	test   eax,eax
c00191a1:	74 0d                	je     c00191b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00191a3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00191ab:	e9 c0 00 00 00       	jmp    c0019270 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191b0:	83 ec 08             	sub    esp,0x8
c00191b3:	68 32 2e 02 c0       	push   0xc0022e32
c00191b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191bc:	e8 8f 75 fe ff       	call   c0000750 <strcmp>
c00191c1:	83 c4 10             	add    esp,0x10
c00191c4:	85 c0                	test   eax,eax
c00191c6:	0f 94 c0             	sete   al
c00191c9:	0f b6 c0             	movzx  eax,al
c00191cc:	85 c0                	test   eax,eax
c00191ce:	74 10                	je     c00191e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00191d0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00191d8:	e9 93 00 00 00       	jmp    c0019270 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191dd:	8d 76 00             	lea    esi,[esi+0x0]
c00191e0:	83 ec 08             	sub    esp,0x8
c00191e3:	68 38 2e 02 c0       	push   0xc0022e38
c00191e8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191ec:	e8 5f 75 fe ff       	call   c0000750 <strcmp>
c00191f1:	83 c4 10             	add    esp,0x10
c00191f4:	85 c0                	test   eax,eax
c00191f6:	0f 94 c0             	sete   al
c00191f9:	0f b6 c0             	movzx  eax,al
c00191fc:	85 c0                	test   eax,eax
c00191fe:	74 0c                	je     c001920c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0019200:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019208:	eb 66                	jmp    c0019270 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001920a:	66 90                	xchg   ax,ax
c001920c:	83 ec 08             	sub    esp,0x8
c001920f:	68 7c 05 02 c0       	push   0xc002057c
c0019214:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019218:	e8 33 75 fe ff       	call   c0000750 <strcmp>
c001921d:	83 c4 10             	add    esp,0x10
c0019220:	85 c0                	test   eax,eax
c0019222:	0f 94 c0             	sete   al
c0019225:	0f b6 c0             	movzx  eax,al
c0019228:	85 c0                	test   eax,eax
c001922a:	74 0c                	je     c0019238 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001922c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019234:	eb 3a                	jmp    c0019270 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019236:	66 90                	xchg   ax,ax
c0019238:	83 ec 08             	sub    esp,0x8
c001923b:	68 3e 2e 02 c0       	push   0xc0022e3e
c0019240:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019244:	e8 07 75 fe ff       	call   c0000750 <strcmp>
c0019249:	83 c4 10             	add    esp,0x10
c001924c:	85 c0                	test   eax,eax
c001924e:	0f 94 c0             	sete   al
c0019251:	0f b6 c0             	movzx  eax,al
c0019254:	85 c0                	test   eax,eax
c0019256:	74 0c                	je     c0019264 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019258:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019260:	eb 0e                	jmp    c0019270 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019262:	66 90                	xchg   ax,ax
c0019264:	b8 08 00 00 00       	mov    eax,0x8
c0019269:	e9 ea 00 00 00       	jmp    c0019358 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001926e:	66 90                	xchg   ax,ax
c0019270:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019277:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001927c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019280:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019287:	83 f8 ff             	cmp    eax,0xffffffff
c001928a:	75 34                	jne    c00192c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001928c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019290:	88 c2                	mov    dl,al
c0019292:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019297:	01 d0                	add    eax,edx
c0019299:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001929d:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00192a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192a7:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00192ae:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192b3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00192b7:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00192be:	eb 18                	jmp    c00192d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00192c0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00192c4:	88 c2                	mov    dl,al
c00192c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192ca:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00192d1:	01 d0                	add    eax,edx
c00192d3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00192d7:	90                   	nop
c00192d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00192dc:	88 04 24             	mov    BYTE PTR [esp],al
c00192df:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00192e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00192ef:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00192f4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00192fc:	83 ec 0c             	sub    esp,0xc
c00192ff:	68 00 20 00 00       	push   0x2000
c0019304:	e8 ad e7 fe ff       	call   c0007ab6 <malloc>
c0019309:	83 c4 10             	add    esp,0x10
c001930c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019310:	68 00 20 00 00       	push   0x2000
c0019315:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019319:	8d 44 24 08          	lea    eax,[esp+0x8]
c001931d:	50                   	push   eax
c001931e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019322:	50                   	push   eax
c0019323:	e8 f5 c0 fe ff       	call   c000541d <f_mkfs>
c0019328:	83 c4 10             	add    esp,0x10
c001932b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001932f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019334:	75 0a                	jne    c0019340 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019336:	b8 00 00 00 00       	mov    eax,0x0
c001933b:	eb 1b                	jmp    c0019358 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001933d:	8d 76 00             	lea    esi,[esi+0x0]
c0019340:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019345:	75 09                	jne    c0019350 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019347:	b8 09 00 00 00       	mov    eax,0x9
c001934c:	eb 0a                	jmp    c0019358 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001934e:	66 90                	xchg   ax,ax
c0019350:	b8 01 00 00 00       	mov    eax,0x1
c0019355:	8d 76 00             	lea    esi,[esi+0x0]
c0019358:	83 c4 2c             	add    esp,0x2c
c001935b:	c3                   	ret    

c001935c <FAT::tryMount(LogicalDisk*, int)>:
c001935c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019362:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019367:	83 f8 14             	cmp    eax,0x14
c001936a:	75 18                	jne    c0019384 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001936c:	83 ec 0c             	sub    esp,0xc
c001936f:	68 44 2e 02 c0       	push   0xc0022e44
c0019374:	e8 a6 82 ff ff       	call   c001161f <KePanic(char const*)>
c0019379:	83 c4 10             	add    esp,0x10
c001937c:	b0 00                	mov    al,0x0
c001937e:	e9 ed 01 00 00       	jmp    c0019570 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019383:	90                   	nop
c0019384:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001938b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019391:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019397:	3d 00 02 00 00       	cmp    eax,0x200
c001939c:	74 0a                	je     c00193a8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001939e:	b0 00                	mov    al,0x0
c00193a0:	e9 cb 01 00 00       	jmp    c0019570 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193a5:	8d 76 00             	lea    esi,[esi+0x0]
c00193a8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00193b0:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00193b7:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00193be:	83 f8 ff             	cmp    eax,0xffffffff
c00193c1:	74 09                	je     c00193cc <FAT::tryMount(LogicalDisk*, int)+0x70>
c00193c3:	b0 01                	mov    al,0x1
c00193c5:	e9 a6 01 00 00       	jmp    c0019570 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193ca:	66 90                	xchg   ax,ax
c00193cc:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00193d6:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00193de:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00193e5:	88 c2                	mov    dl,al
c00193e7:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00193ec:	01 d0                	add    eax,edx
c00193ee:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00193f5:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00193fb:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019402:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019409:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001940e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019415:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c001941c:	83 ec 0c             	sub    esp,0xc
c001941f:	68 34 02 00 00       	push   0x234
c0019424:	e8 8d e6 fe ff       	call   c0007ab6 <malloc>
c0019429:	83 c4 10             	add    esp,0x10
c001942c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019433:	83 ec 04             	sub    esp,0x4
c0019436:	6a 00                	push   0x0
c0019438:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001943f:	50                   	push   eax
c0019440:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019447:	e8 ac a7 fe ff       	call   c0003bf8 <f_mount>
c001944c:	83 c4 10             	add    esp,0x10
c001944f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019456:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001945e:	74 1c                	je     c001947c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019460:	83 ec 0c             	sub    esp,0xc
c0019463:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001946a:	e8 67 e6 fe ff       	call   c0007ad6 <rfree>
c001946f:	83 c4 10             	add    esp,0x10
c0019472:	b0 00                	mov    al,0x0
c0019474:	e9 f7 00 00 00       	jmp    c0019570 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019479:	8d 76 00             	lea    esi,[esi+0x0]
c001947c:	83 ec 04             	sub    esp,0x4
c001947f:	68 00 01 00 00       	push   0x100
c0019484:	6a 00                	push   0x0
c0019486:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001948d:	50                   	push   eax
c001948e:	e8 5d 70 fe ff       	call   c00004f0 <memset>
c0019493:	83 c4 10             	add    esp,0x10
c0019496:	83 ec 08             	sub    esp,0x8
c0019499:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00194a0:	50                   	push   eax
c00194a1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00194a8:	50                   	push   eax
c00194a9:	e8 92 73 fe ff       	call   c0000840 <strcat>
c00194ae:	83 c4 10             	add    esp,0x10
c00194b1:	83 ec 08             	sub    esp,0x8
c00194b4:	68 52 2e 02 c0       	push   0xc0022e52
c00194b9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00194c0:	50                   	push   eax
c00194c1:	e8 7a 73 fe ff       	call   c0000840 <strcat>
c00194c6:	83 c4 10             	add    esp,0x10
c00194c9:	83 ec 04             	sub    esp,0x4
c00194cc:	6a 01                	push   0x1
c00194ce:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00194d5:	50                   	push   eax
c00194d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00194da:	50                   	push   eax
c00194db:	e8 7a a7 fe ff       	call   c0003c5a <f_open>
c00194e0:	83 c4 10             	add    esp,0x10
c00194e3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00194ea:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00194f1:	85 c0                	test   eax,eax
c00194f3:	74 0b                	je     c0019500 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00194f5:	78 31                	js     c0019528 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00194f7:	83 e8 04             	sub    eax,0x4
c00194fa:	83 f8 01             	cmp    eax,0x1
c00194fd:	77 29                	ja     c0019528 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00194ff:	90                   	nop
c0019500:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019508:	83 ec 0c             	sub    esp,0xc
c001950b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001950f:	50                   	push   eax
c0019510:	e8 14 af fe ff       	call   c0004429 <f_close>
c0019515:	83 c4 10             	add    esp,0x10
c0019518:	90                   	nop
c0019519:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019521:	85 c0                	test   eax,eax
c0019523:	74 43                	je     c0019568 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019525:	eb 31                	jmp    c0019558 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019527:	90                   	nop
c0019528:	83 ec 0c             	sub    esp,0xc
c001952b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019532:	e8 9f e5 fe ff       	call   c0007ad6 <rfree>
c0019537:	83 c4 10             	add    esp,0x10
c001953a:	83 ec 04             	sub    esp,0x4
c001953d:	6a 00                	push   0x0
c001953f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019546:	50                   	push   eax
c0019547:	6a 00                	push   0x0
c0019549:	e8 aa a6 fe ff       	call   c0003bf8 <f_mount>
c001954e:	83 c4 10             	add    esp,0x10
c0019551:	b0 00                	mov    al,0x0
c0019553:	eb 1b                	jmp    c0019570 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019555:	8d 76 00             	lea    esi,[esi+0x0]
c0019558:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001955d:	83 c0 01             	add    eax,0x1
c0019560:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c0019565:	8d 76 00             	lea    esi,[esi+0x0]
c0019568:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001956f:	90                   	nop
c0019570:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019576:	c3                   	ret    
c0019577:	90                   	nop

c0019578 <FAT::allocateSwapfile(char const*, int)>:
c0019578:	55                   	push   ebp
c0019579:	57                   	push   edi
c001957a:	56                   	push   esi
c001957b:	53                   	push   ebx
c001957c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019582:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001958d:	83 ec 0c             	sub    esp,0xc
c0019590:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019597:	e8 1a e5 fe ff       	call   c0007ab6 <malloc>
c001959c:	83 c4 10             	add    esp,0x10
c001959f:	89 c7                	mov    edi,eax
c00195a1:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00195a6:	83 ec 04             	sub    esp,0x4
c00195a9:	50                   	push   eax
c00195aa:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00195b1:	57                   	push   edi
c00195b2:	e8 95 25 ff ff       	call   c000bb4c <File::File(char const*, Process*)>
c00195b7:	83 c4 10             	add    esp,0x10
c00195ba:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00195c1:	83 ec 04             	sub    esp,0x4
c00195c4:	8d 44 24 13          	lea    eax,[esp+0x13]
c00195c8:	50                   	push   eax
c00195c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00195cd:	50                   	push   eax
c00195ce:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195d5:	e8 92 28 ff ff       	call   c000be6c <File::stat(unsigned long long*, bool*)>
c00195da:	83 c4 10             	add    esp,0x10
c00195dd:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00195e4:	c1 e0 14             	shl    eax,0x14
c00195e7:	89 c7                	mov    edi,eax
c00195e9:	89 c5                	mov    ebp,eax
c00195eb:	c1 fd 1f             	sar    ebp,0x1f
c00195ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00195f6:	89 f9                	mov    ecx,edi
c00195f8:	31 c1                	xor    ecx,eax
c00195fa:	89 cb                	mov    ebx,ecx
c00195fc:	89 e9                	mov    ecx,ebp
c00195fe:	31 d1                	xor    ecx,edx
c0019600:	89 ce                	mov    esi,ecx
c0019602:	89 f0                	mov    eax,esi
c0019604:	09 d8                	or     eax,ebx
c0019606:	0f 84 9c 00 00 00    	je     c00196a8 <FAT::allocateSwapfile(char const*, int)+0x130>
c001960c:	83 ec 0c             	sub    esp,0xc
c001960f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019616:	e8 1d 27 ff ff       	call   c000bd38 <File::unlink()>
c001961b:	83 c4 10             	add    esp,0x10
c001961e:	83 ec 08             	sub    esp,0x8
c0019621:	6a 12                	push   0x12
c0019623:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001962a:	e8 3b 25 ff ff       	call   c000bb6a <File::open(FileOpenMode)>
c001962f:	83 c4 10             	add    esp,0x10
c0019632:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019639:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001963f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019646:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001964d:	c1 e0 14             	shl    eax,0x14
c0019650:	83 ec 04             	sub    esp,0x4
c0019653:	6a 01                	push   0x1
c0019655:	50                   	push   eax
c0019656:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001965d:	e8 4e bc fe ff       	call   c00052b0 <f_expand>
c0019662:	83 c4 10             	add    esp,0x10
c0019665:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001966c:	8b 00                	mov    eax,DWORD PTR [eax]
c001966e:	83 c0 10             	add    eax,0x10
c0019671:	8b 00                	mov    eax,DWORD PTR [eax]
c0019673:	83 ec 0c             	sub    esp,0xc
c0019676:	8d 54 24 24          	lea    edx,[esp+0x24]
c001967a:	52                   	push   edx
c001967b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001967f:	52                   	push   edx
c0019680:	6a 00                	push   0x0
c0019682:	68 00 04 00 00       	push   0x400
c0019687:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001968e:	ff d0                	call   eax
c0019690:	83 c4 20             	add    esp,0x20
c0019693:	83 ec 0c             	sub    esp,0xc
c0019696:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001969d:	e8 26 25 ff ff       	call   c000bbc8 <File::close()>
c00196a2:	83 c4 10             	add    esp,0x10
c00196a5:	8d 76 00             	lea    esi,[esi+0x0]
c00196a8:	83 ec 08             	sub    esp,0x8
c00196ab:	6a 01                	push   0x1
c00196ad:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196b4:	e8 b1 24 ff ff       	call   c000bb6a <File::open(FileOpenMode)>
c00196b9:	83 c4 10             	add    esp,0x10
c00196bc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00196c5:	83 c0 0c             	add    eax,0xc
c00196c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00196ca:	83 ec 0c             	sub    esp,0xc
c00196cd:	8d 54 24 24          	lea    edx,[esp+0x24]
c00196d1:	52                   	push   edx
c00196d2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00196d6:	52                   	push   edx
c00196d7:	6a 00                	push   0x0
c00196d9:	6a 04                	push   0x4
c00196db:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00196e2:	ff d0                	call   eax
c00196e4:	83 c4 20             	add    esp,0x20
c00196e7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196ee:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00196f4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00196fb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019702:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019705:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001970c:	83 ec 0c             	sub    esp,0xc
c001970f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019716:	e8 ad 24 ff ff       	call   c000bbc8 <File::close()>
c001971b:	83 c4 10             	add    esp,0x10
c001971e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019725:	ba 00 00 00 00       	mov    edx,0x0
c001972a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019730:	5b                   	pop    ebx
c0019731:	5e                   	pop    esi
c0019732:	5f                   	pop    edi
c0019733:	5d                   	pop    ebp
c0019734:	c3                   	ret    
c0019735:	90                   	nop
c0019736:	66 90                	xchg   ax,ax

c0019738 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019738:	57                   	push   edi
c0019739:	56                   	push   esi
c001973a:	53                   	push   ebx
c001973b:	81 ec 50 02 00 00    	sub    esp,0x250
c0019741:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019749:	74 0d                	je     c0019758 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001974b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019753:	75 0f                	jne    c0019764 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019755:	8d 76 00             	lea    esi,[esi+0x0]
c0019758:	b8 04 00 00 00       	mov    eax,0x4
c001975d:	e9 3a 01 00 00       	jmp    c001989c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019762:	66 90                	xchg   ax,ax
c0019764:	83 ec 08             	sub    esp,0x8
c0019767:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001976e:	50                   	push   eax
c001976f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019776:	e8 7b af fe ff       	call   c00046f6 <f_readdir>
c001977b:	83 c4 10             	add    esp,0x10
c001977e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019785:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001978c:	83 ec 0c             	sub    esp,0xc
c001978f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019796:	83 c0 16             	add    eax,0x16
c0019799:	50                   	push   eax
c001979a:	e8 d1 6d fe ff       	call   c0000570 <strlen>
c001979f:	83 c4 10             	add    esp,0x10
c00197a2:	ba 00 00 00 00       	mov    edx,0x0
c00197a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00197ab:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00197af:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00197b6:	0f b6 c0             	movzx  eax,al
c00197b9:	83 e0 10             	and    eax,0x10
c00197bc:	74 0a                	je     c00197c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00197be:	b8 02 00 00 00       	mov    eax,0x2
c00197c3:	eb 0b                	jmp    c00197d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00197c5:	8d 76 00             	lea    esi,[esi+0x0]
c00197c8:	b8 01 00 00 00       	mov    eax,0x1
c00197cd:	8d 76 00             	lea    esi,[esi+0x0]
c00197d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00197d4:	83 ec 08             	sub    esp,0x8
c00197d7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00197de:	83 c0 16             	add    eax,0x16
c00197e1:	50                   	push   eax
c00197e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00197e6:	83 c0 10             	add    eax,0x10
c00197e9:	50                   	push   eax
c00197ea:	e8 51 6e fe ff       	call   c0000640 <strcpy>
c00197ef:	83 c4 10             	add    esp,0x10
c00197f2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00197f9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019800:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019804:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001980b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019812:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019819:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019820:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019827:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001982e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019835:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001983c:	89 c6                	mov    esi,eax
c001983e:	89 d7                	mov    edi,edx
c0019840:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019842:	89 c8                	mov    eax,ecx
c0019844:	89 fa                	mov    edx,edi
c0019846:	89 f3                	mov    ebx,esi
c0019848:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001984f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019856:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001985d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019864:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001986a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019871:	0f be c0             	movsx  eax,al
c0019874:	85 c0                	test   eax,eax
c0019876:	75 08                	jne    c0019880 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019878:	b8 07 00 00 00       	mov    eax,0x7
c001987d:	eb 1d                	jmp    c001989c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001987f:	90                   	nop
c0019880:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019887:	85 c0                	test   eax,eax
c0019889:	75 09                	jne    c0019894 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001988b:	b8 00 00 00 00       	mov    eax,0x0
c0019890:	eb 0a                	jmp    c001989c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019892:	66 90                	xchg   ax,ax
c0019894:	b8 01 00 00 00       	mov    eax,0x1
c0019899:	8d 76 00             	lea    esi,[esi+0x0]
c001989c:	81 c4 50 02 00 00    	add    esp,0x250
c00198a2:	5b                   	pop    ebx
c00198a3:	5e                   	pop    esi
c00198a4:	5f                   	pop    edi
c00198a5:	c3                   	ret    
c00198a6:	66 90                	xchg   ax,ax

c00198a8 <FAT::read(void*, unsigned long, void*, int*)>:
c00198a8:	83 ec 1c             	sub    esp,0x1c
c00198ab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198b0:	74 0a                	je     c00198bc <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00198b2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00198b7:	75 0b                	jne    c00198c4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00198b9:	8d 76 00             	lea    esi,[esi+0x0]
c00198bc:	b8 04 00 00 00       	mov    eax,0x4
c00198c1:	eb 41                	jmp    c0019904 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00198c3:	90                   	nop
c00198c4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198c8:	50                   	push   eax
c00198c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00198d1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198d5:	e8 43 a6 fe ff       	call   c0003f1d <f_read>
c00198da:	83 c4 10             	add    esp,0x10
c00198dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198e5:	89 c2                	mov    edx,eax
c00198e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00198eb:	89 10                	mov    DWORD PTR [eax],edx
c00198ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198f1:	85 c0                	test   eax,eax
c00198f3:	75 07                	jne    c00198fc <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00198f5:	b8 00 00 00 00       	mov    eax,0x0
c00198fa:	eb 08                	jmp    c0019904 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00198fc:	b8 01 00 00 00       	mov    eax,0x1
c0019901:	8d 76 00             	lea    esi,[esi+0x0]
c0019904:	83 c4 1c             	add    esp,0x1c
c0019907:	c3                   	ret    

c0019908 <FAT::write(void*, unsigned long, void*, int*)>:
c0019908:	83 ec 1c             	sub    esp,0x1c
c001990b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019910:	74 0a                	je     c001991c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019912:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019917:	75 0b                	jne    c0019924 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019919:	8d 76 00             	lea    esi,[esi+0x0]
c001991c:	b8 04 00 00 00       	mov    eax,0x4
c0019921:	eb 41                	jmp    c0019964 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019923:	90                   	nop
c0019924:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019928:	50                   	push   eax
c0019929:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001992d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019931:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019935:	e8 e2 a7 fe ff       	call   c000411c <f_write>
c001993a:	83 c4 10             	add    esp,0x10
c001993d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019941:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019945:	89 c2                	mov    edx,eax
c0019947:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001994b:	89 10                	mov    DWORD PTR [eax],edx
c001994d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019951:	85 c0                	test   eax,eax
c0019953:	75 07                	jne    c001995c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019955:	b8 00 00 00 00       	mov    eax,0x0
c001995a:	eb 08                	jmp    c0019964 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001995c:	b8 01 00 00 00       	mov    eax,0x1
c0019961:	8d 76 00             	lea    esi,[esi+0x0]
c0019964:	83 c4 1c             	add    esp,0x1c
c0019967:	c3                   	ret    

c0019968 <FAT::close(void*)>:
c0019968:	83 ec 1c             	sub    esp,0x1c
c001996b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019970:	75 0a                	jne    c001997c <FAT::close(void*)+0x14>
c0019972:	b8 04 00 00 00       	mov    eax,0x4
c0019977:	eb 3f                	jmp    c00199b8 <FAT::close(void*)+0x50>
c0019979:	8d 76 00             	lea    esi,[esi+0x0]
c001997c:	83 ec 0c             	sub    esp,0xc
c001997f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019983:	e8 a1 aa fe ff       	call   c0004429 <f_close>
c0019988:	83 c4 10             	add    esp,0x10
c001998b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001998f:	83 ec 0c             	sub    esp,0xc
c0019992:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019996:	e8 2b e1 fe ff       	call   c0007ac6 <free>
c001999b:	83 c4 10             	add    esp,0x10
c001999e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199a2:	85 c0                	test   eax,eax
c00199a4:	75 0a                	jne    c00199b0 <FAT::close(void*)+0x48>
c00199a6:	b8 00 00 00 00       	mov    eax,0x0
c00199ab:	eb 0b                	jmp    c00199b8 <FAT::close(void*)+0x50>
c00199ad:	8d 76 00             	lea    esi,[esi+0x0]
c00199b0:	b8 01 00 00 00       	mov    eax,0x1
c00199b5:	8d 76 00             	lea    esi,[esi+0x0]
c00199b8:	83 c4 1c             	add    esp,0x1c
c00199bb:	c3                   	ret    

c00199bc <FAT::closeDir(void*)>:
c00199bc:	83 ec 1c             	sub    esp,0x1c
c00199bf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199c4:	75 0a                	jne    c00199d0 <FAT::closeDir(void*)+0x14>
c00199c6:	b8 04 00 00 00       	mov    eax,0x4
c00199cb:	eb 3f                	jmp    c0019a0c <FAT::closeDir(void*)+0x50>
c00199cd:	8d 76 00             	lea    esi,[esi+0x0]
c00199d0:	83 ec 0c             	sub    esp,0xc
c00199d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199d7:	e8 f8 ac fe ff       	call   c00046d4 <f_closedir>
c00199dc:	83 c4 10             	add    esp,0x10
c00199df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199e3:	83 ec 0c             	sub    esp,0xc
c00199e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199ea:	e8 d7 e0 fe ff       	call   c0007ac6 <free>
c00199ef:	83 c4 10             	add    esp,0x10
c00199f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199f6:	85 c0                	test   eax,eax
c00199f8:	75 0a                	jne    c0019a04 <FAT::closeDir(void*)+0x48>
c00199fa:	b8 00 00 00 00       	mov    eax,0x0
c00199ff:	eb 0b                	jmp    c0019a0c <FAT::closeDir(void*)+0x50>
c0019a01:	8d 76 00             	lea    esi,[esi+0x0]
c0019a04:	b8 01 00 00 00       	mov    eax,0x1
c0019a09:	8d 76 00             	lea    esi,[esi+0x0]
c0019a0c:	83 c4 1c             	add    esp,0x1c
c0019a0f:	c3                   	ret    

c0019a10 <FAT::truncate(void*, unsigned long long)>:
c0019a10:	83 ec 2c             	sub    esp,0x2c
c0019a13:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a1b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a23:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a28:	75 0a                	jne    c0019a34 <FAT::truncate(void*, unsigned long long)+0x24>
c0019a2a:	b8 04 00 00 00       	mov    eax,0x4
c0019a2f:	eb 47                	jmp    c0019a78 <FAT::truncate(void*, unsigned long long)+0x68>
c0019a31:	8d 76 00             	lea    esi,[esi+0x0]
c0019a34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019a38:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019a3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019a3f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019a47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a4b:	83 ec 08             	sub    esp,0x8
c0019a4e:	50                   	push   eax
c0019a4f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019a53:	e8 00 aa fe ff       	call   c0004458 <f_lseek>
c0019a58:	83 c4 10             	add    esp,0x10
c0019a5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019a5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a63:	85 c0                	test   eax,eax
c0019a65:	75 09                	jne    c0019a70 <FAT::truncate(void*, unsigned long long)+0x60>
c0019a67:	b8 00 00 00 00       	mov    eax,0x0
c0019a6c:	eb 0a                	jmp    c0019a78 <FAT::truncate(void*, unsigned long long)+0x68>
c0019a6e:	66 90                	xchg   ax,ax
c0019a70:	b8 01 00 00 00       	mov    eax,0x1
c0019a75:	8d 76 00             	lea    esi,[esi+0x0]
c0019a78:	83 c4 2c             	add    esp,0x2c
c0019a7b:	c3                   	ret    

c0019a7c <FAT::seek(void*, unsigned long long)>:
c0019a7c:	83 ec 2c             	sub    esp,0x2c
c0019a7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a8f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a94:	75 0a                	jne    c0019aa0 <FAT::seek(void*, unsigned long long)+0x24>
c0019a96:	b8 04 00 00 00       	mov    eax,0x4
c0019a9b:	eb 33                	jmp    c0019ad0 <FAT::seek(void*, unsigned long long)+0x54>
c0019a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019aa0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019aa4:	83 ec 08             	sub    esp,0x8
c0019aa7:	50                   	push   eax
c0019aa8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019aac:	e8 a7 a9 fe ff       	call   c0004458 <f_lseek>
c0019ab1:	83 c4 10             	add    esp,0x10
c0019ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ab8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019abc:	85 c0                	test   eax,eax
c0019abe:	75 08                	jne    c0019ac8 <FAT::seek(void*, unsigned long long)+0x4c>
c0019ac0:	b8 00 00 00 00       	mov    eax,0x0
c0019ac5:	eb 09                	jmp    c0019ad0 <FAT::seek(void*, unsigned long long)+0x54>
c0019ac7:	90                   	nop
c0019ac8:	b8 01 00 00 00       	mov    eax,0x1
c0019acd:	8d 76 00             	lea    esi,[esi+0x0]
c0019ad0:	83 c4 2c             	add    esp,0x2c
c0019ad3:	c3                   	ret    

c0019ad4 <fatWrapperReadDisk>:
c0019ad4:	53                   	push   ebx
c0019ad5:	83 ec 18             	sub    esp,0x18
c0019ad8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019adc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019ae0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ae5:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019aec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019af0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019af4:	ba 00 00 00 00       	mov    edx,0x0
c0019af9:	83 ec 0c             	sub    esp,0xc
c0019afc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b00:	53                   	push   ebx
c0019b01:	52                   	push   edx
c0019b02:	50                   	push   eax
c0019b03:	51                   	push   ecx
c0019b04:	e8 9f 42 ff ff       	call   c000dda8 <LogicalDisk::read(unsigned long long, int, void*)>
c0019b09:	83 c4 20             	add    esp,0x20
c0019b0c:	83 c4 18             	add    esp,0x18
c0019b0f:	5b                   	pop    ebx
c0019b10:	c3                   	ret    
c0019b11:	8d 76 00             	lea    esi,[esi+0x0]

c0019b14 <fatWrapperWriteDisk>:
c0019b14:	53                   	push   ebx
c0019b15:	83 ec 18             	sub    esp,0x18
c0019b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b1c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b20:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b25:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b2c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b34:	ba 00 00 00 00       	mov    edx,0x0
c0019b39:	83 ec 0c             	sub    esp,0xc
c0019b3c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b40:	53                   	push   ebx
c0019b41:	52                   	push   edx
c0019b42:	50                   	push   eax
c0019b43:	51                   	push   ecx
c0019b44:	e8 cb 42 ff ff       	call   c000de14 <LogicalDisk::write(unsigned long long, int, void*)>
c0019b49:	83 c4 20             	add    esp,0x20
c0019b4c:	83 c4 18             	add    esp,0x18
c0019b4f:	5b                   	pop    ebx
c0019b50:	c3                   	ret    
c0019b51:	8d 76 00             	lea    esi,[esi+0x0]

c0019b54 <fatWrapperIoctl>:
c0019b54:	53                   	push   ebx
c0019b55:	83 ec 28             	sub    esp,0x28
c0019b58:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019b5c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019b60:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019b64:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b68:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b6d:	83 f8 02             	cmp    eax,0x2
c0019b70:	75 32                	jne    c0019ba4 <fatWrapperIoctl+0x50>
c0019b72:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b76:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b7a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b7f:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b86:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b8c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019b92:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b96:	66 89 02             	mov    WORD PTR [edx],ax
c0019b99:	b8 00 00 00 00       	mov    eax,0x0
c0019b9e:	e9 c5 00 00 00       	jmp    c0019c68 <fatWrapperIoctl+0x114>
c0019ba3:	90                   	nop
c0019ba4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ba9:	83 f8 01             	cmp    eax,0x1
c0019bac:	75 6a                	jne    c0019c18 <fatWrapperIoctl+0xc4>
c0019bae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bb2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019bb6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bbb:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019bc2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019bc8:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019bce:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019bd4:	89 c8                	mov    eax,ecx
c0019bd6:	89 da                	mov    edx,ebx
c0019bd8:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019bdc:	c1 e0 0a             	shl    eax,0xa
c0019bdf:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019be4:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019beb:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019bf1:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019bf7:	89 cb                	mov    ebx,ecx
c0019bf9:	c1 fb 1f             	sar    ebx,0x1f
c0019bfc:	53                   	push   ebx
c0019bfd:	51                   	push   ecx
c0019bfe:	52                   	push   edx
c0019bff:	50                   	push   eax
c0019c00:	e8 7b 5b 00 00       	call   c001f780 <__udivdi3>
c0019c05:	83 c4 10             	add    esp,0x10
c0019c08:	89 c2                	mov    edx,eax
c0019c0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c0e:	89 10                	mov    DWORD PTR [eax],edx
c0019c10:	b8 00 00 00 00       	mov    eax,0x0
c0019c15:	eb 51                	jmp    c0019c68 <fatWrapperIoctl+0x114>
c0019c17:	90                   	nop
c0019c18:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c1d:	85 c0                	test   eax,eax
c0019c1f:	75 07                	jne    c0019c28 <fatWrapperIoctl+0xd4>
c0019c21:	b8 00 00 00 00       	mov    eax,0x0
c0019c26:	eb 40                	jmp    c0019c68 <fatWrapperIoctl+0x114>
c0019c28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c2d:	83 f8 03             	cmp    eax,0x3
c0019c30:	75 1a                	jne    c0019c4c <fatWrapperIoctl+0xf8>
c0019c32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019c3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c3e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019c44:	b8 00 00 00 00       	mov    eax,0x0
c0019c49:	eb 1d                	jmp    c0019c68 <fatWrapperIoctl+0x114>
c0019c4b:	90                   	nop
c0019c4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c51:	83 f8 04             	cmp    eax,0x4
c0019c54:	75 0a                	jne    c0019c60 <fatWrapperIoctl+0x10c>
c0019c56:	b8 00 00 00 00       	mov    eax,0x0
c0019c5b:	eb 0b                	jmp    c0019c68 <fatWrapperIoctl+0x114>
c0019c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c60:	b8 04 00 00 00       	mov    eax,0x4
c0019c65:	8d 76 00             	lea    esi,[esi+0x0]
c0019c68:	83 c4 28             	add    esp,0x28
c0019c6b:	5b                   	pop    ebx
c0019c6c:	c3                   	ret    
c0019c6d:	90                   	nop
c0019c6e:	66 90                	xchg   ax,ax

c0019c70 <FAT::FAT()>:
c0019c70:	83 ec 1c             	sub    esp,0x1c
c0019c73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c77:	83 ec 0c             	sub    esp,0xc
c0019c7a:	50                   	push   eax
c0019c7b:	e8 2a 1b ff ff       	call   c000b7aa <Filesystem::Filesystem()>
c0019c80:	83 c4 10             	add    esp,0x10
c0019c83:	ba 68 2e 02 c0       	mov    edx,0xc0022e68
c0019c88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c8c:	89 10                	mov    DWORD PTR [eax],edx
c0019c8e:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019c98:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019ca0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019ca5:	7f 19                	jg     c0019cc0 <FAT::FAT()+0x50>
c0019ca7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cab:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019cb6:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019cbb:	eb e3                	jmp    c0019ca0 <FAT::FAT()+0x30>
c0019cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0019cc0:	90                   	nop
c0019cc1:	83 c4 1c             	add    esp,0x1c
c0019cc4:	c3                   	ret    
c0019cc5:	90                   	nop
c0019cc6:	66 90                	xchg   ax,ax

c0019cc8 <FAT::fixFilepath(char*)>:
c0019cc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ccc:	8a 00                	mov    al,BYTE PTR [eax]
c0019cce:	0f be c0             	movsx  eax,al
c0019cd1:	83 f8 40             	cmp    eax,0x40
c0019cd4:	7e 2e                	jle    c0019d04 <FAT::fixFilepath(char*)+0x3c>
c0019cd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cda:	8a 00                	mov    al,BYTE PTR [eax]
c0019cdc:	83 e8 41             	sub    eax,0x41
c0019cdf:	88 c2                	mov    dl,al
c0019ce1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ce5:	88 10                	mov    BYTE PTR [eax],dl
c0019ce7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ceb:	8a 00                	mov    al,BYTE PTR [eax]
c0019ced:	0f be c0             	movsx  eax,al
c0019cf0:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019cf7:	83 c0 30             	add    eax,0x30
c0019cfa:	88 c2                	mov    dl,al
c0019cfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d00:	88 10                	mov    BYTE PTR [eax],dl
c0019d02:	66 90                	xchg   ax,ax
c0019d04:	90                   	nop
c0019d05:	c3                   	ret    
c0019d06:	66 90                	xchg   ax,ax

c0019d08 <FAT::open(char const*, void**, FileOpenMode)>:
c0019d08:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d0e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d16:	74 0c                	je     c0019d24 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019d18:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019d20:	75 0e                	jne    c0019d30 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019d22:	66 90                	xchg   ax,ax
c0019d24:	b8 04 00 00 00       	mov    eax,0x4
c0019d29:	e9 46 01 00 00       	jmp    c0019e74 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019d2e:	66 90                	xchg   ax,ax
c0019d30:	83 ec 08             	sub    esp,0x8
c0019d33:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d3a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d3e:	50                   	push   eax
c0019d3f:	e8 fc 68 fe ff       	call   c0000640 <strcpy>
c0019d44:	83 c4 10             	add    esp,0x10
c0019d47:	83 ec 08             	sub    esp,0x8
c0019d4a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d4e:	50                   	push   eax
c0019d4f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d56:	e8 6d ff ff ff       	call   c0019cc8 <FAT::fixFilepath(char*)>
c0019d5b:	83 c4 10             	add    esp,0x10
c0019d5e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019d66:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d6d:	83 e0 01             	and    eax,0x1
c0019d70:	74 12                	je     c0019d84 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019d72:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d79:	83 c8 01             	or     eax,0x1
c0019d7c:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d83:	90                   	nop
c0019d84:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d8b:	83 e0 04             	and    eax,0x4
c0019d8e:	74 24                	je     c0019db4 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019d90:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d97:	83 c8 30             	or     eax,0x30
c0019d9a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019da1:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019da8:	83 c8 02             	or     eax,0x2
c0019dab:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019db2:	66 90                	xchg   ax,ax
c0019db4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dbb:	83 e0 02             	and    eax,0x2
c0019dbe:	74 14                	je     c0019dd4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019dc0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019dc7:	83 c8 02             	or     eax,0x2
c0019dca:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0019dd4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ddb:	83 e0 08             	and    eax,0x8
c0019dde:	74 14                	je     c0019df4 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019de0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019de7:	83 c8 04             	or     eax,0x4
c0019dea:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019df1:	8d 76 00             	lea    esi,[esi+0x0]
c0019df4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dfb:	83 e0 10             	and    eax,0x10
c0019dfe:	74 14                	je     c0019e14 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019e00:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e07:	83 c8 08             	or     eax,0x8
c0019e0a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e11:	8d 76 00             	lea    esi,[esi+0x0]
c0019e14:	83 ec 0c             	sub    esp,0xc
c0019e17:	68 28 02 00 00       	push   0x228
c0019e1c:	e8 95 dc fe ff       	call   c0007ab6 <malloc>
c0019e21:	83 c4 10             	add    esp,0x10
c0019e24:	89 c2                	mov    edx,eax
c0019e26:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e2d:	89 10                	mov    DWORD PTR [eax],edx
c0019e2f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019e37:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e40:	83 ec 04             	sub    esp,0x4
c0019e43:	52                   	push   edx
c0019e44:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019e48:	52                   	push   edx
c0019e49:	50                   	push   eax
c0019e4a:	e8 0b 9e fe ff       	call   c0003c5a <f_open>
c0019e4f:	83 c4 10             	add    esp,0x10
c0019e52:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019e59:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019e61:	74 09                	je     c0019e6c <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019e63:	b8 01 00 00 00       	mov    eax,0x1
c0019e68:	eb 0a                	jmp    c0019e74 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019e6a:	66 90                	xchg   ax,ax
c0019e6c:	b8 00 00 00 00       	mov    eax,0x0
c0019e71:	8d 76 00             	lea    esi,[esi+0x0]
c0019e74:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e7a:	c3                   	ret    
c0019e7b:	90                   	nop

c0019e7c <FAT::openDir(char const*, void**)>:
c0019e7c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e82:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e8a:	74 0c                	je     c0019e98 <FAT::openDir(char const*, void**)+0x1c>
c0019e8c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019e94:	75 0e                	jne    c0019ea4 <FAT::openDir(char const*, void**)+0x28>
c0019e96:	66 90                	xchg   ax,ax
c0019e98:	b8 04 00 00 00       	mov    eax,0x4
c0019e9d:	e9 82 00 00 00       	jmp    c0019f24 <FAT::openDir(char const*, void**)+0xa8>
c0019ea2:	66 90                	xchg   ax,ax
c0019ea4:	83 ec 08             	sub    esp,0x8
c0019ea7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019eae:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019eb2:	50                   	push   eax
c0019eb3:	e8 88 67 fe ff       	call   c0000640 <strcpy>
c0019eb8:	83 c4 10             	add    esp,0x10
c0019ebb:	83 ec 08             	sub    esp,0x8
c0019ebe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ec2:	50                   	push   eax
c0019ec3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019eca:	e8 f9 fd ff ff       	call   c0019cc8 <FAT::fixFilepath(char*)>
c0019ecf:	83 c4 10             	add    esp,0x10
c0019ed2:	83 ec 0c             	sub    esp,0xc
c0019ed5:	6a 30                	push   0x30
c0019ed7:	e8 da db fe ff       	call   c0007ab6 <malloc>
c0019edc:	83 c4 10             	add    esp,0x10
c0019edf:	89 c2                	mov    edx,eax
c0019ee1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ee8:	89 10                	mov    DWORD PTR [eax],edx
c0019eea:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ef3:	83 ec 08             	sub    esp,0x8
c0019ef6:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019efa:	52                   	push   edx
c0019efb:	50                   	push   eax
c0019efc:	e8 08 a7 fe ff       	call   c0004609 <f_opendir>
c0019f01:	83 c4 10             	add    esp,0x10
c0019f04:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f0b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019f13:	74 07                	je     c0019f1c <FAT::openDir(char const*, void**)+0xa0>
c0019f15:	b8 01 00 00 00       	mov    eax,0x1
c0019f1a:	eb 08                	jmp    c0019f24 <FAT::openDir(char const*, void**)+0xa8>
c0019f1c:	b8 00 00 00 00       	mov    eax,0x0
c0019f21:	8d 76 00             	lea    esi,[esi+0x0]
c0019f24:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f2a:	c3                   	ret    
c0019f2b:	90                   	nop

c0019f2c <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019f2c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019f32:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019f3a:	75 0c                	jne    c0019f48 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019f3c:	b8 04 00 00 00       	mov    eax,0x4
c0019f41:	e9 d6 00 00 00       	jmp    c001a01c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f46:	66 90                	xchg   ax,ax
c0019f48:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019f50:	75 0a                	jne    c0019f5c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019f52:	b8 04 00 00 00       	mov    eax,0x4
c0019f57:	e9 c0 00 00 00       	jmp    c001a01c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f5c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019f64:	75 0a                	jne    c0019f70 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019f66:	b8 04 00 00 00       	mov    eax,0x4
c0019f6b:	e9 ac 00 00 00       	jmp    c001a01c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f70:	83 ec 08             	sub    esp,0x8
c0019f73:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f7a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f81:	50                   	push   eax
c0019f82:	e8 b9 66 fe ff       	call   c0000640 <strcpy>
c0019f87:	83 c4 10             	add    esp,0x10
c0019f8a:	83 ec 08             	sub    esp,0x8
c0019f8d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019f94:	50                   	push   eax
c0019f95:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f9c:	e8 27 fd ff ff       	call   c0019cc8 <FAT::fixFilepath(char*)>
c0019fa1:	83 c4 10             	add    esp,0x10
c0019fa4:	83 ec 08             	sub    esp,0x8
c0019fa7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019fab:	50                   	push   eax
c0019fac:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019fb3:	50                   	push   eax
c0019fb4:	e8 cf a7 fe ff       	call   c0004788 <f_stat>
c0019fb9:	83 c4 10             	add    esp,0x10
c0019fbc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019fc3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019fca:	85 c0                	test   eax,eax
c0019fcc:	74 0a                	je     c0019fd8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019fce:	83 f8 04             	cmp    eax,0x4
c0019fd1:	74 39                	je     c001a00c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019fd3:	eb 3f                	jmp    c001a014 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0019fd8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019fdc:	0f b6 c0             	movzx  eax,al
c0019fdf:	83 e0 10             	and    eax,0x10
c0019fe2:	0f 95 c2             	setne  dl
c0019fe5:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019fec:	88 10                	mov    BYTE PTR [eax],dl
c0019fee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ff2:	ba 00 00 00 00       	mov    edx,0x0
c0019ff7:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019ffe:	89 01                	mov    DWORD PTR [ecx],eax
c001a000:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a003:	b8 00 00 00 00       	mov    eax,0x0
c001a008:	eb 12                	jmp    c001a01c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a00a:	66 90                	xchg   ax,ax
c001a00c:	b8 02 00 00 00       	mov    eax,0x2
c001a011:	eb 09                	jmp    c001a01c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a013:	90                   	nop
c001a014:	b8 01 00 00 00       	mov    eax,0x1
c001a019:	8d 76 00             	lea    esi,[esi+0x0]
c001a01c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a022:	c3                   	ret    
c001a023:	90                   	nop

c001a024 <FAT::unlink(char const*)>:
c001a024:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a02a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a032:	75 08                	jne    c001a03c <FAT::unlink(char const*)+0x18>
c001a034:	b8 04 00 00 00       	mov    eax,0x4
c001a039:	eb 61                	jmp    c001a09c <FAT::unlink(char const*)+0x78>
c001a03b:	90                   	nop
c001a03c:	83 ec 08             	sub    esp,0x8
c001a03f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a046:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a04a:	50                   	push   eax
c001a04b:	e8 f0 65 fe ff       	call   c0000640 <strcpy>
c001a050:	83 c4 10             	add    esp,0x10
c001a053:	83 ec 08             	sub    esp,0x8
c001a056:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a05a:	50                   	push   eax
c001a05b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a062:	e8 61 fc ff ff       	call   c0019cc8 <FAT::fixFilepath(char*)>
c001a067:	83 c4 10             	add    esp,0x10
c001a06a:	83 ec 0c             	sub    esp,0xc
c001a06d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a071:	50                   	push   eax
c001a072:	e8 83 a9 fe ff       	call   c00049fa <f_unlink>
c001a077:	83 c4 10             	add    esp,0x10
c001a07a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a081:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a088:	85 c0                	test   eax,eax
c001a08a:	75 08                	jne    c001a094 <FAT::unlink(char const*)+0x70>
c001a08c:	b8 00 00 00 00       	mov    eax,0x0
c001a091:	eb 09                	jmp    c001a09c <FAT::unlink(char const*)+0x78>
c001a093:	90                   	nop
c001a094:	b8 01 00 00 00       	mov    eax,0x1
c001a099:	8d 76 00             	lea    esi,[esi+0x0]
c001a09c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a0a2:	c3                   	ret    
c001a0a3:	90                   	nop

c001a0a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a0a4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a0aa:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a0b1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a0b8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a0bc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a0c0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a0c8:	75 0a                	jne    c001a0d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a0ca:	b8 04 00 00 00       	mov    eax,0x4
c001a0cf:	e9 7c 01 00 00       	jmp    c001a250 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a0d4:	83 ec 08             	sub    esp,0x8
c001a0d7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a0de:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a0e2:	50                   	push   eax
c001a0e3:	e8 58 65 fe ff       	call   c0000640 <strcpy>
c001a0e8:	83 c4 10             	add    esp,0x10
c001a0eb:	83 ec 08             	sub    esp,0x8
c001a0ee:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a0f2:	50                   	push   eax
c001a0f3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a0fa:	e8 c9 fb ff ff       	call   c0019cc8 <FAT::fixFilepath(char*)>
c001a0ff:	83 c4 10             	add    esp,0x10
c001a102:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a10a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a112:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a117:	83 e0 01             	and    eax,0x1
c001a11a:	74 14                	je     c001a130 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001a11c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a123:	83 c8 01             	or     eax,0x1
c001a126:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a12d:	8d 76 00             	lea    esi,[esi+0x0]
c001a130:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a135:	83 e0 02             	and    eax,0x2
c001a138:	74 12                	je     c001a14c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a13a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a141:	83 c8 20             	or     eax,0x20
c001a144:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a14b:	90                   	nop
c001a14c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a151:	83 e0 04             	and    eax,0x4
c001a154:	74 12                	je     c001a168 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001a156:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a15d:	83 c8 04             	or     eax,0x4
c001a160:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a167:	90                   	nop
c001a168:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a16d:	83 e0 08             	and    eax,0x8
c001a170:	74 12                	je     c001a184 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001a172:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a179:	83 c8 02             	or     eax,0x2
c001a17c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a183:	90                   	nop
c001a184:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a189:	83 e0 01             	and    eax,0x1
c001a18c:	74 12                	je     c001a1a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001a18e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a195:	83 c8 01             	or     eax,0x1
c001a198:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a19f:	90                   	nop
c001a1a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1a5:	83 e0 02             	and    eax,0x2
c001a1a8:	74 12                	je     c001a1bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001a1aa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1b1:	83 c8 20             	or     eax,0x20
c001a1b4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1bb:	90                   	nop
c001a1bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1c1:	83 e0 04             	and    eax,0x4
c001a1c4:	74 12                	je     c001a1d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001a1c6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1cd:	83 c8 04             	or     eax,0x4
c001a1d0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1d7:	90                   	nop
c001a1d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1dd:	83 e0 08             	and    eax,0x8
c001a1e0:	74 12                	je     c001a1f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001a1e2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1e9:	83 c8 02             	or     eax,0x2
c001a1ec:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1f3:	90                   	nop
c001a1f4:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a1fb:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a202:	09 d0                	or     eax,edx
c001a204:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a20b:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a213:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a21b:	83 ec 04             	sub    esp,0x4
c001a21e:	52                   	push   edx
c001a21f:	50                   	push   eax
c001a220:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a224:	50                   	push   eax
c001a225:	e8 45 ac fe ff       	call   c0004e6f <f_chmod>
c001a22a:	83 c4 10             	add    esp,0x10
c001a22d:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a234:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a23b:	85 c0                	test   eax,eax
c001a23d:	75 09                	jne    c001a248 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001a23f:	b8 00 00 00 00       	mov    eax,0x0
c001a244:	eb 0a                	jmp    c001a250 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a246:	66 90                	xchg   ax,ax
c001a248:	b8 01 00 00 00       	mov    eax,0x1
c001a24d:	8d 76 00             	lea    esi,[esi+0x0]
c001a250:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a256:	c3                   	ret    
c001a257:	90                   	nop

c001a258 <FAT::rename(char const*, char const*)>:
c001a258:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a25e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a266:	74 0c                	je     c001a274 <FAT::rename(char const*, char const*)+0x1c>
c001a268:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a270:	75 0e                	jne    c001a280 <FAT::rename(char const*, char const*)+0x28>
c001a272:	66 90                	xchg   ax,ax
c001a274:	b8 04 00 00 00       	mov    eax,0x4
c001a279:	e9 9e 00 00 00       	jmp    c001a31c <FAT::rename(char const*, char const*)+0xc4>
c001a27e:	66 90                	xchg   ax,ax
c001a280:	83 ec 08             	sub    esp,0x8
c001a283:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a28a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a291:	50                   	push   eax
c001a292:	e8 a9 63 fe ff       	call   c0000640 <strcpy>
c001a297:	83 c4 10             	add    esp,0x10
c001a29a:	83 ec 08             	sub    esp,0x8
c001a29d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a2a4:	50                   	push   eax
c001a2a5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a2ac:	e8 17 fa ff ff       	call   c0019cc8 <FAT::fixFilepath(char*)>
c001a2b1:	83 c4 10             	add    esp,0x10
c001a2b4:	83 ec 08             	sub    esp,0x8
c001a2b7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a2be:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2c2:	50                   	push   eax
c001a2c3:	e8 78 63 fe ff       	call   c0000640 <strcpy>
c001a2c8:	83 c4 10             	add    esp,0x10
c001a2cb:	83 ec 08             	sub    esp,0x8
c001a2ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2d2:	50                   	push   eax
c001a2d3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a2da:	e8 e9 f9 ff ff       	call   c0019cc8 <FAT::fixFilepath(char*)>
c001a2df:	83 c4 10             	add    esp,0x10
c001a2e2:	83 ec 08             	sub    esp,0x8
c001a2e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2e9:	50                   	push   eax
c001a2ea:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a2f1:	50                   	push   eax
c001a2f2:	e8 c0 a9 fe ff       	call   c0004cb7 <f_rename>
c001a2f7:	83 c4 10             	add    esp,0x10
c001a2fa:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a301:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a308:	85 c0                	test   eax,eax
c001a30a:	75 08                	jne    c001a314 <FAT::rename(char const*, char const*)+0xbc>
c001a30c:	b8 00 00 00 00       	mov    eax,0x0
c001a311:	eb 09                	jmp    c001a31c <FAT::rename(char const*, char const*)+0xc4>
c001a313:	90                   	nop
c001a314:	b8 01 00 00 00       	mov    eax,0x1
c001a319:	8d 76 00             	lea    esi,[esi+0x0]
c001a31c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a322:	c3                   	ret    
c001a323:	90                   	nop

c001a324 <FAT::mkdir(char const*)>:
c001a324:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a32a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a332:	75 08                	jne    c001a33c <FAT::mkdir(char const*)+0x18>
c001a334:	b8 04 00 00 00       	mov    eax,0x4
c001a339:	eb 61                	jmp    c001a39c <FAT::mkdir(char const*)+0x78>
c001a33b:	90                   	nop
c001a33c:	83 ec 08             	sub    esp,0x8
c001a33f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a346:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a34a:	50                   	push   eax
c001a34b:	e8 f0 62 fe ff       	call   c0000640 <strcpy>
c001a350:	83 c4 10             	add    esp,0x10
c001a353:	83 ec 08             	sub    esp,0x8
c001a356:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a35a:	50                   	push   eax
c001a35b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a362:	e8 61 f9 ff ff       	call   c0019cc8 <FAT::fixFilepath(char*)>
c001a367:	83 c4 10             	add    esp,0x10
c001a36a:	83 ec 0c             	sub    esp,0xc
c001a36d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a371:	50                   	push   eax
c001a372:	e8 a5 a7 fe ff       	call   c0004b1c <f_mkdir>
c001a377:	83 c4 10             	add    esp,0x10
c001a37a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a381:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a388:	85 c0                	test   eax,eax
c001a38a:	75 08                	jne    c001a394 <FAT::mkdir(char const*)+0x70>
c001a38c:	b8 00 00 00 00       	mov    eax,0x0
c001a391:	eb 09                	jmp    c001a39c <FAT::mkdir(char const*)+0x78>
c001a393:	90                   	nop
c001a394:	b8 01 00 00 00       	mov    eax,0x1
c001a399:	8d 76 00             	lea    esi,[esi+0x0]
c001a39c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a3a2:	c3                   	ret    
c001a3a3:	90                   	nop

c001a3a4 <FAT::exists(char const*)>:
c001a3a4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a3aa:	83 ec 08             	sub    esp,0x8
c001a3ad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a3b4:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3b8:	50                   	push   eax
c001a3b9:	e8 82 62 fe ff       	call   c0000640 <strcpy>
c001a3be:	83 c4 10             	add    esp,0x10
c001a3c1:	83 ec 08             	sub    esp,0x8
c001a3c4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a3c8:	50                   	push   eax
c001a3c9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a3d0:	e8 f3 f8 ff ff       	call   c0019cc8 <FAT::fixFilepath(char*)>
c001a3d5:	83 c4 10             	add    esp,0x10
c001a3d8:	83 ec 08             	sub    esp,0x8
c001a3db:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a3e2:	50                   	push   eax
c001a3e3:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3e7:	50                   	push   eax
c001a3e8:	e8 9b a3 fe ff       	call   c0004788 <f_stat>
c001a3ed:	83 c4 10             	add    esp,0x10
c001a3f0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a3f7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a3fe:	85 c0                	test   eax,eax
c001a400:	75 06                	jne    c001a408 <FAT::exists(char const*)+0x64>
c001a402:	b0 01                	mov    al,0x1
c001a404:	eb 06                	jmp    c001a40c <FAT::exists(char const*)+0x68>
c001a406:	66 90                	xchg   ax,ax
c001a408:	b0 00                	mov    al,0x0
c001a40a:	66 90                	xchg   ax,ax
c001a40c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a412:	c3                   	ret    
c001a413:	90                   	nop

c001a414 <isoReadDiscSectorHelper>:
c001a414:	83 ec 2c             	sub    esp,0x2c
c001a417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a41b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a41f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a424:	83 e8 41             	sub    eax,0x41
c001a427:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a42e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a432:	ba 00 00 00 00       	mov    edx,0x0
c001a437:	83 ec 0c             	sub    esp,0xc
c001a43a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a43e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a442:	52                   	push   edx
c001a443:	50                   	push   eax
c001a444:	51                   	push   ecx
c001a445:	e8 5e 39 ff ff       	call   c000dda8 <LogicalDisk::read(unsigned long long, int, void*)>
c001a44a:	83 c4 20             	add    esp,0x20
c001a44d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a451:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a456:	74 0c                	je     c001a464 <isoReadDiscSectorHelper+0x50>
c001a458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a45c:	c1 e0 0b             	shl    eax,0xb
c001a45f:	eb 0b                	jmp    c001a46c <isoReadDiscSectorHelper+0x58>
c001a461:	8d 76 00             	lea    esi,[esi+0x0]
c001a464:	b8 00 00 00 00       	mov    eax,0x0
c001a469:	8d 76 00             	lea    esi,[esi+0x0]
c001a46c:	83 c4 2c             	add    esp,0x2c
c001a46f:	c3                   	ret    

c001a470 <iso_kprintf>:
c001a470:	83 ec 0c             	sub    esp,0xc
c001a473:	83 ec 08             	sub    esp,0x8
c001a476:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a47a:	68 16 2c 02 c0       	push   0xc0022c16
c001a47f:	e8 c1 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a484:	83 c4 10             	add    esp,0x10
c001a487:	90                   	nop
c001a488:	83 c4 0c             	add    esp,0xc
c001a48b:	c3                   	ret    

c001a48c <iso_kprintfd>:
c001a48c:	83 ec 0c             	sub    esp,0xc
c001a48f:	83 ec 08             	sub    esp,0x8
c001a492:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a496:	68 5a 13 02 c0       	push   0xc002135a
c001a49b:	e8 a5 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a4a0:	83 c4 10             	add    esp,0x10
c001a4a3:	90                   	nop
c001a4a4:	83 c4 0c             	add    esp,0xc
c001a4a7:	c3                   	ret    

c001a4a8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a4a8:	b8 08 00 00 00       	mov    eax,0x8
c001a4ad:	c3                   	ret    

c001a4ae <ISO9660::truncate(void*, unsigned long long)>:
c001a4ae:	b8 01 00 00 00       	mov    eax,0x1
c001a4b3:	c3                   	ret    

c001a4b4 <ISO9660::getName()>:
c001a4b4:	b8 cc 2e 02 c0       	mov    eax,0xc0022ecc
c001a4b9:	c3                   	ret    

c001a4ba <ISO9660::closeDir(void*)>:
c001a4ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4be:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4c0:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a4c3:	90                   	nop

c001a4c4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a4c4:	b8 01 00 00 00       	mov    eax,0x1
c001a4c9:	c3                   	ret    

c001a4ca <ISO9660::unlink(char const*)>:
c001a4ca:	b8 01 00 00 00       	mov    eax,0x1
c001a4cf:	c3                   	ret    

c001a4d0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a4d0:	b8 03 00 00 00       	mov    eax,0x3
c001a4d5:	c3                   	ret    

c001a4d6 <ISO9660::rename(char const*, char const*)>:
c001a4d6:	b8 01 00 00 00       	mov    eax,0x1
c001a4db:	c3                   	ret    

c001a4dc <ISO9660::mkdir(char const*)>:
c001a4dc:	b8 01 00 00 00       	mov    eax,0x1
c001a4e1:	c3                   	ret    

c001a4e2 <ISO9660::~ISO9660()>:
c001a4e2:	83 ec 0c             	sub    esp,0xc
c001a4e5:	ba 0c 30 02 c0       	mov    edx,0xc002300c
c001a4ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4ee:	89 10                	mov    DWORD PTR [eax],edx
c001a4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4f4:	83 ec 0c             	sub    esp,0xc
c001a4f7:	50                   	push   eax
c001a4f8:	e8 d1 12 ff ff       	call   c000b7ce <Filesystem::~Filesystem()>
c001a4fd:	83 c4 10             	add    esp,0x10
c001a500:	90                   	nop
c001a501:	83 c4 0c             	add    esp,0xc
c001a504:	c3                   	ret    
c001a505:	90                   	nop

c001a506 <ISO9660::~ISO9660()>:
c001a506:	83 ec 0c             	sub    esp,0xc
c001a509:	83 ec 0c             	sub    esp,0xc
c001a50c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a510:	e8 cd ff ff ff       	call   c001a4e2 <ISO9660::~ISO9660()>
c001a515:	83 c4 10             	add    esp,0x10
c001a518:	83 ec 08             	sub    esp,0x8
c001a51b:	6a 08                	push   0x8
c001a51d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a521:	e8 f2 02 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a526:	83 c4 10             	add    esp,0x10
c001a529:	83 c4 0c             	add    esp,0xc
c001a52c:	c3                   	ret    
c001a52d:	90                   	nop

c001a52e <ISO9660::exists(char const*)>:
c001a52e:	83 ec 18             	sub    esp,0x18
c001a531:	68 e7 2e 02 c0       	push   0xc0022ee7
c001a536:	e8 e4 70 ff ff       	call   c001161f <KePanic(char const*)>
c001a53b:	31 c0                	xor    eax,eax
c001a53d:	83 c4 1c             	add    esp,0x1c
c001a540:	c3                   	ret    
c001a541:	90                   	nop

c001a542 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a542:	56                   	push   esi
c001a543:	53                   	push   ebx
c001a544:	53                   	push   ebx
c001a545:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a549:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a54d:	85 db                	test   ebx,ebx
c001a54f:	0f 84 ca 00 00 00    	je     c001a61f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a555:	85 f6                	test   esi,esi
c001a557:	0f 84 c2 00 00 00    	je     c001a61f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a55d:	b8 03 00 00 00       	mov    eax,0x3
c001a562:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a567:	0f 85 b7 00 00 00    	jne    c001a624 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a56d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a56f:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a576:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a57c:	74 1b                	je     c001a599 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a57e:	85 c0                	test   eax,eax
c001a580:	74 10                	je     c001a592 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a582:	83 ec 0c             	sub    esp,0xc
c001a585:	68 05 2f 02 c0       	push   0xc0022f05
c001a58a:	e8 90 70 ff ff       	call   c001161f <KePanic(char const*)>
c001a58f:	83 c4 10             	add    esp,0x10
c001a592:	8a 03                	mov    al,BYTE PTR [ebx]
c001a594:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a599:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a59c:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a5a3:	85 c0                	test   eax,eax
c001a5a5:	74 09                	je     c001a5b0 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a5a7:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a5ae:	74 48                	je     c001a5f8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a5b0:	83 ec 0c             	sub    esp,0xc
c001a5b3:	68 15 2f 02 c0       	push   0xc0022f15
c001a5b8:	e8 88 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a5bd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a5c0:	83 c4 10             	add    esp,0x10
c001a5c3:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a5ca:	85 c0                	test   eax,eax
c001a5cc:	74 17                	je     c001a5e5 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a5ce:	83 ec 0c             	sub    esp,0xc
c001a5d1:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a5d8:	68 35 2f 02 c0       	push   0xc0022f35
c001a5dd:	e8 63 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a5e2:	83 c4 10             	add    esp,0x10
c001a5e5:	83 ec 0c             	sub    esp,0xc
c001a5e8:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a5ef:	50                   	push   eax
c001a5f0:	e8 51 c4 fe ff       	call   c0006a46 <init_percd>
c001a5f5:	83 c4 10             	add    esp,0x10
c001a5f8:	83 c3 03             	add    ebx,0x3
c001a5fb:	51                   	push   ecx
c001a5fc:	51                   	push   ecx
c001a5fd:	6a 00                	push   0x0
c001a5ff:	53                   	push   ebx
c001a600:	e8 08 bf fe ff       	call   c000650d <iso_open>
c001a605:	83 c4 10             	add    esp,0x10
c001a608:	89 c2                	mov    edx,eax
c001a60a:	b8 01 00 00 00       	mov    eax,0x1
c001a60f:	83 fa ff             	cmp    edx,0xffffffff
c001a612:	74 10                	je     c001a624 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a614:	83 c2 32             	add    edx,0x32
c001a617:	31 c0                	xor    eax,eax
c001a619:	01 d2                	add    edx,edx
c001a61b:	89 16                	mov    DWORD PTR [esi],edx
c001a61d:	eb 05                	jmp    c001a624 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a61f:	b8 04 00 00 00       	mov    eax,0x4
c001a624:	5a                   	pop    edx
c001a625:	5b                   	pop    ebx
c001a626:	5e                   	pop    esi
c001a627:	c3                   	ret    

c001a628 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a628:	53                   	push   ebx
c001a629:	83 ec 08             	sub    esp,0x8
c001a62c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a630:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a634:	85 c0                	test   eax,eax
c001a636:	74 2d                	je     c001a665 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a638:	85 db                	test   ebx,ebx
c001a63a:	74 29                	je     c001a665 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a63c:	b9 02 00 00 00       	mov    ecx,0x2
c001a641:	52                   	push   edx
c001a642:	99                   	cdq    
c001a643:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a647:	f7 f9                	idiv   ecx
c001a649:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a64d:	83 e8 32             	sub    eax,0x32
c001a650:	50                   	push   eax
c001a651:	e8 5f bf fe ff       	call   c00065b5 <iso_read>
c001a656:	83 c4 10             	add    esp,0x10
c001a659:	89 03                	mov    DWORD PTR [ebx],eax
c001a65b:	09 d0                	or     eax,edx
c001a65d:	0f 94 c0             	sete   al
c001a660:	0f b6 c0             	movzx  eax,al
c001a663:	eb 05                	jmp    c001a66a <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a665:	b8 04 00 00 00       	mov    eax,0x4
c001a66a:	83 c4 08             	add    esp,0x8
c001a66d:	5b                   	pop    ebx
c001a66e:	c3                   	ret    
c001a66f:	90                   	nop

c001a670 <ISO9660::seek(void*, unsigned long long)>:
c001a670:	57                   	push   edi
c001a671:	56                   	push   esi
c001a672:	b8 04 00 00 00       	mov    eax,0x4
c001a677:	51                   	push   ecx
c001a678:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a67c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a680:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a684:	85 d2                	test   edx,edx
c001a686:	74 26                	je     c001a6ae <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a688:	6a 00                	push   0x0
c001a68a:	b9 02 00 00 00       	mov    ecx,0x2
c001a68f:	57                   	push   edi
c001a690:	89 d0                	mov    eax,edx
c001a692:	56                   	push   esi
c001a693:	99                   	cdq    
c001a694:	f7 f9                	idiv   ecx
c001a696:	83 e8 32             	sub    eax,0x32
c001a699:	50                   	push   eax
c001a69a:	e8 2c c0 fe ff       	call   c00066cb <iso_seek>
c001a69f:	83 c4 10             	add    esp,0x10
c001a6a2:	31 f0                	xor    eax,esi
c001a6a4:	31 fa                	xor    edx,edi
c001a6a6:	09 d0                	or     eax,edx
c001a6a8:	0f 95 c0             	setne  al
c001a6ab:	0f b6 c0             	movzx  eax,al
c001a6ae:	5a                   	pop    edx
c001a6af:	5e                   	pop    esi
c001a6b0:	5f                   	pop    edi
c001a6b1:	c3                   	ret    

c001a6b2 <ISO9660::tell(void*, unsigned long long*)>:
c001a6b2:	53                   	push   ebx
c001a6b3:	83 ec 08             	sub    esp,0x8
c001a6b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6ba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a6be:	85 c0                	test   eax,eax
c001a6c0:	74 24                	je     c001a6e6 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a6c2:	85 db                	test   ebx,ebx
c001a6c4:	74 20                	je     c001a6e6 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a6c6:	83 ec 0c             	sub    esp,0xc
c001a6c9:	b9 02 00 00 00       	mov    ecx,0x2
c001a6ce:	99                   	cdq    
c001a6cf:	f7 f9                	idiv   ecx
c001a6d1:	83 e8 32             	sub    eax,0x32
c001a6d4:	50                   	push   eax
c001a6d5:	e8 75 c0 fe ff       	call   c000674f <iso_tell>
c001a6da:	83 c4 10             	add    esp,0x10
c001a6dd:	89 03                	mov    DWORD PTR [ebx],eax
c001a6df:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a6e2:	31 c0                	xor    eax,eax
c001a6e4:	eb 05                	jmp    c001a6eb <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a6e6:	b8 04 00 00 00       	mov    eax,0x4
c001a6eb:	83 c4 08             	add    esp,0x8
c001a6ee:	5b                   	pop    ebx
c001a6ef:	c3                   	ret    

c001a6f0 <ISO9660::stat(void*, unsigned long long*)>:
c001a6f0:	53                   	push   ebx
c001a6f1:	83 ec 14             	sub    esp,0x14
c001a6f4:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a6f8:	68 59 2f 02 c0       	push   0xc0022f59
c001a6fd:	e8 43 02 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a702:	83 c4 10             	add    esp,0x10
c001a705:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a70a:	74 2c                	je     c001a738 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a70c:	85 db                	test   ebx,ebx
c001a70e:	74 28                	je     c001a738 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a710:	83 ec 0c             	sub    esp,0xc
c001a713:	b9 02 00 00 00       	mov    ecx,0x2
c001a718:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a71c:	99                   	cdq    
c001a71d:	f7 f9                	idiv   ecx
c001a71f:	83 e8 32             	sub    eax,0x32
c001a722:	50                   	push   eax
c001a723:	e8 58 c0 fe ff       	call   c0006780 <iso_total>
c001a728:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a72f:	89 03                	mov    DWORD PTR [ebx],eax
c001a731:	83 c4 10             	add    esp,0x10
c001a734:	31 c0                	xor    eax,eax
c001a736:	eb 05                	jmp    c001a73d <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a738:	b8 04 00 00 00       	mov    eax,0x4
c001a73d:	83 c4 08             	add    esp,0x8
c001a740:	5b                   	pop    ebx
c001a741:	c3                   	ret    

c001a742 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a742:	55                   	push   ebp
c001a743:	57                   	push   edi
c001a744:	56                   	push   esi
c001a745:	53                   	push   ebx
c001a746:	83 ec 18             	sub    esp,0x18
c001a749:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a74d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a751:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a755:	68 61 2f 02 c0       	push   0xc0022f61
c001a75a:	e8 e6 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a75f:	83 c4 10             	add    esp,0x10
c001a762:	85 ff                	test   edi,edi
c001a764:	0f 94 c0             	sete   al
c001a767:	85 f6                	test   esi,esi
c001a769:	0f 94 c2             	sete   dl
c001a76c:	09 d0                	or     eax,edx
c001a76e:	a8 01                	test   al,0x1
c001a770:	0f 85 dd 00 00 00    	jne    c001a853 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a776:	85 db                	test   ebx,ebx
c001a778:	0f 84 d5 00 00 00    	je     c001a853 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a77e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a781:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a787:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a78e:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a797:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a79d:	74 1b                	je     c001a7ba <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a79f:	85 c0                	test   eax,eax
c001a7a1:	74 10                	je     c001a7b3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a7a3:	83 ec 0c             	sub    esp,0xc
c001a7a6:	68 05 2f 02 c0       	push   0xc0022f05
c001a7ab:	e8 6f 6e ff ff       	call   c001161f <KePanic(char const*)>
c001a7b0:	83 c4 10             	add    esp,0x10
c001a7b3:	8a 03                	mov    al,BYTE PTR [ebx]
c001a7b5:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a7ba:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a7bd:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a7c4:	85 c0                	test   eax,eax
c001a7c6:	74 09                	je     c001a7d1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a7c8:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a7cf:	74 51                	je     c001a822 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a7d1:	83 ec 0c             	sub    esp,0xc
c001a7d4:	68 69 2f 02 c0       	push   0xc0022f69
c001a7d9:	e8 67 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a7de:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a7e1:	83 c4 10             	add    esp,0x10
c001a7e4:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a7ec:	74 21                	je     c001a80f <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a7ee:	83 ec 0c             	sub    esp,0xc
c001a7f1:	68 89 2f 02 c0       	push   0xc0022f89
c001a7f6:	e8 4a 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a7fb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a7fe:	83 c4 10             	add    esp,0x10
c001a801:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a808:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a80f:	83 ec 0c             	sub    esp,0xc
c001a812:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a819:	50                   	push   eax
c001a81a:	e8 27 c2 fe ff       	call   c0006a46 <init_percd>
c001a81f:	83 c4 10             	add    esp,0x10
c001a822:	83 c3 03             	add    ebx,0x3
c001a825:	52                   	push   edx
c001a826:	52                   	push   edx
c001a827:	6a 00                	push   0x0
c001a829:	53                   	push   ebx
c001a82a:	e8 de bc fe ff       	call   c000650d <iso_open>
c001a82f:	83 c4 10             	add    esp,0x10
c001a832:	89 c5                	mov    ebp,eax
c001a834:	83 f8 ff             	cmp    eax,0xffffffff
c001a837:	75 21                	jne    c001a85a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a839:	50                   	push   eax
c001a83a:	50                   	push   eax
c001a83b:	6a 01                	push   0x1
c001a83d:	53                   	push   ebx
c001a83e:	e8 ca bc fe ff       	call   c000650d <iso_open>
c001a843:	83 c4 10             	add    esp,0x10
c001a846:	ba 02 00 00 00       	mov    edx,0x2
c001a84b:	40                   	inc    eax
c001a84c:	74 2b                	je     c001a879 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a84e:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a851:	eb 24                	jmp    c001a877 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a853:	ba 04 00 00 00       	mov    edx,0x4
c001a858:	eb 1f                	jmp    c001a879 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a85a:	83 ec 0c             	sub    esp,0xc
c001a85d:	50                   	push   eax
c001a85e:	e8 1d bf fe ff       	call   c0006780 <iso_total>
c001a863:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a86a:	89 07                	mov    DWORD PTR [edi],eax
c001a86c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a86f:	e8 23 bd fe ff       	call   c0006597 <iso_close>
c001a874:	83 c4 10             	add    esp,0x10
c001a877:	31 d2                	xor    edx,edx
c001a879:	83 c4 0c             	add    esp,0xc
c001a87c:	89 d0                	mov    eax,edx
c001a87e:	5b                   	pop    ebx
c001a87f:	5e                   	pop    esi
c001a880:	5f                   	pop    edi
c001a881:	5d                   	pop    ebp
c001a882:	c3                   	ret    
c001a883:	90                   	nop

c001a884 <ISO9660::close(void*)>:
c001a884:	83 ec 0c             	sub    esp,0xc
c001a887:	b8 04 00 00 00       	mov    eax,0x4
c001a88c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a890:	85 d2                	test   edx,edx
c001a892:	74 1b                	je     c001a8af <ISO9660::close(void*)+0x2b>
c001a894:	83 ec 0c             	sub    esp,0xc
c001a897:	b9 02 00 00 00       	mov    ecx,0x2
c001a89c:	89 d0                	mov    eax,edx
c001a89e:	99                   	cdq    
c001a89f:	f7 f9                	idiv   ecx
c001a8a1:	83 e8 32             	sub    eax,0x32
c001a8a4:	50                   	push   eax
c001a8a5:	e8 ed bc fe ff       	call   c0006597 <iso_close>
c001a8aa:	83 c4 10             	add    esp,0x10
c001a8ad:	31 c0                	xor    eax,eax
c001a8af:	83 c4 0c             	add    esp,0xc
c001a8b2:	c3                   	ret    
c001a8b3:	90                   	nop

c001a8b4 <ISO9660::openDir(char const*, void**)>:
c001a8b4:	56                   	push   esi
c001a8b5:	53                   	push   ebx
c001a8b6:	50                   	push   eax
c001a8b7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a8bb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a8bf:	85 db                	test   ebx,ebx
c001a8c1:	0f 84 bd 00 00 00    	je     c001a984 <ISO9660::openDir(char const*, void**)+0xd0>
c001a8c7:	85 f6                	test   esi,esi
c001a8c9:	0f 84 b5 00 00 00    	je     c001a984 <ISO9660::openDir(char const*, void**)+0xd0>
c001a8cf:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a8d1:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a8d8:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a8de:	74 1b                	je     c001a8fb <ISO9660::openDir(char const*, void**)+0x47>
c001a8e0:	85 c0                	test   eax,eax
c001a8e2:	74 10                	je     c001a8f4 <ISO9660::openDir(char const*, void**)+0x40>
c001a8e4:	83 ec 0c             	sub    esp,0xc
c001a8e7:	68 05 2f 02 c0       	push   0xc0022f05
c001a8ec:	e8 2e 6d ff ff       	call   c001161f <KePanic(char const*)>
c001a8f1:	83 c4 10             	add    esp,0x10
c001a8f4:	8a 03                	mov    al,BYTE PTR [ebx]
c001a8f6:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a8fb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a8fe:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a905:	85 c0                	test   eax,eax
c001a907:	74 10                	je     c001a919 <ISO9660::openDir(char const*, void**)+0x65>
c001a909:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a910:	74 1a                	je     c001a92c <ISO9660::openDir(char const*, void**)+0x78>
c001a912:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a919:	83 ec 0c             	sub    esp,0xc
c001a91c:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a923:	50                   	push   eax
c001a924:	e8 1d c1 fe ff       	call   c0006a46 <init_percd>
c001a929:	83 c4 10             	add    esp,0x10
c001a92c:	83 c3 03             	add    ebx,0x3
c001a92f:	50                   	push   eax
c001a930:	50                   	push   eax
c001a931:	6a 01                	push   0x1
c001a933:	53                   	push   ebx
c001a934:	e8 d4 bb fe ff       	call   c000650d <iso_open>
c001a939:	83 c4 10             	add    esp,0x10
c001a93c:	89 c3                	mov    ebx,eax
c001a93e:	83 f8 ff             	cmp    eax,0xffffffff
c001a941:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a946:	75 1c                	jne    c001a964 <ISO9660::openDir(char const*, void**)+0xb0>
c001a948:	53                   	push   ebx
c001a949:	53                   	push   ebx
c001a94a:	68 ad 2f 02 c0       	push   0xc0022fad
c001a94f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a955:	e8 4c e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a95a:	83 c4 10             	add    esp,0x10
c001a95d:	b8 01 00 00 00       	mov    eax,0x1
c001a962:	eb 25                	jmp    c001a989 <ISO9660::openDir(char const*, void**)+0xd5>
c001a964:	01 db                	add    ebx,ebx
c001a966:	51                   	push   ecx
c001a967:	83 c3 65             	add    ebx,0x65
c001a96a:	51                   	push   ecx
c001a96b:	68 c0 2f 02 c0       	push   0xc0022fc0
c001a970:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a976:	e8 2b e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a97b:	89 1e                	mov    DWORD PTR [esi],ebx
c001a97d:	83 c4 10             	add    esp,0x10
c001a980:	31 c0                	xor    eax,eax
c001a982:	eb 05                	jmp    c001a989 <ISO9660::openDir(char const*, void**)+0xd5>
c001a984:	b8 04 00 00 00       	mov    eax,0x4
c001a989:	5a                   	pop    edx
c001a98a:	5b                   	pop    ebx
c001a98b:	5e                   	pop    esi
c001a98c:	c3                   	ret    
c001a98d:	90                   	nop

c001a98e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a98e:	55                   	push   ebp
c001a98f:	57                   	push   edi
c001a990:	56                   	push   esi
c001a991:	53                   	push   ebx
c001a992:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a998:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a99f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a9a6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a9ae:	0f 84 e7 00 00 00    	je     c001aa9b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a9b4:	85 db                	test   ebx,ebx
c001a9b6:	0f 84 df 00 00 00    	je     c001aa9b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a9bc:	83 ec 0c             	sub    esp,0xc
c001a9bf:	68 d3 2f 02 c0       	push   0xc0022fd3
c001a9c4:	e8 7c ff fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a9c9:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a9d0:	b9 02 00 00 00       	mov    ecx,0x2
c001a9d5:	99                   	cdq    
c001a9d6:	f7 f9                	idiv   ecx
c001a9d8:	83 e8 32             	sub    eax,0x32
c001a9db:	89 04 24             	mov    DWORD PTR [esp],eax
c001a9de:	e8 ef bd fe ff       	call   c00067d2 <iso_readdir>
c001a9e3:	83 c4 10             	add    esp,0x10
c001a9e6:	89 c6                	mov    esi,eax
c001a9e8:	85 c0                	test   eax,eax
c001a9ea:	75 37                	jne    c001aa23 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a9ec:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a9f1:	56                   	push   esi
c001a9f2:	56                   	push   esi
c001a9f3:	68 de 2f 02 c0       	push   0xc0022fde
c001a9f8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9fe:	e8 a3 e0 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001aa03:	83 c4 0c             	add    esp,0xc
c001aa06:	68 10 01 00 00       	push   0x110
c001aa0b:	6a 00                	push   0x0
c001aa0d:	57                   	push   edi
c001aa0e:	e8 dd 5a fe ff       	call   c00004f0 <memset>
c001aa13:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001aa19:	83 c4 10             	add    esp,0x10
c001aa1c:	b8 01 00 00 00       	mov    eax,0x1
c001aa21:	eb 7d                	jmp    c001aaa0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001aa23:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001aa29:	8d 68 08             	lea    ebp,[eax+0x8]
c001aa2c:	83 ec 0c             	sub    esp,0xc
c001aa2f:	55                   	push   ebp
c001aa30:	e8 3b 5b fe ff       	call   c0000570 <strlen>
c001aa35:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001aa3d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa41:	83 c4 10             	add    esp,0x10
c001aa44:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001aa48:	75 0a                	jne    c001aa54 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001aa4a:	b8 02 00 00 00       	mov    eax,0x2
c001aa4f:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001aa52:	74 05                	je     c001aa59 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001aa54:	b8 01 00 00 00       	mov    eax,0x1
c001aa59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aa5d:	50                   	push   eax
c001aa5e:	50                   	push   eax
c001aa5f:	55                   	push   ebp
c001aa60:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa64:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001aa68:	50                   	push   eax
c001aa69:	e8 d2 5b fe ff       	call   c0000640 <strcpy>
c001aa6e:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001aa75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa77:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001aa7d:	5a                   	pop    edx
c001aa7e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa83:	59                   	pop    ecx
c001aa84:	68 f1 2f 02 c0       	push   0xc0022ff1
c001aa89:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa8f:	e8 12 e0 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001aa94:	83 c4 10             	add    esp,0x10
c001aa97:	31 c0                	xor    eax,eax
c001aa99:	eb 05                	jmp    c001aaa0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001aa9b:	b8 04 00 00 00       	mov    eax,0x4
c001aaa0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aaa6:	5b                   	pop    ebx
c001aaa7:	5e                   	pop    esi
c001aaa8:	5f                   	pop    edi
c001aaa9:	5d                   	pop    ebp
c001aaaa:	c3                   	ret    

c001aaab <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001aaab:	57                   	push   edi
c001aaac:	56                   	push   esi
c001aaad:	53                   	push   ebx
c001aaae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aab2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aab6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001aaba:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001aac0:	0f be cb             	movsx  ecx,bl
c001aac3:	75 0b                	jne    c001aad0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001aac5:	0f be 05 20 42 02 c0 	movsx  eax,BYTE PTR ds:0xc0024220
c001aacc:	39 c8                	cmp    eax,ecx
c001aace:	74 47                	je     c001ab17 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aad0:	83 ec 0c             	sub    esp,0xc
c001aad3:	31 d2                	xor    edx,edx
c001aad5:	68 a0 c8 02 c0       	push   0xc002c8a0
c001aada:	6a 01                	push   0x1
c001aadc:	52                   	push   edx
c001aadd:	56                   	push   esi
c001aade:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001aae5:	e8 be 32 ff ff       	call   c000dda8 <LogicalDisk::read(unsigned long long, int, void*)>
c001aaea:	83 c4 20             	add    esp,0x20
c001aaed:	85 c0                	test   eax,eax
c001aaef:	75 0e                	jne    c001aaff <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001aaf1:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001aaf7:	88 1d 20 42 02 c0    	mov    BYTE PTR ds:0xc0024220,bl
c001aafd:	eb 18                	jmp    c001ab17 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aaff:	50                   	push   eax
c001ab00:	68 00 08 00 00       	push   0x800
c001ab05:	6a 00                	push   0x0
c001ab07:	57                   	push   edi
c001ab08:	e8 e3 59 fe ff       	call   c00004f0 <memset>
c001ab0d:	83 c4 10             	add    esp,0x10
c001ab10:	b8 01 00 00 00       	mov    eax,0x1
c001ab15:	eb 0e                	jmp    c001ab25 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001ab17:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001ab1c:	b9 00 08 00 00       	mov    ecx,0x800
c001ab21:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab23:	31 c0                	xor    eax,eax
c001ab25:	5b                   	pop    ebx
c001ab26:	5e                   	pop    esi
c001ab27:	5f                   	pop    edi
c001ab28:	c3                   	ret    
c001ab29:	90                   	nop

c001ab2a <ISO9660::tryMount(LogicalDisk*, int)>:
c001ab2a:	53                   	push   ebx
c001ab2b:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001ab31:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001ab3b:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001ab42:	8d 58 41             	lea    ebx,[eax+0x41]
c001ab45:	0f be db             	movsx  ebx,bl
c001ab48:	53                   	push   ebx
c001ab49:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ab4d:	50                   	push   eax
c001ab4e:	6a 10                	push   0x10
c001ab50:	e8 56 ff ff ff       	call   c001aaab <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ab55:	83 c4 10             	add    esp,0x10
c001ab58:	31 d2                	xor    edx,edx
c001ab5a:	85 c0                	test   eax,eax
c001ab5c:	75 33                	jne    c001ab91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab5e:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ab63:	75 2c                	jne    c001ab91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab65:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ab6a:	75 25                	jne    c001ab91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab6c:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ab71:	75 1e                	jne    c001ab91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab73:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ab78:	75 17                	jne    c001ab91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab7a:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ab7f:	75 10                	jne    c001ab91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab81:	83 ec 0c             	sub    esp,0xc
c001ab84:	53                   	push   ebx
c001ab85:	e8 bc be fe ff       	call   c0006a46 <init_percd>
c001ab8a:	83 c4 10             	add    esp,0x10
c001ab8d:	40                   	inc    eax
c001ab8e:	0f 95 c2             	setne  dl
c001ab91:	88 d0                	mov    al,dl
c001ab93:	81 c4 08 08 00 00    	add    esp,0x808
c001ab99:	5b                   	pop    ebx
c001ab9a:	c3                   	ret    
c001ab9b:	90                   	nop

c001ab9c <ISO9660::ISO9660()>:
c001ab9c:	83 ec 0c             	sub    esp,0xc
c001ab9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aba3:	83 ec 0c             	sub    esp,0xc
c001aba6:	50                   	push   eax
c001aba7:	e8 fe 0b ff ff       	call   c000b7aa <Filesystem::Filesystem()>
c001abac:	83 c4 10             	add    esp,0x10
c001abaf:	ba 0c 30 02 c0       	mov    edx,0xc002300c
c001abb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb8:	89 10                	mov    DWORD PTR [eax],edx
c001abba:	e8 99 bf fe ff       	call   c0006b58 <fs_iso9660_init>
c001abbf:	90                   	nop
c001abc0:	83 c4 0c             	add    esp,0xc
c001abc3:	c3                   	ret    

c001abc4 <SoundCard::beginPlayback()>:
c001abc4:	c7 44 24 04 70 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023070
c001abcc:	e9 4e 6a ff ff       	jmp    c001161f <KePanic(char const*)>
c001abd1:	90                   	nop

c001abd2 <SoundCard::stopPlayback()>:
c001abd2:	c7 44 24 04 70 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023070
c001abda:	e9 40 6a ff ff       	jmp    c001161f <KePanic(char const*)>
c001abdf:	90                   	nop

c001abe0 <SoundCard::SoundCard(char const*)>:
c001abe0:	83 ec 1c             	sub    esp,0x1c
c001abe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abe7:	83 ec 08             	sub    esp,0x8
c001abea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abee:	50                   	push   eax
c001abef:	e8 6a 1f ff ff       	call   c000cb5e <Device::Device(char const*)>
c001abf4:	83 c4 10             	add    esp,0x10
c001abf7:	ba bc 30 02 c0       	mov    edx,0xc00230bc
c001abfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac00:	89 10                	mov    DWORD PTR [eax],edx
c001ac02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac06:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac11:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ac1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac1f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ac29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac2d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ac37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac3b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ac45:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac4d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ac52:	7f 1a                	jg     c001ac6e <SoundCard::SoundCard(char const*)+0x8e>
c001ac54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac58:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac5c:	83 c2 54             	add    edx,0x54
c001ac5f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ac67:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ac6c:	eb df                	jmp    c001ac4d <SoundCard::SoundCard(char const*)+0x6d>
c001ac6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac72:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac79:	90                   	nop
c001ac7a:	83 c4 1c             	add    esp,0x1c
c001ac7d:	c3                   	ret    

c001ac7e <SoundCard::~SoundCard()>:
c001ac7e:	83 ec 0c             	sub    esp,0xc
c001ac81:	ba bc 30 02 c0       	mov    edx,0xc00230bc
c001ac86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac8a:	89 10                	mov    DWORD PTR [eax],edx
c001ac8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac90:	83 ec 0c             	sub    esp,0xc
c001ac93:	50                   	push   eax
c001ac94:	e8 2f 1c ff ff       	call   c000c8c8 <Device::~Device()>
c001ac99:	83 c4 10             	add    esp,0x10
c001ac9c:	90                   	nop
c001ac9d:	83 c4 0c             	add    esp,0xc
c001aca0:	c3                   	ret    
c001aca1:	90                   	nop

c001aca2 <SoundCard::~SoundCard()>:
c001aca2:	83 ec 0c             	sub    esp,0xc
c001aca5:	83 ec 0c             	sub    esp,0xc
c001aca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acac:	e8 cd ff ff ff       	call   c001ac7e <SoundCard::~SoundCard()>
c001acb1:	83 c4 10             	add    esp,0x10
c001acb4:	83 ec 08             	sub    esp,0x8
c001acb7:	68 e8 01 00 00       	push   0x1e8
c001acbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acc0:	e8 53 fb fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001acc5:	83 c4 10             	add    esp,0x10
c001acc8:	83 c4 0c             	add    esp,0xc
c001accb:	c3                   	ret    

c001accc <SoundCard::configureRates(int, int, int)>:
c001accc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001acd0:	31 c0                	xor    eax,eax
c001acd2:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001acd9:	75 20                	jne    c001acfb <SoundCard::configureRates(int, int, int)+0x2f>
c001acdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001acdf:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ace5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ace9:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001acef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acf3:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001acf9:	b0 01                	mov    al,0x1
c001acfb:	c3                   	ret    

c001acfc <SoundCard::getSamples16(int, short*)>:
c001acfc:	55                   	push   ebp
c001acfd:	57                   	push   edi
c001acfe:	31 ff                	xor    edi,edi
c001ad00:	56                   	push   esi
c001ad01:	53                   	push   ebx
c001ad02:	31 db                	xor    ebx,ebx
c001ad04:	83 ec 10             	sub    esp,0x10
c001ad07:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ad0b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad0f:	8d 04 36             	lea    eax,[esi+esi*1]
c001ad12:	50                   	push   eax
c001ad13:	6a 00                	push   0x0
c001ad15:	55                   	push   ebp
c001ad16:	e8 d5 57 fe ff       	call   c00004f0 <memset>
c001ad1b:	83 c4 10             	add    esp,0x10
c001ad1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad22:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001ad29:	85 c0                	test   eax,eax
c001ad2b:	74 1b                	je     c001ad48 <SoundCard::getSamples16(int, short*)+0x4c>
c001ad2d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad31:	75 15                	jne    c001ad48 <SoundCard::getSamples16(int, short*)+0x4c>
c001ad33:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ad37:	55                   	push   ebp
c001ad38:	56                   	push   esi
c001ad39:	50                   	push   eax
c001ad3a:	e8 f1 02 00 00       	call   c001b030 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ad3f:	83 c4 10             	add    esp,0x10
c001ad42:	39 c7                	cmp    edi,eax
c001ad44:	7d 02                	jge    c001ad48 <SoundCard::getSamples16(int, short*)+0x4c>
c001ad46:	89 c7                	mov    edi,eax
c001ad48:	43                   	inc    ebx
c001ad49:	83 fb 20             	cmp    ebx,0x20
c001ad4c:	75 d0                	jne    c001ad1e <SoundCard::getSamples16(int, short*)+0x22>
c001ad4e:	83 c4 0c             	add    esp,0xc
c001ad51:	89 f8                	mov    eax,edi
c001ad53:	5b                   	pop    ebx
c001ad54:	5e                   	pop    esi
c001ad55:	5f                   	pop    edi
c001ad56:	5d                   	pop    ebp
c001ad57:	c3                   	ret    

c001ad58 <SoundCard::getSamples32(int, int*)>:
c001ad58:	55                   	push   ebp
c001ad59:	57                   	push   edi
c001ad5a:	31 ff                	xor    edi,edi
c001ad5c:	56                   	push   esi
c001ad5d:	31 f6                	xor    esi,esi
c001ad5f:	53                   	push   ebx
c001ad60:	83 ec 10             	sub    esp,0x10
c001ad63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad67:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ad6b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad6f:	c1 e0 02             	shl    eax,0x2
c001ad72:	50                   	push   eax
c001ad73:	6a 00                	push   0x0
c001ad75:	55                   	push   ebp
c001ad76:	e8 75 57 fe ff       	call   c00004f0 <memset>
c001ad7b:	83 c4 10             	add    esp,0x10
c001ad7e:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ad85:	85 c0                	test   eax,eax
c001ad87:	74 1b                	je     c001ada4 <SoundCard::getSamples32(int, int*)+0x4c>
c001ad89:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad8d:	75 15                	jne    c001ada4 <SoundCard::getSamples32(int, int*)+0x4c>
c001ad8f:	53                   	push   ebx
c001ad90:	55                   	push   ebp
c001ad91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad95:	50                   	push   eax
c001ad96:	e8 61 03 00 00       	call   c001b0fc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ad9b:	83 c4 10             	add    esp,0x10
c001ad9e:	39 c6                	cmp    esi,eax
c001ada0:	7d 02                	jge    c001ada4 <SoundCard::getSamples32(int, int*)+0x4c>
c001ada2:	89 c6                	mov    esi,eax
c001ada4:	47                   	inc    edi
c001ada5:	83 ff 20             	cmp    edi,0x20
c001ada8:	75 d4                	jne    c001ad7e <SoundCard::getSamples32(int, int*)+0x26>
c001adaa:	85 f6                	test   esi,esi
c001adac:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001adb3:	75 0f                	jne    c001adc4 <SoundCard::getSamples32(int, int*)+0x6c>
c001adb5:	85 c0                	test   eax,eax
c001adb7:	74 1b                	je     c001add4 <SoundCard::getSamples32(int, int*)+0x7c>
c001adb9:	83 ec 0c             	sub    esp,0xc
c001adbc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adbe:	53                   	push   ebx
c001adbf:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001adc2:	eb 0d                	jmp    c001add1 <SoundCard::getSamples32(int, int*)+0x79>
c001adc4:	85 c0                	test   eax,eax
c001adc6:	75 0c                	jne    c001add4 <SoundCard::getSamples32(int, int*)+0x7c>
c001adc8:	83 ec 0c             	sub    esp,0xc
c001adcb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adcd:	53                   	push   ebx
c001adce:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001add1:	83 c4 10             	add    esp,0x10
c001add4:	83 c4 0c             	add    esp,0xc
c001add7:	89 f0                	mov    eax,esi
c001add9:	5b                   	pop    ebx
c001adda:	5e                   	pop    esi
c001addb:	5f                   	pop    edi
c001addc:	5d                   	pop    ebp
c001addd:	c3                   	ret    

c001adde <SoundCard::addChannel(SoundPort*)>:
c001adde:	83 ec 0c             	sub    esp,0xc
c001ade1:	31 c0                	xor    eax,eax
c001ade3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ade7:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001adef:	74 1b                	je     c001ae0c <SoundCard::addChannel(SoundPort*)+0x2e>
c001adf1:	40                   	inc    eax
c001adf2:	83 f8 20             	cmp    eax,0x20
c001adf5:	75 f0                	jne    c001ade7 <SoundCard::addChannel(SoundPort*)+0x9>
c001adf7:	83 ec 0c             	sub    esp,0xc
c001adfa:	68 95 30 02 c0       	push   0xc0023095
c001adff:	e8 1b 68 ff ff       	call   c001161f <KePanic(char const*)>
c001ae04:	83 c4 10             	add    esp,0x10
c001ae07:	83 c8 ff             	or     eax,0xffffffff
c001ae0a:	eb 0b                	jmp    c001ae17 <SoundCard::addChannel(SoundPort*)+0x39>
c001ae0c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae10:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ae17:	83 c4 0c             	add    esp,0xc
c001ae1a:	c3                   	ret    
c001ae1b:	90                   	nop

c001ae1c <SoundCard::removeChannel(int)>:
c001ae1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae24:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ae2f:	c3                   	ret    

c001ae30 <SoundPort::SoundPort(int, int, int, int)>:
c001ae30:	83 ec 0c             	sub    esp,0xc
c001ae33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae37:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ae3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae42:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ae46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae4a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae4e:	89 10                	mov    DWORD PTR [eax],edx
c001ae50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae54:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae58:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ae5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae63:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ae66:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001ae6b:	75 13                	jne    c001ae80 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001ae6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae71:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae73:	05 a0 0f 00 00       	add    eax,0xfa0
c001ae78:	01 c0                	add    eax,eax
c001ae7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ae7e:	66 90                	xchg   ax,ax
c001ae80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae88:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ae8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae8f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001ae96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae9a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ae9d:	c1 e0 02             	shl    eax,0x2
c001aea0:	83 ec 0c             	sub    esp,0xc
c001aea3:	50                   	push   eax
c001aea4:	e8 0d cc fe ff       	call   c0007ab6 <malloc>
c001aea9:	83 c4 10             	add    esp,0x10
c001aeac:	89 c2                	mov    edx,eax
c001aeae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeb2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001aeb5:	90                   	nop
c001aeb6:	83 c4 0c             	add    esp,0xc
c001aeb9:	c3                   	ret    
c001aeba:	66 90                	xchg   ax,ax

c001aebc <SoundPort::~SoundPort()>:
c001aebc:	83 ec 0c             	sub    esp,0xc
c001aebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aec3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aec6:	85 c0                	test   eax,eax
c001aec8:	74 1e                	je     c001aee8 <SoundPort::~SoundPort()+0x2c>
c001aeca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aece:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aed1:	83 ec 0c             	sub    esp,0xc
c001aed4:	50                   	push   eax
c001aed5:	e8 ec cb fe ff       	call   c0007ac6 <free>
c001aeda:	83 c4 10             	add    esp,0x10
c001aedd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aee1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aee8:	90                   	nop
c001aee9:	83 c4 0c             	add    esp,0xc
c001aeec:	c3                   	ret    
c001aeed:	90                   	nop
c001aeee:	66 90                	xchg   ax,ax

c001aef0 <SoundPort::unpause()>:
c001aef0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aef4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001aef8:	c3                   	ret    
c001aef9:	90                   	nop
c001aefa:	66 90                	xchg   ax,ax

c001aefc <SoundPort::pause()>:
c001aefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af00:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001af04:	c3                   	ret    
c001af05:	90                   	nop
c001af06:	66 90                	xchg   ax,ax

c001af08 <SoundPort::getBufferUsed()>:
c001af08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af0c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001af0f:	c3                   	ret    

c001af10 <SoundPort::getBufferSize()>:
c001af10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af17:	c3                   	ret    

c001af18 <SoundPort::buffer16(short*, int)>:
c001af18:	55                   	push   ebp
c001af19:	57                   	push   edi
c001af1a:	56                   	push   esi
c001af1b:	53                   	push   ebx
c001af1c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af20:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001af24:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001af27:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001af2a:	74 68                	je     c001af94 <SoundPort::buffer16(short*, int)+0x7c>
c001af2c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af30:	85 c9                	test   ecx,ecx
c001af32:	7e 60                	jle    c001af94 <SoundPort::buffer16(short*, int)+0x7c>
c001af34:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001af38:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001af3b:	c1 e1 0f             	shl    ecx,0xf
c001af3e:	8d 70 01             	lea    esi,[eax+0x1]
c001af41:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001af44:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001af47:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af4a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af4d:	74 4d                	je     c001af9c <SoundPort::buffer16(short*, int)+0x84>
c001af4f:	31 f6                	xor    esi,esi
c001af51:	eb 21                	jmp    c001af74 <SoundPort::buffer16(short*, int)+0x5c>
c001af53:	90                   	nop
c001af54:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001af59:	8d 79 01             	lea    edi,[ecx+0x1]
c001af5c:	c1 e3 0f             	shl    ebx,0xf
c001af5f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001af62:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001af65:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001af68:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af6b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af6e:	74 1c                	je     c001af8c <SoundPort::buffer16(short*, int)+0x74>
c001af70:	89 c6                	mov    esi,eax
c001af72:	66 90                	xchg   ax,ax
c001af74:	8d 46 01             	lea    eax,[esi+0x1]
c001af77:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001af7b:	75 d7                	jne    c001af54 <SoundPort::buffer16(short*, int)+0x3c>
c001af7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af81:	8d 76 00             	lea    esi,[esi+0x0]
c001af84:	5b                   	pop    ebx
c001af85:	5e                   	pop    esi
c001af86:	5f                   	pop    edi
c001af87:	5d                   	pop    ebp
c001af88:	c3                   	ret    
c001af89:	8d 76 00             	lea    esi,[esi+0x0]
c001af8c:	5b                   	pop    ebx
c001af8d:	8d 46 02             	lea    eax,[esi+0x2]
c001af90:	5e                   	pop    esi
c001af91:	5f                   	pop    edi
c001af92:	5d                   	pop    ebp
c001af93:	c3                   	ret    
c001af94:	5b                   	pop    ebx
c001af95:	31 c0                	xor    eax,eax
c001af97:	5e                   	pop    esi
c001af98:	5f                   	pop    edi
c001af99:	5d                   	pop    ebp
c001af9a:	c3                   	ret    
c001af9b:	90                   	nop
c001af9c:	b8 01 00 00 00       	mov    eax,0x1
c001afa1:	eb e1                	jmp    c001af84 <SoundPort::buffer16(short*, int)+0x6c>
c001afa3:	90                   	nop

c001afa4 <SoundPort::buffer32(int*, int)>:
c001afa4:	55                   	push   ebp
c001afa5:	57                   	push   edi
c001afa6:	56                   	push   esi
c001afa7:	53                   	push   ebx
c001afa8:	83 ec 04             	sub    esp,0x4
c001afab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001afaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afb3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afb6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001afba:	89 04 24             	mov    DWORD PTR [esp],eax
c001afbd:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afc0:	74 5a                	je     c001b01c <SoundPort::buffer32(int*, int)+0x78>
c001afc2:	85 c0                	test   eax,eax
c001afc4:	7e 56                	jle    c001b01c <SoundPort::buffer32(int*, int)+0x78>
c001afc6:	8d 71 01             	lea    esi,[ecx+0x1]
c001afc9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001afcc:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001afcf:	8b 37                	mov    esi,DWORD PTR [edi]
c001afd1:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001afd4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afd7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afda:	74 4c                	je     c001b028 <SoundPort::buffer32(int*, int)+0x84>
c001afdc:	31 f6                	xor    esi,esi
c001afde:	eb 1c                	jmp    c001affc <SoundPort::buffer32(int*, int)+0x58>
c001afe0:	8d 69 01             	lea    ebp,[ecx+0x1]
c001afe3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001afe6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001afe9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001afec:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001aff0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aff3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aff6:	74 18                	je     c001b010 <SoundPort::buffer32(int*, int)+0x6c>
c001aff8:	89 de                	mov    esi,ebx
c001affa:	66 90                	xchg   ax,ax
c001affc:	8d 5e 01             	lea    ebx,[esi+0x1]
c001afff:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b002:	75 dc                	jne    c001afe0 <SoundPort::buffer32(int*, int)+0x3c>
c001b004:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b007:	90                   	nop
c001b008:	83 c4 04             	add    esp,0x4
c001b00b:	5b                   	pop    ebx
c001b00c:	5e                   	pop    esi
c001b00d:	5f                   	pop    edi
c001b00e:	5d                   	pop    ebp
c001b00f:	c3                   	ret    
c001b010:	83 c4 04             	add    esp,0x4
c001b013:	8d 46 02             	lea    eax,[esi+0x2]
c001b016:	5b                   	pop    ebx
c001b017:	5e                   	pop    esi
c001b018:	5f                   	pop    edi
c001b019:	5d                   	pop    ebp
c001b01a:	c3                   	ret    
c001b01b:	90                   	nop
c001b01c:	83 c4 04             	add    esp,0x4
c001b01f:	31 c0                	xor    eax,eax
c001b021:	5b                   	pop    ebx
c001b022:	5e                   	pop    esi
c001b023:	5f                   	pop    edi
c001b024:	5d                   	pop    ebp
c001b025:	c3                   	ret    
c001b026:	66 90                	xchg   ax,ax
c001b028:	b8 01 00 00 00       	mov    eax,0x1
c001b02d:	eb d9                	jmp    c001b008 <SoundPort::buffer32(int*, int)+0x64>
c001b02f:	90                   	nop

c001b030 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b030:	57                   	push   edi
c001b031:	56                   	push   esi
c001b032:	53                   	push   ebx
c001b033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b037:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b03b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001b041:	39 03                	cmp    DWORD PTR [ebx],eax
c001b043:	74 13                	je     c001b058 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001b045:	83 ec 0c             	sub    esp,0xc
c001b048:	68 e8 30 02 c0       	push   0xc00230e8
c001b04d:	e8 cd 65 ff ff       	call   c001161f <KePanic(char const*)>
c001b052:	83 c4 10             	add    esp,0x10
c001b055:	8d 76 00             	lea    esi,[esi+0x0]
c001b058:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001b05e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b061:	74 11                	je     c001b074 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001b063:	83 ec 0c             	sub    esp,0xc
c001b066:	68 27 31 02 c0       	push   0xc0023127
c001b06b:	e8 af 65 ff ff       	call   c001161f <KePanic(char const*)>
c001b070:	83 c4 10             	add    esp,0x10
c001b073:	90                   	nop
c001b074:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001b07a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b07d:	74 11                	je     c001b090 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001b07f:	83 ec 0c             	sub    esp,0xc
c001b082:	68 27 31 02 c0       	push   0xc0023127
c001b087:	e8 93 65 ff ff       	call   c001161f <KePanic(char const*)>
c001b08c:	83 c4 10             	add    esp,0x10
c001b08f:	90                   	nop
c001b090:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001b093:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001b097:	7e 07                	jle    c001b0a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001b099:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b09d:	8d 76 00             	lea    esi,[esi+0x0]
c001b0a0:	85 f6                	test   esi,esi
c001b0a2:	7e 2c                	jle    c001b0d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001b0a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b0a8:	8d 3c 36             	lea    edi,[esi+esi*1]
c001b0ab:	31 c9                	xor    ecx,ecx
c001b0ad:	01 d7                	add    edi,edx
c001b0af:	90                   	nop
c001b0b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001b0b3:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001b0b6:	85 c0                	test   eax,eax
c001b0b8:	79 06                	jns    c001b0c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001b0ba:	05 ff 7f 00 00       	add    eax,0x7fff
c001b0bf:	90                   	nop
c001b0c0:	c1 f8 0f             	sar    eax,0xf
c001b0c3:	83 c1 04             	add    ecx,0x4
c001b0c6:	66 01 02             	add    WORD PTR [edx],ax
c001b0c9:	83 c2 02             	add    edx,0x2
c001b0cc:	39 d7                	cmp    edi,edx
c001b0ce:	75 e0                	jne    c001b0b0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b0d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b0d3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b0d6:	83 ec 04             	sub    esp,0x4
c001b0d9:	29 f0                	sub    eax,esi
c001b0db:	c1 e0 02             	shl    eax,0x2
c001b0de:	50                   	push   eax
c001b0df:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b0e2:	50                   	push   eax
c001b0e3:	52                   	push   edx
c001b0e4:	e8 e7 52 fe ff       	call   c00003d0 <memmove>
c001b0e9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b0ec:	83 c4 10             	add    esp,0x10
c001b0ef:	29 f0                	sub    eax,esi
c001b0f1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b0f4:	89 f0                	mov    eax,esi
c001b0f6:	5b                   	pop    ebx
c001b0f7:	5e                   	pop    esi
c001b0f8:	5f                   	pop    edi
c001b0f9:	c3                   	ret    
c001b0fa:	66 90                	xchg   ax,ax

c001b0fc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b0fc:	57                   	push   edi
c001b0fd:	56                   	push   esi
c001b0fe:	53                   	push   ebx
c001b0ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b103:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b107:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b10b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b111:	39 06                	cmp    DWORD PTR [esi],eax
c001b113:	74 13                	je     c001b128 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b115:	83 ec 0c             	sub    esp,0xc
c001b118:	68 08 31 02 c0       	push   0xc0023108
c001b11d:	e8 fd 64 ff ff       	call   c001161f <KePanic(char const*)>
c001b122:	83 c4 10             	add    esp,0x10
c001b125:	8d 76 00             	lea    esi,[esi+0x0]
c001b128:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b12e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b131:	74 11                	je     c001b144 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b133:	83 ec 0c             	sub    esp,0xc
c001b136:	68 43 31 02 c0       	push   0xc0023143
c001b13b:	e8 df 64 ff ff       	call   c001161f <KePanic(char const*)>
c001b140:	83 c4 10             	add    esp,0x10
c001b143:	90                   	nop
c001b144:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b14a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b14d:	74 11                	je     c001b160 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b14f:	83 ec 0c             	sub    esp,0xc
c001b152:	68 43 31 02 c0       	push   0xc0023143
c001b157:	e8 c3 64 ff ff       	call   c001161f <KePanic(char const*)>
c001b15c:	83 c4 10             	add    esp,0x10
c001b15f:	90                   	nop
c001b160:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b163:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b167:	7e 07                	jle    c001b170 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b169:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b16d:	8d 76 00             	lea    esi,[esi+0x0]
c001b170:	85 ff                	test   edi,edi
c001b172:	7e 1c                	jle    c001b190 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b174:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b17b:	31 c0                	xor    eax,eax
c001b17d:	8d 76 00             	lea    esi,[esi+0x0]
c001b180:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b183:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b186:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b189:	83 c0 04             	add    eax,0x4
c001b18c:	39 c1                	cmp    ecx,eax
c001b18e:	75 f0                	jne    c001b180 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b190:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b193:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b196:	83 ec 04             	sub    esp,0x4
c001b199:	29 f8                	sub    eax,edi
c001b19b:	c1 e0 02             	shl    eax,0x2
c001b19e:	50                   	push   eax
c001b19f:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b1a2:	50                   	push   eax
c001b1a3:	52                   	push   edx
c001b1a4:	e8 27 52 fe ff       	call   c00003d0 <memmove>
c001b1a9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b1ac:	83 c4 10             	add    esp,0x10
c001b1af:	29 f8                	sub    eax,edi
c001b1b1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001b1b4:	89 f8                	mov    eax,edi
c001b1b6:	5b                   	pop    ebx
c001b1b7:	5e                   	pop    esi
c001b1b8:	5f                   	pop    edi
c001b1b9:	c3                   	ret    

c001b1ba <PCI::open(int, int, void*)>:
c001b1ba:	83 ec 18             	sub    esp,0x18
c001b1bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b1c1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b1c5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b1cb:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1cd:	50                   	push   eax
c001b1ce:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b1d1:	31 c0                	xor    eax,eax
c001b1d3:	83 c4 1c             	add    esp,0x1c
c001b1d6:	c3                   	ret    
c001b1d7:	90                   	nop

c001b1d8 <PCI::close(int, int, void*)>:
c001b1d8:	31 c0                	xor    eax,eax
c001b1da:	c3                   	ret    
c001b1db:	90                   	nop

c001b1dc <PCI::PCI()>:
c001b1dc:	83 ec 0c             	sub    esp,0xc
c001b1df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1e3:	83 ec 08             	sub    esp,0x8
c001b1e6:	68 5f 31 02 c0       	push   0xc002315f
c001b1eb:	50                   	push   eax
c001b1ec:	e8 37 11 ff ff       	call   c000c328 <Bus::Bus(char const*)>
c001b1f1:	83 c4 10             	add    esp,0x10
c001b1f4:	ba 08 32 02 c0       	mov    edx,0xc0023208
c001b1f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1fd:	89 10                	mov    DWORD PTR [eax],edx
c001b1ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b203:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b20d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b211:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b21a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b220:	0f b6 d0             	movzx  edx,al
c001b223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b227:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b232:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b238:	0f b6 d0             	movzx  edx,al
c001b23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b23f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b248:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b24e:	8d 50 01             	lea    edx,[eax+0x1]
c001b251:	88 d1                	mov    cl,dl
c001b253:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b257:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b25d:	0f b6 d0             	movzx  edx,al
c001b260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b264:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b268:	83 c9 c0             	or     ecx,0xffffffc0
c001b26b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b26f:	90                   	nop
c001b270:	83 c4 0c             	add    esp,0xc
c001b273:	c3                   	ret    

c001b274 <PCI::readBAR8(unsigned int, int)>:
c001b274:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b278:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b27c:	f6 c2 01             	test   dl,0x1
c001b27f:	74 07                	je     c001b288 <PCI::readBAR8(unsigned int, int)+0x14>
c001b281:	83 e2 fc             	and    edx,0xfffffffc
c001b284:	01 c2                	add    edx,eax
c001b286:	ec                   	in     al,dx
c001b287:	c3                   	ret    
c001b288:	83 e2 f0             	and    edx,0xfffffff0
c001b28b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b28e:	c3                   	ret    
c001b28f:	90                   	nop

c001b290 <PCI::readBAR16(unsigned int, int)>:
c001b290:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b294:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b298:	f6 c2 01             	test   dl,0x1
c001b29b:	74 08                	je     c001b2a5 <PCI::readBAR16(unsigned int, int)+0x15>
c001b29d:	83 e2 fc             	and    edx,0xfffffffc
c001b2a0:	01 c2                	add    edx,eax
c001b2a2:	66 ed                	in     ax,dx
c001b2a4:	c3                   	ret    
c001b2a5:	83 e2 f0             	and    edx,0xfffffff0
c001b2a8:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b2ac:	c3                   	ret    
c001b2ad:	90                   	nop

c001b2ae <PCI::readBAR32(unsigned int, int)>:
c001b2ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2b6:	f6 c2 01             	test   dl,0x1
c001b2b9:	74 07                	je     c001b2c2 <PCI::readBAR32(unsigned int, int)+0x14>
c001b2bb:	83 e2 fc             	and    edx,0xfffffffc
c001b2be:	01 c2                	add    edx,eax
c001b2c0:	ed                   	in     eax,dx
c001b2c1:	c3                   	ret    
c001b2c2:	83 e2 f0             	and    edx,0xfffffff0
c001b2c5:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b2c8:	c3                   	ret    
c001b2c9:	90                   	nop

c001b2ca <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b2ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2d6:	f6 c2 01             	test   dl,0x1
c001b2d9:	74 07                	je     c001b2e2 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b2db:	83 e2 fc             	and    edx,0xfffffffc
c001b2de:	01 ca                	add    edx,ecx
c001b2e0:	ee                   	out    dx,al
c001b2e1:	c3                   	ret    
c001b2e2:	83 e2 f0             	and    edx,0xfffffff0
c001b2e5:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b2e8:	c3                   	ret    
c001b2e9:	90                   	nop

c001b2ea <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b2ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2f6:	f6 c2 01             	test   dl,0x1
c001b2f9:	74 08                	je     c001b303 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b2fb:	83 e2 fc             	and    edx,0xfffffffc
c001b2fe:	01 ca                	add    edx,ecx
c001b300:	66 ef                	out    dx,ax
c001b302:	c3                   	ret    
c001b303:	83 e2 f0             	and    edx,0xfffffff0
c001b306:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b30a:	c3                   	ret    
c001b30b:	90                   	nop

c001b30c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b30c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b310:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b314:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b318:	f6 c2 01             	test   dl,0x1
c001b31b:	74 07                	je     c001b324 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b31d:	83 e2 fc             	and    edx,0xfffffffc
c001b320:	01 ca                	add    edx,ecx
c001b322:	ef                   	out    dx,eax
c001b323:	c3                   	ret    
c001b324:	83 e2 f0             	and    edx,0xfffffff0
c001b327:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b32a:	c3                   	ret    
c001b32b:	90                   	nop

c001b32c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b32c:	55                   	push   ebp
c001b32d:	57                   	push   edi
c001b32e:	56                   	push   esi
c001b32f:	53                   	push   ebx
c001b330:	83 ec 0c             	sub    esp,0xc
c001b333:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b338:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b33c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b340:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b344:	83 fe 07             	cmp    esi,0x7
c001b347:	76 10                	jbe    c001b359 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b349:	83 ec 0c             	sub    esp,0xc
c001b34c:	68 67 31 02 c0       	push   0xc0023167
c001b351:	e8 c9 62 ff ff       	call   c001161f <KePanic(char const*)>
c001b356:	83 c4 10             	add    esp,0x10
c001b359:	0f b6 db             	movzx  ebx,bl
c001b35c:	83 fb 0f             	cmp    ebx,0xf
c001b35f:	76 10                	jbe    c001b371 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b361:	83 ec 0c             	sub    esp,0xc
c001b364:	68 97 31 02 c0       	push   0xc0023197
c001b369:	e8 b1 62 ff ff       	call   c001161f <KePanic(char const*)>
c001b36e:	83 c4 10             	add    esp,0x10
c001b371:	8d 04 36             	lea    eax,[esi+esi*1]
c001b374:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b379:	83 c8 f0             	or     eax,0xfffffff0
c001b37c:	ee                   	out    dx,al
c001b37d:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b382:	89 e8                	mov    eax,ebp
c001b384:	ee                   	out    dx,al
c001b385:	83 c4 0c             	add    esp,0xc
c001b388:	89 d8                	mov    eax,ebx
c001b38a:	89 f9                	mov    ecx,edi
c001b38c:	c1 e0 08             	shl    eax,0x8
c001b38f:	0f b6 d9             	movzx  ebx,cl
c001b392:	83 e3 fc             	and    ebx,0xfffffffc
c001b395:	09 d8                	or     eax,ebx
c001b397:	5b                   	pop    ebx
c001b398:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b39d:	5e                   	pop    esi
c001b39e:	5f                   	pop    edi
c001b39f:	5d                   	pop    ebp
c001b3a0:	c3                   	ret    
c001b3a1:	90                   	nop

c001b3a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b3a2:	57                   	push   edi
c001b3a3:	56                   	push   esi
c001b3a4:	53                   	push   ebx
c001b3a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b3a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b3ad:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b3b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b3b7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b3bb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3bf:	83 ff 01             	cmp    edi,0x1
c001b3c2:	75 3f                	jne    c001b403 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b3c4:	89 de                	mov    esi,ebx
c001b3c6:	0f b6 c0             	movzx  eax,al
c001b3c9:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b3cf:	c1 e0 10             	shl    eax,0x10
c001b3d2:	0f b6 c9             	movzx  ecx,cl
c001b3d5:	09 f0                	or     eax,esi
c001b3d7:	c1 e1 08             	shl    ecx,0x8
c001b3da:	0f b6 d2             	movzx  edx,dl
c001b3dd:	09 c8                	or     eax,ecx
c001b3df:	c1 e2 0b             	shl    edx,0xb
c001b3e2:	09 d0                	or     eax,edx
c001b3e4:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b3e9:	0d 00 00 00 80       	or     eax,0x80000000
c001b3ee:	ef                   	out    dx,eax
c001b3ef:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b3f4:	ed                   	in     eax,dx
c001b3f5:	83 e3 02             	and    ebx,0x2
c001b3f8:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b3ff:	d3 e8                	shr    eax,cl
c001b401:	eb 44                	jmp    c001b447 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b403:	83 ff 02             	cmp    edi,0x2
c001b406:	75 2d                	jne    c001b435 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b408:	83 ec 0c             	sub    esp,0xc
c001b40b:	0f b6 c9             	movzx  ecx,cl
c001b40e:	0f b6 d2             	movzx  edx,dl
c001b411:	0f b6 fb             	movzx  edi,bl
c001b414:	0f b6 c0             	movzx  eax,al
c001b417:	57                   	push   edi
c001b418:	51                   	push   ecx
c001b419:	52                   	push   edx
c001b41a:	50                   	push   eax
c001b41b:	56                   	push   esi
c001b41c:	e8 0b ff ff ff       	call   c001b32c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b421:	89 c2                	mov    edx,eax
c001b423:	ed                   	in     eax,dx
c001b424:	83 e3 02             	and    ebx,0x2
c001b427:	83 c4 20             	add    esp,0x20
c001b42a:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b431:	d3 e8                	shr    eax,cl
c001b433:	eb 12                	jmp    c001b447 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b435:	83 ec 0c             	sub    esp,0xc
c001b438:	68 c7 31 02 c0       	push   0xc00231c7
c001b43d:	e8 dd 61 ff ff       	call   c001161f <KePanic(char const*)>
c001b442:	83 c4 10             	add    esp,0x10
c001b445:	31 c0                	xor    eax,eax
c001b447:	5b                   	pop    ebx
c001b448:	5e                   	pop    esi
c001b449:	5f                   	pop    edi
c001b44a:	c3                   	ret    
c001b44b:	90                   	nop

c001b44c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b44c:	83 ec 18             	sub    esp,0x18
c001b44f:	6a 00                	push   0x0
c001b451:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b456:	50                   	push   eax
c001b457:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b45c:	50                   	push   eax
c001b45d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b462:	50                   	push   eax
c001b463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b467:	e8 36 ff ff ff       	call   c001b3a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b46c:	83 c4 2c             	add    esp,0x2c
c001b46f:	c3                   	ret    

c001b470 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b470:	83 ec 18             	sub    esp,0x18
c001b473:	6a 0e                	push   0xe
c001b475:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b47a:	50                   	push   eax
c001b47b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b480:	50                   	push   eax
c001b481:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b486:	50                   	push   eax
c001b487:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b48b:	e8 12 ff ff ff       	call   c001b3a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b490:	83 c4 2c             	add    esp,0x2c
c001b493:	0f b6 c0             	movzx  eax,al
c001b496:	c3                   	ret    
c001b497:	90                   	nop

c001b498 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b498:	55                   	push   ebp
c001b499:	57                   	push   edi
c001b49a:	56                   	push   esi
c001b49b:	53                   	push   ebx
c001b49c:	83 ec 18             	sub    esp,0x18
c001b49f:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b4a4:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b4a9:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b4ae:	6a 0a                	push   0xa
c001b4b0:	56                   	push   esi
c001b4b1:	55                   	push   ebp
c001b4b2:	57                   	push   edi
c001b4b3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b4b7:	e8 e6 fe ff ff       	call   c001b3a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4bc:	83 c4 14             	add    esp,0x14
c001b4bf:	89 c3                	mov    ebx,eax
c001b4c1:	6a 0a                	push   0xa
c001b4c3:	0f b6 db             	movzx  ebx,bl
c001b4c6:	56                   	push   esi
c001b4c7:	55                   	push   ebp
c001b4c8:	57                   	push   edi
c001b4c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b4cd:	e8 d0 fe ff ff       	call   c001b3a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4d2:	83 c4 2c             	add    esp,0x2c
c001b4d5:	25 00 ff 00 00       	and    eax,0xff00
c001b4da:	09 d8                	or     eax,ebx
c001b4dc:	5b                   	pop    ebx
c001b4dd:	5e                   	pop    esi
c001b4de:	5f                   	pop    edi
c001b4df:	5d                   	pop    ebp
c001b4e0:	c3                   	ret    
c001b4e1:	90                   	nop

c001b4e2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b4e2:	83 ec 18             	sub    esp,0x18
c001b4e5:	6a 08                	push   0x8
c001b4e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ec:	50                   	push   eax
c001b4ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4f2:	50                   	push   eax
c001b4f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4f8:	50                   	push   eax
c001b4f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4fd:	e8 a0 fe ff ff       	call   c001b3a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b502:	83 c4 2c             	add    esp,0x2c
c001b505:	0f b6 c4             	movzx  eax,ah
c001b508:	c3                   	ret    
c001b509:	90                   	nop

c001b50a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b50a:	83 ec 18             	sub    esp,0x18
c001b50d:	6a 08                	push   0x8
c001b50f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b514:	50                   	push   eax
c001b515:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b51a:	50                   	push   eax
c001b51b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b520:	50                   	push   eax
c001b521:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b525:	e8 78 fe ff ff       	call   c001b3a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b52a:	83 c4 2c             	add    esp,0x2c
c001b52d:	c3                   	ret    

c001b52e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b52e:	83 ec 18             	sub    esp,0x18
c001b531:	6a 3c                	push   0x3c
c001b533:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b538:	50                   	push   eax
c001b539:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b53e:	50                   	push   eax
c001b53f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b544:	50                   	push   eax
c001b545:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b549:	e8 54 fe ff ff       	call   c001b3a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b54e:	83 c4 2c             	add    esp,0x2c
c001b551:	c3                   	ret    

c001b552 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b552:	83 ec 18             	sub    esp,0x18
c001b555:	6a 18                	push   0x18
c001b557:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b55c:	50                   	push   eax
c001b55d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b562:	50                   	push   eax
c001b563:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b568:	50                   	push   eax
c001b569:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b56d:	e8 30 fe ff ff       	call   c001b3a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b572:	83 c4 2c             	add    esp,0x2c
c001b575:	0f b6 c4             	movzx  eax,ah
c001b578:	c3                   	ret    
c001b579:	90                   	nop

c001b57a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b57a:	55                   	push   ebp
c001b57b:	57                   	push   edi
c001b57c:	56                   	push   esi
c001b57d:	53                   	push   ebx
c001b57e:	83 ec 28             	sub    esp,0x28
c001b581:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b585:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b58a:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b58f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b594:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b59b:	8d 43 12             	lea    eax,[ebx+0x12]
c001b59e:	83 c3 10             	add    ebx,0x10
c001b5a1:	0f b6 c0             	movzx  eax,al
c001b5a4:	0f b6 db             	movzx  ebx,bl
c001b5a7:	50                   	push   eax
c001b5a8:	51                   	push   ecx
c001b5a9:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b5ad:	57                   	push   edi
c001b5ae:	55                   	push   ebp
c001b5af:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b5b3:	e8 ea fd ff ff       	call   c001b3a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5b8:	83 c4 14             	add    esp,0x14
c001b5bb:	89 c6                	mov    esi,eax
c001b5bd:	53                   	push   ebx
c001b5be:	c1 e6 10             	shl    esi,0x10
c001b5c1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b5c5:	51                   	push   ecx
c001b5c6:	57                   	push   edi
c001b5c7:	55                   	push   ebp
c001b5c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b5cc:	e8 d1 fd ff ff       	call   c001b3a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5d1:	83 c4 3c             	add    esp,0x3c
c001b5d4:	0f b7 c0             	movzx  eax,ax
c001b5d7:	5b                   	pop    ebx
c001b5d8:	09 f0                	or     eax,esi
c001b5da:	5e                   	pop    esi
c001b5db:	5f                   	pop    edi
c001b5dc:	5d                   	pop    ebp
c001b5dd:	c3                   	ret    

c001b5de <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b5de:	55                   	push   ebp
c001b5df:	57                   	push   edi
c001b5e0:	56                   	push   esi
c001b5e1:	53                   	push   ebx
c001b5e2:	83 ec 0c             	sub    esp,0xc
c001b5e5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b5e9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b5ed:	89 f5                	mov    ebp,esi
c001b5ef:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b5f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b5f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b5fd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b601:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b605:	83 f9 01             	cmp    ecx,0x1
c001b608:	75 5d                	jne    c001b667 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b60a:	0f b6 c8             	movzx  ecx,al
c001b60d:	0f b6 d2             	movzx  edx,dl
c001b610:	c1 e1 10             	shl    ecx,0x10
c001b613:	c1 e2 0b             	shl    edx,0xb
c001b616:	89 f0                	mov    eax,esi
c001b618:	25 fc 00 00 00       	and    eax,0xfc
c001b61d:	09 c1                	or     ecx,eax
c001b61f:	89 e8                	mov    eax,ebp
c001b621:	0f b6 c0             	movzx  eax,al
c001b624:	c1 e0 08             	shl    eax,0x8
c001b627:	09 c1                	or     ecx,eax
c001b629:	09 d1                	or     ecx,edx
c001b62b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b630:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b636:	89 c8                	mov    eax,ecx
c001b638:	ef                   	out    dx,eax
c001b639:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b63e:	ed                   	in     eax,dx
c001b63f:	0f b7 db             	movzx  ebx,bx
c001b642:	83 e6 02             	and    esi,0x2
c001b645:	74 0a                	je     c001b651 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b647:	0f b7 d0             	movzx  edx,ax
c001b64a:	c1 e3 10             	shl    ebx,0x10
c001b64d:	09 d3                	or     ebx,edx
c001b64f:	eb 05                	jmp    c001b656 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b651:	66 31 c0             	xor    ax,ax
c001b654:	09 c3                	or     ebx,eax
c001b656:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b65b:	89 c8                	mov    eax,ecx
c001b65d:	ef                   	out    dx,eax
c001b65e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b663:	89 d8                	mov    eax,ebx
c001b665:	eb 41                	jmp    c001b6a8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b667:	83 f9 02             	cmp    ecx,0x2
c001b66a:	75 45                	jne    c001b6b1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b66c:	83 ec 0c             	sub    esp,0xc
c001b66f:	0f b6 d2             	movzx  edx,dl
c001b672:	89 f1                	mov    ecx,esi
c001b674:	0f b6 c0             	movzx  eax,al
c001b677:	0f b6 f1             	movzx  esi,cl
c001b67a:	89 e9                	mov    ecx,ebp
c001b67c:	56                   	push   esi
c001b67d:	0f b6 c9             	movzx  ecx,cl
c001b680:	51                   	push   ecx
c001b681:	52                   	push   edx
c001b682:	50                   	push   eax
c001b683:	57                   	push   edi
c001b684:	e8 a3 fc ff ff       	call   c001b32c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b689:	89 c2                	mov    edx,eax
c001b68b:	ed                   	in     eax,dx
c001b68c:	83 c4 20             	add    esp,0x20
c001b68f:	0f b7 db             	movzx  ebx,bx
c001b692:	f6 c2 02             	test   dl,0x2
c001b695:	74 0c                	je     c001b6a3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b697:	0f b7 c8             	movzx  ecx,ax
c001b69a:	89 d8                	mov    eax,ebx
c001b69c:	c1 e0 10             	shl    eax,0x10
c001b69f:	09 c8                	or     eax,ecx
c001b6a1:	eb 05                	jmp    c001b6a8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b6a3:	66 31 c0             	xor    ax,ax
c001b6a6:	09 d8                	or     eax,ebx
c001b6a8:	ef                   	out    dx,eax
c001b6a9:	83 c4 0c             	add    esp,0xc
c001b6ac:	5b                   	pop    ebx
c001b6ad:	5e                   	pop    esi
c001b6ae:	5f                   	pop    edi
c001b6af:	5d                   	pop    ebp
c001b6b0:	c3                   	ret    
c001b6b1:	c7 44 24 20 c7 31 02 c0 	mov    DWORD PTR [esp+0x20],0xc00231c7
c001b6b9:	83 c4 0c             	add    esp,0xc
c001b6bc:	5b                   	pop    ebx
c001b6bd:	5e                   	pop    esi
c001b6be:	5f                   	pop    edi
c001b6bf:	5d                   	pop    ebp
c001b6c0:	e9 5a 5f ff ff       	jmp    c001161f <KePanic(char const*)>
c001b6c5:	90                   	nop

c001b6c6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b6c6:	55                   	push   ebp
c001b6c7:	57                   	push   edi
c001b6c8:	56                   	push   esi
c001b6c9:	53                   	push   ebx
c001b6ca:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b6d0:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b6d7:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b6de:	0f 85 bd 00 00 00    	jne    c001b7a1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b6e4:	83 ec 0c             	sub    esp,0xc
c001b6e7:	68 14 01 00 00       	push   0x114
c001b6ec:	e8 c5 c3 fe ff       	call   c0007ab6 <malloc>
c001b6f1:	83 c4 0c             	add    esp,0xc
c001b6f4:	89 c3                	mov    ebx,eax
c001b6f6:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b6fc:	68 cd 31 02 c0       	push   0xc00231cd
c001b701:	50                   	push   eax
c001b702:	e8 45 04 ff ff       	call   c000bb4c <File::File(char const*, Process*)>
c001b707:	83 c4 10             	add    esp,0x10
c001b70a:	85 db                	test   ebx,ebx
c001b70c:	0f 84 67 02 00 00    	je     c001b979 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b712:	56                   	push   esi
c001b713:	56                   	push   esi
c001b714:	6a 01                	push   0x1
c001b716:	53                   	push   ebx
c001b717:	e8 4e 04 ff ff       	call   c000bb6a <File::open(FileOpenMode)>
c001b71c:	83 c4 10             	add    esp,0x10
c001b71f:	85 c0                	test   eax,eax
c001b721:	0f 85 52 02 00 00    	jne    c001b979 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b727:	52                   	push   edx
c001b728:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b72c:	50                   	push   eax
c001b72d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b731:	50                   	push   eax
c001b732:	53                   	push   ebx
c001b733:	e8 34 07 ff ff       	call   c000be6c <File::stat(unsigned long long*, bool*)>
c001b738:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b73c:	40                   	inc    eax
c001b73d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b740:	e8 71 c3 fe ff       	call   c0007ab6 <malloc>
c001b745:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b749:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b74e:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b752:	59                   	pop    ecx
c001b753:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b755:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b759:	51                   	push   ecx
c001b75a:	50                   	push   eax
c001b75b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b75f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b763:	53                   	push   ebx
c001b764:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b767:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b76b:	83 c4 20             	add    esp,0x20
c001b76e:	89 c8                	mov    eax,ecx
c001b770:	99                   	cdq    
c001b771:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b775:	0f 85 fe 01 00 00    	jne    c001b979 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b77b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b77f:	0f 85 f4 01 00 00    	jne    c001b979 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b785:	83 ec 0c             	sub    esp,0xc
c001b788:	53                   	push   ebx
c001b789:	e8 3a 04 ff ff       	call   c000bbc8 <File::close()>
c001b78e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b792:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b799:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b79e:	83 c4 10             	add    esp,0x10
c001b7a1:	a1 a4 d0 02 c0       	mov    eax,ds:0xc002d0a4
c001b7a6:	8b 1d a8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0a8
c001b7ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b7b0:	31 f6                	xor    esi,esi
c001b7b2:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b7ba:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b7c1:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b7c6:	31 c9                	xor    ecx,ecx
c001b7c8:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b7d0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b7d5:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b7dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b7e1:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b7e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b7ed:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b7f1:	0f 8e 82 01 00 00    	jle    c001b979 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b7f7:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b7fa:	d4 40                	aam    0x40
c001b7fc:	d5 39                	aad    0x39
c001b7fe:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b802:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b806:	d4 40                	aam    0x40
c001b808:	d5 39                	aad    0x39
c001b80a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b80e:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b812:	d4 40                	aam    0x40
c001b814:	d5 39                	aad    0x39
c001b816:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b81a:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b81e:	d4 40                	aam    0x40
c001b820:	d5 39                	aad    0x39
c001b822:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b826:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b82a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b82e:	3c 56                	cmp    al,0x56
c001b830:	74 43                	je     c001b875 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b832:	d4 40                	aam    0x40
c001b834:	d5 39                	aad    0x39
c001b836:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b839:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b83d:	0f b6 c9             	movzx  ecx,cl
c001b840:	c1 e1 04             	shl    ecx,0x4
c001b843:	d4 40                	aam    0x40
c001b845:	d5 39                	aad    0x39
c001b847:	83 e8 30             	sub    eax,0x30
c001b84a:	0f b6 c0             	movzx  eax,al
c001b84d:	09 c1                	or     ecx,eax
c001b84f:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b853:	c1 e1 04             	shl    ecx,0x4
c001b856:	d4 40                	aam    0x40
c001b858:	d5 39                	aad    0x39
c001b85a:	83 e8 30             	sub    eax,0x30
c001b85d:	0f b6 c0             	movzx  eax,al
c001b860:	09 c1                	or     ecx,eax
c001b862:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b866:	c1 e1 04             	shl    ecx,0x4
c001b869:	d4 40                	aam    0x40
c001b86b:	d5 39                	aad    0x39
c001b86d:	83 e8 30             	sub    eax,0x30
c001b870:	0f b6 c0             	movzx  eax,al
c001b873:	09 c1                	or     ecx,eax
c001b875:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b879:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b87d:	3c 58                	cmp    al,0x58
c001b87f:	74 47                	je     c001b8c8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b881:	d4 40                	aam    0x40
c001b883:	d5 39                	aad    0x39
c001b885:	8d 50 d0             	lea    edx,[eax-0x30]
c001b888:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b88c:	0f b6 d2             	movzx  edx,dl
c001b88f:	c1 e2 04             	shl    edx,0x4
c001b892:	d4 40                	aam    0x40
c001b894:	d5 39                	aad    0x39
c001b896:	83 e8 30             	sub    eax,0x30
c001b899:	0f b6 c0             	movzx  eax,al
c001b89c:	09 c2                	or     edx,eax
c001b89e:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b8a2:	c1 e2 04             	shl    edx,0x4
c001b8a5:	d4 40                	aam    0x40
c001b8a7:	d5 39                	aad    0x39
c001b8a9:	83 e8 30             	sub    eax,0x30
c001b8ac:	0f b6 c0             	movzx  eax,al
c001b8af:	09 c2                	or     edx,eax
c001b8b1:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b8b5:	c1 e2 04             	shl    edx,0x4
c001b8b8:	d4 40                	aam    0x40
c001b8ba:	d5 39                	aad    0x39
c001b8bc:	83 e8 30             	sub    eax,0x30
c001b8bf:	0f b6 c0             	movzx  eax,al
c001b8c2:	09 c2                	or     edx,eax
c001b8c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b8c8:	83 c6 10             	add    esi,0x10
c001b8cb:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b8cf:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b8d3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b8d7:	83 fa 0a             	cmp    edx,0xa
c001b8da:	74 0b                	je     c001b8e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b8dc:	47                   	inc    edi
c001b8dd:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b8e1:	75 19                	jne    c001b8fc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b8e3:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b8e7:	31 c0                	xor    eax,eax
c001b8e9:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b8ee:	0f 94 c0             	sete   al
c001b8f1:	01 c6                	add    esi,eax
c001b8f3:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b8f8:	75 0b                	jne    c001b905 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b8fa:	eb 14                	jmp    c001b910 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b8fc:	46                   	inc    esi
c001b8fd:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b900:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b903:	eb ca                	jmp    c001b8cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b905:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b90a:	0f 85 dd fe ff ff    	jne    c001b7ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b910:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b915:	74 10                	je     c001b927 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b917:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b91c:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b921:	0f 85 c6 fe ff ff    	jne    c001b7ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b92b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b92f:	83 e8 30             	sub    eax,0x30
c001b932:	83 ef 30             	sub    edi,0x30
c001b935:	c1 e0 04             	shl    eax,0x4
c001b938:	09 f8                	or     eax,edi
c001b93a:	0f b6 c0             	movzx  eax,al
c001b93d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b941:	0f 85 a6 fe ff ff    	jne    c001b7ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b947:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b94b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b94f:	83 e8 30             	sub    eax,0x30
c001b952:	83 ef 30             	sub    edi,0x30
c001b955:	c1 e0 04             	shl    eax,0x4
c001b958:	09 f8                	or     eax,edi
c001b95a:	0f b6 c0             	movzx  eax,al
c001b95d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b961:	0f 85 86 fe ff ff    	jne    c001b7ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b967:	50                   	push   eax
c001b968:	50                   	push   eax
c001b969:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b96d:	50                   	push   eax
c001b96e:	55                   	push   ebp
c001b96f:	e8 cc 4c fe ff       	call   c0000640 <strcpy>
c001b974:	83 c4 10             	add    esp,0x10
c001b977:	eb 06                	jmp    c001b97f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b979:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b97d:	31 ed                	xor    ebp,ebp
c001b97f:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b985:	89 e8                	mov    eax,ebp
c001b987:	5b                   	pop    ebx
c001b988:	5e                   	pop    esi
c001b989:	5f                   	pop    edi
c001b98a:	5d                   	pop    ebp
c001b98b:	c3                   	ret    

c001b98c <PCI::checkBus(unsigned char)>:
c001b98c:	56                   	push   esi
c001b98d:	53                   	push   ebx
c001b98e:	31 db                	xor    ebx,ebx
c001b990:	51                   	push   ecx
c001b991:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b996:	52                   	push   edx
c001b997:	53                   	push   ebx
c001b998:	43                   	inc    ebx
c001b999:	56                   	push   esi
c001b99a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b99e:	e8 03 03 00 00       	call   c001bca6 <PCI::checkDevice(unsigned char, unsigned char)>
c001b9a3:	83 c4 10             	add    esp,0x10
c001b9a6:	83 fb 20             	cmp    ebx,0x20
c001b9a9:	75 eb                	jne    c001b996 <PCI::checkBus(unsigned char)+0xa>
c001b9ab:	58                   	pop    eax
c001b9ac:	5b                   	pop    ebx
c001b9ad:	5e                   	pop    esi
c001b9ae:	c3                   	ret    
c001b9af:	90                   	nop

c001b9b0 <PCI::foundDevice(PCIDeviceInfo)>:
c001b9b0:	55                   	push   ebp
c001b9b1:	57                   	push   edi
c001b9b2:	56                   	push   esi
c001b9b3:	53                   	push   ebx
c001b9b4:	83 ec 1c             	sub    esp,0x1c
c001b9b7:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b9bc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b9c0:	3d ff ff 00 00       	cmp    eax,0xffff
c001b9c5:	0f 84 57 01 00 00    	je     c001bb22 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b9cb:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b9d0:	66 3d 06 04          	cmp    ax,0x406
c001b9d4:	75 2c                	jne    c001ba02 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b9d6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b9db:	50                   	push   eax
c001b9dc:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b9e1:	50                   	push   eax
c001b9e2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b9e7:	50                   	push   eax
c001b9e8:	53                   	push   ebx
c001b9e9:	e8 64 fb ff ff       	call   c001b552 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b9ee:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b9f2:	0f b6 c0             	movzx  eax,al
c001b9f5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b9f9:	83 c4 2c             	add    esp,0x2c
c001b9fc:	5b                   	pop    ebx
c001b9fd:	5e                   	pop    esi
c001b9fe:	5f                   	pop    edi
c001b9ff:	5d                   	pop    ebp
c001ba00:	eb 8a                	jmp    c001b98c <PCI::checkBus(unsigned char)>
c001ba02:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ba06:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001ba0c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ba10:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ba14:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001ba19:	85 d2                	test   edx,edx
c001ba1b:	74 36                	je     c001ba53 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001ba1d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ba20:	85 c9                	test   ecx,ecx
c001ba22:	74 2b                	je     c001ba4f <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ba24:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001ba2a:	31 ee                	xor    esi,ebp
c001ba2c:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001ba32:	75 1b                	jne    c001ba4f <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ba34:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001ba38:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001ba3e:	75 0f                	jne    c001ba4f <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ba40:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001ba47:	39 f9                	cmp    ecx,edi
c001ba49:	0f 84 d3 00 00 00    	je     c001bb22 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001ba4f:	8b 12                	mov    edx,DWORD PTR [edx]
c001ba51:	eb c6                	jmp    c001ba19 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001ba53:	3d 01 06 00 00       	cmp    eax,0x601
c001ba58:	75 19                	jne    c001ba73 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001ba5a:	83 ec 0c             	sub    esp,0xc
c001ba5d:	68 64 01 00 00       	push   0x164
c001ba62:	e8 4f c0 fe ff       	call   c0007ab6 <malloc>
c001ba67:	89 c5                	mov    ebp,eax
c001ba69:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba6c:	e8 a1 0e 00 00       	call   c001c912 <SATABus::SATABus()>
c001ba71:	eb 1e                	jmp    c001ba91 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001ba73:	3d 01 01 00 00       	cmp    eax,0x101
c001ba78:	75 62                	jne    c001badc <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001ba7a:	83 ec 0c             	sub    esp,0xc
c001ba7d:	68 70 02 00 00       	push   0x270
c001ba82:	e8 2f c0 fe ff       	call   c0007ab6 <malloc>
c001ba87:	89 c5                	mov    ebp,eax
c001ba89:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba8c:	e8 e5 02 00 00       	call   c001bd76 <IDE::IDE()>
c001ba91:	5f                   	pop    edi
c001ba92:	58                   	pop    eax
c001ba93:	55                   	push   ebp
c001ba94:	53                   	push   ebx
c001ba95:	e8 2c 0f ff ff       	call   c000c9c6 <Device::addChild(Device*)>
c001ba9a:	83 ec 1c             	sub    esp,0x1c
c001ba9d:	b9 09 00 00 00       	mov    ecx,0x9
c001baa2:	fc                   	cld    
c001baa3:	89 e7                	mov    edi,esp
c001baa5:	8d 74 24 60          	lea    esi,[esp+0x60]
c001baa9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001baab:	55                   	push   ebp
c001baac:	e8 5b 0e ff ff       	call   c000c90c <Device::preOpenPCI(PCIDeviceInfo)>
c001bab1:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bab4:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001bab8:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001bac0:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001bac8:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001bad0:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001bad3:	83 c4 4c             	add    esp,0x4c
c001bad6:	5b                   	pop    ebx
c001bad7:	5e                   	pop    esi
c001bad8:	5f                   	pop    edi
c001bad9:	5d                   	pop    ebp
c001bada:	ff e0                	jmp    eax
c001badc:	83 ec 0c             	sub    esp,0xc
c001badf:	68 58 01 00 00       	push   0x158
c001bae4:	e8 cd bf fe ff       	call   c0007ab6 <malloc>
c001bae9:	89 c5                	mov    ebp,eax
c001baeb:	58                   	pop    eax
c001baec:	5a                   	pop    edx
c001baed:	68 e6 31 02 c0       	push   0xc00231e6
c001baf2:	55                   	push   ebp
c001baf3:	e8 6c 11 ff ff       	call   c000cc64 <DriverlessDevice::DriverlessDevice(char const*)>
c001baf8:	59                   	pop    ecx
c001baf9:	5e                   	pop    esi
c001bafa:	55                   	push   ebp
c001bafb:	53                   	push   ebx
c001bafc:	e8 c5 0e ff ff       	call   c000c9c6 <Device::addChild(Device*)>
c001bb01:	83 c4 10             	add    esp,0x10
c001bb04:	b9 09 00 00 00       	mov    ecx,0x9
c001bb09:	fc                   	cld    
c001bb0a:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001bb0e:	89 fe                	mov    esi,edi
c001bb10:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb12:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001bb16:	83 c4 1c             	add    esp,0x1c
c001bb19:	5b                   	pop    ebx
c001bb1a:	5e                   	pop    esi
c001bb1b:	5f                   	pop    edi
c001bb1c:	5d                   	pop    ebp
c001bb1d:	e9 ea 0d ff ff       	jmp    c000c90c <Device::preOpenPCI(PCIDeviceInfo)>
c001bb22:	83 c4 1c             	add    esp,0x1c
c001bb25:	5b                   	pop    ebx
c001bb26:	5e                   	pop    esi
c001bb27:	5f                   	pop    edi
c001bb28:	5d                   	pop    ebp
c001bb29:	c3                   	ret    

c001bb2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bb2a:	55                   	push   ebp
c001bb2b:	57                   	push   edi
c001bb2c:	56                   	push   esi
c001bb2d:	53                   	push   ebx
c001bb2e:	83 ec 68             	sub    esp,0x68
c001bb31:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bb35:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bb3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bb40:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bb47:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bb4c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bb50:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bb57:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bb5c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bb60:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bb65:	6a 0c                	push   0xc
c001bb67:	57                   	push   edi
c001bb68:	53                   	push   ebx
c001bb69:	56                   	push   esi
c001bb6a:	55                   	push   ebp
c001bb6b:	e8 32 f8 ff ff       	call   c001b3a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb70:	83 c4 20             	add    esp,0x20
c001bb73:	57                   	push   edi
c001bb74:	53                   	push   ebx
c001bb75:	56                   	push   esi
c001bb76:	55                   	push   ebp
c001bb77:	e8 1c f9 ff ff       	call   c001b498 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bb7c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bb81:	57                   	push   edi
c001bb82:	53                   	push   ebx
c001bb83:	56                   	push   esi
c001bb84:	55                   	push   ebp
c001bb85:	e8 a4 f9 ff ff       	call   c001b52e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bb8a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bb8e:	83 c4 14             	add    esp,0x14
c001bb91:	6a 3c                	push   0x3c
c001bb93:	57                   	push   edi
c001bb94:	53                   	push   ebx
c001bb95:	56                   	push   esi
c001bb96:	55                   	push   ebp
c001bb97:	e8 06 f8 ff ff       	call   c001b3a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb9c:	0f b6 c4             	movzx  eax,ah
c001bb9f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bba3:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bba7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bbab:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bbb0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bbb6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bbbc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bbc0:	83 c4 20             	add    esp,0x20
c001bbc3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bbc8:	74 30                	je     c001bbfa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bbca:	31 c0                	xor    eax,eax
c001bbcc:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bbd0:	7e 28                	jle    c001bbfa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bbd2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bbda:	39 cb                	cmp    ebx,ecx
c001bbdc:	75 19                	jne    c001bbf7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bbde:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bbe6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bbea:	75 0b                	jne    c001bbf7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bbec:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bbf3:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bbf7:	40                   	inc    eax
c001bbf8:	eb d2                	jmp    c001bbcc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bbfa:	31 d2                	xor    edx,edx
c001bbfc:	83 ec 0c             	sub    esp,0xc
c001bbff:	57                   	push   edi
c001bc00:	53                   	push   ebx
c001bc01:	56                   	push   esi
c001bc02:	52                   	push   edx
c001bc03:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bc07:	55                   	push   ebp
c001bc08:	e8 6d f9 ff ff       	call   c001b57a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc0d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bc11:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bc15:	42                   	inc    edx
c001bc16:	83 c4 20             	add    esp,0x20
c001bc19:	83 fa 06             	cmp    edx,0x6
c001bc1c:	75 de                	jne    c001bbfc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bc1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc26:	c1 e2 08             	shl    edx,0x8
c001bc29:	83 ec 0c             	sub    esp,0xc
c001bc2c:	0f b6 c4             	movzx  eax,ah
c001bc2f:	09 d0                	or     eax,edx
c001bc31:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bc36:	6a 02                	push   0x2
c001bc38:	57                   	push   edi
c001bc39:	53                   	push   ebx
c001bc3a:	56                   	push   esi
c001bc3b:	55                   	push   ebp
c001bc3c:	e8 61 f7 ff ff       	call   c001b3a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc41:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bc46:	83 c4 20             	add    esp,0x20
c001bc49:	57                   	push   edi
c001bc4a:	53                   	push   ebx
c001bc4b:	56                   	push   esi
c001bc4c:	55                   	push   ebp
c001bc4d:	e8 90 f8 ff ff       	call   c001b4e2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bc52:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bc56:	57                   	push   edi
c001bc57:	53                   	push   ebx
c001bc58:	56                   	push   esi
c001bc59:	55                   	push   ebp
c001bc5a:	e8 ed f7 ff ff       	call   c001b44c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc5f:	b9 09 00 00 00       	mov    ecx,0x9
c001bc64:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bc69:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bc6d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bc71:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bc75:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bc79:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bc7d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bc81:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bc85:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bc89:	83 ec 0c             	sub    esp,0xc
c001bc8c:	fc                   	cld    
c001bc8d:	89 e7                	mov    edi,esp
c001bc8f:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bc93:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bc95:	55                   	push   ebp
c001bc96:	e8 15 fd ff ff       	call   c001b9b0 <PCI::foundDevice(PCIDeviceInfo)>
c001bc9b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bca1:	5b                   	pop    ebx
c001bca2:	5e                   	pop    esi
c001bca3:	5f                   	pop    edi
c001bca4:	5d                   	pop    ebp
c001bca5:	c3                   	ret    

c001bca6 <PCI::checkDevice(unsigned char, unsigned char)>:
c001bca6:	55                   	push   ebp
c001bca7:	57                   	push   edi
c001bca8:	56                   	push   esi
c001bca9:	53                   	push   ebx
c001bcaa:	83 ec 0c             	sub    esp,0xc
c001bcad:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bcb1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bcb6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bcbb:	6a 00                	push   0x0
c001bcbd:	56                   	push   esi
c001bcbe:	57                   	push   edi
c001bcbf:	55                   	push   ebp
c001bcc0:	e8 87 f7 ff ff       	call   c001b44c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bcc5:	6a 00                	push   0x0
c001bcc7:	56                   	push   esi
c001bcc8:	57                   	push   edi
c001bcc9:	55                   	push   ebp
c001bcca:	e8 5b fe ff ff       	call   c001bb2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bccf:	83 c4 20             	add    esp,0x20
c001bcd2:	6a 00                	push   0x0
c001bcd4:	56                   	push   esi
c001bcd5:	57                   	push   edi
c001bcd6:	55                   	push   ebp
c001bcd7:	e8 94 f7 ff ff       	call   c001b470 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bcdc:	83 c4 10             	add    esp,0x10
c001bcdf:	a8 80                	test   al,0x80
c001bce1:	74 2d                	je     c001bd10 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bce3:	bb 01 00 00 00       	mov    ebx,0x1
c001bce8:	53                   	push   ebx
c001bce9:	56                   	push   esi
c001bcea:	57                   	push   edi
c001bceb:	55                   	push   ebp
c001bcec:	e8 5b f7 ff ff       	call   c001b44c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bcf1:	83 c4 10             	add    esp,0x10
c001bcf4:	0f b7 c0             	movzx  eax,ax
c001bcf7:	3d ff ff 00 00       	cmp    eax,0xffff
c001bcfc:	74 0c                	je     c001bd0a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bcfe:	53                   	push   ebx
c001bcff:	56                   	push   esi
c001bd00:	57                   	push   edi
c001bd01:	55                   	push   ebp
c001bd02:	e8 23 fe ff ff       	call   c001bb2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd07:	83 c4 10             	add    esp,0x10
c001bd0a:	43                   	inc    ebx
c001bd0b:	83 fb 08             	cmp    ebx,0x8
c001bd0e:	75 d8                	jne    c001bce8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bd10:	83 c4 0c             	add    esp,0xc
c001bd13:	5b                   	pop    ebx
c001bd14:	5e                   	pop    esi
c001bd15:	5f                   	pop    edi
c001bd16:	5d                   	pop    ebp
c001bd17:	c3                   	ret    

c001bd18 <PCI::detect()>:
c001bd18:	56                   	push   esi
c001bd19:	53                   	push   ebx
c001bd1a:	53                   	push   ebx
c001bd1b:	31 db                	xor    ebx,ebx
c001bd1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd21:	6a 00                	push   0x0
c001bd23:	6a 00                	push   0x0
c001bd25:	6a 00                	push   0x0
c001bd27:	56                   	push   esi
c001bd28:	e8 43 f7 ff ff       	call   c001b470 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bd2d:	83 c4 10             	add    esp,0x10
c001bd30:	a8 80                	test   al,0x80
c001bd32:	75 21                	jne    c001bd55 <PCI::detect()+0x3d>
c001bd34:	51                   	push   ecx
c001bd35:	51                   	push   ecx
c001bd36:	6a 00                	push   0x0
c001bd38:	56                   	push   esi
c001bd39:	e8 4e fc ff ff       	call   c001b98c <PCI::checkBus(unsigned char)>
c001bd3e:	83 c4 10             	add    esp,0x10
c001bd41:	eb 2a                	jmp    c001bd6d <PCI::detect()+0x55>
c001bd43:	52                   	push   edx
c001bd44:	52                   	push   edx
c001bd45:	53                   	push   ebx
c001bd46:	43                   	inc    ebx
c001bd47:	56                   	push   esi
c001bd48:	e8 3f fc ff ff       	call   c001b98c <PCI::checkBus(unsigned char)>
c001bd4d:	83 c4 10             	add    esp,0x10
c001bd50:	83 fb 08             	cmp    ebx,0x8
c001bd53:	74 18                	je     c001bd6d <PCI::detect()+0x55>
c001bd55:	53                   	push   ebx
c001bd56:	6a 00                	push   0x0
c001bd58:	6a 00                	push   0x0
c001bd5a:	56                   	push   esi
c001bd5b:	e8 ec f6 ff ff       	call   c001b44c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd60:	83 c4 10             	add    esp,0x10
c001bd63:	0f b7 c0             	movzx  eax,ax
c001bd66:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd6b:	74 d6                	je     c001bd43 <PCI::detect()+0x2b>
c001bd6d:	58                   	pop    eax
c001bd6e:	5b                   	pop    ebx
c001bd6f:	5e                   	pop    esi
c001bd70:	c3                   	ret    
c001bd71:	90                   	nop

c001bd72 <IDE::close(int, int, void*)>:
c001bd72:	83 c8 ff             	or     eax,0xffffffff
c001bd75:	c3                   	ret    

c001bd76 <IDE::IDE()>:
c001bd76:	83 ec 0c             	sub    esp,0xc
c001bd79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd7d:	83 ec 08             	sub    esp,0x8
c001bd80:	68 2c 32 02 c0       	push   0xc002322c
c001bd85:	50                   	push   eax
c001bd86:	e8 7d 0f ff ff       	call   c000cd08 <HardDiskController::HardDiskController(char const*)>
c001bd8b:	83 c4 10             	add    esp,0x10
c001bd8e:	ba bc 32 02 c0       	mov    edx,0xc00232bc
c001bd93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd97:	89 10                	mov    DWORD PTR [eax],edx
c001bd99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd9d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bda4:	90                   	nop
c001bda5:	83 c4 0c             	add    esp,0xc
c001bda8:	c3                   	ret    
c001bda9:	90                   	nop

c001bdaa <IDE::prepareInterrupt(unsigned char)>:
c001bdaa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bdaf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bdb3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bdbb:	c3                   	ret    

c001bdbc <selectDrive(unsigned char, unsigned char)>:
c001bdbc:	c3                   	ret    
c001bdbd:	90                   	nop

c001bdbe <IDE::getBase(unsigned char)>:
c001bdbe:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bdc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdc7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bdcf:	c3                   	ret    

c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bdd0:	55                   	push   ebp
c001bdd1:	57                   	push   edi
c001bdd2:	56                   	push   esi
c001bdd3:	53                   	push   ebx
c001bdd4:	83 ec 1c             	sub    esp,0x1c
c001bdd7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bddb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bddf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bde2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bde6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bdea:	80 f9 03             	cmp    cl,0x3
c001bded:	77 4f                	ja     c001be3e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001bdef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdf3:	0f b6 fa             	movzx  edi,dl
c001bdf6:	0f b6 db             	movzx  ebx,bl
c001bdf9:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bdfc:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001be01:	80 ca 80             	or     dl,0x80
c001be04:	52                   	push   edx
c001be05:	6a 0c                	push   0xc
c001be07:	57                   	push   edi
c001be08:	56                   	push   esi
c001be09:	e8 c2 ff ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be0e:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001be13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be17:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001be1b:	ee                   	out    dx,al
c001be1c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be21:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001be25:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001be29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001be2d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001be35:	83 c4 2c             	add    esp,0x2c
c001be38:	5b                   	pop    ebx
c001be39:	5e                   	pop    esi
c001be3a:	5f                   	pop    edi
c001be3b:	5d                   	pop    ebp
c001be3c:	eb 92                	jmp    c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be3e:	0f b6 cb             	movzx  ecx,bl
c001be41:	83 f9 07             	cmp    ecx,0x7
c001be44:	77 12                	ja     c001be58 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001be46:	0f b6 d2             	movzx  edx,dl
c001be49:	0f b6 db             	movzx  ebx,bl
c001be4c:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001be54:	01 da                	add    edx,ebx
c001be56:	eb 2f                	jmp    c001be87 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001be58:	83 f9 0d             	cmp    ecx,0xd
c001be5b:	77 13                	ja     c001be70 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001be5d:	0f b6 d2             	movzx  edx,dl
c001be60:	0f b6 db             	movzx  ebx,bl
c001be63:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001be6a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001be6e:	eb 17                	jmp    c001be87 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001be70:	83 f9 15             	cmp    ecx,0x15
c001be73:	77 13                	ja     c001be88 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001be75:	0f b6 d2             	movzx  edx,dl
c001be78:	0f b6 db             	movzx  ebx,bl
c001be7b:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001be83:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001be87:	ee                   	out    dx,al
c001be88:	83 c4 1c             	add    esp,0x1c
c001be8b:	5b                   	pop    ebx
c001be8c:	5e                   	pop    esi
c001be8d:	5f                   	pop    edi
c001be8e:	5d                   	pop    ebp
c001be8f:	c3                   	ret    

c001be90 <IDE::read(unsigned char, unsigned char)>:
c001be90:	55                   	push   ebp
c001be91:	57                   	push   edi
c001be92:	56                   	push   esi
c001be93:	53                   	push   ebx
c001be94:	83 ec 1c             	sub    esp,0x1c
c001be97:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001be9b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be9f:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bea2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001bea6:	3c 03                	cmp    al,0x3
c001bea8:	77 40                	ja     c001beea <IDE::read(unsigned char, unsigned char)+0x5a>
c001beaa:	0f b6 f9             	movzx  edi,cl
c001bead:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001beb0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001beb5:	0c 80                	or     al,0x80
c001beb7:	50                   	push   eax
c001beb8:	6a 0c                	push   0xc
c001beba:	57                   	push   edi
c001bebb:	56                   	push   esi
c001bebc:	e8 0f ff ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bec1:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bec6:	0f b6 d3             	movzx  edx,bl
c001bec9:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001becd:	ec                   	in     al,dx
c001bece:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bed2:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bed7:	52                   	push   edx
c001bed8:	6a 0c                	push   0xc
c001beda:	57                   	push   edi
c001bedb:	56                   	push   esi
c001bedc:	e8 ef fe ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bee1:	83 c4 20             	add    esp,0x20
c001bee4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bee8:	eb 4c                	jmp    c001bf36 <IDE::read(unsigned char, unsigned char)+0xa6>
c001beea:	0f b6 d3             	movzx  edx,bl
c001beed:	83 fa 07             	cmp    edx,0x7
c001bef0:	77 12                	ja     c001bf04 <IDE::read(unsigned char, unsigned char)+0x74>
c001bef2:	0f b6 c9             	movzx  ecx,cl
c001bef5:	0f b6 d3             	movzx  edx,bl
c001bef8:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001bf00:	01 c2                	add    edx,eax
c001bf02:	eb 31                	jmp    c001bf35 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bf04:	83 fa 0d             	cmp    edx,0xd
c001bf07:	77 13                	ja     c001bf1c <IDE::read(unsigned char, unsigned char)+0x8c>
c001bf09:	0f b6 c9             	movzx  ecx,cl
c001bf0c:	0f b6 d3             	movzx  edx,bl
c001bf0f:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001bf16:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bf1a:	eb 19                	jmp    c001bf35 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bf1c:	31 c0                	xor    eax,eax
c001bf1e:	83 fa 15             	cmp    edx,0x15
c001bf21:	77 13                	ja     c001bf36 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bf23:	0f b6 c9             	movzx  ecx,cl
c001bf26:	0f b6 d3             	movzx  edx,bl
c001bf29:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001bf31:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bf35:	ec                   	in     al,dx
c001bf36:	83 c4 1c             	add    esp,0x1c
c001bf39:	5b                   	pop    ebx
c001bf3a:	5e                   	pop    esi
c001bf3b:	5f                   	pop    edi
c001bf3c:	5d                   	pop    ebp
c001bf3d:	c3                   	ret    

c001bf3e <IDE::waitInterrupt(unsigned char)>:
c001bf3e:	55                   	push   ebp
c001bf3f:	57                   	push   edi
c001bf40:	56                   	push   esi
c001bf41:	53                   	push   ebx
c001bf42:	31 db                	xor    ebx,ebx
c001bf44:	83 ec 0c             	sub    esp,0xc
c001bf47:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bf4b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bf50:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bf58:	89 e8                	mov    eax,ebp
c001bf5a:	84 c0                	test   al,al
c001bf5c:	75 30                	jne    c001bf8e <IDE::waitInterrupt(unsigned char)+0x50>
c001bf5e:	50                   	push   eax
c001bf5f:	6a 0c                	push   0xc
c001bf61:	56                   	push   esi
c001bf62:	57                   	push   edi
c001bf63:	e8 28 ff ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001bf68:	83 c4 10             	add    esp,0x10
c001bf6b:	a8 01                	test   al,0x1
c001bf6d:	75 27                	jne    c001bf96 <IDE::waitInterrupt(unsigned char)+0x58>
c001bf6f:	f6 c3 04             	test   bl,0x4
c001bf72:	75 12                	jne    c001bf86 <IDE::waitInterrupt(unsigned char)+0x48>
c001bf74:	83 fb 32             	cmp    ebx,0x32
c001bf77:	7e 0d                	jle    c001bf86 <IDE::waitInterrupt(unsigned char)+0x48>
c001bf79:	83 ec 0c             	sub    esp,0xc
c001bf7c:	6a 64                	push   0x64
c001bf7e:	e8 b1 a4 ff ff       	call   c0016434 <milliTenthSleep(unsigned int)>
c001bf83:	83 c4 10             	add    esp,0x10
c001bf86:	83 fb 3c             	cmp    ebx,0x3c
c001bf89:	74 0b                	je     c001bf96 <IDE::waitInterrupt(unsigned char)+0x58>
c001bf8b:	43                   	inc    ebx
c001bf8c:	eb c2                	jmp    c001bf50 <IDE::waitInterrupt(unsigned char)+0x12>
c001bf8e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bf96:	83 c4 0c             	add    esp,0xc
c001bf99:	89 e8                	mov    eax,ebp
c001bf9b:	5b                   	pop    ebx
c001bf9c:	5e                   	pop    esi
c001bf9d:	5f                   	pop    edi
c001bf9e:	5d                   	pop    ebp
c001bf9f:	c3                   	ret    

c001bfa0 <ideChannel0IRQHandler(regs*, void*)>:
c001bfa0:	83 ec 10             	sub    esp,0x10
c001bfa3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfa7:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bfae:	6a 07                	push   0x7
c001bfb0:	6a 00                	push   0x0
c001bfb2:	50                   	push   eax
c001bfb3:	e8 d8 fe ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001bfb8:	83 c4 1c             	add    esp,0x1c
c001bfbb:	c3                   	ret    

c001bfbc <ideChannel1IRQHandler(regs*, void*)>:
c001bfbc:	83 ec 10             	sub    esp,0x10
c001bfbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfc3:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bfca:	6a 07                	push   0x7
c001bfcc:	6a 01                	push   0x1
c001bfce:	50                   	push   eax
c001bfcf:	e8 bc fe ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001bfd4:	83 c4 1c             	add    esp,0x1c
c001bfd7:	c3                   	ret    

c001bfd8 <IDE::enableIRQs(unsigned char, bool)>:
c001bfd8:	57                   	push   edi
c001bfd9:	b8 02 00 00 00       	mov    eax,0x2
c001bfde:	56                   	push   esi
c001bfdf:	53                   	push   ebx
c001bfe0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bfe4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bfe8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bfed:	74 02                	je     c001bff1 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bfef:	31 c0                	xor    eax,eax
c001bff1:	0f b6 db             	movzx  ebx,bl
c001bff4:	bf 04 00 00 00       	mov    edi,0x4
c001bff9:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c000:	50                   	push   eax
c001c001:	6a 0c                	push   0xc
c001c003:	53                   	push   ebx
c001c004:	56                   	push   esi
c001c005:	e8 c6 fd ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c00a:	83 c4 10             	add    esp,0x10
c001c00d:	50                   	push   eax
c001c00e:	6a 0c                	push   0xc
c001c010:	53                   	push   ebx
c001c011:	56                   	push   esi
c001c012:	e8 79 fe ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c017:	83 c4 10             	add    esp,0x10
c001c01a:	4f                   	dec    edi
c001c01b:	75 f0                	jne    c001c00d <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c01d:	5b                   	pop    ebx
c001c01e:	5e                   	pop    esi
c001c01f:	5f                   	pop    edi
c001c020:	c3                   	ret    
c001c021:	90                   	nop

c001c022 <IDE::open(int, int, void*)>:
c001c022:	55                   	push   ebp
c001c023:	57                   	push   edi
c001c024:	56                   	push   esi
c001c025:	53                   	push   ebx
c001c026:	83 ec 1c             	sub    esp,0x1c
c001c029:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c02d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c036:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c03f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c046:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c04d:	0f 85 de 02 00 00    	jne    c001c331 <IDE::open(int, int, void*)+0x30f>
c001c053:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c059:	88 04 24             	mov    BYTE PTR [esp],al
c001c05c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c05f:	83 e0 7f             	and    eax,0x7f
c001c062:	83 f8 05             	cmp    eax,0x5
c001c065:	74 05                	je     c001c06c <IDE::open(int, int, void*)+0x4a>
c001c067:	83 f8 0f             	cmp    eax,0xf
c001c06a:	75 32                	jne    c001c09e <IDE::open(int, int, void*)+0x7c>
c001c06c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c072:	83 e0 fc             	and    eax,0xfffffffc
c001c075:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c07c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c082:	83 e0 fc             	and    eax,0xfffffffc
c001c085:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c08c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c092:	83 e0 fc             	and    eax,0xfffffffc
c001c095:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c09c:	eb 14                	jmp    c001c0b2 <IDE::open(int, int, void*)+0x90>
c001c09e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c0a8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c0b2:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c0b9:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c0c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c0c4:	89 c6                	mov    esi,eax
c001c0c6:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c0cb:	c1 e6 10             	shl    esi,0x10
c001c0ce:	89 e8                	mov    eax,ebp
c001c0d0:	89 fa                	mov    edx,edi
c001c0d2:	c1 e0 0b             	shl    eax,0xb
c001c0d5:	09 f0                	or     eax,esi
c001c0d7:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c0de:	c1 e6 08             	shl    esi,0x8
c001c0e1:	09 c6                	or     esi,eax
c001c0e3:	89 f0                	mov    eax,esi
c001c0e5:	0d 08 00 00 80       	or     eax,0x80000008
c001c0ea:	ef                   	out    dx,eax
c001c0eb:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c0f0:	89 ca                	mov    edx,ecx
c001c0f2:	ed                   	in     eax,dx
c001c0f3:	c1 e8 10             	shr    eax,0x10
c001c0f6:	3d ff ff 00 00       	cmp    eax,0xffff
c001c0fb:	0f 84 f9 00 00 00    	je     c001c1fa <IDE::open(int, int, void*)+0x1d8>
c001c101:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c107:	89 fa                	mov    edx,edi
c001c109:	89 f0                	mov    eax,esi
c001c10b:	ef                   	out    dx,eax
c001c10c:	b0 fe                	mov    al,0xfe
c001c10e:	89 ca                	mov    edx,ecx
c001c110:	ee                   	out    dx,al
c001c111:	89 f0                	mov    eax,esi
c001c113:	89 fa                	mov    edx,edi
c001c115:	ef                   	out    dx,eax
c001c116:	89 ca                	mov    edx,ecx
c001c118:	ed                   	in     eax,dx
c001c119:	3c fe                	cmp    al,0xfe
c001c11b:	0f 85 a9 00 00 00    	jne    c001c1ca <IDE::open(int, int, void*)+0x1a8>
c001c121:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c127:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c12e:	74 33                	je     c001c163 <IDE::open(int, int, void*)+0x141>
c001c130:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c136:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c13a:	40                   	inc    eax
c001c13b:	83 ec 0c             	sub    esp,0xc
c001c13e:	0f b6 c0             	movzx  eax,al
c001c141:	50                   	push   eax
c001c142:	55                   	push   ebp
c001c143:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c147:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c14d:	51                   	push   ecx
c001c14e:	e8 e5 37 ff ff       	call   c000f938 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c153:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c158:	83 c4 1c             	add    esp,0x1c
c001c15b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c161:	eb 0a                	jmp    c001c16d <IDE::open(int, int, void*)+0x14b>
c001c163:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c16d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c174:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c17b:	c1 e1 10             	shl    ecx,0x10
c001c17e:	c1 e0 08             	shl    eax,0x8
c001c181:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c186:	09 c1                	or     ecx,eax
c001c188:	89 fa                	mov    edx,edi
c001c18a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c191:	c1 e0 0b             	shl    eax,0xb
c001c194:	09 c1                	or     ecx,eax
c001c196:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c19c:	89 c8                	mov    eax,ecx
c001c19e:	ef                   	out    dx,eax
c001c19f:	be fc 0c 00 00       	mov    esi,0xcfc
c001c1a4:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c1aa:	89 f2                	mov    edx,esi
c001c1ac:	ee                   	out    dx,al
c001c1ad:	89 c8                	mov    eax,ecx
c001c1af:	89 fa                	mov    edx,edi
c001c1b1:	ef                   	out    dx,eax
c001c1b2:	89 f2                	mov    edx,esi
c001c1b4:	ed                   	in     eax,dx
c001c1b5:	0f b6 c0             	movzx  eax,al
c001c1b8:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c1be:	74 4a                	je     c001c20a <IDE::open(int, int, void*)+0x1e8>
c001c1c0:	83 ec 0c             	sub    esp,0xc
c001c1c3:	68 44 32 02 c0       	push   0xc0023244
c001c1c8:	eb 38                	jmp    c001c202 <IDE::open(int, int, void*)+0x1e0>
c001c1ca:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c1d3:	75 1b                	jne    c001c1f0 <IDE::open(int, int, void*)+0x1ce>
c001c1d5:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001c1d9:	3d 80 00 00 00       	cmp    eax,0x80
c001c1de:	74 07                	je     c001c1e7 <IDE::open(int, int, void*)+0x1c5>
c001c1e0:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c1e5:	75 09                	jne    c001c1f0 <IDE::open(int, int, void*)+0x1ce>
c001c1e7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c1ee:	eb 1a                	jmp    c001c20a <IDE::open(int, int, void*)+0x1e8>
c001c1f0:	83 ec 0c             	sub    esp,0xc
c001c1f3:	68 4c 32 02 c0       	push   0xc002324c
c001c1f8:	eb 08                	jmp    c001c202 <IDE::open(int, int, void*)+0x1e0>
c001c1fa:	83 ec 0c             	sub    esp,0xc
c001c1fd:	68 7d 32 02 c0       	push   0xc002327d
c001c202:	e8 18 54 ff ff       	call   c001161f <KePanic(char const*)>
c001c207:	83 c4 10             	add    esp,0x10
c001c20a:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c211:	74 1a                	je     c001c22d <IDE::open(int, int, void*)+0x20b>
c001c213:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c219:	83 e0 fc             	and    eax,0xfffffffc
c001c21c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c223:	83 c0 08             	add    eax,0x8
c001c226:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c22d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c233:	89 c2                	mov    edx,eax
c001c235:	83 e2 0f             	and    edx,0xf
c001c238:	83 fa 08             	cmp    edx,0x8
c001c23b:	75 0a                	jne    c001c247 <IDE::open(int, int, void*)+0x225>
c001c23d:	83 e8 02             	sub    eax,0x2
c001c240:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c247:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c24d:	89 c2                	mov    edx,eax
c001c24f:	83 e2 0f             	and    edx,0xf
c001c252:	83 fa 08             	cmp    edx,0x8
c001c255:	75 0a                	jne    c001c261 <IDE::open(int, int, void*)+0x23f>
c001c257:	83 e8 02             	sub    eax,0x2
c001c25a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c261:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c268:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c26f:	89 d0                	mov    eax,edx
c001c271:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c274:	8d 7a 01             	lea    edi,[edx+0x1]
c001c277:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c27b:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c27f:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c283:	83 e1 3f             	and    ecx,0x3f
c001c286:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c28a:	89 f9                	mov    ecx,edi
c001c28c:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c293:	0f b6 c9             	movzx  ecx,cl
c001c296:	8d 78 02             	lea    edi,[eax+0x2]
c001c299:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c29c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c2a0:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c2a4:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c2a8:	83 e2 3f             	and    edx,0x3f
c001c2ab:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c2af:	89 f9                	mov    ecx,edi
c001c2b1:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c2b7:	0f b6 d1             	movzx  edx,cl
c001c2ba:	8d 78 03             	lea    edi,[eax+0x3]
c001c2bd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c2c0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c2c4:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c2c8:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c2cc:	83 e1 3f             	and    ecx,0x3f
c001c2cf:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c2d3:	89 f9                	mov    ecx,edi
c001c2d5:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c2db:	0f b6 c9             	movzx  ecx,cl
c001c2de:	8d 78 04             	lea    edi,[eax+0x4]
c001c2e1:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c2e4:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c2e8:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c2ec:	89 fa                	mov    edx,edi
c001c2ee:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c2f4:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c2f8:	83 e2 3f             	and    edx,0x3f
c001c2fb:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c2ff:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c306:	66 85 f6             	test   si,si
c001c309:	74 65                	je     c001c370 <IDE::open(int, int, void*)+0x34e>
c001c30b:	89 f9                	mov    ecx,edi
c001c30d:	83 c0 05             	add    eax,0x5
c001c310:	0f b6 d1             	movzx  edx,cl
c001c313:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c316:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c31a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c31e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c324:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c328:	83 e0 3f             	and    eax,0x3f
c001c32b:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c32f:	eb 3f                	jmp    c001c370 <IDE::open(int, int, void*)+0x34e>
c001c331:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c337:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c33e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c345:	05 06 02 00 00       	add    eax,0x206
c001c34a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c351:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c358:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c35f:	05 06 02 00 00       	add    eax,0x206
c001c364:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c36b:	e9 bd fe ff ff       	jmp    c001c22d <IDE::open(int, int, void*)+0x20b>
c001c370:	50                   	push   eax
c001c371:	50                   	push   eax
c001c372:	6a 00                	push   0x0
c001c374:	53                   	push   ebx
c001c375:	e8 30 fa ff ff       	call   c001bdaa <IDE::prepareInterrupt(unsigned char)>
c001c37a:	5a                   	pop    edx
c001c37b:	59                   	pop    ecx
c001c37c:	6a 01                	push   0x1
c001c37e:	53                   	push   ebx
c001c37f:	e8 26 fa ff ff       	call   c001bdaa <IDE::prepareInterrupt(unsigned char)>
c001c384:	83 c4 0c             	add    esp,0xc
c001c387:	6a 00                	push   0x0
c001c389:	6a 00                	push   0x0
c001c38b:	53                   	push   ebx
c001c38c:	e8 47 fc ff ff       	call   c001bfd8 <IDE::enableIRQs(unsigned char, bool)>
c001c391:	83 c4 0c             	add    esp,0xc
c001c394:	6a 00                	push   0x0
c001c396:	6a 01                	push   0x1
c001c398:	53                   	push   ebx
c001c399:	e8 3a fc ff ff       	call   c001bfd8 <IDE::enableIRQs(unsigned char, bool)>
c001c39e:	83 c4 10             	add    esp,0x10
c001c3a1:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c3a8:	74 34                	je     c001c3de <IDE::open(int, int, void*)+0x3bc>
c001c3aa:	83 ec 0c             	sub    esp,0xc
c001c3ad:	53                   	push   ebx
c001c3ae:	6a 01                	push   0x1
c001c3b0:	68 a0 bf 01 c0       	push   0xc001bfa0
c001c3b5:	6a 0e                	push   0xe
c001c3b7:	53                   	push   ebx
c001c3b8:	e8 b5 05 ff ff       	call   c000c972 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c3bd:	83 c4 14             	add    esp,0x14
c001c3c0:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c3c6:	53                   	push   ebx
c001c3c7:	6a 01                	push   0x1
c001c3c9:	68 bc bf 01 c0       	push   0xc001bfbc
c001c3ce:	6a 0f                	push   0xf
c001c3d0:	53                   	push   ebx
c001c3d1:	e8 9c 05 ff ff       	call   c000c972 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c3d6:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c3dc:	eb 38                	jmp    c001c416 <IDE::open(int, int, void*)+0x3f4>
c001c3de:	83 ec 0c             	sub    esp,0xc
c001c3e1:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c3eb:	53                   	push   ebx
c001c3ec:	6a 00                	push   0x0
c001c3ee:	68 a0 bf 01 c0       	push   0xc001bfa0
c001c3f3:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c3f9:	53                   	push   ebx
c001c3fa:	e8 73 05 ff ff       	call   c000c972 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c3ff:	83 c4 14             	add    esp,0x14
c001c402:	53                   	push   ebx
c001c403:	6a 00                	push   0x0
c001c405:	68 bc bf 01 c0       	push   0xc001bfbc
c001c40a:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c410:	53                   	push   ebx
c001c411:	e8 5c 05 ff ff       	call   c000c972 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c416:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c418:	83 c4 20             	add    esp,0x20
c001c41b:	83 ec 0c             	sub    esp,0xc
c001c41e:	53                   	push   ebx
c001c41f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c422:	83 c4 0c             	add    esp,0xc
c001c425:	6a 07                	push   0x7
c001c427:	6a 00                	push   0x0
c001c429:	53                   	push   ebx
c001c42a:	e8 61 fa ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c42f:	83 c4 0c             	add    esp,0xc
c001c432:	6a 07                	push   0x7
c001c434:	6a 01                	push   0x1
c001c436:	53                   	push   ebx
c001c437:	e8 54 fa ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c43c:	83 c4 0c             	add    esp,0xc
c001c43f:	6a 01                	push   0x1
c001c441:	6a 00                	push   0x0
c001c443:	53                   	push   ebx
c001c444:	e8 8f fb ff ff       	call   c001bfd8 <IDE::enableIRQs(unsigned char, bool)>
c001c449:	83 c4 0c             	add    esp,0xc
c001c44c:	6a 01                	push   0x1
c001c44e:	6a 01                	push   0x1
c001c450:	53                   	push   ebx
c001c451:	e8 82 fb ff ff       	call   c001bfd8 <IDE::enableIRQs(unsigned char, bool)>
c001c456:	83 c4 2c             	add    esp,0x2c
c001c459:	31 c0                	xor    eax,eax
c001c45b:	5b                   	pop    ebx
c001c45c:	5e                   	pop    esi
c001c45d:	5f                   	pop    edi
c001c45e:	5d                   	pop    ebp
c001c45f:	c3                   	ret    

c001c460 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c460:	55                   	push   ebp
c001c461:	57                   	push   edi
c001c462:	56                   	push   esi
c001c463:	53                   	push   ebx
c001c464:	83 ec 1c             	sub    esp,0x1c
c001c467:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c46b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c46f:	8d 42 f8             	lea    eax,[edx-0x8]
c001c472:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c476:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c47a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c47e:	3c 03                	cmp    al,0x3
c001c480:	77 5a                	ja     c001c4dc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c482:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c486:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c48a:	0f b6 db             	movzx  ebx,bl
c001c48d:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c490:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c495:	0c 80                	or     al,0x80
c001c497:	50                   	push   eax
c001c498:	6a 0c                	push   0xc
c001c49a:	53                   	push   ebx
c001c49b:	56                   	push   esi
c001c49c:	e8 2f f9 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4a1:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c4a6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c4aa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c4ae:	0f b6 d2             	movzx  edx,dl
c001c4b1:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c4b5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c4b7:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c4bc:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c4c0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c4c4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c4c8:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c4d0:	83 c4 2c             	add    esp,0x2c
c001c4d3:	5b                   	pop    ebx
c001c4d4:	5e                   	pop    esi
c001c4d5:	5f                   	pop    edi
c001c4d6:	5d                   	pop    ebp
c001c4d7:	e9 f4 f8 ff ff       	jmp    c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4dc:	0f b6 c2             	movzx  eax,dl
c001c4df:	83 f8 07             	cmp    eax,0x7
c001c4e2:	77 12                	ja     c001c4f6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c4e4:	0f b6 c2             	movzx  eax,dl
c001c4e7:	0f b6 db             	movzx  ebx,bl
c001c4ea:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c4f2:	01 c2                	add    edx,eax
c001c4f4:	eb 2f                	jmp    c001c525 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c4f6:	83 f8 0d             	cmp    eax,0xd
c001c4f9:	77 13                	ja     c001c50e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c4fb:	0f b6 db             	movzx  ebx,bl
c001c4fe:	0f b6 d2             	movzx  edx,dl
c001c501:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c508:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c50c:	eb 17                	jmp    c001c525 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c50e:	83 f8 15             	cmp    eax,0x15
c001c511:	77 14                	ja     c001c527 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c513:	0f b6 db             	movzx  ebx,bl
c001c516:	0f b6 d2             	movzx  edx,dl
c001c519:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c521:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c525:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c527:	83 c4 1c             	add    esp,0x1c
c001c52a:	5b                   	pop    ebx
c001c52b:	5e                   	pop    esi
c001c52c:	5f                   	pop    edi
c001c52d:	5d                   	pop    ebp
c001c52e:	c3                   	ret    
c001c52f:	90                   	nop

c001c530 <IDE::detect()>:
c001c530:	55                   	push   ebp
c001c531:	57                   	push   edi
c001c532:	56                   	push   esi
c001c533:	53                   	push   ebx
c001c534:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c53a:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c541:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c548:	0f 85 a4 02 00 00    	jne    c001c7f2 <IDE::detect()+0x2c2>
c001c54e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c555:	31 f6                	xor    esi,esi
c001c557:	31 ed                	xor    ebp,ebp
c001c559:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c561:	89 e8                	mov    eax,ebp
c001c563:	c1 e0 06             	shl    eax,0x6
c001c566:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c56e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c572:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c576:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c57a:	c1 e0 04             	shl    eax,0x4
c001c57d:	83 c8 a0             	or     eax,0xffffffa0
c001c580:	0f b6 c0             	movzx  eax,al
c001c583:	50                   	push   eax
c001c584:	6a 06                	push   0x6
c001c586:	56                   	push   esi
c001c587:	53                   	push   ebx
c001c588:	e8 43 f8 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c58d:	83 c4 0c             	add    esp,0xc
c001c590:	6a 0c                	push   0xc
c001c592:	56                   	push   esi
c001c593:	53                   	push   ebx
c001c594:	e8 f7 f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c599:	83 c4 0c             	add    esp,0xc
c001c59c:	6a 0c                	push   0xc
c001c59e:	56                   	push   esi
c001c59f:	53                   	push   ebx
c001c5a0:	e8 eb f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c5a5:	83 c4 0c             	add    esp,0xc
c001c5a8:	6a 0c                	push   0xc
c001c5aa:	56                   	push   esi
c001c5ab:	53                   	push   ebx
c001c5ac:	e8 df f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c5b1:	83 c4 0c             	add    esp,0xc
c001c5b4:	6a 0c                	push   0xc
c001c5b6:	56                   	push   esi
c001c5b7:	53                   	push   ebx
c001c5b8:	e8 d3 f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c5bd:	68 ec 00 00 00       	push   0xec
c001c5c2:	6a 07                	push   0x7
c001c5c4:	56                   	push   esi
c001c5c5:	53                   	push   ebx
c001c5c6:	e8 05 f8 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5cb:	83 c4 1c             	add    esp,0x1c
c001c5ce:	6a 0c                	push   0xc
c001c5d0:	56                   	push   esi
c001c5d1:	53                   	push   ebx
c001c5d2:	e8 b9 f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c5d7:	83 c4 0c             	add    esp,0xc
c001c5da:	6a 0c                	push   0xc
c001c5dc:	56                   	push   esi
c001c5dd:	53                   	push   ebx
c001c5de:	e8 ad f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c5e3:	83 c4 0c             	add    esp,0xc
c001c5e6:	6a 0c                	push   0xc
c001c5e8:	56                   	push   esi
c001c5e9:	53                   	push   ebx
c001c5ea:	e8 a1 f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c5ef:	83 c4 0c             	add    esp,0xc
c001c5f2:	6a 0c                	push   0xc
c001c5f4:	56                   	push   esi
c001c5f5:	53                   	push   ebx
c001c5f6:	e8 95 f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c5fb:	83 c4 0c             	add    esp,0xc
c001c5fe:	6a 0c                	push   0xc
c001c600:	56                   	push   esi
c001c601:	53                   	push   ebx
c001c602:	e8 89 f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c607:	83 c4 10             	add    esp,0x10
c001c60a:	84 c0                	test   al,al
c001c60c:	0f 84 60 01 00 00    	je     c001c772 <IDE::detect()+0x242>
c001c612:	31 ff                	xor    edi,edi
c001c614:	50                   	push   eax
c001c615:	6a 0c                	push   0xc
c001c617:	56                   	push   esi
c001c618:	53                   	push   ebx
c001c619:	e8 72 f8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c61e:	83 c4 10             	add    esp,0x10
c001c621:	a8 01                	test   al,0x1
c001c623:	0f 85 6a 01 00 00    	jne    c001c793 <IDE::detect()+0x263>
c001c629:	a8 80                	test   al,0x80
c001c62b:	75 04                	jne    c001c631 <IDE::detect()+0x101>
c001c62d:	a8 08                	test   al,0x8
c001c62f:	75 23                	jne    c001c654 <IDE::detect()+0x124>
c001c631:	47                   	inc    edi
c001c632:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c638:	7e da                	jle    c001c614 <IDE::detect()+0xe4>
c001c63a:	83 ec 0c             	sub    esp,0xc
c001c63d:	6a 32                	push   0x32
c001c63f:	e8 f0 9d ff ff       	call   c0016434 <milliTenthSleep(unsigned int)>
c001c644:	83 c4 10             	add    esp,0x10
c001c647:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c64d:	75 c5                	jne    c001c614 <IDE::detect()+0xe4>
c001c64f:	e9 3f 01 00 00       	jmp    c001c793 <IDE::detect()+0x263>
c001c654:	31 c9                	xor    ecx,ecx
c001c656:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c65a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c65e:	83 ec 0c             	sub    esp,0xc
c001c661:	68 80 00 00 00       	push   0x80
c001c666:	57                   	push   edi
c001c667:	6a 00                	push   0x0
c001c669:	56                   	push   esi
c001c66a:	53                   	push   ebx
c001c66b:	e8 f0 fd ff ff       	call   c001c460 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c670:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c675:	89 e8                	mov    eax,ebp
c001c677:	89 d1                	mov    ecx,edx
c001c679:	c1 e0 06             	shl    eax,0x6
c001c67c:	01 d8                	add    eax,ebx
c001c67e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c685:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c68c:	89 f2                	mov    edx,esi
c001c68e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c694:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c698:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c69e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c6a2:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c6a9:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c6b1:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c6b8:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c6c0:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c6c6:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c6cd:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c6d3:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c6d7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c6db:	83 c4 20             	add    esp,0x20
c001c6de:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c6e1:	83 c0 02             	add    eax,0x2
c001c6e4:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c6ea:	83 c7 02             	add    edi,0x2
c001c6ed:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c6f0:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c6f6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c6fa:	75 e2                	jne    c001c6de <IDE::detect()+0x1ae>
c001c6fc:	89 e8                	mov    eax,ebp
c001c6fe:	c1 e0 06             	shl    eax,0x6
c001c701:	01 d8                	add    eax,ebx
c001c703:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c70a:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c711:	c1 ea 09             	shr    edx,0x9
c001c714:	83 e2 01             	and    edx,0x1
c001c717:	80 e1 01             	and    cl,0x1
c001c71a:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c720:	75 22                	jne    c001c744 <IDE::detect()+0x214>
c001c722:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c729:	74 46                	je     c001c771 <IDE::detect()+0x241>
c001c72b:	83 ec 0c             	sub    esp,0xc
c001c72e:	68 7c 01 00 00       	push   0x17c
c001c733:	e8 7e b3 fe ff       	call   c0007ab6 <malloc>
c001c738:	89 c7                	mov    edi,eax
c001c73a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c73d:	e8 1a 05 00 00       	call   c001cc5c <ATA::ATA()>
c001c742:	eb 17                	jmp    c001c75b <IDE::detect()+0x22b>
c001c744:	83 ec 0c             	sub    esp,0xc
c001c747:	68 84 01 00 00       	push   0x184
c001c74c:	e8 65 b3 fe ff       	call   c0007ab6 <malloc>
c001c751:	89 c7                	mov    edi,eax
c001c753:	89 04 24             	mov    DWORD PTR [esp],eax
c001c756:	e8 45 0e 00 00       	call   c001d5a0 <ATAPI::ATAPI()>
c001c75b:	5a                   	pop    edx
c001c75c:	59                   	pop    ecx
c001c75d:	57                   	push   edi
c001c75e:	53                   	push   ebx
c001c75f:	e8 62 02 ff ff       	call   c000c9c6 <Device::addChild(Device*)>
c001c764:	8b 07                	mov    eax,DWORD PTR [edi]
c001c766:	53                   	push   ebx
c001c767:	55                   	push   ebp
c001c768:	6a 00                	push   0x0
c001c76a:	57                   	push   edi
c001c76b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c76e:	83 c4 20             	add    esp,0x20
c001c771:	45                   	inc    ebp
c001c772:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c777:	74 0d                	je     c001c786 <IDE::detect()+0x256>
c001c779:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c781:	e9 db fd ff ff       	jmp    c001c561 <IDE::detect()+0x31>
c001c786:	4e                   	dec    esi
c001c787:	74 69                	je     c001c7f2 <IDE::detect()+0x2c2>
c001c789:	be 01 00 00 00       	mov    esi,0x1
c001c78e:	e9 c6 fd ff ff       	jmp    c001c559 <IDE::detect()+0x29>
c001c793:	50                   	push   eax
c001c794:	6a 04                	push   0x4
c001c796:	56                   	push   esi
c001c797:	53                   	push   ebx
c001c798:	e8 f3 f6 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c79d:	83 c4 0c             	add    esp,0xc
c001c7a0:	89 c7                	mov    edi,eax
c001c7a2:	6a 05                	push   0x5
c001c7a4:	56                   	push   esi
c001c7a5:	53                   	push   ebx
c001c7a6:	e8 e5 f6 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c7ab:	83 c4 10             	add    esp,0x10
c001c7ae:	89 f9                	mov    ecx,edi
c001c7b0:	0f b6 c0             	movzx  eax,al
c001c7b3:	0f b6 f9             	movzx  edi,cl
c001c7b6:	83 ff 14             	cmp    edi,0x14
c001c7b9:	75 07                	jne    c001c7c2 <IDE::detect()+0x292>
c001c7bb:	3d eb 00 00 00       	cmp    eax,0xeb
c001c7c0:	eb 0a                	jmp    c001c7cc <IDE::detect()+0x29c>
c001c7c2:	3d 96 00 00 00       	cmp    eax,0x96
c001c7c7:	75 a9                	jne    c001c772 <IDE::detect()+0x242>
c001c7c9:	83 ff 69             	cmp    edi,0x69
c001c7cc:	75 a4                	jne    c001c772 <IDE::detect()+0x242>
c001c7ce:	68 a1 00 00 00       	push   0xa1
c001c7d3:	6a 07                	push   0x7
c001c7d5:	56                   	push   esi
c001c7d6:	53                   	push   ebx
c001c7d7:	e8 f4 f5 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7dc:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c7e3:	e8 4c 9c ff ff       	call   c0016434 <milliTenthSleep(unsigned int)>
c001c7e8:	83 c4 10             	add    esp,0x10
c001c7eb:	b1 01                	mov    cl,0x1
c001c7ed:	e9 64 fe ff ff       	jmp    c001c656 <IDE::detect()+0x126>
c001c7f2:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c7f8:	5b                   	pop    ebx
c001c7f9:	5e                   	pop    esi
c001c7fa:	5f                   	pop    edi
c001c7fb:	5d                   	pop    ebp
c001c7fc:	c3                   	ret    
c001c7fd:	90                   	nop

c001c7fe <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c7fe:	55                   	push   ebp
c001c7ff:	57                   	push   edi
c001c800:	56                   	push   esi
c001c801:	53                   	push   ebx
c001c802:	83 ec 1c             	sub    esp,0x1c
c001c805:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c809:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c80d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c811:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c815:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c819:	88 c3                	mov    bl,al
c001c81b:	25 ff 00 00 00       	and    eax,0xff
c001c820:	0f 84 88 00 00 00    	je     c001c8ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c826:	83 ec 0c             	sub    esp,0xc
c001c829:	89 c7                	mov    edi,eax
c001c82b:	68 a7 32 02 c0       	push   0xc00232a7
c001c830:	e8 10 e1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c835:	83 c4 10             	add    esp,0x10
c001c838:	83 ff 01             	cmp    edi,0x1
c001c83b:	74 6b                	je     c001c8a8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c83d:	83 ff 02             	cmp    edi,0x2
c001c840:	75 58                	jne    c001c89a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c842:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c847:	01 ff                	add    edi,edi
c001c849:	50                   	push   eax
c001c84a:	09 fe                	or     esi,edi
c001c84c:	6a 01                	push   0x1
c001c84e:	89 f0                	mov    eax,esi
c001c850:	0f b6 f0             	movzx  esi,al
c001c853:	c1 e6 06             	shl    esi,0x6
c001c856:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c85e:	50                   	push   eax
c001c85f:	55                   	push   ebp
c001c860:	e8 2b f6 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c865:	83 c4 10             	add    esp,0x10
c001c868:	a8 01                	test   al,0x1
c001c86a:	74 02                	je     c001c86e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c86c:	b3 07                	mov    bl,0x7
c001c86e:	a8 02                	test   al,0x2
c001c870:	74 02                	je     c001c874 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c872:	b3 03                	mov    bl,0x3
c001c874:	a8 04                	test   al,0x4
c001c876:	74 02                	je     c001c87a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c878:	b3 14                	mov    bl,0x14
c001c87a:	a8 08                	test   al,0x8
c001c87c:	74 02                	je     c001c880 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c87e:	b3 03                	mov    bl,0x3
c001c880:	a8 10                	test   al,0x10
c001c882:	74 02                	je     c001c886 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c884:	b3 15                	mov    bl,0x15
c001c886:	a8 20                	test   al,0x20
c001c888:	74 02                	je     c001c88c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c88a:	b3 03                	mov    bl,0x3
c001c88c:	a8 40                	test   al,0x40
c001c88e:	74 02                	je     c001c892 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c890:	b3 16                	mov    bl,0x16
c001c892:	a8 80                	test   al,0x80
c001c894:	74 18                	je     c001c8ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c896:	b3 0d                	mov    bl,0xd
c001c898:	eb 14                	jmp    c001c8ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c89a:	83 ff 03             	cmp    edi,0x3
c001c89d:	74 0d                	je     c001c8ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c89f:	83 ff 04             	cmp    edi,0x4
c001c8a2:	75 0a                	jne    c001c8ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8a4:	b3 08                	mov    bl,0x8
c001c8a6:	eb 06                	jmp    c001c8ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8a8:	b3 13                	mov    bl,0x13
c001c8aa:	eb 02                	jmp    c001c8ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8ac:	b3 17                	mov    bl,0x17
c001c8ae:	83 c4 1c             	add    esp,0x1c
c001c8b1:	88 d8                	mov    al,bl
c001c8b3:	5b                   	pop    ebx
c001c8b4:	5e                   	pop    esi
c001c8b5:	5f                   	pop    edi
c001c8b6:	5d                   	pop    ebp
c001c8b7:	c3                   	ret    

c001c8b8 <IDE::polling(unsigned char, unsigned int)>:
c001c8b8:	57                   	push   edi
c001c8b9:	56                   	push   esi
c001c8ba:	53                   	push   ebx
c001c8bb:	bb 04 00 00 00       	mov    ebx,0x4
c001c8c0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c8c4:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c8c9:	52                   	push   edx
c001c8ca:	6a 0c                	push   0xc
c001c8cc:	56                   	push   esi
c001c8cd:	57                   	push   edi
c001c8ce:	e8 bd f5 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c8d3:	83 c4 10             	add    esp,0x10
c001c8d6:	4b                   	dec    ebx
c001c8d7:	75 f0                	jne    c001c8c9 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c8d9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c8de:	50                   	push   eax
c001c8df:	6a 0c                	push   0xc
c001c8e1:	56                   	push   esi
c001c8e2:	57                   	push   edi
c001c8e3:	e8 a8 f5 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001c8e8:	83 c4 10             	add    esp,0x10
c001c8eb:	a8 01                	test   al,0x1
c001c8ed:	75 17                	jne    c001c906 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c8ef:	a8 20                	test   al,0x20
c001c8f1:	75 0f                	jne    c001c902 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c8f3:	4b                   	dec    ebx
c001c8f4:	74 10                	je     c001c906 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c8f6:	a8 80                	test   al,0x80
c001c8f8:	75 e4                	jne    c001c8de <IDE::polling(unsigned char, unsigned int)+0x26>
c001c8fa:	a8 08                	test   al,0x8
c001c8fc:	74 e0                	je     c001c8de <IDE::polling(unsigned char, unsigned int)+0x26>
c001c8fe:	31 c0                	xor    eax,eax
c001c900:	eb 06                	jmp    c001c908 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c902:	b0 01                	mov    al,0x1
c001c904:	eb 02                	jmp    c001c908 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c906:	b0 02                	mov    al,0x2
c001c908:	5b                   	pop    ebx
c001c909:	5e                   	pop    esi
c001c90a:	5f                   	pop    edi
c001c90b:	c3                   	ret    

c001c90c <SATABus::close(int, int, void*)>:
c001c90c:	31 c0                	xor    eax,eax
c001c90e:	c3                   	ret    
c001c90f:	90                   	nop

c001c910 <SATABus::detect()>:
c001c910:	c3                   	ret    
c001c911:	90                   	nop

c001c912 <SATABus::SATABus()>:
c001c912:	83 ec 0c             	sub    esp,0xc
c001c915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c919:	83 ec 08             	sub    esp,0x8
c001c91c:	68 e0 32 02 c0       	push   0xc00232e0
c001c921:	50                   	push   eax
c001c922:	e8 e1 03 ff ff       	call   c000cd08 <HardDiskController::HardDiskController(char const*)>
c001c927:	83 c4 10             	add    esp,0x10
c001c92a:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c001c92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c933:	89 10                	mov    DWORD PTR [eax],edx
c001c935:	83 ec 0c             	sub    esp,0xc
c001c938:	6a 50                	push   0x50
c001c93a:	e8 4f b5 fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c93f:	83 c4 10             	add    esp,0x10
c001c942:	89 c2                	mov    edx,eax
c001c944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c948:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c94e:	83 ec 0c             	sub    esp,0xc
c001c951:	6a 50                	push   0x50
c001c953:	e8 b5 cc fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c958:	83 c4 10             	add    esp,0x10
c001c95b:	89 c2                	mov    edx,eax
c001c95d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c961:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c967:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c96c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c970:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c976:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c97a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c980:	83 ec 0c             	sub    esp,0xc
c001c983:	6a 03                	push   0x3
c001c985:	6a 50                	push   0x50
c001c987:	51                   	push   ecx
c001c988:	52                   	push   edx
c001c989:	50                   	push   eax
c001c98a:	e8 8b d5 fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c98f:	83 c4 20             	add    esp,0x20
c001c992:	90                   	nop
c001c993:	83 c4 0c             	add    esp,0xc
c001c996:	c3                   	ret    
c001c997:	90                   	nop

c001c998 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c998:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c99c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c99f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c9a2:	09 c2                	or     edx,eax
c001c9a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c9ae:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c9b0:	31 c0                	xor    eax,eax
c001c9b2:	c1 e9 08             	shr    ecx,0x8
c001c9b5:	83 e1 0f             	and    ecx,0xf
c001c9b8:	39 c8                	cmp    eax,ecx
c001c9ba:	74 0a                	je     c001c9c6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c9bc:	f6 c2 01             	test   dl,0x1
c001c9bf:	74 08                	je     c001c9c9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c9c1:	d1 ea                	shr    edx,1
c001c9c3:	40                   	inc    eax
c001c9c4:	eb f2                	jmp    c001c9b8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c9c6:	83 c8 ff             	or     eax,0xffffffff
c001c9c9:	c3                   	ret    

c001c9ca <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c9ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c9ce:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c9d1:	89 c2                	mov    edx,eax
c001c9d3:	c1 ea 08             	shr    edx,0x8
c001c9d6:	83 e2 0f             	and    edx,0xf
c001c9d9:	4a                   	dec    edx
c001c9da:	75 32                	jne    c001ca0e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c9dc:	83 e0 0f             	and    eax,0xf
c001c9df:	83 f8 03             	cmp    eax,0x3
c001c9e2:	75 2a                	jne    c001ca0e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c9e4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c9e7:	b8 02 00 00 00       	mov    eax,0x2
c001c9ec:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c9f2:	74 1c                	je     c001ca10 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c9f4:	b8 04 00 00 00       	mov    eax,0x4
c001c9f9:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c9ff:	74 0f                	je     c001ca10 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca01:	31 c0                	xor    eax,eax
c001ca03:	83 fa 03             	cmp    edx,0x3
c001ca06:	0f 94 c0             	sete   al
c001ca09:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001ca0d:	c3                   	ret    
c001ca0e:	31 c0                	xor    eax,eax
c001ca10:	c3                   	ret    
c001ca11:	90                   	nop

c001ca12 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca16:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca19:	0f ba e2 0f          	bt     edx,0xf
c001ca1d:	72 f7                	jb     c001ca16 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001ca1f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca22:	83 ca 10             	or     edx,0x10
c001ca25:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca28:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca2b:	83 ca 01             	or     edx,0x1
c001ca2e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca31:	c3                   	ret    

c001ca32 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca36:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca39:	83 e2 fe             	and    edx,0xfffffffe
c001ca3c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca3f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca42:	83 e2 ef             	and    edx,0xffffffef
c001ca45:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca48:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca4b:	0f ba e2 0e          	bt     edx,0xe
c001ca4f:	72 f7                	jb     c001ca48 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ca51:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca54:	0f ba e2 0f          	bt     edx,0xf
c001ca58:	72 ee                	jb     c001ca48 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ca5a:	c3                   	ret    
c001ca5b:	90                   	nop

c001ca5c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001ca5c:	55                   	push   ebp
c001ca5d:	57                   	push   edi
c001ca5e:	56                   	push   esi
c001ca5f:	53                   	push   ebx
c001ca60:	83 ec 1c             	sub    esp,0x1c
c001ca63:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ca67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ca6b:	53                   	push   ebx
c001ca6c:	56                   	push   esi
c001ca6d:	e8 c0 ff ff ff       	call   c001ca32 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ca72:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ca76:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ca7c:	83 ec 0c             	sub    esp,0xc
c001ca7f:	c1 e5 0a             	shl    ebp,0xa
c001ca82:	01 e8                	add    eax,ebp
c001ca84:	89 03                	mov    DWORD PTR [ebx],eax
c001ca86:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca88:	68 00 04 00 00       	push   0x400
c001ca8d:	6a 00                	push   0x0
c001ca8f:	50                   	push   eax
c001ca90:	e8 5b 3a fe ff       	call   c00004f0 <memset>
c001ca95:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001ca9b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ca9f:	01 e8                	add    eax,ebp
c001caa1:	83 c4 1c             	add    esp,0x1c
c001caa4:	89 03                	mov    DWORD PTR [ebx],eax
c001caa6:	c1 e2 08             	shl    edx,0x8
c001caa9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cab0:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001cab6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001cabc:	01 f8                	add    eax,edi
c001cabe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cac1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cac4:	68 00 01 00 00       	push   0x100
c001cac9:	6a 00                	push   0x0
c001cacb:	50                   	push   eax
c001cacc:	e8 1f 3a fe ff       	call   c00004f0 <memset>
c001cad1:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001cad7:	01 fa                	add    edx,edi
c001cad9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cadd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001cae0:	c1 e7 0d             	shl    edi,0xd
c001cae3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001caea:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001caf0:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001caf6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cafa:	31 ff                	xor    edi,edi
c001cafc:	83 c4 10             	add    esp,0x10
c001caff:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001cb05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb09:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001cb0f:	83 c5 20             	add    ebp,0x20
c001cb12:	01 f8                	add    eax,edi
c001cb14:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cb17:	52                   	push   edx
c001cb18:	68 00 01 00 00       	push   0x100
c001cb1d:	6a 00                	push   0x0
c001cb1f:	50                   	push   eax
c001cb20:	e8 cb 39 fe ff       	call   c00004f0 <memset>
c001cb25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb29:	83 c4 10             	add    esp,0x10
c001cb2c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001cb32:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001cb39:	01 f8                	add    eax,edi
c001cb3b:	81 c7 00 01 00 00    	add    edi,0x100
c001cb41:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cb44:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001cb4a:	75 b3                	jne    c001caff <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001cb4c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cb53:	50                   	push   eax
c001cb54:	50                   	push   eax
c001cb55:	53                   	push   ebx
c001cb56:	56                   	push   esi
c001cb57:	e8 b6 fe ff ff       	call   c001ca12 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cb5c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cb63:	83 c4 2c             	add    esp,0x2c
c001cb66:	5b                   	pop    ebx
c001cb67:	5e                   	pop    esi
c001cb68:	5f                   	pop    edi
c001cb69:	5d                   	pop    ebp
c001cb6a:	c3                   	ret    
c001cb6b:	90                   	nop

c001cb6c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cb6c:	55                   	push   ebp
c001cb6d:	57                   	push   edi
c001cb6e:	56                   	push   esi
c001cb6f:	53                   	push   ebx
c001cb70:	31 db                	xor    ebx,ebx
c001cb72:	83 ec 0c             	sub    esp,0xc
c001cb75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb79:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cb7d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cb80:	f7 c7 01 00 00 00    	test   edi,0x1
c001cb86:	74 7a                	je     c001cc02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb88:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cb8c:	89 d8                	mov    eax,ebx
c001cb8e:	c1 e0 07             	shl    eax,0x7
c001cb91:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cb98:	55                   	push   ebp
c001cb99:	56                   	push   esi
c001cb9a:	e8 2b fe ff ff       	call   c001c9ca <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cb9f:	5a                   	pop    edx
c001cba0:	83 f8 01             	cmp    eax,0x1
c001cba3:	59                   	pop    ecx
c001cba4:	75 21                	jne    c001cbc7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cba6:	50                   	push   eax
c001cba7:	53                   	push   ebx
c001cba8:	55                   	push   ebp
c001cba9:	56                   	push   esi
c001cbaa:	e8 ad fe ff ff       	call   c001ca5c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cbaf:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cbb6:	e8 fb ae fe ff       	call   c0007ab6 <malloc>
c001cbbb:	89 c5                	mov    ebp,eax
c001cbbd:	89 04 24             	mov    DWORD PTR [esp],eax
c001cbc0:	e8 99 10 00 00       	call   c001dc5e <SATA::SATA()>
c001cbc5:	eb 24                	jmp    c001cbeb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cbc7:	83 f8 04             	cmp    eax,0x4
c001cbca:	75 36                	jne    c001cc02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cbcc:	51                   	push   ecx
c001cbcd:	53                   	push   ebx
c001cbce:	55                   	push   ebp
c001cbcf:	56                   	push   esi
c001cbd0:	e8 87 fe ff ff       	call   c001ca5c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cbd5:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cbdc:	e8 d5 ae fe ff       	call   c0007ab6 <malloc>
c001cbe1:	89 c5                	mov    ebp,eax
c001cbe3:	89 04 24             	mov    DWORD PTR [esp],eax
c001cbe6:	e8 d5 17 00 00       	call   c001e3c0 <SATAPI::SATAPI()>
c001cbeb:	58                   	pop    eax
c001cbec:	5a                   	pop    edx
c001cbed:	55                   	push   ebp
c001cbee:	56                   	push   esi
c001cbef:	e8 d2 fd fe ff       	call   c000c9c6 <Device::addChild(Device*)>
c001cbf4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cbf7:	56                   	push   esi
c001cbf8:	6a 00                	push   0x0
c001cbfa:	53                   	push   ebx
c001cbfb:	55                   	push   ebp
c001cbfc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cbff:	83 c4 20             	add    esp,0x20
c001cc02:	d1 ef                	shr    edi,1
c001cc04:	43                   	inc    ebx
c001cc05:	83 fb 20             	cmp    ebx,0x20
c001cc08:	0f 85 72 ff ff ff    	jne    c001cb80 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cc0e:	83 c4 0c             	add    esp,0xc
c001cc11:	5b                   	pop    ebx
c001cc12:	5e                   	pop    esi
c001cc13:	5f                   	pop    edi
c001cc14:	5d                   	pop    ebp
c001cc15:	c3                   	ret    

c001cc16 <SATABus::open(int, int, void*)>:
c001cc16:	83 ec 14             	sub    esp,0x14
c001cc19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc1d:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cc23:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cc29:	52                   	push   edx
c001cc2a:	50                   	push   eax
c001cc2b:	e8 3c ff ff ff       	call   c001cb6c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cc30:	31 c0                	xor    eax,eax
c001cc32:	83 c4 1c             	add    esp,0x1c
c001cc35:	c3                   	ret    

c001cc36 <ATA::close(int, int, void*)>:
c001cc36:	83 ec 0c             	sub    esp,0xc
c001cc39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc3d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cc43:	85 c0                	test   eax,eax
c001cc45:	74 0c                	je     c001cc53 <ATA::close(int, int, void*)+0x1d>
c001cc47:	83 ec 0c             	sub    esp,0xc
c001cc4a:	8b 10                	mov    edx,DWORD PTR [eax]
c001cc4c:	50                   	push   eax
c001cc4d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cc50:	83 c4 10             	add    esp,0x10
c001cc53:	31 c0                	xor    eax,eax
c001cc55:	83 c4 0c             	add    esp,0xc
c001cc58:	c3                   	ret    
c001cc59:	90                   	nop

c001cc5a <ATA::powerSaving(PowerSavingLevel)>:
c001cc5a:	c3                   	ret    
c001cc5b:	90                   	nop

c001cc5c <ATA::ATA()>:
c001cc5c:	83 ec 0c             	sub    esp,0xc
c001cc5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc63:	83 ec 04             	sub    esp,0x4
c001cc66:	68 00 02 00 00       	push   0x200
c001cc6b:	68 d9 33 02 c0       	push   0xc00233d9
c001cc70:	50                   	push   eax
c001cc71:	e8 1c 01 ff ff       	call   c000cd92 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cc76:	83 c4 10             	add    esp,0x10
c001cc79:	ba 4c 33 02 c0       	mov    edx,0xc002334c
c001cc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc82:	89 10                	mov    DWORD PTR [eax],edx
c001cc84:	90                   	nop
c001cc85:	83 c4 0c             	add    esp,0xc
c001cc88:	c3                   	ret    
c001cc89:	90                   	nop

c001cc8a <ATA::flush(bool)>:
c001cc8a:	53                   	push   ebx
c001cc8b:	83 ec 08             	sub    esp,0x8
c001cc8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc92:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cc97:	83 f8 01             	cmp    eax,0x1
c001cc9a:	19 c0                	sbb    eax,eax
c001cc9c:	83 e0 fd             	and    eax,0xfffffffd
c001cc9f:	05 ea 00 00 00       	add    eax,0xea
c001cca4:	50                   	push   eax
c001cca5:	6a 07                	push   0x7
c001cca7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccae:	50                   	push   eax
c001ccaf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ccb5:	e8 16 f1 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccba:	83 c4 0c             	add    esp,0xc
c001ccbd:	6a 00                	push   0x0
c001ccbf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccc6:	50                   	push   eax
c001ccc7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cccd:	e8 e6 fb ff ff       	call   c001c8b8 <IDE::polling(unsigned char, unsigned int)>
c001ccd2:	83 c4 18             	add    esp,0x18
c001ccd5:	5b                   	pop    ebx
c001ccd6:	c3                   	ret    
c001ccd7:	90                   	nop

c001ccd8 <ATA::readyForCommand()>:
c001ccd8:	56                   	push   esi
c001ccd9:	53                   	push   ebx
c001ccda:	53                   	push   ebx
c001ccdb:	31 db                	xor    ebx,ebx
c001ccdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cce1:	51                   	push   ecx
c001cce2:	6a 0c                	push   0xc
c001cce4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cceb:	50                   	push   eax
c001ccec:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ccf2:	e8 99 f1 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001ccf7:	83 c4 10             	add    esp,0x10
c001ccfa:	a8 88                	test   al,0x88
c001ccfc:	74 1f                	je     c001cd1d <ATA::readyForCommand()+0x45>
c001ccfe:	43                   	inc    ebx
c001ccff:	83 fb 63             	cmp    ebx,0x63
c001cd02:	7e dd                	jle    c001cce1 <ATA::readyForCommand()+0x9>
c001cd04:	83 ec 0c             	sub    esp,0xc
c001cd07:	6a 0a                	push   0xa
c001cd09:	e8 26 97 ff ff       	call   c0016434 <milliTenthSleep(unsigned int)>
c001cd0e:	83 c4 10             	add    esp,0x10
c001cd11:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cd17:	75 c8                	jne    c001cce1 <ATA::readyForCommand()+0x9>
c001cd19:	31 c0                	xor    eax,eax
c001cd1b:	eb 02                	jmp    c001cd1f <ATA::readyForCommand()+0x47>
c001cd1d:	b0 01                	mov    al,0x1
c001cd1f:	5a                   	pop    edx
c001cd20:	5b                   	pop    ebx
c001cd21:	5e                   	pop    esi
c001cd22:	c3                   	ret    
c001cd23:	90                   	nop

c001cd24 <ATA::access(unsigned long long, int, void*, bool)>:
c001cd24:	55                   	push   ebp
c001cd25:	57                   	push   edi
c001cd26:	56                   	push   esi
c001cd27:	53                   	push   ebx
c001cd28:	83 ec 2c             	sub    esp,0x2c
c001cd2b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cd2f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cd33:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cd37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd3b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cd3f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cd43:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cd47:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cd4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cd51:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cd57:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cd5b:	c1 e0 06             	shl    eax,0x6
c001cd5e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cd66:	74 5d                	je     c001cdc5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001cd68:	89 fa                	mov    edx,edi
c001cd6a:	89 f0                	mov    eax,esi
c001cd6c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001cd70:	c1 ea 1c             	shr    edx,0x1c
c001cd73:	89 d1                	mov    ecx,edx
c001cd75:	09 c1                	or     ecx,eax
c001cd77:	74 25                	je     c001cd9e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cd79:	31 ed                	xor    ebp,ebp
c001cd7b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cd82:	89 fa                	mov    edx,edi
c001cd84:	89 f0                	mov    eax,esi
c001cd86:	0f ad d0             	shrd   eax,edx,cl
c001cd89:	d3 ea                	shr    edx,cl
c001cd8b:	f6 c1 20             	test   cl,0x20
c001cd8e:	74 02                	je     c001cd92 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cd90:	89 d0                	mov    eax,edx
c001cd92:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cd96:	45                   	inc    ebp
c001cd97:	83 fd 06             	cmp    ebp,0x6
c001cd9a:	75 df                	jne    c001cd7b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cd9c:	eb 76                	jmp    c001ce14 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001cd9e:	89 f0                	mov    eax,esi
c001cda0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cda5:	89 fa                	mov    edx,edi
c001cda7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cdae:	0f ac d0 10          	shrd   eax,edx,0x10
c001cdb2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cdb7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cdbb:	c1 ee 18             	shr    esi,0x18
c001cdbe:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001cdc3:	eb 56                	jmp    c001ce1b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cdc5:	6a 00                	push   0x0
c001cdc7:	6a 3f                	push   0x3f
c001cdc9:	57                   	push   edi
c001cdca:	56                   	push   esi
c001cdcb:	e8 b0 2a 00 00       	call   c001f880 <__umoddi3>
c001cdd0:	83 c4 10             	add    esp,0x10
c001cdd3:	40                   	inc    eax
c001cdd4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cdd8:	6a 00                	push   0x0
c001cdda:	68 f0 03 00 00       	push   0x3f0
c001cddf:	57                   	push   edi
c001cde0:	56                   	push   esi
c001cde1:	e8 9a 29 00 00       	call   c001f780 <__udivdi3>
c001cde6:	83 c4 10             	add    esp,0x10
c001cde9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cdee:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cdf5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cdfa:	6a 00                	push   0x0
c001cdfc:	6a 3f                	push   0x3f
c001cdfe:	57                   	push   edi
c001cdff:	56                   	push   esi
c001ce00:	e8 7b 29 00 00       	call   c001f780 <__udivdi3>
c001ce05:	83 c4 10             	add    esp,0x10
c001ce08:	83 e0 0f             	and    eax,0xf
c001ce0b:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ce10:	89 c6                	mov    esi,eax
c001ce12:	eb 07                	jmp    c001ce1b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001ce14:	31 f6                	xor    esi,esi
c001ce16:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001ce1b:	bf 01 00 00 00       	mov    edi,0x1
c001ce20:	50                   	push   eax
c001ce21:	6a 00                	push   0x0
c001ce23:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce2a:	50                   	push   eax
c001ce2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce2f:	e8 a4 f1 ff ff       	call   c001bfd8 <IDE::enableIRQs(unsigned char, bool)>
c001ce34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce37:	e8 9c fe ff ff       	call   c001ccd8 <ATA::readyForCommand()>
c001ce3c:	83 c4 10             	add    esp,0x10
c001ce3f:	84 c0                	test   al,al
c001ce41:	0f 84 69 02 00 00    	je     c001d0b0 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001ce47:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ce4d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ce53:	c1 e0 04             	shl    eax,0x4
c001ce56:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ce5d:	09 c6                	or     esi,eax
c001ce5f:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001ce64:	75 05                	jne    c001ce6b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001ce66:	83 ce a0             	or     esi,0xffffffa0
c001ce69:	eb 03                	jmp    c001ce6e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001ce6b:	83 ce e0             	or     esi,0xffffffe0
c001ce6e:	89 f0                	mov    eax,esi
c001ce70:	0f b6 f0             	movzx  esi,al
c001ce73:	56                   	push   esi
c001ce74:	6a 06                	push   0x6
c001ce76:	51                   	push   ecx
c001ce77:	52                   	push   edx
c001ce78:	e8 53 ef ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce7d:	83 c4 10             	add    esp,0x10
c001ce80:	6a 00                	push   0x0
c001ce82:	6a 01                	push   0x1
c001ce84:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce8b:	50                   	push   eax
c001ce8c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce92:	e8 39 ef ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce97:	83 c4 10             	add    esp,0x10
c001ce9a:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001ce9f:	83 f8 02             	cmp    eax,0x2
c001cea2:	75 6e                	jne    c001cf12 <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001cea4:	6a 00                	push   0x0
c001cea6:	6a 08                	push   0x8
c001cea8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ceaf:	50                   	push   eax
c001ceb0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ceb6:	e8 15 ef ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cebb:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cec0:	50                   	push   eax
c001cec1:	6a 09                	push   0x9
c001cec3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ceca:	50                   	push   eax
c001cecb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ced1:	e8 fa ee ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ced6:	83 c4 20             	add    esp,0x20
c001ced9:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cede:	50                   	push   eax
c001cedf:	6a 0a                	push   0xa
c001cee1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cee8:	50                   	push   eax
c001cee9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ceef:	e8 dc ee ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cef4:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cef9:	50                   	push   eax
c001cefa:	6a 0b                	push   0xb
c001cefc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf03:	50                   	push   eax
c001cf04:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf0a:	e8 c1 ee ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf0f:	83 c4 20             	add    esp,0x20
c001cf12:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cf17:	50                   	push   eax
c001cf18:	6a 02                	push   0x2
c001cf1a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf21:	50                   	push   eax
c001cf22:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf28:	e8 a3 ee ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf2d:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cf32:	50                   	push   eax
c001cf33:	6a 03                	push   0x3
c001cf35:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf3c:	50                   	push   eax
c001cf3d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf43:	e8 88 ee ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf48:	83 c4 20             	add    esp,0x20
c001cf4b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cf50:	50                   	push   eax
c001cf51:	6a 04                	push   0x4
c001cf53:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf5a:	50                   	push   eax
c001cf5b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf61:	e8 6a ee ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf66:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cf6b:	50                   	push   eax
c001cf6c:	6a 05                	push   0x5
c001cf6e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf75:	50                   	push   eax
c001cf76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf7c:	e8 4f ee ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf81:	83 c4 20             	add    esp,0x20
c001cf84:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cf89:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001cf8e:	74 11                	je     c001cfa1 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001cf90:	b8 30 00 00 00       	mov    eax,0x30
c001cf95:	83 fa 02             	cmp    edx,0x2
c001cf98:	75 16                	jne    c001cfb0 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cf9a:	b8 34 00 00 00       	mov    eax,0x34
c001cf9f:	eb 0f                	jmp    c001cfb0 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cfa1:	b8 20 00 00 00       	mov    eax,0x20
c001cfa6:	83 fa 02             	cmp    edx,0x2
c001cfa9:	75 05                	jne    c001cfb0 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cfab:	b8 24 00 00 00       	mov    eax,0x24
c001cfb0:	50                   	push   eax
c001cfb1:	6a 07                	push   0x7
c001cfb3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfba:	50                   	push   eax
c001cfbb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfc1:	e8 0a ee ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfc6:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cfca:	83 c4 10             	add    esp,0x10
c001cfcd:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001cfd2:	85 f6                	test   esi,esi
c001cfd4:	0f 84 b3 00 00 00    	je     c001d08d <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001cfda:	50                   	push   eax
c001cfdb:	6a 01                	push   0x1
c001cfdd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfe4:	50                   	push   eax
c001cfe5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfeb:	e8 c8 f8 ff ff       	call   c001c8b8 <IDE::polling(unsigned char, unsigned int)>
c001cff0:	83 c4 10             	add    esp,0x10
c001cff3:	0f b6 f8             	movzx  edi,al
c001cff6:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cffc:	85 ff                	test   edi,edi
c001cffe:	74 1d                	je     c001d01d <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001d000:	57                   	push   edi
c001d001:	0f b6 d2             	movzx  edx,dl
c001d004:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d00b:	50                   	push   eax
c001d00c:	52                   	push   edx
c001d00d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d013:	e8 e6 f7 ff ff       	call   c001c7fe <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d018:	e9 90 00 00 00       	jmp    c001d0ad <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001d01d:	85 ed                	test   ebp,ebp
c001d01f:	74 3b                	je     c001d05c <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001d021:	31 c9                	xor    ecx,ecx
c001d023:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d027:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d02b:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001d02f:	50                   	push   eax
c001d030:	50                   	push   eax
c001d031:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d038:	50                   	push   eax
c001d039:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d03f:	e8 7a ed ff ff       	call   c001bdbe <IDE::getBase(unsigned char)>
c001d044:	89 c2                	mov    edx,eax
c001d046:	89 f8                	mov    eax,edi
c001d048:	66 ef                	out    dx,ax
c001d04a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d04e:	83 c4 10             	add    esp,0x10
c001d051:	41                   	inc    ecx
c001d052:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d058:	75 c9                	jne    c001d023 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001d05a:	eb 23                	jmp    c001d07f <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001d05c:	0f b6 d2             	movzx  edx,dl
c001d05f:	51                   	push   ecx
c001d060:	51                   	push   ecx
c001d061:	52                   	push   edx
c001d062:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d068:	e8 51 ed ff ff       	call   c001bdbe <IDE::getBase(unsigned char)>
c001d06d:	b9 00 01 00 00       	mov    ecx,0x100
c001d072:	89 c2                	mov    edx,eax
c001d074:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d078:	fc                   	cld    
c001d079:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d07c:	83 c4 10             	add    esp,0x10
c001d07f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d087:	4e                   	dec    esi
c001d088:	e9 45 ff ff ff       	jmp    c001cfd2 <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001d08d:	31 ff                	xor    edi,edi
c001d08f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d094:	74 1a                	je     c001d0b0 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001d096:	50                   	push   eax
c001d097:	50                   	push   eax
c001d098:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d09d:	83 f8 02             	cmp    eax,0x2
c001d0a0:	0f 94 c0             	sete   al
c001d0a3:	0f b6 c0             	movzx  eax,al
c001d0a6:	50                   	push   eax
c001d0a7:	53                   	push   ebx
c001d0a8:	e8 dd fb ff ff       	call   c001cc8a <ATA::flush(bool)>
c001d0ad:	83 c4 10             	add    esp,0x10
c001d0b0:	83 c4 2c             	add    esp,0x2c
c001d0b3:	89 f8                	mov    eax,edi
c001d0b5:	5b                   	pop    ebx
c001d0b6:	5e                   	pop    esi
c001d0b7:	5f                   	pop    edi
c001d0b8:	5d                   	pop    ebp
c001d0b9:	c3                   	ret    

c001d0ba <ATA::detectCHS()>:
c001d0ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d0be:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d0c4:	c1 e0 06             	shl    eax,0x6
c001d0c7:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d0cd:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d0d7:	c7 44 24 04 30 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023330
c001d0df:	e9 3b 45 ff ff       	jmp    c001161f <KePanic(char const*)>

c001d0e4 <ATA::open(int, int, void*)>:
c001d0e4:	53                   	push   ebx
c001d0e5:	83 ec 08             	sub    esp,0x8
c001d0e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d0ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d0f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d0f4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d0fa:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d100:	c1 e0 06             	shl    eax,0x6
c001d103:	01 d0                	add    eax,edx
c001d105:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d10c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d112:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d119:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d123:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d129:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d130:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d137:	75 0c                	jne    c001d145 <ATA::open(int, int, void*)+0x61>
c001d139:	83 ec 0c             	sub    esp,0xc
c001d13c:	53                   	push   ebx
c001d13d:	e8 78 ff ff ff       	call   c001d0ba <ATA::detectCHS()>
c001d142:	83 c4 10             	add    esp,0x10
c001d145:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d14b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d151:	c1 e0 06             	shl    eax,0x6
c001d154:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d15b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d165:	d1 e8                	shr    eax,1
c001d167:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d16d:	6a 04                	push   0x4
c001d16f:	6a 0c                	push   0xc
c001d171:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d178:	50                   	push   eax
c001d179:	52                   	push   edx
c001d17a:	e8 51 ec ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d17f:	90                   	nop
c001d180:	90                   	nop
c001d181:	6a 00                	push   0x0
c001d183:	6a 0c                	push   0xc
c001d185:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d18c:	50                   	push   eax
c001d18d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d193:	e8 38 ec ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d198:	83 c4 14             	add    esp,0x14
c001d19b:	53                   	push   ebx
c001d19c:	e8 59 fc fe ff       	call   c000cdfa <PhysicalDisk::startCache()>
c001d1a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1a4:	e8 95 0e ff ff       	call   c000e03e <createPartitionsForDisk(PhysicalDisk*)>
c001d1a9:	31 c0                	xor    eax,eax
c001d1ab:	83 c4 18             	add    esp,0x18
c001d1ae:	5b                   	pop    ebx
c001d1af:	c3                   	ret    

c001d1b0 <combineCharAndColour(char, unsigned char)>:
c001d1b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d1b5:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d1bb:	c1 e0 08             	shl    eax,0x8
c001d1be:	09 d0                	or     eax,edx
c001d1c0:	c3                   	ret    

c001d1c1 <combineColours(unsigned char, unsigned char)>:
c001d1c1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d1c6:	c1 e0 04             	shl    eax,0x4
c001d1c9:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d1cd:	c3                   	ret    

c001d1ce <ATA::read(unsigned long long, int, void*)>:
c001d1ce:	55                   	push   ebp
c001d1cf:	57                   	push   edi
c001d1d0:	56                   	push   esi
c001d1d1:	be 04 00 00 00       	mov    esi,0x4
c001d1d6:	53                   	push   ebx
c001d1d7:	83 ec 0c             	sub    esp,0xc
c001d1da:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d1de:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d1e2:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d1e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d1e9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d1ed:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d1f3:	0f 87 a1 01 00 00    	ja     c001d39a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d1f9:	be 06 00 00 00       	mov    esi,0x6
c001d1fe:	85 c9                	test   ecx,ecx
c001d200:	0f 84 94 01 00 00    	je     c001d39a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d206:	55                   	push   ebp
c001d207:	55                   	push   ebp
c001d208:	6a 00                	push   0x0
c001d20a:	51                   	push   ecx
c001d20b:	53                   	push   ebx
c001d20c:	52                   	push   edx
c001d20d:	50                   	push   eax
c001d20e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d212:	e8 0d fb ff ff       	call   c001cd24 <ATA::access(unsigned long long, int, void*, bool)>
c001d217:	83 c4 20             	add    esp,0x20
c001d21a:	89 c6                	mov    esi,eax
c001d21c:	85 c0                	test   eax,eax
c001d21e:	0f 85 71 01 00 00    	jne    c001d395 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d224:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d22a:	89 da                	mov    edx,ebx
c001d22c:	50                   	push   eax
c001d22d:	bd 10 27 00 00       	mov    ebp,0x2710
c001d232:	50                   	push   eax
c001d233:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d239:	6a 0f                	push   0xf
c001d23b:	6a 00                	push   0x0
c001d23d:	e8 7f ff ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001d242:	59                   	pop    ecx
c001d243:	b9 0a 00 00 00       	mov    ecx,0xa
c001d248:	5b                   	pop    ebx
c001d249:	0f b6 d8             	movzx  ebx,al
c001d24c:	89 d0                	mov    eax,edx
c001d24e:	53                   	push   ebx
c001d24f:	99                   	cdq    
c001d250:	f7 fd                	idiv   ebp
c001d252:	99                   	cdq    
c001d253:	f7 f9                	idiv   ecx
c001d255:	83 c2 30             	add    edx,0x30
c001d258:	0f b6 d2             	movzx  edx,dl
c001d25b:	52                   	push   edx
c001d25c:	e8 4f ff ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d261:	5f                   	pop    edi
c001d262:	bf e8 03 00 00       	mov    edi,0x3e8
c001d267:	5a                   	pop    edx
c001d268:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d26e:	53                   	push   ebx
c001d26f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d274:	99                   	cdq    
c001d275:	f7 ff                	idiv   edi
c001d277:	99                   	cdq    
c001d278:	f7 f9                	idiv   ecx
c001d27a:	8d 42 30             	lea    eax,[edx+0x30]
c001d27d:	0f b6 c0             	movzx  eax,al
c001d280:	50                   	push   eax
c001d281:	e8 2a ff ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d286:	5f                   	pop    edi
c001d287:	bf 64 00 00 00       	mov    edi,0x64
c001d28c:	5a                   	pop    edx
c001d28d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d293:	53                   	push   ebx
c001d294:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d299:	99                   	cdq    
c001d29a:	f7 ff                	idiv   edi
c001d29c:	99                   	cdq    
c001d29d:	f7 f9                	idiv   ecx
c001d29f:	8d 42 30             	lea    eax,[edx+0x30]
c001d2a2:	0f b6 c0             	movzx  eax,al
c001d2a5:	50                   	push   eax
c001d2a6:	e8 05 ff ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d2ab:	5a                   	pop    edx
c001d2ac:	5a                   	pop    edx
c001d2ad:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d2b3:	53                   	push   ebx
c001d2b4:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2b9:	99                   	cdq    
c001d2ba:	f7 f9                	idiv   ecx
c001d2bc:	99                   	cdq    
c001d2bd:	f7 f9                	idiv   ecx
c001d2bf:	8d 42 30             	lea    eax,[edx+0x30]
c001d2c2:	0f b6 c0             	movzx  eax,al
c001d2c5:	50                   	push   eax
c001d2c6:	e8 e5 fe ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d2cb:	5a                   	pop    edx
c001d2cc:	5a                   	pop    edx
c001d2cd:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d2d3:	53                   	push   ebx
c001d2d4:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2d9:	99                   	cdq    
c001d2da:	f7 f9                	idiv   ecx
c001d2dc:	83 c2 30             	add    edx,0x30
c001d2df:	0f b6 d2             	movzx  edx,dl
c001d2e2:	52                   	push   edx
c001d2e3:	e8 c8 fe ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d2e8:	5a                   	pop    edx
c001d2e9:	5a                   	pop    edx
c001d2ea:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d2f0:	53                   	push   ebx
c001d2f1:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2f6:	99                   	cdq    
c001d2f7:	f7 fd                	idiv   ebp
c001d2f9:	99                   	cdq    
c001d2fa:	f7 f9                	idiv   ecx
c001d2fc:	8d 42 30             	lea    eax,[edx+0x30]
c001d2ff:	0f b6 c0             	movzx  eax,al
c001d302:	50                   	push   eax
c001d303:	e8 a8 fe ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d308:	5d                   	pop    ebp
c001d309:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d30e:	5a                   	pop    edx
c001d30f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d315:	53                   	push   ebx
c001d316:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d31b:	99                   	cdq    
c001d31c:	f7 fd                	idiv   ebp
c001d31e:	99                   	cdq    
c001d31f:	f7 f9                	idiv   ecx
c001d321:	8d 42 30             	lea    eax,[edx+0x30]
c001d324:	0f b6 c0             	movzx  eax,al
c001d327:	50                   	push   eax
c001d328:	e8 83 fe ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d32d:	5d                   	pop    ebp
c001d32e:	5a                   	pop    edx
c001d32f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d335:	53                   	push   ebx
c001d336:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d33b:	99                   	cdq    
c001d33c:	f7 ff                	idiv   edi
c001d33e:	99                   	cdq    
c001d33f:	f7 f9                	idiv   ecx
c001d341:	8d 42 30             	lea    eax,[edx+0x30]
c001d344:	0f b6 c0             	movzx  eax,al
c001d347:	50                   	push   eax
c001d348:	e8 63 fe ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d34d:	5f                   	pop    edi
c001d34e:	5d                   	pop    ebp
c001d34f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d355:	53                   	push   ebx
c001d356:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d35b:	99                   	cdq    
c001d35c:	f7 f9                	idiv   ecx
c001d35e:	99                   	cdq    
c001d35f:	f7 f9                	idiv   ecx
c001d361:	8d 42 30             	lea    eax,[edx+0x30]
c001d364:	0f b6 c0             	movzx  eax,al
c001d367:	50                   	push   eax
c001d368:	e8 43 fe ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d36d:	5a                   	pop    edx
c001d36e:	5f                   	pop    edi
c001d36f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d375:	53                   	push   ebx
c001d376:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d37b:	99                   	cdq    
c001d37c:	f7 f9                	idiv   ecx
c001d37e:	83 c2 30             	add    edx,0x30
c001d381:	0f b6 d2             	movzx  edx,dl
c001d384:	52                   	push   edx
c001d385:	e8 26 fe ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d38a:	83 c4 10             	add    esp,0x10
c001d38d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d393:	eb 05                	jmp    c001d39a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d395:	be 01 00 00 00       	mov    esi,0x1
c001d39a:	83 c4 0c             	add    esp,0xc
c001d39d:	89 f0                	mov    eax,esi
c001d39f:	5b                   	pop    ebx
c001d3a0:	5e                   	pop    esi
c001d3a1:	5f                   	pop    edi
c001d3a2:	5d                   	pop    ebp
c001d3a3:	c3                   	ret    

c001d3a4 <ATA::write(unsigned long long, int, void*)>:
c001d3a4:	55                   	push   ebp
c001d3a5:	57                   	push   edi
c001d3a6:	56                   	push   esi
c001d3a7:	be 04 00 00 00       	mov    esi,0x4
c001d3ac:	53                   	push   ebx
c001d3ad:	83 ec 0c             	sub    esp,0xc
c001d3b0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d3b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3b8:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d3bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d3bf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d3c3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d3c9:	0f 87 9c 01 00 00    	ja     c001d56b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d3cf:	be 06 00 00 00       	mov    esi,0x6
c001d3d4:	85 c9                	test   ecx,ecx
c001d3d6:	0f 84 8f 01 00 00    	je     c001d56b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d3dc:	55                   	push   ebp
c001d3dd:	55                   	push   ebp
c001d3de:	6a 01                	push   0x1
c001d3e0:	51                   	push   ecx
c001d3e1:	53                   	push   ebx
c001d3e2:	52                   	push   edx
c001d3e3:	50                   	push   eax
c001d3e4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d3e8:	e8 37 f9 ff ff       	call   c001cd24 <ATA::access(unsigned long long, int, void*, bool)>
c001d3ed:	83 c4 20             	add    esp,0x20
c001d3f0:	89 c6                	mov    esi,eax
c001d3f2:	85 c0                	test   eax,eax
c001d3f4:	0f 85 6c 01 00 00    	jne    c001d566 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d3fa:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d400:	bd 10 27 00 00       	mov    ebp,0x2710
c001d405:	50                   	push   eax
c001d406:	50                   	push   eax
c001d407:	6a 0f                	push   0xf
c001d409:	6a 00                	push   0x0
c001d40b:	e8 b1 fd ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001d410:	5a                   	pop    edx
c001d411:	0f b6 d8             	movzx  ebx,al
c001d414:	59                   	pop    ecx
c001d415:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d41a:	53                   	push   ebx
c001d41b:	b9 0a 00 00 00       	mov    ecx,0xa
c001d420:	99                   	cdq    
c001d421:	f7 fd                	idiv   ebp
c001d423:	99                   	cdq    
c001d424:	f7 f9                	idiv   ecx
c001d426:	8d 42 30             	lea    eax,[edx+0x30]
c001d429:	0f b6 c0             	movzx  eax,al
c001d42c:	50                   	push   eax
c001d42d:	e8 7e fd ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d432:	5f                   	pop    edi
c001d433:	bf e8 03 00 00       	mov    edi,0x3e8
c001d438:	5a                   	pop    edx
c001d439:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d43f:	53                   	push   ebx
c001d440:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d445:	99                   	cdq    
c001d446:	f7 ff                	idiv   edi
c001d448:	99                   	cdq    
c001d449:	f7 f9                	idiv   ecx
c001d44b:	8d 42 30             	lea    eax,[edx+0x30]
c001d44e:	0f b6 c0             	movzx  eax,al
c001d451:	50                   	push   eax
c001d452:	e8 59 fd ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d457:	5f                   	pop    edi
c001d458:	bf 64 00 00 00       	mov    edi,0x64
c001d45d:	5a                   	pop    edx
c001d45e:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d464:	53                   	push   ebx
c001d465:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d46a:	99                   	cdq    
c001d46b:	f7 ff                	idiv   edi
c001d46d:	99                   	cdq    
c001d46e:	f7 f9                	idiv   ecx
c001d470:	8d 42 30             	lea    eax,[edx+0x30]
c001d473:	0f b6 c0             	movzx  eax,al
c001d476:	50                   	push   eax
c001d477:	e8 34 fd ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d47c:	5a                   	pop    edx
c001d47d:	5a                   	pop    edx
c001d47e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d484:	53                   	push   ebx
c001d485:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d48a:	99                   	cdq    
c001d48b:	f7 f9                	idiv   ecx
c001d48d:	99                   	cdq    
c001d48e:	f7 f9                	idiv   ecx
c001d490:	8d 42 30             	lea    eax,[edx+0x30]
c001d493:	0f b6 c0             	movzx  eax,al
c001d496:	50                   	push   eax
c001d497:	e8 14 fd ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d49c:	5a                   	pop    edx
c001d49d:	5a                   	pop    edx
c001d49e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d4a4:	53                   	push   ebx
c001d4a5:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4aa:	99                   	cdq    
c001d4ab:	f7 f9                	idiv   ecx
c001d4ad:	8d 42 30             	lea    eax,[edx+0x30]
c001d4b0:	0f b6 c0             	movzx  eax,al
c001d4b3:	50                   	push   eax
c001d4b4:	e8 f7 fc ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d4b9:	5a                   	pop    edx
c001d4ba:	5a                   	pop    edx
c001d4bb:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d4c1:	53                   	push   ebx
c001d4c2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4c7:	99                   	cdq    
c001d4c8:	f7 fd                	idiv   ebp
c001d4ca:	99                   	cdq    
c001d4cb:	f7 f9                	idiv   ecx
c001d4cd:	8d 42 30             	lea    eax,[edx+0x30]
c001d4d0:	0f b6 c0             	movzx  eax,al
c001d4d3:	50                   	push   eax
c001d4d4:	e8 d7 fc ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d4d9:	5d                   	pop    ebp
c001d4da:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d4df:	5a                   	pop    edx
c001d4e0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d4e6:	53                   	push   ebx
c001d4e7:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4ec:	99                   	cdq    
c001d4ed:	f7 fd                	idiv   ebp
c001d4ef:	99                   	cdq    
c001d4f0:	f7 f9                	idiv   ecx
c001d4f2:	8d 42 30             	lea    eax,[edx+0x30]
c001d4f5:	0f b6 c0             	movzx  eax,al
c001d4f8:	50                   	push   eax
c001d4f9:	e8 b2 fc ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d4fe:	5d                   	pop    ebp
c001d4ff:	5a                   	pop    edx
c001d500:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d506:	53                   	push   ebx
c001d507:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d50c:	99                   	cdq    
c001d50d:	f7 ff                	idiv   edi
c001d50f:	99                   	cdq    
c001d510:	f7 f9                	idiv   ecx
c001d512:	8d 42 30             	lea    eax,[edx+0x30]
c001d515:	0f b6 c0             	movzx  eax,al
c001d518:	50                   	push   eax
c001d519:	e8 92 fc ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d51e:	5f                   	pop    edi
c001d51f:	5d                   	pop    ebp
c001d520:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d526:	53                   	push   ebx
c001d527:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d52c:	99                   	cdq    
c001d52d:	f7 f9                	idiv   ecx
c001d52f:	99                   	cdq    
c001d530:	f7 f9                	idiv   ecx
c001d532:	8d 42 30             	lea    eax,[edx+0x30]
c001d535:	0f b6 c0             	movzx  eax,al
c001d538:	50                   	push   eax
c001d539:	e8 72 fc ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d53e:	5a                   	pop    edx
c001d53f:	5f                   	pop    edi
c001d540:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d546:	53                   	push   ebx
c001d547:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d54c:	99                   	cdq    
c001d54d:	f7 f9                	idiv   ecx
c001d54f:	83 c2 30             	add    edx,0x30
c001d552:	0f b6 d2             	movzx  edx,dl
c001d555:	52                   	push   edx
c001d556:	e8 55 fc ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001d55b:	83 c4 10             	add    esp,0x10
c001d55e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d564:	eb 05                	jmp    c001d56b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d566:	be 01 00 00 00       	mov    esi,0x1
c001d56b:	83 c4 0c             	add    esp,0xc
c001d56e:	89 f0                	mov    eax,esi
c001d570:	5b                   	pop    ebx
c001d571:	5e                   	pop    esi
c001d572:	5f                   	pop    edi
c001d573:	5d                   	pop    ebp
c001d574:	c3                   	ret    
c001d575:	90                   	nop

c001d576 <ATAPI::write(unsigned long long, int, void*)>:
c001d576:	b8 03 00 00 00       	mov    eax,0x3
c001d57b:	c3                   	ret    

c001d57c <ATAPI::close(int, int, void*)>:
c001d57c:	83 ec 0c             	sub    esp,0xc
c001d57f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d583:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d589:	85 c0                	test   eax,eax
c001d58b:	74 0c                	je     c001d599 <ATAPI::close(int, int, void*)+0x1d>
c001d58d:	83 ec 0c             	sub    esp,0xc
c001d590:	8b 10                	mov    edx,DWORD PTR [eax]
c001d592:	50                   	push   eax
c001d593:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d596:	83 c4 10             	add    esp,0x10
c001d599:	31 c0                	xor    eax,eax
c001d59b:	83 c4 0c             	add    esp,0xc
c001d59e:	c3                   	ret    
c001d59f:	90                   	nop

c001d5a0 <ATAPI::ATAPI()>:
c001d5a0:	83 ec 0c             	sub    esp,0xc
c001d5a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5a7:	83 ec 04             	sub    esp,0x4
c001d5aa:	68 00 08 00 00       	push   0x800
c001d5af:	68 79 34 02 c0       	push   0xc0023479
c001d5b4:	50                   	push   eax
c001d5b5:	e8 d8 f7 fe ff       	call   c000cd92 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d5ba:	83 c4 10             	add    esp,0x10
c001d5bd:	ba 94 33 02 c0       	mov    edx,0xc0023394
c001d5c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c6:	89 10                	mov    DWORD PTR [eax],edx
c001d5c8:	90                   	nop
c001d5c9:	83 c4 0c             	add    esp,0xc
c001d5cc:	c3                   	ret    
c001d5cd:	90                   	nop

c001d5ce <ATAPI::readyForCommand()>:
c001d5ce:	56                   	push   esi
c001d5cf:	53                   	push   ebx
c001d5d0:	53                   	push   ebx
c001d5d1:	31 db                	xor    ebx,ebx
c001d5d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d5d7:	51                   	push   ecx
c001d5d8:	6a 0c                	push   0xc
c001d5da:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d5e1:	50                   	push   eax
c001d5e2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d5e8:	e8 a3 e8 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001d5ed:	83 c4 10             	add    esp,0x10
c001d5f0:	a8 88                	test   al,0x88
c001d5f2:	74 25                	je     c001d619 <ATAPI::readyForCommand()+0x4b>
c001d5f4:	43                   	inc    ebx
c001d5f5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d5fb:	7e da                	jle    c001d5d7 <ATAPI::readyForCommand()+0x9>
c001d5fd:	83 ec 0c             	sub    esp,0xc
c001d600:	68 5e 01 00 00       	push   0x15e
c001d605:	e8 2a 8e ff ff       	call   c0016434 <milliTenthSleep(unsigned int)>
c001d60a:	83 c4 10             	add    esp,0x10
c001d60d:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d613:	75 c2                	jne    c001d5d7 <ATAPI::readyForCommand()+0x9>
c001d615:	31 c0                	xor    eax,eax
c001d617:	eb 02                	jmp    c001d61b <ATAPI::readyForCommand()+0x4d>
c001d619:	b0 01                	mov    al,0x1
c001d61b:	5a                   	pop    edx
c001d61c:	5b                   	pop    ebx
c001d61d:	5e                   	pop    esi
c001d61e:	c3                   	ret    
c001d61f:	90                   	nop

c001d620 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d620:	55                   	push   ebp
c001d621:	57                   	push   edi
c001d622:	56                   	push   esi
c001d623:	53                   	push   ebx
c001d624:	83 ec 20             	sub    esp,0x20
c001d627:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d62b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d62f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d633:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d637:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d63b:	6a 01                	push   0x1
c001d63d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d644:	50                   	push   eax
c001d645:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d64b:	e8 88 e9 ff ff       	call   c001bfd8 <IDE::enableIRQs(unsigned char, bool)>
c001d650:	5e                   	pop    esi
c001d651:	58                   	pop    eax
c001d652:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d659:	50                   	push   eax
c001d65a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d660:	e8 45 e7 ff ff       	call   c001bdaa <IDE::prepareInterrupt(unsigned char)>
c001d665:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d668:	e8 61 ff ff ff       	call   c001d5ce <ATAPI::readyForCommand()>
c001d66d:	83 c4 10             	add    esp,0x10
c001d670:	84 c0                	test   al,al
c001d672:	75 0a                	jne    c001d67e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d674:	bb 01 00 00 00       	mov    ebx,0x1
c001d679:	e9 60 02 00 00       	jmp    c001d8de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d67e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d684:	c1 e0 04             	shl    eax,0x4
c001d687:	0f b6 c0             	movzx  eax,al
c001d68a:	50                   	push   eax
c001d68b:	6a 06                	push   0x6
c001d68d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d694:	50                   	push   eax
c001d695:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d69b:	e8 30 e7 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6a0:	6a 00                	push   0x0
c001d6a2:	6a 01                	push   0x1
c001d6a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6ab:	50                   	push   eax
c001d6ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6b2:	e8 19 e7 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6b7:	83 c4 20             	add    esp,0x20
c001d6ba:	0f b6 c3             	movzx  eax,bl
c001d6bd:	0f b6 df             	movzx  ebx,bh
c001d6c0:	50                   	push   eax
c001d6c1:	6a 04                	push   0x4
c001d6c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6ca:	50                   	push   eax
c001d6cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6d1:	e8 fa e6 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6d6:	53                   	push   ebx
c001d6d7:	6a 05                	push   0x5
c001d6d9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6e0:	50                   	push   eax
c001d6e1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6e7:	e8 e4 e6 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6ec:	83 c4 20             	add    esp,0x20
c001d6ef:	68 a0 00 00 00       	push   0xa0
c001d6f4:	6a 07                	push   0x7
c001d6f6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6fd:	50                   	push   eax
c001d6fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d704:	e8 c7 e6 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d709:	83 c4 0c             	add    esp,0xc
c001d70c:	6a 01                	push   0x1
c001d70e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d715:	50                   	push   eax
c001d716:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d71c:	e8 97 f1 ff ff       	call   c001c8b8 <IDE::polling(unsigned char, unsigned int)>
c001d721:	83 c4 10             	add    esp,0x10
c001d724:	0f b6 d8             	movzx  ebx,al
c001d727:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d72d:	85 db                	test   ebx,ebx
c001d72f:	74 20                	je     c001d751 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d731:	53                   	push   ebx
c001d732:	0f b6 c0             	movzx  eax,al
c001d735:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d73c:	52                   	push   edx
c001d73d:	50                   	push   eax
c001d73e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d744:	e8 b5 f0 ff ff       	call   c001c7fe <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d749:	83 c4 10             	add    esp,0x10
c001d74c:	e9 8d 01 00 00       	jmp    c001d8de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d751:	0f b6 c0             	movzx  eax,al
c001d754:	53                   	push   ebx
c001d755:	53                   	push   ebx
c001d756:	50                   	push   eax
c001d757:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d75d:	e8 5c e6 ff ff       	call   c001bdbe <IDE::getBase(unsigned char)>
c001d762:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d766:	b9 06 00 00 00       	mov    ecx,0x6
c001d76b:	89 c2                	mov    edx,eax
c001d76d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d770:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d774:	83 c4 10             	add    esp,0x10
c001d777:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d77c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d780:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d786:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d78d:	85 db                	test   ebx,ebx
c001d78f:	0f 84 ec 00 00 00    	je     c001d881 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d795:	51                   	push   ecx
c001d796:	51                   	push   ecx
c001d797:	52                   	push   edx
c001d798:	50                   	push   eax
c001d799:	e8 a0 e7 ff ff       	call   c001bf3e <IDE::waitInterrupt(unsigned char)>
c001d79e:	83 c4 10             	add    esp,0x10
c001d7a1:	84 c0                	test   al,al
c001d7a3:	0f 84 cb fe ff ff    	je     c001d674 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d7a9:	56                   	push   esi
c001d7aa:	56                   	push   esi
c001d7ab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7b2:	50                   	push   eax
c001d7b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7b9:	e8 ec e5 ff ff       	call   c001bdaa <IDE::prepareInterrupt(unsigned char)>
c001d7be:	83 c4 0c             	add    esp,0xc
c001d7c1:	6a 04                	push   0x4
c001d7c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7ca:	50                   	push   eax
c001d7cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7d1:	e8 ba e6 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001d7d6:	83 c4 0c             	add    esp,0xc
c001d7d9:	89 c6                	mov    esi,eax
c001d7db:	6a 05                	push   0x5
c001d7dd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7e4:	50                   	push   eax
c001d7e5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7eb:	e8 a0 e6 ff ff       	call   c001be90 <IDE::read(unsigned char, unsigned char)>
c001d7f0:	89 f1                	mov    ecx,esi
c001d7f2:	0f b6 c0             	movzx  eax,al
c001d7f5:	0f b6 f1             	movzx  esi,cl
c001d7f8:	c1 e0 08             	shl    eax,0x8
c001d7fb:	09 c6                	or     esi,eax
c001d7fd:	d1 fe                	sar    esi,1
c001d7ff:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d803:	83 c4 10             	add    esp,0x10
c001d806:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d80b:	74 41                	je     c001d84e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d80d:	31 c9                	xor    ecx,ecx
c001d80f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d815:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d81c:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d820:	75 0a                	jne    c001d82c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d822:	01 c9                	add    ecx,ecx
c001d824:	01 cd                	add    ebp,ecx
c001d826:	4b                   	dec    ebx
c001d827:	e9 54 ff ff ff       	jmp    c001d780 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d82c:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d831:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d835:	51                   	push   ecx
c001d836:	51                   	push   ecx
c001d837:	52                   	push   edx
c001d838:	50                   	push   eax
c001d839:	e8 80 e5 ff ff       	call   c001bdbe <IDE::getBase(unsigned char)>
c001d83e:	89 c2                	mov    edx,eax
c001d840:	89 f0                	mov    eax,esi
c001d842:	66 ef                	out    dx,ax
c001d844:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d848:	83 c4 10             	add    esp,0x10
c001d84b:	41                   	inc    ecx
c001d84c:	eb c1                	jmp    c001d80f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d84e:	31 f6                	xor    esi,esi
c001d850:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d856:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d85d:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d861:	75 06                	jne    c001d869 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d863:	01 f6                	add    esi,esi
c001d865:	01 f5                	add    ebp,esi
c001d867:	eb bd                	jmp    c001d826 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d869:	51                   	push   ecx
c001d86a:	51                   	push   ecx
c001d86b:	52                   	push   edx
c001d86c:	50                   	push   eax
c001d86d:	e8 4c e5 ff ff       	call   c001bdbe <IDE::getBase(unsigned char)>
c001d872:	89 c2                	mov    edx,eax
c001d874:	66 ed                	in     ax,dx
c001d876:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d87b:	83 c4 10             	add    esp,0x10
c001d87e:	46                   	inc    esi
c001d87f:	eb cf                	jmp    c001d850 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d881:	51                   	push   ecx
c001d882:	51                   	push   ecx
c001d883:	52                   	push   edx
c001d884:	50                   	push   eax
c001d885:	e8 b4 e6 ff ff       	call   c001bf3e <IDE::waitInterrupt(unsigned char)>
c001d88a:	83 c4 10             	add    esp,0x10
c001d88d:	84 c0                	test   al,al
c001d88f:	0f 84 df fd ff ff    	je     c001d674 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d895:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d89a:	52                   	push   edx
c001d89b:	52                   	push   edx
c001d89c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8a3:	50                   	push   eax
c001d8a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8aa:	e8 fb e4 ff ff       	call   c001bdaa <IDE::prepareInterrupt(unsigned char)>
c001d8af:	83 c4 10             	add    esp,0x10
c001d8b2:	50                   	push   eax
c001d8b3:	50                   	push   eax
c001d8b4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8bb:	50                   	push   eax
c001d8bc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8c2:	e8 f7 e4 ff ff       	call   c001bdbe <IDE::getBase(unsigned char)>
c001d8c7:	8d 50 07             	lea    edx,[eax+0x7]
c001d8ca:	ec                   	in     al,dx
c001d8cb:	83 c4 10             	add    esp,0x10
c001d8ce:	a8 88                	test   al,0x88
c001d8d0:	74 0a                	je     c001d8dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d8d2:	4b                   	dec    ebx
c001d8d3:	75 dd                	jne    c001d8b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d8d5:	bb 02 00 00 00       	mov    ebx,0x2
c001d8da:	eb 02                	jmp    c001d8de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d8dc:	31 db                	xor    ebx,ebx
c001d8de:	83 c4 1c             	add    esp,0x1c
c001d8e1:	89 d8                	mov    eax,ebx
c001d8e3:	5b                   	pop    ebx
c001d8e4:	5e                   	pop    esi
c001d8e5:	5f                   	pop    edi
c001d8e6:	5d                   	pop    ebp
c001d8e7:	c3                   	ret    

c001d8e8 <ATAPI::diskRemoved()>:
c001d8e8:	53                   	push   ebx
c001d8e9:	83 ec 14             	sub    esp,0x14
c001d8ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d8f0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d8f7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d8fd:	e8 2c 04 ff ff       	call   c000dd2e <LogicalDisk::unmount()>
c001d902:	58                   	pop    eax
c001d903:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d909:	e8 02 0e ff ff       	call   c000e710 <VCache::writeWriteBuffer()>
c001d90e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d914:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d918:	83 c4 18             	add    esp,0x18
c001d91b:	5b                   	pop    ebx
c001d91c:	e9 df 0d ff ff       	jmp    c000e700 <VCache::invalidateReadBuffer()>
c001d921:	90                   	nop

c001d922 <ATAPI::eject()>:
c001d922:	57                   	push   edi
c001d923:	b9 03 00 00 00       	mov    ecx,0x3
c001d928:	53                   	push   ebx
c001d929:	83 ec 14             	sub    esp,0x14
c001d92c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d930:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d934:	fc                   	cld    
c001d935:	31 c0                	xor    eax,eax
c001d937:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d939:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d93e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d943:	50                   	push   eax
c001d944:	50                   	push   eax
c001d945:	6a 00                	push   0x0
c001d947:	6a 00                	push   0x0
c001d949:	6a 00                	push   0x0
c001d94b:	6a 02                	push   0x2
c001d94d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d951:	50                   	push   eax
c001d952:	53                   	push   ebx
c001d953:	e8 c8 fc ff ff       	call   c001d620 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d958:	83 c4 14             	add    esp,0x14
c001d95b:	53                   	push   ebx
c001d95c:	e8 87 ff ff ff       	call   c001d8e8 <ATAPI::diskRemoved()>
c001d961:	83 c4 24             	add    esp,0x24
c001d964:	31 c0                	xor    eax,eax
c001d966:	5b                   	pop    ebx
c001d967:	5f                   	pop    edi
c001d968:	c3                   	ret    
c001d969:	90                   	nop

c001d96a <ATAPI::diskInserted()>:
c001d96a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d96e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d975:	c3                   	ret    

c001d976 <ATAPI::detectMedia()>:
c001d976:	56                   	push   esi
c001d977:	53                   	push   ebx
c001d978:	83 ec 28             	sub    esp,0x28
c001d97b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d97f:	6a 0c                	push   0xc
c001d981:	6a 00                	push   0x0
c001d983:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d987:	56                   	push   esi
c001d988:	e8 63 2b fe ff       	call   c00004f0 <memset>
c001d98d:	58                   	pop    eax
c001d98e:	5a                   	pop    edx
c001d98f:	6a 00                	push   0x0
c001d991:	6a 00                	push   0x0
c001d993:	6a 00                	push   0x0
c001d995:	6a 00                	push   0x0
c001d997:	56                   	push   esi
c001d998:	53                   	push   ebx
c001d999:	e8 82 fc ff ff       	call   c001d620 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d99e:	83 c4 1c             	add    esp,0x1c
c001d9a1:	6a 0c                	push   0xc
c001d9a3:	6a 00                	push   0x0
c001d9a5:	56                   	push   esi
c001d9a6:	e8 45 2b fe ff       	call   c00004f0 <memset>
c001d9ab:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d9b0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d9b5:	59                   	pop    ecx
c001d9b6:	58                   	pop    eax
c001d9b7:	6a 01                	push   0x1
c001d9b9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d9bd:	50                   	push   eax
c001d9be:	6a 00                	push   0x0
c001d9c0:	6a 12                	push   0x12
c001d9c2:	56                   	push   esi
c001d9c3:	53                   	push   ebx
c001d9c4:	e8 57 fc ff ff       	call   c001d620 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d9c9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d9cd:	83 c4 20             	add    esp,0x20
c001d9d0:	83 e0 7f             	and    eax,0x7f
c001d9d3:	83 f8 70             	cmp    eax,0x70
c001d9d6:	74 15                	je     c001d9ed <ATAPI::detectMedia()+0x77>
c001d9d8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d9df:	75 0c                	jne    c001d9ed <ATAPI::detectMedia()+0x77>
c001d9e1:	83 ec 0c             	sub    esp,0xc
c001d9e4:	53                   	push   ebx
c001d9e5:	e8 80 ff ff ff       	call   c001d96a <ATAPI::diskInserted()>
c001d9ea:	83 c4 10             	add    esp,0x10
c001d9ed:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d9f1:	83 e0 0f             	and    eax,0xf
c001d9f4:	83 f8 02             	cmp    eax,0x2
c001d9f7:	75 1b                	jne    c001da14 <ATAPI::detectMedia()+0x9e>
c001d9f9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d9fe:	75 2d                	jne    c001da2d <ATAPI::detectMedia()+0xb7>
c001da00:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da07:	74 24                	je     c001da2d <ATAPI::detectMedia()+0xb7>
c001da09:	83 ec 0c             	sub    esp,0xc
c001da0c:	53                   	push   ebx
c001da0d:	e8 d6 fe ff ff       	call   c001d8e8 <ATAPI::diskRemoved()>
c001da12:	eb 16                	jmp    c001da2a <ATAPI::detectMedia()+0xb4>
c001da14:	85 c0                	test   eax,eax
c001da16:	75 15                	jne    c001da2d <ATAPI::detectMedia()+0xb7>
c001da18:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da1f:	75 0c                	jne    c001da2d <ATAPI::detectMedia()+0xb7>
c001da21:	83 ec 0c             	sub    esp,0xc
c001da24:	53                   	push   ebx
c001da25:	e8 40 ff ff ff       	call   c001d96a <ATAPI::diskInserted()>
c001da2a:	83 c4 10             	add    esp,0x10
c001da2d:	83 c4 24             	add    esp,0x24
c001da30:	5b                   	pop    ebx
c001da31:	5e                   	pop    esi
c001da32:	c3                   	ret    
c001da33:	90                   	nop

c001da34 <ATAPI::open(int, int, void*)>:
c001da34:	56                   	push   esi
c001da35:	53                   	push   ebx
c001da36:	50                   	push   eax
c001da37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da43:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001da49:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001da4f:	c1 e0 06             	shl    eax,0x6
c001da52:	01 d0                	add    eax,edx
c001da54:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001da5b:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001da61:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001da68:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001da72:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001da78:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001da7f:	6a 04                	push   0x4
c001da81:	6a 0c                	push   0xc
c001da83:	51                   	push   ecx
c001da84:	52                   	push   edx
c001da85:	e8 46 e3 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da8a:	90                   	nop
c001da8b:	90                   	nop
c001da8c:	6a 00                	push   0x0
c001da8e:	6a 0c                	push   0xc
c001da90:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da97:	50                   	push   eax
c001da98:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da9e:	e8 2d e3 ff ff       	call   c001bdd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001daa3:	83 c4 14             	add    esp,0x14
c001daa6:	68 78 01 00 00       	push   0x178
c001daab:	e8 06 a0 fe ff       	call   c0007ab6 <malloc>
c001dab0:	83 c4 0c             	add    esp,0xc
c001dab3:	89 c6                	mov    esi,eax
c001dab5:	6a 00                	push   0x0
c001dab7:	68 ff ff ff 7f       	push   0x7fffffff
c001dabc:	6a 00                	push   0x0
c001dabe:	6a 00                	push   0x0
c001dac0:	53                   	push   ebx
c001dac1:	68 2b 35 02 c0       	push   0xc002352b
c001dac6:	50                   	push   eax
c001dac7:	e8 a0 00 ff ff       	call   c000db6c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001dacc:	83 c4 14             	add    esp,0x14
c001dacf:	56                   	push   esi
c001dad0:	e8 57 01 ff ff       	call   c000dc2c <LogicalDisk::assignDriveLetter()>
c001dad5:	5a                   	pop    edx
c001dad6:	0f be c0             	movsx  eax,al
c001dad9:	59                   	pop    ecx
c001dada:	50                   	push   eax
c001dadb:	68 7c 33 02 c0       	push   0xc002337c
c001dae0:	e8 60 ce fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001dae5:	58                   	pop    eax
c001dae6:	5a                   	pop    edx
c001dae7:	56                   	push   esi
c001dae8:	53                   	push   ebx
c001dae9:	e8 d8 ee fe ff       	call   c000c9c6 <Device::addChild(Device*)>
c001daee:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001daf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001daf7:	e8 fe f2 fe ff       	call   c000cdfa <PhysicalDisk::startCache()>
c001dafc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001db03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db06:	e8 6b fe ff ff       	call   c001d976 <ATAPI::detectMedia()>
c001db0b:	83 c4 14             	add    esp,0x14
c001db0e:	31 c0                	xor    eax,eax
c001db10:	5b                   	pop    ebx
c001db11:	5e                   	pop    esi
c001db12:	c3                   	ret    
c001db13:	90                   	nop

c001db14 <ATAPI::read(unsigned long long, int, void*)>:
c001db14:	55                   	push   ebp
c001db15:	57                   	push   edi
c001db16:	56                   	push   esi
c001db17:	53                   	push   ebx
c001db18:	83 ec 1c             	sub    esp,0x1c
c001db1b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db1f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001db23:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001db27:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001db2e:	74 3c                	je     c001db6c <ATAPI::read(unsigned long long, int, void*)+0x58>
c001db30:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001db34:	b9 03 00 00 00       	mov    ecx,0x3
c001db39:	fc                   	cld    
c001db3a:	31 c0                	xor    eax,eax
c001db3c:	0f ce                	bswap  esi
c001db3e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001db40:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001db45:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001db49:	89 e8                	mov    eax,ebp
c001db4b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001db4f:	50                   	push   eax
c001db50:	50                   	push   eax
c001db51:	55                   	push   ebp
c001db52:	c1 e5 0b             	shl    ebp,0xb
c001db55:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001db59:	6a 00                	push   0x0
c001db5b:	55                   	push   ebp
c001db5c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001db60:	50                   	push   eax
c001db61:	53                   	push   ebx
c001db62:	e8 b9 fa ff ff       	call   c001d620 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001db67:	83 c4 20             	add    esp,0x20
c001db6a:	eb 1a                	jmp    c001db86 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001db6c:	83 ec 0c             	sub    esp,0xc
c001db6f:	53                   	push   ebx
c001db70:	e8 01 fe ff ff       	call   c001d976 <ATAPI::detectMedia()>
c001db75:	83 c4 10             	add    esp,0x10
c001db78:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001db7f:	75 af                	jne    c001db30 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001db81:	b8 02 00 00 00       	mov    eax,0x2
c001db86:	83 c4 1c             	add    esp,0x1c
c001db89:	5b                   	pop    ebx
c001db8a:	5e                   	pop    esi
c001db8b:	5f                   	pop    edi
c001db8c:	5d                   	pop    ebp
c001db8d:	c3                   	ret    

c001db8e <SATA::close(int, int, void*)>:
c001db8e:	83 ec 0c             	sub    esp,0xc
c001db91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db95:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db9b:	85 c0                	test   eax,eax
c001db9d:	74 0c                	je     c001dbab <SATA::close(int, int, void*)+0x1d>
c001db9f:	83 ec 0c             	sub    esp,0xc
c001dba2:	8b 10                	mov    edx,DWORD PTR [eax]
c001dba4:	50                   	push   eax
c001dba5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dba8:	83 c4 10             	add    esp,0x10
c001dbab:	31 c0                	xor    eax,eax
c001dbad:	83 c4 0c             	add    esp,0xc
c001dbb0:	c3                   	ret    
c001dbb1:	90                   	nop

c001dbb2 <SATA::powerSaving(PowerSavingLevel)>:
c001dbb2:	c3                   	ret    
c001dbb3:	90                   	nop

c001dbb4 <SATA::open(int, int, void*)>:
c001dbb4:	56                   	push   esi
c001dbb5:	53                   	push   ebx
c001dbb6:	50                   	push   eax
c001dbb7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dbbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dbbf:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dbc9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001dbcf:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001dbd9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dbdd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dbe7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dbed:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dbf4:	e8 c6 a1 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001dbf9:	89 c6                	mov    esi,eax
c001dbfb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dc01:	81 c6 00 10 00 00    	add    esi,0x1000
c001dc07:	e8 b3 a1 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001dc0c:	39 c6                	cmp    esi,eax
c001dc0e:	74 10                	je     c001dc20 <SATA::open(int, int, void*)+0x6c>
c001dc10:	83 ec 0c             	sub    esp,0xc
c001dc13:	68 c4 33 02 c0       	push   0xc00233c4
c001dc18:	e8 02 3a ff ff       	call   c001161f <KePanic(char const*)>
c001dc1d:	83 c4 10             	add    esp,0x10
c001dc20:	83 ec 0c             	sub    esp,0xc
c001dc23:	6a 02                	push   0x2
c001dc25:	e8 e3 b9 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001dc2a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dc30:	6a 03                	push   0x3
c001dc32:	50                   	push   eax
c001dc33:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dc39:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dc3f:	e8 dc c0 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001dc44:	83 c4 14             	add    esp,0x14
c001dc47:	53                   	push   ebx
c001dc48:	e8 ad f1 fe ff       	call   c000cdfa <PhysicalDisk::startCache()>
c001dc4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc50:	e8 e9 03 ff ff       	call   c000e03e <createPartitionsForDisk(PhysicalDisk*)>
c001dc55:	83 c4 14             	add    esp,0x14
c001dc58:	31 c0                	xor    eax,eax
c001dc5a:	5b                   	pop    ebx
c001dc5b:	5e                   	pop    esi
c001dc5c:	c3                   	ret    
c001dc5d:	90                   	nop

c001dc5e <SATA::SATA()>:
c001dc5e:	83 ec 0c             	sub    esp,0xc
c001dc61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc65:	83 ec 04             	sub    esp,0x4
c001dc68:	68 00 02 00 00       	push   0x200
c001dc6d:	68 d8 33 02 c0       	push   0xc00233d8
c001dc72:	50                   	push   eax
c001dc73:	e8 1a f1 fe ff       	call   c000cd92 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dc78:	83 c4 10             	add    esp,0x10
c001dc7b:	ba 48 34 02 c0       	mov    edx,0xc0023448
c001dc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc84:	89 10                	mov    DWORD PTR [eax],edx
c001dc86:	90                   	nop
c001dc87:	83 c4 0c             	add    esp,0xc
c001dc8a:	c3                   	ret    
c001dc8b:	90                   	nop

c001dc8c <SATA::access(unsigned long long, int, void*, bool)>:
c001dc8c:	55                   	push   ebp
c001dc8d:	57                   	push   edi
c001dc8e:	56                   	push   esi
c001dc8f:	53                   	push   ebx
c001dc90:	83 ec 2c             	sub    esp,0x2c
c001dc93:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dc97:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dc9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dc9f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dca3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dca7:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dcac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dcb0:	7e 10                	jle    c001dcc2 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001dcb2:	83 ec 0c             	sub    esp,0xc
c001dcb5:	68 e8 33 02 c0       	push   0xc00233e8
c001dcba:	e8 60 39 ff ff       	call   c001161f <KePanic(char const*)>
c001dcbf:	83 c4 10             	add    esp,0x10
c001dcc2:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dcc8:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dcce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dcd4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dcd8:	89 d0                	mov    eax,edx
c001dcda:	c1 e0 07             	shl    eax,0x7
c001dcdd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dce1:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dceb:	51                   	push   ecx
c001dcec:	8d 42 02             	lea    eax,[edx+0x2]
c001dcef:	51                   	push   ecx
c001dcf0:	c1 e0 07             	shl    eax,0x7
c001dcf3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dcf7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dcfb:	50                   	push   eax
c001dcfc:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dd02:	e8 91 ec ff ff       	call   c001c998 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dd07:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dd0b:	83 c4 10             	add    esp,0x10
c001dd0e:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001dd13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd17:	0f 84 57 01 00 00    	je     c001de74 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dd1d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dd21:	c1 e0 09             	shl    eax,0x9
c001dd24:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dd29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dd2d:	74 0e                	je     c001dd3d <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001dd2f:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dd35:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dd39:	89 c1                	mov    ecx,eax
c001dd3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dd3d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dd43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dd47:	8d 42 02             	lea    eax,[edx+0x2]
c001dd4a:	c1 e0 07             	shl    eax,0x7
c001dd4d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dd51:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd53:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dd59:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dd5f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd63:	c1 e1 05             	shl    ecx,0x5
c001dd66:	01 c8                	add    eax,ecx
c001dd68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd6c:	83 e1 01             	and    ecx,0x1
c001dd6f:	89 ce                	mov    esi,ecx
c001dd71:	8a 08                	mov    cl,BYTE PTR [eax]
c001dd73:	c1 e6 06             	shl    esi,0x6
c001dd76:	83 e1 bf             	and    ecx,0xffffffbf
c001dd79:	09 f1                	or     ecx,esi
c001dd7b:	88 08                	mov    BYTE PTR [eax],cl
c001dd7d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dd7f:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001dd85:	81 c9 05 00 01 00    	or     ecx,0x10005
c001dd8b:	89 08                	mov    DWORD PTR [eax],ecx
c001dd8d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dd93:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001dd99:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001dd9f:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001dda2:	50                   	push   eax
c001dda3:	68 90 00 00 00       	push   0x90
c001dda8:	6a 00                	push   0x0
c001ddaa:	56                   	push   esi
c001ddab:	e8 40 27 fe ff       	call   c00004f0 <memset>
c001ddb0:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ddb6:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ddbc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ddc0:	83 c4 10             	add    esp,0x10
c001ddc3:	48                   	dec    eax
c001ddc4:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ddc9:	89 c1                	mov    ecx,eax
c001ddcb:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ddd1:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ddd6:	09 c8                	or     eax,ecx
c001ddd8:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ddde:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001dde4:	83 c8 80             	or     eax,0xffffff80
c001dde7:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001dded:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ddf0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ddf4:	25 00 7f 00 00       	and    eax,0x7f00
c001ddf9:	0d 27 80 ff ff       	or     eax,0xffff8027
c001ddfe:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001de03:	66 89 06             	mov    WORD PTR [esi],ax
c001de06:	b0 35                	mov    al,0x35
c001de08:	75 02                	jne    c001de0c <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001de0a:	b0 25                	mov    al,0x25
c001de0c:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001de0f:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001de13:	89 e8                	mov    eax,ebp
c001de15:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001de19:	c1 e8 10             	shr    eax,0x10
c001de1c:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001de1f:	89 e8                	mov    eax,ebp
c001de21:	c1 e8 18             	shr    eax,0x18
c001de24:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001de27:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001de2b:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001de2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de32:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001de35:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001de39:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001de3d:	89 d6                	mov    esi,edx
c001de3f:	31 c0                	xor    eax,eax
c001de41:	c1 e6 07             	shl    esi,0x7
c001de44:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001de48:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001de4e:	80 e1 88             	and    cl,0x88
c001de51:	74 0a                	je     c001de5d <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001de53:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001de58:	74 0a                	je     c001de64 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001de5a:	40                   	inc    eax
c001de5b:	eb eb                	jmp    c001de48 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001de5d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001de62:	75 17                	jne    c001de7b <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001de64:	83 ec 0c             	sub    esp,0xc
c001de67:	68 21 34 02 c0       	push   0xc0023421
c001de6c:	e8 d4 ca fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001de71:	83 c4 10             	add    esp,0x10
c001de74:	b8 01 00 00 00       	mov    eax,0x1
c001de79:	eb 5d                	jmp    c001ded8 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001de7b:	b8 01 00 00 00       	mov    eax,0x1
c001de80:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001de84:	c1 e2 07             	shl    edx,0x7
c001de87:	d3 e0                	shl    eax,cl
c001de89:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001de8d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001de93:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001de99:	85 c8                	test   eax,ecx
c001de9b:	74 16                	je     c001deb3 <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001de9d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001dea3:	0f ba e1 1e          	bt     ecx,0x1e
c001dea7:	73 ea                	jae    c001de93 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001dea9:	83 ec 0c             	sub    esp,0xc
c001deac:	68 2f 34 02 c0       	push   0xc002342f
c001deb1:	eb b9                	jmp    c001de6c <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001deb3:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001deb9:	0f ba e0 1e          	bt     eax,0x1e
c001debd:	72 b5                	jb     c001de74 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001debf:	31 c0                	xor    eax,eax
c001dec1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dec6:	75 10                	jne    c001ded8 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001dec8:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001dece:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ded2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ded6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ded8:	83 c4 2c             	add    esp,0x2c
c001dedb:	5b                   	pop    ebx
c001dedc:	5e                   	pop    esi
c001dedd:	5f                   	pop    edi
c001dede:	5d                   	pop    ebp
c001dedf:	c3                   	ret    

c001dee0 <SATA::read(unsigned long long, int, void*)>:
c001dee0:	55                   	push   ebp
c001dee1:	57                   	push   edi
c001dee2:	56                   	push   esi
c001dee3:	be 04 00 00 00       	mov    esi,0x4
c001dee8:	53                   	push   ebx
c001dee9:	83 ec 0c             	sub    esp,0xc
c001deec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001def0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001def4:	8d 7b ff             	lea    edi,[ebx-0x1]
c001def7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001defb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001deff:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001df05:	0f 87 1a 02 00 00    	ja     c001e125 <SATA::read(unsigned long long, int, void*)+0x245>
c001df0b:	be 06 00 00 00       	mov    esi,0x6
c001df10:	85 c9                	test   ecx,ecx
c001df12:	0f 84 0d 02 00 00    	je     c001e125 <SATA::read(unsigned long long, int, void*)+0x245>
c001df18:	56                   	push   esi
c001df19:	56                   	push   esi
c001df1a:	6a 00                	push   0x0
c001df1c:	51                   	push   ecx
c001df1d:	53                   	push   ebx
c001df1e:	52                   	push   edx
c001df1f:	50                   	push   eax
c001df20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001df24:	e8 63 fd ff ff       	call   c001dc8c <SATA::access(unsigned long long, int, void*, bool)>
c001df29:	83 c4 20             	add    esp,0x20
c001df2c:	89 c6                	mov    esi,eax
c001df2e:	85 c0                	test   eax,eax
c001df30:	0f 85 ea 01 00 00    	jne    c001e120 <SATA::read(unsigned long long, int, void*)+0x240>
c001df36:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001df3c:	bb 0a 00 00 00       	mov    ebx,0xa
c001df41:	50                   	push   eax
c001df42:	50                   	push   eax
c001df43:	6a 0f                	push   0xf
c001df45:	6a 00                	push   0x0
c001df47:	e8 75 f2 ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001df4c:	5a                   	pop    edx
c001df4d:	0f b6 c0             	movzx  eax,al
c001df50:	59                   	pop    ecx
c001df51:	b9 10 27 00 00       	mov    ecx,0x2710
c001df56:	50                   	push   eax
c001df57:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df5c:	99                   	cdq    
c001df5d:	f7 f9                	idiv   ecx
c001df5f:	99                   	cdq    
c001df60:	f7 fb                	idiv   ebx
c001df62:	8d 42 30             	lea    eax,[edx+0x30]
c001df65:	0f b6 c0             	movzx  eax,al
c001df68:	50                   	push   eax
c001df69:	e8 42 f2 ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001df6e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001df74:	5f                   	pop    edi
c001df75:	5d                   	pop    ebp
c001df76:	bd e8 03 00 00       	mov    ebp,0x3e8
c001df7b:	6a 0f                	push   0xf
c001df7d:	6a 00                	push   0x0
c001df7f:	e8 3d f2 ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001df84:	5a                   	pop    edx
c001df85:	0f b6 c0             	movzx  eax,al
c001df88:	59                   	pop    ecx
c001df89:	50                   	push   eax
c001df8a:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df8f:	99                   	cdq    
c001df90:	f7 fd                	idiv   ebp
c001df92:	99                   	cdq    
c001df93:	f7 fb                	idiv   ebx
c001df95:	8d 42 30             	lea    eax,[edx+0x30]
c001df98:	0f b6 c0             	movzx  eax,al
c001df9b:	50                   	push   eax
c001df9c:	e8 0f f2 ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001dfa1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dfa7:	5f                   	pop    edi
c001dfa8:	bf 64 00 00 00       	mov    edi,0x64
c001dfad:	58                   	pop    eax
c001dfae:	6a 0f                	push   0xf
c001dfb0:	6a 00                	push   0x0
c001dfb2:	e8 0a f2 ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001dfb7:	5a                   	pop    edx
c001dfb8:	0f b6 c0             	movzx  eax,al
c001dfbb:	59                   	pop    ecx
c001dfbc:	50                   	push   eax
c001dfbd:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfc2:	99                   	cdq    
c001dfc3:	f7 ff                	idiv   edi
c001dfc5:	99                   	cdq    
c001dfc6:	f7 fb                	idiv   ebx
c001dfc8:	8d 42 30             	lea    eax,[edx+0x30]
c001dfcb:	0f b6 c0             	movzx  eax,al
c001dfce:	50                   	push   eax
c001dfcf:	e8 dc f1 ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001dfd4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dfda:	58                   	pop    eax
c001dfdb:	5a                   	pop    edx
c001dfdc:	6a 0f                	push   0xf
c001dfde:	6a 00                	push   0x0
c001dfe0:	e8 dc f1 ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001dfe5:	59                   	pop    ecx
c001dfe6:	0f b6 c0             	movzx  eax,al
c001dfe9:	5a                   	pop    edx
c001dfea:	50                   	push   eax
c001dfeb:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dff0:	99                   	cdq    
c001dff1:	f7 fb                	idiv   ebx
c001dff3:	99                   	cdq    
c001dff4:	f7 fb                	idiv   ebx
c001dff6:	8d 42 30             	lea    eax,[edx+0x30]
c001dff9:	0f b6 c0             	movzx  eax,al
c001dffc:	50                   	push   eax
c001dffd:	e8 ae f1 ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001e002:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e008:	59                   	pop    ecx
c001e009:	58                   	pop    eax
c001e00a:	6a 0f                	push   0xf
c001e00c:	6a 00                	push   0x0
c001e00e:	e8 ae f1 ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001e013:	5a                   	pop    edx
c001e014:	0f b6 c0             	movzx  eax,al
c001e017:	59                   	pop    ecx
c001e018:	50                   	push   eax
c001e019:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e01e:	99                   	cdq    
c001e01f:	f7 fb                	idiv   ebx
c001e021:	8d 42 30             	lea    eax,[edx+0x30]
c001e024:	0f b6 c0             	movzx  eax,al
c001e027:	50                   	push   eax
c001e028:	e8 83 f1 ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001e02d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e033:	58                   	pop    eax
c001e034:	5a                   	pop    edx
c001e035:	6a 0f                	push   0xf
c001e037:	6a 00                	push   0x0
c001e039:	e8 83 f1 ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001e03e:	59                   	pop    ecx
c001e03f:	0f b6 c0             	movzx  eax,al
c001e042:	5a                   	pop    edx
c001e043:	b9 10 27 00 00       	mov    ecx,0x2710
c001e048:	50                   	push   eax
c001e049:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e04e:	99                   	cdq    
c001e04f:	f7 f9                	idiv   ecx
c001e051:	99                   	cdq    
c001e052:	f7 fb                	idiv   ebx
c001e054:	8d 42 30             	lea    eax,[edx+0x30]
c001e057:	0f b6 c0             	movzx  eax,al
c001e05a:	50                   	push   eax
c001e05b:	e8 50 f1 ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001e060:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e066:	59                   	pop    ecx
c001e067:	58                   	pop    eax
c001e068:	6a 0f                	push   0xf
c001e06a:	6a 00                	push   0x0
c001e06c:	e8 50 f1 ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001e071:	5a                   	pop    edx
c001e072:	0f b6 c0             	movzx  eax,al
c001e075:	59                   	pop    ecx
c001e076:	50                   	push   eax
c001e077:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e07c:	99                   	cdq    
c001e07d:	f7 fd                	idiv   ebp
c001e07f:	99                   	cdq    
c001e080:	f7 fb                	idiv   ebx
c001e082:	8d 42 30             	lea    eax,[edx+0x30]
c001e085:	0f b6 c0             	movzx  eax,al
c001e088:	50                   	push   eax
c001e089:	e8 22 f1 ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001e08e:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e094:	5d                   	pop    ebp
c001e095:	58                   	pop    eax
c001e096:	6a 0f                	push   0xf
c001e098:	6a 00                	push   0x0
c001e09a:	e8 22 f1 ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001e09f:	5a                   	pop    edx
c001e0a0:	0f b6 c0             	movzx  eax,al
c001e0a3:	59                   	pop    ecx
c001e0a4:	50                   	push   eax
c001e0a5:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0aa:	99                   	cdq    
c001e0ab:	f7 ff                	idiv   edi
c001e0ad:	99                   	cdq    
c001e0ae:	f7 fb                	idiv   ebx
c001e0b0:	8d 42 30             	lea    eax,[edx+0x30]
c001e0b3:	0f b6 c0             	movzx  eax,al
c001e0b6:	50                   	push   eax
c001e0b7:	e8 f4 f0 ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001e0bc:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e0c2:	5f                   	pop    edi
c001e0c3:	5d                   	pop    ebp
c001e0c4:	6a 0f                	push   0xf
c001e0c6:	6a 00                	push   0x0
c001e0c8:	e8 f4 f0 ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001e0cd:	5a                   	pop    edx
c001e0ce:	0f b6 c0             	movzx  eax,al
c001e0d1:	59                   	pop    ecx
c001e0d2:	50                   	push   eax
c001e0d3:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0d8:	99                   	cdq    
c001e0d9:	f7 fb                	idiv   ebx
c001e0db:	99                   	cdq    
c001e0dc:	f7 fb                	idiv   ebx
c001e0de:	8d 42 30             	lea    eax,[edx+0x30]
c001e0e1:	0f b6 c0             	movzx  eax,al
c001e0e4:	50                   	push   eax
c001e0e5:	e8 c6 f0 ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001e0ea:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e0f0:	5f                   	pop    edi
c001e0f1:	5d                   	pop    ebp
c001e0f2:	6a 0f                	push   0xf
c001e0f4:	6a 00                	push   0x0
c001e0f6:	e8 c6 f0 ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001e0fb:	5a                   	pop    edx
c001e0fc:	0f b6 c0             	movzx  eax,al
c001e0ff:	59                   	pop    ecx
c001e100:	50                   	push   eax
c001e101:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e106:	99                   	cdq    
c001e107:	f7 fb                	idiv   ebx
c001e109:	83 c2 30             	add    edx,0x30
c001e10c:	0f b6 d2             	movzx  edx,dl
c001e10f:	52                   	push   edx
c001e110:	e8 9b f0 ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001e115:	83 c4 10             	add    esp,0x10
c001e118:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e11e:	eb 05                	jmp    c001e125 <SATA::read(unsigned long long, int, void*)+0x245>
c001e120:	be 01 00 00 00       	mov    esi,0x1
c001e125:	83 c4 0c             	add    esp,0xc
c001e128:	89 f0                	mov    eax,esi
c001e12a:	5b                   	pop    ebx
c001e12b:	5e                   	pop    esi
c001e12c:	5f                   	pop    edi
c001e12d:	5d                   	pop    ebp
c001e12e:	c3                   	ret    
c001e12f:	90                   	nop

c001e130 <SATA::write(unsigned long long, int, void*)>:
c001e130:	55                   	push   ebp
c001e131:	b8 04 00 00 00       	mov    eax,0x4
c001e136:	57                   	push   edi
c001e137:	56                   	push   esi
c001e138:	53                   	push   ebx
c001e139:	83 ec 1c             	sub    esp,0x1c
c001e13c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e140:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e144:	8d 75 ff             	lea    esi,[ebp-0x1]
c001e147:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e14b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001e14f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e155:	0f 87 32 02 00 00    	ja     c001e38d <SATA::write(unsigned long long, int, void*)+0x25d>
c001e15b:	b8 06 00 00 00       	mov    eax,0x6
c001e160:	85 ff                	test   edi,edi
c001e162:	0f 84 25 02 00 00    	je     c001e38d <SATA::write(unsigned long long, int, void*)+0x25d>
c001e168:	89 ee                	mov    esi,ebp
c001e16a:	c1 e6 09             	shl    esi,0x9
c001e16d:	01 fe                	add    esi,edi
c001e16f:	89 c8                	mov    eax,ecx
c001e171:	89 da                	mov    edx,ebx
c001e173:	83 c0 01             	add    eax,0x1
c001e176:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e17a:	83 d2 00             	adc    edx,0x0
c001e17d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e181:	50                   	push   eax
c001e182:	50                   	push   eax
c001e183:	6a 01                	push   0x1
c001e185:	57                   	push   edi
c001e186:	81 c7 00 02 00 00    	add    edi,0x200
c001e18c:	6a 01                	push   0x1
c001e18e:	53                   	push   ebx
c001e18f:	51                   	push   ecx
c001e190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e194:	e8 f3 fa ff ff       	call   c001dc8c <SATA::access(unsigned long long, int, void*, bool)>
c001e199:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e19d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e1a1:	83 c4 20             	add    esp,0x20
c001e1a4:	39 f7                	cmp    edi,esi
c001e1a6:	75 c7                	jne    c001e16f <SATA::write(unsigned long long, int, void*)+0x3f>
c001e1a8:	bb 0a 00 00 00       	mov    ebx,0xa
c001e1ad:	01 2d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebp
c001e1b3:	bd 10 27 00 00       	mov    ebp,0x2710
c001e1b8:	50                   	push   eax
c001e1b9:	50                   	push   eax
c001e1ba:	6a 0f                	push   0xf
c001e1bc:	6a 00                	push   0x0
c001e1be:	e8 fe ef ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001e1c3:	5a                   	pop    edx
c001e1c4:	0f b6 c0             	movzx  eax,al
c001e1c7:	59                   	pop    ecx
c001e1c8:	50                   	push   eax
c001e1c9:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1ce:	99                   	cdq    
c001e1cf:	f7 fd                	idiv   ebp
c001e1d1:	99                   	cdq    
c001e1d2:	f7 fb                	idiv   ebx
c001e1d4:	8d 42 30             	lea    eax,[edx+0x30]
c001e1d7:	0f b6 c0             	movzx  eax,al
c001e1da:	50                   	push   eax
c001e1db:	e8 d0 ef ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001e1e0:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e1e6:	5e                   	pop    esi
c001e1e7:	5f                   	pop    edi
c001e1e8:	bf e8 03 00 00       	mov    edi,0x3e8
c001e1ed:	6a 0f                	push   0xf
c001e1ef:	6a 00                	push   0x0
c001e1f1:	e8 cb ef ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001e1f6:	5a                   	pop    edx
c001e1f7:	0f b6 c0             	movzx  eax,al
c001e1fa:	59                   	pop    ecx
c001e1fb:	50                   	push   eax
c001e1fc:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e201:	99                   	cdq    
c001e202:	f7 ff                	idiv   edi
c001e204:	99                   	cdq    
c001e205:	f7 fb                	idiv   ebx
c001e207:	8d 42 30             	lea    eax,[edx+0x30]
c001e20a:	0f b6 c0             	movzx  eax,al
c001e20d:	50                   	push   eax
c001e20e:	e8 9d ef ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001e213:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e219:	5e                   	pop    esi
c001e21a:	be 64 00 00 00       	mov    esi,0x64
c001e21f:	58                   	pop    eax
c001e220:	6a 0f                	push   0xf
c001e222:	6a 00                	push   0x0
c001e224:	e8 98 ef ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001e229:	5a                   	pop    edx
c001e22a:	0f b6 c0             	movzx  eax,al
c001e22d:	59                   	pop    ecx
c001e22e:	50                   	push   eax
c001e22f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e234:	99                   	cdq    
c001e235:	f7 fe                	idiv   esi
c001e237:	99                   	cdq    
c001e238:	f7 fb                	idiv   ebx
c001e23a:	8d 42 30             	lea    eax,[edx+0x30]
c001e23d:	0f b6 c0             	movzx  eax,al
c001e240:	50                   	push   eax
c001e241:	e8 6a ef ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001e246:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e24c:	58                   	pop    eax
c001e24d:	5a                   	pop    edx
c001e24e:	6a 0f                	push   0xf
c001e250:	6a 00                	push   0x0
c001e252:	e8 6a ef ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001e257:	59                   	pop    ecx
c001e258:	0f b6 c0             	movzx  eax,al
c001e25b:	5a                   	pop    edx
c001e25c:	50                   	push   eax
c001e25d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e262:	99                   	cdq    
c001e263:	f7 fb                	idiv   ebx
c001e265:	99                   	cdq    
c001e266:	f7 fb                	idiv   ebx
c001e268:	8d 42 30             	lea    eax,[edx+0x30]
c001e26b:	0f b6 c0             	movzx  eax,al
c001e26e:	50                   	push   eax
c001e26f:	e8 3c ef ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001e274:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e27a:	59                   	pop    ecx
c001e27b:	58                   	pop    eax
c001e27c:	6a 0f                	push   0xf
c001e27e:	6a 00                	push   0x0
c001e280:	e8 3c ef ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001e285:	5a                   	pop    edx
c001e286:	0f b6 c0             	movzx  eax,al
c001e289:	59                   	pop    ecx
c001e28a:	50                   	push   eax
c001e28b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e290:	99                   	cdq    
c001e291:	f7 fb                	idiv   ebx
c001e293:	83 c2 30             	add    edx,0x30
c001e296:	0f b6 d2             	movzx  edx,dl
c001e299:	52                   	push   edx
c001e29a:	e8 11 ef ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001e29f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e2a5:	58                   	pop    eax
c001e2a6:	5a                   	pop    edx
c001e2a7:	6a 0f                	push   0xf
c001e2a9:	6a 00                	push   0x0
c001e2ab:	e8 11 ef ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001e2b0:	59                   	pop    ecx
c001e2b1:	0f b6 c0             	movzx  eax,al
c001e2b4:	5a                   	pop    edx
c001e2b5:	50                   	push   eax
c001e2b6:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2bb:	99                   	cdq    
c001e2bc:	f7 fd                	idiv   ebp
c001e2be:	99                   	cdq    
c001e2bf:	f7 fb                	idiv   ebx
c001e2c1:	8d 42 30             	lea    eax,[edx+0x30]
c001e2c4:	0f b6 c0             	movzx  eax,al
c001e2c7:	50                   	push   eax
c001e2c8:	e8 e3 ee ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001e2cd:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e2d3:	59                   	pop    ecx
c001e2d4:	5d                   	pop    ebp
c001e2d5:	6a 0f                	push   0xf
c001e2d7:	6a 00                	push   0x0
c001e2d9:	e8 e3 ee ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001e2de:	5a                   	pop    edx
c001e2df:	0f b6 c0             	movzx  eax,al
c001e2e2:	59                   	pop    ecx
c001e2e3:	50                   	push   eax
c001e2e4:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2e9:	99                   	cdq    
c001e2ea:	f7 ff                	idiv   edi
c001e2ec:	99                   	cdq    
c001e2ed:	f7 fb                	idiv   ebx
c001e2ef:	8d 42 30             	lea    eax,[edx+0x30]
c001e2f2:	0f b6 c0             	movzx  eax,al
c001e2f5:	50                   	push   eax
c001e2f6:	e8 b5 ee ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001e2fb:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e301:	5f                   	pop    edi
c001e302:	5d                   	pop    ebp
c001e303:	6a 0f                	push   0xf
c001e305:	6a 00                	push   0x0
c001e307:	e8 b5 ee ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001e30c:	5a                   	pop    edx
c001e30d:	0f b6 c0             	movzx  eax,al
c001e310:	59                   	pop    ecx
c001e311:	50                   	push   eax
c001e312:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e317:	99                   	cdq    
c001e318:	f7 fe                	idiv   esi
c001e31a:	99                   	cdq    
c001e31b:	f7 fb                	idiv   ebx
c001e31d:	8d 42 30             	lea    eax,[edx+0x30]
c001e320:	0f b6 c0             	movzx  eax,al
c001e323:	50                   	push   eax
c001e324:	e8 87 ee ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001e329:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e32f:	5e                   	pop    esi
c001e330:	5f                   	pop    edi
c001e331:	6a 0f                	push   0xf
c001e333:	6a 00                	push   0x0
c001e335:	e8 87 ee ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001e33a:	5d                   	pop    ebp
c001e33b:	0f b6 c0             	movzx  eax,al
c001e33e:	5a                   	pop    edx
c001e33f:	50                   	push   eax
c001e340:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e345:	99                   	cdq    
c001e346:	f7 fb                	idiv   ebx
c001e348:	99                   	cdq    
c001e349:	f7 fb                	idiv   ebx
c001e34b:	8d 42 30             	lea    eax,[edx+0x30]
c001e34e:	0f b6 c0             	movzx  eax,al
c001e351:	50                   	push   eax
c001e352:	e8 59 ee ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001e357:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e35d:	59                   	pop    ecx
c001e35e:	5e                   	pop    esi
c001e35f:	6a 0f                	push   0xf
c001e361:	6a 00                	push   0x0
c001e363:	e8 59 ee ff ff       	call   c001d1c1 <combineColours(unsigned char, unsigned char)>
c001e368:	5f                   	pop    edi
c001e369:	0f b6 c0             	movzx  eax,al
c001e36c:	5d                   	pop    ebp
c001e36d:	50                   	push   eax
c001e36e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e373:	99                   	cdq    
c001e374:	f7 fb                	idiv   ebx
c001e376:	83 c2 30             	add    edx,0x30
c001e379:	0f b6 d2             	movzx  edx,dl
c001e37c:	52                   	push   edx
c001e37d:	e8 2e ee ff ff       	call   c001d1b0 <combineCharAndColour(char, unsigned char)>
c001e382:	83 c4 10             	add    esp,0x10
c001e385:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e38b:	31 c0                	xor    eax,eax
c001e38d:	83 c4 1c             	add    esp,0x1c
c001e390:	5b                   	pop    ebx
c001e391:	5e                   	pop    esi
c001e392:	5f                   	pop    edi
c001e393:	5d                   	pop    ebp
c001e394:	c3                   	ret    
c001e395:	90                   	nop

c001e396 <SATAPI::write(unsigned long long, int, void*)>:
c001e396:	b8 03 00 00 00       	mov    eax,0x3
c001e39b:	c3                   	ret    

c001e39c <SATAPI::close(int, int, void*)>:
c001e39c:	83 ec 0c             	sub    esp,0xc
c001e39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3a3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e3a9:	85 c0                	test   eax,eax
c001e3ab:	74 0c                	je     c001e3b9 <SATAPI::close(int, int, void*)+0x1d>
c001e3ad:	83 ec 0c             	sub    esp,0xc
c001e3b0:	8b 10                	mov    edx,DWORD PTR [eax]
c001e3b2:	50                   	push   eax
c001e3b3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e3b6:	83 c4 10             	add    esp,0x10
c001e3b9:	31 c0                	xor    eax,eax
c001e3bb:	83 c4 0c             	add    esp,0xc
c001e3be:	c3                   	ret    
c001e3bf:	90                   	nop

c001e3c0 <SATAPI::SATAPI()>:
c001e3c0:	83 ec 0c             	sub    esp,0xc
c001e3c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3c7:	83 ec 04             	sub    esp,0x4
c001e3ca:	68 00 08 00 00       	push   0x800
c001e3cf:	68 78 34 02 c0       	push   0xc0023478
c001e3d4:	50                   	push   eax
c001e3d5:	e8 b8 e9 fe ff       	call   c000cd92 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e3da:	83 c4 10             	add    esp,0x10
c001e3dd:	ba 6c 35 02 c0       	mov    edx,0xc002356c
c001e3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e6:	89 10                	mov    DWORD PTR [eax],edx
c001e3e8:	90                   	nop
c001e3e9:	83 c4 0c             	add    esp,0xc
c001e3ec:	c3                   	ret    
c001e3ed:	90                   	nop

c001e3ee <SATAPI::diskRemoved()>:
c001e3ee:	c3                   	ret    
c001e3ef:	90                   	nop

c001e3f0 <SATAPI::diskInserted()>:
c001e3f0:	83 ec 18             	sub    esp,0x18
c001e3f3:	68 84 34 02 c0       	push   0xc0023484
c001e3f8:	e8 48 c5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e3fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e401:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e408:	83 c4 1c             	add    esp,0x1c
c001e40b:	c3                   	ret    

c001e40c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e40c:	55                   	push   ebp
c001e40d:	57                   	push   edi
c001e40e:	56                   	push   esi
c001e40f:	53                   	push   ebx
c001e410:	83 ec 34             	sub    esp,0x34
c001e413:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e417:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e41b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e41f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e423:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e427:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e42d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e433:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e437:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e43d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e441:	83 c0 02             	add    eax,0x2
c001e444:	c1 e0 07             	shl    eax,0x7
c001e447:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e44b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e44f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e453:	c1 e0 07             	shl    eax,0x7
c001e456:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e45a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e45e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e468:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e46c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e472:	e8 21 e5 ff ff       	call   c001c998 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e477:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e47b:	83 c4 10             	add    esp,0x10
c001e47e:	b8 01 00 00 00       	mov    eax,0x1
c001e483:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e488:	0f 84 53 02 00 00    	je     c001e6e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e48e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e494:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e498:	8b 00                	mov    eax,DWORD PTR [eax]
c001e49a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e4a0:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e4a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e4aa:	c1 e1 05             	shl    ecx,0x5
c001e4ad:	01 c8                	add    eax,ecx
c001e4af:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e4b1:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e4b7:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e4bd:	89 08                	mov    DWORD PTR [eax],ecx
c001e4bf:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e4c5:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e4cb:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e4d1:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e4d4:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e4d7:	50                   	push   eax
c001e4d8:	68 90 00 00 00       	push   0x90
c001e4dd:	6a 00                	push   0x0
c001e4df:	53                   	push   ebx
c001e4e0:	e8 0b 20 fe ff       	call   c00004f0 <memset>
c001e4e5:	b9 0c 00 00 00       	mov    ecx,0xc
c001e4ea:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e4ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e4f0:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e4f6:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e4fa:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e500:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e504:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e508:	48                   	dec    eax
c001e509:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e50e:	89 c1                	mov    ecx,eax
c001e510:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e516:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e51b:	09 c8                	or     eax,ecx
c001e51d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e523:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e529:	83 c8 80             	or     eax,0xffffff80
c001e52c:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e532:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e535:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e539:	25 00 7f 00 00       	and    eax,0x7f00
c001e53e:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e542:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e547:	66 89 03             	mov    WORD PTR [ebx],ax
c001e54a:	89 d0                	mov    eax,edx
c001e54c:	c1 ea 18             	shr    edx,0x18
c001e54f:	c1 e8 10             	shr    eax,0x10
c001e552:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e555:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e558:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e55c:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e55f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e563:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e566:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e56a:	83 c4 10             	add    esp,0x10
c001e56d:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e571:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e575:	31 c0                	xor    eax,eax
c001e577:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e57d:	80 e1 88             	and    cl,0x88
c001e580:	74 0a                	je     c001e58c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e582:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e587:	74 0a                	je     c001e593 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e589:	40                   	inc    eax
c001e58a:	eb eb                	jmp    c001e577 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e58c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e591:	75 43                	jne    c001e5d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e593:	83 ec 0c             	sub    esp,0xc
c001e596:	68 9c 34 02 c0       	push   0xc002349c
c001e59b:	e8 a5 c3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e5a0:	58                   	pop    eax
c001e5a1:	5a                   	pop    edx
c001e5a2:	68 b1 34 02 c0       	push   0xc00234b1
c001e5a7:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e5ad:	e8 f4 a4 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001e5b2:	59                   	pop    ecx
c001e5b3:	5b                   	pop    ebx
c001e5b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e5b8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e5be:	e8 6f e4 ff ff       	call   c001ca32 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e5c3:	5e                   	pop    esi
c001e5c4:	5f                   	pop    edi
c001e5c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e5c9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e5cf:	e8 3e e4 ff ff       	call   c001ca12 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e5d4:	eb 48                	jmp    c001e61e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e5d6:	be 01 00 00 00       	mov    esi,0x1
c001e5db:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e5df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e5e3:	d3 e6                	shl    esi,cl
c001e5e5:	c1 e7 07             	shl    edi,0x7
c001e5e8:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e5ee:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e5f3:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e5f7:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e5fd:	85 c6                	test   esi,eax
c001e5ff:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e605:	0f 84 a3 00 00 00    	je     c001e6ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e60b:	0f ba e0 1e          	bt     eax,0x1e
c001e60f:	73 1a                	jae    c001e62b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e611:	83 ec 0c             	sub    esp,0xc
c001e614:	68 c3 34 02 c0       	push   0xc00234c3
c001e619:	e8 27 c3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e61e:	83 c4 10             	add    esp,0x10
c001e621:	b8 01 00 00 00       	mov    eax,0x1
c001e626:	e9 b6 00 00 00       	jmp    c001e6e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e62b:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e631:	83 f8 0d             	cmp    eax,0xd
c001e634:	77 0a                	ja     c001e640 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e636:	83 ec 0c             	sub    esp,0xc
c001e639:	68 c8 00 00 00       	push   0xc8
c001e63e:	eb 28                	jmp    c001e668 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e640:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e646:	83 f8 0d             	cmp    eax,0xd
c001e649:	77 0a                	ja     c001e655 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e64b:	83 ec 0c             	sub    esp,0xc
c001e64e:	68 58 02 00 00       	push   0x258
c001e653:	eb 13                	jmp    c001e668 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e655:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e65b:	83 f8 06             	cmp    eax,0x6
c001e65e:	77 10                	ja     c001e670 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e660:	83 ec 0c             	sub    esp,0xc
c001e663:	68 dc 05 00 00       	push   0x5dc
c001e668:	e8 c7 7d ff ff       	call   c0016434 <milliTenthSleep(unsigned int)>
c001e66d:	83 c4 10             	add    esp,0x10
c001e670:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e674:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e677:	75 06                	jne    c001e67f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e679:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e67d:	74 15                	je     c001e694 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e67f:	83 fb 06             	cmp    ebx,0x6
c001e682:	77 10                	ja     c001e694 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e684:	83 ec 0c             	sub    esp,0xc
c001e687:	68 c4 09 00 00       	push   0x9c4
c001e68c:	e8 a3 7d ff ff       	call   c0016434 <milliTenthSleep(unsigned int)>
c001e691:	83 c4 10             	add    esp,0x10
c001e694:	43                   	inc    ebx
c001e695:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e69b:	0f 85 56 ff ff ff    	jne    c001e5f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e6a1:	83 ec 0c             	sub    esp,0xc
c001e6a4:	68 d6 34 02 c0       	push   0xc00234d6
c001e6a9:	e9 6b ff ff ff       	jmp    c001e619 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e6ae:	0f ba e0 1e          	bt     eax,0x1e
c001e6b2:	73 0d                	jae    c001e6c1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e6b4:	83 ec 0c             	sub    esp,0xc
c001e6b7:	68 ea 34 02 c0       	push   0xc00234ea
c001e6bc:	e9 58 ff ff ff       	jmp    c001e619 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e6c1:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e6c6:	74 17                	je     c001e6df <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e6c8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e6cd:	74 10                	je     c001e6df <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e6cf:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e6d5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e6d9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e6dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e6df:	31 c0                	xor    eax,eax
c001e6e1:	83 c4 2c             	add    esp,0x2c
c001e6e4:	5b                   	pop    ebx
c001e6e5:	5e                   	pop    esi
c001e6e6:	5f                   	pop    edi
c001e6e7:	5d                   	pop    ebp
c001e6e8:	c3                   	ret    
c001e6e9:	90                   	nop

c001e6ea <SATAPI::eject()>:
c001e6ea:	57                   	push   edi
c001e6eb:	b9 03 00 00 00       	mov    ecx,0x3
c001e6f0:	83 ec 18             	sub    esp,0x18
c001e6f3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e6f7:	fc                   	cld    
c001e6f8:	31 c0                	xor    eax,eax
c001e6fa:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e6fc:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e701:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e706:	50                   	push   eax
c001e707:	6a 00                	push   0x0
c001e709:	6a 00                	push   0x0
c001e70b:	6a 00                	push   0x0
c001e70d:	6a 00                	push   0x0
c001e70f:	6a 02                	push   0x2
c001e711:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e715:	50                   	push   eax
c001e716:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e71a:	e8 ed fc ff ff       	call   c001e40c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e71f:	31 c0                	xor    eax,eax
c001e721:	83 c4 38             	add    esp,0x38
c001e724:	5f                   	pop    edi
c001e725:	c3                   	ret    

c001e726 <SATAPI::detectMedia()>:
c001e726:	53                   	push   ebx
c001e727:	83 ec 14             	sub    esp,0x14
c001e72a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e72e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e734:	e8 d7 ff fe ff       	call   c000e710 <VCache::writeWriteBuffer()>
c001e739:	59                   	pop    ecx
c001e73a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e740:	e8 bb ff fe ff       	call   c000e700 <VCache::invalidateReadBuffer()>
c001e745:	c7 04 24 ff 34 02 c0 	mov    DWORD PTR [esp],0xc00234ff
c001e74c:	e8 f4 c1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e751:	83 c4 10             	add    esp,0x10
c001e754:	31 c0                	xor    eax,eax
c001e756:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e75d:	85 d2                	test   edx,edx
c001e75f:	74 0f                	je     c001e770 <SATAPI::detectMedia()+0x4a>
c001e761:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e767:	75 07                	jne    c001e770 <SATAPI::detectMedia()+0x4a>
c001e769:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e770:	40                   	inc    eax
c001e771:	83 f8 1a             	cmp    eax,0x1a
c001e774:	75 e0                	jne    c001e756 <SATAPI::detectMedia()+0x30>
c001e776:	83 c4 08             	add    esp,0x8
c001e779:	5b                   	pop    ebx
c001e77a:	c3                   	ret    
c001e77b:	90                   	nop

c001e77c <SATAPI::open(int, int, void*)>:
c001e77c:	56                   	push   esi
c001e77d:	53                   	push   ebx
c001e77e:	51                   	push   ecx
c001e77f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e783:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e787:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e791:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e797:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e7a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e7a5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e7af:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e7b5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e7bc:	e8 fe 95 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e7c1:	89 c6                	mov    esi,eax
c001e7c3:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e7c9:	81 c6 00 10 00 00    	add    esi,0x1000
c001e7cf:	e8 eb 95 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e7d4:	39 c6                	cmp    esi,eax
c001e7d6:	74 10                	je     c001e7e8 <SATAPI::open(int, int, void*)+0x6c>
c001e7d8:	83 ec 0c             	sub    esp,0xc
c001e7db:	68 14 35 02 c0       	push   0xc0023514
c001e7e0:	e8 3a 2e ff ff       	call   c001161f <KePanic(char const*)>
c001e7e5:	83 c4 10             	add    esp,0x10
c001e7e8:	83 ec 0c             	sub    esp,0xc
c001e7eb:	6a 02                	push   0x2
c001e7ed:	e8 1b ae fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e7f2:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e7f8:	6a 03                	push   0x3
c001e7fa:	50                   	push   eax
c001e7fb:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e801:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e807:	e8 14 b5 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e80c:	83 c4 14             	add    esp,0x14
c001e80f:	68 78 01 00 00       	push   0x178
c001e814:	e8 9d 92 fe ff       	call   c0007ab6 <malloc>
c001e819:	83 c4 0c             	add    esp,0xc
c001e81c:	89 c6                	mov    esi,eax
c001e81e:	6a 00                	push   0x0
c001e820:	68 ff ff ff 7f       	push   0x7fffffff
c001e825:	6a 00                	push   0x0
c001e827:	6a 00                	push   0x0
c001e829:	53                   	push   ebx
c001e82a:	68 2a 35 02 c0       	push   0xc002352a
c001e82f:	50                   	push   eax
c001e830:	e8 37 f3 fe ff       	call   c000db6c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e835:	83 c4 14             	add    esp,0x14
c001e838:	56                   	push   esi
c001e839:	e8 ee f3 fe ff       	call   c000dc2c <LogicalDisk::assignDriveLetter()>
c001e83e:	5a                   	pop    edx
c001e83f:	0f be c0             	movsx  eax,al
c001e842:	59                   	pop    ecx
c001e843:	50                   	push   eax
c001e844:	68 7c 33 02 c0       	push   0xc002337c
c001e849:	e8 f7 c0 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e84e:	58                   	pop    eax
c001e84f:	5a                   	pop    edx
c001e850:	56                   	push   esi
c001e851:	53                   	push   ebx
c001e852:	e8 6f e1 fe ff       	call   c000c9c6 <Device::addChild(Device*)>
c001e857:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e85d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e860:	e8 95 e5 fe ff       	call   c000cdfa <PhysicalDisk::startCache()>
c001e865:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e86c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e86f:	e8 b2 fe ff ff       	call   c001e726 <SATAPI::detectMedia()>
c001e874:	83 c4 14             	add    esp,0x14
c001e877:	31 c0                	xor    eax,eax
c001e879:	5b                   	pop    ebx
c001e87a:	5e                   	pop    esi
c001e87b:	c3                   	ret    

c001e87c <SATAPI::read(unsigned long long, int, void*)>:
c001e87c:	57                   	push   edi
c001e87d:	56                   	push   esi
c001e87e:	53                   	push   ebx
c001e87f:	83 ec 30             	sub    esp,0x30
c001e882:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e886:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e88a:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e88e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e892:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e896:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e89a:	83 fe 04             	cmp    esi,0x4
c001e89d:	7e 10                	jle    c001e8af <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e89f:	83 ec 0c             	sub    esp,0xc
c001e8a2:	68 38 35 02 c0       	push   0xc0023538
c001e8a7:	e8 73 2d ff ff       	call   c001161f <KePanic(char const*)>
c001e8ac:	83 c4 10             	add    esp,0x10
c001e8af:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e8b5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e8bb:	51                   	push   ecx
c001e8bc:	50                   	push   eax
c001e8bd:	83 c0 02             	add    eax,0x2
c001e8c0:	c1 e0 07             	shl    eax,0x7
c001e8c3:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e8c9:	50                   	push   eax
c001e8ca:	52                   	push   edx
c001e8cb:	e8 8c e1 ff ff       	call   c001ca5c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e8d0:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e8d4:	b9 03 00 00 00       	mov    ecx,0x3
c001e8d9:	fc                   	cld    
c001e8da:	31 c0                	xor    eax,eax
c001e8dc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e8de:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e8e3:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e8e8:	83 c4 0c             	add    esp,0xc
c001e8eb:	6a 00                	push   0x0
c001e8ed:	6a 00                	push   0x0
c001e8ef:	6a 00                	push   0x0
c001e8f1:	6a 00                	push   0x0
c001e8f3:	6a 02                	push   0x2
c001e8f5:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e8f9:	50                   	push   eax
c001e8fa:	53                   	push   ebx
c001e8fb:	e8 0c fb ff ff       	call   c001e40c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e900:	83 c4 20             	add    esp,0x20
c001e903:	85 c0                	test   eax,eax
c001e905:	75 44                	jne    c001e94b <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e907:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e90b:	b9 03 00 00 00       	mov    ecx,0x3
c001e910:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e912:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e916:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e91b:	0f c8                	bswap  eax
c001e91d:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e921:	89 f0                	mov    eax,esi
c001e923:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e927:	50                   	push   eax
c001e928:	56                   	push   esi
c001e929:	c1 e6 0b             	shl    esi,0xb
c001e92c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e930:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e934:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e938:	56                   	push   esi
c001e939:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e93d:	50                   	push   eax
c001e93e:	53                   	push   ebx
c001e93f:	e8 c8 fa ff ff       	call   c001e40c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e944:	83 c4 20             	add    esp,0x20
c001e947:	85 c0                	test   eax,eax
c001e949:	74 14                	je     c001e95f <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e94b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e94f:	83 ec 0c             	sub    esp,0xc
c001e952:	53                   	push   ebx
c001e953:	e8 ce fd ff ff       	call   c001e726 <SATAPI::detectMedia()>
c001e958:	83 c4 10             	add    esp,0x10
c001e95b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e95f:	83 c4 30             	add    esp,0x30
c001e962:	5b                   	pop    ebx
c001e963:	5e                   	pop    esi
c001e964:	5f                   	pop    edi
c001e965:	c3                   	ret    

c001e966 <IOAPIC::close(int, int, void*)>:
c001e966:	b8 00 00 00 00       	mov    eax,0x0
c001e96b:	c3                   	ret    

c001e96c <apicGetBase()>:
c001e96c:	55                   	push   ebp
c001e96d:	89 e5                	mov    ebp,esp
c001e96f:	83 ec 18             	sub    esp,0x18
c001e972:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e977:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e97d:	83 e0 08             	and    eax,0x8
c001e980:	0f b6 c0             	movzx  eax,al
c001e983:	85 c0                	test   eax,eax
c001e985:	75 07                	jne    c001e98e <apicGetBase()+0x22>
c001e987:	b8 00 00 00 00       	mov    eax,0x0
c001e98c:	eb 21                	jmp    c001e9af <apicGetBase()+0x43>
c001e98e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e993:	83 ec 08             	sub    esp,0x8
c001e996:	6a 1b                	push   0x1b
c001e998:	50                   	push   eax
c001e999:	e8 22 87 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e99e:	83 c4 10             	add    esp,0x10
c001e9a1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e9a4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e9a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e9aa:	25 00 00 ff ff       	and    eax,0xffff0000
c001e9af:	c9                   	leave  
c001e9b0:	c3                   	ret    
c001e9b1:	90                   	nop

c001e9b2 <IOAPIC::IOAPIC()>:
c001e9b2:	83 ec 0c             	sub    esp,0xc
c001e9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b9:	83 ec 08             	sub    esp,0x8
c001e9bc:	68 9c 35 02 c0       	push   0xc002359c
c001e9c1:	50                   	push   eax
c001e9c2:	e8 97 e1 fe ff       	call   c000cb5e <Device::Device(char const*)>
c001e9c7:	83 c4 10             	add    esp,0x10
c001e9ca:	ba ac 35 02 c0       	mov    edx,0xc00235ac
c001e9cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d3:	89 10                	mov    DWORD PTR [eax],edx
c001e9d5:	90                   	nop
c001e9d6:	83 c4 0c             	add    esp,0xc
c001e9d9:	c3                   	ret    

c001e9da <apicOpen()>:
c001e9da:	55                   	push   ebp
c001e9db:	89 e5                	mov    ebp,esp
c001e9dd:	53                   	push   ebx
c001e9de:	83 ec 34             	sub    esp,0x34
c001e9e1:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001e9e6:	83 f0 01             	xor    eax,0x1
c001e9e9:	0f b6 c0             	movzx  eax,al
c001e9ec:	85 c0                	test   eax,eax
c001e9ee:	0f 84 a3 00 00 00    	je     c001ea97 <apicOpen()+0xbd>
c001e9f4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e9f8:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001e9fd:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ea01:	0f b6 c0             	movzx  eax,al
c001ea04:	39 c2                	cmp    edx,eax
c001ea06:	0f 83 84 00 00 00    	jae    c001ea90 <apicOpen()+0xb6>
c001ea0c:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ea13:	83 ec 0c             	sub    esp,0xc
c001ea16:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ea19:	e8 98 90 fe ff       	call   c0007ab6 <malloc>
c001ea1e:	83 c4 10             	add    esp,0x10
c001ea21:	89 c3                	mov    ebx,eax
c001ea23:	83 ec 0c             	sub    esp,0xc
c001ea26:	53                   	push   ebx
c001ea27:	e8 86 ff ff ff       	call   c001e9b2 <IOAPIC::IOAPIC()>
c001ea2c:	83 c4 10             	add    esp,0x10
c001ea2f:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ea32:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001ea36:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ea39:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001ea40:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001ea45:	83 c0 01             	add    eax,0x1
c001ea48:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001ea4d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea52:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001ea58:	83 ec 08             	sub    esp,0x8
c001ea5b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ea5e:	50                   	push   eax
c001ea5f:	e8 62 df fe ff       	call   c000c9c6 <Device::addChild(Device*)>
c001ea64:	83 c4 10             	add    esp,0x10
c001ea67:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ea6a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea6c:	83 c0 08             	add    eax,0x8
c001ea6f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea71:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ea75:	6a 00                	push   0x0
c001ea77:	6a 00                	push   0x0
c001ea79:	52                   	push   edx
c001ea7a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ea7d:	ff d0                	call   eax
c001ea7f:	83 c4 10             	add    esp,0x10
c001ea82:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ea85:	83 c0 01             	add    eax,0x1
c001ea88:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001ea8b:	e9 68 ff ff ff       	jmp    c001e9f8 <apicOpen()+0x1e>
c001ea90:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001ea97:	e8 d0 fe ff ff       	call   c001e96c <apicGetBase()>
c001ea9c:	05 f0 00 00 00       	add    eax,0xf0
c001eaa1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eaa4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eaa7:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaa9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eaac:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001eab3:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001eaba:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eabd:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eac0:	89 10                	mov    DWORD PTR [eax],edx
c001eac2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001eac9:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001eace:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ead1:	7d 7c                	jge    c001eb4f <apicOpen()+0x175>
c001ead3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ead6:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eadd:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001eae0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eae3:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eaea:	c1 e8 08             	shr    eax,0x8
c001eaed:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001eaf1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eaf4:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eafb:	c1 e8 18             	shr    eax,0x18
c001eafe:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001eb01:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001eb05:	3d ff 00 00 00       	cmp    eax,0xff
c001eb0a:	75 3a                	jne    c001eb46 <apicOpen()+0x16c>
c001eb0c:	e8 5b fe ff ff       	call   c001e96c <apicGetBase()>
c001eb11:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001eb15:	83 fa 01             	cmp    edx,0x1
c001eb18:	75 07                	jne    c001eb21 <apicOpen()+0x147>
c001eb1a:	ba 60 03 00 00       	mov    edx,0x360
c001eb1f:	eb 05                	jmp    c001eb26 <apicOpen()+0x14c>
c001eb21:	ba 50 03 00 00       	mov    edx,0x350
c001eb26:	01 d0                	add    eax,edx
c001eb28:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eb2b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eb2e:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb30:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001eb33:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001eb3a:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001eb3e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eb41:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eb44:	89 10                	mov    DWORD PTR [eax],edx
c001eb46:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001eb4a:	e9 7a ff ff ff       	jmp    c001eac9 <apicOpen()+0xef>
c001eb4f:	90                   	nop
c001eb50:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001eb53:	c9                   	leave  
c001eb54:	c3                   	ret    
c001eb55:	90                   	nop

c001eb56 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001eb56:	55                   	push   ebp
c001eb57:	89 e5                	mov    ebp,esp
c001eb59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb5c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eb62:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eb65:	72 1d                	jb     c001eb84 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eb67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb6a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001eb70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb73:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001eb79:	01 d0                	add    eax,edx
c001eb7b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eb7e:	73 04                	jae    c001eb84 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eb80:	b0 01                	mov    al,0x1
c001eb82:	eb 02                	jmp    c001eb86 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001eb84:	b0 00                	mov    al,0x0
c001eb86:	5d                   	pop    ebp
c001eb87:	c3                   	ret    

c001eb88 <IOAPIC::read(int)>:
c001eb88:	55                   	push   ebp
c001eb89:	89 e5                	mov    ebp,esp
c001eb8b:	83 ec 10             	sub    esp,0x10
c001eb8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb91:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eb97:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001eb9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eb9d:	0f b6 d0             	movzx  edx,al
c001eba0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eba3:	89 10                	mov    DWORD PTR [eax],edx
c001eba5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eba8:	83 c0 10             	add    eax,0x10
c001ebab:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebad:	c9                   	leave  
c001ebae:	c3                   	ret    
c001ebaf:	90                   	nop

c001ebb0 <IOAPIC::open(int, int, void*)>:
c001ebb0:	55                   	push   ebp
c001ebb1:	89 e5                	mov    ebp,esp
c001ebb3:	57                   	push   edi
c001ebb4:	56                   	push   esi
c001ebb5:	53                   	push   ebx
c001ebb6:	83 ec 04             	sub    esp,0x4
c001ebb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebbc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ebbf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ebc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebc8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ebce:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001ebd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebd8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ebde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebe1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ebe7:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001ebee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebf1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ebf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebfa:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ec00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec03:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ec09:	0f b6 f0             	movzx  esi,al
c001ec0c:	89 d0                	mov    eax,edx
c001ec0e:	ba 00 00 00 00       	mov    edx,0x0
c001ec13:	89 c7                	mov    edi,eax
c001ec15:	83 e7 ff             	and    edi,0xffffffff
c001ec18:	89 f9                	mov    ecx,edi
c001ec1a:	0f b6 da             	movzx  ebx,dl
c001ec1d:	89 c8                	mov    eax,ecx
c001ec1f:	89 da                	mov    edx,ebx
c001ec21:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ec24:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ec27:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ec2b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ec2f:	83 e0 00             	and    eax,0x0
c001ec32:	09 d0                	or     eax,edx
c001ec34:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ec38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec3b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ec41:	8d 50 01             	lea    edx,[eax+0x1]
c001ec44:	88 d1                	mov    cl,dl
c001ec46:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ec49:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ec4f:	0f b6 d0             	movzx  edx,al
c001ec52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec55:	83 c2 08             	add    edx,0x8
c001ec58:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ec5c:	0f b6 c9             	movzx  ecx,cl
c001ec5f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ec65:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ec69:	6a 01                	push   0x1
c001ec6b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec6e:	e8 15 ff ff ff       	call   c001eb88 <IOAPIC::read(int)>
c001ec73:	83 c4 08             	add    esp,0x8
c001ec76:	c1 f8 10             	sar    eax,0x10
c001ec79:	0f b6 c0             	movzx  eax,al
c001ec7c:	8d 50 01             	lea    edx,[eax+0x1]
c001ec7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec82:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ec88:	b8 00 00 00 00       	mov    eax,0x0
c001ec8d:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ec90:	5b                   	pop    ebx
c001ec91:	5e                   	pop    esi
c001ec92:	5f                   	pop    edi
c001ec93:	5d                   	pop    ebp
c001ec94:	c3                   	ret    
c001ec95:	90                   	nop

c001ec96 <IOAPIC::write(int, int)>:
c001ec96:	55                   	push   ebp
c001ec97:	89 e5                	mov    ebp,esp
c001ec99:	83 ec 10             	sub    esp,0x10
c001ec9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec9f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eca5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001eca8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ecab:	0f b6 d0             	movzx  edx,al
c001ecae:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ecb1:	89 10                	mov    DWORD PTR [eax],edx
c001ecb3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ecb6:	8d 50 10             	lea    edx,[eax+0x10]
c001ecb9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ecbc:	89 02                	mov    DWORD PTR [edx],eax
c001ecbe:	90                   	nop
c001ecbf:	c9                   	leave  
c001ecc0:	c3                   	ret    
c001ecc1:	90                   	nop

c001ecc2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ecc2:	55                   	push   ebp
c001ecc3:	89 e5                	mov    ebp,esp
c001ecc5:	53                   	push   ebx
c001ecc6:	83 ec 2c             	sub    esp,0x2c
c001ecc9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eccc:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001eccf:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ecd2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ecd5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ecd8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ecdb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ecde:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ece1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ece4:	88 d8                	mov    al,bl
c001ece6:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ece9:	88 c8                	mov    al,cl
c001eceb:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ecee:	88 d0                	mov    al,dl
c001ecf0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ecf3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ecf7:	83 c0 08             	add    eax,0x8
c001ecfa:	01 c0                	add    eax,eax
c001ecfc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ecff:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed03:	83 c0 08             	add    eax,0x8
c001ed06:	01 c0                	add    eax,eax
c001ed08:	83 c0 01             	add    eax,0x1
c001ed0b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ed0e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed11:	50                   	push   eax
c001ed12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed15:	e8 6e fe ff ff       	call   c001eb88 <IOAPIC::read(int)>
c001ed1a:	83 c4 08             	add    esp,0x8
c001ed1d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ed20:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ed27:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ed2a:	c1 e0 18             	shl    eax,0x18
c001ed2d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ed30:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ed33:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed36:	52                   	push   edx
c001ed37:	50                   	push   eax
c001ed38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed3b:	e8 56 ff ff ff       	call   c001ec96 <IOAPIC::write(int, int)>
c001ed40:	83 c4 0c             	add    esp,0xc
c001ed43:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ed46:	50                   	push   eax
c001ed47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed4a:	e8 39 fe ff ff       	call   c001eb88 <IOAPIC::read(int)>
c001ed4f:	83 c4 08             	add    esp,0x8
c001ed52:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ed55:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ed5c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ed63:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ed6a:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ed6e:	85 c0                	test   eax,eax
c001ed70:	74 09                	je     c001ed7b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ed72:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ed79:	eb 07                	jmp    c001ed82 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ed7b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ed82:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ed86:	85 c0                	test   eax,eax
c001ed88:	74 09                	je     c001ed93 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ed8a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ed91:	eb 07                	jmp    c001ed9a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ed93:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ed9a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001eda1:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001eda5:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001eda8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001edab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001edae:	52                   	push   edx
c001edaf:	50                   	push   eax
c001edb0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001edb3:	e8 de fe ff ff       	call   c001ec96 <IOAPIC::write(int, int)>
c001edb8:	83 c4 0c             	add    esp,0xc
c001edbb:	90                   	nop
c001edbc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001edbf:	c9                   	leave  
c001edc0:	c3                   	ret    
c001edc1:	66 90                	xchg   ax,ax
c001edc3:	90                   	nop

c001edc4 <APICTimer::close(int, int, void*)>:
c001edc4:	b8 00 00 00 00       	mov    eax,0x0
c001edc9:	c3                   	ret    
c001edca:	66 90                	xchg   ax,ax

c001edcc <apicTimerHandler(regs*, void*)>:
c001edcc:	83 ec 0c             	sub    esp,0xc
c001edcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001edd3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001edd5:	b8 10 27 00 00       	mov    eax,0x2710
c001edda:	ba 00 00 00 00       	mov    edx,0x0
c001eddf:	f7 f1                	div    ecx
c001ede1:	83 ec 0c             	sub    esp,0xc
c001ede4:	50                   	push   eax
c001ede5:	e8 3e f6 fe ff       	call   c000e428 <timerHandler(unsigned int)>
c001edea:	83 c4 10             	add    esp,0x10
c001eded:	90                   	nop
c001edee:	83 c4 0c             	add    esp,0xc
c001edf1:	c3                   	ret    
c001edf2:	66 90                	xchg   ax,ax

c001edf4 <APICTimer::open(int, int, void*)>:
c001edf4:	83 ec 0c             	sub    esp,0xc
c001edf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edfb:	8b 00                	mov    eax,DWORD PTR [eax]
c001edfd:	83 c0 24             	add    eax,0x24
c001ee00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee02:	83 ec 08             	sub    esp,0x8
c001ee05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee0d:	ff d0                	call   eax
c001ee0f:	83 c4 10             	add    esp,0x10
c001ee12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee16:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee1a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ee20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee28:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ee2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee32:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ee38:	83 ec 0c             	sub    esp,0xc
c001ee3b:	51                   	push   ecx
c001ee3c:	6a 01                	push   0x1
c001ee3e:	68 cc ed 01 c0       	push   0xc001edcc
c001ee43:	52                   	push   edx
c001ee44:	50                   	push   eax
c001ee45:	e8 28 db fe ff       	call   c000c972 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee4a:	83 c4 20             	add    esp,0x20
c001ee4d:	89 c2                	mov    edx,eax
c001ee4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee53:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ee59:	b8 00 00 00 00       	mov    eax,0x0
c001ee5e:	83 c4 0c             	add    esp,0xc
c001ee61:	c3                   	ret    
c001ee62:	66 90                	xchg   ax,ax

c001ee64 <APICTimer::write(int)>:
c001ee64:	83 ec 0c             	sub    esp,0xc
c001ee67:	83 ec 0c             	sub    esp,0xc
c001ee6a:	68 d0 35 02 c0       	push   0xc00235d0
c001ee6f:	e8 ab 27 ff ff       	call   c001161f <KePanic(char const*)>
c001ee74:	83 c4 10             	add    esp,0x10
c001ee77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee7f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee85:	90                   	nop
c001ee86:	83 c4 0c             	add    esp,0xc
c001ee89:	c3                   	ret    
c001ee8a:	66 90                	xchg   ax,ax

c001ee8c <APICTimer::APICTimer()>:
c001ee8c:	83 ec 0c             	sub    esp,0xc
c001ee8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee93:	83 ec 08             	sub    esp,0x8
c001ee96:	68 e0 35 02 c0       	push   0xc00235e0
c001ee9b:	50                   	push   eax
c001ee9c:	e8 bb f4 fe ff       	call   c000e35c <Timer::Timer(char const*)>
c001eea1:	83 c4 10             	add    esp,0x10
c001eea4:	ba f4 35 02 c0       	mov    edx,0xc00235f4
c001eea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eead:	89 10                	mov    DWORD PTR [eax],edx
c001eeaf:	90                   	nop
c001eeb0:	83 c4 0c             	add    esp,0xc
c001eeb3:	c3                   	ret    

c001eeb4 <PIT::write(int)>:
c001eeb4:	83 ec 10             	sub    esp,0x10
c001eeb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eebb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eebf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eec5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eec9:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001eece:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001eed3:	89 c2                	mov    edx,eax
c001eed5:	c1 fa 1f             	sar    edx,0x1f
c001eed8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001eedc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eee0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001eee7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eeec:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001eef0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001eef5:	ee                   	out    dx,al
c001eef6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eefa:	0f b6 c0             	movzx  eax,al
c001eefd:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ef04:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ef08:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ef0c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ef11:	ee                   	out    dx,al
c001ef12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef16:	c1 f8 08             	sar    eax,0x8
c001ef19:	0f b6 c0             	movzx  eax,al
c001ef1c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ef23:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ef27:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ef2b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ef30:	ee                   	out    dx,al
c001ef31:	90                   	nop
c001ef32:	83 c4 10             	add    esp,0x10
c001ef35:	c3                   	ret    
c001ef36:	66 90                	xchg   ax,ax

c001ef38 <pitHandler(regs*, void*)>:
c001ef38:	83 ec 0c             	sub    esp,0xc
c001ef3b:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001ef41:	b8 10 27 00 00       	mov    eax,0x2710
c001ef46:	89 c2                	mov    edx,eax
c001ef48:	c1 fa 1f             	sar    edx,0x1f
c001ef4b:	f7 f9                	idiv   ecx
c001ef4d:	83 ec 0c             	sub    esp,0xc
c001ef50:	50                   	push   eax
c001ef51:	e8 d2 f4 fe ff       	call   c000e428 <timerHandler(unsigned int)>
c001ef56:	83 c4 10             	add    esp,0x10
c001ef59:	90                   	nop
c001ef5a:	83 c4 0c             	add    esp,0xc
c001ef5d:	c3                   	ret    
c001ef5e:	66 90                	xchg   ax,ax

c001ef60 <PIT::open(int, int, void*)>:
c001ef60:	83 ec 0c             	sub    esp,0xc
c001ef63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef67:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef69:	83 c0 24             	add    eax,0x24
c001ef6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef6e:	83 ec 08             	sub    esp,0x8
c001ef71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef79:	ff d0                	call   eax
c001ef7b:	83 c4 10             	add    esp,0x10
c001ef7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef82:	83 ec 0c             	sub    esp,0xc
c001ef85:	6a 00                	push   0x0
c001ef87:	6a 01                	push   0x1
c001ef89:	68 38 ef 01 c0       	push   0xc001ef38
c001ef8e:	6a 00                	push   0x0
c001ef90:	50                   	push   eax
c001ef91:	e8 dc d9 fe ff       	call   c000c972 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef96:	83 c4 20             	add    esp,0x20
c001ef99:	89 c2                	mov    edx,eax
c001ef9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001efa5:	b8 00 00 00 00       	mov    eax,0x0
c001efaa:	83 c4 0c             	add    esp,0xc
c001efad:	c3                   	ret    
c001efae:	66 90                	xchg   ax,ax

c001efb0 <PIT::close(int, int, void*)>:
c001efb0:	83 ec 0c             	sub    esp,0xc
c001efb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001efc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc5:	6a 01                	push   0x1
c001efc7:	68 38 ef 01 c0       	push   0xc001ef38
c001efcc:	6a 00                	push   0x0
c001efce:	50                   	push   eax
c001efcf:	e8 d4 d9 fe ff       	call   c000c9a8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001efd4:	83 c4 10             	add    esp,0x10
c001efd7:	b8 00 00 00 00       	mov    eax,0x0
c001efdc:	83 c4 0c             	add    esp,0xc
c001efdf:	c3                   	ret    

c001efe0 <PIT::PIT()>:
c001efe0:	83 ec 0c             	sub    esp,0xc
c001efe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe7:	83 ec 08             	sub    esp,0x8
c001efea:	68 1c 36 02 c0       	push   0xc002361c
c001efef:	50                   	push   eax
c001eff0:	e8 67 f3 fe ff       	call   c000e35c <Timer::Timer(char const*)>
c001eff5:	83 c4 10             	add    esp,0x10
c001eff8:	ba 44 36 02 c0       	mov    edx,0xc0023644
c001effd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f001:	89 10                	mov    DWORD PTR [eax],edx
c001f003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f007:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f00d:	0f b6 d0             	movzx  edx,al
c001f010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f014:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f01b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f01f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f025:	0f b6 d0             	movzx  edx,al
c001f028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f02c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f035:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f03b:	8d 50 01             	lea    edx,[eax+0x1]
c001f03e:	88 d1                	mov    cl,dl
c001f040:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f044:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f04a:	0f b6 d0             	movzx  edx,al
c001f04d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f051:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f055:	83 e1 3f             	and    ecx,0x3f
c001f058:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f05c:	90                   	nop
c001f05d:	83 c4 0c             	add    esp,0xc
c001f060:	c3                   	ret    
c001f061:	66 90                	xchg   ax,ax
c001f063:	66 90                	xchg   ax,ax
c001f065:	66 90                	xchg   ax,ax
c001f067:	66 90                	xchg   ax,ax
c001f069:	66 90                	xchg   ax,ax
c001f06b:	66 90                	xchg   ax,ax
c001f06d:	66 90                	xchg   ax,ax
c001f06f:	90                   	nop

c001f070 <avxDetect>:
c001f070:	b8 01 00 00 00       	mov    eax,0x1
c001f075:	0f a2                	cpuid  
c001f077:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f07d:	74 15                	je     c001f094 <avxDetect.noAVX>
c001f07f:	b8 01 00 00 00       	mov    eax,0x1
c001f084:	0f a2                	cpuid  
c001f086:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f08c:	74 06                	je     c001f094 <avxDetect.noAVX>
c001f08e:	b8 01 00 00 00       	mov    eax,0x1
c001f093:	c3                   	ret    

c001f094 <avxDetect.noAVX>:
c001f094:	b8 00 00 00 00       	mov    eax,0x0
c001f099:	c3                   	ret    

c001f09a <avxSave>:
c001f09a:	53                   	push   ebx
c001f09b:	52                   	push   edx
c001f09c:	31 c0                	xor    eax,eax
c001f09e:	48                   	dec    eax
c001f09f:	89 c2                	mov    edx,eax
c001f0a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0a5:	0f ae 23             	xsave  [ebx]
c001f0a8:	5a                   	pop    edx
c001f0a9:	5b                   	pop    ebx
c001f0aa:	c3                   	ret    

c001f0ab <avxLoad>:
c001f0ab:	53                   	push   ebx
c001f0ac:	52                   	push   edx
c001f0ad:	31 c0                	xor    eax,eax
c001f0af:	48                   	dec    eax
c001f0b0:	89 c2                	mov    edx,eax
c001f0b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0b6:	0f ae 2b             	xrstor [ebx]
c001f0b9:	5a                   	pop    edx
c001f0ba:	5b                   	pop    ebx
c001f0bb:	c3                   	ret    

c001f0bc <avxInit>:
c001f0bc:	e8 67 03 00 00       	call   c001f428 <sseInit>
c001f0c1:	50                   	push   eax
c001f0c2:	51                   	push   ecx
c001f0c3:	0f 20 e0             	mov    eax,cr4
c001f0c6:	0d 00 00 04 00       	or     eax,0x40000
c001f0cb:	0f 22 e0             	mov    cr4,eax
c001f0ce:	31 c9                	xor    ecx,ecx
c001f0d0:	0f 01 d0             	xgetbv 
c001f0d3:	0d 07 00 00 00       	or     eax,0x7
c001f0d8:	0f 01 d1             	xsetbv 
c001f0db:	59                   	pop    ecx
c001f0dc:	58                   	pop    eax
c001f0dd:	c3                   	ret    

c001f0de <avxClose>:
c001f0de:	c3                   	ret    

c001f0df <wouldSheSayYes>:
c001f0df:	c3                   	ret    
c001f0e0:	49                   	dec    ecx
c001f0e1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f0e5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f0e9:	75 20                	jne    c001f10b <isr0+0xb>
c001f0eb:	4e                   	dec    esi
c001f0ec:	79 61                	jns    c001f14f <isr7+0x3>
c001f0ee:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f0f3:	66 90                	xchg   ax,ax
c001f0f5:	66 90                	xchg   ax,ax
c001f0f7:	66 90                	xchg   ax,ax
c001f0f9:	66 90                	xchg   ax,ax
c001f0fb:	66 90                	xchg   ax,ax
c001f0fd:	66 90                	xchg   ax,ax
c001f0ff:	90                   	nop

c001f100 <isr0>:
c001f100:	fa                   	cli    
c001f101:	68 00 00 00 00       	push   0x0
c001f106:	68 00 00 00 00       	push   0x0
c001f10b:	e9 56 01 00 00       	jmp    c001f266 <int_common_stub>

c001f110 <isr1>:
c001f110:	fa                   	cli    
c001f111:	6a 00                	push   0x0
c001f113:	6a 01                	push   0x1
c001f115:	e9 4c 01 00 00       	jmp    c001f266 <int_common_stub>

c001f11a <isr2>:
c001f11a:	fa                   	cli    
c001f11b:	6a 00                	push   0x0
c001f11d:	6a 02                	push   0x2
c001f11f:	e9 42 01 00 00       	jmp    c001f266 <int_common_stub>

c001f124 <isr3>:
c001f124:	fa                   	cli    
c001f125:	6a 00                	push   0x0
c001f127:	6a 03                	push   0x3
c001f129:	e9 38 01 00 00       	jmp    c001f266 <int_common_stub>

c001f12e <isr4>:
c001f12e:	fa                   	cli    
c001f12f:	6a 00                	push   0x0
c001f131:	6a 04                	push   0x4
c001f133:	e9 2e 01 00 00       	jmp    c001f266 <int_common_stub>

c001f138 <isr5>:
c001f138:	fa                   	cli    
c001f139:	6a 00                	push   0x0
c001f13b:	6a 05                	push   0x5
c001f13d:	e9 24 01 00 00       	jmp    c001f266 <int_common_stub>

c001f142 <isr6>:
c001f142:	fa                   	cli    
c001f143:	6a 00                	push   0x0
c001f145:	6a 06                	push   0x6
c001f147:	e9 1a 01 00 00       	jmp    c001f266 <int_common_stub>

c001f14c <isr7>:
c001f14c:	fa                   	cli    
c001f14d:	6a 00                	push   0x0
c001f14f:	6a 07                	push   0x7
c001f151:	e9 10 01 00 00       	jmp    c001f266 <int_common_stub>

c001f156 <isr8>:
c001f156:	fa                   	cli    
c001f157:	6a 08                	push   0x8
c001f159:	e9 08 01 00 00       	jmp    c001f266 <int_common_stub>

c001f15e <isr9>:
c001f15e:	fa                   	cli    
c001f15f:	6a 00                	push   0x0
c001f161:	6a 09                	push   0x9
c001f163:	e9 fe 00 00 00       	jmp    c001f266 <int_common_stub>

c001f168 <isr10>:
c001f168:	fa                   	cli    
c001f169:	6a 0a                	push   0xa
c001f16b:	e9 f6 00 00 00       	jmp    c001f266 <int_common_stub>

c001f170 <isr11>:
c001f170:	fa                   	cli    
c001f171:	6a 0b                	push   0xb
c001f173:	e9 ee 00 00 00       	jmp    c001f266 <int_common_stub>

c001f178 <isr12>:
c001f178:	fa                   	cli    
c001f179:	6a 0c                	push   0xc
c001f17b:	e9 e6 00 00 00       	jmp    c001f266 <int_common_stub>

c001f180 <isr13>:
c001f180:	fa                   	cli    
c001f181:	6a 0d                	push   0xd
c001f183:	53                   	push   ebx
c001f184:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f188:	81 fb 56 f3 01 c0    	cmp    ebx,0xc001f356
c001f18e:	5b                   	pop    ebx
c001f18f:	0f 84 c3 01 00 00    	je     c001f358 <finishSignal2>
c001f195:	e9 cc 00 00 00       	jmp    c001f266 <int_common_stub>

c001f19a <isr14>:
c001f19a:	fa                   	cli    
c001f19b:	6a 0e                	push   0xe
c001f19d:	e9 c4 00 00 00       	jmp    c001f266 <int_common_stub>

c001f1a2 <isr15>:
c001f1a2:	fa                   	cli    
c001f1a3:	6a 00                	push   0x0
c001f1a5:	6a 0f                	push   0xf
c001f1a7:	e9 ba 00 00 00       	jmp    c001f266 <int_common_stub>

c001f1ac <isr16>:
c001f1ac:	fa                   	cli    
c001f1ad:	6a 00                	push   0x0
c001f1af:	6a 10                	push   0x10
c001f1b1:	e9 b0 00 00 00       	jmp    c001f266 <int_common_stub>

c001f1b6 <isr17>:
c001f1b6:	fa                   	cli    
c001f1b7:	6a 00                	push   0x0
c001f1b9:	6a 11                	push   0x11
c001f1bb:	e9 a6 00 00 00       	jmp    c001f266 <int_common_stub>

c001f1c0 <isr18>:
c001f1c0:	fa                   	cli    
c001f1c1:	6a 00                	push   0x0
c001f1c3:	6a 12                	push   0x12
c001f1c5:	e9 9c 00 00 00       	jmp    c001f266 <int_common_stub>

c001f1ca <irq3>:
c001f1ca:	fa                   	cli    
c001f1cb:	6a 00                	push   0x0
c001f1cd:	6a 23                	push   0x23
c001f1cf:	e9 92 00 00 00       	jmp    c001f266 <int_common_stub>

c001f1d4 <irq4>:
c001f1d4:	fa                   	cli    
c001f1d5:	6a 00                	push   0x0
c001f1d7:	6a 24                	push   0x24
c001f1d9:	e9 88 00 00 00       	jmp    c001f266 <int_common_stub>

c001f1de <irq5>:
c001f1de:	fa                   	cli    
c001f1df:	6a 00                	push   0x0
c001f1e1:	6a 25                	push   0x25
c001f1e3:	e9 7e 00 00 00       	jmp    c001f266 <int_common_stub>

c001f1e8 <irq6>:
c001f1e8:	fa                   	cli    
c001f1e9:	6a 00                	push   0x0
c001f1eb:	6a 26                	push   0x26
c001f1ed:	e9 74 00 00 00       	jmp    c001f266 <int_common_stub>

c001f1f2 <irq7>:
c001f1f2:	fa                   	cli    
c001f1f3:	6a 00                	push   0x0
c001f1f5:	6a 27                	push   0x27
c001f1f7:	e9 6a 00 00 00       	jmp    c001f266 <int_common_stub>

c001f1fc <irq8>:
c001f1fc:	fa                   	cli    
c001f1fd:	6a 00                	push   0x0
c001f1ff:	6a 28                	push   0x28
c001f201:	e9 60 00 00 00       	jmp    c001f266 <int_common_stub>

c001f206 <irq9>:
c001f206:	fa                   	cli    
c001f207:	6a 00                	push   0x0
c001f209:	6a 29                	push   0x29
c001f20b:	e9 56 00 00 00       	jmp    c001f266 <int_common_stub>

c001f210 <irq10>:
c001f210:	fa                   	cli    
c001f211:	6a 00                	push   0x0
c001f213:	6a 2a                	push   0x2a
c001f215:	e9 4c 00 00 00       	jmp    c001f266 <int_common_stub>

c001f21a <irq11>:
c001f21a:	fa                   	cli    
c001f21b:	6a 00                	push   0x0
c001f21d:	6a 2b                	push   0x2b
c001f21f:	e9 42 00 00 00       	jmp    c001f266 <int_common_stub>

c001f224 <irq12>:
c001f224:	fa                   	cli    
c001f225:	6a 00                	push   0x0
c001f227:	6a 2c                	push   0x2c
c001f229:	e9 38 00 00 00       	jmp    c001f266 <int_common_stub>

c001f22e <irq13>:
c001f22e:	fa                   	cli    
c001f22f:	6a 00                	push   0x0
c001f231:	6a 2d                	push   0x2d
c001f233:	e9 2e 00 00 00       	jmp    c001f266 <int_common_stub>

c001f238 <irq14>:
c001f238:	fa                   	cli    
c001f239:	6a 00                	push   0x0
c001f23b:	6a 2e                	push   0x2e
c001f23d:	e9 24 00 00 00       	jmp    c001f266 <int_common_stub>

c001f242 <irq15>:
c001f242:	fa                   	cli    
c001f243:	6a 00                	push   0x0
c001f245:	6a 2f                	push   0x2f
c001f247:	e9 1a 00 00 00       	jmp    c001f266 <int_common_stub>

c001f24c <irq1>:
c001f24c:	fa                   	cli    
c001f24d:	6a 00                	push   0x0
c001f24f:	6a 21                	push   0x21
c001f251:	eb 13                	jmp    c001f266 <int_common_stub>

c001f253 <irq2>:
c001f253:	fa                   	cli    
c001f254:	6a 00                	push   0x0
c001f256:	6a 22                	push   0x22
c001f258:	eb 0c                	jmp    c001f266 <int_common_stub>

c001f25a <isr96>:
c001f25a:	6a 00                	push   0x0
c001f25c:	6a 60                	push   0x60
c001f25e:	fb                   	sti    
c001f25f:	eb 37                	jmp    c001f298 <syscall_common_stub>

c001f261 <irq0>:
c001f261:	fa                   	cli    
c001f262:	6a 00                	push   0x0
c001f264:	6a 20                	push   0x20

c001f266 <int_common_stub>:
c001f266:	60                   	pusha  
c001f267:	1e                   	push   ds
c001f268:	06                   	push   es
c001f269:	0f a0                	push   fs
c001f26b:	0f a8                	push   gs
c001f26d:	66 b8 10 00          	mov    ax,0x10
c001f271:	66 8e d8             	mov    ds,ax
c001f274:	66 8e c0             	mov    es,ax
c001f277:	66 8e e0             	mov    fs,ax
c001f27a:	66 8e e8             	mov    gs,ax
c001f27d:	54                   	push   esp
c001f27e:	fc                   	cld    
c001f27f:	e8 ec db fe ff       	call   c000ce70 <int_handler>
c001f284:	81 c4 04 00 00 00    	add    esp,0x4
c001f28a:	0f a9                	pop    gs
c001f28c:	0f a1                	pop    fs
c001f28e:	07                   	pop    es
c001f28f:	1f                   	pop    ds
c001f290:	61                   	popa   
c001f291:	81 c4 08 00 00 00    	add    esp,0x8
c001f297:	cf                   	iret   

c001f298 <syscall_common_stub>:
c001f298:	60                   	pusha  
c001f299:	1e                   	push   ds
c001f29a:	06                   	push   es
c001f29b:	0f a0                	push   fs
c001f29d:	0f a8                	push   gs
c001f29f:	66 b8 10 00          	mov    ax,0x10
c001f2a3:	66 8e d8             	mov    ds,ax
c001f2a6:	66 8e c0             	mov    es,ax
c001f2a9:	66 8e e0             	mov    fs,ax
c001f2ac:	66 8e e8             	mov    gs,ax
c001f2af:	54                   	push   esp
c001f2b0:	fc                   	cld    
c001f2b1:	e8 ba db fe ff       	call   c000ce70 <int_handler>
c001f2b6:	81 c4 04 00 00 00    	add    esp,0x4
c001f2bc:	0f a9                	pop    gs
c001f2be:	0f a1                	pop    fs
c001f2c0:	07                   	pop    es
c001f2c1:	1f                   	pop    ds
c001f2c2:	e8 6f 29 ff ff       	call   c0011c36 <KiCheckSignalZ>
c001f2c7:	3d 00 00 00 00       	cmp    eax,0x0
c001f2cc:	0f 84 c0 00 00 00    	je     c001f392 <skipSignals>
c001f2d2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f2d7:	61                   	popa   
c001f2d8:	53                   	push   ebx
c001f2d9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f2df:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f2e2:	5b                   	pop    ebx
c001f2e3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f2e8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f2eb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f2ee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f2f1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f2f4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f2f7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f2fa:	81 c4 08 00 00 00    	add    esp,0x8
c001f300:	5e                   	pop    esi
c001f301:	5b                   	pop    ebx
c001f302:	59                   	pop    ecx
c001f303:	5a                   	pop    edx
c001f304:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f307:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f30a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f30d:	52                   	push   edx
c001f30e:	51                   	push   ecx
c001f30f:	53                   	push   ebx
c001f310:	56                   	push   esi
c001f311:	81 ec 08 00 00 00    	sub    esp,0x8
c001f317:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f31a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f31d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f320:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f323:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f326:	60                   	pusha  
c001f327:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f32d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f330:	89 e3                	mov    ebx,esp
c001f332:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f335:	52                   	push   edx
c001f336:	68 56 f3 01 c0       	push   0xc001f356
c001f33b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f33e:	89 dc                	mov    esp,ebx
c001f340:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f343:	68 23 00 00 00       	push   0x23
c001f348:	51                   	push   ecx
c001f349:	68 02 02 00 00       	push   0x202
c001f34e:	68 1b 00 00 00       	push   0x1b
c001f353:	ff 36                	push   DWORD PTR [esi]
c001f355:	cf                   	iret   

c001f356 <finishSignal>:
c001f356:	cd 0f                	int    0xf

c001f358 <finishSignal2>:
c001f358:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f35e:	e8 50 29 ff ff       	call   c0011cb3 <KiFinishSignalZ>
c001f363:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f369:	68 23 00 00 00       	push   0x23
c001f36e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f371:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f374:	68 1b 00 00 00       	push   0x1b
c001f379:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f37c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f37f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f382:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f385:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f388:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f38b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f38e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f391:	cf                   	iret   

c001f392 <skipSignals>:
c001f392:	61                   	popa   
c001f393:	81 c4 08 00 00 00    	add    esp,0x8
c001f399:	cf                   	iret   
c001f39a:	90                   	nop
c001f39b:	90                   	nop

c001f39c <irq16>:
c001f39c:	fa                   	cli    
c001f39d:	6a 00                	push   0x0
c001f39f:	6a 30                	push   0x30
c001f3a1:	e9 c0 fe ff ff       	jmp    c001f266 <int_common_stub>

c001f3a6 <irq17>:
c001f3a6:	fa                   	cli    
c001f3a7:	6a 00                	push   0x0
c001f3a9:	6a 31                	push   0x31
c001f3ab:	e9 b6 fe ff ff       	jmp    c001f266 <int_common_stub>

c001f3b0 <irq18>:
c001f3b0:	fa                   	cli    
c001f3b1:	6a 00                	push   0x0
c001f3b3:	6a 32                	push   0x32
c001f3b5:	e9 ac fe ff ff       	jmp    c001f266 <int_common_stub>

c001f3ba <irq19>:
c001f3ba:	fa                   	cli    
c001f3bb:	6a 00                	push   0x0
c001f3bd:	6a 33                	push   0x33
c001f3bf:	e9 a2 fe ff ff       	jmp    c001f266 <int_common_stub>

c001f3c4 <irq20>:
c001f3c4:	fa                   	cli    
c001f3c5:	6a 00                	push   0x0
c001f3c7:	6a 34                	push   0x34
c001f3c9:	e9 98 fe ff ff       	jmp    c001f266 <int_common_stub>

c001f3ce <irq21>:
c001f3ce:	fa                   	cli    
c001f3cf:	6a 00                	push   0x0
c001f3d1:	6a 35                	push   0x35
c001f3d3:	e9 8e fe ff ff       	jmp    c001f266 <int_common_stub>

c001f3d8 <irq22>:
c001f3d8:	fa                   	cli    
c001f3d9:	6a 00                	push   0x0
c001f3db:	6a 36                	push   0x36
c001f3dd:	e9 84 fe ff ff       	jmp    c001f266 <int_common_stub>

c001f3e2 <irq23>:
c001f3e2:	fa                   	cli    
c001f3e3:	6a 00                	push   0x0
c001f3e5:	6a 37                	push   0x37
c001f3e7:	e9 7a fe ff ff       	jmp    c001f266 <int_common_stub>
c001f3ec:	66 90                	xchg   ax,ax
c001f3ee:	66 90                	xchg   ax,ax

c001f3f0 <i386GetRDRAND>:
c001f3f0:	b9 64 00 00 00       	mov    ecx,0x64

c001f3f5 <retry>:
c001f3f5:	0f c7 f0             	rdrand eax
c001f3f8:	72 05                	jb     c001f3ff <retry.done>
c001f3fa:	e2 f9                	loop   c001f3f5 <retry>

c001f3fc <retry.fail>:
c001f3fc:	31 c0                	xor    eax,eax
c001f3fe:	c3                   	ret    

c001f3ff <retry.done>:
c001f3ff:	c3                   	ret    

c001f400 <absolutelyNoChanceInHell>:
c001f400:	b8 01 00 00 00       	mov    eax,0x1
c001f405:	0f a2                	cpuid  
c001f407:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f40d:	74 06                	je     c001f415 <sseDetect.noSSE>
c001f40f:	b8 01 00 00 00       	mov    eax,0x1
c001f414:	c3                   	ret    

c001f415 <sseDetect.noSSE>:
c001f415:	31 c0                	xor    eax,eax
c001f417:	c3                   	ret    

c001f418 <sseSave>:
c001f418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f41c:	0f ae 00             	fxsave [eax]
c001f41f:	c3                   	ret    

c001f420 <sseLoad>:
c001f420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f424:	0f ae 08             	fxrstor [eax]
c001f427:	c3                   	ret    

c001f428 <sseInit>:
c001f428:	e8 42 00 00 00       	call   c001f46f <x87Init>
c001f42d:	0f 20 e0             	mov    eax,cr4
c001f430:	66 0d 00 06          	or     ax,0x600
c001f434:	0f 22 e0             	mov    cr4,eax
c001f437:	c3                   	ret    

c001f438 <sseClose>:
c001f438:	c3                   	ret    
c001f439:	66 90                	xchg   ax,ax
c001f43b:	66 90                	xchg   ax,ax
c001f43d:	66 90                	xchg   ax,ax
c001f43f:	90                   	nop

c001f440 <value_37F>:
c001f440:	7f 03                	jg     c001f445 <value_37A+0x1>

c001f442 <value_37E>:
c001f442:	7e 03                	jle    c001f447 <x87Detect+0x1>

c001f444 <value_37A>:
c001f444:	7a 03                	jp     c001f449 <x87Detect+0x3>

c001f446 <x87Detect>:
c001f446:	b8 01 00 00 00       	mov    eax,0x1
c001f44b:	0f a2                	cpuid  
c001f44d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f453:	74 06                	je     c001f45b <x87Detect.nox87>
c001f455:	b8 01 00 00 00       	mov    eax,0x1
c001f45a:	c3                   	ret    

c001f45b <x87Detect.nox87>:
c001f45b:	b8 00 00 00 00       	mov    eax,0x0
c001f460:	c3                   	ret    

c001f461 <x87Save>:
c001f461:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f465:	dd 30                	fnsave [eax]
c001f467:	c3                   	ret    

c001f468 <x87Load>:
c001f468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f46c:	dd 20                	frstor [eax]
c001f46e:	c3                   	ret    

c001f46f <x87Init>:
c001f46f:	0f 20 c0             	mov    eax,cr0
c001f472:	66 25 fb ff          	and    ax,0xfffb
c001f476:	66 0d 22 00          	or     ax,0x22
c001f47a:	0f 22 c0             	mov    cr0,eax
c001f47d:	db e3                	fninit 
c001f47f:	0f 06                	clts   
c001f481:	d9 2d 44 f4 01 c0    	fldcw  WORD PTR ds:0xc001f444
c001f487:	c3                   	ret    

c001f488 <x87Close>:
c001f488:	c3                   	ret    
c001f489:	66 90                	xchg   ax,ax
c001f48b:	90                   	nop

c001f48c <__do_global_ctors_aux>:
c001f48c:	a1 40 04 02 c0       	mov    eax,ds:0xc0020440
c001f491:	83 f8 ff             	cmp    eax,0xffffffff
c001f494:	74 1a                	je     c001f4b0 <__do_global_ctors_aux+0x24>
c001f496:	55                   	push   ebp
c001f497:	89 e5                	mov    ebp,esp
c001f499:	53                   	push   ebx
c001f49a:	52                   	push   edx
c001f49b:	bb 40 04 02 c0       	mov    ebx,0xc0020440
c001f4a0:	ff d0                	call   eax
c001f4a2:	83 eb 04             	sub    ebx,0x4
c001f4a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f4a7:	83 f8 ff             	cmp    eax,0xffffffff
c001f4aa:	75 f4                	jne    c001f4a0 <__do_global_ctors_aux+0x14>
c001f4ac:	58                   	pop    eax
c001f4ad:	5b                   	pop    ebx
c001f4ae:	5d                   	pop    ebp
c001f4af:	c3                   	ret    
c001f4b0:	c3                   	ret    
c001f4b1:	66 90                	xchg   ax,ax
c001f4b3:	90                   	nop

c001f4b4 <__divdi3>:
c001f4b4:	55                   	push   ebp
c001f4b5:	57                   	push   edi
c001f4b6:	56                   	push   esi
c001f4b7:	53                   	push   ebx
c001f4b8:	83 ec 1c             	sub    esp,0x1c
c001f4bb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f4bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f4c3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f4c6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f4ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f4ce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f4d2:	85 db                	test   ebx,ebx
c001f4d4:	0f 88 8e 00 00 00    	js     c001f568 <__divdi3+0xb4>
c001f4da:	89 dd                	mov    ebp,ebx
c001f4dc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f4e4:	89 d3                	mov    ebx,edx
c001f4e6:	85 d2                	test   edx,edx
c001f4e8:	79 0d                	jns    c001f4f7 <__divdi3+0x43>
c001f4ea:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f4ee:	f7 d8                	neg    eax
c001f4f0:	83 d2 00             	adc    edx,0x0
c001f4f3:	f7 da                	neg    edx
c001f4f5:	89 d3                	mov    ebx,edx
c001f4f7:	89 c7                	mov    edi,eax
c001f4f9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f4fc:	85 db                	test   ebx,ebx
c001f4fe:	75 48                	jne    c001f548 <__divdi3+0x94>
c001f500:	39 ef                	cmp    edi,ebp
c001f502:	76 24                	jbe    c001f528 <__divdi3+0x74>
c001f504:	89 ea                	mov    edx,ebp
c001f506:	f7 f7                	div    edi
c001f508:	89 c1                	mov    ecx,eax
c001f50a:	31 f6                	xor    esi,esi
c001f50c:	89 c8                	mov    eax,ecx
c001f50e:	89 f2                	mov    edx,esi
c001f510:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f514:	85 c9                	test   ecx,ecx
c001f516:	74 07                	je     c001f51f <__divdi3+0x6b>
c001f518:	f7 d8                	neg    eax
c001f51a:	83 d2 00             	adc    edx,0x0
c001f51d:	f7 da                	neg    edx
c001f51f:	83 c4 1c             	add    esp,0x1c
c001f522:	5b                   	pop    ebx
c001f523:	5e                   	pop    esi
c001f524:	5f                   	pop    edi
c001f525:	5d                   	pop    ebp
c001f526:	c3                   	ret    
c001f527:	90                   	nop
c001f528:	85 ff                	test   edi,edi
c001f52a:	75 0b                	jne    c001f537 <__divdi3+0x83>
c001f52c:	b8 01 00 00 00       	mov    eax,0x1
c001f531:	31 d2                	xor    edx,edx
c001f533:	f7 f3                	div    ebx
c001f535:	89 c7                	mov    edi,eax
c001f537:	31 d2                	xor    edx,edx
c001f539:	89 e8                	mov    eax,ebp
c001f53b:	f7 f7                	div    edi
c001f53d:	89 c6                	mov    esi,eax
c001f53f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f542:	f7 f7                	div    edi
c001f544:	89 c1                	mov    ecx,eax
c001f546:	eb c4                	jmp    c001f50c <__divdi3+0x58>
c001f548:	39 eb                	cmp    ebx,ebp
c001f54a:	77 3c                	ja     c001f588 <__divdi3+0xd4>
c001f54c:	0f bd f3             	bsr    esi,ebx
c001f54f:	83 f6 1f             	xor    esi,0x1f
c001f552:	75 40                	jne    c001f594 <__divdi3+0xe0>
c001f554:	39 eb                	cmp    ebx,ebp
c001f556:	72 09                	jb     c001f561 <__divdi3+0xad>
c001f558:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f55b:	0f 87 97 00 00 00    	ja     c001f5f8 <__divdi3+0x144>
c001f561:	b9 01 00 00 00       	mov    ecx,0x1
c001f566:	eb a4                	jmp    c001f50c <__divdi3+0x58>
c001f568:	f7 d9                	neg    ecx
c001f56a:	83 d3 00             	adc    ebx,0x0
c001f56d:	f7 db                	neg    ebx
c001f56f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f572:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f576:	89 dd                	mov    ebp,ebx
c001f578:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f580:	e9 5f ff ff ff       	jmp    c001f4e4 <__divdi3+0x30>
c001f585:	8d 76 00             	lea    esi,[esi+0x0]
c001f588:	31 f6                	xor    esi,esi
c001f58a:	31 c9                	xor    ecx,ecx
c001f58c:	e9 7b ff ff ff       	jmp    c001f50c <__divdi3+0x58>
c001f591:	8d 76 00             	lea    esi,[esi+0x0]
c001f594:	b8 20 00 00 00       	mov    eax,0x20
c001f599:	29 f0                	sub    eax,esi
c001f59b:	89 f1                	mov    ecx,esi
c001f59d:	d3 e3                	shl    ebx,cl
c001f59f:	89 fa                	mov    edx,edi
c001f5a1:	88 c1                	mov    cl,al
c001f5a3:	d3 ea                	shr    edx,cl
c001f5a5:	09 da                	or     edx,ebx
c001f5a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f5ab:	89 f1                	mov    ecx,esi
c001f5ad:	d3 e7                	shl    edi,cl
c001f5af:	89 eb                	mov    ebx,ebp
c001f5b1:	88 c1                	mov    cl,al
c001f5b3:	d3 eb                	shr    ebx,cl
c001f5b5:	89 f1                	mov    ecx,esi
c001f5b7:	d3 e5                	shl    ebp,cl
c001f5b9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f5bc:	88 c1                	mov    cl,al
c001f5be:	d3 ea                	shr    edx,cl
c001f5c0:	09 d5                	or     ebp,edx
c001f5c2:	89 e8                	mov    eax,ebp
c001f5c4:	89 da                	mov    edx,ebx
c001f5c6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f5ca:	89 d3                	mov    ebx,edx
c001f5cc:	89 c5                	mov    ebp,eax
c001f5ce:	f7 e7                	mul    edi
c001f5d0:	39 d3                	cmp    ebx,edx
c001f5d2:	72 18                	jb     c001f5ec <__divdi3+0x138>
c001f5d4:	74 0a                	je     c001f5e0 <__divdi3+0x12c>
c001f5d6:	89 e9                	mov    ecx,ebp
c001f5d8:	31 f6                	xor    esi,esi
c001f5da:	e9 2d ff ff ff       	jmp    c001f50c <__divdi3+0x58>
c001f5df:	90                   	nop
c001f5e0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f5e3:	89 f1                	mov    ecx,esi
c001f5e5:	d3 e7                	shl    edi,cl
c001f5e7:	39 c7                	cmp    edi,eax
c001f5e9:	73 eb                	jae    c001f5d6 <__divdi3+0x122>
c001f5eb:	90                   	nop
c001f5ec:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f5ef:	31 f6                	xor    esi,esi
c001f5f1:	e9 16 ff ff ff       	jmp    c001f50c <__divdi3+0x58>
c001f5f6:	66 90                	xchg   ax,ax
c001f5f8:	31 c9                	xor    ecx,ecx
c001f5fa:	e9 0d ff ff ff       	jmp    c001f50c <__divdi3+0x58>
c001f5ff:	90                   	nop

c001f600 <__moddi3>:
c001f600:	55                   	push   ebp
c001f601:	57                   	push   edi
c001f602:	56                   	push   esi
c001f603:	53                   	push   ebx
c001f604:	83 ec 2c             	sub    esp,0x2c
c001f607:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f60b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f60f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f613:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f617:	85 db                	test   ebx,ebx
c001f619:	0f 88 85 00 00 00    	js     c001f6a4 <__moddi3+0xa4>
c001f61f:	89 de                	mov    esi,ebx
c001f621:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f629:	89 d7                	mov    edi,edx
c001f62b:	85 d2                	test   edx,edx
c001f62d:	79 09                	jns    c001f638 <__moddi3+0x38>
c001f62f:	f7 d8                	neg    eax
c001f631:	83 d2 00             	adc    edx,0x0
c001f634:	f7 da                	neg    edx
c001f636:	89 d7                	mov    edi,edx
c001f638:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f63c:	89 cd                	mov    ebp,ecx
c001f63e:	85 ff                	test   edi,edi
c001f640:	75 52                	jne    c001f694 <__moddi3+0x94>
c001f642:	89 c3                	mov    ebx,eax
c001f644:	39 f0                	cmp    eax,esi
c001f646:	76 24                	jbe    c001f66c <__moddi3+0x6c>
c001f648:	89 c8                	mov    eax,ecx
c001f64a:	89 f2                	mov    edx,esi
c001f64c:	f7 f3                	div    ebx
c001f64e:	89 d6                	mov    esi,edx
c001f650:	89 f0                	mov    eax,esi
c001f652:	31 d2                	xor    edx,edx
c001f654:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f658:	85 c9                	test   ecx,ecx
c001f65a:	74 07                	je     c001f663 <__moddi3+0x63>
c001f65c:	f7 d8                	neg    eax
c001f65e:	83 d2 00             	adc    edx,0x0
c001f661:	f7 da                	neg    edx
c001f663:	83 c4 2c             	add    esp,0x2c
c001f666:	5b                   	pop    ebx
c001f667:	5e                   	pop    esi
c001f668:	5f                   	pop    edi
c001f669:	5d                   	pop    ebp
c001f66a:	c3                   	ret    
c001f66b:	90                   	nop
c001f66c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f670:	85 db                	test   ebx,ebx
c001f672:	75 0d                	jne    c001f681 <__moddi3+0x81>
c001f674:	b8 01 00 00 00       	mov    eax,0x1
c001f679:	31 d2                	xor    edx,edx
c001f67b:	f7 f7                	div    edi
c001f67d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f681:	89 f0                	mov    eax,esi
c001f683:	31 d2                	xor    edx,edx
c001f685:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f689:	f7 f7                	div    edi
c001f68b:	89 e8                	mov    eax,ebp
c001f68d:	f7 f7                	div    edi
c001f68f:	89 d6                	mov    esi,edx
c001f691:	eb bd                	jmp    c001f650 <__moddi3+0x50>
c001f693:	90                   	nop
c001f694:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f698:	39 f7                	cmp    edi,esi
c001f69a:	76 20                	jbe    c001f6bc <__moddi3+0xbc>
c001f69c:	89 c8                	mov    eax,ecx
c001f69e:	89 f2                	mov    edx,esi
c001f6a0:	eb b2                	jmp    c001f654 <__moddi3+0x54>
c001f6a2:	66 90                	xchg   ax,ax
c001f6a4:	f7 d9                	neg    ecx
c001f6a6:	83 d3 00             	adc    ebx,0x0
c001f6a9:	f7 db                	neg    ebx
c001f6ab:	89 de                	mov    esi,ebx
c001f6ad:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f6b5:	e9 6f ff ff ff       	jmp    c001f629 <__moddi3+0x29>
c001f6ba:	66 90                	xchg   ax,ax
c001f6bc:	0f bd c7             	bsr    eax,edi
c001f6bf:	83 f0 1f             	xor    eax,0x1f
c001f6c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f6c6:	75 24                	jne    c001f6ec <__moddi3+0xec>
c001f6c8:	39 f7                	cmp    edi,esi
c001f6ca:	72 06                	jb     c001f6d2 <__moddi3+0xd2>
c001f6cc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f6d0:	77 0c                	ja     c001f6de <__moddi3+0xde>
c001f6d2:	89 e9                	mov    ecx,ebp
c001f6d4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f6d8:	19 fe                	sbb    esi,edi
c001f6da:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f6de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f6e2:	89 f2                	mov    edx,esi
c001f6e4:	e9 6b ff ff ff       	jmp    c001f654 <__moddi3+0x54>
c001f6e9:	8d 76 00             	lea    esi,[esi+0x0]
c001f6ec:	b8 20 00 00 00       	mov    eax,0x20
c001f6f1:	89 c2                	mov    edx,eax
c001f6f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f6f7:	29 da                	sub    edx,ebx
c001f6f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f6fd:	88 d9                	mov    cl,bl
c001f6ff:	d3 e7                	shl    edi,cl
c001f701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f705:	88 d1                	mov    cl,dl
c001f707:	d3 e8                	shr    eax,cl
c001f709:	09 c7                	or     edi,eax
c001f70b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f70f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f713:	89 d8                	mov    eax,ebx
c001f715:	88 d9                	mov    cl,bl
c001f717:	d3 e7                	shl    edi,cl
c001f719:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f71d:	89 f3                	mov    ebx,esi
c001f71f:	88 d1                	mov    cl,dl
c001f721:	d3 eb                	shr    ebx,cl
c001f723:	89 c7                	mov    edi,eax
c001f725:	88 c1                	mov    cl,al
c001f727:	d3 e6                	shl    esi,cl
c001f729:	89 e8                	mov    eax,ebp
c001f72b:	88 d1                	mov    cl,dl
c001f72d:	d3 e8                	shr    eax,cl
c001f72f:	09 f0                	or     eax,esi
c001f731:	89 f9                	mov    ecx,edi
c001f733:	d3 e5                	shl    ebp,cl
c001f735:	89 da                	mov    edx,ebx
c001f737:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f73b:	89 d3                	mov    ebx,edx
c001f73d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f741:	89 c6                	mov    esi,eax
c001f743:	89 d1                	mov    ecx,edx
c001f745:	39 d3                	cmp    ebx,edx
c001f747:	72 27                	jb     c001f770 <__moddi3+0x170>
c001f749:	74 21                	je     c001f76c <__moddi3+0x16c>
c001f74b:	29 f5                	sub    ebp,esi
c001f74d:	19 cb                	sbb    ebx,ecx
c001f74f:	89 de                	mov    esi,ebx
c001f751:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f755:	d3 e6                	shl    esi,cl
c001f757:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f75b:	89 f9                	mov    ecx,edi
c001f75d:	d3 ed                	shr    ebp,cl
c001f75f:	09 ee                	or     esi,ebp
c001f761:	89 f0                	mov    eax,esi
c001f763:	d3 eb                	shr    ebx,cl
c001f765:	89 da                	mov    edx,ebx
c001f767:	e9 e8 fe ff ff       	jmp    c001f654 <__moddi3+0x54>
c001f76c:	39 c5                	cmp    ebp,eax
c001f76e:	73 db                	jae    c001f74b <__moddi3+0x14b>
c001f770:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f774:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f778:	89 d1                	mov    ecx,edx
c001f77a:	89 c6                	mov    esi,eax
c001f77c:	eb cd                	jmp    c001f74b <__moddi3+0x14b>
c001f77e:	66 90                	xchg   ax,ax

c001f780 <__udivdi3>:
c001f780:	55                   	push   ebp
c001f781:	57                   	push   edi
c001f782:	56                   	push   esi
c001f783:	53                   	push   ebx
c001f784:	83 ec 1c             	sub    esp,0x1c
c001f787:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f78b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f78f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f793:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f797:	85 d2                	test   edx,edx
c001f799:	75 41                	jne    c001f7dc <__udivdi3+0x5c>
c001f79b:	39 f7                	cmp    edi,esi
c001f79d:	76 15                	jbe    c001f7b4 <__udivdi3+0x34>
c001f79f:	89 e8                	mov    eax,ebp
c001f7a1:	89 f2                	mov    edx,esi
c001f7a3:	f7 f7                	div    edi
c001f7a5:	31 db                	xor    ebx,ebx
c001f7a7:	89 da                	mov    edx,ebx
c001f7a9:	83 c4 1c             	add    esp,0x1c
c001f7ac:	5b                   	pop    ebx
c001f7ad:	5e                   	pop    esi
c001f7ae:	5f                   	pop    edi
c001f7af:	5d                   	pop    ebp
c001f7b0:	c3                   	ret    
c001f7b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f7b4:	89 f9                	mov    ecx,edi
c001f7b6:	85 ff                	test   edi,edi
c001f7b8:	75 0b                	jne    c001f7c5 <__udivdi3+0x45>
c001f7ba:	b8 01 00 00 00       	mov    eax,0x1
c001f7bf:	31 d2                	xor    edx,edx
c001f7c1:	f7 f7                	div    edi
c001f7c3:	89 c1                	mov    ecx,eax
c001f7c5:	31 d2                	xor    edx,edx
c001f7c7:	89 f0                	mov    eax,esi
c001f7c9:	f7 f1                	div    ecx
c001f7cb:	89 c3                	mov    ebx,eax
c001f7cd:	89 e8                	mov    eax,ebp
c001f7cf:	f7 f1                	div    ecx
c001f7d1:	89 da                	mov    edx,ebx
c001f7d3:	83 c4 1c             	add    esp,0x1c
c001f7d6:	5b                   	pop    ebx
c001f7d7:	5e                   	pop    esi
c001f7d8:	5f                   	pop    edi
c001f7d9:	5d                   	pop    ebp
c001f7da:	c3                   	ret    
c001f7db:	90                   	nop
c001f7dc:	39 f2                	cmp    edx,esi
c001f7de:	77 1c                	ja     c001f7fc <__udivdi3+0x7c>
c001f7e0:	0f bd da             	bsr    ebx,edx
c001f7e3:	83 f3 1f             	xor    ebx,0x1f
c001f7e6:	75 24                	jne    c001f80c <__udivdi3+0x8c>
c001f7e8:	39 f2                	cmp    edx,esi
c001f7ea:	72 08                	jb     c001f7f4 <__udivdi3+0x74>
c001f7ec:	39 ef                	cmp    edi,ebp
c001f7ee:	0f 87 84 00 00 00    	ja     c001f878 <__udivdi3+0xf8>
c001f7f4:	b8 01 00 00 00       	mov    eax,0x1
c001f7f9:	eb ac                	jmp    c001f7a7 <__udivdi3+0x27>
c001f7fb:	90                   	nop
c001f7fc:	31 db                	xor    ebx,ebx
c001f7fe:	31 c0                	xor    eax,eax
c001f800:	89 da                	mov    edx,ebx
c001f802:	83 c4 1c             	add    esp,0x1c
c001f805:	5b                   	pop    ebx
c001f806:	5e                   	pop    esi
c001f807:	5f                   	pop    edi
c001f808:	5d                   	pop    ebp
c001f809:	c3                   	ret    
c001f80a:	66 90                	xchg   ax,ax
c001f80c:	b8 20 00 00 00       	mov    eax,0x20
c001f811:	29 d8                	sub    eax,ebx
c001f813:	88 d9                	mov    cl,bl
c001f815:	d3 e2                	shl    edx,cl
c001f817:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f81b:	89 fa                	mov    edx,edi
c001f81d:	88 c1                	mov    cl,al
c001f81f:	d3 ea                	shr    edx,cl
c001f821:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f825:	09 d1                	or     ecx,edx
c001f827:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f82b:	88 d9                	mov    cl,bl
c001f82d:	d3 e7                	shl    edi,cl
c001f82f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f833:	89 f7                	mov    edi,esi
c001f835:	88 c1                	mov    cl,al
c001f837:	d3 ef                	shr    edi,cl
c001f839:	88 d9                	mov    cl,bl
c001f83b:	d3 e6                	shl    esi,cl
c001f83d:	89 ea                	mov    edx,ebp
c001f83f:	88 c1                	mov    cl,al
c001f841:	d3 ea                	shr    edx,cl
c001f843:	09 d6                	or     esi,edx
c001f845:	89 f0                	mov    eax,esi
c001f847:	89 fa                	mov    edx,edi
c001f849:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f84d:	89 d7                	mov    edi,edx
c001f84f:	89 c6                	mov    esi,eax
c001f851:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f855:	39 d7                	cmp    edi,edx
c001f857:	72 13                	jb     c001f86c <__udivdi3+0xec>
c001f859:	74 09                	je     c001f864 <__udivdi3+0xe4>
c001f85b:	89 f0                	mov    eax,esi
c001f85d:	31 db                	xor    ebx,ebx
c001f85f:	e9 43 ff ff ff       	jmp    c001f7a7 <__udivdi3+0x27>
c001f864:	88 d9                	mov    cl,bl
c001f866:	d3 e5                	shl    ebp,cl
c001f868:	39 c5                	cmp    ebp,eax
c001f86a:	73 ef                	jae    c001f85b <__udivdi3+0xdb>
c001f86c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f86f:	31 db                	xor    ebx,ebx
c001f871:	e9 31 ff ff ff       	jmp    c001f7a7 <__udivdi3+0x27>
c001f876:	66 90                	xchg   ax,ax
c001f878:	31 c0                	xor    eax,eax
c001f87a:	e9 28 ff ff ff       	jmp    c001f7a7 <__udivdi3+0x27>
c001f87f:	90                   	nop

c001f880 <__umoddi3>:
c001f880:	55                   	push   ebp
c001f881:	57                   	push   edi
c001f882:	56                   	push   esi
c001f883:	53                   	push   ebx
c001f884:	83 ec 1c             	sub    esp,0x1c
c001f887:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f88b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f88f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f893:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f897:	89 da                	mov    edx,ebx
c001f899:	85 c0                	test   eax,eax
c001f89b:	75 37                	jne    c001f8d4 <__umoddi3+0x54>
c001f89d:	39 df                	cmp    edi,ebx
c001f89f:	76 13                	jbe    c001f8b4 <__umoddi3+0x34>
c001f8a1:	89 f0                	mov    eax,esi
c001f8a3:	f7 f7                	div    edi
c001f8a5:	89 d0                	mov    eax,edx
c001f8a7:	31 d2                	xor    edx,edx
c001f8a9:	83 c4 1c             	add    esp,0x1c
c001f8ac:	5b                   	pop    ebx
c001f8ad:	5e                   	pop    esi
c001f8ae:	5f                   	pop    edi
c001f8af:	5d                   	pop    ebp
c001f8b0:	c3                   	ret    
c001f8b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f8b4:	89 fd                	mov    ebp,edi
c001f8b6:	85 ff                	test   edi,edi
c001f8b8:	75 0b                	jne    c001f8c5 <__umoddi3+0x45>
c001f8ba:	b8 01 00 00 00       	mov    eax,0x1
c001f8bf:	31 d2                	xor    edx,edx
c001f8c1:	f7 f7                	div    edi
c001f8c3:	89 c5                	mov    ebp,eax
c001f8c5:	89 d8                	mov    eax,ebx
c001f8c7:	31 d2                	xor    edx,edx
c001f8c9:	f7 f5                	div    ebp
c001f8cb:	89 f0                	mov    eax,esi
c001f8cd:	f7 f5                	div    ebp
c001f8cf:	89 d0                	mov    eax,edx
c001f8d1:	eb d4                	jmp    c001f8a7 <__umoddi3+0x27>
c001f8d3:	90                   	nop
c001f8d4:	89 f1                	mov    ecx,esi
c001f8d6:	39 d8                	cmp    eax,ebx
c001f8d8:	76 0a                	jbe    c001f8e4 <__umoddi3+0x64>
c001f8da:	89 f0                	mov    eax,esi
c001f8dc:	83 c4 1c             	add    esp,0x1c
c001f8df:	5b                   	pop    ebx
c001f8e0:	5e                   	pop    esi
c001f8e1:	5f                   	pop    edi
c001f8e2:	5d                   	pop    ebp
c001f8e3:	c3                   	ret    
c001f8e4:	0f bd e8             	bsr    ebp,eax
c001f8e7:	83 f5 1f             	xor    ebp,0x1f
c001f8ea:	75 1c                	jne    c001f908 <__umoddi3+0x88>
c001f8ec:	39 d8                	cmp    eax,ebx
c001f8ee:	72 04                	jb     c001f8f4 <__umoddi3+0x74>
c001f8f0:	39 f7                	cmp    edi,esi
c001f8f2:	77 08                	ja     c001f8fc <__umoddi3+0x7c>
c001f8f4:	89 da                	mov    edx,ebx
c001f8f6:	29 fe                	sub    esi,edi
c001f8f8:	19 c2                	sbb    edx,eax
c001f8fa:	89 f1                	mov    ecx,esi
c001f8fc:	89 c8                	mov    eax,ecx
c001f8fe:	83 c4 1c             	add    esp,0x1c
c001f901:	5b                   	pop    ebx
c001f902:	5e                   	pop    esi
c001f903:	5f                   	pop    edi
c001f904:	5d                   	pop    ebp
c001f905:	c3                   	ret    
c001f906:	66 90                	xchg   ax,ax
c001f908:	ba 20 00 00 00       	mov    edx,0x20
c001f90d:	29 ea                	sub    edx,ebp
c001f90f:	89 e9                	mov    ecx,ebp
c001f911:	d3 e0                	shl    eax,cl
c001f913:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f917:	89 f8                	mov    eax,edi
c001f919:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f91d:	88 d1                	mov    cl,dl
c001f91f:	d3 e8                	shr    eax,cl
c001f921:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f925:	09 c1                	or     ecx,eax
c001f927:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f92b:	89 e9                	mov    ecx,ebp
c001f92d:	d3 e7                	shl    edi,cl
c001f92f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f933:	89 d8                	mov    eax,ebx
c001f935:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f939:	88 d1                	mov    cl,dl
c001f93b:	d3 e8                	shr    eax,cl
c001f93d:	89 c7                	mov    edi,eax
c001f93f:	89 e9                	mov    ecx,ebp
c001f941:	d3 e3                	shl    ebx,cl
c001f943:	89 f0                	mov    eax,esi
c001f945:	88 d1                	mov    cl,dl
c001f947:	d3 e8                	shr    eax,cl
c001f949:	09 d8                	or     eax,ebx
c001f94b:	89 e9                	mov    ecx,ebp
c001f94d:	d3 e6                	shl    esi,cl
c001f94f:	89 f3                	mov    ebx,esi
c001f951:	89 fa                	mov    edx,edi
c001f953:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f957:	89 d1                	mov    ecx,edx
c001f959:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f95d:	89 c6                	mov    esi,eax
c001f95f:	89 d7                	mov    edi,edx
c001f961:	39 d1                	cmp    ecx,edx
c001f963:	72 27                	jb     c001f98c <__umoddi3+0x10c>
c001f965:	74 21                	je     c001f988 <__umoddi3+0x108>
c001f967:	89 ca                	mov    edx,ecx
c001f969:	29 f3                	sub    ebx,esi
c001f96b:	19 fa                	sbb    edx,edi
c001f96d:	89 d0                	mov    eax,edx
c001f96f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f973:	d3 e0                	shl    eax,cl
c001f975:	89 e9                	mov    ecx,ebp
c001f977:	d3 eb                	shr    ebx,cl
c001f979:	09 d8                	or     eax,ebx
c001f97b:	d3 ea                	shr    edx,cl
c001f97d:	83 c4 1c             	add    esp,0x1c
c001f980:	5b                   	pop    ebx
c001f981:	5e                   	pop    esi
c001f982:	5f                   	pop    edi
c001f983:	5d                   	pop    ebp
c001f984:	c3                   	ret    
c001f985:	8d 76 00             	lea    esi,[esi+0x0]
c001f988:	39 c3                	cmp    ebx,eax
c001f98a:	73 db                	jae    c001f967 <__umoddi3+0xe7>
c001f98c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f990:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f994:	89 d7                	mov    edi,edx
c001f996:	89 c6                	mov    esi,eax
c001f998:	eb cd                	jmp    c001f967 <__umoddi3+0xe7>

Disassembly of section .init:

c001f99a <_init>:
c001f99a:	55                   	push   ebp
c001f99b:	89 e5                	mov    ebp,esp
c001f99d:	e8 52 07 fe ff       	call   c00000f4 <frame_dummy>
c001f9a2:	e8 e5 fa ff ff       	call   c001f48c <__do_global_ctors_aux>
c001f9a7:	5d                   	pop    ebp
c001f9a8:	c3                   	ret    

Disassembly of section .fini:

c001f9a9 <_fini>:
c001f9a9:	55                   	push   ebp
c001f9aa:	89 e5                	mov    ebp,esp
c001f9ac:	e8 d3 06 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f9b1:	5d                   	pop    ebp
c001f9b2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f9b4 <Computer::~Computer()>:
c001f9b4:	83 ec 0c             	sub    esp,0xc
c001f9b7:	ba d4 0c 02 c0       	mov    edx,0xc0020cd4
c001f9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c0:	89 10                	mov    DWORD PTR [eax],edx
c001f9c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c6:	83 ec 0c             	sub    esp,0xc
c001f9c9:	50                   	push   eax
c001f9ca:	e8 f9 ce fe ff       	call   c000c8c8 <Device::~Device()>
c001f9cf:	83 c4 10             	add    esp,0x10
c001f9d2:	90                   	nop
c001f9d3:	83 c4 0c             	add    esp,0xc
c001f9d6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f9d8 <Computer::~Computer()>:
c001f9d8:	83 ec 0c             	sub    esp,0xc
c001f9db:	83 ec 0c             	sub    esp,0xc
c001f9de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9e2:	e8 cd ff ff ff       	call   c001f9b4 <Computer::~Computer()>
c001f9e7:	83 c4 10             	add    esp,0x10
c001f9ea:	83 ec 08             	sub    esp,0x8
c001f9ed:	68 70 01 00 00       	push   0x170
c001f9f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9f6:	e8 1d ae fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f9fb:	83 c4 10             	add    esp,0x10
c001f9fe:	83 c4 0c             	add    esp,0xc
c001fa01:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001fa02 <idleCommon()>:
c001fa02:	83 ec 0c             	sub    esp,0xc
c001fa05:	fa                   	cli    
c001fa06:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001fa0c:	e8 f3 66 ff ff       	call   c0016104 <schedule()>
c001fa11:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001fa16:	48                   	dec    eax
c001fa17:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001fa1c:	75 01                	jne    c001fa1f <idleCommon()+0x1d>
c001fa1e:	fb                   	sti    
c001fa1f:	83 c4 0c             	add    esp,0xc
c001fa22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001fa24 <LinkedList<UnixFile>::~LinkedList()>:
c001fa24:	90                   	nop
c001fa25:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001fa26 <LinkedList<UnixFile>::LinkedList()>:
c001fa26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa2a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa34:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa3f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa5f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa66:	90                   	nop
c001fa67:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fa68 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fa68:	83 ec 0c             	sub    esp,0xc
c001fa6b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa70:	75 10                	jne    c001fa82 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fa72:	83 ec 0c             	sub    esp,0xc
c001fa75:	68 e8 0e 02 c0       	push   0xc0020ee8
c001fa7a:	e8 a0 1b ff ff       	call   c001161f <KePanic(char const*)>
c001fa7f:	83 c4 10             	add    esp,0x10
c001fa82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa86:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa88:	85 c0                	test   eax,eax
c001fa8a:	74 34                	je     c001fac0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fa8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa93:	85 c0                	test   eax,eax
c001fa95:	74 29                	je     c001fac0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fa97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001faa2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001faa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001faad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fab7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fabe:	eb 65                	jmp    c001fb25 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fac6:	85 c0                	test   eax,eax
c001fac8:	75 4b                	jne    c001fb15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001faca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001face:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fad1:	85 c0                	test   eax,eax
c001fad3:	75 40                	jne    c001fb15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fadd:	89 10                	mov    DWORD PTR [eax],edx
c001fadf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fae7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001faea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faf1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001faf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fafc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faff:	85 c0                	test   eax,eax
c001fb01:	74 22                	je     c001fb25 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb03:	83 ec 0c             	sub    esp,0xc
c001fb06:	68 0a 0f 02 c0       	push   0xc0020f0a
c001fb0b:	e8 0f 1b ff ff       	call   c001161f <KePanic(char const*)>
c001fb10:	83 c4 10             	add    esp,0x10
c001fb13:	eb 10                	jmp    c001fb25 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb15:	83 ec 0c             	sub    esp,0xc
c001fb18:	68 14 0f 02 c0       	push   0xc0020f14
c001fb1d:	e8 fd 1a ff ff       	call   c001161f <KePanic(char const*)>
c001fb22:	83 c4 10             	add    esp,0x10
c001fb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb29:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb2c:	8d 50 01             	lea    edx,[eax+0x1]
c001fb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb33:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb36:	90                   	nop
c001fb37:	83 c4 0c             	add    esp,0xc
c001fb3a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fb3c <LinkedList<UnixFile>::getFirstElement()>:
c001fb3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb40:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb42:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fb44 <LinkedList<UnixFile>::removeFirst()>:
c001fb44:	83 ec 0c             	sub    esp,0xc
c001fb47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb4d:	85 c0                	test   eax,eax
c001fb4f:	75 12                	jne    c001fb63 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fb51:	83 ec 0c             	sub    esp,0xc
c001fb54:	68 20 0f 02 c0       	push   0xc0020f20
c001fb59:	e8 c1 1a ff ff       	call   c001161f <KePanic(char const*)>
c001fb5e:	83 c4 10             	add    esp,0x10
c001fb61:	eb 7e                	jmp    c001fbe1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fb63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb6a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb6d:	85 c0                	test   eax,eax
c001fb6f:	74 10                	je     c001fb81 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fb71:	83 ec 0c             	sub    esp,0xc
c001fb74:	68 6b 0f 02 c0       	push   0xc0020f6b
c001fb79:	e8 a1 1a ff ff       	call   c001161f <KePanic(char const*)>
c001fb7e:	83 c4 10             	add    esp,0x10
c001fb81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb85:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb87:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb8a:	85 c0                	test   eax,eax
c001fb8c:	75 33                	jne    c001fbc1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fb8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbaa:	83 f8 01             	cmp    eax,0x1
c001fbad:	74 21                	je     c001fbd0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fbaf:	83 ec 0c             	sub    esp,0xc
c001fbb2:	68 44 0f 02 c0       	push   0xc0020f44
c001fbb7:	e8 63 1a ff ff       	call   c001161f <KePanic(char const*)>
c001fbbc:	83 c4 10             	add    esp,0x10
c001fbbf:	eb 0f                	jmp    c001fbd0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fbc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbc7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fbca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbce:	89 10                	mov    DWORD PTR [eax],edx
c001fbd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbd7:	8d 50 ff             	lea    edx,[eax-0x1]
c001fbda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbde:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fbe1:	83 c4 0c             	add    esp,0xc
c001fbe4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fbe6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fbe6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbed:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fbee <DriverlessDevice::~DriverlessDevice()>:
c001fbee:	ba 7c 1b 02 c0       	mov    edx,0xc0021b7c
c001fbf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbf7:	89 10                	mov    DWORD PTR [eax],edx
c001fbf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbfd:	50                   	push   eax
c001fbfe:	e8 c5 cc fe ff       	call   c000c8c8 <Device::~Device()>
c001fc03:	83 c4 04             	add    esp,0x4
c001fc06:	90                   	nop
c001fc07:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fc08 <DriverlessDevice::~DriverlessDevice()>:
c001fc08:	83 ec 0c             	sub    esp,0xc
c001fc0b:	83 ec 0c             	sub    esp,0xc
c001fc0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc12:	e8 d7 ff ff ff       	call   c001fbee <DriverlessDevice::~DriverlessDevice()>
c001fc17:	83 c4 10             	add    esp,0x10
c001fc1a:	83 ec 08             	sub    esp,0x8
c001fc1d:	68 58 01 00 00       	push   0x158
c001fc22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc26:	e8 ed ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc2b:	83 c4 10             	add    esp,0x10
c001fc2e:	83 c4 0c             	add    esp,0xc
c001fc31:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fc32 <LinkedList<Device>::addElement(Device*)>:
c001fc32:	83 ec 0c             	sub    esp,0xc
c001fc35:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fc3a:	75 10                	jne    c001fc4c <LinkedList<Device>::addElement(Device*)+0x1a>
c001fc3c:	83 ec 0c             	sub    esp,0xc
c001fc3f:	68 e8 0e 02 c0       	push   0xc0020ee8
c001fc44:	e8 d6 19 ff ff       	call   c001161f <KePanic(char const*)>
c001fc49:	83 c4 10             	add    esp,0x10
c001fc4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc50:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc52:	85 c0                	test   eax,eax
c001fc54:	74 3a                	je     c001fc90 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fc56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc5d:	85 c0                	test   eax,eax
c001fc5f:	74 2f                	je     c001fc90 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fc61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc6c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fc72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc7a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc84:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fc8e:	eb 68                	jmp    c001fcf8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc94:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc96:	85 c0                	test   eax,eax
c001fc98:	75 4e                	jne    c001fce8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fca1:	85 c0                	test   eax,eax
c001fca3:	75 43                	jne    c001fce8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcad:	89 10                	mov    DWORD PTR [eax],edx
c001fcaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcb7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fcba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcc1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fccf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fcd2:	85 c0                	test   eax,eax
c001fcd4:	74 22                	je     c001fcf8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fcd6:	83 ec 0c             	sub    esp,0xc
c001fcd9:	68 0a 0f 02 c0       	push   0xc0020f0a
c001fcde:	e8 3c 19 ff ff       	call   c001161f <KePanic(char const*)>
c001fce3:	83 c4 10             	add    esp,0x10
c001fce6:	eb 10                	jmp    c001fcf8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fce8:	83 ec 0c             	sub    esp,0xc
c001fceb:	68 14 0f 02 c0       	push   0xc0020f14
c001fcf0:	e8 2a 19 ff ff       	call   c001161f <KePanic(char const*)>
c001fcf5:	83 c4 10             	add    esp,0x10
c001fcf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fcff:	8d 50 01             	lea    edx,[eax+0x1]
c001fd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd06:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd09:	90                   	nop
c001fd0a:	83 c4 0c             	add    esp,0xc
c001fd0d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fd0e <LinkedList<Device>::LinkedList()>:
c001fd0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd32:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd47:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd4e:	90                   	nop
c001fd4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fd50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fd50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd54:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd56:	85 c0                	test   eax,eax
c001fd58:	75 0e                	jne    c001fd68 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fd5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd61:	85 c0                	test   eax,eax
c001fd63:	75 03                	jne    c001fd68 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fd65:	b0 01                	mov    al,0x1
c001fd67:	c3                   	ret    
c001fd68:	b0 00                	mov    al,0x0
c001fd6a:	90                   	nop
c001fd6b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fd6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fd6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd70:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fd74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fd74:	83 ec 0c             	sub    esp,0xc
c001fd77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd7d:	85 c0                	test   eax,eax
c001fd7f:	75 17                	jne    c001fd98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fd81:	83 ec 0c             	sub    esp,0xc
c001fd84:	68 20 0f 02 c0       	push   0xc0020f20
c001fd89:	e8 91 18 ff ff       	call   c001161f <KePanic(char const*)>
c001fd8e:	83 c4 10             	add    esp,0x10
c001fd91:	e9 96 00 00 00       	jmp    c001fe2c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fd96:	66 90                	xchg   ax,ax
c001fd98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd9f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fda2:	85 c0                	test   eax,eax
c001fda4:	0f 95 c0             	setne  al
c001fda7:	0f b6 c0             	movzx  eax,al
c001fdaa:	85 c0                	test   eax,eax
c001fdac:	74 12                	je     c001fdc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fdae:	83 ec 0c             	sub    esp,0xc
c001fdb1:	68 6b 0f 02 c0       	push   0xc0020f6b
c001fdb6:	e8 64 18 ff ff       	call   c001161f <KePanic(char const*)>
c001fdbb:	83 c4 10             	add    esp,0x10
c001fdbe:	66 90                	xchg   ax,ax
c001fdc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdc6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fdc9:	85 c0                	test   eax,eax
c001fdcb:	0f 94 c0             	sete   al
c001fdce:	0f b6 c0             	movzx  eax,al
c001fdd1:	85 c0                	test   eax,eax
c001fdd3:	74 33                	je     c001fe08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fdd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fdf1:	83 f8 01             	cmp    eax,0x1
c001fdf4:	74 22                	je     c001fe18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fdf6:	83 ec 0c             	sub    esp,0xc
c001fdf9:	68 44 0f 02 c0       	push   0xc0020f44
c001fdfe:	e8 1c 18 ff ff       	call   c001161f <KePanic(char const*)>
c001fe03:	83 c4 10             	add    esp,0x10
c001fe06:	eb 10                	jmp    c001fe18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe0e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fe11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe15:	89 10                	mov    DWORD PTR [eax],edx
c001fe17:	90                   	nop
c001fe18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe1f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fe22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe26:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe29:	8d 76 00             	lea    esi,[esi+0x0]
c001fe2c:	83 c4 0c             	add    esp,0xc
c001fe2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fe30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fe30:	83 ec 0c             	sub    esp,0xc
c001fe33:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fe38:	75 12                	jne    c001fe4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fe3a:	83 ec 0c             	sub    esp,0xc
c001fe3d:	68 e8 0e 02 c0       	push   0xc0020ee8
c001fe42:	e8 d8 17 ff ff       	call   c001161f <KePanic(char const*)>
c001fe47:	83 c4 10             	add    esp,0x10
c001fe4a:	66 90                	xchg   ax,ax
c001fe4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe50:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe52:	85 c0                	test   eax,eax
c001fe54:	74 36                	je     c001fe8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fe56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe5d:	85 c0                	test   eax,eax
c001fe5f:	74 2b                	je     c001fe8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fe61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe6c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fe6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe81:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe88:	eb 6a                	jmp    c001fef4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe8a:	66 90                	xchg   ax,ax
c001fe8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe90:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe92:	85 c0                	test   eax,eax
c001fe94:	75 4e                	jne    c001fee4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fe96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe9d:	85 c0                	test   eax,eax
c001fe9f:	75 43                	jne    c001fee4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fea9:	89 10                	mov    DWORD PTR [eax],edx
c001feab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001feb3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001feb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001febd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fecb:	85 c0                	test   eax,eax
c001fecd:	74 25                	je     c001fef4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fecf:	83 ec 0c             	sub    esp,0xc
c001fed2:	68 0a 0f 02 c0       	push   0xc0020f0a
c001fed7:	e8 43 17 ff ff       	call   c001161f <KePanic(char const*)>
c001fedc:	83 c4 10             	add    esp,0x10
c001fedf:	eb 13                	jmp    c001fef4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fee1:	8d 76 00             	lea    esi,[esi+0x0]
c001fee4:	83 ec 0c             	sub    esp,0xc
c001fee7:	68 14 0f 02 c0       	push   0xc0020f14
c001feec:	e8 2e 17 ff ff       	call   c001161f <KePanic(char const*)>
c001fef1:	83 c4 10             	add    esp,0x10
c001fef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fefb:	8d 50 01             	lea    edx,[eax+0x1]
c001fefe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff05:	90                   	nop
c001ff06:	83 c4 0c             	add    esp,0xc
c001ff09:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ff0c <ACPI::~ACPI()>:
c001ff0c:	83 ec 0c             	sub    esp,0xc
c001ff0f:	ba 80 21 02 c0       	mov    edx,0xc0022180
c001ff14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff18:	89 10                	mov    DWORD PTR [eax],edx
c001ff1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff1e:	83 ec 0c             	sub    esp,0xc
c001ff21:	50                   	push   eax
c001ff22:	e8 a1 c9 fe ff       	call   c000c8c8 <Device::~Device()>
c001ff27:	83 c4 10             	add    esp,0x10
c001ff2a:	90                   	nop
c001ff2b:	83 c4 0c             	add    esp,0xc
c001ff2e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ff30 <ACPI::~ACPI()>:
c001ff30:	83 ec 0c             	sub    esp,0xc
c001ff33:	83 ec 0c             	sub    esp,0xc
c001ff36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff3a:	e8 cd ff ff ff       	call   c001ff0c <ACPI::~ACPI()>
c001ff3f:	83 c4 10             	add    esp,0x10
c001ff42:	83 ec 08             	sub    esp,0x8
c001ff45:	68 64 12 00 00       	push   0x1264
c001ff4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff4e:	e8 c5 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff53:	83 c4 10             	add    esp,0x10
c001ff56:	83 c4 0c             	add    esp,0xc
c001ff59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ff5c <LinkedList<Device>::~LinkedList()>:
c001ff5c:	90                   	nop
c001ff5d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ff60 <LinkedList<Device>::isEmpty()>:
c001ff60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff64:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff66:	85 c0                	test   eax,eax
c001ff68:	75 0e                	jne    c001ff78 <LinkedList<Device>::isEmpty()+0x18>
c001ff6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff71:	85 c0                	test   eax,eax
c001ff73:	75 03                	jne    c001ff78 <LinkedList<Device>::isEmpty()+0x18>
c001ff75:	b0 01                	mov    al,0x1
c001ff77:	c3                   	ret    
c001ff78:	b0 00                	mov    al,0x0
c001ff7a:	90                   	nop
c001ff7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ff7c <LinkedList<Device>::getFirstElement()>:
c001ff7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ff84 <LinkedList<Device>::removeFirst()>:
c001ff84:	83 ec 0c             	sub    esp,0xc
c001ff87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff8d:	85 c0                	test   eax,eax
c001ff8f:	75 17                	jne    c001ffa8 <LinkedList<Device>::removeFirst()+0x24>
c001ff91:	83 ec 0c             	sub    esp,0xc
c001ff94:	68 20 0f 02 c0       	push   0xc0020f20
c001ff99:	e8 81 16 ff ff       	call   c001161f <KePanic(char const*)>
c001ff9e:	83 c4 10             	add    esp,0x10
c001ffa1:	e9 92 00 00 00       	jmp    c0020038 <LinkedList<Device>::removeFirst()+0xb4>
c001ffa6:	66 90                	xchg   ax,ax
c001ffa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffaf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ffb5:	85 c0                	test   eax,eax
c001ffb7:	74 13                	je     c001ffcc <LinkedList<Device>::removeFirst()+0x48>
c001ffb9:	83 ec 0c             	sub    esp,0xc
c001ffbc:	68 6b 0f 02 c0       	push   0xc0020f6b
c001ffc1:	e8 59 16 ff ff       	call   c001161f <KePanic(char const*)>
c001ffc6:	83 c4 10             	add    esp,0x10
c001ffc9:	8d 76 00             	lea    esi,[esi+0x0]
c001ffcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffd2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ffd8:	85 c0                	test   eax,eax
c001ffda:	75 34                	jne    c0020010 <LinkedList<Device>::removeFirst()+0x8c>
c001ffdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffe0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ffe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fff8:	83 f8 01             	cmp    eax,0x1
c001fffb:	74 27                	je     c0020024 <LinkedList<Device>::removeFirst()+0xa0>
c001fffd:	83 ec 0c             	sub    esp,0xc
c0020000:	68 44 0f 02 c0       	push   0xc0020f44
c0020005:	e8 15 16 ff ff       	call   c001161f <KePanic(char const*)>
c002000a:	83 c4 10             	add    esp,0x10
c002000d:	eb 15                	jmp    c0020024 <LinkedList<Device>::removeFirst()+0xa0>
c002000f:	90                   	nop
c0020010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020014:	8b 00                	mov    eax,DWORD PTR [eax]
c0020016:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002001c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020020:	89 10                	mov    DWORD PTR [eax],edx
c0020022:	66 90                	xchg   ax,ax
c0020024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020028:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002002b:	8d 50 ff             	lea    edx,[eax-0x1]
c002002e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020032:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020035:	8d 76 00             	lea    esi,[esi+0x0]
c0020038:	83 c4 0c             	add    esp,0xc
c002003b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002003c <CPU::~CPU()>:
c002003c:	83 ec 0c             	sub    esp,0xc
c002003f:	ba 28 23 02 c0       	mov    edx,0xc0022328
c0020044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020048:	89 10                	mov    DWORD PTR [eax],edx
c002004a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002004e:	83 ec 0c             	sub    esp,0xc
c0020051:	50                   	push   eax
c0020052:	e8 71 c8 fe ff       	call   c000c8c8 <Device::~Device()>
c0020057:	83 c4 10             	add    esp,0x10
c002005a:	90                   	nop
c002005b:	83 c4 0c             	add    esp,0xc
c002005e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020060 <CPU::~CPU()>:
c0020060:	83 ec 0c             	sub    esp,0xc
c0020063:	83 ec 0c             	sub    esp,0xc
c0020066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002006a:	e8 cd ff ff ff       	call   c002003c <CPU::~CPU()>
c002006f:	83 c4 10             	add    esp,0x10
c0020072:	83 ec 08             	sub    esp,0x8
c0020075:	68 94 11 00 00       	push   0x1194
c002007a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002007e:	e8 95 a7 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020083:	83 c4 10             	add    esp,0x10
c0020086:	83 c4 0c             	add    esp,0xc
c0020089:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002008c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002008c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020090:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020093:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020094 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020094:	90                   	nop
c0020095:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020098 <ThreadControlBlock::ThreadControlBlock()>:
c0020098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002009c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00200a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200a7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00200ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200b2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00200b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200bd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00200c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200c8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00200cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200d3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00200d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200db:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00200df:	90                   	nop
c00200e0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00200e4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00200e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200e8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00200ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200f2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00200f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200fd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020104:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020108:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002010e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020112:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020119:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002011d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020124:	90                   	nop
c0020125:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020126 <PCI::~PCI()>:
c0020126:	83 ec 0c             	sub    esp,0xc
c0020129:	ba 08 32 02 c0       	mov    edx,0xc0023208
c002012e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020132:	89 10                	mov    DWORD PTR [eax],edx
c0020134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020138:	83 ec 0c             	sub    esp,0xc
c002013b:	50                   	push   eax
c002013c:	e8 1f c2 fe ff       	call   c000c360 <Bus::~Bus()>
c0020141:	83 c4 10             	add    esp,0x10
c0020144:	90                   	nop
c0020145:	83 c4 0c             	add    esp,0xc
c0020148:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002014a <PCI::~PCI()>:
c002014a:	83 ec 0c             	sub    esp,0xc
c002014d:	83 ec 0c             	sub    esp,0xc
c0020150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020154:	e8 cd ff ff ff       	call   c0020126 <PCI::~PCI()>
c0020159:	83 c4 10             	add    esp,0x10
c002015c:	83 ec 08             	sub    esp,0x8
c002015f:	68 5c 01 00 00       	push   0x15c
c0020164:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020168:	e8 ab a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002016d:	83 c4 10             	add    esp,0x10
c0020170:	83 c4 0c             	add    esp,0xc
c0020173:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020174 <IDE::~IDE()>:
c0020174:	83 ec 0c             	sub    esp,0xc
c0020177:	ba bc 32 02 c0       	mov    edx,0xc00232bc
c002017c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020180:	89 10                	mov    DWORD PTR [eax],edx
c0020182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020186:	83 ec 0c             	sub    esp,0xc
c0020189:	50                   	push   eax
c002018a:	e8 b1 cb fe ff       	call   c000cd40 <HardDiskController::~HardDiskController()>
c002018f:	83 c4 10             	add    esp,0x10
c0020192:	90                   	nop
c0020193:	83 c4 0c             	add    esp,0xc
c0020196:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020198 <IDE::~IDE()>:
c0020198:	83 ec 0c             	sub    esp,0xc
c002019b:	83 ec 0c             	sub    esp,0xc
c002019e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201a2:	e8 cd ff ff ff       	call   c0020174 <IDE::~IDE()>
c00201a7:	83 c4 10             	add    esp,0x10
c00201aa:	83 ec 08             	sub    esp,0x8
c00201ad:	68 70 02 00 00       	push   0x270
c00201b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201b6:	e8 5d a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00201bb:	83 c4 10             	add    esp,0x10
c00201be:	83 c4 0c             	add    esp,0xc
c00201c1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00201c2 <SATABus::~SATABus()>:
c00201c2:	83 ec 0c             	sub    esp,0xc
c00201c5:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c00201ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ce:	89 10                	mov    DWORD PTR [eax],edx
c00201d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d4:	83 ec 0c             	sub    esp,0xc
c00201d7:	50                   	push   eax
c00201d8:	e8 63 cb fe ff       	call   c000cd40 <HardDiskController::~HardDiskController()>
c00201dd:	83 c4 10             	add    esp,0x10
c00201e0:	90                   	nop
c00201e1:	83 c4 0c             	add    esp,0xc
c00201e4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00201e6 <SATABus::~SATABus()>:
c00201e6:	83 ec 0c             	sub    esp,0xc
c00201e9:	83 ec 0c             	sub    esp,0xc
c00201ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201f0:	e8 cd ff ff ff       	call   c00201c2 <SATABus::~SATABus()>
c00201f5:	83 c4 10             	add    esp,0x10
c00201f8:	83 ec 08             	sub    esp,0x8
c00201fb:	68 64 01 00 00       	push   0x164
c0020200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020204:	e8 0f a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020209:	83 c4 10             	add    esp,0x10
c002020c:	83 c4 0c             	add    esp,0xc
c002020f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020210 <ATA::~ATA()>:
c0020210:	83 ec 0c             	sub    esp,0xc
c0020213:	ba 4c 33 02 c0       	mov    edx,0xc002334c
c0020218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002021c:	89 10                	mov    DWORD PTR [eax],edx
c002021e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020222:	83 ec 0c             	sub    esp,0xc
c0020225:	50                   	push   eax
c0020226:	e8 f7 cb fe ff       	call   c000ce22 <PhysicalDisk::~PhysicalDisk()>
c002022b:	83 c4 10             	add    esp,0x10
c002022e:	90                   	nop
c002022f:	83 c4 0c             	add    esp,0xc
c0020232:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020234 <ATA::~ATA()>:
c0020234:	83 ec 0c             	sub    esp,0xc
c0020237:	83 ec 0c             	sub    esp,0xc
c002023a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002023e:	e8 cd ff ff ff       	call   c0020210 <ATA::~ATA()>
c0020243:	83 c4 10             	add    esp,0x10
c0020246:	83 ec 08             	sub    esp,0x8
c0020249:	68 7c 01 00 00       	push   0x17c
c002024e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020252:	e8 c1 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020257:	83 c4 10             	add    esp,0x10
c002025a:	83 c4 0c             	add    esp,0xc
c002025d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002025e <ATAPI::~ATAPI()>:
c002025e:	83 ec 0c             	sub    esp,0xc
c0020261:	ba 94 33 02 c0       	mov    edx,0xc0023394
c0020266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026a:	89 10                	mov    DWORD PTR [eax],edx
c002026c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020270:	83 ec 0c             	sub    esp,0xc
c0020273:	50                   	push   eax
c0020274:	e8 a9 cb fe ff       	call   c000ce22 <PhysicalDisk::~PhysicalDisk()>
c0020279:	83 c4 10             	add    esp,0x10
c002027c:	90                   	nop
c002027d:	83 c4 0c             	add    esp,0xc
c0020280:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020282 <ATAPI::~ATAPI()>:
c0020282:	83 ec 0c             	sub    esp,0xc
c0020285:	83 ec 0c             	sub    esp,0xc
c0020288:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002028c:	e8 cd ff ff ff       	call   c002025e <ATAPI::~ATAPI()>
c0020291:	83 c4 10             	add    esp,0x10
c0020294:	83 ec 08             	sub    esp,0x8
c0020297:	68 84 01 00 00       	push   0x184
c002029c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202a0:	e8 73 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00202a5:	83 c4 10             	add    esp,0x10
c00202a8:	83 c4 0c             	add    esp,0xc
c00202ab:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00202ac <SATA::~SATA()>:
c00202ac:	83 ec 0c             	sub    esp,0xc
c00202af:	ba 48 34 02 c0       	mov    edx,0xc0023448
c00202b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b8:	89 10                	mov    DWORD PTR [eax],edx
c00202ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202be:	83 ec 0c             	sub    esp,0xc
c00202c1:	50                   	push   eax
c00202c2:	e8 5b cb fe ff       	call   c000ce22 <PhysicalDisk::~PhysicalDisk()>
c00202c7:	83 c4 10             	add    esp,0x10
c00202ca:	90                   	nop
c00202cb:	83 c4 0c             	add    esp,0xc
c00202ce:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00202d0 <SATA::~SATA()>:
c00202d0:	83 ec 0c             	sub    esp,0xc
c00202d3:	83 ec 0c             	sub    esp,0xc
c00202d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202da:	e8 cd ff ff ff       	call   c00202ac <SATA::~SATA()>
c00202df:	83 c4 10             	add    esp,0x10
c00202e2:	83 ec 08             	sub    esp,0x8
c00202e5:	68 7c 01 00 00       	push   0x17c
c00202ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ee:	e8 25 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00202f3:	83 c4 10             	add    esp,0x10
c00202f6:	83 c4 0c             	add    esp,0xc
c00202f9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00202fa <SATAPI::~SATAPI()>:
c00202fa:	83 ec 0c             	sub    esp,0xc
c00202fd:	ba 6c 35 02 c0       	mov    edx,0xc002356c
c0020302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020306:	89 10                	mov    DWORD PTR [eax],edx
c0020308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002030c:	83 ec 0c             	sub    esp,0xc
c002030f:	50                   	push   eax
c0020310:	e8 0d cb fe ff       	call   c000ce22 <PhysicalDisk::~PhysicalDisk()>
c0020315:	83 c4 10             	add    esp,0x10
c0020318:	90                   	nop
c0020319:	83 c4 0c             	add    esp,0xc
c002031c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002031e <SATAPI::~SATAPI()>:
c002031e:	83 ec 0c             	sub    esp,0xc
c0020321:	83 ec 0c             	sub    esp,0xc
c0020324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020328:	e8 cd ff ff ff       	call   c00202fa <SATAPI::~SATAPI()>
c002032d:	83 c4 10             	add    esp,0x10
c0020330:	83 ec 08             	sub    esp,0x8
c0020333:	68 84 01 00 00       	push   0x184
c0020338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002033c:	e8 d7 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020341:	83 c4 10             	add    esp,0x10
c0020344:	83 c4 0c             	add    esp,0xc
c0020347:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020348 <IOAPIC::~IOAPIC()>:
c0020348:	83 ec 0c             	sub    esp,0xc
c002034b:	ba ac 35 02 c0       	mov    edx,0xc00235ac
c0020350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020354:	89 10                	mov    DWORD PTR [eax],edx
c0020356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002035a:	83 ec 0c             	sub    esp,0xc
c002035d:	50                   	push   eax
c002035e:	e8 65 c5 fe ff       	call   c000c8c8 <Device::~Device()>
c0020363:	83 c4 10             	add    esp,0x10
c0020366:	90                   	nop
c0020367:	83 c4 0c             	add    esp,0xc
c002036a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002036c <IOAPIC::~IOAPIC()>:
c002036c:	83 ec 0c             	sub    esp,0xc
c002036f:	83 ec 0c             	sub    esp,0xc
c0020372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020376:	e8 cd ff ff ff       	call   c0020348 <IOAPIC::~IOAPIC()>
c002037b:	83 c4 10             	add    esp,0x10
c002037e:	83 ec 08             	sub    esp,0x8
c0020381:	68 68 01 00 00       	push   0x168
c0020386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002038a:	e8 89 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002038f:	83 c4 10             	add    esp,0x10
c0020392:	83 c4 0c             	add    esp,0xc
c0020395:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020398 <APICTimer::~APICTimer()>:
c0020398:	83 ec 0c             	sub    esp,0xc
c002039b:	ba f4 35 02 c0       	mov    edx,0xc00235f4
c00203a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203a4:	89 10                	mov    DWORD PTR [eax],edx
c00203a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203aa:	83 ec 0c             	sub    esp,0xc
c00203ad:	50                   	push   eax
c00203ae:	e8 e1 df fe ff       	call   c000e394 <Timer::~Timer()>
c00203b3:	83 c4 10             	add    esp,0x10
c00203b6:	90                   	nop
c00203b7:	83 c4 0c             	add    esp,0xc
c00203ba:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00203bc <APICTimer::~APICTimer()>:
c00203bc:	83 ec 0c             	sub    esp,0xc
c00203bf:	83 ec 0c             	sub    esp,0xc
c00203c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203c6:	e8 cd ff ff ff       	call   c0020398 <APICTimer::~APICTimer()>
c00203cb:	83 c4 10             	add    esp,0x10
c00203ce:	83 ec 08             	sub    esp,0x8
c00203d1:	68 60 01 00 00       	push   0x160
c00203d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203da:	e8 39 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00203df:	83 c4 10             	add    esp,0x10
c00203e2:	83 c4 0c             	add    esp,0xc
c00203e5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00203e8 <PIT::~PIT()>:
c00203e8:	83 ec 0c             	sub    esp,0xc
c00203eb:	ba 44 36 02 c0       	mov    edx,0xc0023644
c00203f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203f4:	89 10                	mov    DWORD PTR [eax],edx
c00203f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203fa:	83 ec 0c             	sub    esp,0xc
c00203fd:	50                   	push   eax
c00203fe:	e8 91 df fe ff       	call   c000e394 <Timer::~Timer()>
c0020403:	83 c4 10             	add    esp,0x10
c0020406:	90                   	nop
c0020407:	83 c4 0c             	add    esp,0xc
c002040a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002040c <PIT::~PIT()>:
c002040c:	83 ec 0c             	sub    esp,0xc
c002040f:	83 ec 0c             	sub    esp,0xc
c0020412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020416:	e8 cd ff ff ff       	call   c00203e8 <PIT::~PIT()>
c002041b:	83 c4 10             	add    esp,0x10
c002041e:	83 ec 08             	sub    esp,0x8
c0020421:	68 5c 01 00 00       	push   0x15c
c0020426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002042a:	e8 e9 a3 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002042f:	83 c4 10             	add    esp,0x10
c0020432:	83 c4 0c             	add    esp,0xc
c0020435:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 59 24 02 c0       	mov    esi,0xc0022459
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 75 24 02 c0       	mov    esi,0xc0022475
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
